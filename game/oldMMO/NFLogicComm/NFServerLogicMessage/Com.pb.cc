// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPairBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPairBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComItemWithType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComItemWithType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr64_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFacadeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFacadeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSyncProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSyncProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueStarAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueStarAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetHatchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetHatchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WashSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WashSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipLvAttrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipLvAttrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultItemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultItemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailStrProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailStrProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAttachmentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAttachmentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailItemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailItemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemArgProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemArgProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleFacadeCastRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleFacadeCastRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePlayerMiniInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePlayerMiniInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationHateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationHateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationGiftRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationGiftRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DigPerfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DigPerfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPosProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPosProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilTaskProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilTaskProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilTaskListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilTaskListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilStageProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilStageProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFragmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFragmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountFantasyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountFantasyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountFragmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountFragmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountKunData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountKunData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountBloodData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountBloodData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountBabySlotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountBabySlotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsTaskGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsTaskGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskLimitEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskLimitEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskBackDayEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskBackDayEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskBackEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskBackEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskRewardEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskRewardEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskAllData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskAllData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBRecentSubmitMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDyMissionBountyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDyMissionBountyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDyMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPrestigeMissionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrestigeMissionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPrestigeMissionDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrestigeMissionDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyVipDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyVipDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyArenaReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallArenaReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyServerFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyServerFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSoulSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSoulSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSoulActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSoulActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSoulData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSoulData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSellProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSellProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityFantasySkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityFantasySkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityEquipSuitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityEquipSuitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityFantasyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityFantasyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityFragmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityFragmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeitySkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeitySkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityBattleSlotData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityBattleSlotData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorSuitState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorSuitState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationMissionSoulData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationMissionSoulData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationMissionStageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationMissionStageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationMissionGradeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationMissionGradeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupationMissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupationMissionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQEquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQBreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQBreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BestEQTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BestEQTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GrowType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DigPerforType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MountBloodState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MountBabySlotState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_GODRELICS_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_GODRELICS_GROUP_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_REWARD_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacadeSoulSkillStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FacadeSoulActivitytatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDeityEquipSuitStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DeityBattleSlotState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Com_2eproto() {
  protobuf_AddDesc_Com_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Com.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  ComPair_descriptor_ = file->message_type(1);
  static const int ComPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, value_),
  };
  ComPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair_descriptor_,
      ComPair::default_instance_,
      ComPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair));
  ComPair64_descriptor_ = file->message_type(2);
  static const int ComPair64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, value_),
  };
  ComPair64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair64_descriptor_,
      ComPair64::default_instance_,
      ComPair64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair64));
  ComPairBool_descriptor_ = file->message_type(3);
  static const int ComPairBool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, value_),
  };
  ComPairBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPairBool_descriptor_,
      ComPairBool::default_instance_,
      ComPairBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPairBool));
  ComItem_descriptor_ = file->message_type(4);
  static const int ComItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, item_num_),
  };
  ComItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComItem_descriptor_,
      ComItem::default_instance_,
      ComItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComItem));
  ComItemWithType_descriptor_ = file->message_type(5);
  static const int ComItemWithType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, type_),
  };
  ComItemWithType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComItemWithType_descriptor_,
      ComItemWithType::default_instance_,
      ComItemWithType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComItemWithType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComItemWithType));
  Vector3PB_descriptor_ = file->message_type(6);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  Vector2PB_descriptor_ = file->message_type(7);
  static const int Vector2PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, y_),
  };
  Vector2PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2PB_descriptor_,
      Vector2PB::default_instance_,
      Vector2PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2PB));
  Attr64_descriptor_ = file->message_type(8);
  static const int Attr64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, value_),
  };
  Attr64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr64_descriptor_,
      Attr64::default_instance_,
      Attr64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr64));
  RoleFacadeProto_descriptor_ = file->message_type(9);
  static const int RoleFacadeProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, growfacade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, prof_),
  };
  RoleFacadeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFacadeProto_descriptor_,
      RoleFacadeProto::default_instance_,
      RoleFacadeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFacadeProto));
  RoleListDBProto_descriptor_ = file->message_type(10);
  static const int RoleListDBProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastpos_),
  };
  RoleListDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBProto_descriptor_,
      RoleListDBProto::default_instance_,
      RoleListDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBProto));
  LoginRoleProto_descriptor_ = file->message_type(11);
  static const int LoginRoleProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, facade_),
  };
  LoginRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRoleProto_descriptor_,
      LoginRoleProto::default_instance_,
      LoginRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRoleProto));
  LoginSyncProto_descriptor_ = file->message_type(12);
  static const int LoginSyncProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, faction_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, faction_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, faction_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, cloness_lev_),
  };
  LoginSyncProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSyncProto_descriptor_,
      LoginSyncProto::default_instance_,
      LoginSyncProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSyncProto));
  CenterRoleProto_descriptor_ = file->message_type(13);
  static const int CenterRoleProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, lastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, max_hp_),
  };
  CenterRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRoleProto_descriptor_,
      CenterRoleProto::default_instance_,
      CenterRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRoleProto));
  SocialRoleProto_descriptor_ = file->message_type(14);
  static const int SocialRoleProto_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, lastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, mapid_),
  };
  SocialRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRoleProto_descriptor_,
      SocialRoleProto::default_instance_,
      SocialRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRoleProto));
  Attr_descriptor_ = file->message_type(15);
  static const int Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, value_),
  };
  Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr));
  BlueStarAttr_descriptor_ = file->message_type(16);
  static const int BlueStarAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, lv_part_),
  };
  BlueStarAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlueStarAttr_descriptor_,
      BlueStarAttr::default_instance_,
      BlueStarAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlueStarAttr));
  PetInfo_descriptor_ = file->message_type(17);
  static const int PetInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, steplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, activeskilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, exclusiveskilllvvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, passiveskilllvvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, initgrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, lvexp_),
  };
  PetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetInfo_descriptor_,
      PetInfo::default_instance_,
      PetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetInfo));
  PetHatchInfo_descriptor_ = file->message_type(18);
  static const int PetHatchInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, eggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, time_),
  };
  PetHatchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetHatchInfo_descriptor_,
      PetHatchInfo::default_instance_,
      PetHatchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetHatchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetHatchInfo));
  ItemProtoInfo_descriptor_ = file->message_type(19);
  static const int ItemProtoInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, refine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, strong_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, strong_wear_quality_),
  };
  ItemProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemProtoInfo_descriptor_,
      ItemProtoInfo::default_instance_,
      ItemProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemProtoInfo));
  StoneSlotInfo_descriptor_ = file->message_type(20);
  static const int StoneSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, stone_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, stoneid_),
  };
  StoneSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneSlotInfo_descriptor_,
      StoneSlotInfo::default_instance_,
      StoneSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneSlotInfo));
  WashSlotInfo_descriptor_ = file->message_type(21);
  static const int WashSlotInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, lock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, value_),
  };
  WashSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WashSlotInfo_descriptor_,
      WashSlotInfo::default_instance_,
      WashSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WashSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WashSlotInfo));
  EquipSlotInfo_descriptor_ = file->message_type(22);
  static const int EquipSlotInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, stronglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, stones_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, stone_pay_slot_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, washs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, suitlv_),
  };
  EquipSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlotInfo_descriptor_,
      EquipSlotInfo::default_instance_,
      EquipSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlotInfo));
  EquipInfo_descriptor_ = file->message_type(23);
  static const int EquipInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, slot_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  EquipLvAttrInfo_descriptor_ = file->message_type(24);
  static const int EquipLvAttrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrInfo, id_),
  };
  EquipLvAttrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipLvAttrInfo_descriptor_,
      EquipLvAttrInfo::default_instance_,
      EquipLvAttrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipLvAttrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipLvAttrInfo));
  ItemSimpleProto_descriptor_ = file->message_type(25);
  static const int ItemSimpleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, bind_),
  };
  ItemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSimpleProto_descriptor_,
      ItemSimpleProto::default_instance_,
      ItemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSimpleProto));
  MultItemSimpleProto_descriptor_ = file->message_type(26);
  static const int MultItemSimpleProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, info_),
  };
  MultItemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultItemSimpleProto_descriptor_,
      MultItemSimpleProto::default_instance_,
      MultItemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultItemSimpleProto));
  MailParamProto_descriptor_ = file->message_type(27);
  static const int MailParamProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, int_param_),
  };
  MailParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailParamProto_descriptor_,
      MailParamProto::default_instance_,
      MailParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailParamProto));
  MailStrProto_descriptor_ = file->message_type(28);
  static const int MailStrProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, param_),
  };
  MailStrProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailStrProto_descriptor_,
      MailStrProto::default_instance_,
      MailStrProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailStrProto));
  MailAttachmentList_descriptor_ = file->message_type(29);
  static const int MailAttachmentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, iteminfo_),
  };
  MailAttachmentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAttachmentList_descriptor_,
      MailAttachmentList::default_instance_,
      MailAttachmentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAttachmentList));
  MailHead_descriptor_ = file->message_type(30);
  static const int MailHead_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, destplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, has_attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, end_time_),
  };
  MailHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailHead_descriptor_,
      MailHead::default_instance_,
      MailHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailHead));
  MailInfo_descriptor_ = file->message_type(31);
  static const int MailInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, magiccrystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, attachmentlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sourceval_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  WebMailItemProto_descriptor_ = file->message_type(32);
  static const int WebMailItemProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, num_),
  };
  WebMailItemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailItemProto_descriptor_,
      WebMailItemProto::default_instance_,
      WebMailItemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailItemProto));
  WebMailDataProto_descriptor_ = file->message_type(33);
  static const int WebMailDataProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, arenascore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, magiccrystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, itemlist_),
  };
  WebMailDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDataProto_descriptor_,
      WebMailDataProto::default_instance_,
      WebMailDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDataProto));
  UseItemArgProto_descriptor_ = file->message_type(34);
  static const int UseItemArgProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, item_lst_),
  };
  UseItemArgProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemArgProto_descriptor_,
      UseItemArgProto::default_instance_,
      UseItemArgProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemArgProto));
  NotifyRoleFacadeCastRsp_descriptor_ = file->message_type(35);
  static const int NotifyRoleFacadeCastRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, facade_),
  };
  NotifyRoleFacadeCastRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleFacadeCastRsp_descriptor_,
      NotifyRoleFacadeCastRsp::default_instance_,
      NotifyRoleFacadeCastRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleFacadeCastRsp));
  FunctionUnlockInfoData_descriptor_ = file->message_type(36);
  static const int FunctionUnlockInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, unlockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, get_reward_),
  };
  FunctionUnlockInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfoData_descriptor_,
      FunctionUnlockInfoData::default_instance_,
      FunctionUnlockInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfoData));
  FunctionUnlockInfo_descriptor_ = file->message_type(37);
  static const int FunctionUnlockInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, data_),
  };
  FunctionUnlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfo_descriptor_,
      FunctionUnlockInfo::default_instance_,
      FunctionUnlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfo));
  RolePlayerMiniInfo_descriptor_ = file->message_type(38);
  static const int RolePlayerMiniInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, recenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, recenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, killmetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, marry_),
  };
  RolePlayerMiniInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePlayerMiniInfo_descriptor_,
      RolePlayerMiniInfo::default_instance_,
      RolePlayerMiniInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePlayerMiniInfo));
  FriendInfo_descriptor_ = file->message_type(39);
  static const int FriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, todaycloseness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, updatetime_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  FriendApplyInfo_descriptor_ = file->message_type(40);
  static const int FriendApplyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, connect_),
  };
  FriendApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyInfo_descriptor_,
      FriendApplyInfo::default_instance_,
      FriendApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyInfo));
  RelationHateInfo_descriptor_ = file->message_type(41);
  static const int RelationHateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, killmetimes_),
  };
  RelationHateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationHateInfo_descriptor_,
      RelationHateInfo::default_instance_,
      RelationHateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationHateInfo));
  RelationGiftRecord_descriptor_ = file->message_type(42);
  static const int RelationGiftRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, isthanks_),
  };
  RelationGiftRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationGiftRecord_descriptor_,
      RelationGiftRecord::default_instance_,
      RelationGiftRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationGiftRecord));
  RelationDBInfo_descriptor_ = file->message_type(43);
  static const int RelationDBInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, hatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, applylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, friends_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, giftrecords_),
  };
  RelationDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationDBInfo_descriptor_,
      RelationDBInfo::default_instance_,
      RelationDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationDBInfo));
  DigPerfor_descriptor_ = file->message_type(44);
  static const int DigPerfor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, value_),
  };
  DigPerfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DigPerfor_descriptor_,
      DigPerfor::default_instance_,
      DigPerfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DigPerfor));
  BuffProto_descriptor_ = file->message_type(45);
  static const int BuffProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, buff_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, recver_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, left_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, skill_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, is_effect_),
  };
  BuffProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffProto_descriptor_,
      BuffProto::default_instance_,
      BuffProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffProto));
  BuffListProto_descriptor_ = file->message_type(46);
  static const int BuffListProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, info_),
  };
  BuffListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffListProto_descriptor_,
      BuffListProto::default_instance_,
      BuffListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffListProto));
  SkillPosProto_descriptor_ = file->message_type(47);
  static const int SkillPosProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, use_),
  };
  SkillPosProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPosProto_descriptor_,
      SkillPosProto::default_instance_,
      SkillPosProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPosProto));
  SkillGroupProto_descriptor_ = file->message_type(48);
  static const int SkillGroupProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, lst_),
  };
  SkillGroupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupProto_descriptor_,
      SkillGroupProto::default_instance_,
      SkillGroupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupProto));
  SkillGroupListProto_descriptor_ = file->message_type(49);
  static const int SkillGroupListProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, cur_skill_group_),
  };
  SkillGroupListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupListProto_descriptor_,
      SkillGroupListProto::default_instance_,
      SkillGroupListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupListProto));
  GodEvilTaskProto_descriptor_ = file->message_type(50);
  static const int GodEvilTaskProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskProto, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskProto, state_),
  };
  GodEvilTaskProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilTaskProto_descriptor_,
      GodEvilTaskProto::default_instance_,
      GodEvilTaskProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilTaskProto));
  GodEvilTaskListProto_descriptor_ = file->message_type(51);
  static const int GodEvilTaskListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskListProto, lst_),
  };
  GodEvilTaskListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilTaskListProto_descriptor_,
      GodEvilTaskListProto::default_instance_,
      GodEvilTaskListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilTaskListProto));
  GodEvilStageProto_descriptor_ = file->message_type(52);
  static const int GodEvilStageProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilStageProto, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilStageProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilStageProto, finish_),
  };
  GodEvilStageProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilStageProto_descriptor_,
      GodEvilStageProto::default_instance_,
      GodEvilStageProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilStageProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilStageProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilStageProto));
  GodEvilProto_descriptor_ = file->message_type(53);
  static const int GodEvilProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, vessel_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, mirror_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, extra_exp_),
  };
  GodEvilProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilProto_descriptor_,
      GodEvilProto::default_instance_,
      GodEvilProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilProto));
  FacadeFantasyData_descriptor_ = file->message_type(54);
  static const int FacadeFantasyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, fantasy_lev_),
  };
  FacadeFantasyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyData_descriptor_,
      FacadeFantasyData::default_instance_,
      FacadeFantasyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyData));
  FacadeFragmentData_descriptor_ = file->message_type(55);
  static const int FacadeFragmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, use_times_),
  };
  FacadeFragmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFragmentData_descriptor_,
      FacadeFragmentData::default_instance_,
      FacadeFragmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFragmentData));
  FacadeSkillData_descriptor_ = file->message_type(56);
  static const int FacadeSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, skill_lev_),
  };
  FacadeSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSkillData_descriptor_,
      FacadeSkillData::default_instance_,
      FacadeSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSkillData));
  MountFantasyData_descriptor_ = file->message_type(57);
  static const int MountFantasyData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, fantasy_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, fantasy_lev_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, fantasy_star_),
  };
  MountFantasyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountFantasyData_descriptor_,
      MountFantasyData::default_instance_,
      MountFantasyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFantasyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountFantasyData));
  MountFragmentData_descriptor_ = file->message_type(58);
  static const int MountFragmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFragmentData, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFragmentData, use_times_),
  };
  MountFragmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountFragmentData_descriptor_,
      MountFragmentData::default_instance_,
      MountFragmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFragmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountFragmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountFragmentData));
  MountSkillData_descriptor_ = file->message_type(59);
  static const int MountSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSkillData, skill_lev_),
  };
  MountSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountSkillData_descriptor_,
      MountSkillData::default_instance_,
      MountSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountSkillData));
  MountKunData_descriptor_ = file->message_type(60);
  static const int MountKunData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, kun_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, kun_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, kun_lev_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, kun_star_),
  };
  MountKunData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountKunData_descriptor_,
      MountKunData::default_instance_,
      MountKunData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountKunData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountKunData));
  MountBloodData_descriptor_ = file->message_type(61);
  static const int MountBloodData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBloodData, blood_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBloodData, blood_state_),
  };
  MountBloodData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountBloodData_descriptor_,
      MountBloodData::default_instance_,
      MountBloodData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBloodData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBloodData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountBloodData));
  MountBabySlotData_descriptor_ = file->message_type(62);
  static const int MountBabySlotData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, cur_baby_eggid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, cur_baby_create_time_),
  };
  MountBabySlotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountBabySlotData_descriptor_,
      MountBabySlotData::default_instance_,
      MountBabySlotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountBabySlotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountBabySlotData));
  StatisticDataProto_descriptor_ = file->message_type(63);
  static const int StatisticDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, today_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_activitycount_),
  };
  StatisticDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticDataProto_descriptor_,
      StatisticDataProto::default_instance_,
      StatisticDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticDataProto));
  GodRelicsTaskEntry_descriptor_ = file->message_type(64);
  static const int GodRelicsTaskEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, task_state_),
  };
  GodRelicsTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsTaskEntry_descriptor_,
      GodRelicsTaskEntry::default_instance_,
      GodRelicsTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsTaskEntry));
  GodRelicsTaskGroupEntry_descriptor_ = file->message_type(65);
  static const int GodRelicsTaskGroupEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, normal_reward_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, create_time_),
  };
  GodRelicsTaskGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsTaskGroupEntry_descriptor_,
      GodRelicsTaskGroupEntry::default_instance_,
      GodRelicsTaskGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsTaskGroupEntry));
  DailyTaskEntry_descriptor_ = file->message_type(66);
  static const int DailyTaskEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, buy_num_),
  };
  DailyTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskEntry_descriptor_,
      DailyTaskEntry::default_instance_,
      DailyTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskEntry));
  DailyTaskLimitEntry_descriptor_ = file->message_type(67);
  static const int DailyTaskLimitEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, ready_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, is_open_),
  };
  DailyTaskLimitEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskLimitEntry_descriptor_,
      DailyTaskLimitEntry::default_instance_,
      DailyTaskLimitEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskLimitEntry));
  DailyTaskBackDayEntry_descriptor_ = file->message_type(68);
  static const int DailyTaskBackDayEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, external_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, last_time_),
  };
  DailyTaskBackDayEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskBackDayEntry_descriptor_,
      DailyTaskBackDayEntry::default_instance_,
      DailyTaskBackDayEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskBackDayEntry));
  DailyTaskBackEntry_descriptor_ = file->message_type(69);
  static const int DailyTaskBackEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, day_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, external_left_num_),
  };
  DailyTaskBackEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskBackEntry_descriptor_,
      DailyTaskBackEntry::default_instance_,
      DailyTaskBackEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskBackEntry));
  DailyTaskRewardEntry_descriptor_ = file->message_type(70);
  static const int DailyTaskRewardEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, state_),
  };
  DailyTaskRewardEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskRewardEntry_descriptor_,
      DailyTaskRewardEntry::default_instance_,
      DailyTaskRewardEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskRewardEntry));
  DailyTaskAllData_descriptor_ = file->message_type(71);
  static const int DailyTaskAllData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, task_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, task_limit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, back_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_exp_),
  };
  DailyTaskAllData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskAllData_descriptor_,
      DailyTaskAllData::default_instance_,
      DailyTaskAllData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskAllData));
  CharacterDBRecentSubmitMission_descriptor_ = file->message_type(72);
  static const int CharacterDBRecentSubmitMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_id_),
  };
  CharacterDBRecentSubmitMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBRecentSubmitMission_descriptor_,
      CharacterDBRecentSubmitMission::default_instance_,
      CharacterDBRecentSubmitMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBRecentSubmitMission));
  CharacterDBMissionItemInfo_descriptor_ = file->message_type(73);
  static const int CharacterDBMissionItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, currentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, finalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, completedflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma3_),
  };
  CharacterDBMissionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionItemInfo_descriptor_,
      CharacterDBMissionItemInfo::default_instance_,
      CharacterDBMissionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionItemInfo));
  CharacterDBMissionTrack_descriptor_ = file->message_type(74);
  static const int CharacterDBMissionTrack_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, acceptmissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, textid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, missiontype_),
  };
  CharacterDBMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionTrack_descriptor_,
      CharacterDBMissionTrack::default_instance_,
      CharacterDBMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionTrack));
  CharacterDBDyMissionBountyParam_descriptor_ = file->message_type(75);
  static const int CharacterDBDyMissionBountyParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionBountyParam, ten_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionBountyParam, twenty_state_),
  };
  CharacterDBDyMissionBountyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDyMissionBountyParam_descriptor_,
      CharacterDBDyMissionBountyParam::default_instance_,
      CharacterDBDyMissionBountyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionBountyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionBountyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDyMissionBountyParam));
  CharacterDBDyMissionInfo_descriptor_ = file->message_type(76);
  static const int CharacterDBDyMissionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, lastfresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, accept_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, bounty_param_),
  };
  CharacterDBDyMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDyMissionInfo_descriptor_,
      CharacterDBDyMissionInfo::default_instance_,
      CharacterDBDyMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDyMissionInfo));
  GuildPrestigeMissionDBData_descriptor_ = file->message_type(77);
  static const int GuildPrestigeMissionDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, prestige_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, track_),
  };
  GuildPrestigeMissionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrestigeMissionDBData_descriptor_,
      GuildPrestigeMissionDBData::default_instance_,
      GuildPrestigeMissionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrestigeMissionDBData));
  GuildPrestigeMissionDB_descriptor_ = file->message_type(78);
  static const int GuildPrestigeMissionDB_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, refresh_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, all_refresh_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, accept_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, all_accept_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, task_pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, last_refresh_time_),
  };
  GuildPrestigeMissionDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrestigeMissionDB_descriptor_,
      GuildPrestigeMissionDB::default_instance_,
      GuildPrestigeMissionDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrestigeMissionDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrestigeMissionDB));
  CharacterDBTaskData_descriptor_ = file->message_type(79);
  static const int CharacterDBTaskData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, missiontrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, dyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, already_submit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, recent_submit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, prestige_mission_),
  };
  CharacterDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBTaskData_descriptor_,
      CharacterDBTaskData::default_instance_,
      CharacterDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBTaskData));
  NotifyVipDataRsp_descriptor_ = file->message_type(80);
  static const int NotifyVipDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, ids_),
  };
  NotifyVipDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyVipDataRsp_descriptor_,
      NotifyVipDataRsp::default_instance_,
      NotifyVipDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyVipDataRsp));
  ArenaChallResult_descriptor_ = file->message_type(81);
  static const int ArenaChallResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, chall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, src_rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, dst_rank_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, dup_id_),
  };
  ArenaChallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallResult_descriptor_,
      ArenaChallResult::default_instance_,
      ArenaChallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallResult));
  DailyArenaReward_descriptor_ = file->message_type(82);
  static const int DailyArenaReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyArenaReward, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyArenaReward, state_),
  };
  DailyArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyArenaReward_descriptor_,
      DailyArenaReward::default_instance_,
      DailyArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyArenaReward));
  ChallArenaReward_descriptor_ = file->message_type(83);
  static const int ChallArenaReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallArenaReward, cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallArenaReward, state_),
  };
  ChallArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallArenaReward_descriptor_,
      ChallArenaReward::default_instance_,
      ChallArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallArenaReward));
  NotifyServerFlag_descriptor_ = file->message_type(84);
  static const int NotifyServerFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyServerFlag, bt_dup_),
  };
  NotifyServerFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyServerFlag_descriptor_,
      NotifyServerFlag::default_instance_,
      NotifyServerFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyServerFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyServerFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyServerFlag));
  FacadeSoulSkillData_descriptor_ = file->message_type(85);
  static const int FacadeSoulSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulSkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulSkillData, status_),
  };
  FacadeSoulSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSoulSkillData_descriptor_,
      FacadeSoulSkillData::default_instance_,
      FacadeSoulSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSoulSkillData));
  FacadeSoulActivityData_descriptor_ = file->message_type(86);
  static const int FacadeSoulActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulActivityData, activity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulActivityData, status_),
  };
  FacadeSoulActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSoulActivityData_descriptor_,
      FacadeSoulActivityData::default_instance_,
      FacadeSoulActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSoulActivityData));
  FacadeSoulData_descriptor_ = file->message_type(87);
  static const int FacadeSoulData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, soul_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, soul_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, soul_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, acviity_data_),
  };
  FacadeSoulData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSoulData_descriptor_,
      FacadeSoulData::default_instance_,
      FacadeSoulData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSoulData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSoulData));
  ItemSellProto_descriptor_ = file->message_type(88);
  static const int ItemSellProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, num_),
  };
  ItemSellProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSellProto_descriptor_,
      ItemSellProto::default_instance_,
      ItemSellProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSellProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSellProto));
  DeityFantasySkillData_descriptor_ = file->message_type(89);
  static const int DeityFantasySkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasySkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasySkillData, skill_state_),
  };
  DeityFantasySkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityFantasySkillData_descriptor_,
      DeityFantasySkillData::default_instance_,
      DeityFantasySkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasySkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasySkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityFantasySkillData));
  DeityEquipData_descriptor_ = file->message_type(90);
  static const int DeityEquipData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipData, lv_attr_),
  };
  DeityEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityEquipData_descriptor_,
      DeityEquipData::default_instance_,
      DeityEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityEquipData));
  DeityEquipSuitData_descriptor_ = file->message_type(91);
  static const int DeityEquipSuitData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipSuitData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipSuitData, state_),
  };
  DeityEquipSuitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityEquipSuitData_descriptor_,
      DeityEquipSuitData::default_instance_,
      DeityEquipSuitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipSuitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityEquipSuitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityEquipSuitData));
  DeityFantasyData_descriptor_ = file->message_type(92);
  static const int DeityFantasyData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, fantasy_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, fantasy_lev_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, fantasy_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, fantasy_fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, equip_suit_data_),
  };
  DeityFantasyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityFantasyData_descriptor_,
      DeityFantasyData::default_instance_,
      DeityFantasyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFantasyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityFantasyData));
  DeityFragmentData_descriptor_ = file->message_type(93);
  static const int DeityFragmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFragmentData, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFragmentData, use_times_),
  };
  DeityFragmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityFragmentData_descriptor_,
      DeityFragmentData::default_instance_,
      DeityFragmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFragmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityFragmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityFragmentData));
  DeitySkillData_descriptor_ = file->message_type(94);
  static const int DeitySkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeitySkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeitySkillData, skill_lev_),
  };
  DeitySkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeitySkillData_descriptor_,
      DeitySkillData::default_instance_,
      DeitySkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeitySkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeitySkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeitySkillData));
  DeityBattleSlotData_descriptor_ = file->message_type(95);
  static const int DeityBattleSlotData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, cur_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, deity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, enter_war_time_),
  };
  DeityBattleSlotData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityBattleSlotData_descriptor_,
      DeityBattleSlotData::default_instance_,
      DeityBattleSlotData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityBattleSlotData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityBattleSlotData));
  ArmorSuitState_descriptor_ = file->message_type(96);
  static const int ArmorSuitState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSuitState, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSuitState, state_),
  };
  ArmorSuitState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmorSuitState_descriptor_,
      ArmorSuitState::default_instance_,
      ArmorSuitState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSuitState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorSuitState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmorSuitState));
  ArmorInfo_descriptor_ = file->message_type(97);
  static const int ArmorInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, suits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, allstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, pos_),
  };
  ArmorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmorInfo_descriptor_,
      ArmorInfo::default_instance_,
      ArmorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmorInfo));
  TitleInfo_descriptor_ = file->message_type(98);
  static const int TitleInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, star_),
  };
  TitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfo_descriptor_,
      TitleInfo::default_instance_,
      TitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfo));
  OccupationMissionSoulData_descriptor_ = file->message_type(99);
  static const int OccupationMissionSoulData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionSoulData, soul_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionSoulData, soul_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionSoulData, status_),
  };
  OccupationMissionSoulData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationMissionSoulData_descriptor_,
      OccupationMissionSoulData::default_instance_,
      OccupationMissionSoulData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionSoulData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionSoulData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationMissionSoulData));
  OccupationMissionStageData_descriptor_ = file->message_type(100);
  static const int OccupationMissionStageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionStageData, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionStageData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionStageData, soul_data_),
  };
  OccupationMissionStageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationMissionStageData_descriptor_,
      OccupationMissionStageData::default_instance_,
      OccupationMissionStageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionStageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionStageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationMissionStageData));
  OccupationMissionGradeData_descriptor_ = file->message_type(101);
  static const int OccupationMissionGradeData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionGradeData, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionGradeData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionGradeData, stage_data_),
  };
  OccupationMissionGradeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationMissionGradeData_descriptor_,
      OccupationMissionGradeData::default_instance_,
      OccupationMissionGradeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionGradeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionGradeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationMissionGradeData));
  OccupationMissionData_descriptor_ = file->message_type(102);
  static const int OccupationMissionData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionData, grade_data_),
  };
  OccupationMissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupationMissionData_descriptor_,
      OccupationMissionData::default_instance_,
      OccupationMissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupationMissionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupationMissionData));
  BestEQEquipInfo_descriptor_ = file->message_type(103);
  static const int BestEQEquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, makeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, skills_),
  };
  BestEQEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQEquipInfo_descriptor_,
      BestEQEquipInfo::default_instance_,
      BestEQEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQEquipInfo));
  BestEQBreak_descriptor_ = file->message_type(104);
  static const int BestEQBreak_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreak, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreak, exps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreak, genattr_),
  };
  BestEQBreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQBreak_descriptor_,
      BestEQBreak::default_instance_,
      BestEQBreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQBreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQBreak));
  BestEQSlotInfo_descriptor_ = file->message_type(105);
  static const int BestEQSlotInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, pourid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, pourexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, pourunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, breakinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, awakenlv_),
  };
  BestEQSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQSlotInfo_descriptor_,
      BestEQSlotInfo::default_instance_,
      BestEQSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQSlotInfo));
  BestEQTask_descriptor_ = file->message_type(106);
  static const int BestEQTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQTask, state_),
  };
  BestEQTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BestEQTask_descriptor_,
      BestEQTask::default_instance_,
      BestEQTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BestEQTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BestEQTask));
  ECState_descriptor_ = file->enum_type(0);
  EAttrGroup_descriptor_ = file->enum_type(1);
  GrowType_descriptor_ = file->enum_type(2);
  ECreatureAttr_descriptor_ = file->enum_type(3);
  DigPerforType_descriptor_ = file->enum_type(4);
  MountBloodState_descriptor_ = file->enum_type(5);
  MountBabySlotState_descriptor_ = file->enum_type(6);
  EN_GODRELICS_TASK_STATUS_descriptor_ = file->enum_type(7);
  EN_GODRELICS_GROUP_TASK_STATUS_descriptor_ = file->enum_type(8);
  EN_DAILY_TASK_STATUS_descriptor_ = file->enum_type(9);
  EN_DAILY_TASK_REWARD_STATUS_descriptor_ = file->enum_type(10);
  FacadeSoulSkillStatus_descriptor_ = file->enum_type(11);
  FacadeSoulActivitytatus_descriptor_ = file->enum_type(12);
  EDeityEquipSuitStatus_descriptor_ = file->enum_type(13);
  DeityBattleSlotState_descriptor_ = file->enum_type(14);
  ETitleStatus_descriptor_ = file->enum_type(15);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Com_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair_descriptor_, &ComPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair64_descriptor_, &ComPair64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPairBool_descriptor_, &ComPairBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComItem_descriptor_, &ComItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComItemWithType_descriptor_, &ComItemWithType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2PB_descriptor_, &Vector2PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr64_descriptor_, &Attr64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFacadeProto_descriptor_, &RoleFacadeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBProto_descriptor_, &RoleListDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRoleProto_descriptor_, &LoginRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSyncProto_descriptor_, &LoginSyncProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRoleProto_descriptor_, &CenterRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRoleProto_descriptor_, &SocialRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlueStarAttr_descriptor_, &BlueStarAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetInfo_descriptor_, &PetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetHatchInfo_descriptor_, &PetHatchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemProtoInfo_descriptor_, &ItemProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneSlotInfo_descriptor_, &StoneSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WashSlotInfo_descriptor_, &WashSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlotInfo_descriptor_, &EquipSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipLvAttrInfo_descriptor_, &EquipLvAttrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSimpleProto_descriptor_, &ItemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultItemSimpleProto_descriptor_, &MultItemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailParamProto_descriptor_, &MailParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailStrProto_descriptor_, &MailStrProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAttachmentList_descriptor_, &MailAttachmentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailHead_descriptor_, &MailHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailItemProto_descriptor_, &WebMailItemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDataProto_descriptor_, &WebMailDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemArgProto_descriptor_, &UseItemArgProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleFacadeCastRsp_descriptor_, &NotifyRoleFacadeCastRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfoData_descriptor_, &FunctionUnlockInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfo_descriptor_, &FunctionUnlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePlayerMiniInfo_descriptor_, &RolePlayerMiniInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyInfo_descriptor_, &FriendApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationHateInfo_descriptor_, &RelationHateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationGiftRecord_descriptor_, &RelationGiftRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationDBInfo_descriptor_, &RelationDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DigPerfor_descriptor_, &DigPerfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffProto_descriptor_, &BuffProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffListProto_descriptor_, &BuffListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPosProto_descriptor_, &SkillPosProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupProto_descriptor_, &SkillGroupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupListProto_descriptor_, &SkillGroupListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilTaskProto_descriptor_, &GodEvilTaskProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilTaskListProto_descriptor_, &GodEvilTaskListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilStageProto_descriptor_, &GodEvilStageProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilProto_descriptor_, &GodEvilProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyData_descriptor_, &FacadeFantasyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFragmentData_descriptor_, &FacadeFragmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSkillData_descriptor_, &FacadeSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountFantasyData_descriptor_, &MountFantasyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountFragmentData_descriptor_, &MountFragmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountSkillData_descriptor_, &MountSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountKunData_descriptor_, &MountKunData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountBloodData_descriptor_, &MountBloodData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountBabySlotData_descriptor_, &MountBabySlotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticDataProto_descriptor_, &StatisticDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsTaskEntry_descriptor_, &GodRelicsTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsTaskGroupEntry_descriptor_, &GodRelicsTaskGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskEntry_descriptor_, &DailyTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskLimitEntry_descriptor_, &DailyTaskLimitEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskBackDayEntry_descriptor_, &DailyTaskBackDayEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskBackEntry_descriptor_, &DailyTaskBackEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskRewardEntry_descriptor_, &DailyTaskRewardEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskAllData_descriptor_, &DailyTaskAllData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBRecentSubmitMission_descriptor_, &CharacterDBRecentSubmitMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionItemInfo_descriptor_, &CharacterDBMissionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionTrack_descriptor_, &CharacterDBMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDyMissionBountyParam_descriptor_, &CharacterDBDyMissionBountyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDyMissionInfo_descriptor_, &CharacterDBDyMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrestigeMissionDBData_descriptor_, &GuildPrestigeMissionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrestigeMissionDB_descriptor_, &GuildPrestigeMissionDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBTaskData_descriptor_, &CharacterDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyVipDataRsp_descriptor_, &NotifyVipDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallResult_descriptor_, &ArenaChallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyArenaReward_descriptor_, &DailyArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallArenaReward_descriptor_, &ChallArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyServerFlag_descriptor_, &NotifyServerFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSoulSkillData_descriptor_, &FacadeSoulSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSoulActivityData_descriptor_, &FacadeSoulActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSoulData_descriptor_, &FacadeSoulData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSellProto_descriptor_, &ItemSellProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityFantasySkillData_descriptor_, &DeityFantasySkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityEquipData_descriptor_, &DeityEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityEquipSuitData_descriptor_, &DeityEquipSuitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityFantasyData_descriptor_, &DeityFantasyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityFragmentData_descriptor_, &DeityFragmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeitySkillData_descriptor_, &DeitySkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityBattleSlotData_descriptor_, &DeityBattleSlotData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmorSuitState_descriptor_, &ArmorSuitState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmorInfo_descriptor_, &ArmorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfo_descriptor_, &TitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationMissionSoulData_descriptor_, &OccupationMissionSoulData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationMissionStageData_descriptor_, &OccupationMissionStageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationMissionGradeData_descriptor_, &OccupationMissionGradeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupationMissionData_descriptor_, &OccupationMissionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQEquipInfo_descriptor_, &BestEQEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQBreak_descriptor_, &BestEQBreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQSlotInfo_descriptor_, &BestEQSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BestEQTask_descriptor_, &BestEQTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Com_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete ComPair::default_instance_;
  delete ComPair_reflection_;
  delete ComPair64::default_instance_;
  delete ComPair64_reflection_;
  delete ComPairBool::default_instance_;
  delete ComPairBool_reflection_;
  delete ComItem::default_instance_;
  delete ComItem_reflection_;
  delete ComItemWithType::default_instance_;
  delete ComItemWithType_reflection_;
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete Vector2PB::default_instance_;
  delete Vector2PB_reflection_;
  delete Attr64::default_instance_;
  delete Attr64_reflection_;
  delete RoleFacadeProto::default_instance_;
  delete RoleFacadeProto_reflection_;
  delete RoleListDBProto::default_instance_;
  delete RoleListDBProto_reflection_;
  delete LoginRoleProto::default_instance_;
  delete LoginRoleProto_reflection_;
  delete LoginSyncProto::default_instance_;
  delete LoginSyncProto_reflection_;
  delete CenterRoleProto::default_instance_;
  delete CenterRoleProto_reflection_;
  delete SocialRoleProto::default_instance_;
  delete SocialRoleProto_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete BlueStarAttr::default_instance_;
  delete BlueStarAttr_reflection_;
  delete PetInfo::default_instance_;
  delete PetInfo_reflection_;
  delete PetHatchInfo::default_instance_;
  delete PetHatchInfo_reflection_;
  delete ItemProtoInfo::default_instance_;
  delete ItemProtoInfo_reflection_;
  delete StoneSlotInfo::default_instance_;
  delete StoneSlotInfo_reflection_;
  delete WashSlotInfo::default_instance_;
  delete WashSlotInfo_reflection_;
  delete EquipSlotInfo::default_instance_;
  delete EquipSlotInfo_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete EquipLvAttrInfo::default_instance_;
  delete EquipLvAttrInfo_reflection_;
  delete ItemSimpleProto::default_instance_;
  delete ItemSimpleProto_reflection_;
  delete MultItemSimpleProto::default_instance_;
  delete MultItemSimpleProto_reflection_;
  delete MailParamProto::default_instance_;
  delete MailParamProto_reflection_;
  delete MailStrProto::default_instance_;
  delete MailStrProto_reflection_;
  delete MailAttachmentList::default_instance_;
  delete MailAttachmentList_reflection_;
  delete MailHead::default_instance_;
  delete MailHead_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete WebMailItemProto::default_instance_;
  delete WebMailItemProto_reflection_;
  delete WebMailDataProto::default_instance_;
  delete WebMailDataProto_reflection_;
  delete UseItemArgProto::default_instance_;
  delete UseItemArgProto_reflection_;
  delete NotifyRoleFacadeCastRsp::default_instance_;
  delete NotifyRoleFacadeCastRsp_reflection_;
  delete FunctionUnlockInfoData::default_instance_;
  delete FunctionUnlockInfoData_reflection_;
  delete FunctionUnlockInfo::default_instance_;
  delete FunctionUnlockInfo_reflection_;
  delete RolePlayerMiniInfo::default_instance_;
  delete RolePlayerMiniInfo_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete FriendApplyInfo::default_instance_;
  delete FriendApplyInfo_reflection_;
  delete RelationHateInfo::default_instance_;
  delete RelationHateInfo_reflection_;
  delete RelationGiftRecord::default_instance_;
  delete RelationGiftRecord_reflection_;
  delete RelationDBInfo::default_instance_;
  delete RelationDBInfo_reflection_;
  delete DigPerfor::default_instance_;
  delete DigPerfor_reflection_;
  delete BuffProto::default_instance_;
  delete BuffProto_reflection_;
  delete BuffListProto::default_instance_;
  delete BuffListProto_reflection_;
  delete SkillPosProto::default_instance_;
  delete SkillPosProto_reflection_;
  delete SkillGroupProto::default_instance_;
  delete SkillGroupProto_reflection_;
  delete SkillGroupListProto::default_instance_;
  delete SkillGroupListProto_reflection_;
  delete GodEvilTaskProto::default_instance_;
  delete GodEvilTaskProto_reflection_;
  delete GodEvilTaskListProto::default_instance_;
  delete GodEvilTaskListProto_reflection_;
  delete GodEvilStageProto::default_instance_;
  delete GodEvilStageProto_reflection_;
  delete GodEvilProto::default_instance_;
  delete GodEvilProto_reflection_;
  delete FacadeFantasyData::default_instance_;
  delete FacadeFantasyData_reflection_;
  delete FacadeFragmentData::default_instance_;
  delete FacadeFragmentData_reflection_;
  delete FacadeSkillData::default_instance_;
  delete FacadeSkillData_reflection_;
  delete MountFantasyData::default_instance_;
  delete MountFantasyData_reflection_;
  delete MountFragmentData::default_instance_;
  delete MountFragmentData_reflection_;
  delete MountSkillData::default_instance_;
  delete MountSkillData_reflection_;
  delete MountKunData::default_instance_;
  delete MountKunData_reflection_;
  delete MountBloodData::default_instance_;
  delete MountBloodData_reflection_;
  delete MountBabySlotData::default_instance_;
  delete MountBabySlotData_reflection_;
  delete StatisticDataProto::default_instance_;
  delete StatisticDataProto_reflection_;
  delete GodRelicsTaskEntry::default_instance_;
  delete GodRelicsTaskEntry_reflection_;
  delete GodRelicsTaskGroupEntry::default_instance_;
  delete GodRelicsTaskGroupEntry_reflection_;
  delete DailyTaskEntry::default_instance_;
  delete DailyTaskEntry_reflection_;
  delete DailyTaskLimitEntry::default_instance_;
  delete DailyTaskLimitEntry_reflection_;
  delete DailyTaskBackDayEntry::default_instance_;
  delete DailyTaskBackDayEntry_reflection_;
  delete DailyTaskBackEntry::default_instance_;
  delete DailyTaskBackEntry_reflection_;
  delete DailyTaskRewardEntry::default_instance_;
  delete DailyTaskRewardEntry_reflection_;
  delete DailyTaskAllData::default_instance_;
  delete DailyTaskAllData_reflection_;
  delete CharacterDBRecentSubmitMission::default_instance_;
  delete CharacterDBRecentSubmitMission_reflection_;
  delete CharacterDBMissionItemInfo::default_instance_;
  delete CharacterDBMissionItemInfo_reflection_;
  delete CharacterDBMissionTrack::default_instance_;
  delete CharacterDBMissionTrack_reflection_;
  delete CharacterDBDyMissionBountyParam::default_instance_;
  delete CharacterDBDyMissionBountyParam_reflection_;
  delete CharacterDBDyMissionInfo::default_instance_;
  delete CharacterDBDyMissionInfo_reflection_;
  delete GuildPrestigeMissionDBData::default_instance_;
  delete GuildPrestigeMissionDBData_reflection_;
  delete GuildPrestigeMissionDB::default_instance_;
  delete GuildPrestigeMissionDB_reflection_;
  delete CharacterDBTaskData::default_instance_;
  delete CharacterDBTaskData_reflection_;
  delete NotifyVipDataRsp::default_instance_;
  delete NotifyVipDataRsp_reflection_;
  delete ArenaChallResult::default_instance_;
  delete ArenaChallResult_reflection_;
  delete DailyArenaReward::default_instance_;
  delete DailyArenaReward_reflection_;
  delete ChallArenaReward::default_instance_;
  delete ChallArenaReward_reflection_;
  delete NotifyServerFlag::default_instance_;
  delete NotifyServerFlag_reflection_;
  delete FacadeSoulSkillData::default_instance_;
  delete FacadeSoulSkillData_reflection_;
  delete FacadeSoulActivityData::default_instance_;
  delete FacadeSoulActivityData_reflection_;
  delete FacadeSoulData::default_instance_;
  delete FacadeSoulData_reflection_;
  delete ItemSellProto::default_instance_;
  delete ItemSellProto_reflection_;
  delete DeityFantasySkillData::default_instance_;
  delete DeityFantasySkillData_reflection_;
  delete DeityEquipData::default_instance_;
  delete DeityEquipData_reflection_;
  delete DeityEquipSuitData::default_instance_;
  delete DeityEquipSuitData_reflection_;
  delete DeityFantasyData::default_instance_;
  delete DeityFantasyData_reflection_;
  delete DeityFragmentData::default_instance_;
  delete DeityFragmentData_reflection_;
  delete DeitySkillData::default_instance_;
  delete DeitySkillData_reflection_;
  delete DeityBattleSlotData::default_instance_;
  delete DeityBattleSlotData_reflection_;
  delete ArmorSuitState::default_instance_;
  delete ArmorSuitState_reflection_;
  delete ArmorInfo::default_instance_;
  delete ArmorInfo_reflection_;
  delete TitleInfo::default_instance_;
  delete TitleInfo_reflection_;
  delete OccupationMissionSoulData::default_instance_;
  delete OccupationMissionSoulData_reflection_;
  delete OccupationMissionStageData::default_instance_;
  delete OccupationMissionStageData_reflection_;
  delete OccupationMissionGradeData::default_instance_;
  delete OccupationMissionGradeData_reflection_;
  delete OccupationMissionData::default_instance_;
  delete OccupationMissionData_reflection_;
  delete BestEQEquipInfo::default_instance_;
  delete BestEQEquipInfo_reflection_;
  delete BestEQBreak::default_instance_;
  delete BestEQBreak_reflection_;
  delete BestEQSlotInfo::default_instance_;
  delete BestEQSlotInfo_reflection_;
  delete BestEQTask::default_instance_;
  delete BestEQTask_reflection_;
}

void protobuf_AddDesc_Com_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tCom.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\032\022common_logic.proto\032\017ComDefine.prot"
    "o\"\016\n\014EmptyMessage\"%\n\007ComPair\022\013\n\003key\030\001 \001("
    "\r\022\r\n\005value\030\002 \001(\r\"\'\n\tComPair64\022\013\n\003key\030\001 \001"
    "(\004\022\r\n\005value\030\002 \001(\004\")\n\013ComPairBool\022\013\n\003key\030"
    "\001 \001(\r\022\r\n\005value\030\002 \001(\010\",\n\007ComItem\022\017\n\007item_"
    "id\030\001 \001(\004\022\020\n\010item_num\030\002 \001(\004\"B\n\017ComItemWit"
    "hType\022\017\n\007item_id\030\001 \001(\004\022\020\n\010item_num\030\002 \001(\004"
    "\022\014\n\004type\030\003 \001(\r\",\n\tVector3PB\022\t\n\001x\030\001 \002(\002\022\t"
    "\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"!\n\tVector2PB\022\t\n\001x\030\001"
    " \002(\002\022\t\n\001y\030\002 \002(\002\"#\n\006Attr64\022\n\n\002id\030\001 \002(\r\022\r\n"
    "\005value\030\002 \002(\003\"Z\n\017RoleFacadeProto\022*\n\ngrowF"
    "acade\030\001 \003(\0132\020.proto_ff.Attr64B\004\210\301\024\036\022\r\n\005c"
    "olor\030\002 \001(\005\022\014\n\004prof\030\003 \001(\005\"\247\002\n\017RoleListDBP"
    "roto\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\014\n\004prof\030"
    "\003 \002(\r\022\r\n\005level\030\004 \002(\r\022\r\n\005fight\030\005 \002(\004\022\022\n\nc"
    "reatetime\030\006 \001(\004\022)\n\006facade\030\007 \001(\0132\031.proto_"
    "ff.RoleFacadeProto\022\017\n\007sceneid\030\010 \001(\004\022\r\n\005m"
    "apid\030\t \001(\004\022 \n\003pos\030\n \001(\0132\023.proto_ff.Vecto"
    "r3PB\022\023\n\013lastsceneid\030\013 \001(\004\022\021\n\tlastmapid\030\014"
    " \001(\004\022$\n\007lastpos\030\r \001(\0132\023.proto_ff.Vector3"
    "PB\"\226\001\n\016LoginRoleProto\022\013\n\003cid\030\001 \002(\004\022\014\n\004na"
    "me\030\002 \002(\t\022\014\n\004prof\030\003 \002(\r\022\r\n\005level\030\004 \002(\r\022\r\n"
    "\005fight\030\005 \001(\004\022\022\n\ncreatetime\030\006 \001(\004\022)\n\006faca"
    "de\030\007 \001(\0132\031.proto_ff.RoleFacadeProto\"\300\001\n\016"
    "LoginSyncProto\022\022\n\nfaction_id\030\001 \001(\r\022\024\n\014fa"
    "ction_name\030\002 \001(\t\022\014\n\004duty\030\003 \001(\005\022\026\n\016factio"
    "n_leader\030\004 \001(\004\022\025\n\rfaction_level\030\005 \001(\005\022\017\n"
    "\007team_id\030\006 \001(\r\022\016\n\006leader\030\007 \001(\004\022\021\n\tmem_co"
    "unt\030\010 \001(\005\022\023\n\013cloness_lev\030\t \001(\005\"\305\001\n\017Cente"
    "rRoleProto\022\013\n\003cid\030\001 \001(\004\022\013\n\003uid\030\002 \001(\r\022\014\n\004"
    "name\030\003 \001(\014\022\r\n\005level\030\004 \001(\r\022\r\n\005fight\030\005 \001(\004"
    "\022\022\n\nlastlogout\030\006 \001(\004\022)\n\006facade\030\007 \001(\0132\031.p"
    "roto_ff.RoleFacadeProto\022\021\n\tvip_level\030\010 \001"
    "(\r\022\n\n\002hp\030\t \001(\003\022\016\n\006max_hp\030\n \001(\003\"\222\002\n\017Socia"
    "lRoleProto\022\013\n\003cid\030\001 \001(\004\022\013\n\003uid\030\002 \001(\r\022\014\n\004"
    "name\030\003 \001(\014\022\014\n\004prof\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022"
    "\r\n\005fight\030\006 \001(\004\022\022\n\nlastlogout\030\007 \001(\004\022)\n\006fa"
    "cade\030\010 \001(\0132\031.proto_ff.RoleFacadeProto\022\021\n"
    "\tvip_level\030\t \001(\r\022\013\n\003zid\030\n \001(\r\022\020\n\010isonlin"
    "e\030\013 \001(\010\022\n\n\002hp\030\014 \001(\003\022\016\n\006max_hp\030\r \001(\003\022\017\n\007s"
    "ceneid\030\016 \001(\004\022\r\n\005mapid\030\017 \001(\004\"!\n\004Attr\022\n\n\002i"
    "d\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\":\n\014BlueStarAttr\022\n"
    "\n\002id\030\001 \001(\r\022\r\n\005value\030\002 \001(\003\022\017\n\007lv_part\030\003 \001"
    "(\005\"\322\001\n\007PetInfo\022\016\n\006instId\030\001 \001(\005\022\r\n\005cfgid\030"
    "\002 \001(\003\022\n\n\002lv\030\003 \001(\005\022\016\n\006steplv\030\004 \001(\005\022\016\n\006sta"
    "rlv\030\005 \001(\005\022\025\n\ractiveSkillLv\030\006 \001(\005\022\033\n\023excl"
    "usiveSkillLvVec\030\007 \003(\005\022\031\n\021passiveSkillLvV"
    "ec\030\010 \003(\005\022\020\n\010initgrow\030\t \001(\002\022\014\n\004slot\030\n \001(\005"
    "\022\r\n\005lvexp\030\013 \001(\005\"I\n\014PetHatchInfo\022\014\n\004slot\030"
    "\001 \001(\005\022\016\n\006unlock\030\002 \001(\005\022\r\n\005eggid\030\003 \001(\003\022\014\n\004"
    "time\030\004 \001(\003\"\304\002\n\rItemProtoInfo\022\r\n\005index\030\001 "
    "\001(\005\022\017\n\007item_id\030\002 \001(\004\022\020\n\010item_num\030\003 \001(\003\022\014"
    "\n\004bind\030\004 \001(\005\022\r\n\005level\030\005 \001(\005\022\034\n\004base\030\006 \003("
    "\0132\016.proto_ff.Attr\022\036\n\006refine\030\007 \003(\0132\016.prot"
    "o_ff.Attr\022$\n\004blue\030\010 \003(\0132\026.proto_ff.BlueS"
    "tarAttr\022\033\n\003god\030\t \003(\0132\016.proto_ff.Attr\022\037\n\007"
    "special\030\n \003(\0132\016.proto_ff.Attr\022\022\n\nexpireT"
    "ime\030\013 \001(\004\022\021\n\tstrong_lv\030\014 \001(\005\022\033\n\023strong_w"
    "ear_quality\030\r \001(\005\"3\n\rStoneSlotInfo\022\021\n\tst"
    "one_pos\030\001 \001(\005\022\017\n\007stoneid\030\002 \001(\003\"V\n\014WashSl"
    "otInfo\022\014\n\004slot\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\014\n"
    "\004lock\030\003 \001(\005\022\n\n\002id\030\004 \001(\005\022\r\n\005value\030\005 \001(\005\"\305"
    "\001\n\rEquipSlotInfo\022\020\n\010slot_pos\030\001 \001(\005\022\023\n\013to"
    "tal_score\030\002 \001(\003\022\020\n\010stronglv\030\003 \001(\005\022\'\n\006sto"
    "nes\030\004 \003(\0132\027.proto_ff.StoneSlotInfo\022\033\n\023st"
    "one_pay_slot_open\030\005 \001(\005\022%\n\005washs\030\006 \003(\0132\026"
    ".proto_ff.WashSlotInfo\022\016\n\006suitlv\030\007 \001(\005\"g"
    "\n\tEquipInfo\022\013\n\003pos\030\001 \001(\005\022&\n\005equip\030\002 \001(\0132"
    "\027.proto_ff.ItemProtoInfo\022%\n\004slot\030\003 \001(\0132\027"
    ".proto_ff.EquipSlotInfo\"+\n\017EquipLvAttrIn"
    "fo\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"<\n\017ItemSimp"
    "leProto\022\016\n\006itemid\030\001 \001(\004\022\013\n\003num\030\002 \001(\003\022\014\n\004"
    "bind\030\003 \001(\005\">\n\023MultItemSimpleProto\022\'\n\004inf"
    "o\030\001 \003(\0132\031.proto_ff.ItemSimpleProto\"E\n\016Ma"
    "ilParamProto\022\r\n\005cfgid\030\001 \001(\004\022\021\n\tstr_param"
    "\030\002 \003(\014\022\021\n\tint_param\030\003 \003(\004\"D\n\014MailStrProt"
    "o\022\013\n\003str\030\001 \001(\014\022\'\n\005param\030\002 \001(\0132\030.proto_ff"
    ".MailParamProto\"\?\n\022MailAttachmentList\022)\n"
    "\010itemInfo\030\001 \003(\0132\027.proto_ff.ItemProtoInfo"
    "\"\200\002\n\010MailHead\022\016\n\006mailId\030\001 \001(\004\022\014\n\004type\030\002 "
    "\001(\r\022\024\n\014sendPlayerId\030\003 \001(\004\022\026\n\016sendPlayerN"
    "ame\030\004 \001(\014\022\024\n\014destPlayerId\030\005 \001(\004\022%\n\005topic"
    "\030\006 \001(\0132\026.proto_ff.MailStrProto\022\022\n\ncreate"
    "Time\030\007 \001(\004\022\016\n\006status\030\010 \001(\r\022\r\n\005fetch\030\t \001("
    "\005\022\022\n\nhas_attach\030\n \001(\005\022\022\n\nbegin_time\030\013 \001("
    "\004\022\020\n\010end_time\030\014 \001(\004\"\216\002\n\010MailInfo\022$\n\010mail"
    "Head\030\001 \001(\0132\022.proto_ff.MailHead\022\'\n\007conten"
    "t\030\002 \001(\0132\026.proto_ff.MailStrProto\022\014\n\004gold\030"
    "\003 \001(\004\022\017\n\007diamond\030\004 \001(\004\022\023\n\013bindDiamond\030\005 "
    "\001(\004\022\024\n\014magiccrystal\030\006 \001(\004\022\020\n\010prestige\030\007 "
    "\001(\004\0224\n\016attachmentList\030\010 \001(\0132\034.proto_ff.M"
    "ailAttachmentList\022\016\n\006source\030\t \001(\005\022\021\n\tsou"
    "rceVal\030\n \001(\003\"+\n\020WebMailItemProto\022\n\n\002id\030\001"
    " \001(\004\022\013\n\003num\030\002 \001(\004\"\263\002\n\020WebMailDataProto\022\016"
    "\n\006mailId\030\001 \001(\004\022\022\n\ncreateTime\030\002 \001(\004\022%\n\005to"
    "pic\030\003 \001(\0132\026.proto_ff.MailStrProto\022\r\n\005fet"
    "ch\030\004 \001(\005\022\'\n\007content\030\005 \001(\0132\026.proto_ff.Mai"
    "lStrProto\022\014\n\004gold\030\006 \001(\004\022\017\n\007diamond\030\007 \001(\004"
    "\022\023\n\013bindDiamond\030\010 \001(\004\022\022\n\narenaScore\030\t \001("
    "\004\022\024\n\014magiccrystal\030\n \001(\004\022\020\n\010prestige\030\013 \001("
    "\004\022,\n\010itemList\030\014 \003(\0132\032.proto_ff.WebMailIt"
    "emProto\"I\n\017UseItemArgProto\022\021\n\tint_param\030"
    "\001 \001(\003\022\021\n\tstr_param\030\002 \001(\014\022\020\n\010item_lst\030\003 \003"
    "(\004\"T\n\027NotifyRoleFacadeCastRsp\022\016\n\006roleid\030"
    "\001 \002(\004\022)\n\006facade\030\002 \001(\0132\031.proto_ff.RoleFac"
    "adeProto\">\n\026FunctionUnlockInfoData\022\020\n\010un"
    "lockId\030\001 \001(\004\022\022\n\nget_reward\030\002 \001(\010\"D\n\022Func"
    "tionUnlockInfo\022.\n\004data\030\001 \003(\0132 .proto_ff."
    "FunctionUnlockInfoData\"\353\002\n\022RolePlayerMin"
    "iInfo\022\020\n\010playerId\030\001 \001(\004\022\022\n\nplayerName\030\002 "
    "\001(\t\022\013\n\003zid\030\003 \001(\r\022\r\n\005level\030\005 \001(\r\022\021\n\tclose"
    "ness\030\006 \001(\r\022\022\n\nrecentType\030\007 \001(\r\022\022\n\nrecent"
    "Time\030\010 \001(\004\022\014\n\004prof\030\t \001(\r\022\016\n\006teamId\030\n \001(\r"
    "\022\017\n\007unionId\030\013 \001(\r\022\022\n\nfightPower\030\014 \001(\004\022\023\n"
    "\013killMeTimes\030\r \001(\r\022\023\n\013offlineTime\030\016 \001(\004\022"
    "\017\n\007connect\030\017 \001(\t\022\016\n\006online\030\020 \001(\010\022\020\n\010vipL"
    "evel\030\021 \001(\r\022)\n\006facade\030\022 \001(\0132\031.proto_ff.Ro"
    "leFacadeProto\022\r\n\005marry\030\023 \001(\r\"W\n\nFriendIn"
    "fo\022\n\n\002id\030\001 \001(\004\022\021\n\tcloseness\030\002 \001(\r\022\026\n\016tod"
    "ayCloseness\030\003 \001(\r\022\022\n\nupdateTime\030\004 \001(\004\".\n"
    "\017FriendApplyInfo\022\n\n\002id\030\001 \001(\004\022\017\n\007connect\030"
    "\002 \001(\t\"3\n\020RelationHateInfo\022\n\n\002id\030\001 \001(\004\022\023\n"
    "\013killMeTimes\030\002 \001(\r\"H\n\022RelationGiftRecord"
    "\022\020\n\010friendId\030\001 \001(\004\022\016\n\006itemId\030\002 \001(\004\022\020\n\010is"
    "Thanks\030\003 \001(\r\"\361\001\n\016RelationDBInfo\022(\n\nfrien"
    "dList\030\001 \003(\0132\024.proto_ff.FriendInfo\022\021\n\tbla"
    "ckList\030\002 \003(\004\022,\n\010hateList\030\003 \003(\0132\032.proto_f"
    "f.RelationHateInfo\022,\n\tapplyList\030\004 \003(\0132\031."
    "proto_ff.FriendApplyInfo\022\023\n\013friends_add\030"
    "\005 \001(\r\0221\n\013giftRecords\030\006 \003(\0132\034.proto_ff.Re"
    "lationGiftRecord\"(\n\tDigPerfor\022\014\n\004type\030\001 "
    "\002(\r\022\r\n\005value\030\002 \001(\003\"\217\001\n\tBuffProto\022\022\n\nbuff"
    "_index\030\001 \002(\004\022\017\n\007buff_id\030\002 \002(\004\022\022\n\nrecver_"
    "cid\030\003 \001(\004\022\021\n\tleft_msec\030\004 \001(\003\022\020\n\010skill_id"
    "\030\005 \001(\004\022\021\n\tskill_lev\030\006 \001(\005\022\021\n\tis_effect\030\007"
    " \001(\005\"\?\n\rBuffListProto\022\013\n\003cid\030\001 \001(\004\022!\n\004in"
    "fo\030\002 \003(\0132\023.proto_ff.BuffProto\"G\n\rSkillPo"
    "sProto\022\020\n\010skill_id\030\001 \001(\004\022\013\n\003pos\030\002 \001(\r\022\n\n"
    "\002cd\030\003 \001(\005\022\013\n\003use\030\004 \001(\005\"F\n\017SkillGroupProt"
    "o\022\r\n\005group\030\001 \001(\r\022$\n\003lst\030\002 \003(\0132\027.proto_ff"
    ".SkillPosProto\"W\n\023SkillGroupListProto\022\'\n"
    "\004info\030\001 \003(\0132\031.proto_ff.SkillGroupProto\022\027"
    "\n\017cur_skill_group\030\002 \001(\r\":\n\020GodEvilTaskPr"
    "oto\022\n\n\002id\030\001 \001(\005\022\013\n\003cur\030\002 \001(\005\022\r\n\005state\030\003 "
    "\001(\005\"\?\n\024GodEvilTaskListProto\022\'\n\003lst\030\001 \003(\013"
    "2\032.proto_ff.GodEvilTaskProto\"`\n\021GodEvilS"
    "tageProto\022\r\n\005stage\030\001 \001(\005\022,\n\004task\030\002 \001(\0132\036"
    ".proto_ff.GodEvilTaskListProto\022\016\n\006finish"
    "\030\003 \001(\005\"\236\001\n\014GodEvilProto\022\r\n\005fetch\030\001 \001(\005\022*"
    "\n\005stage\030\002 \001(\0132\033.proto_ff.GodEvilStagePro"
    "to\022\014\n\004type\030\003 \001(\005\022\n\n\002cd\030\004 \001(\005\022\022\n\nvessel_l"
    "ev\030\005 \001(\005\022\022\n\nmirror_lev\030\006 \001(\005\022\021\n\textra_ex"
    "p\030\007 \002(\003\"<\n\021FacadeFantasyData\022\022\n\nfantasy_"
    "id\030\001 \001(\004\022\023\n\013fantasy_lev\030\002 \001(\r\"<\n\022FacadeF"
    "ragmentData\022\023\n\013fragment_id\030\001 \001(\004\022\021\n\tuse_"
    "times\030\002 \001(\r\"6\n\017FacadeSkillData\022\020\n\010skill_"
    "id\030\001 \001(\004\022\021\n\tskill_lev\030\002 \001(\r\"j\n\020MountFant"
    "asyData\022\022\n\nfantasy_id\030\001 \001(\004\022\023\n\013fantasy_l"
    "ev\030\002 \001(\r\022\027\n\017fantasy_lev_exp\030\003 \001(\004\022\024\n\014fan"
    "tasy_star\030\004 \001(\r\";\n\021MountFragmentData\022\023\n\013"
    "fragment_id\030\001 \001(\004\022\021\n\tuse_times\030\002 \001(\r\"5\n\016"
    "MountSkillData\022\020\n\010skill_id\030\001 \001(\004\022\021\n\tskil"
    "l_lev\030\002 \001(\r\"V\n\014MountKunData\022\016\n\006kun_id\030\001 "
    "\001(\004\022\017\n\007kun_lev\030\002 \001(\r\022\023\n\013kun_lev_exp\030\003 \001("
    "\004\022\020\n\010kun_star\030\004 \001(\r\"7\n\016MountBloodData\022\020\n"
    "\010blood_id\030\001 \001(\004\022\023\n\013blood_state\030\002 \001(\r\"j\n\021"
    "MountBabySlotData\022\014\n\004slot\030\001 \001(\r\022\021\n\tcur_s"
    "tate\030\002 \001(\r\022\026\n\016cur_baby_eggid\030\003 \001(\003\022\034\n\024cu"
    "r_baby_create_time\030\004 \001(\003\"\177\n\022StatisticDat"
    "aProto\022\r\n\005level\030\001 \001(\005\022\027\n\017total_login_day"
    "\030\002 \001(\r\022\021\n\ttotal_rmb\030\003 \001(\r\022\021\n\ttoday_rmb\030\004"
    " \001(\r\022\033\n\023total_activityCount\030\005 \001(\r\"N\n\022God"
    "RelicsTaskEntry\022\023\n\013task_cfg_id\030\001 \001(\004\022\017\n\007"
    "cur_num\030\002 \001(\005\022\022\n\ntask_state\030\003 \001(\005\"\217\001\n\027Go"
    "dRelicsTaskGroupEntry\022\024\n\014group_cfg_id\030\001 "
    "\001(\004\022,\n\006entrys\030\002 \003(\0132\034.proto_ff.GodRelics"
    "TaskEntry\022\033\n\023normal_reward_state\030\003 \001(\005\022\023"
    "\n\013create_time\030\005 \001(\004\"n\n\016DailyTaskEntry\022\023\n"
    "\013task_cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\nt"
    "ask_state\030\003 \001(\005\022\021\n\tlast_time\030\004 \001(\004\022\017\n\007bu"
    "y_num\030\005 \001(\005\"\227\001\n\023DailyTaskLimitEntry\022\023\n\013t"
    "ask_cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\ntas"
    "k_state\030\003 \001(\005\022\021\n\tlast_time\030\004 \001(\004\022\017\n\007buy_"
    "num\030\005 \001(\005\022\021\n\tready_add\030\006 \001(\010\022\017\n\007is_open\030"
    "\007 \001(\010\"W\n\025DailyTaskBackDayEntry\022\020\n\010left_n"
    "um\030\001 \001(\005\022\031\n\021external_left_num\030\002 \001(\005\022\021\n\tl"
    "ast_time\030\003 \001(\003\"\235\001\n\022DailyTaskBackEntry\022\023\n"
    "\013task_cfg_id\030\001 \001(\004\022\022\n\ntask_state\030\003 \001(\005\0221"
    "\n\010day_data\030\004 \003(\0132\037.proto_ff.DailyTaskBac"
    "kDayEntry\022\020\n\010left_num\030\005 \001(\005\022\031\n\021external_"
    "left_num\030\006 \001(\005\"8\n\024DailyTaskRewardEntry\022\021"
    "\n\treward_id\030\001 \001(\004\022\r\n\005state\030\002 \001(\005\"\257\002\n\020Dai"
    "lyTaskAllData\022+\n\ttask_data\030\001 \003(\0132\030.proto"
    "_ff.DailyTaskEntry\0226\n\017task_limit_data\030\002 "
    "\003(\0132\035.proto_ff.DailyTaskLimitEntry\022/\n\tba"
    "ck_data\030\003 \003(\0132\034.proto_ff.DailyTaskBackEn"
    "try\0223\n\013reward_data\030\004 \003(\0132\036.proto_ff.Dail"
    "yTaskRewardEntry\022\023\n\013daily_score\030\005 \001(\r\022\023\n"
    "\013daily_level\030\006 \001(\r\022\023\n\013create_time\030\007 \001(\004\022"
    "\021\n\tdaily_exp\030\010 \001(\004\"J\n\036CharacterDBRecentS"
    "ubmitMission\022\024\n\014mission_type\030\001 \001(\005\022\022\n\nmi"
    "ssion_id\030\002 \001(\004\"\247\001\n\032CharacterDBMissionIte"
    "mInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\024\n\014curre"
    "ntValue\030\003 \001(\r\022\022\n\nfinalValue\030\004 \001(\r\022\025\n\rcom"
    "pletedFlag\030\005 \001(\010\022\016\n\006parma1\030\006 \001(\004\022\016\n\006parm"
    "a2\030\007 \001(\004\022\016\n\006parma3\030\010 \001(\004\"\307\001\n\027CharacterDB"
    "MissionTrack\022\021\n\tmissionId\030\001 \001(\004\022\021\n\tdynam"
    "icid\030\002 \001(\004\022\016\n\006status\030\003 \001(\r\022\031\n\021acceptMiss"
    "ionTime\030\004 \001(\004\0226\n\010itemInfo\030\005 \003(\0132$.proto_"
    "ff.CharacterDBMissionItemInfo\022\016\n\006textid\030"
    "\006 \001(\004\022\023\n\013missionType\030\007 \001(\r\"J\n\037CharacterD"
    "BDyMissionBountyParam\022\021\n\tten_state\030\001 \001(\r"
    "\022\024\n\014twenty_state\030\002 \001(\r\"\230\001\n\030CharacterDBDy"
    "MissionInfo\022\024\n\014mission_type\030\001 \001(\005\022\021\n\tlas"
    "tfresh\030\002 \001(\004\022\022\n\naccept_num\030\003 \001(\005\022\?\n\014boun"
    "ty_param\030\004 \001(\0132).proto_ff.CharacterDBDyM"
    "issionBountyParam\"\227\001\n\032GuildPrestigeMissi"
    "onDBData\022\023\n\013prestige_id\030\001 \001(\003\022\017\n\007task_id"
    "\030\002 \001(\003\022\022\n\ntask_state\030\003 \001(\005\022\r\n\005index\030\004 \001("
    "\005\0220\n\005track\030\005 \001(\0132!.proto_ff.CharacterDBM"
    "issionTrack\"\306\001\n\026GuildPrestigeMissionDB\022\023"
    "\n\013refresh_num\030\001 \001(\005\022\027\n\017all_refresh_num\030\002"
    " \001(\005\022\022\n\naccept_num\030\003 \001(\005\022\026\n\016all_accept_n"
    "um\030\004 \001(\005\0227\n\ttask_pool\030\005 \003(\0132$.proto_ff.G"
    "uildPrestigeMissionDBData\022\031\n\021last_refres"
    "h_time\030\007 \001(\003\"\227\002\n\023CharacterDBTaskData\0227\n\014"
    "missionTrack\030\001 \003(\0132!.proto_ff.CharacterD"
    "BMissionTrack\0222\n\006dyinfo\030\002 \003(\0132\".proto_ff"
    ".CharacterDBDyMissionInfo\022\026\n\016already_sub"
    "mit\030\003 \003(\004\022\?\n\rrecent_submit\030\004 \003(\0132(.proto"
    "_ff.CharacterDBRecentSubmitMission\022:\n\020pr"
    "estige_mission\030\005 \001(\0132 .proto_ff.GuildPre"
    "stigeMissionDB\",\n\020NotifyVipDataRsp\022\013\n\003ex"
    "p\030\001 \001(\005\022\013\n\003ids\030\002 \003(\005\"\255\001\n\020ArenaChallResul"
    "t\022\016\n\006result\030\001 \001(\005\022\r\n\005chall\030\002 \001(\010\022\014\n\004time"
    "\030\003 \001(\003\022\020\n\010dst_name\030\004 \001(\t\022\023\n\013src_rank_id\030"
    "\005 \001(\005\022\023\n\013dst_rank_id\030\006 \001(\005\022 \n\005items\030\007 \003("
    "\0132\021.proto_ff.ComItem\022\016\n\006dup_id\030\010 \001(\003\"1\n\020"
    "DailyArenaReward\022\016\n\006cfg_id\030\001 \001(\005\022\r\n\005stat"
    "e\030\002 \001(\005\"1\n\020ChallArenaReward\022\016\n\006cfg_id\030\001 "
    "\001(\005\022\r\n\005state\030\002 \001(\005\"\"\n\020NotifyServerFlag\022\016"
    "\n\006bt_dup\030\001 \001(\005\"7\n\023FacadeSoulSkillData\022\020\n"
    "\010skill_id\030\001 \001(\003\022\016\n\006status\030\002 \001(\r\"=\n\026Facad"
    "eSoulActivityData\022\023\n\013activity_id\030\001 \001(\003\022\016"
    "\n\006status\030\002 \001(\r\"\265\001\n\016FacadeSoulData\022\017\n\007sou"
    "l_id\030\001 \001(\r\022\023\n\013soul_active\030\002 \001(\010\022\022\n\nsoul_"
    "level\030\003 \001(\r\0221\n\nskill_data\030\005 \003(\0132\035.proto_"
    "ff.FacadeSoulSkillData\0226\n\014acviity_data\030\006"
    " \003(\0132 .proto_ff.FacadeSoulActivityData\"+"
    "\n\rItemSellProto\022\r\n\005index\030\001 \002(\r\022\013\n\003num\030\002 "
    "\001(\005\">\n\025DeityFantasySkillData\022\020\n\010skill_id"
    "\030\001 \001(\004\022\023\n\013skill_state\030\002 \001(\r\"`\n\016DeityEqui"
    "pData\022\"\n\005infos\030\001 \003(\0132\023.proto_ff.EquipInf"
    "o\022*\n\007lv_attr\030\002 \003(\0132\031.proto_ff.EquipLvAtt"
    "rInfo\"/\n\022DeityEquipSuitData\022\n\n\002id\030\001 \001(\003\022"
    "\r\n\005state\030\002 \001(\r\"\233\002\n\020DeityFantasyData\022\022\n\nf"
    "antasy_id\030\001 \001(\004\022\023\n\013fantasy_lev\030\002 \001(\r\022\027\n\017"
    "fantasy_lev_exp\030\003 \001(\004\022\024\n\014fantasy_star\030\004 "
    "\001(\r\0223\n\nskill_data\030\005 \003(\0132\037.proto_ff.Deity"
    "FantasySkillData\022\025\n\rfantasy_fight\030\006 \001(\004\022"
    ",\n\nequip_data\030\007 \001(\0132\030.proto_ff.DeityEqui"
    "pData\0225\n\017equip_suit_data\030\010 \003(\0132\034.proto_f"
    "f.DeityEquipSuitData\";\n\021DeityFragmentDat"
    "a\022\023\n\013fragment_id\030\001 \001(\004\022\021\n\tuse_times\030\002 \001("
    "\r\"5\n\016DeitySkillData\022\020\n\010skill_id\030\001 \001(\004\022\021\n"
    "\tskill_lev\030\002 \001(\r\"^\n\023DeityBattleSlotData\022"
    "\n\n\002id\030\001 \001(\r\022\021\n\tcur_state\030\002 \001(\r\022\020\n\010deity_"
    "id\030\003 \001(\003\022\026\n\016enter_war_time\030\004 \001(\003\".\n\016Armo"
    "rSuitState\022\r\n\005index\030\001 \001(\005\022\r\n\005state\030\002 \001(\005"
    "\"_\n\tArmorInfo\022\n\n\002id\030\001 \001(\005\022\'\n\005suits\030\002 \003(\013"
    "2\030.proto_ff.ArmorSuitState\022\020\n\010allstate\030\003"
    " \001(\005\022\013\n\003pos\030\004 \003(\005\"a\n\tTitleInfo\022\020\n\010title_"
    "id\030\001 \001(\003\022\016\n\006status\030\002 \001(\005\022\022\n\nstart_time\030\003"
    " \001(\003\022\020\n\010end_time\030\004 \001(\003\022\014\n\004star\030\005 \001(\005\"P\n\031"
    "OccupationMissionSoulData\022\021\n\tsoul_type\030\001"
    " \001(\005\022\020\n\010soul_pos\030\002 \001(\005\022\016\n\006status\030\003 \001(\005\"s"
    "\n\032OccupationMissionStageData\022\r\n\005stage\030\001 "
    "\001(\005\022\016\n\006status\030\002 \001(\005\0226\n\tsoul_data\030\003 \003(\0132#"
    ".proto_ff.OccupationMissionSoulData\"u\n\032O"
    "ccupationMissionGradeData\022\r\n\005grade\030\001 \001(\005"
    "\022\016\n\006status\030\002 \001(\005\0228\n\nstage_data\030\003 \003(\0132$.p"
    "roto_ff.OccupationMissionStageData\"Q\n\025Oc"
    "cupationMissionData\0228\n\ngrade_data\030\001 \003(\0132"
    "$.proto_ff.OccupationMissionGradeData\"c\n"
    "\017BestEQEquipInfo\022\016\n\006instId\030\001 \001(\005\022\r\n\005cfgI"
    "d\030\002 \001(\005\022\016\n\006makeId\030\003 \001(\005\022!\n\006skills\030\004 \003(\0132"
    "\021.proto_ff.ComPair\"K\n\013BestEQBreak\022\n\n\002lv\030"
    "\001 \001(\005\022\014\n\004exps\030\002 \003(\005\022\"\n\007genAttr\030\003 \003(\0132\021.p"
    "roto_ff.ComPair\"\237\001\n\016BestEQSlotInfo\022\014\n\004sl"
    "ot\030\001 \001(\005\022\016\n\006instId\030\002 \001(\005\022\016\n\006pourId\030\003 \001(\005"
    "\022\017\n\007pourExp\030\004 \001(\005\022\022\n\npourUnLock\030\005 \001(\005\022(\n"
    "\tbreakInfo\030\006 \001(\0132\025.proto_ff.BestEQBreak\022"
    "\020\n\010awakenLv\030\007 \001(\005\"\'\n\nBestEQTask\022\n\n\002id\030\001 "
    "\001(\005\022\r\n\005state\030\002 \001(\005*\\\n\007ECState\022\016\n\nstate_i"
    "nit\020\000\022\020\n\014state_normal\020\001\022\016\n\nstate_dead\020\002\022"
    "\016\n\nstate_seat\020\003\022\017\n\013state_fight\020\004*\275\002\n\nEAt"
    "trGroup\022\024\n\020EAttrGroup_Level\020\001\022\024\n\020EAttrGr"
    "oup_Skill\020\002\022\023\n\017EAttrGroup_Buff\020\003\022\024\n\020EAtt"
    "rGroup_Equip\020\004\022\023\n\017EAttrGroup_Grow\020\005\022\025\n\021E"
    "AttrGroup_Facade\020\006\022\021\n\rEAttrGroup_Gm\020\007\022\024\n"
    "\020EAttrGroup_MOUNT\020\010\022\022\n\016EAttrGroup_Pet\020\t\022"
    "\024\n\020EAttrGroup_DEITY\020\n\022\024\n\020EAttrGroup_Armo"
    "r\020\013\022\024\n\020EAttrGroup_Title\020\014\022\026\n\022EAttrGroup_"
    "GodEvil\020\r\022\025\n\021EAttrGroup_BestEQ\020\016*\300\003\n\010Gro"
    "wType\022\024\n\020GrowType_clothes\020\001\022\023\n\017GrowType_"
    "weapon\020\002\022\024\n\020GrowType_eye_awn\020\003\022\025\n\021GrowTy"
    "pe_face_des\020\004\022\026\n\022GrowType_waist_des\020\005\022\021\n"
    "\rGrowType_tail\020\006\022\025\n\021GrowType_bracelet\020\007\022"
    "\026\n\022GrowType_footprint\020\010\022\020\n\014GrowType_med\020"
    "\t\022\021\n\rGrowType_halo\020\n\022\030\n\024GrowType_proto_f"
    "rame\020\013\022\023\n\017GrowType_bubble\020\014\022\021\n\rGrowType_"
    "head\020\r\022\026\n\022GrowType_WING_TYPE\020\016\022\032\n\026GrowTy"
    "pe_TREASURE_TYPE\020\017\022\032\n\026GrowType_ARTIFACT_"
    "TYPE\020\020\022\031\n\025GrowType_PARTNER_TYPE\020\021\022\027\n\023Gro"
    "wType_MOUNT_TYPE\020\022\022\027\n\023GrowType_DEITY_TYP"
    "E\020\023*\305\030\n\rECreatureAttr\022\n\n\006A_NONE\020\000\022\014\n\010A_M"
    "AX_HP\020\001\022\t\n\005A_ATK\020\002\022\t\n\005A_DEF\020\003\022\017\n\013A_BRK_A"
    "RMOR\020\004\022\016\n\nA_FIVE_DAM\020\005\022\020\n\014A_FIVE_ARMOR\020\006"
    "\022\020\n\014A_THUMP_RATE\020\007\022\022\n\016A_THUMP_RESIST\020\010\022\t"
    "\n\005A_SKY\020\t\022\r\n\tA_SKY_DAM\020\n\022\025\n\021A_SKY_REDU_R"
    "ESIST\020\013\022\020\n\014A_SKY_RESIST\020\014\022\016\n\nA_KILL_GOD\020"
    "\r\022\016\n\nA_GOD_BODY\020\016\022\021\n\rA_MORTAL_RATE\020\017\022\023\n\017"
    "A_MORTAL_RESIST\020\020\022\020\n\014A_FAIRY_RATE\020\021\022\022\n\016A"
    "_FAIRY_RESIST\020\022\022\016\n\nA_GOD_RATE\020\023\022\020\n\014A_GOD"
    "_RESIST\020\024\022\017\n\013A_CRIT_RATE\020\025\022\025\n\021A_CRIT_RES"
    "IT_RATE\020\026\022\016\n\nA_CRIT_DAM\020\027\022\017\n\013A_CRIT_REDU"
    "\020\030\022\021\n\rA_BATTER_RATE\020\031\022\023\n\017A_BATTER_RESIST"
    "\020\032\022\020\n\014A_BATTER_DAM\020\033\022\021\n\rA_BATTER_REDU\020\034\022"
    "\022\n\016A_BRKDOWN_RATE\020\035\022\024\n\020A_BRKDOWN_RESIST\020"
    "\036\022\r\n\tA_DAM_ADD\020\037\022\016\n\nA_DAM_REDU\020 \022\r\n\tA_AL"
    "L_ADD\020!\022\016\n\nA_ALL_REDU\020\"\022\017\n\013A_SKILL_ADD\020#"
    "\022\020\n\014A_SKILL_REDU\020$\022\021\n\rA_REBOUND_DAM\020%\022\016\n"
    "\nA_HP_STEAL\020&\022\020\n\014A_DODGE_RATE\020\'\022\016\n\nA_HIT"
    "_RATE\020(\022\016\n\nA_BLK_RATE\020)\022\022\n\016A_BRK_BLK_RAT"
    "E\020*\022\016\n\nA_BLK_FREE\020+\022\020\n\014A_BLK_PIERCE\020,\022\017\n"
    "\013A_REL_ARMOR\020-\022\r\n\tA_REL_DAM\020.\022\021\n\rA_FIVE_"
    "RESIST\020/\022\026\n\022A_FIVE_RESIST_REDU\0200\022\016\n\nA_FI"
    "RE_ADD\0201\022\017\n\013A_FIRE_REDU\0202\022\r\n\tA_ICE_ADD\0203"
    "\022\016\n\nA_ICE_REDU\0204\022\021\n\rA_THUNDER_ADD\0205\022\021\n\rA"
    "_THUNDER_RDU\0206\022\021\n\rA_PLAYER_REDU\0207\022\020\n\014A_P"
    "LAYER_ADD\0208\022\021\n\rA_LEADER_REDU\0209\022\020\n\014A_LEAD"
    "ER_ADD\020:\022\016\n\nA_MON_REDU\020;\022\r\n\tA_MON_ADD\020<\022"
    "\016\n\nA_VAR_REDU\020=\022\r\n\tA_VAR_ADD\020>\022\024\n\020A_UNUS"
    "UAL_RESIST\020\?\022\021\n\rA_UNUSUAL_HIT\020@\022\020\n\014A_HP_"
    "RECOVER\020A\022\021\n\rA_UNUSUAL_ADD\020B\022\021\n\rA_FIX_RE"
    "COVER\020C\022\021\n\rA_HIGH_HP_ADD\020D\022\024\n\020A_RECOVER_"
    "HP_ADD\020E\022\016\n\nA_WEEK_ADD\020F\022\020\n\014A_MAG_SHIELD"
    "\020G\022\r\n\tA_MAG_ATK\020H\022\r\n\tA_MAG_DEF\020I\022\r\n\tA_MA"
    "G_DAM\020J\022\024\n\020A_MAG_SHIELD_ADD\020K\022\016\n\nA_MAG_R"
    "EDU\020L\022\021\n\rA_MAG_ATK_ADD\020M\022\021\n\rA_MAG_DEF_AD"
    "D\020N\022\022\n\016A_MAG_VAR_COOL\020O\022\020\n\014A_GOD_SHIELD\020"
    "P\022\014\n\010A_SHIELD\020Q\022\016\n\nA_VAR_TIME\020R\022\017\n\013A_COO"
    "L_TIME\020S\022\013\n\007A_SPEED\020T\022\014\n\010A_HP_ADD\020U\022\r\n\tA"
    "_ATK_ADD\020V\022\r\n\tA_DEF_ADD\020W\022\017\n\013A_ARMOR_ADD"
    "\020X\022\022\n\016A_FIVE_DAM_ADD\020Y\022\024\n\020A_FIVE_ARMOR_A"
    "DD\020Z\022\n\n\006A_DROP\020[\022\r\n\tA_EXP_ADD\020\\\022\017\n\013A_GOL"
    "D_DROP\020]\022\021\n\rA_LEV_ALL_ADD\020^\022\r\n\tA_SKY_ADD"
    "\020_\022\022\n\016A_GONG_ABS_ADD\020`\022\022\n\016A_MERI_ABS_ADD"
    "\020a\022\022\n\016A_WING_ALL_ADD\020b\022\030\n\024A_MAG_WEAPON_A"
    "LL_ADD\020c\022\026\n\022A_ARTIFACT_ALL_ADD\020d\022\023\n\017A_SW"
    "ORD_ALL_ADD\020e\022\021\n\rA_GOD_ALL_ADD\020f\022\023\n\017A_MO"
    "UNT_ALL_ADD\020g\022\023\n\017A_STONE_ALL_ADD\020h\022\020\n\014A_"
    "GOD_EQU_BA\020i\022\017\n\013A_WEAPON_BA\020j\022\024\n\020A_WEAPO"
    "N_WAKE_BA\020k\022\021\n\rA_GODS_QI_SHA\020l\022\021\n\rA_GODS"
    "_PO_JUN\020m\022\021\n\rA_GODS_ZI_WEI\020n\022\020\n\014A_GODS_W"
    "U_QU\020o\022\023\n\017A_GODS_TAI_YANG\020p\022\024\n\020A_GODS_LI"
    "AN_ZHEN\020q\022\023\n\017A_GODS_TAN_LANG\020r\022\022\n\016A_GODS"
    "_TIAN_FU\020s\022\025\n\021A_GODS_TIAN_XIANG\020t\022\021\n\rA_G"
    "ODS_JU_MEN\020u\022\030\n\024A_MAIN_WEAPON_BA_ADD\020v\022\032"
    "\n\026A_DEPUTY_WEAPON_BA_ADD\020w\022\020\n\014A_CAP_BA_A"
    "DD\020x\022\022\n\016A_CLOTH_BA_ADD\020y\022\021\n\rA_HAND_BA_AD"
    "D\020z\022\021\n\rA_BELT_BA_ADD\020{\022\021\n\rA_SHOE_BA_ADD\020"
    "|\022\021\n\rA_NECK_BA_ADD\020}\022\025\n\021A_BRACELET_BA_AD"
    "D\020~\022\021\n\rA_RING_BA_ADD\020\177\022\026\n\021A_EQU_WAKE_BA_"
    "ADD\020\200\001\022\031\n\024A_SUIT_ZHU_MO_BA_ADD\020\201\001\022\033\n\026A_S"
    "UIT_ZHU_XIAN_BA_ADD\020\202\001\022\033\n\026A_SUIT_ZHU_SHE"
    "N_BA_ADD\020\203\001\022\025\n\020A_EQU_FLY_BA_ADD\020\204\001\022\023\n\016A_"
    "EIGHT_BA_ADD\020\205\001\022\027\n\022A_EIGHT_EYE_BA_ADD\020\206\001"
    "\022\021\n\014A_COM_SHIELD\020\207\001\022\020\n\013A_FIGHT_END\020\310\001\022\013\n"
    "\006A_GOLD\020\311\001\022\014\n\007A_MAGIC\020\312\001\022\n\n\005A_DIA\020\313\001\022\r\n\010"
    "A_BD_DIA\020\314\001\022\017\n\nA_PRESTIGE\020\315\001\022\014\n\007A_FIGHT\020"
    "\316\001\022\n\n\005A_EXP\020\317\001\022\r\n\010A_CUR_HP\020\320\001\022\013\n\006A_PROF\020"
    "\321\001\022\014\n\007A_LEVEL\020\322\001\022\020\n\013A_VIP_LEVEL\020\323\001\022\016\n\tA_"
    "TEAM_ID\020\324\001\022\022\n\rA_TEAM_LEADER\020\325\001\022\021\n\014A_AREN"
    "A_COIN\020\326\001\022\017\n\nA_TITLE_ID\020\327\001\022\023\n\016A_FRIEND_C"
    "OUNT\020\334\001\022\022\n\rA_HANGUP_TIME\020\335\001\022\024\n\017A_WORLD_E"
    "XP_ADD\020\336\001\022\021\n\014A_FUSHI_TIME\020\337\001\022\r\n\010A_DUP_ID"
    "\020\340\001\022\016\n\tA_CAMP_ID\020\342\001\022\020\n\013A_DAILY_EXP\020\343\001\022\021\n"
    "\014A_FACTION_ID\020\344\001\022\025\n\020A_FACTION_LEADER\020\345\001\022"
    "\024\n\017A_FACTION_LEVEL\020\346\001\022\023\n\016A_FACTION_DUTY\020"
    "\347\001\022\r\n\010A_CONTRI\020\350\001\022\020\n\013A_ESCORT_ID\020\351\001\022\022\n\rA"
    "_GODEVIL_EXP\020\352\001\022\022\n\rA_GODEVIL_LEV\020\353\001\022\023\n\016A"
    "_TEMP_CAMP_ID\020\354\001\022\016\n\tA_BEST_AQ\020\355\001\022\016\n\tA_BE"
    "ST_LJ\020\356\001\022\021\n\014A_COMMON_END\020\220\003*\225\002\n\rDigPerfo"
    "rType\022\t\n\005addhp\020\001\022\014\n\010reducehp\020\002\022\010\n\004crit\020\003"
    "\022\t\n\005dodge\020\004\022\n\n\006absorb\020\005\022\020\n\014normalimmune\020"
    "\006\022\016\n\nfiveimmune\020\007\022\r\n\tgodimmune\020\010\022\n\n\006inju"
    "ry\020\t\022\016\n\ninvincible\020\n\022\021\n\reffectivearea\020\013\022"
    "\t\n\005steal\020\014\022\010\n\004kill\020\r\022\022\n\016bosscountlimit\020\016"
    "\022\r\n\tbreakdown\020\017\022\t\n\005conti\020\020\022\010\n\004pet1\020\021\022\010\n\004"
    "pet2\020\022\022\010\n\004pet3\020\023\022\t\n\005block\020\024*t\n\017MountBloo"
    "dState\022 \n\034MOUNT_BLOOD_STATE_NOT_ACTIVE\020\000"
    "\022 \n\034MOUNT_BLOOD_STATE_CAN_ACTIVE\020\001\022\035\n\031MO"
    "UNT_BLOOD_STATE_ACTIVED\020\002*\237\001\n\022MountBabyS"
    "lotState\022\036\n\032MOUNT_BABY_SLOT_STATE_LOCK\020\000"
    "\022\037\n\033MOUNT_BABY_SLOT_STATE_EMPTY\020\001\022\037\n\033MOU"
    "NT_BABY_SLOT_STATE_USING\020\002\022\'\n#MOUNT_BABY"
    "_SLOT_STATE_DUING_SUCCESS\020\003*\221\001\n\030EN_GODRE"
    "LICS_TASK_STATUS\022\'\n#EN_GODRELICS_TASK_ST"
    "ATUS_NOT_FINISH\020\000\022#\n\037EN_GODRELICS_TASK_S"
    "TATUS_FINISH\020\001\022\'\n#EN_GODRELICS_TASK_STAT"
    "US_GET_REWARD\020\002*\330\001\n\036EN_GODRELICS_GROUP_T"
    "ASK_STATUS\022-\n)EN_GODRELICS_GROUP_TASK_ST"
    "ATUS_NOT_UNLOCK\020\000\022-\n)EN_GODRELICS_GROUP_"
    "TASK_STATUS_NOT_FINISH\020\001\022)\n%EN_GODRELICS"
    "_GROUP_TASK_STATUS_FINISH\020\002\022-\n)EN_GODREL"
    "ICS_GROUP_TASK_STATUS_GET_REWARD\020\003*\201\001\n\024E"
    "N_DAILY_TASK_STATUS\022#\n\037EN_DAILY_TASK_STA"
    "TUS_NOT_UNLOCK\020\000\022#\n\037EN_DAILY_TASK_STATUS"
    "_NOT_FINISH\020\001\022\037\n\033EN_DAILY_TASK_STATUS_FI"
    "NISH\020\002*\224\001\n\033EN_DAILY_TASK_REWARD_STATUS\022\'"
    "\n#EN_DAILY_TASK_REWARD_STATUS_NOT_GET\020\000\022"
    "\'\n#EN_DAILY_TASK_REWARD_STATUS_CAN_GET\020\001"
    "\022#\n\037EN_DAILY_TASK_REWARD_STATUS_GET\020\002*`\n"
    "\025FacadeSoulSkillStatus\022!\n\035FACADE_SOUL_SK"
    "ILL_STATUS_NONE\020\000\022$\n FACADE_SOUL_SKILL_S"
    "TATUS_ACTIVED\020\001*\221\001\n\027FacadeSoulActivityta"
    "tus\022$\n FACADE_SOUL_ACTIVITY_STATUS_NONE\020"
    "\000\022(\n$FACADE_SOUL_ACTIVITY_STATUS_CAN_REC"
    "V\020\001\022&\n\"FACADE_SOUL_ACTIVITY_STATUS_RECVe"
    "d\020\002*\177\n\025EDeityEquipSuitStatus\022\036\n\032EDeityEq"
    "uipSuitStatus_NONE\020\000\022$\n EDeityEquipSuitS"
    "tatus_NOT_ACTIVE\020\001\022 \n\034EDeityEquipSuitSta"
    "tus_ACTIVE\020\002*~\n\024DeityBattleSlotState\022 \n\034"
    "DEITY_BATTLE_SLOT_STATE_LOCK\020\000\022!\n\035DEITY_"
    "BATTLE_SLOT_STATE_EMPTY\020\001\022!\n\035DEITY_BATTL"
    "E_SLOT_STATE_USING\020\002*~\n\014ETitleStatus\022\027\n\023"
    "E_TITLE_STATUS_NONE\020\000\022\035\n\031E_TITLE_STATUS_"
    "CAN_ACTIVE\020\001\022\032\n\026E_TITLE_STATUS_ACTIVED\020\002"
    "\022\032\n\026E_TITLE_STATUS_WEARING\020\003", 17628);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Com.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  ComPair::default_instance_ = new ComPair();
  ComPair64::default_instance_ = new ComPair64();
  ComPairBool::default_instance_ = new ComPairBool();
  ComItem::default_instance_ = new ComItem();
  ComItemWithType::default_instance_ = new ComItemWithType();
  Vector3PB::default_instance_ = new Vector3PB();
  Vector2PB::default_instance_ = new Vector2PB();
  Attr64::default_instance_ = new Attr64();
  RoleFacadeProto::default_instance_ = new RoleFacadeProto();
  RoleListDBProto::default_instance_ = new RoleListDBProto();
  LoginRoleProto::default_instance_ = new LoginRoleProto();
  LoginSyncProto::default_instance_ = new LoginSyncProto();
  CenterRoleProto::default_instance_ = new CenterRoleProto();
  SocialRoleProto::default_instance_ = new SocialRoleProto();
  Attr::default_instance_ = new Attr();
  BlueStarAttr::default_instance_ = new BlueStarAttr();
  PetInfo::default_instance_ = new PetInfo();
  PetHatchInfo::default_instance_ = new PetHatchInfo();
  ItemProtoInfo::default_instance_ = new ItemProtoInfo();
  StoneSlotInfo::default_instance_ = new StoneSlotInfo();
  WashSlotInfo::default_instance_ = new WashSlotInfo();
  EquipSlotInfo::default_instance_ = new EquipSlotInfo();
  EquipInfo::default_instance_ = new EquipInfo();
  EquipLvAttrInfo::default_instance_ = new EquipLvAttrInfo();
  ItemSimpleProto::default_instance_ = new ItemSimpleProto();
  MultItemSimpleProto::default_instance_ = new MultItemSimpleProto();
  MailParamProto::default_instance_ = new MailParamProto();
  MailStrProto::default_instance_ = new MailStrProto();
  MailAttachmentList::default_instance_ = new MailAttachmentList();
  MailHead::default_instance_ = new MailHead();
  MailInfo::default_instance_ = new MailInfo();
  WebMailItemProto::default_instance_ = new WebMailItemProto();
  WebMailDataProto::default_instance_ = new WebMailDataProto();
  UseItemArgProto::default_instance_ = new UseItemArgProto();
  NotifyRoleFacadeCastRsp::default_instance_ = new NotifyRoleFacadeCastRsp();
  FunctionUnlockInfoData::default_instance_ = new FunctionUnlockInfoData();
  FunctionUnlockInfo::default_instance_ = new FunctionUnlockInfo();
  RolePlayerMiniInfo::default_instance_ = new RolePlayerMiniInfo();
  FriendInfo::default_instance_ = new FriendInfo();
  FriendApplyInfo::default_instance_ = new FriendApplyInfo();
  RelationHateInfo::default_instance_ = new RelationHateInfo();
  RelationGiftRecord::default_instance_ = new RelationGiftRecord();
  RelationDBInfo::default_instance_ = new RelationDBInfo();
  DigPerfor::default_instance_ = new DigPerfor();
  BuffProto::default_instance_ = new BuffProto();
  BuffListProto::default_instance_ = new BuffListProto();
  SkillPosProto::default_instance_ = new SkillPosProto();
  SkillGroupProto::default_instance_ = new SkillGroupProto();
  SkillGroupListProto::default_instance_ = new SkillGroupListProto();
  GodEvilTaskProto::default_instance_ = new GodEvilTaskProto();
  GodEvilTaskListProto::default_instance_ = new GodEvilTaskListProto();
  GodEvilStageProto::default_instance_ = new GodEvilStageProto();
  GodEvilProto::default_instance_ = new GodEvilProto();
  FacadeFantasyData::default_instance_ = new FacadeFantasyData();
  FacadeFragmentData::default_instance_ = new FacadeFragmentData();
  FacadeSkillData::default_instance_ = new FacadeSkillData();
  MountFantasyData::default_instance_ = new MountFantasyData();
  MountFragmentData::default_instance_ = new MountFragmentData();
  MountSkillData::default_instance_ = new MountSkillData();
  MountKunData::default_instance_ = new MountKunData();
  MountBloodData::default_instance_ = new MountBloodData();
  MountBabySlotData::default_instance_ = new MountBabySlotData();
  StatisticDataProto::default_instance_ = new StatisticDataProto();
  GodRelicsTaskEntry::default_instance_ = new GodRelicsTaskEntry();
  GodRelicsTaskGroupEntry::default_instance_ = new GodRelicsTaskGroupEntry();
  DailyTaskEntry::default_instance_ = new DailyTaskEntry();
  DailyTaskLimitEntry::default_instance_ = new DailyTaskLimitEntry();
  DailyTaskBackDayEntry::default_instance_ = new DailyTaskBackDayEntry();
  DailyTaskBackEntry::default_instance_ = new DailyTaskBackEntry();
  DailyTaskRewardEntry::default_instance_ = new DailyTaskRewardEntry();
  DailyTaskAllData::default_instance_ = new DailyTaskAllData();
  CharacterDBRecentSubmitMission::default_instance_ = new CharacterDBRecentSubmitMission();
  CharacterDBMissionItemInfo::default_instance_ = new CharacterDBMissionItemInfo();
  CharacterDBMissionTrack::default_instance_ = new CharacterDBMissionTrack();
  CharacterDBDyMissionBountyParam::default_instance_ = new CharacterDBDyMissionBountyParam();
  CharacterDBDyMissionInfo::default_instance_ = new CharacterDBDyMissionInfo();
  GuildPrestigeMissionDBData::default_instance_ = new GuildPrestigeMissionDBData();
  GuildPrestigeMissionDB::default_instance_ = new GuildPrestigeMissionDB();
  CharacterDBTaskData::default_instance_ = new CharacterDBTaskData();
  NotifyVipDataRsp::default_instance_ = new NotifyVipDataRsp();
  ArenaChallResult::default_instance_ = new ArenaChallResult();
  DailyArenaReward::default_instance_ = new DailyArenaReward();
  ChallArenaReward::default_instance_ = new ChallArenaReward();
  NotifyServerFlag::default_instance_ = new NotifyServerFlag();
  FacadeSoulSkillData::default_instance_ = new FacadeSoulSkillData();
  FacadeSoulActivityData::default_instance_ = new FacadeSoulActivityData();
  FacadeSoulData::default_instance_ = new FacadeSoulData();
  ItemSellProto::default_instance_ = new ItemSellProto();
  DeityFantasySkillData::default_instance_ = new DeityFantasySkillData();
  DeityEquipData::default_instance_ = new DeityEquipData();
  DeityEquipSuitData::default_instance_ = new DeityEquipSuitData();
  DeityFantasyData::default_instance_ = new DeityFantasyData();
  DeityFragmentData::default_instance_ = new DeityFragmentData();
  DeitySkillData::default_instance_ = new DeitySkillData();
  DeityBattleSlotData::default_instance_ = new DeityBattleSlotData();
  ArmorSuitState::default_instance_ = new ArmorSuitState();
  ArmorInfo::default_instance_ = new ArmorInfo();
  TitleInfo::default_instance_ = new TitleInfo();
  OccupationMissionSoulData::default_instance_ = new OccupationMissionSoulData();
  OccupationMissionStageData::default_instance_ = new OccupationMissionStageData();
  OccupationMissionGradeData::default_instance_ = new OccupationMissionGradeData();
  OccupationMissionData::default_instance_ = new OccupationMissionData();
  BestEQEquipInfo::default_instance_ = new BestEQEquipInfo();
  BestEQBreak::default_instance_ = new BestEQBreak();
  BestEQSlotInfo::default_instance_ = new BestEQSlotInfo();
  BestEQTask::default_instance_ = new BestEQTask();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  ComPair::default_instance_->InitAsDefaultInstance();
  ComPair64::default_instance_->InitAsDefaultInstance();
  ComPairBool::default_instance_->InitAsDefaultInstance();
  ComItem::default_instance_->InitAsDefaultInstance();
  ComItemWithType::default_instance_->InitAsDefaultInstance();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  Vector2PB::default_instance_->InitAsDefaultInstance();
  Attr64::default_instance_->InitAsDefaultInstance();
  RoleFacadeProto::default_instance_->InitAsDefaultInstance();
  RoleListDBProto::default_instance_->InitAsDefaultInstance();
  LoginRoleProto::default_instance_->InitAsDefaultInstance();
  LoginSyncProto::default_instance_->InitAsDefaultInstance();
  CenterRoleProto::default_instance_->InitAsDefaultInstance();
  SocialRoleProto::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  BlueStarAttr::default_instance_->InitAsDefaultInstance();
  PetInfo::default_instance_->InitAsDefaultInstance();
  PetHatchInfo::default_instance_->InitAsDefaultInstance();
  ItemProtoInfo::default_instance_->InitAsDefaultInstance();
  StoneSlotInfo::default_instance_->InitAsDefaultInstance();
  WashSlotInfo::default_instance_->InitAsDefaultInstance();
  EquipSlotInfo::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  EquipLvAttrInfo::default_instance_->InitAsDefaultInstance();
  ItemSimpleProto::default_instance_->InitAsDefaultInstance();
  MultItemSimpleProto::default_instance_->InitAsDefaultInstance();
  MailParamProto::default_instance_->InitAsDefaultInstance();
  MailStrProto::default_instance_->InitAsDefaultInstance();
  MailAttachmentList::default_instance_->InitAsDefaultInstance();
  MailHead::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  WebMailItemProto::default_instance_->InitAsDefaultInstance();
  WebMailDataProto::default_instance_->InitAsDefaultInstance();
  UseItemArgProto::default_instance_->InitAsDefaultInstance();
  NotifyRoleFacadeCastRsp::default_instance_->InitAsDefaultInstance();
  FunctionUnlockInfoData::default_instance_->InitAsDefaultInstance();
  FunctionUnlockInfo::default_instance_->InitAsDefaultInstance();
  RolePlayerMiniInfo::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  FriendApplyInfo::default_instance_->InitAsDefaultInstance();
  RelationHateInfo::default_instance_->InitAsDefaultInstance();
  RelationGiftRecord::default_instance_->InitAsDefaultInstance();
  RelationDBInfo::default_instance_->InitAsDefaultInstance();
  DigPerfor::default_instance_->InitAsDefaultInstance();
  BuffProto::default_instance_->InitAsDefaultInstance();
  BuffListProto::default_instance_->InitAsDefaultInstance();
  SkillPosProto::default_instance_->InitAsDefaultInstance();
  SkillGroupProto::default_instance_->InitAsDefaultInstance();
  SkillGroupListProto::default_instance_->InitAsDefaultInstance();
  GodEvilTaskProto::default_instance_->InitAsDefaultInstance();
  GodEvilTaskListProto::default_instance_->InitAsDefaultInstance();
  GodEvilStageProto::default_instance_->InitAsDefaultInstance();
  GodEvilProto::default_instance_->InitAsDefaultInstance();
  FacadeFantasyData::default_instance_->InitAsDefaultInstance();
  FacadeFragmentData::default_instance_->InitAsDefaultInstance();
  FacadeSkillData::default_instance_->InitAsDefaultInstance();
  MountFantasyData::default_instance_->InitAsDefaultInstance();
  MountFragmentData::default_instance_->InitAsDefaultInstance();
  MountSkillData::default_instance_->InitAsDefaultInstance();
  MountKunData::default_instance_->InitAsDefaultInstance();
  MountBloodData::default_instance_->InitAsDefaultInstance();
  MountBabySlotData::default_instance_->InitAsDefaultInstance();
  StatisticDataProto::default_instance_->InitAsDefaultInstance();
  GodRelicsTaskEntry::default_instance_->InitAsDefaultInstance();
  GodRelicsTaskGroupEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskLimitEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskBackDayEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskBackEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskRewardEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskAllData::default_instance_->InitAsDefaultInstance();
  CharacterDBRecentSubmitMission::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionItemInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionTrack::default_instance_->InitAsDefaultInstance();
  CharacterDBDyMissionBountyParam::default_instance_->InitAsDefaultInstance();
  CharacterDBDyMissionInfo::default_instance_->InitAsDefaultInstance();
  GuildPrestigeMissionDBData::default_instance_->InitAsDefaultInstance();
  GuildPrestigeMissionDB::default_instance_->InitAsDefaultInstance();
  CharacterDBTaskData::default_instance_->InitAsDefaultInstance();
  NotifyVipDataRsp::default_instance_->InitAsDefaultInstance();
  ArenaChallResult::default_instance_->InitAsDefaultInstance();
  DailyArenaReward::default_instance_->InitAsDefaultInstance();
  ChallArenaReward::default_instance_->InitAsDefaultInstance();
  NotifyServerFlag::default_instance_->InitAsDefaultInstance();
  FacadeSoulSkillData::default_instance_->InitAsDefaultInstance();
  FacadeSoulActivityData::default_instance_->InitAsDefaultInstance();
  FacadeSoulData::default_instance_->InitAsDefaultInstance();
  ItemSellProto::default_instance_->InitAsDefaultInstance();
  DeityFantasySkillData::default_instance_->InitAsDefaultInstance();
  DeityEquipData::default_instance_->InitAsDefaultInstance();
  DeityEquipSuitData::default_instance_->InitAsDefaultInstance();
  DeityFantasyData::default_instance_->InitAsDefaultInstance();
  DeityFragmentData::default_instance_->InitAsDefaultInstance();
  DeitySkillData::default_instance_->InitAsDefaultInstance();
  DeityBattleSlotData::default_instance_->InitAsDefaultInstance();
  ArmorSuitState::default_instance_->InitAsDefaultInstance();
  ArmorInfo::default_instance_->InitAsDefaultInstance();
  TitleInfo::default_instance_->InitAsDefaultInstance();
  OccupationMissionSoulData::default_instance_->InitAsDefaultInstance();
  OccupationMissionStageData::default_instance_->InitAsDefaultInstance();
  OccupationMissionGradeData::default_instance_->InitAsDefaultInstance();
  OccupationMissionData::default_instance_->InitAsDefaultInstance();
  BestEQEquipInfo::default_instance_->InitAsDefaultInstance();
  BestEQBreak::default_instance_->InitAsDefaultInstance();
  BestEQSlotInfo::default_instance_->InitAsDefaultInstance();
  BestEQTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Com_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Com_2eproto {
  StaticDescriptorInitializer_Com_2eproto() {
    protobuf_AddDesc_Com_2eproto();
  }
} static_descriptor_initializer_Com_2eproto_;
const ::google::protobuf::EnumDescriptor* ECState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECState_descriptor_;
}
bool ECState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttrGroup_descriptor_;
}
bool EAttrGroup_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GrowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowType_descriptor_;
}
bool GrowType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreatureAttr_descriptor_;
}
bool ECreatureAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DigPerforType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerforType_descriptor_;
}
bool DigPerforType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MountBloodState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountBloodState_descriptor_;
}
bool MountBloodState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MountBabySlotState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountBabySlotState_descriptor_;
}
bool MountBabySlotState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_GODRELICS_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_GODRELICS_TASK_STATUS_descriptor_;
}
bool EN_GODRELICS_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_GODRELICS_GROUP_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_GODRELICS_GROUP_TASK_STATUS_descriptor_;
}
bool EN_GODRELICS_GROUP_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_DAILY_TASK_STATUS_descriptor_;
}
bool EN_DAILY_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_REWARD_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_DAILY_TASK_REWARD_STATUS_descriptor_;
}
bool EN_DAILY_TASK_REWARD_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacadeSoulSkillStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSoulSkillStatus_descriptor_;
}
bool FacadeSoulSkillStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FacadeSoulActivitytatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSoulActivitytatus_descriptor_;
}
bool FacadeSoulActivitytatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDeityEquipSuitStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDeityEquipSuitStatus_descriptor_;
}
bool EDeityEquipSuitStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DeityBattleSlotState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityBattleSlotState_descriptor_;
}
bool DeityBattleSlotState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleStatus_descriptor_;
}
bool ETitleStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair::kKeyFieldNumber;
const int ComPair::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair::ComPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair::InitAsDefaultInstance() {
}

ComPair::ComPair(const ComPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair::~ComPair() {
  SharedDtor();
}

void ComPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair_descriptor_;
}

const ComPair& ComPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair* ComPair::default_instance_ = NULL;

ComPair* ComPair::New() const {
  return new ComPair;
}

void ComPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair::MergeFrom(const ComPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair::CopyFrom(const ComPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair::IsInitialized() const {

  return true;
}

void ComPair::Swap(ComPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair_descriptor_;
  metadata.reflection = ComPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair64::kKeyFieldNumber;
const int ComPair64::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair64::ComPair64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair64::InitAsDefaultInstance() {
}

ComPair64::ComPair64(const ComPair64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair64::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair64::~ComPair64() {
  SharedDtor();
}

void ComPair64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair64_descriptor_;
}

const ComPair64& ComPair64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair64* ComPair64::default_instance_ = NULL;

ComPair64* ComPair64::New() const {
  return new ComPair64;
}

void ComPair64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair64::MergeFrom(const ComPair64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair64::CopyFrom(const ComPair64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair64::IsInitialized() const {

  return true;
}

void ComPair64::Swap(ComPair64* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair64_descriptor_;
  metadata.reflection = ComPair64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPairBool::kKeyFieldNumber;
const int ComPairBool::kValueFieldNumber;
#endif  // !_MSC_VER

ComPairBool::ComPairBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPairBool::InitAsDefaultInstance() {
}

ComPairBool::ComPairBool(const ComPairBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPairBool::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPairBool::~ComPairBool() {
  SharedDtor();
}

void ComPairBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPairBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPairBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPairBool_descriptor_;
}

const ComPairBool& ComPairBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPairBool* ComPairBool::default_instance_ = NULL;

ComPairBool* ComPairBool::New() const {
  return new ComPairBool;
}

void ComPairBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPairBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPairBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPairBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPairBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPairBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPairBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPairBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPairBool::MergeFrom(const ComPairBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPairBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPairBool::CopyFrom(const ComPairBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPairBool::IsInitialized() const {

  return true;
}

void ComPairBool::Swap(ComPairBool* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPairBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPairBool_descriptor_;
  metadata.reflection = ComPairBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComItem::kItemIdFieldNumber;
const int ComItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

ComItem::ComItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComItem::InitAsDefaultInstance() {
}

ComItem::ComItem(const ComItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComItem::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComItem::~ComItem() {
  SharedDtor();
}

void ComItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComItem_descriptor_;
}

const ComItem& ComItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComItem* ComItem::default_instance_ = NULL;

ComItem* ComItem::New() const {
  return new ComItem;
}

void ComItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComItem::MergeFrom(const ComItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComItem::CopyFrom(const ComItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComItem::IsInitialized() const {

  return true;
}

void ComItem::Swap(ComItem* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComItem_descriptor_;
  metadata.reflection = ComItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComItemWithType::kItemIdFieldNumber;
const int ComItemWithType::kItemNumFieldNumber;
const int ComItemWithType::kTypeFieldNumber;
#endif  // !_MSC_VER

ComItemWithType::ComItemWithType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComItemWithType::InitAsDefaultInstance() {
}

ComItemWithType::ComItemWithType(const ComItemWithType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComItemWithType::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComItemWithType::~ComItemWithType() {
  SharedDtor();
}

void ComItemWithType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComItemWithType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComItemWithType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComItemWithType_descriptor_;
}

const ComItemWithType& ComItemWithType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComItemWithType* ComItemWithType::default_instance_ = NULL;

ComItemWithType* ComItemWithType::New() const {
  return new ComItemWithType;
}

void ComItemWithType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComItemWithType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // optional uint64 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComItemWithType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_num(), output);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComItemWithType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint64 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_num(), target);
  }

  // optional uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComItemWithType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint64 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_num());
    }

    // optional uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComItemWithType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComItemWithType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComItemWithType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComItemWithType::MergeFrom(const ComItemWithType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComItemWithType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComItemWithType::CopyFrom(const ComItemWithType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComItemWithType::IsInitialized() const {

  return true;
}

void ComItemWithType::Swap(ComItemWithType* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComItemWithType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComItemWithType_descriptor_;
  metadata.reflection = ComItemWithType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2PB::kXFieldNumber;
const int Vector2PB::kYFieldNumber;
#endif  // !_MSC_VER

Vector2PB::Vector2PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2PB::InitAsDefaultInstance() {
}

Vector2PB::Vector2PB(const Vector2PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2PB::~Vector2PB() {
  SharedDtor();
}

void Vector2PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2PB_descriptor_;
}

const Vector2PB& Vector2PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector2PB* Vector2PB::default_instance_ = NULL;

Vector2PB* Vector2PB::New() const {
  return new Vector2PB;
}

void Vector2PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2PB::MergeFrom(const Vector2PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2PB::CopyFrom(const Vector2PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2PB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Vector2PB::Swap(Vector2PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2PB_descriptor_;
  metadata.reflection = Vector2PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr64::kIdFieldNumber;
const int Attr64::kValueFieldNumber;
#endif  // !_MSC_VER

Attr64::Attr64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr64::InitAsDefaultInstance() {
}

Attr64::Attr64(const Attr64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr64::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr64::~Attr64() {
  SharedDtor();
}

void Attr64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr64_descriptor_;
}

const Attr64& Attr64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Attr64* Attr64::default_instance_ = NULL;

Attr64* Attr64::New() const {
  return new Attr64;
}

void Attr64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr64::MergeFrom(const Attr64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr64::CopyFrom(const Attr64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr64::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attr64::Swap(Attr64* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr64_descriptor_;
  metadata.reflection = Attr64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFacadeProto::kGrowFacadeFieldNumber;
const int RoleFacadeProto::kColorFieldNumber;
const int RoleFacadeProto::kProfFieldNumber;
#endif  // !_MSC_VER

RoleFacadeProto::RoleFacadeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFacadeProto::InitAsDefaultInstance() {
}

RoleFacadeProto::RoleFacadeProto(const RoleFacadeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFacadeProto::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  prof_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFacadeProto::~RoleFacadeProto() {
  SharedDtor();
}

void RoleFacadeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleFacadeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFacadeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFacadeProto_descriptor_;
}

const RoleFacadeProto& RoleFacadeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RoleFacadeProto* RoleFacadeProto::default_instance_ = NULL;

RoleFacadeProto* RoleFacadeProto::New() const {
  return new RoleFacadeProto;
}

void RoleFacadeProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    color_ = 0;
    prof_ = 0;
  }
  growfacade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFacadeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 growFacade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growFacade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growfacade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_growFacade;
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFacadeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 growFacade = 1;
  for (int i = 0; i < this->growfacade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->growfacade(i), output);
  }

  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFacadeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 growFacade = 1;
  for (int i = 0; i < this->growfacade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->growfacade(i), target);
  }

  // optional int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFacadeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

  }
  // repeated .proto_ff.Attr64 growFacade = 1;
  total_size += 1 * this->growfacade_size();
  for (int i = 0; i < this->growfacade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growfacade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFacadeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFacadeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFacadeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFacadeProto::MergeFrom(const RoleFacadeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  growfacade_.MergeFrom(from.growfacade_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFacadeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFacadeProto::CopyFrom(const RoleFacadeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFacadeProto::IsInitialized() const {

  for (int i = 0; i < growfacade_size(); i++) {
    if (!this->growfacade(i).IsInitialized()) return false;
  }
  return true;
}

void RoleFacadeProto::Swap(RoleFacadeProto* other) {
  if (other != this) {
    growfacade_.Swap(&other->growfacade_);
    std::swap(color_, other->color_);
    std::swap(prof_, other->prof_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFacadeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFacadeProto_descriptor_;
  metadata.reflection = RoleFacadeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBProto::kCidFieldNumber;
const int RoleListDBProto::kNameFieldNumber;
const int RoleListDBProto::kProfFieldNumber;
const int RoleListDBProto::kLevelFieldNumber;
const int RoleListDBProto::kFightFieldNumber;
const int RoleListDBProto::kCreatetimeFieldNumber;
const int RoleListDBProto::kFacadeFieldNumber;
const int RoleListDBProto::kSceneidFieldNumber;
const int RoleListDBProto::kMapidFieldNumber;
const int RoleListDBProto::kPosFieldNumber;
const int RoleListDBProto::kLastsceneidFieldNumber;
const int RoleListDBProto::kLastmapidFieldNumber;
const int RoleListDBProto::kLastposFieldNumber;
#endif  // !_MSC_VER

RoleListDBProto::RoleListDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  lastpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

RoleListDBProto::RoleListDBProto(const RoleListDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBProto::~RoleListDBProto() {
  SharedDtor();
}

void RoleListDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete pos_;
    delete lastpos_;
  }
}

void RoleListDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBProto_descriptor_;
}

const RoleListDBProto& RoleListDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RoleListDBProto* RoleListDBProto::default_instance_ = NULL;

RoleListDBProto* RoleListDBProto::New() const {
  return new RoleListDBProto;
}

void RoleListDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    sceneid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
    if (has_lastpos()) {
      if (lastpos_ != NULL) lastpos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // required uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // required uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastsceneid;
        break;
      }

      // optional uint64 lastsceneid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lastmapid;
        break;
      }

      // optional uint64 lastmapid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_lastpos;
        break;
      }

      // optional .proto_ff.Vector3PB lastpos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facade(), output);
  }

  // optional uint64 sceneid = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sceneid(), output);
  }

  // optional uint64 mapid = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->mapid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 10;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pos(), output);
  }

  // optional uint64 lastsceneid = 11;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lastsceneid(), output);
  }

  // optional uint64 lastmapid = 12;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->lastmapid(), output);
  }

  // optional .proto_ff.Vector3PB lastpos = 13;
  if (has_lastpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lastpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // required uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facade(), target);
  }

  // optional uint64 sceneid = 8;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sceneid(), target);
  }

  // optional uint64 mapid = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->mapid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 10;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pos(), target);
  }

  // optional uint64 lastsceneid = 11;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lastsceneid(), target);
  }

  // optional uint64 lastmapid = 12;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->lastmapid(), target);
  }

  // optional .proto_ff.Vector3PB lastpos = 13;
  if (has_lastpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lastpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 7;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint64 sceneid = 8;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 mapid = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional .proto_ff.Vector3PB pos = 10;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 lastsceneid = 11;
    if (has_lastsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastmapid = 12;
    if (has_lastmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

    // optional .proto_ff.Vector3PB lastpos = 13;
    if (has_lastpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBProto::MergeFrom(const RoleListDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastpos()) {
      mutable_lastpos()->::proto_ff::Vector3PB::MergeFrom(from.lastpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBProto::CopyFrom(const RoleListDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_lastpos()) {
    if (!this->lastpos().IsInitialized()) return false;
  }
  return true;
}

void RoleListDBProto::Swap(RoleListDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastpos_, other->lastpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBProto_descriptor_;
  metadata.reflection = RoleListDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRoleProto::kCidFieldNumber;
const int LoginRoleProto::kNameFieldNumber;
const int LoginRoleProto::kProfFieldNumber;
const int LoginRoleProto::kLevelFieldNumber;
const int LoginRoleProto::kFightFieldNumber;
const int LoginRoleProto::kCreatetimeFieldNumber;
const int LoginRoleProto::kFacadeFieldNumber;
#endif  // !_MSC_VER

LoginRoleProto::LoginRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

LoginRoleProto::LoginRoleProto(const LoginRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRoleProto::~LoginRoleProto() {
  SharedDtor();
}

void LoginRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void LoginRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRoleProto_descriptor_;
}

const LoginRoleProto& LoginRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

LoginRoleProto* LoginRoleProto::default_instance_ = NULL;

LoginRoleProto* LoginRoleProto::New() const {
  return new LoginRoleProto;
}

void LoginRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // required uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 7;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRoleProto::MergeFrom(const LoginRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRoleProto::CopyFrom(const LoginRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRoleProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void LoginRoleProto::Swap(LoginRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRoleProto_descriptor_;
  metadata.reflection = LoginRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSyncProto::kFactionIdFieldNumber;
const int LoginSyncProto::kFactionNameFieldNumber;
const int LoginSyncProto::kDutyFieldNumber;
const int LoginSyncProto::kFactionLeaderFieldNumber;
const int LoginSyncProto::kFactionLevelFieldNumber;
const int LoginSyncProto::kTeamIdFieldNumber;
const int LoginSyncProto::kLeaderFieldNumber;
const int LoginSyncProto::kMemCountFieldNumber;
const int LoginSyncProto::kClonessLevFieldNumber;
#endif  // !_MSC_VER

LoginSyncProto::LoginSyncProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSyncProto::InitAsDefaultInstance() {
}

LoginSyncProto::LoginSyncProto(const LoginSyncProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSyncProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  faction_leader_ = GOOGLE_ULONGLONG(0);
  faction_level_ = 0;
  team_id_ = 0u;
  leader_ = GOOGLE_ULONGLONG(0);
  mem_count_ = 0;
  cloness_lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSyncProto::~LoginSyncProto() {
  SharedDtor();
}

void LoginSyncProto::SharedDtor() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (this != default_instance_) {
  }
}

void LoginSyncProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSyncProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSyncProto_descriptor_;
}

const LoginSyncProto& LoginSyncProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

LoginSyncProto* LoginSyncProto::default_instance_ = NULL;

LoginSyncProto* LoginSyncProto::New() const {
  return new LoginSyncProto;
}

void LoginSyncProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
    duty_ = 0;
    faction_leader_ = GOOGLE_ULONGLONG(0);
    faction_level_ = 0;
    team_id_ = 0u;
    leader_ = GOOGLE_ULONGLONG(0);
    mem_count_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cloness_lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSyncProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_faction_name;
        break;
      }

      // optional string faction_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_faction_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->faction_name().data(), this->faction_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duty;
        break;
      }

      // optional int32 duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_faction_leader;
        break;
      }

      // optional uint64 faction_leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &faction_leader_)));
          set_has_faction_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_faction_level;
        break;
      }

      // optional int32 faction_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faction_level_)));
          set_has_faction_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cloness_lev;
        break;
      }

      // optional int32 cloness_lev = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloness_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloness_lev_)));
          set_has_cloness_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSyncProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional string faction_name = 2;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faction_name().data(), this->faction_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->faction_name(), output);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duty(), output);
  }

  // optional uint64 faction_leader = 4;
  if (has_faction_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->faction_leader(), output);
  }

  // optional int32 faction_level = 5;
  if (has_faction_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->faction_level(), output);
  }

  // optional uint32 team_id = 6;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id(), output);
  }

  // optional uint64 leader = 7;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->leader(), output);
  }

  // optional int32 mem_count = 8;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mem_count(), output);
  }

  // optional int32 cloness_lev = 9;
  if (has_cloness_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cloness_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSyncProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional string faction_name = 2;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->faction_name().data(), this->faction_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->faction_name(), target);
  }

  // optional int32 duty = 3;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->duty(), target);
  }

  // optional uint64 faction_leader = 4;
  if (has_faction_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->faction_leader(), target);
  }

  // optional int32 faction_level = 5;
  if (has_faction_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->faction_level(), target);
  }

  // optional uint32 team_id = 6;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id(), target);
  }

  // optional uint64 leader = 7;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->leader(), target);
  }

  // optional int32 mem_count = 8;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mem_count(), target);
  }

  // optional int32 cloness_lev = 9;
  if (has_cloness_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cloness_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSyncProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional string faction_name = 2;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->faction_name());
    }

    // optional int32 duty = 3;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 faction_leader = 4;
    if (has_faction_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->faction_leader());
    }

    // optional int32 faction_level = 5;
    if (has_faction_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faction_level());
    }

    // optional uint32 team_id = 6;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 leader = 7;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // optional int32 mem_count = 8;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cloness_lev = 9;
    if (has_cloness_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloness_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSyncProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSyncProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSyncProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSyncProto::MergeFrom(const LoginSyncProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_faction_leader()) {
      set_faction_leader(from.faction_leader());
    }
    if (from.has_faction_level()) {
      set_faction_level(from.faction_level());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cloness_lev()) {
      set_cloness_lev(from.cloness_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSyncProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSyncProto::CopyFrom(const LoginSyncProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSyncProto::IsInitialized() const {

  return true;
}

void LoginSyncProto::Swap(LoginSyncProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(duty_, other->duty_);
    std::swap(faction_leader_, other->faction_leader_);
    std::swap(faction_level_, other->faction_level_);
    std::swap(team_id_, other->team_id_);
    std::swap(leader_, other->leader_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(cloness_lev_, other->cloness_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSyncProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSyncProto_descriptor_;
  metadata.reflection = LoginSyncProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRoleProto::kCidFieldNumber;
const int CenterRoleProto::kUidFieldNumber;
const int CenterRoleProto::kNameFieldNumber;
const int CenterRoleProto::kLevelFieldNumber;
const int CenterRoleProto::kFightFieldNumber;
const int CenterRoleProto::kLastlogoutFieldNumber;
const int CenterRoleProto::kFacadeFieldNumber;
const int CenterRoleProto::kVipLevelFieldNumber;
const int CenterRoleProto::kHpFieldNumber;
const int CenterRoleProto::kMaxHpFieldNumber;
#endif  // !_MSC_VER

CenterRoleProto::CenterRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

CenterRoleProto::CenterRoleProto(const CenterRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  lastlogout_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  vip_level_ = 0u;
  hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRoleProto::~CenterRoleProto() {
  SharedDtor();
}

void CenterRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void CenterRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRoleProto_descriptor_;
}

const CenterRoleProto& CenterRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CenterRoleProto* CenterRoleProto::default_instance_ = NULL;

CenterRoleProto* CenterRoleProto::New() const {
  return new CenterRoleProto;
}

void CenterRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    lastlogout_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    vip_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastlogout;
        break;
      }

      // optional uint64 lastlogout = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogout_)));
          set_has_lastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hp;
        break;
      }

      // optional int64 hp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 lastlogout = 6;
  if (has_lastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->lastlogout(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facade(), output);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vip_level(), output);
  }

  // optional int64 hp = 9;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->hp(), output);
  }

  // optional int64 max_hp = 10;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->max_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 lastlogout = 6;
  if (has_lastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->lastlogout(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facade(), target);
  }

  // optional uint32 vip_level = 8;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vip_level(), target);
  }

  // optional int64 hp = 9;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->hp(), target);
  }

  // optional int64 max_hp = 10;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->max_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 lastlogout = 6;
    if (has_lastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogout());
    }

    // optional .proto_ff.RoleFacadeProto facade = 7;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint32 vip_level = 8;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 hp = 9;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 max_hp = 10;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRoleProto::MergeFrom(const CenterRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_lastlogout()) {
      set_lastlogout(from.lastlogout());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRoleProto::CopyFrom(const CenterRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRoleProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void CenterRoleProto::Swap(CenterRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(lastlogout_, other->lastlogout_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRoleProto_descriptor_;
  metadata.reflection = CenterRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRoleProto::kCidFieldNumber;
const int SocialRoleProto::kUidFieldNumber;
const int SocialRoleProto::kNameFieldNumber;
const int SocialRoleProto::kProfFieldNumber;
const int SocialRoleProto::kLevelFieldNumber;
const int SocialRoleProto::kFightFieldNumber;
const int SocialRoleProto::kLastlogoutFieldNumber;
const int SocialRoleProto::kFacadeFieldNumber;
const int SocialRoleProto::kVipLevelFieldNumber;
const int SocialRoleProto::kZidFieldNumber;
const int SocialRoleProto::kIsonlineFieldNumber;
const int SocialRoleProto::kHpFieldNumber;
const int SocialRoleProto::kMaxHpFieldNumber;
const int SocialRoleProto::kSceneidFieldNumber;
const int SocialRoleProto::kMapidFieldNumber;
#endif  // !_MSC_VER

SocialRoleProto::SocialRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

SocialRoleProto::SocialRoleProto(const SocialRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  lastlogout_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  vip_level_ = 0u;
  zid_ = 0u;
  isonline_ = false;
  hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRoleProto::~SocialRoleProto() {
  SharedDtor();
}

void SocialRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void SocialRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRoleProto_descriptor_;
}

const SocialRoleProto& SocialRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SocialRoleProto* SocialRoleProto::default_instance_ = NULL;

SocialRoleProto* SocialRoleProto::New() const {
  return new SocialRoleProto;
}

void SocialRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    lastlogout_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_level_ = 0u;
    zid_ = 0u;
    isonline_ = false;
    hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogout;
        break;
      }

      // optional uint64 lastlogout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogout_)));
          set_has_lastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional int64 hp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fight(), output);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastlogout(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->facade(), output);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vip_level(), output);
  }

  // optional uint32 zid = 10;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zid(), output);
  }

  // optional bool isonline = 11;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isonline(), output);
  }

  // optional int64 hp = 12;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->hp(), output);
  }

  // optional int64 max_hp = 13;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->max_hp(), output);
  }

  // optional uint64 sceneid = 14;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->sceneid(), output);
  }

  // optional uint64 mapid = 15;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fight(), target);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastlogout(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->facade(), target);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vip_level(), target);
  }

  // optional uint32 zid = 10;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zid(), target);
  }

  // optional bool isonline = 11;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isonline(), target);
  }

  // optional int64 hp = 12;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->hp(), target);
  }

  // optional int64 max_hp = 13;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->max_hp(), target);
  }

  // optional uint64 sceneid = 14;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->sceneid(), target);
  }

  // optional uint64 mapid = 15;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 lastlogout = 7;
    if (has_lastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogout());
    }

    // optional .proto_ff.RoleFacadeProto facade = 8;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vip_level = 9;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 zid = 10;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional bool isonline = 11;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional int64 hp = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 max_hp = 13;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

    // optional uint64 sceneid = 14;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 15;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRoleProto::MergeFrom(const SocialRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_lastlogout()) {
      set_lastlogout(from.lastlogout());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRoleProto::CopyFrom(const SocialRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRoleProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void SocialRoleProto::Swap(SocialRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(lastlogout_, other->lastlogout_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(zid_, other->zid_);
    std::swap(isonline_, other->isonline_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRoleProto_descriptor_;
  metadata.reflection = SocialRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr::kIdFieldNumber;
const int Attr::kValueFieldNumber;
#endif  // !_MSC_VER

Attr::Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr::InitAsDefaultInstance() {
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr::~Attr() {
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New() const {
  return new Attr;
}

void Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Attr::Swap(Attr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlueStarAttr::kIdFieldNumber;
const int BlueStarAttr::kValueFieldNumber;
const int BlueStarAttr::kLvPartFieldNumber;
#endif  // !_MSC_VER

BlueStarAttr::BlueStarAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlueStarAttr::InitAsDefaultInstance() {
}

BlueStarAttr::BlueStarAttr(const BlueStarAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlueStarAttr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  lv_part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueStarAttr::~BlueStarAttr() {
  SharedDtor();
}

void BlueStarAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlueStarAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueStarAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueStarAttr_descriptor_;
}

const BlueStarAttr& BlueStarAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BlueStarAttr* BlueStarAttr::default_instance_ = NULL;

BlueStarAttr* BlueStarAttr::New() const {
  return new BlueStarAttr;
}

void BlueStarAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
    lv_part_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlueStarAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv_part;
        break;
      }

      // optional int32 lv_part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_part_)));
          set_has_lv_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueStarAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int32 lv_part = 3;
  if (has_lv_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv_part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlueStarAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int32 lv_part = 3;
  if (has_lv_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv_part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlueStarAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int32 lv_part = 3;
    if (has_lv_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv_part());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueStarAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlueStarAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlueStarAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlueStarAttr::MergeFrom(const BlueStarAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_lv_part()) {
      set_lv_part(from.lv_part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlueStarAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueStarAttr::CopyFrom(const BlueStarAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueStarAttr::IsInitialized() const {

  return true;
}

void BlueStarAttr::Swap(BlueStarAttr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(lv_part_, other->lv_part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlueStarAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueStarAttr_descriptor_;
  metadata.reflection = BlueStarAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetInfo::kInstIdFieldNumber;
const int PetInfo::kCfgidFieldNumber;
const int PetInfo::kLvFieldNumber;
const int PetInfo::kSteplvFieldNumber;
const int PetInfo::kStarlvFieldNumber;
const int PetInfo::kActiveSkillLvFieldNumber;
const int PetInfo::kExclusiveSkillLvVecFieldNumber;
const int PetInfo::kPassiveSkillLvVecFieldNumber;
const int PetInfo::kInitgrowFieldNumber;
const int PetInfo::kSlotFieldNumber;
const int PetInfo::kLvexpFieldNumber;
#endif  // !_MSC_VER

PetInfo::PetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetInfo::InitAsDefaultInstance() {
}

PetInfo::PetInfo(const PetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetInfo::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  cfgid_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  steplv_ = 0;
  starlv_ = 0;
  activeskilllv_ = 0;
  initgrow_ = 0;
  slot_ = 0;
  lvexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetInfo::~PetInfo() {
  SharedDtor();
}

void PetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetInfo_descriptor_;
}

const PetInfo& PetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

PetInfo* PetInfo::default_instance_ = NULL;

PetInfo* PetInfo::New() const {
  return new PetInfo;
}

void PetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
    cfgid_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    steplv_ = 0;
    starlv_ = 0;
    activeskilllv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    initgrow_ = 0;
    slot_ = 0;
    lvexp_ = 0;
  }
  exclusiveskilllvvec_.Clear();
  passiveskilllvvec_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional int64 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_steplv;
        break;
      }

      // optional int32 steplv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_steplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steplv_)));
          set_has_steplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_starlv;
        break;
      }

      // optional int32 starlv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_activeSkillLv;
        break;
      }

      // optional int32 activeSkillLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeSkillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeskilllv_)));
          set_has_activeskilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exclusiveSkillLvVec;
        break;
      }

      // repeated int32 exclusiveSkillLvVec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exclusiveSkillLvVec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_exclusiveskilllvvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exclusiveskilllvvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exclusiveSkillLvVec;
        if (input->ExpectTag(64)) goto parse_passiveSkillLvVec;
        break;
      }

      // repeated int32 passiveSkillLvVec = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passiveSkillLvVec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_passiveskilllvvec())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_passiveskilllvvec())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_passiveSkillLvVec;
        if (input->ExpectTag(77)) goto parse_initgrow;
        break;
      }

      // optional float initgrow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_initgrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initgrow_)));
          set_has_initgrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_slot;
        break;
      }

      // optional int32 slot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lvexp;
        break;
      }

      // optional int32 lvexp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvexp_)));
          set_has_lvexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // optional int64 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cfgid(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 steplv = 4;
  if (has_steplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->steplv(), output);
  }

  // optional int32 starlv = 5;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starlv(), output);
  }

  // optional int32 activeSkillLv = 6;
  if (has_activeskilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->activeskilllv(), output);
  }

  // repeated int32 exclusiveSkillLvVec = 7;
  for (int i = 0; i < this->exclusiveskilllvvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->exclusiveskilllvvec(i), output);
  }

  // repeated int32 passiveSkillLvVec = 8;
  for (int i = 0; i < this->passiveskilllvvec_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->passiveskilllvvec(i), output);
  }

  // optional float initgrow = 9;
  if (has_initgrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->initgrow(), output);
  }

  // optional int32 slot = 10;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->slot(), output);
  }

  // optional int32 lvexp = 11;
  if (has_lvexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lvexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // optional int64 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cfgid(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 steplv = 4;
  if (has_steplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->steplv(), target);
  }

  // optional int32 starlv = 5;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starlv(), target);
  }

  // optional int32 activeSkillLv = 6;
  if (has_activeskilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->activeskilllv(), target);
  }

  // repeated int32 exclusiveSkillLvVec = 7;
  for (int i = 0; i < this->exclusiveskilllvvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->exclusiveskilllvvec(i), target);
  }

  // repeated int32 passiveSkillLvVec = 8;
  for (int i = 0; i < this->passiveskilllvvec_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->passiveskilllvvec(i), target);
  }

  // optional float initgrow = 9;
  if (has_initgrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->initgrow(), target);
  }

  // optional int32 slot = 10;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->slot(), target);
  }

  // optional int32 lvexp = 11;
  if (has_lvexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lvexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int64 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cfgid());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 steplv = 4;
    if (has_steplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steplv());
    }

    // optional int32 starlv = 5;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

    // optional int32 activeSkillLv = 6;
    if (has_activeskilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeskilllv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float initgrow = 9;
    if (has_initgrow()) {
      total_size += 1 + 4;
    }

    // optional int32 slot = 10;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 lvexp = 11;
    if (has_lvexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvexp());
    }

  }
  // repeated int32 exclusiveSkillLvVec = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->exclusiveskilllvvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exclusiveskilllvvec(i));
    }
    total_size += 1 * this->exclusiveskilllvvec_size() + data_size;
  }

  // repeated int32 passiveSkillLvVec = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->passiveskilllvvec_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->passiveskilllvvec(i));
    }
    total_size += 1 * this->passiveskilllvvec_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetInfo::MergeFrom(const PetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  exclusiveskilllvvec_.MergeFrom(from.exclusiveskilllvvec_);
  passiveskilllvvec_.MergeFrom(from.passiveskilllvvec_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_steplv()) {
      set_steplv(from.steplv());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_activeskilllv()) {
      set_activeskilllv(from.activeskilllv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_initgrow()) {
      set_initgrow(from.initgrow());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_lvexp()) {
      set_lvexp(from.lvexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetInfo::CopyFrom(const PetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetInfo::IsInitialized() const {

  return true;
}

void PetInfo::Swap(PetInfo* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(lv_, other->lv_);
    std::swap(steplv_, other->steplv_);
    std::swap(starlv_, other->starlv_);
    std::swap(activeskilllv_, other->activeskilllv_);
    exclusiveskilllvvec_.Swap(&other->exclusiveskilllvvec_);
    passiveskilllvvec_.Swap(&other->passiveskilllvvec_);
    std::swap(initgrow_, other->initgrow_);
    std::swap(slot_, other->slot_);
    std::swap(lvexp_, other->lvexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetInfo_descriptor_;
  metadata.reflection = PetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetHatchInfo::kSlotFieldNumber;
const int PetHatchInfo::kUnlockFieldNumber;
const int PetHatchInfo::kEggidFieldNumber;
const int PetHatchInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PetHatchInfo::PetHatchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetHatchInfo::InitAsDefaultInstance() {
}

PetHatchInfo::PetHatchInfo(const PetHatchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetHatchInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  unlock_ = 0;
  eggid_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetHatchInfo::~PetHatchInfo() {
  SharedDtor();
}

void PetHatchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetHatchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetHatchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetHatchInfo_descriptor_;
}

const PetHatchInfo& PetHatchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

PetHatchInfo* PetHatchInfo::default_instance_ = NULL;

PetHatchInfo* PetHatchInfo::New() const {
  return new PetHatchInfo;
}

void PetHatchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
    unlock_ = 0;
    eggid_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetHatchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unlock;
        break;
      }

      // optional int32 unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eggid;
        break;
      }

      // optional int64 eggid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eggid_)));
          set_has_eggid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetHatchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional int32 unlock = 2;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unlock(), output);
  }

  // optional int64 eggid = 3;
  if (has_eggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->eggid(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetHatchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional int32 unlock = 2;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unlock(), target);
  }

  // optional int64 eggid = 3;
  if (has_eggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->eggid(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetHatchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 unlock = 2;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock());
    }

    // optional int64 eggid = 3;
    if (has_eggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eggid());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetHatchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetHatchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetHatchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetHatchInfo::MergeFrom(const PetHatchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_eggid()) {
      set_eggid(from.eggid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetHatchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetHatchInfo::CopyFrom(const PetHatchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetHatchInfo::IsInitialized() const {

  return true;
}

void PetHatchInfo::Swap(PetHatchInfo* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(unlock_, other->unlock_);
    std::swap(eggid_, other->eggid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetHatchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetHatchInfo_descriptor_;
  metadata.reflection = PetHatchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemProtoInfo::kIndexFieldNumber;
const int ItemProtoInfo::kItemIdFieldNumber;
const int ItemProtoInfo::kItemNumFieldNumber;
const int ItemProtoInfo::kBindFieldNumber;
const int ItemProtoInfo::kLevelFieldNumber;
const int ItemProtoInfo::kBaseFieldNumber;
const int ItemProtoInfo::kRefineFieldNumber;
const int ItemProtoInfo::kBlueFieldNumber;
const int ItemProtoInfo::kGodFieldNumber;
const int ItemProtoInfo::kSpecialFieldNumber;
const int ItemProtoInfo::kExpireTimeFieldNumber;
const int ItemProtoInfo::kStrongLvFieldNumber;
const int ItemProtoInfo::kStrongWearQualityFieldNumber;
#endif  // !_MSC_VER

ItemProtoInfo::ItemProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemProtoInfo::InitAsDefaultInstance() {
}

ItemProtoInfo::ItemProtoInfo(const ItemProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  level_ = 0;
  expiretime_ = GOOGLE_ULONGLONG(0);
  strong_lv_ = 0;
  strong_wear_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemProtoInfo::~ItemProtoInfo() {
  SharedDtor();
}

void ItemProtoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemProtoInfo_descriptor_;
}

const ItemProtoInfo& ItemProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ItemProtoInfo* ItemProtoInfo::default_instance_ = NULL;

ItemProtoInfo* ItemProtoInfo::New() const {
  return new ItemProtoInfo;
}

void ItemProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
    level_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    expiretime_ = GOOGLE_ULONGLONG(0);
    strong_lv_ = 0;
    strong_wear_quality_ = 0;
  }
  base_.Clear();
  refine_.Clear();
  blue_.Clear();
  god_.Clear();
  special_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int64 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional int32 bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_base;
        break;
      }

      // repeated .proto_ff.Attr base = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_base;
        if (input->ExpectTag(58)) goto parse_refine;
        break;
      }

      // repeated .proto_ff.Attr refine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine;
        if (input->ExpectTag(66)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.BlueStarAttr blue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_blue;
        if (input->ExpectTag(74)) goto parse_god;
        break;
      }

      // repeated .proto_ff.Attr god = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_god:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_god()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_god;
        if (input->ExpectTag(82)) goto parse_special;
        break;
      }

      // repeated .proto_ff.Attr special = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_special()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_special;
        if (input->ExpectTag(88)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_strong_lv;
        break;
      }

      // optional int32 strong_lv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_lv_)));
          set_has_strong_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_strong_wear_quality;
        break;
      }

      // optional int32 strong_wear_quality = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strong_wear_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strong_wear_quality_)));
          set_has_strong_wear_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional int64 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_num(), output);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated .proto_ff.Attr base = 6;
  for (int i = 0; i < this->base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->base(i), output);
  }

  // repeated .proto_ff.Attr refine = 7;
  for (int i = 0; i < this->refine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refine(i), output);
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->blue(i), output);
  }

  // repeated .proto_ff.Attr god = 9;
  for (int i = 0; i < this->god_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->god(i), output);
  }

  // repeated .proto_ff.Attr special = 10;
  for (int i = 0; i < this->special_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->special(i), output);
  }

  // optional uint64 expireTime = 11;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->expiretime(), output);
  }

  // optional int32 strong_lv = 12;
  if (has_strong_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->strong_lv(), output);
  }

  // optional int32 strong_wear_quality = 13;
  if (has_strong_wear_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->strong_wear_quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional int64 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_num(), target);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated .proto_ff.Attr base = 6;
  for (int i = 0; i < this->base_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->base(i), target);
  }

  // repeated .proto_ff.Attr refine = 7;
  for (int i = 0; i < this->refine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refine(i), target);
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->blue(i), target);
  }

  // repeated .proto_ff.Attr god = 9;
  for (int i = 0; i < this->god_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->god(i), target);
  }

  // repeated .proto_ff.Attr special = 10;
  for (int i = 0; i < this->special_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->special(i), target);
  }

  // optional uint64 expireTime = 11;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->expiretime(), target);
  }

  // optional int32 strong_lv = 12;
  if (has_strong_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->strong_lv(), target);
  }

  // optional int32 strong_wear_quality = 13;
  if (has_strong_wear_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->strong_wear_quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional int64 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_num());
    }

    // optional int32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint64 expireTime = 11;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

    // optional int32 strong_lv = 12;
    if (has_strong_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong_lv());
    }

    // optional int32 strong_wear_quality = 13;
    if (has_strong_wear_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strong_wear_quality());
    }

  }
  // repeated .proto_ff.Attr base = 6;
  total_size += 1 * this->base_size();
  for (int i = 0; i < this->base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base(i));
  }

  // repeated .proto_ff.Attr refine = 7;
  total_size += 1 * this->refine_size();
  for (int i = 0; i < this->refine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine(i));
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  // repeated .proto_ff.Attr god = 9;
  total_size += 1 * this->god_size();
  for (int i = 0; i < this->god_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->god(i));
  }

  // repeated .proto_ff.Attr special = 10;
  total_size += 1 * this->special_size();
  for (int i = 0; i < this->special_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemProtoInfo::MergeFrom(const ItemProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_.MergeFrom(from.base_);
  refine_.MergeFrom(from.refine_);
  blue_.MergeFrom(from.blue_);
  god_.MergeFrom(from.god_);
  special_.MergeFrom(from.special_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_strong_lv()) {
      set_strong_lv(from.strong_lv());
    }
    if (from.has_strong_wear_quality()) {
      set_strong_wear_quality(from.strong_wear_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemProtoInfo::CopyFrom(const ItemProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemProtoInfo::IsInitialized() const {

  for (int i = 0; i < base_size(); i++) {
    if (!this->base(i).IsInitialized()) return false;
  }
  for (int i = 0; i < refine_size(); i++) {
    if (!this->refine(i).IsInitialized()) return false;
  }
  for (int i = 0; i < god_size(); i++) {
    if (!this->god(i).IsInitialized()) return false;
  }
  for (int i = 0; i < special_size(); i++) {
    if (!this->special(i).IsInitialized()) return false;
  }
  return true;
}

void ItemProtoInfo::Swap(ItemProtoInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    std::swap(level_, other->level_);
    base_.Swap(&other->base_);
    refine_.Swap(&other->refine_);
    blue_.Swap(&other->blue_);
    god_.Swap(&other->god_);
    special_.Swap(&other->special_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(strong_lv_, other->strong_lv_);
    std::swap(strong_wear_quality_, other->strong_wear_quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemProtoInfo_descriptor_;
  metadata.reflection = ItemProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneSlotInfo::kStonePosFieldNumber;
const int StoneSlotInfo::kStoneidFieldNumber;
#endif  // !_MSC_VER

StoneSlotInfo::StoneSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneSlotInfo::InitAsDefaultInstance() {
}

StoneSlotInfo::StoneSlotInfo(const StoneSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  stone_pos_ = 0;
  stoneid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneSlotInfo::~StoneSlotInfo() {
  SharedDtor();
}

void StoneSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneSlotInfo_descriptor_;
}

const StoneSlotInfo& StoneSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

StoneSlotInfo* StoneSlotInfo::default_instance_ = NULL;

StoneSlotInfo* StoneSlotInfo::New() const {
  return new StoneSlotInfo;
}

void StoneSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stone_pos_ = 0;
    stoneid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stone_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pos_)));
          set_has_stone_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stoneid;
        break;
      }

      // optional int64 stoneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &stoneid_)));
          set_has_stoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stone_pos = 1;
  if (has_stone_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stone_pos(), output);
  }

  // optional int64 stoneid = 2;
  if (has_stoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->stoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stone_pos = 1;
  if (has_stone_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stone_pos(), target);
  }

  // optional int64 stoneid = 2;
  if (has_stoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->stoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stone_pos = 1;
    if (has_stone_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pos());
    }

    // optional int64 stoneid = 2;
    if (has_stoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->stoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneSlotInfo::MergeFrom(const StoneSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stone_pos()) {
      set_stone_pos(from.stone_pos());
    }
    if (from.has_stoneid()) {
      set_stoneid(from.stoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneSlotInfo::CopyFrom(const StoneSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneSlotInfo::IsInitialized() const {

  return true;
}

void StoneSlotInfo::Swap(StoneSlotInfo* other) {
  if (other != this) {
    std::swap(stone_pos_, other->stone_pos_);
    std::swap(stoneid_, other->stoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneSlotInfo_descriptor_;
  metadata.reflection = StoneSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WashSlotInfo::kSlotFieldNumber;
const int WashSlotInfo::kQualityFieldNumber;
const int WashSlotInfo::kLockFieldNumber;
const int WashSlotInfo::kIdFieldNumber;
const int WashSlotInfo::kValueFieldNumber;
#endif  // !_MSC_VER

WashSlotInfo::WashSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WashSlotInfo::InitAsDefaultInstance() {
}

WashSlotInfo::WashSlotInfo(const WashSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WashSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  quality_ = 0;
  lock_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WashSlotInfo::~WashSlotInfo() {
  SharedDtor();
}

void WashSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WashSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WashSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WashSlotInfo_descriptor_;
}

const WashSlotInfo& WashSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

WashSlotInfo* WashSlotInfo::default_instance_ = NULL;

WashSlotInfo* WashSlotInfo::New() const {
  return new WashSlotInfo;
}

void WashSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
    quality_ = 0;
    lock_ = 0;
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WashSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lock;
        break;
      }

      // optional int32 lock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lock_)));
          set_has_lock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WashSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 lock = 3;
  if (has_lock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lock(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WashSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 lock = 3;
  if (has_lock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lock(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional int32 value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WashSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 lock = 3;
    if (has_lock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lock());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WashSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WashSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WashSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WashSlotInfo::MergeFrom(const WashSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_lock()) {
      set_lock(from.lock());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WashSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WashSlotInfo::CopyFrom(const WashSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WashSlotInfo::IsInitialized() const {

  return true;
}

void WashSlotInfo::Swap(WashSlotInfo* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(quality_, other->quality_);
    std::swap(lock_, other->lock_);
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WashSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WashSlotInfo_descriptor_;
  metadata.reflection = WashSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSlotInfo::kSlotPosFieldNumber;
const int EquipSlotInfo::kTotalScoreFieldNumber;
const int EquipSlotInfo::kStronglvFieldNumber;
const int EquipSlotInfo::kStonesFieldNumber;
const int EquipSlotInfo::kStonePaySlotOpenFieldNumber;
const int EquipSlotInfo::kWashsFieldNumber;
const int EquipSlotInfo::kSuitlvFieldNumber;
#endif  // !_MSC_VER

EquipSlotInfo::EquipSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSlotInfo::InitAsDefaultInstance() {
}

EquipSlotInfo::EquipSlotInfo(const EquipSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  total_score_ = GOOGLE_LONGLONG(0);
  stronglv_ = 0;
  stone_pay_slot_open_ = 0;
  suitlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlotInfo::~EquipSlotInfo() {
  SharedDtor();
}

void EquipSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlotInfo_descriptor_;
}

const EquipSlotInfo& EquipSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EquipSlotInfo* EquipSlotInfo::default_instance_ = NULL;

EquipSlotInfo* EquipSlotInfo::New() const {
  return new EquipSlotInfo;
}

void EquipSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    total_score_ = GOOGLE_LONGLONG(0);
    stronglv_ = 0;
    stone_pay_slot_open_ = 0;
    suitlv_ = 0;
  }
  stones_.Clear();
  washs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_score;
        break;
      }

      // optional int64 total_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stronglv;
        break;
      }

      // optional int32 stronglv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stronglv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stronglv_)));
          set_has_stronglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stones;
        break;
      }

      // repeated .proto_ff.StoneSlotInfo stones = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stones;
        if (input->ExpectTag(40)) goto parse_stone_pay_slot_open;
        break;
      }

      // optional int32 stone_pay_slot_open = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stone_pay_slot_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stone_pay_slot_open_)));
          set_has_stone_pay_slot_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_washs;
        break;
      }

      // repeated .proto_ff.WashSlotInfo washs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_washs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_washs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_washs;
        if (input->ExpectTag(56)) goto parse_suitlv;
        break;
      }

      // optional int32 suitlv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitlv_)));
          set_has_suitlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int64 total_score = 2;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_score(), output);
  }

  // optional int32 stronglv = 3;
  if (has_stronglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stronglv(), output);
  }

  // repeated .proto_ff.StoneSlotInfo stones = 4;
  for (int i = 0; i < this->stones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stones(i), output);
  }

  // optional int32 stone_pay_slot_open = 5;
  if (has_stone_pay_slot_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stone_pay_slot_open(), output);
  }

  // repeated .proto_ff.WashSlotInfo washs = 6;
  for (int i = 0; i < this->washs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->washs(i), output);
  }

  // optional int32 suitlv = 7;
  if (has_suitlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->suitlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int64 total_score = 2;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_score(), target);
  }

  // optional int32 stronglv = 3;
  if (has_stronglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stronglv(), target);
  }

  // repeated .proto_ff.StoneSlotInfo stones = 4;
  for (int i = 0; i < this->stones_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stones(i), target);
  }

  // optional int32 stone_pay_slot_open = 5;
  if (has_stone_pay_slot_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stone_pay_slot_open(), target);
  }

  // repeated .proto_ff.WashSlotInfo washs = 6;
  for (int i = 0; i < this->washs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->washs(i), target);
  }

  // optional int32 suitlv = 7;
  if (has_suitlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->suitlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int64 total_score = 2;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_score());
    }

    // optional int32 stronglv = 3;
    if (has_stronglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stronglv());
    }

    // optional int32 stone_pay_slot_open = 5;
    if (has_stone_pay_slot_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stone_pay_slot_open());
    }

    // optional int32 suitlv = 7;
    if (has_suitlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitlv());
    }

  }
  // repeated .proto_ff.StoneSlotInfo stones = 4;
  total_size += 1 * this->stones_size();
  for (int i = 0; i < this->stones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stones(i));
  }

  // repeated .proto_ff.WashSlotInfo washs = 6;
  total_size += 1 * this->washs_size();
  for (int i = 0; i < this->washs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->washs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlotInfo::MergeFrom(const EquipSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stones_.MergeFrom(from.stones_);
  washs_.MergeFrom(from.washs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_stronglv()) {
      set_stronglv(from.stronglv());
    }
    if (from.has_stone_pay_slot_open()) {
      set_stone_pay_slot_open(from.stone_pay_slot_open());
    }
    if (from.has_suitlv()) {
      set_suitlv(from.suitlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlotInfo::CopyFrom(const EquipSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlotInfo::IsInitialized() const {

  return true;
}

void EquipSlotInfo::Swap(EquipSlotInfo* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(total_score_, other->total_score_);
    std::swap(stronglv_, other->stronglv_);
    stones_.Swap(&other->stones_);
    std::swap(stone_pay_slot_open_, other->stone_pay_slot_open_);
    washs_.Swap(&other->washs_);
    std::swap(suitlv_, other->suitlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlotInfo_descriptor_;
  metadata.reflection = EquipSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kPosFieldNumber;
const int EquipInfo::kEquipFieldNumber;
const int EquipInfo::kSlotFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
  slot_ = const_cast< ::proto_ff::EquipSlotInfo*>(&::proto_ff::EquipSlotInfo::default_instance());
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  equip_ = NULL;
  slot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
    delete slot_;
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto_ff::ItemProtoInfo::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::proto_ff::EquipSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto_ff.ItemProtoInfo equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slot;
        break;
      }

      // optional .proto_ff.EquipSlotInfo slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional .proto_ff.ItemProtoInfo equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  // optional .proto_ff.EquipSlotInfo slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional .proto_ff.ItemProtoInfo equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  // optional .proto_ff.EquipSlotInfo slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .proto_ff.ItemProtoInfo equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .proto_ff.EquipSlotInfo slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto_ff::ItemProtoInfo::MergeFrom(from.equip());
    }
    if (from.has_slot()) {
      mutable_slot()->::proto_ff::EquipSlotInfo::MergeFrom(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {

  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(equip_, other->equip_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipLvAttrInfo::kTypeFieldNumber;
const int EquipLvAttrInfo::kIdFieldNumber;
#endif  // !_MSC_VER

EquipLvAttrInfo::EquipLvAttrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipLvAttrInfo::InitAsDefaultInstance() {
}

EquipLvAttrInfo::EquipLvAttrInfo(const EquipLvAttrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipLvAttrInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipLvAttrInfo::~EquipLvAttrInfo() {
  SharedDtor();
}

void EquipLvAttrInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipLvAttrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipLvAttrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipLvAttrInfo_descriptor_;
}

const EquipLvAttrInfo& EquipLvAttrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EquipLvAttrInfo* EquipLvAttrInfo::default_instance_ = NULL;

EquipLvAttrInfo* EquipLvAttrInfo::New() const {
  return new EquipLvAttrInfo;
}

void EquipLvAttrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipLvAttrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipLvAttrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipLvAttrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipLvAttrInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipLvAttrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipLvAttrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipLvAttrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipLvAttrInfo::MergeFrom(const EquipLvAttrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipLvAttrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipLvAttrInfo::CopyFrom(const EquipLvAttrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipLvAttrInfo::IsInitialized() const {

  return true;
}

void EquipLvAttrInfo::Swap(EquipLvAttrInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipLvAttrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipLvAttrInfo_descriptor_;
  metadata.reflection = EquipLvAttrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSimpleProto::kItemidFieldNumber;
const int ItemSimpleProto::kNumFieldNumber;
const int ItemSimpleProto::kBindFieldNumber;
#endif  // !_MSC_VER

ItemSimpleProto::ItemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSimpleProto::InitAsDefaultInstance() {
}

ItemSimpleProto::ItemSimpleProto(const ItemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSimpleProto::~ItemSimpleProto() {
  SharedDtor();
}

void ItemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSimpleProto_descriptor_;
}

const ItemSimpleProto& ItemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ItemSimpleProto* ItemSimpleProto::default_instance_ = NULL;

ItemSimpleProto* ItemSimpleProto::New() const {
  return new ItemSimpleProto;
}

void ItemSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    num_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSimpleProto::MergeFrom(const ItemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSimpleProto::CopyFrom(const ItemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSimpleProto::IsInitialized() const {

  return true;
}

void ItemSimpleProto::Swap(ItemSimpleProto* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSimpleProto_descriptor_;
  metadata.reflection = ItemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultItemSimpleProto::kInfoFieldNumber;
#endif  // !_MSC_VER

MultItemSimpleProto::MultItemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultItemSimpleProto::InitAsDefaultInstance() {
}

MultItemSimpleProto::MultItemSimpleProto(const MultItemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultItemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultItemSimpleProto::~MultItemSimpleProto() {
  SharedDtor();
}

void MultItemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultItemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultItemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultItemSimpleProto_descriptor_;
}

const MultItemSimpleProto& MultItemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MultItemSimpleProto* MultItemSimpleProto::default_instance_ = NULL;

MultItemSimpleProto* MultItemSimpleProto::New() const {
  return new MultItemSimpleProto;
}

void MultItemSimpleProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultItemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemSimpleProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultItemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultItemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultItemSimpleProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemSimpleProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultItemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultItemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultItemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultItemSimpleProto::MergeFrom(const MultItemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultItemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultItemSimpleProto::CopyFrom(const MultItemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultItemSimpleProto::IsInitialized() const {

  return true;
}

void MultItemSimpleProto::Swap(MultItemSimpleProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultItemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultItemSimpleProto_descriptor_;
  metadata.reflection = MultItemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailParamProto::kCfgidFieldNumber;
const int MailParamProto::kStrParamFieldNumber;
const int MailParamProto::kIntParamFieldNumber;
#endif  // !_MSC_VER

MailParamProto::MailParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailParamProto::InitAsDefaultInstance() {
}

MailParamProto::MailParamProto(const MailParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailParamProto::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailParamProto::~MailParamProto() {
  SharedDtor();
}

void MailParamProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailParamProto_descriptor_;
}

const MailParamProto& MailParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailParamProto* MailParamProto::default_instance_ = NULL;

MailParamProto* MailParamProto::New() const {
  return new MailParamProto;
}

void MailParamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = GOOGLE_ULONGLONG(0);
  }
  str_param_.Clear();
  int_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cfgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        break;
      }

      // repeated bytes str_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }

      // repeated uint64 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_int_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_int_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cfgid = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cfgid(), output);
  }

  // repeated bytes str_param = 2;
  for (int i = 0; i < this->str_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->str_param(i), output);
  }

  // repeated uint64 int_param = 3;
  for (int i = 0; i < this->int_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->int_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cfgid = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cfgid(), target);
  }

  // repeated bytes str_param = 2;
  for (int i = 0; i < this->str_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->str_param(i), target);
  }

  // repeated uint64 int_param = 3;
  for (int i = 0; i < this->int_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->int_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cfgid = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

  }
  // repeated bytes str_param = 2;
  total_size += 1 * this->str_param_size();
  for (int i = 0; i < this->str_param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->str_param(i));
  }

  // repeated uint64 int_param = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->int_param(i));
    }
    total_size += 1 * this->int_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailParamProto::MergeFrom(const MailParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  str_param_.MergeFrom(from.str_param_);
  int_param_.MergeFrom(from.int_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailParamProto::CopyFrom(const MailParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailParamProto::IsInitialized() const {

  return true;
}

void MailParamProto::Swap(MailParamProto* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    str_param_.Swap(&other->str_param_);
    int_param_.Swap(&other->int_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailParamProto_descriptor_;
  metadata.reflection = MailParamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailStrProto::kStrFieldNumber;
const int MailStrProto::kParamFieldNumber;
#endif  // !_MSC_VER

MailStrProto::MailStrProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailStrProto::InitAsDefaultInstance() {
  param_ = const_cast< ::proto_ff::MailParamProto*>(&::proto_ff::MailParamProto::default_instance());
}

MailStrProto::MailStrProto(const MailStrProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailStrProto::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailStrProto::~MailStrProto() {
  SharedDtor();
}

void MailStrProto::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete param_;
  }
}

void MailStrProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailStrProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailStrProto_descriptor_;
}

const MailStrProto& MailStrProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailStrProto* MailStrProto::default_instance_ = NULL;

MailStrProto* MailStrProto::New() const {
  return new MailStrProto;
}

void MailStrProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    if (has_param()) {
      if (param_ != NULL) param_->::proto_ff::MailParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailStrProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // optional .proto_ff.MailParamProto param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailStrProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->str(), output);
  }

  // optional .proto_ff.MailParamProto param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailStrProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes str = 1;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->str(), target);
  }

  // optional .proto_ff.MailParamProto param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailStrProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }

    // optional .proto_ff.MailParamProto param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailStrProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailStrProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailStrProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailStrProto::MergeFrom(const MailStrProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_param()) {
      mutable_param()->::proto_ff::MailParamProto::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailStrProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailStrProto::CopyFrom(const MailStrProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailStrProto::IsInitialized() const {

  return true;
}

void MailStrProto::Swap(MailStrProto* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailStrProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailStrProto_descriptor_;
  metadata.reflection = MailStrProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAttachmentList::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MailAttachmentList::MailAttachmentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAttachmentList::InitAsDefaultInstance() {
}

MailAttachmentList::MailAttachmentList(const MailAttachmentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAttachmentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAttachmentList::~MailAttachmentList() {
  SharedDtor();
}

void MailAttachmentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAttachmentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAttachmentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttachmentList_descriptor_;
}

const MailAttachmentList& MailAttachmentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailAttachmentList* MailAttachmentList::default_instance_ = NULL;

MailAttachmentList* MailAttachmentList::New() const {
  return new MailAttachmentList;
}

void MailAttachmentList::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAttachmentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAttachmentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAttachmentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAttachmentList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAttachmentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAttachmentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAttachmentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAttachmentList::MergeFrom(const MailAttachmentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAttachmentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAttachmentList::CopyFrom(const MailAttachmentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttachmentList::IsInitialized() const {

  for (int i = 0; i < iteminfo_size(); i++) {
    if (!this->iteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void MailAttachmentList::Swap(MailAttachmentList* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAttachmentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAttachmentList_descriptor_;
  metadata.reflection = MailAttachmentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailHead::kMailIdFieldNumber;
const int MailHead::kTypeFieldNumber;
const int MailHead::kSendPlayerIdFieldNumber;
const int MailHead::kSendPlayerNameFieldNumber;
const int MailHead::kDestPlayerIdFieldNumber;
const int MailHead::kTopicFieldNumber;
const int MailHead::kCreateTimeFieldNumber;
const int MailHead::kStatusFieldNumber;
const int MailHead::kFetchFieldNumber;
const int MailHead::kHasAttachFieldNumber;
const int MailHead::kBeginTimeFieldNumber;
const int MailHead::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MailHead::MailHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailHead::InitAsDefaultInstance() {
  topic_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
}

MailHead::MailHead(const MailHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailHead::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  sendplayerid_ = GOOGLE_ULONGLONG(0);
  sendplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destplayerid_ = GOOGLE_ULONGLONG(0);
  topic_ = NULL;
  createtime_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  fetch_ = 0;
  has_attach_ = 0;
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailHead::~MailHead() {
  SharedDtor();
}

void MailHead::SharedDtor() {
  if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendplayername_;
  }
  if (this != default_instance_) {
    delete topic_;
  }
}

void MailHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailHead_descriptor_;
}

const MailHead& MailHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailHead* MailHead::default_instance_ = NULL;

MailHead* MailHead::New() const {
  return new MailHead;
}

void MailHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    sendplayerid_ = GOOGLE_ULONGLONG(0);
    if (has_sendplayername()) {
      if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
        sendplayername_->clear();
      }
    }
    destplayerid_ = GOOGLE_ULONGLONG(0);
    if (has_topic()) {
      if (topic_ != NULL) topic_->::proto_ff::MailStrProto::Clear();
    }
    createtime_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fetch_ = 0;
    has_attach_ = 0;
    begin_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendPlayerId;
        break;
      }

      // optional uint64 sendPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendplayerid_)));
          set_has_sendplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendPlayerName;
        break;
      }

      // optional bytes sendPlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendplayername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destPlayerId;
        break;
      }

      // optional uint64 destPlayerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destplayerid_)));
          set_has_destplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_topic;
        break;
      }

      // optional .proto_ff.MailStrProto topic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_has_attach;
        break;
      }

      // optional int32 has_attach = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_attach_)));
          set_has_has_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 sendPlayerId = 3;
  if (has_sendplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendplayerid(), output);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sendplayername(), output);
  }

  // optional uint64 destPlayerId = 5;
  if (has_destplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->destplayerid(), output);
  }

  // optional .proto_ff.MailStrProto topic = 6;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->topic(), output);
  }

  // optional uint64 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->createtime(), output);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional int32 fetch = 9;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fetch(), output);
  }

  // optional int32 has_attach = 10;
  if (has_has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->has_attach(), output);
  }

  // optional uint64 begin_time = 11;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->begin_time(), output);
  }

  // optional uint64 end_time = 12;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 sendPlayerId = 3;
  if (has_sendplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendplayerid(), target);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sendplayername(), target);
  }

  // optional uint64 destPlayerId = 5;
  if (has_destplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->destplayerid(), target);
  }

  // optional .proto_ff.MailStrProto topic = 6;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->topic(), target);
  }

  // optional uint64 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->createtime(), target);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional int32 fetch = 9;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fetch(), target);
  }

  // optional int32 has_attach = 10;
  if (has_has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->has_attach(), target);
  }

  // optional uint64 begin_time = 11;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->begin_time(), target);
  }

  // optional uint64 end_time = 12;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 sendPlayerId = 3;
    if (has_sendplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendplayerid());
    }

    // optional bytes sendPlayerName = 4;
    if (has_sendplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sendplayername());
    }

    // optional uint64 destPlayerId = 5;
    if (has_destplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destplayerid());
    }

    // optional .proto_ff.MailStrProto topic = 6;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic());
    }

    // optional uint64 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fetch = 9;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional int32 has_attach = 10;
    if (has_has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_attach());
    }

    // optional uint64 begin_time = 11;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 12;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailHead::MergeFrom(const MailHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendplayerid()) {
      set_sendplayerid(from.sendplayerid());
    }
    if (from.has_sendplayername()) {
      set_sendplayername(from.sendplayername());
    }
    if (from.has_destplayerid()) {
      set_destplayerid(from.destplayerid());
    }
    if (from.has_topic()) {
      mutable_topic()->::proto_ff::MailStrProto::MergeFrom(from.topic());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_has_attach()) {
      set_has_attach(from.has_attach());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailHead::CopyFrom(const MailHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailHead::IsInitialized() const {

  return true;
}

void MailHead::Swap(MailHead* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(sendplayerid_, other->sendplayerid_);
    std::swap(sendplayername_, other->sendplayername_);
    std::swap(destplayerid_, other->destplayerid_);
    std::swap(topic_, other->topic_);
    std::swap(createtime_, other->createtime_);
    std::swap(status_, other->status_);
    std::swap(fetch_, other->fetch_);
    std::swap(has_attach_, other->has_attach_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailHead_descriptor_;
  metadata.reflection = MailHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailHeadFieldNumber;
const int MailInfo::kContentFieldNumber;
const int MailInfo::kGoldFieldNumber;
const int MailInfo::kDiamondFieldNumber;
const int MailInfo::kBindDiamondFieldNumber;
const int MailInfo::kMagiccrystalFieldNumber;
const int MailInfo::kPrestigeFieldNumber;
const int MailInfo::kAttachmentListFieldNumber;
const int MailInfo::kSourceFieldNumber;
const int MailInfo::kSourceValFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
  mailhead_ = const_cast< ::proto_ff::MailHead*>(&::proto_ff::MailHead::default_instance());
  content_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
  attachmentlist_ = const_cast< ::proto_ff::MailAttachmentList*>(&::proto_ff::MailAttachmentList::default_instance());
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailhead_ = NULL;
  content_ = NULL;
  gold_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_ULONGLONG(0);
  binddiamond_ = GOOGLE_ULONGLONG(0);
  magiccrystal_ = GOOGLE_ULONGLONG(0);
  prestige_ = GOOGLE_ULONGLONG(0);
  attachmentlist_ = NULL;
  source_ = 0;
  sourceval_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mailhead_;
    delete content_;
    delete attachmentlist_;
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailhead()) {
      if (mailhead_ != NULL) mailhead_->::proto_ff::MailHead::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::proto_ff::MailStrProto::Clear();
    }
    gold_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_ULONGLONG(0);
    binddiamond_ = GOOGLE_ULONGLONG(0);
    magiccrystal_ = GOOGLE_ULONGLONG(0);
    prestige_ = GOOGLE_ULONGLONG(0);
    if (has_attachmentlist()) {
      if (attachmentlist_ != NULL) attachmentlist_->::proto_ff::MailAttachmentList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_ = 0;
    sourceval_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .proto_ff.MailStrProto content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional uint64 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindDiamond;
        break;
      }

      // optional uint64 bindDiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magiccrystal;
        break;
      }

      // optional uint64 magiccrystal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magiccrystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magiccrystal_)));
          set_has_magiccrystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prestige;
        break;
      }

      // optional uint64 prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attachmentList;
        break;
      }

      // optional .proto_ff.MailAttachmentList attachmentList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source;
        break;
      }

      // optional int32 source = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sourceVal;
        break;
      }

      // optional int64 sourceVal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceval_)));
          set_has_sourceval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MailHead mailHead = 1;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(), output);
  }

  // optional .proto_ff.MailStrProto content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional uint64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gold(), output);
  }

  // optional uint64 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->diamond(), output);
  }

  // optional uint64 bindDiamond = 5;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->binddiamond(), output);
  }

  // optional uint64 magiccrystal = 6;
  if (has_magiccrystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->magiccrystal(), output);
  }

  // optional uint64 prestige = 7;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->prestige(), output);
  }

  // optional .proto_ff.MailAttachmentList attachmentList = 8;
  if (has_attachmentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attachmentlist(), output);
  }

  // optional int32 source = 9;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->source(), output);
  }

  // optional int64 sourceVal = 10;
  if (has_sourceval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sourceval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MailHead mailHead = 1;
  if (has_mailhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(), target);
  }

  // optional .proto_ff.MailStrProto content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional uint64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gold(), target);
  }

  // optional uint64 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->diamond(), target);
  }

  // optional uint64 bindDiamond = 5;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->binddiamond(), target);
  }

  // optional uint64 magiccrystal = 6;
  if (has_magiccrystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->magiccrystal(), target);
  }

  // optional uint64 prestige = 7;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->prestige(), target);
  }

  // optional .proto_ff.MailAttachmentList attachmentList = 8;
  if (has_attachmentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attachmentlist(), target);
  }

  // optional int32 source = 9;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->source(), target);
  }

  // optional int64 sourceVal = 10;
  if (has_sourceval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sourceval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MailHead mailHead = 1;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailhead());
    }

    // optional .proto_ff.MailStrProto content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

    // optional uint64 bindDiamond = 5;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->binddiamond());
    }

    // optional uint64 magiccrystal = 6;
    if (has_magiccrystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magiccrystal());
    }

    // optional uint64 prestige = 7;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prestige());
    }

    // optional .proto_ff.MailAttachmentList attachmentList = 8;
    if (has_attachmentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachmentlist());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 source = 9;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional int64 sourceVal = 10;
    if (has_sourceval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailhead()) {
      mutable_mailhead()->::proto_ff::MailHead::MergeFrom(from.mailhead());
    }
    if (from.has_content()) {
      mutable_content()->::proto_ff::MailStrProto::MergeFrom(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_magiccrystal()) {
      set_magiccrystal(from.magiccrystal());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_attachmentlist()) {
      mutable_attachmentlist()->::proto_ff::MailAttachmentList::MergeFrom(from.attachmentlist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_sourceval()) {
      set_sourceval(from.sourceval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  if (has_attachmentlist()) {
    if (!this->attachmentlist().IsInitialized()) return false;
  }
  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailhead_, other->mailhead_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(magiccrystal_, other->magiccrystal_);
    std::swap(prestige_, other->prestige_);
    std::swap(attachmentlist_, other->attachmentlist_);
    std::swap(source_, other->source_);
    std::swap(sourceval_, other->sourceval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailItemProto::kIdFieldNumber;
const int WebMailItemProto::kNumFieldNumber;
#endif  // !_MSC_VER

WebMailItemProto::WebMailItemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailItemProto::InitAsDefaultInstance() {
}

WebMailItemProto::WebMailItemProto(const WebMailItemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailItemProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailItemProto::~WebMailItemProto() {
  SharedDtor();
}

void WebMailItemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebMailItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailItemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailItemProto_descriptor_;
}

const WebMailItemProto& WebMailItemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

WebMailItemProto* WebMailItemProto::default_instance_ = NULL;

WebMailItemProto* WebMailItemProto::New() const {
  return new WebMailItemProto;
}

void WebMailItemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailItemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailItemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailItemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailItemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailItemProto::MergeFrom(const WebMailItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailItemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailItemProto::CopyFrom(const WebMailItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailItemProto::IsInitialized() const {

  return true;
}

void WebMailItemProto::Swap(WebMailItemProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailItemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailItemProto_descriptor_;
  metadata.reflection = WebMailItemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDataProto::kMailIdFieldNumber;
const int WebMailDataProto::kCreateTimeFieldNumber;
const int WebMailDataProto::kTopicFieldNumber;
const int WebMailDataProto::kFetchFieldNumber;
const int WebMailDataProto::kContentFieldNumber;
const int WebMailDataProto::kGoldFieldNumber;
const int WebMailDataProto::kDiamondFieldNumber;
const int WebMailDataProto::kBindDiamondFieldNumber;
const int WebMailDataProto::kArenaScoreFieldNumber;
const int WebMailDataProto::kMagiccrystalFieldNumber;
const int WebMailDataProto::kPrestigeFieldNumber;
const int WebMailDataProto::kItemListFieldNumber;
#endif  // !_MSC_VER

WebMailDataProto::WebMailDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDataProto::InitAsDefaultInstance() {
  topic_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
  content_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
}

WebMailDataProto::WebMailDataProto(const WebMailDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDataProto::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  topic_ = NULL;
  fetch_ = 0;
  content_ = NULL;
  gold_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_ULONGLONG(0);
  binddiamond_ = GOOGLE_ULONGLONG(0);
  arenascore_ = GOOGLE_ULONGLONG(0);
  magiccrystal_ = GOOGLE_ULONGLONG(0);
  prestige_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDataProto::~WebMailDataProto() {
  SharedDtor();
}

void WebMailDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete topic_;
    delete content_;
  }
}

void WebMailDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDataProto_descriptor_;
}

const WebMailDataProto& WebMailDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

WebMailDataProto* WebMailDataProto::default_instance_ = NULL;

WebMailDataProto* WebMailDataProto::New() const {
  return new WebMailDataProto;
}

void WebMailDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_topic()) {
      if (topic_ != NULL) topic_->::proto_ff::MailStrProto::Clear();
    }
    fetch_ = 0;
    if (has_content()) {
      if (content_ != NULL) content_->::proto_ff::MailStrProto::Clear();
    }
    gold_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_ULONGLONG(0);
    binddiamond_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arenascore_ = GOOGLE_ULONGLONG(0);
    magiccrystal_ = GOOGLE_ULONGLONG(0);
    prestige_ = GOOGLE_ULONGLONG(0);
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // optional .proto_ff.MailStrProto topic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional .proto_ff.MailStrProto content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional uint64 diamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bindDiamond;
        break;
      }

      // optional uint64 bindDiamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_arenaScore;
        break;
      }

      // optional uint64 arenaScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arenascore_)));
          set_has_arenascore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magiccrystal;
        break;
      }

      // optional uint64 magiccrystal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magiccrystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magiccrystal_)));
          set_has_magiccrystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prestige;
        break;
      }

      // optional uint64 prestige = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        break;
      }

      // repeated .proto_ff.WebMailItemProto itemList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint64 createTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->createtime(), output);
  }

  // optional .proto_ff.MailStrProto topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topic(), output);
  }

  // optional int32 fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fetch(), output);
  }

  // optional .proto_ff.MailStrProto content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->content(), output);
  }

  // optional uint64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }

  // optional uint64 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->diamond(), output);
  }

  // optional uint64 bindDiamond = 8;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->binddiamond(), output);
  }

  // optional uint64 arenaScore = 9;
  if (has_arenascore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->arenascore(), output);
  }

  // optional uint64 magiccrystal = 10;
  if (has_magiccrystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->magiccrystal(), output);
  }

  // optional uint64 prestige = 11;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->prestige(), output);
  }

  // repeated .proto_ff.WebMailItemProto itemList = 12;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint64 createTime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->createtime(), target);
  }

  // optional .proto_ff.MailStrProto topic = 3;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->topic(), target);
  }

  // optional int32 fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fetch(), target);
  }

  // optional .proto_ff.MailStrProto content = 5;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->content(), target);
  }

  // optional uint64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gold(), target);
  }

  // optional uint64 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->diamond(), target);
  }

  // optional uint64 bindDiamond = 8;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->binddiamond(), target);
  }

  // optional uint64 arenaScore = 9;
  if (has_arenascore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->arenascore(), target);
  }

  // optional uint64 magiccrystal = 10;
  if (has_magiccrystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->magiccrystal(), target);
  }

  // optional uint64 prestige = 11;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->prestige(), target);
  }

  // repeated .proto_ff.WebMailItemProto itemList = 12;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint64 createTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.MailStrProto topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic());
    }

    // optional int32 fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional .proto_ff.MailStrProto content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

    // optional uint64 bindDiamond = 8;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->binddiamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 arenaScore = 9;
    if (has_arenascore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arenascore());
    }

    // optional uint64 magiccrystal = 10;
    if (has_magiccrystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magiccrystal());
    }

    // optional uint64 prestige = 11;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prestige());
    }

  }
  // repeated .proto_ff.WebMailItemProto itemList = 12;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDataProto::MergeFrom(const WebMailDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_topic()) {
      mutable_topic()->::proto_ff::MailStrProto::MergeFrom(from.topic());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_content()) {
      mutable_content()->::proto_ff::MailStrProto::MergeFrom(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arenascore()) {
      set_arenascore(from.arenascore());
    }
    if (from.has_magiccrystal()) {
      set_magiccrystal(from.magiccrystal());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDataProto::CopyFrom(const WebMailDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDataProto::IsInitialized() const {

  return true;
}

void WebMailDataProto::Swap(WebMailDataProto* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(createtime_, other->createtime_);
    std::swap(topic_, other->topic_);
    std::swap(fetch_, other->fetch_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(arenascore_, other->arenascore_);
    std::swap(magiccrystal_, other->magiccrystal_);
    std::swap(prestige_, other->prestige_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDataProto_descriptor_;
  metadata.reflection = WebMailDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemArgProto::kIntParamFieldNumber;
const int UseItemArgProto::kStrParamFieldNumber;
const int UseItemArgProto::kItemLstFieldNumber;
#endif  // !_MSC_VER

UseItemArgProto::UseItemArgProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemArgProto::InitAsDefaultInstance() {
}

UseItemArgProto::UseItemArgProto(const UseItemArgProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemArgProto::SharedCtor() {
  _cached_size_ = 0;
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemArgProto::~UseItemArgProto() {
  SharedDtor();
}

void UseItemArgProto::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void UseItemArgProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemArgProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemArgProto_descriptor_;
}

const UseItemArgProto& UseItemArgProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

UseItemArgProto* UseItemArgProto::default_instance_ = NULL;

UseItemArgProto* UseItemArgProto::New() const {
  return new UseItemArgProto;
}

void UseItemArgProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
  }
  item_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemArgProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 int_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        break;
      }

      // optional bytes str_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_lst;
        break;
      }

      // repeated uint64 item_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_item_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemArgProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 int_param = 1;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int_param(), output);
  }

  // optional bytes str_param = 2;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->str_param(), output);
  }

  // repeated uint64 item_lst = 3;
  for (int i = 0; i < this->item_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->item_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemArgProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 int_param = 1;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int_param(), target);
  }

  // optional bytes str_param = 2;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str_param(), target);
  }

  // repeated uint64 item_lst = 3;
  for (int i = 0; i < this->item_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->item_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemArgProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 int_param = 1;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // optional bytes str_param = 2;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

  }
  // repeated uint64 item_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_lst(i));
    }
    total_size += 1 * this->item_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemArgProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemArgProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemArgProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemArgProto::MergeFrom(const UseItemArgProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_lst_.MergeFrom(from.item_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemArgProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemArgProto::CopyFrom(const UseItemArgProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemArgProto::IsInitialized() const {

  return true;
}

void UseItemArgProto::Swap(UseItemArgProto* other) {
  if (other != this) {
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    item_lst_.Swap(&other->item_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemArgProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemArgProto_descriptor_;
  metadata.reflection = UseItemArgProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleFacadeCastRsp::kRoleidFieldNumber;
const int NotifyRoleFacadeCastRsp::kFacadeFieldNumber;
#endif  // !_MSC_VER

NotifyRoleFacadeCastRsp::NotifyRoleFacadeCastRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleFacadeCastRsp::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

NotifyRoleFacadeCastRsp::NotifyRoleFacadeCastRsp(const NotifyRoleFacadeCastRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleFacadeCastRsp::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleFacadeCastRsp::~NotifyRoleFacadeCastRsp() {
  SharedDtor();
}

void NotifyRoleFacadeCastRsp::SharedDtor() {
  if (this != default_instance_) {
    delete facade_;
  }
}

void NotifyRoleFacadeCastRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleFacadeCastRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleFacadeCastRsp_descriptor_;
}

const NotifyRoleFacadeCastRsp& NotifyRoleFacadeCastRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

NotifyRoleFacadeCastRsp* NotifyRoleFacadeCastRsp::default_instance_ = NULL;

NotifyRoleFacadeCastRsp* NotifyRoleFacadeCastRsp::New() const {
  return new NotifyRoleFacadeCastRsp;
}

void NotifyRoleFacadeCastRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleFacadeCastRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleFacadeCastRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 2;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->facade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleFacadeCastRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 2;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->facade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleFacadeCastRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional .proto_ff.RoleFacadeProto facade = 2;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleFacadeCastRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleFacadeCastRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleFacadeCastRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleFacadeCastRsp::MergeFrom(const NotifyRoleFacadeCastRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleFacadeCastRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleFacadeCastRsp::CopyFrom(const NotifyRoleFacadeCastRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleFacadeCastRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void NotifyRoleFacadeCastRsp::Swap(NotifyRoleFacadeCastRsp* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(facade_, other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleFacadeCastRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleFacadeCastRsp_descriptor_;
  metadata.reflection = NotifyRoleFacadeCastRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfoData::kUnlockIdFieldNumber;
const int FunctionUnlockInfoData::kGetRewardFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfoData::FunctionUnlockInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfoData::InitAsDefaultInstance() {
}

FunctionUnlockInfoData::FunctionUnlockInfoData(const FunctionUnlockInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfoData::SharedCtor() {
  _cached_size_ = 0;
  unlockid_ = GOOGLE_ULONGLONG(0);
  get_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfoData::~FunctionUnlockInfoData() {
  SharedDtor();
}

void FunctionUnlockInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfoData_descriptor_;
}

const FunctionUnlockInfoData& FunctionUnlockInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FunctionUnlockInfoData* FunctionUnlockInfoData::default_instance_ = NULL;

FunctionUnlockInfoData* FunctionUnlockInfoData::New() const {
  return new FunctionUnlockInfoData;
}

void FunctionUnlockInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unlockid_ = GOOGLE_ULONGLONG(0);
    get_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unlockId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlockid_)));
          set_has_unlockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_reward;
        break;
      }

      // optional bool get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_reward_)));
          set_has_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 unlockId = 1;
  if (has_unlockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unlockid(), output);
  }

  // optional bool get_reward = 2;
  if (has_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 unlockId = 1;
  if (has_unlockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unlockid(), target);
  }

  // optional bool get_reward = 2;
  if (has_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 unlockId = 1;
    if (has_unlockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unlockid());
    }

    // optional bool get_reward = 2;
    if (has_get_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfoData::MergeFrom(const FunctionUnlockInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlockid()) {
      set_unlockid(from.unlockid());
    }
    if (from.has_get_reward()) {
      set_get_reward(from.get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfoData::CopyFrom(const FunctionUnlockInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfoData::IsInitialized() const {

  return true;
}

void FunctionUnlockInfoData::Swap(FunctionUnlockInfoData* other) {
  if (other != this) {
    std::swap(unlockid_, other->unlockid_);
    std::swap(get_reward_, other->get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfoData_descriptor_;
  metadata.reflection = FunctionUnlockInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfo::kDataFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfo::FunctionUnlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfo::InitAsDefaultInstance() {
}

FunctionUnlockInfo::FunctionUnlockInfo(const FunctionUnlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfo::~FunctionUnlockInfo() {
  SharedDtor();
}

void FunctionUnlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfo_descriptor_;
}

const FunctionUnlockInfo& FunctionUnlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FunctionUnlockInfo* FunctionUnlockInfo::default_instance_ = NULL;

FunctionUnlockInfo* FunctionUnlockInfo::New() const {
  return new FunctionUnlockInfo;
}

void FunctionUnlockInfo::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FunctionUnlockInfoData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfo::MergeFrom(const FunctionUnlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfo::CopyFrom(const FunctionUnlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfo::IsInitialized() const {

  return true;
}

void FunctionUnlockInfo::Swap(FunctionUnlockInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfo_descriptor_;
  metadata.reflection = FunctionUnlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePlayerMiniInfo::kPlayerIdFieldNumber;
const int RolePlayerMiniInfo::kPlayerNameFieldNumber;
const int RolePlayerMiniInfo::kZidFieldNumber;
const int RolePlayerMiniInfo::kLevelFieldNumber;
const int RolePlayerMiniInfo::kClosenessFieldNumber;
const int RolePlayerMiniInfo::kRecentTypeFieldNumber;
const int RolePlayerMiniInfo::kRecentTimeFieldNumber;
const int RolePlayerMiniInfo::kProfFieldNumber;
const int RolePlayerMiniInfo::kTeamIdFieldNumber;
const int RolePlayerMiniInfo::kUnionIdFieldNumber;
const int RolePlayerMiniInfo::kFightPowerFieldNumber;
const int RolePlayerMiniInfo::kKillMeTimesFieldNumber;
const int RolePlayerMiniInfo::kOfflineTimeFieldNumber;
const int RolePlayerMiniInfo::kConnectFieldNumber;
const int RolePlayerMiniInfo::kOnlineFieldNumber;
const int RolePlayerMiniInfo::kVipLevelFieldNumber;
const int RolePlayerMiniInfo::kFacadeFieldNumber;
const int RolePlayerMiniInfo::kMarryFieldNumber;
#endif  // !_MSC_VER

RolePlayerMiniInfo::RolePlayerMiniInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RolePlayerMiniInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

RolePlayerMiniInfo::RolePlayerMiniInfo(const RolePlayerMiniInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RolePlayerMiniInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  level_ = 0u;
  closeness_ = 0u;
  recenttype_ = 0u;
  recenttime_ = GOOGLE_ULONGLONG(0);
  prof_ = 0u;
  teamid_ = 0u;
  unionid_ = 0u;
  fightpower_ = GOOGLE_ULONGLONG(0);
  killmetimes_ = 0u;
  offlinetime_ = GOOGLE_ULONGLONG(0);
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = false;
  viplevel_ = 0u;
  facade_ = NULL;
  marry_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePlayerMiniInfo::~RolePlayerMiniInfo() {
  SharedDtor();
}

void RolePlayerMiniInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void RolePlayerMiniInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePlayerMiniInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePlayerMiniInfo_descriptor_;
}

const RolePlayerMiniInfo& RolePlayerMiniInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RolePlayerMiniInfo* RolePlayerMiniInfo::default_instance_ = NULL;

RolePlayerMiniInfo* RolePlayerMiniInfo::New() const {
  return new RolePlayerMiniInfo;
}

void RolePlayerMiniInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    zid_ = 0u;
    level_ = 0u;
    closeness_ = 0u;
    recenttype_ = 0u;
    recenttime_ = GOOGLE_ULONGLONG(0);
    prof_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = 0u;
    unionid_ = 0u;
    fightpower_ = GOOGLE_ULONGLONG(0);
    killmetimes_ = 0u;
    offlinetime_ = GOOGLE_ULONGLONG(0);
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::kEmptyString) {
        connect_->clear();
      }
    }
    online_ = false;
    viplevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    marry_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePlayerMiniInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_closeness;
        break;
      }

      // optional uint32 closeness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recentType;
        break;
      }

      // optional uint32 recentType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recenttype_)));
          set_has_recenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_recentTime;
        break;
      }

      // optional uint64 recentTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recenttime_)));
          set_has_recenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamId;
        break;
      }

      // optional uint32 teamId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unionId;
        break;
      }

      // optional uint32 unionId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fightPower;
        break;
      }

      // optional uint64 fightPower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_killMeTimes;
        break;
      }

      // optional uint32 killMeTimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killMeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmetimes_)));
          set_has_killmetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_offlineTime;
        break;
      }

      // optional uint64 offlineTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_connect;
        break;
      }

      // optional string connect = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_online;
        break;
      }

      // optional bool online = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_marry;
        break;
      }

      // optional uint32 marry = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marry_)));
          set_has_marry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RolePlayerMiniInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 closeness = 6;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->closeness(), output);
  }

  // optional uint32 recentType = 7;
  if (has_recenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->recenttype(), output);
  }

  // optional uint64 recentTime = 8;
  if (has_recenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->recenttime(), output);
  }

  // optional uint32 prof = 9;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prof(), output);
  }

  // optional uint32 teamId = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->teamid(), output);
  }

  // optional uint32 unionId = 11;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unionid(), output);
  }

  // optional uint64 fightPower = 12;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->fightpower(), output);
  }

  // optional uint32 killMeTimes = 13;
  if (has_killmetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->killmetimes(), output);
  }

  // optional uint64 offlineTime = 14;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->offlinetime(), output);
  }

  // optional string connect = 15;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->connect(), output);
  }

  // optional bool online = 16;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->online(), output);
  }

  // optional uint32 vipLevel = 17;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->viplevel(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 18;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->facade(), output);
  }

  // optional uint32 marry = 19;
  if (has_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->marry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RolePlayerMiniInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 closeness = 6;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->closeness(), target);
  }

  // optional uint32 recentType = 7;
  if (has_recenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->recenttype(), target);
  }

  // optional uint64 recentTime = 8;
  if (has_recenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->recenttime(), target);
  }

  // optional uint32 prof = 9;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prof(), target);
  }

  // optional uint32 teamId = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->teamid(), target);
  }

  // optional uint32 unionId = 11;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unionid(), target);
  }

  // optional uint64 fightPower = 12;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->fightpower(), target);
  }

  // optional uint32 killMeTimes = 13;
  if (has_killmetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->killmetimes(), target);
  }

  // optional uint64 offlineTime = 14;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->offlinetime(), target);
  }

  // optional string connect = 15;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->connect(), target);
  }

  // optional bool online = 16;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->online(), target);
  }

  // optional uint32 vipLevel = 17;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->viplevel(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 18;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->facade(), target);
  }

  // optional uint32 marry = 19;
  if (has_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->marry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RolePlayerMiniInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 closeness = 6;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closeness());
    }

    // optional uint32 recentType = 7;
    if (has_recenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recenttype());
    }

    // optional uint64 recentTime = 8;
    if (has_recenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recenttime());
    }

    // optional uint32 prof = 9;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 teamId = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 unionId = 11;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional uint64 fightPower = 12;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

    // optional uint32 killMeTimes = 13;
    if (has_killmetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmetimes());
    }

    // optional uint64 offlineTime = 14;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

    // optional string connect = 15;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional bool online = 16;
    if (has_online()) {
      total_size += 2 + 1;
    }

    // optional uint32 vipLevel = 17;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.RoleFacadeProto facade = 18;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint32 marry = 19;
    if (has_marry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePlayerMiniInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePlayerMiniInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePlayerMiniInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePlayerMiniInfo::MergeFrom(const RolePlayerMiniInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_recenttype()) {
      set_recenttype(from.recenttype());
    }
    if (from.has_recenttime()) {
      set_recenttime(from.recenttime());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_killmetimes()) {
      set_killmetimes(from.killmetimes());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_marry()) {
      set_marry(from.marry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePlayerMiniInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePlayerMiniInfo::CopyFrom(const RolePlayerMiniInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePlayerMiniInfo::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void RolePlayerMiniInfo::Swap(RolePlayerMiniInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(zid_, other->zid_);
    std::swap(level_, other->level_);
    std::swap(closeness_, other->closeness_);
    std::swap(recenttype_, other->recenttype_);
    std::swap(recenttime_, other->recenttime_);
    std::swap(prof_, other->prof_);
    std::swap(teamid_, other->teamid_);
    std::swap(unionid_, other->unionid_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(killmetimes_, other->killmetimes_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(connect_, other->connect_);
    std::swap(online_, other->online_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(facade_, other->facade_);
    std::swap(marry_, other->marry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePlayerMiniInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePlayerMiniInfo_descriptor_;
  metadata.reflection = RolePlayerMiniInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kIdFieldNumber;
const int FriendInfo::kClosenessFieldNumber;
const int FriendInfo::kTodayClosenessFieldNumber;
const int FriendInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  closeness_ = 0u;
  todaycloseness_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    closeness_ = 0u;
    todaycloseness_ = 0u;
    updatetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_closeness;
        break;
      }

      // optional uint32 closeness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todayCloseness;
        break;
      }

      // optional uint32 todayCloseness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayCloseness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycloseness_)));
          set_has_todaycloseness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 closeness = 2;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->closeness(), output);
  }

  // optional uint32 todayCloseness = 3;
  if (has_todaycloseness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaycloseness(), output);
  }

  // optional uint64 updateTime = 4;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 closeness = 2;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->closeness(), target);
  }

  // optional uint32 todayCloseness = 3;
  if (has_todaycloseness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaycloseness(), target);
  }

  // optional uint64 updateTime = 4;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 closeness = 2;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closeness());
    }

    // optional uint32 todayCloseness = 3;
    if (has_todaycloseness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycloseness());
    }

    // optional uint64 updateTime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_todaycloseness()) {
      set_todaycloseness(from.todaycloseness());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(closeness_, other->closeness_);
    std::swap(todaycloseness_, other->todaycloseness_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyInfo::kIdFieldNumber;
const int FriendApplyInfo::kConnectFieldNumber;
#endif  // !_MSC_VER

FriendApplyInfo::FriendApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyInfo::InitAsDefaultInstance() {
}

FriendApplyInfo::FriendApplyInfo(const FriendApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyInfo::~FriendApplyInfo() {
  SharedDtor();
}

void FriendApplyInfo::SharedDtor() {
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_;
  }
  if (this != default_instance_) {
  }
}

void FriendApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyInfo_descriptor_;
}

const FriendApplyInfo& FriendApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FriendApplyInfo* FriendApplyInfo::default_instance_ = NULL;

FriendApplyInfo* FriendApplyInfo::New() const {
  return new FriendApplyInfo;
}

void FriendApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::kEmptyString) {
        connect_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connect;
        break;
      }

      // optional string connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string connect = 2;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyInfo::MergeFrom(const FriendApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyInfo::CopyFrom(const FriendApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyInfo::IsInitialized() const {

  return true;
}

void FriendApplyInfo::Swap(FriendApplyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(connect_, other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyInfo_descriptor_;
  metadata.reflection = FriendApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationHateInfo::kIdFieldNumber;
const int RelationHateInfo::kKillMeTimesFieldNumber;
#endif  // !_MSC_VER

RelationHateInfo::RelationHateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationHateInfo::InitAsDefaultInstance() {
}

RelationHateInfo::RelationHateInfo(const RelationHateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationHateInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  killmetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationHateInfo::~RelationHateInfo() {
  SharedDtor();
}

void RelationHateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationHateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationHateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationHateInfo_descriptor_;
}

const RelationHateInfo& RelationHateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationHateInfo* RelationHateInfo::default_instance_ = NULL;

RelationHateInfo* RelationHateInfo::New() const {
  return new RelationHateInfo;
}

void RelationHateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    killmetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationHateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killMeTimes;
        break;
      }

      // optional uint32 killMeTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killMeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmetimes_)));
          set_has_killmetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationHateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 killMeTimes = 2;
  if (has_killmetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killmetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationHateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 killMeTimes = 2;
  if (has_killmetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killmetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationHateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 killMeTimes = 2;
    if (has_killmetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationHateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationHateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationHateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationHateInfo::MergeFrom(const RelationHateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_killmetimes()) {
      set_killmetimes(from.killmetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationHateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationHateInfo::CopyFrom(const RelationHateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationHateInfo::IsInitialized() const {

  return true;
}

void RelationHateInfo::Swap(RelationHateInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(killmetimes_, other->killmetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationHateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationHateInfo_descriptor_;
  metadata.reflection = RelationHateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationGiftRecord::kFriendIdFieldNumber;
const int RelationGiftRecord::kItemIdFieldNumber;
const int RelationGiftRecord::kIsThanksFieldNumber;
#endif  // !_MSC_VER

RelationGiftRecord::RelationGiftRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationGiftRecord::InitAsDefaultInstance() {
}

RelationGiftRecord::RelationGiftRecord(const RelationGiftRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationGiftRecord::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  isthanks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationGiftRecord::~RelationGiftRecord() {
  SharedDtor();
}

void RelationGiftRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationGiftRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationGiftRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationGiftRecord_descriptor_;
}

const RelationGiftRecord& RelationGiftRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationGiftRecord* RelationGiftRecord::default_instance_ = NULL;

RelationGiftRecord* RelationGiftRecord::New() const {
  return new RelationGiftRecord;
}

void RelationGiftRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
    isthanks_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationGiftRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isThanks;
        break;
      }

      // optional uint32 isThanks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isThanks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isthanks_)));
          set_has_isthanks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationGiftRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friendid(), output);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 isThanks = 3;
  if (has_isthanks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isthanks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationGiftRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friendId = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friendid(), target);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 isThanks = 3;
  if (has_isthanks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isthanks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationGiftRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendid());
    }

    // optional uint64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 isThanks = 3;
    if (has_isthanks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isthanks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationGiftRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationGiftRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationGiftRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationGiftRecord::MergeFrom(const RelationGiftRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_isthanks()) {
      set_isthanks(from.isthanks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationGiftRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationGiftRecord::CopyFrom(const RelationGiftRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationGiftRecord::IsInitialized() const {

  return true;
}

void RelationGiftRecord::Swap(RelationGiftRecord* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(itemid_, other->itemid_);
    std::swap(isthanks_, other->isthanks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationGiftRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationGiftRecord_descriptor_;
  metadata.reflection = RelationGiftRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationDBInfo::kFriendListFieldNumber;
const int RelationDBInfo::kBlackListFieldNumber;
const int RelationDBInfo::kHateListFieldNumber;
const int RelationDBInfo::kApplyListFieldNumber;
const int RelationDBInfo::kFriendsAddFieldNumber;
const int RelationDBInfo::kGiftRecordsFieldNumber;
#endif  // !_MSC_VER

RelationDBInfo::RelationDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationDBInfo::InitAsDefaultInstance() {
}

RelationDBInfo::RelationDBInfo(const RelationDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationDBInfo::SharedCtor() {
  _cached_size_ = 0;
  friends_add_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationDBInfo::~RelationDBInfo() {
  SharedDtor();
}

void RelationDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationDBInfo_descriptor_;
}

const RelationDBInfo& RelationDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationDBInfo* RelationDBInfo::default_instance_ = NULL;

RelationDBInfo* RelationDBInfo::New() const {
  return new RelationDBInfo;
}

void RelationDBInfo::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    friends_add_ = 0u;
  }
  friendlist_.Clear();
  blacklist_.Clear();
  hatelist_.Clear();
  applylist_.Clear();
  giftrecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FriendInfo friendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendList;
        if (input->ExpectTag(16)) goto parse_blackList;
        break;
      }

      // repeated uint64 blackList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_blacklist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blacklist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blackList;
        if (input->ExpectTag(26)) goto parse_hateList;
        break;
      }

      // repeated .proto_ff.RelationHateInfo hateList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hateList;
        if (input->ExpectTag(34)) goto parse_applyList;
        break;
      }

      // repeated .proto_ff.FriendApplyInfo applyList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_applyList;
        if (input->ExpectTag(40)) goto parse_friends_add;
        break;
      }

      // optional uint32 friends_add = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friends_add_)));
          set_has_friends_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_giftRecords;
        break;
      }

      // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftrecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_giftRecords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(i), output);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->blacklist(i), output);
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  for (int i = 0; i < this->hatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hatelist(i), output);
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->applylist(i), output);
  }

  // optional uint32 friends_add = 5;
  if (has_friends_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->friends_add(), output);
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  for (int i = 0; i < this->giftrecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->giftrecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(i), target);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->blacklist(i), target);
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  for (int i = 0; i < this->hatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hatelist(i), target);
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->applylist(i), target);
  }

  // optional uint32 friends_add = 5;
  if (has_friends_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->friends_add(), target);
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  for (int i = 0; i < this->giftrecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->giftrecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 friends_add = 5;
    if (has_friends_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friends_add());
    }

  }
  // repeated .proto_ff.FriendInfo friendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  // repeated uint64 blackList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blacklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blacklist(i));
    }
    total_size += 1 * this->blacklist_size() + data_size;
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  total_size += 1 * this->hatelist_size();
  for (int i = 0; i < this->hatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatelist(i));
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  total_size += 1 * this->giftrecords_size();
  for (int i = 0; i < this->giftrecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftrecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationDBInfo::MergeFrom(const RelationDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  blacklist_.MergeFrom(from.blacklist_);
  hatelist_.MergeFrom(from.hatelist_);
  applylist_.MergeFrom(from.applylist_);
  giftrecords_.MergeFrom(from.giftrecords_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_friends_add()) {
      set_friends_add(from.friends_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationDBInfo::CopyFrom(const RelationDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationDBInfo::IsInitialized() const {

  return true;
}

void RelationDBInfo::Swap(RelationDBInfo* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    blacklist_.Swap(&other->blacklist_);
    hatelist_.Swap(&other->hatelist_);
    applylist_.Swap(&other->applylist_);
    std::swap(friends_add_, other->friends_add_);
    giftrecords_.Swap(&other->giftrecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationDBInfo_descriptor_;
  metadata.reflection = RelationDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DigPerfor::kTypeFieldNumber;
const int DigPerfor::kValueFieldNumber;
#endif  // !_MSC_VER

DigPerfor::DigPerfor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DigPerfor::InitAsDefaultInstance() {
}

DigPerfor::DigPerfor(const DigPerfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DigPerfor::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DigPerfor::~DigPerfor() {
  SharedDtor();
}

void DigPerfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DigPerfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigPerfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerfor_descriptor_;
}

const DigPerfor& DigPerfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DigPerfor* DigPerfor::default_instance_ = NULL;

DigPerfor* DigPerfor::New() const {
  return new DigPerfor;
}

void DigPerfor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DigPerfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DigPerfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DigPerfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DigPerfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigPerfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DigPerfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DigPerfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DigPerfor::MergeFrom(const DigPerfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DigPerfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigPerfor::CopyFrom(const DigPerfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigPerfor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DigPerfor::Swap(DigPerfor* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DigPerfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DigPerfor_descriptor_;
  metadata.reflection = DigPerfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffProto::kBuffIndexFieldNumber;
const int BuffProto::kBuffIdFieldNumber;
const int BuffProto::kRecverCidFieldNumber;
const int BuffProto::kLeftMsecFieldNumber;
const int BuffProto::kSkillIdFieldNumber;
const int BuffProto::kSkillLevFieldNumber;
const int BuffProto::kIsEffectFieldNumber;
#endif  // !_MSC_VER

BuffProto::BuffProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffProto::InitAsDefaultInstance() {
}

BuffProto::BuffProto(const BuffProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffProto::SharedCtor() {
  _cached_size_ = 0;
  buff_index_ = GOOGLE_ULONGLONG(0);
  buff_id_ = GOOGLE_ULONGLONG(0);
  recver_cid_ = GOOGLE_ULONGLONG(0);
  left_msec_ = GOOGLE_LONGLONG(0);
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0;
  is_effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffProto::~BuffProto() {
  SharedDtor();
}

void BuffProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffProto_descriptor_;
}

const BuffProto& BuffProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BuffProto* BuffProto::default_instance_ = NULL;

BuffProto* BuffProto::New() const {
  return new BuffProto;
}

void BuffProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_index_ = GOOGLE_ULONGLONG(0);
    buff_id_ = GOOGLE_ULONGLONG(0);
    recver_cid_ = GOOGLE_ULONGLONG(0);
    left_msec_ = GOOGLE_LONGLONG(0);
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0;
    is_effect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 buff_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_index_)));
          set_has_buff_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // required uint64 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recver_cid;
        break;
      }

      // optional uint64 recver_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recver_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recver_cid_)));
          set_has_recver_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_msec;
        break;
      }

      // optional int64 left_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &left_msec_)));
          set_has_left_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_id;
        break;
      }

      // optional uint64 skill_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_lev;
        break;
      }

      // optional int32 skill_lev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_effect;
        break;
      }

      // optional int32 is_effect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_effect_)));
          set_has_is_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 buff_index = 1;
  if (has_buff_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buff_index(), output);
  }

  // required uint64 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buff_id(), output);
  }

  // optional uint64 recver_cid = 3;
  if (has_recver_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recver_cid(), output);
  }

  // optional int64 left_msec = 4;
  if (has_left_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->left_msec(), output);
  }

  // optional uint64 skill_id = 5;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->skill_id(), output);
  }

  // optional int32 skill_lev = 6;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_lev(), output);
  }

  // optional int32 is_effect = 7;
  if (has_is_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 buff_index = 1;
  if (has_buff_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buff_index(), target);
  }

  // required uint64 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buff_id(), target);
  }

  // optional uint64 recver_cid = 3;
  if (has_recver_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recver_cid(), target);
  }

  // optional int64 left_msec = 4;
  if (has_left_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->left_msec(), target);
  }

  // optional uint64 skill_id = 5;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->skill_id(), target);
  }

  // optional int32 skill_lev = 6;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_lev(), target);
  }

  // optional int32 is_effect = 7;
  if (has_is_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 buff_index = 1;
    if (has_buff_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buff_index());
    }

    // required uint64 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buff_id());
    }

    // optional uint64 recver_cid = 3;
    if (has_recver_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recver_cid());
    }

    // optional int64 left_msec = 4;
    if (has_left_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->left_msec());
    }

    // optional uint64 skill_id = 5;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 skill_lev = 6;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_lev());
    }

    // optional int32 is_effect = 7;
    if (has_is_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_effect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffProto::MergeFrom(const BuffProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_index()) {
      set_buff_index(from.buff_index());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_recver_cid()) {
      set_recver_cid(from.recver_cid());
    }
    if (from.has_left_msec()) {
      set_left_msec(from.left_msec());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
    if (from.has_is_effect()) {
      set_is_effect(from.is_effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffProto::CopyFrom(const BuffProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuffProto::Swap(BuffProto* other) {
  if (other != this) {
    std::swap(buff_index_, other->buff_index_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(recver_cid_, other->recver_cid_);
    std::swap(left_msec_, other->left_msec_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(is_effect_, other->is_effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffProto_descriptor_;
  metadata.reflection = BuffProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffListProto::kCidFieldNumber;
const int BuffListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

BuffListProto::BuffListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffListProto::InitAsDefaultInstance() {
}

BuffListProto::BuffListProto(const BuffListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffListProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffListProto::~BuffListProto() {
  SharedDtor();
}

void BuffListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffListProto_descriptor_;
}

const BuffListProto& BuffListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BuffListProto* BuffListProto::default_instance_ = NULL;

BuffListProto* BuffListProto::New() const {
  return new BuffListProto;
}

void BuffListProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.BuffProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.BuffProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.BuffProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.BuffProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffListProto::MergeFrom(const BuffListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffListProto::CopyFrom(const BuffListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffListProto::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void BuffListProto::Swap(BuffListProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffListProto_descriptor_;
  metadata.reflection = BuffListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPosProto::kSkillIdFieldNumber;
const int SkillPosProto::kPosFieldNumber;
const int SkillPosProto::kCdFieldNumber;
const int SkillPosProto::kUseFieldNumber;
#endif  // !_MSC_VER

SkillPosProto::SkillPosProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPosProto::InitAsDefaultInstance() {
}

SkillPosProto::SkillPosProto(const SkillPosProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPosProto::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  cd_ = 0;
  use_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPosProto::~SkillPosProto() {
  SharedDtor();
}

void SkillPosProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPosProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPosProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPosProto_descriptor_;
}

const SkillPosProto& SkillPosProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillPosProto* SkillPosProto::default_instance_ = NULL;

SkillPosProto* SkillPosProto::New() const {
  return new SkillPosProto;
}

void SkillPosProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    cd_ = 0;
    use_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPosProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional int32 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use;
        break;
      }

      // optional int32 use = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_)));
          set_has_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPosProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  // optional int32 use = 4;
  if (has_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPosProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  // optional int32 use = 4;
  if (has_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPosProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 use = 4;
    if (has_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPosProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPosProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPosProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPosProto::MergeFrom(const SkillPosProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_use()) {
      set_use(from.use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPosProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPosProto::CopyFrom(const SkillPosProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPosProto::IsInitialized() const {

  return true;
}

void SkillPosProto::Swap(SkillPosProto* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pos_, other->pos_);
    std::swap(cd_, other->cd_);
    std::swap(use_, other->use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPosProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPosProto_descriptor_;
  metadata.reflection = SkillPosProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupProto::kGroupFieldNumber;
const int SkillGroupProto::kLstFieldNumber;
#endif  // !_MSC_VER

SkillGroupProto::SkillGroupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupProto::InitAsDefaultInstance() {
}

SkillGroupProto::SkillGroupProto(const SkillGroupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupProto::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupProto::~SkillGroupProto() {
  SharedDtor();
}

void SkillGroupProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupProto_descriptor_;
}

const SkillGroupProto& SkillGroupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillGroupProto* SkillGroupProto::default_instance_ = NULL;

SkillGroupProto* SkillGroupProto::New() const {
  return new SkillGroupProto;
}

void SkillGroupProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
  }
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lst;
        break;
      }

      // repeated .proto_ff.SkillPosProto lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // repeated .proto_ff.SkillPosProto lst = 2;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // repeated .proto_ff.SkillPosProto lst = 2;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

  }
  // repeated .proto_ff.SkillPosProto lst = 2;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupProto::MergeFrom(const SkillGroupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupProto::CopyFrom(const SkillGroupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupProto::IsInitialized() const {

  return true;
}

void SkillGroupProto::Swap(SkillGroupProto* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupProto_descriptor_;
  metadata.reflection = SkillGroupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupListProto::kInfoFieldNumber;
const int SkillGroupListProto::kCurSkillGroupFieldNumber;
#endif  // !_MSC_VER

SkillGroupListProto::SkillGroupListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupListProto::InitAsDefaultInstance() {
}

SkillGroupListProto::SkillGroupListProto(const SkillGroupListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupListProto::SharedCtor() {
  _cached_size_ = 0;
  cur_skill_group_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupListProto::~SkillGroupListProto() {
  SharedDtor();
}

void SkillGroupListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupListProto_descriptor_;
}

const SkillGroupListProto& SkillGroupListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillGroupListProto* SkillGroupListProto::default_instance_ = NULL;

SkillGroupListProto* SkillGroupListProto::New() const {
  return new SkillGroupListProto;
}

void SkillGroupListProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_skill_group_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillGroupProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_cur_skill_group;
        break;
      }

      // optional uint32 cur_skill_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_skill_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_skill_group_)));
          set_has_cur_skill_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillGroupProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 cur_skill_group = 2;
  if (has_cur_skill_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_skill_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillGroupProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 cur_skill_group = 2;
  if (has_cur_skill_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_skill_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cur_skill_group = 2;
    if (has_cur_skill_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_skill_group());
    }

  }
  // repeated .proto_ff.SkillGroupProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupListProto::MergeFrom(const SkillGroupListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_skill_group()) {
      set_cur_skill_group(from.cur_skill_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupListProto::CopyFrom(const SkillGroupListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupListProto::IsInitialized() const {

  return true;
}

void SkillGroupListProto::Swap(SkillGroupListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(cur_skill_group_, other->cur_skill_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupListProto_descriptor_;
  metadata.reflection = SkillGroupListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilTaskProto::kIdFieldNumber;
const int GodEvilTaskProto::kCurFieldNumber;
const int GodEvilTaskProto::kStateFieldNumber;
#endif  // !_MSC_VER

GodEvilTaskProto::GodEvilTaskProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilTaskProto::InitAsDefaultInstance() {
}

GodEvilTaskProto::GodEvilTaskProto(const GodEvilTaskProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilTaskProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilTaskProto::~GodEvilTaskProto() {
  SharedDtor();
}

void GodEvilTaskProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvilTaskProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilTaskProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilTaskProto_descriptor_;
}

const GodEvilTaskProto& GodEvilTaskProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodEvilTaskProto* GodEvilTaskProto::default_instance_ = NULL;

GodEvilTaskProto* GodEvilTaskProto::New() const {
  return new GodEvilTaskProto;
}

void GodEvilTaskProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilTaskProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilTaskProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilTaskProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilTaskProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilTaskProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilTaskProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilTaskProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilTaskProto::MergeFrom(const GodEvilTaskProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilTaskProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilTaskProto::CopyFrom(const GodEvilTaskProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilTaskProto::IsInitialized() const {

  return true;
}

void GodEvilTaskProto::Swap(GodEvilTaskProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilTaskProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilTaskProto_descriptor_;
  metadata.reflection = GodEvilTaskProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilTaskListProto::kLstFieldNumber;
#endif  // !_MSC_VER

GodEvilTaskListProto::GodEvilTaskListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilTaskListProto::InitAsDefaultInstance() {
}

GodEvilTaskListProto::GodEvilTaskListProto(const GodEvilTaskListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilTaskListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilTaskListProto::~GodEvilTaskListProto() {
  SharedDtor();
}

void GodEvilTaskListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvilTaskListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilTaskListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilTaskListProto_descriptor_;
}

const GodEvilTaskListProto& GodEvilTaskListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodEvilTaskListProto* GodEvilTaskListProto::default_instance_ = NULL;

GodEvilTaskListProto* GodEvilTaskListProto::New() const {
  return new GodEvilTaskListProto;
}

void GodEvilTaskListProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilTaskListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodEvilTaskProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilTaskListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodEvilTaskProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilTaskListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodEvilTaskProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilTaskListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GodEvilTaskProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilTaskListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilTaskListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilTaskListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilTaskListProto::MergeFrom(const GodEvilTaskListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilTaskListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilTaskListProto::CopyFrom(const GodEvilTaskListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilTaskListProto::IsInitialized() const {

  return true;
}

void GodEvilTaskListProto::Swap(GodEvilTaskListProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilTaskListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilTaskListProto_descriptor_;
  metadata.reflection = GodEvilTaskListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilStageProto::kStageFieldNumber;
const int GodEvilStageProto::kTaskFieldNumber;
const int GodEvilStageProto::kFinishFieldNumber;
#endif  // !_MSC_VER

GodEvilStageProto::GodEvilStageProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilStageProto::InitAsDefaultInstance() {
  task_ = const_cast< ::proto_ff::GodEvilTaskListProto*>(&::proto_ff::GodEvilTaskListProto::default_instance());
}

GodEvilStageProto::GodEvilStageProto(const GodEvilStageProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilStageProto::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  task_ = NULL;
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilStageProto::~GodEvilStageProto() {
  SharedDtor();
}

void GodEvilStageProto::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void GodEvilStageProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilStageProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilStageProto_descriptor_;
}

const GodEvilStageProto& GodEvilStageProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodEvilStageProto* GodEvilStageProto::default_instance_ = NULL;

GodEvilStageProto* GodEvilStageProto::New() const {
  return new GodEvilStageProto;
}

void GodEvilStageProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    if (has_task()) {
      if (task_ != NULL) task_->::proto_ff::GodEvilTaskListProto::Clear();
    }
    finish_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilStageProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // optional .proto_ff.GodEvilTaskListProto task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish;
        break;
      }

      // optional int32 finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilStageProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional .proto_ff.GodEvilTaskListProto task = 2;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task(), output);
  }

  // optional int32 finish = 3;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilStageProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional .proto_ff.GodEvilTaskListProto task = 2;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task(), target);
  }

  // optional int32 finish = 3;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilStageProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional .proto_ff.GodEvilTaskListProto task = 2;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional int32 finish = 3;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilStageProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilStageProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilStageProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilStageProto::MergeFrom(const GodEvilStageProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_task()) {
      mutable_task()->::proto_ff::GodEvilTaskListProto::MergeFrom(from.task());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilStageProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilStageProto::CopyFrom(const GodEvilStageProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilStageProto::IsInitialized() const {

  return true;
}

void GodEvilStageProto::Swap(GodEvilStageProto* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(task_, other->task_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilStageProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilStageProto_descriptor_;
  metadata.reflection = GodEvilStageProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilProto::kFetchFieldNumber;
const int GodEvilProto::kStageFieldNumber;
const int GodEvilProto::kTypeFieldNumber;
const int GodEvilProto::kCdFieldNumber;
const int GodEvilProto::kVesselLevFieldNumber;
const int GodEvilProto::kMirrorLevFieldNumber;
const int GodEvilProto::kExtraExpFieldNumber;
#endif  // !_MSC_VER

GodEvilProto::GodEvilProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilProto::InitAsDefaultInstance() {
  stage_ = const_cast< ::proto_ff::GodEvilStageProto*>(&::proto_ff::GodEvilStageProto::default_instance());
}

GodEvilProto::GodEvilProto(const GodEvilProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilProto::SharedCtor() {
  _cached_size_ = 0;
  fetch_ = 0;
  stage_ = NULL;
  type_ = 0;
  cd_ = 0;
  vessel_lev_ = 0;
  mirror_lev_ = 0;
  extra_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilProto::~GodEvilProto() {
  SharedDtor();
}

void GodEvilProto::SharedDtor() {
  if (this != default_instance_) {
    delete stage_;
  }
}

void GodEvilProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilProto_descriptor_;
}

const GodEvilProto& GodEvilProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodEvilProto* GodEvilProto::default_instance_ = NULL;

GodEvilProto* GodEvilProto::New() const {
  return new GodEvilProto;
}

void GodEvilProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fetch_ = 0;
    if (has_stage()) {
      if (stage_ != NULL) stage_->::proto_ff::GodEvilStageProto::Clear();
    }
    type_ = 0;
    cd_ = 0;
    vessel_lev_ = 0;
    mirror_lev_ = 0;
    extra_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fetch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stage;
        break;
      }

      // optional .proto_ff.GodEvilStageProto stage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cd;
        break;
      }

      // optional int32 cd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vessel_lev;
        break;
      }

      // optional int32 vessel_lev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vessel_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vessel_lev_)));
          set_has_vessel_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mirror_lev;
        break;
      }

      // optional int32 mirror_lev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_lev_)));
          set_has_mirror_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_extra_exp;
        break;
      }

      // required int64 extra_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extra_exp_)));
          set_has_extra_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fetch = 1;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fetch(), output);
  }

  // optional .proto_ff.GodEvilStageProto stage = 2;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stage(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 cd = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cd(), output);
  }

  // optional int32 vessel_lev = 5;
  if (has_vessel_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vessel_lev(), output);
  }

  // optional int32 mirror_lev = 6;
  if (has_mirror_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mirror_lev(), output);
  }

  // required int64 extra_exp = 7;
  if (has_extra_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->extra_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fetch = 1;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fetch(), target);
  }

  // optional .proto_ff.GodEvilStageProto stage = 2;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stage(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 cd = 4;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cd(), target);
  }

  // optional int32 vessel_lev = 5;
  if (has_vessel_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vessel_lev(), target);
  }

  // optional int32 mirror_lev = 6;
  if (has_mirror_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mirror_lev(), target);
  }

  // required int64 extra_exp = 7;
  if (has_extra_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->extra_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fetch = 1;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional .proto_ff.GodEvilStageProto stage = 2;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cd = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

    // optional int32 vessel_lev = 5;
    if (has_vessel_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vessel_lev());
    }

    // optional int32 mirror_lev = 6;
    if (has_mirror_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_lev());
    }

    // required int64 extra_exp = 7;
    if (has_extra_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extra_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilProto::MergeFrom(const GodEvilProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_stage()) {
      mutable_stage()->::proto_ff::GodEvilStageProto::MergeFrom(from.stage());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_vessel_lev()) {
      set_vessel_lev(from.vessel_lev());
    }
    if (from.has_mirror_lev()) {
      set_mirror_lev(from.mirror_lev());
    }
    if (from.has_extra_exp()) {
      set_extra_exp(from.extra_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilProto::CopyFrom(const GodEvilProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  return true;
}

void GodEvilProto::Swap(GodEvilProto* other) {
  if (other != this) {
    std::swap(fetch_, other->fetch_);
    std::swap(stage_, other->stage_);
    std::swap(type_, other->type_);
    std::swap(cd_, other->cd_);
    std::swap(vessel_lev_, other->vessel_lev_);
    std::swap(mirror_lev_, other->mirror_lev_);
    std::swap(extra_exp_, other->extra_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilProto_descriptor_;
  metadata.reflection = GodEvilProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyData::kFantasyIdFieldNumber;
const int FacadeFantasyData::kFantasyLevFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyData::FacadeFantasyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyData::InitAsDefaultInstance() {
}

FacadeFantasyData::FacadeFantasyData(const FacadeFantasyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyData::SharedCtor() {
  _cached_size_ = 0;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  fantasy_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyData::~FacadeFantasyData() {
  SharedDtor();
}

void FacadeFantasyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyData_descriptor_;
}

const FacadeFantasyData& FacadeFantasyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeFantasyData* FacadeFantasyData::default_instance_ = NULL;

FacadeFantasyData* FacadeFantasyData::New() const {
  return new FacadeFantasyData;
}

void FacadeFantasyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantasy_id_ = GOOGLE_ULONGLONG(0);
    fantasy_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_lev;
        break;
      }

      // optional uint32 fantasy_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_lev_)));
          set_has_fantasy_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_id(), output);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_id(), target);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fantasy_id = 1;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

    // optional uint32 fantasy_lev = 2;
    if (has_fantasy_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyData::MergeFrom(const FacadeFantasyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
    if (from.has_fantasy_lev()) {
      set_fantasy_lev(from.fantasy_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyData::CopyFrom(const FacadeFantasyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyData::IsInitialized() const {

  return true;
}

void FacadeFantasyData::Swap(FacadeFantasyData* other) {
  if (other != this) {
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(fantasy_lev_, other->fantasy_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyData_descriptor_;
  metadata.reflection = FacadeFantasyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFragmentData::kFragmentIdFieldNumber;
const int FacadeFragmentData::kUseTimesFieldNumber;
#endif  // !_MSC_VER

FacadeFragmentData::FacadeFragmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFragmentData::InitAsDefaultInstance() {
}

FacadeFragmentData::FacadeFragmentData(const FacadeFragmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFragmentData::SharedCtor() {
  _cached_size_ = 0;
  fragment_id_ = GOOGLE_ULONGLONG(0);
  use_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFragmentData::~FacadeFragmentData() {
  SharedDtor();
}

void FacadeFragmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFragmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFragmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFragmentData_descriptor_;
}

const FacadeFragmentData& FacadeFragmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeFragmentData* FacadeFragmentData::default_instance_ = NULL;

FacadeFragmentData* FacadeFragmentData::New() const {
  return new FacadeFragmentData;
}

void FacadeFragmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragment_id_ = GOOGLE_ULONGLONG(0);
    use_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFragmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fragment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }

      // optional uint32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFragmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fragment_id(), output);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFragmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fragment_id(), target);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFragmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fragment_id = 1;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragment_id());
    }

    // optional uint32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFragmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFragmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFragmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFragmentData::MergeFrom(const FacadeFragmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFragmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFragmentData::CopyFrom(const FacadeFragmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFragmentData::IsInitialized() const {

  return true;
}

void FacadeFragmentData::Swap(FacadeFragmentData* other) {
  if (other != this) {
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFragmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFragmentData_descriptor_;
  metadata.reflection = FacadeFragmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSkillData::kSkillIdFieldNumber;
const int FacadeSkillData::kSkillLevFieldNumber;
#endif  // !_MSC_VER

FacadeSkillData::FacadeSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSkillData::InitAsDefaultInstance() {
}

FacadeSkillData::FacadeSkillData(const FacadeSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSkillData::~FacadeSkillData() {
  SharedDtor();
}

void FacadeSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSkillData_descriptor_;
}

const FacadeSkillData& FacadeSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeSkillData* FacadeSkillData::default_instance_ = NULL;

FacadeSkillData* FacadeSkillData::New() const {
  return new FacadeSkillData;
}

void FacadeSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_lev;
        break;
      }

      // optional uint32 skill_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 skill_lev = 2;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSkillData::MergeFrom(const FacadeSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSkillData::CopyFrom(const FacadeSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSkillData::IsInitialized() const {

  return true;
}

void FacadeSkillData::Swap(FacadeSkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSkillData_descriptor_;
  metadata.reflection = FacadeSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountFantasyData::kFantasyIdFieldNumber;
const int MountFantasyData::kFantasyLevFieldNumber;
const int MountFantasyData::kFantasyLevExpFieldNumber;
const int MountFantasyData::kFantasyStarFieldNumber;
#endif  // !_MSC_VER

MountFantasyData::MountFantasyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountFantasyData::InitAsDefaultInstance() {
}

MountFantasyData::MountFantasyData(const MountFantasyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountFantasyData::SharedCtor() {
  _cached_size_ = 0;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  fantasy_lev_ = 0u;
  fantasy_lev_exp_ = GOOGLE_ULONGLONG(0);
  fantasy_star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountFantasyData::~MountFantasyData() {
  SharedDtor();
}

void MountFantasyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountFantasyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountFantasyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountFantasyData_descriptor_;
}

const MountFantasyData& MountFantasyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountFantasyData* MountFantasyData::default_instance_ = NULL;

MountFantasyData* MountFantasyData::New() const {
  return new MountFantasyData;
}

void MountFantasyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantasy_id_ = GOOGLE_ULONGLONG(0);
    fantasy_lev_ = 0u;
    fantasy_lev_exp_ = GOOGLE_ULONGLONG(0);
    fantasy_star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountFantasyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_lev;
        break;
      }

      // optional uint32 fantasy_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_lev_)));
          set_has_fantasy_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_lev_exp;
        break;
      }

      // optional uint64 fantasy_lev_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_lev_exp_)));
          set_has_fantasy_lev_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fantasy_star;
        break;
      }

      // optional uint32 fantasy_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_star_)));
          set_has_fantasy_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountFantasyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_id(), output);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_lev(), output);
  }

  // optional uint64 fantasy_lev_exp = 3;
  if (has_fantasy_lev_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fantasy_lev_exp(), output);
  }

  // optional uint32 fantasy_star = 4;
  if (has_fantasy_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fantasy_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountFantasyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_id(), target);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_lev(), target);
  }

  // optional uint64 fantasy_lev_exp = 3;
  if (has_fantasy_lev_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fantasy_lev_exp(), target);
  }

  // optional uint32 fantasy_star = 4;
  if (has_fantasy_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fantasy_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountFantasyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fantasy_id = 1;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

    // optional uint32 fantasy_lev = 2;
    if (has_fantasy_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_lev());
    }

    // optional uint64 fantasy_lev_exp = 3;
    if (has_fantasy_lev_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_lev_exp());
    }

    // optional uint32 fantasy_star = 4;
    if (has_fantasy_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountFantasyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountFantasyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountFantasyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountFantasyData::MergeFrom(const MountFantasyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
    if (from.has_fantasy_lev()) {
      set_fantasy_lev(from.fantasy_lev());
    }
    if (from.has_fantasy_lev_exp()) {
      set_fantasy_lev_exp(from.fantasy_lev_exp());
    }
    if (from.has_fantasy_star()) {
      set_fantasy_star(from.fantasy_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountFantasyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFantasyData::CopyFrom(const MountFantasyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFantasyData::IsInitialized() const {

  return true;
}

void MountFantasyData::Swap(MountFantasyData* other) {
  if (other != this) {
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(fantasy_lev_, other->fantasy_lev_);
    std::swap(fantasy_lev_exp_, other->fantasy_lev_exp_);
    std::swap(fantasy_star_, other->fantasy_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountFantasyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountFantasyData_descriptor_;
  metadata.reflection = MountFantasyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountFragmentData::kFragmentIdFieldNumber;
const int MountFragmentData::kUseTimesFieldNumber;
#endif  // !_MSC_VER

MountFragmentData::MountFragmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountFragmentData::InitAsDefaultInstance() {
}

MountFragmentData::MountFragmentData(const MountFragmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountFragmentData::SharedCtor() {
  _cached_size_ = 0;
  fragment_id_ = GOOGLE_ULONGLONG(0);
  use_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountFragmentData::~MountFragmentData() {
  SharedDtor();
}

void MountFragmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountFragmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountFragmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountFragmentData_descriptor_;
}

const MountFragmentData& MountFragmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountFragmentData* MountFragmentData::default_instance_ = NULL;

MountFragmentData* MountFragmentData::New() const {
  return new MountFragmentData;
}

void MountFragmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragment_id_ = GOOGLE_ULONGLONG(0);
    use_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountFragmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fragment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }

      // optional uint32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountFragmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fragment_id(), output);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountFragmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fragment_id(), target);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountFragmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fragment_id = 1;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragment_id());
    }

    // optional uint32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountFragmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountFragmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountFragmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountFragmentData::MergeFrom(const MountFragmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountFragmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountFragmentData::CopyFrom(const MountFragmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountFragmentData::IsInitialized() const {

  return true;
}

void MountFragmentData::Swap(MountFragmentData* other) {
  if (other != this) {
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountFragmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountFragmentData_descriptor_;
  metadata.reflection = MountFragmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountSkillData::kSkillIdFieldNumber;
const int MountSkillData::kSkillLevFieldNumber;
#endif  // !_MSC_VER

MountSkillData::MountSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountSkillData::InitAsDefaultInstance() {
}

MountSkillData::MountSkillData(const MountSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountSkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountSkillData::~MountSkillData() {
  SharedDtor();
}

void MountSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountSkillData_descriptor_;
}

const MountSkillData& MountSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountSkillData* MountSkillData::default_instance_ = NULL;

MountSkillData* MountSkillData::New() const {
  return new MountSkillData;
}

void MountSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_lev;
        break;
      }

      // optional uint32 skill_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 skill_lev = 2;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountSkillData::MergeFrom(const MountSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountSkillData::CopyFrom(const MountSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountSkillData::IsInitialized() const {

  return true;
}

void MountSkillData::Swap(MountSkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountSkillData_descriptor_;
  metadata.reflection = MountSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountKunData::kKunIdFieldNumber;
const int MountKunData::kKunLevFieldNumber;
const int MountKunData::kKunLevExpFieldNumber;
const int MountKunData::kKunStarFieldNumber;
#endif  // !_MSC_VER

MountKunData::MountKunData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountKunData::InitAsDefaultInstance() {
}

MountKunData::MountKunData(const MountKunData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountKunData::SharedCtor() {
  _cached_size_ = 0;
  kun_id_ = GOOGLE_ULONGLONG(0);
  kun_lev_ = 0u;
  kun_lev_exp_ = GOOGLE_ULONGLONG(0);
  kun_star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountKunData::~MountKunData() {
  SharedDtor();
}

void MountKunData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountKunData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountKunData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountKunData_descriptor_;
}

const MountKunData& MountKunData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountKunData* MountKunData::default_instance_ = NULL;

MountKunData* MountKunData::New() const {
  return new MountKunData;
}

void MountKunData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kun_id_ = GOOGLE_ULONGLONG(0);
    kun_lev_ = 0u;
    kun_lev_exp_ = GOOGLE_ULONGLONG(0);
    kun_star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountKunData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 kun_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kun_id_)));
          set_has_kun_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kun_lev;
        break;
      }

      // optional uint32 kun_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kun_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kun_lev_)));
          set_has_kun_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_kun_lev_exp;
        break;
      }

      // optional uint64 kun_lev_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kun_lev_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kun_lev_exp_)));
          set_has_kun_lev_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kun_star;
        break;
      }

      // optional uint32 kun_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kun_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kun_star_)));
          set_has_kun_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountKunData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 kun_id = 1;
  if (has_kun_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->kun_id(), output);
  }

  // optional uint32 kun_lev = 2;
  if (has_kun_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kun_lev(), output);
  }

  // optional uint64 kun_lev_exp = 3;
  if (has_kun_lev_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->kun_lev_exp(), output);
  }

  // optional uint32 kun_star = 4;
  if (has_kun_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kun_star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountKunData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 kun_id = 1;
  if (has_kun_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->kun_id(), target);
  }

  // optional uint32 kun_lev = 2;
  if (has_kun_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kun_lev(), target);
  }

  // optional uint64 kun_lev_exp = 3;
  if (has_kun_lev_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->kun_lev_exp(), target);
  }

  // optional uint32 kun_star = 4;
  if (has_kun_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kun_star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountKunData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 kun_id = 1;
    if (has_kun_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kun_id());
    }

    // optional uint32 kun_lev = 2;
    if (has_kun_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kun_lev());
    }

    // optional uint64 kun_lev_exp = 3;
    if (has_kun_lev_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kun_lev_exp());
    }

    // optional uint32 kun_star = 4;
    if (has_kun_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kun_star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountKunData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountKunData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountKunData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountKunData::MergeFrom(const MountKunData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kun_id()) {
      set_kun_id(from.kun_id());
    }
    if (from.has_kun_lev()) {
      set_kun_lev(from.kun_lev());
    }
    if (from.has_kun_lev_exp()) {
      set_kun_lev_exp(from.kun_lev_exp());
    }
    if (from.has_kun_star()) {
      set_kun_star(from.kun_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountKunData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountKunData::CopyFrom(const MountKunData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountKunData::IsInitialized() const {

  return true;
}

void MountKunData::Swap(MountKunData* other) {
  if (other != this) {
    std::swap(kun_id_, other->kun_id_);
    std::swap(kun_lev_, other->kun_lev_);
    std::swap(kun_lev_exp_, other->kun_lev_exp_);
    std::swap(kun_star_, other->kun_star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountKunData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountKunData_descriptor_;
  metadata.reflection = MountKunData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountBloodData::kBloodIdFieldNumber;
const int MountBloodData::kBloodStateFieldNumber;
#endif  // !_MSC_VER

MountBloodData::MountBloodData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountBloodData::InitAsDefaultInstance() {
}

MountBloodData::MountBloodData(const MountBloodData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountBloodData::SharedCtor() {
  _cached_size_ = 0;
  blood_id_ = GOOGLE_ULONGLONG(0);
  blood_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountBloodData::~MountBloodData() {
  SharedDtor();
}

void MountBloodData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountBloodData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountBloodData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountBloodData_descriptor_;
}

const MountBloodData& MountBloodData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountBloodData* MountBloodData::default_instance_ = NULL;

MountBloodData* MountBloodData::New() const {
  return new MountBloodData;
}

void MountBloodData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blood_id_ = GOOGLE_ULONGLONG(0);
    blood_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountBloodData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 blood_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &blood_id_)));
          set_has_blood_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blood_state;
        break;
      }

      // optional uint32 blood_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blood_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blood_state_)));
          set_has_blood_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountBloodData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 blood_id = 1;
  if (has_blood_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->blood_id(), output);
  }

  // optional uint32 blood_state = 2;
  if (has_blood_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blood_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountBloodData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 blood_id = 1;
  if (has_blood_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->blood_id(), target);
  }

  // optional uint32 blood_state = 2;
  if (has_blood_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->blood_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountBloodData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 blood_id = 1;
    if (has_blood_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->blood_id());
    }

    // optional uint32 blood_state = 2;
    if (has_blood_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blood_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountBloodData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountBloodData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountBloodData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountBloodData::MergeFrom(const MountBloodData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blood_id()) {
      set_blood_id(from.blood_id());
    }
    if (from.has_blood_state()) {
      set_blood_state(from.blood_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountBloodData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountBloodData::CopyFrom(const MountBloodData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountBloodData::IsInitialized() const {

  return true;
}

void MountBloodData::Swap(MountBloodData* other) {
  if (other != this) {
    std::swap(blood_id_, other->blood_id_);
    std::swap(blood_state_, other->blood_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountBloodData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountBloodData_descriptor_;
  metadata.reflection = MountBloodData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountBabySlotData::kSlotFieldNumber;
const int MountBabySlotData::kCurStateFieldNumber;
const int MountBabySlotData::kCurBabyEggidFieldNumber;
const int MountBabySlotData::kCurBabyCreateTimeFieldNumber;
#endif  // !_MSC_VER

MountBabySlotData::MountBabySlotData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountBabySlotData::InitAsDefaultInstance() {
}

MountBabySlotData::MountBabySlotData(const MountBabySlotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountBabySlotData::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  cur_state_ = 0u;
  cur_baby_eggid_ = GOOGLE_LONGLONG(0);
  cur_baby_create_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountBabySlotData::~MountBabySlotData() {
  SharedDtor();
}

void MountBabySlotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountBabySlotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountBabySlotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountBabySlotData_descriptor_;
}

const MountBabySlotData& MountBabySlotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MountBabySlotData* MountBabySlotData::default_instance_ = NULL;

MountBabySlotData* MountBabySlotData::New() const {
  return new MountBabySlotData;
}

void MountBabySlotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
    cur_state_ = 0u;
    cur_baby_eggid_ = GOOGLE_LONGLONG(0);
    cur_baby_create_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountBabySlotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_state;
        break;
      }

      // optional uint32 cur_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_baby_eggid;
        break;
      }

      // optional int64 cur_baby_eggid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_baby_eggid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_baby_eggid_)));
          set_has_cur_baby_eggid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_baby_create_time;
        break;
      }

      // optional int64 cur_baby_create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_baby_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_baby_create_time_)));
          set_has_cur_baby_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountBabySlotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_state(), output);
  }

  // optional int64 cur_baby_eggid = 3;
  if (has_cur_baby_eggid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_baby_eggid(), output);
  }

  // optional int64 cur_baby_create_time = 4;
  if (has_cur_baby_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cur_baby_create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountBabySlotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_state(), target);
  }

  // optional int64 cur_baby_eggid = 3;
  if (has_cur_baby_eggid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_baby_eggid(), target);
  }

  // optional int64 cur_baby_create_time = 4;
  if (has_cur_baby_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cur_baby_create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountBabySlotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

    // optional uint32 cur_state = 2;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_state());
    }

    // optional int64 cur_baby_eggid = 3;
    if (has_cur_baby_eggid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_baby_eggid());
    }

    // optional int64 cur_baby_create_time = 4;
    if (has_cur_baby_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_baby_create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountBabySlotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountBabySlotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountBabySlotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountBabySlotData::MergeFrom(const MountBabySlotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_cur_baby_eggid()) {
      set_cur_baby_eggid(from.cur_baby_eggid());
    }
    if (from.has_cur_baby_create_time()) {
      set_cur_baby_create_time(from.cur_baby_create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountBabySlotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountBabySlotData::CopyFrom(const MountBabySlotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountBabySlotData::IsInitialized() const {

  return true;
}

void MountBabySlotData::Swap(MountBabySlotData* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(cur_baby_eggid_, other->cur_baby_eggid_);
    std::swap(cur_baby_create_time_, other->cur_baby_create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountBabySlotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountBabySlotData_descriptor_;
  metadata.reflection = MountBabySlotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticDataProto::kLevelFieldNumber;
const int StatisticDataProto::kTotalLoginDayFieldNumber;
const int StatisticDataProto::kTotalRmbFieldNumber;
const int StatisticDataProto::kTodayRmbFieldNumber;
const int StatisticDataProto::kTotalActivityCountFieldNumber;
#endif  // !_MSC_VER

StatisticDataProto::StatisticDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticDataProto::InitAsDefaultInstance() {
}

StatisticDataProto::StatisticDataProto(const StatisticDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticDataProto::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  total_login_day_ = 0u;
  total_rmb_ = 0u;
  today_rmb_ = 0u;
  total_activitycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticDataProto::~StatisticDataProto() {
  SharedDtor();
}

void StatisticDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticDataProto_descriptor_;
}

const StatisticDataProto& StatisticDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

StatisticDataProto* StatisticDataProto::default_instance_ = NULL;

StatisticDataProto* StatisticDataProto::New() const {
  return new StatisticDataProto;
}

void StatisticDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    total_login_day_ = 0u;
    total_rmb_ = 0u;
    today_rmb_ = 0u;
    total_activitycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_login_day;
        break;
      }

      // optional uint32 total_login_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_login_day_)));
          set_has_total_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_rmb;
        break;
      }

      // optional uint32 total_rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_rmb_)));
          set_has_total_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_rmb;
        break;
      }

      // optional uint32 today_rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_rmb_)));
          set_has_today_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_activityCount;
        break;
      }

      // optional uint32 total_activityCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_activityCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_activitycount_)));
          set_has_total_activitycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional uint32 total_login_day = 2;
  if (has_total_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_login_day(), output);
  }

  // optional uint32 total_rmb = 3;
  if (has_total_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_rmb(), output);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_rmb(), output);
  }

  // optional uint32 total_activityCount = 5;
  if (has_total_activitycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_activitycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional uint32 total_login_day = 2;
  if (has_total_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_login_day(), target);
  }

  // optional uint32 total_rmb = 3;
  if (has_total_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_rmb(), target);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_rmb(), target);
  }

  // optional uint32 total_activityCount = 5;
  if (has_total_activitycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_activitycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 total_login_day = 2;
    if (has_total_login_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_login_day());
    }

    // optional uint32 total_rmb = 3;
    if (has_total_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_rmb());
    }

    // optional uint32 today_rmb = 4;
    if (has_today_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_rmb());
    }

    // optional uint32 total_activityCount = 5;
    if (has_total_activitycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_activitycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticDataProto::MergeFrom(const StatisticDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total_login_day()) {
      set_total_login_day(from.total_login_day());
    }
    if (from.has_total_rmb()) {
      set_total_rmb(from.total_rmb());
    }
    if (from.has_today_rmb()) {
      set_today_rmb(from.today_rmb());
    }
    if (from.has_total_activitycount()) {
      set_total_activitycount(from.total_activitycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticDataProto::CopyFrom(const StatisticDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticDataProto::IsInitialized() const {

  return true;
}

void StatisticDataProto::Swap(StatisticDataProto* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(total_login_day_, other->total_login_day_);
    std::swap(total_rmb_, other->total_rmb_);
    std::swap(today_rmb_, other->today_rmb_);
    std::swap(total_activitycount_, other->total_activitycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticDataProto_descriptor_;
  metadata.reflection = StatisticDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsTaskEntry::kTaskCfgIdFieldNumber;
const int GodRelicsTaskEntry::kCurNumFieldNumber;
const int GodRelicsTaskEntry::kTaskStateFieldNumber;
#endif  // !_MSC_VER

GodRelicsTaskEntry::GodRelicsTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsTaskEntry::InitAsDefaultInstance() {
}

GodRelicsTaskEntry::GodRelicsTaskEntry(const GodRelicsTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsTaskEntry::~GodRelicsTaskEntry() {
  SharedDtor();
}

void GodRelicsTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsTaskEntry_descriptor_;
}

const GodRelicsTaskEntry& GodRelicsTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodRelicsTaskEntry* GodRelicsTaskEntry::default_instance_ = NULL;

GodRelicsTaskEntry* GodRelicsTaskEntry::New() const {
  return new GodRelicsTaskEntry;
}

void GodRelicsTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsTaskEntry::MergeFrom(const GodRelicsTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsTaskEntry::CopyFrom(const GodRelicsTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsTaskEntry::IsInitialized() const {

  return true;
}

void GodRelicsTaskEntry::Swap(GodRelicsTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsTaskEntry_descriptor_;
  metadata.reflection = GodRelicsTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsTaskGroupEntry::kGroupCfgIdFieldNumber;
const int GodRelicsTaskGroupEntry::kEntrysFieldNumber;
const int GodRelicsTaskGroupEntry::kNormalRewardStateFieldNumber;
const int GodRelicsTaskGroupEntry::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

GodRelicsTaskGroupEntry::GodRelicsTaskGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsTaskGroupEntry::InitAsDefaultInstance() {
}

GodRelicsTaskGroupEntry::GodRelicsTaskGroupEntry(const GodRelicsTaskGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsTaskGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  normal_reward_state_ = 0;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsTaskGroupEntry::~GodRelicsTaskGroupEntry() {
  SharedDtor();
}

void GodRelicsTaskGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsTaskGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsTaskGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsTaskGroupEntry_descriptor_;
}

const GodRelicsTaskGroupEntry& GodRelicsTaskGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodRelicsTaskGroupEntry* GodRelicsTaskGroupEntry::default_instance_ = NULL;

GodRelicsTaskGroupEntry* GodRelicsTaskGroupEntry::New() const {
  return new GodRelicsTaskGroupEntry;
}

void GodRelicsTaskGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    normal_reward_state_ = 0;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsTaskGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_normal_reward_state;
        break;
      }

      // optional int32 normal_reward_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_reward_state_)));
          set_has_normal_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsTaskGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->normal_reward_state(), output);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsTaskGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->normal_reward_state(), target);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsTaskGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 normal_reward_state = 3;
    if (has_normal_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_reward_state());
    }

    // optional uint64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsTaskGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsTaskGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsTaskGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsTaskGroupEntry::MergeFrom(const GodRelicsTaskGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_normal_reward_state()) {
      set_normal_reward_state(from.normal_reward_state());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsTaskGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsTaskGroupEntry::CopyFrom(const GodRelicsTaskGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsTaskGroupEntry::IsInitialized() const {

  return true;
}

void GodRelicsTaskGroupEntry::Swap(GodRelicsTaskGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    entrys_.Swap(&other->entrys_);
    std::swap(normal_reward_state_, other->normal_reward_state_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsTaskGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsTaskGroupEntry_descriptor_;
  metadata.reflection = GodRelicsTaskGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskEntry::kTaskCfgIdFieldNumber;
const int DailyTaskEntry::kCurNumFieldNumber;
const int DailyTaskEntry::kTaskStateFieldNumber;
const int DailyTaskEntry::kLastTimeFieldNumber;
const int DailyTaskEntry::kBuyNumFieldNumber;
#endif  // !_MSC_VER

DailyTaskEntry::DailyTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskEntry::InitAsDefaultInstance() {
}

DailyTaskEntry::DailyTaskEntry(const DailyTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskEntry::~DailyTaskEntry() {
  SharedDtor();
}

void DailyTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskEntry_descriptor_;
}

const DailyTaskEntry& DailyTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskEntry* DailyTaskEntry::default_instance_ = NULL;

DailyTaskEntry* DailyTaskEntry::New() const {
  return new DailyTaskEntry;
}

void DailyTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskEntry::MergeFrom(const DailyTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskEntry::CopyFrom(const DailyTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskEntry::IsInitialized() const {

  return true;
}

void DailyTaskEntry::Swap(DailyTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(last_time_, other->last_time_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskEntry_descriptor_;
  metadata.reflection = DailyTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskLimitEntry::kTaskCfgIdFieldNumber;
const int DailyTaskLimitEntry::kCurNumFieldNumber;
const int DailyTaskLimitEntry::kTaskStateFieldNumber;
const int DailyTaskLimitEntry::kLastTimeFieldNumber;
const int DailyTaskLimitEntry::kBuyNumFieldNumber;
const int DailyTaskLimitEntry::kReadyAddFieldNumber;
const int DailyTaskLimitEntry::kIsOpenFieldNumber;
#endif  // !_MSC_VER

DailyTaskLimitEntry::DailyTaskLimitEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskLimitEntry::InitAsDefaultInstance() {
}

DailyTaskLimitEntry::DailyTaskLimitEntry(const DailyTaskLimitEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskLimitEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  ready_add_ = false;
  is_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskLimitEntry::~DailyTaskLimitEntry() {
  SharedDtor();
}

void DailyTaskLimitEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskLimitEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskLimitEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskLimitEntry_descriptor_;
}

const DailyTaskLimitEntry& DailyTaskLimitEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskLimitEntry* DailyTaskLimitEntry::default_instance_ = NULL;

DailyTaskLimitEntry* DailyTaskLimitEntry::New() const {
  return new DailyTaskLimitEntry;
}

void DailyTaskLimitEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
    ready_add_ = false;
    is_open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskLimitEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ready_add;
        break;
      }

      // optional bool ready_add = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_add_)));
          set_has_ready_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskLimitEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  // optional bool ready_add = 6;
  if (has_ready_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ready_add(), output);
  }

  // optional bool is_open = 7;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskLimitEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  // optional bool ready_add = 6;
  if (has_ready_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ready_add(), target);
  }

  // optional bool is_open = 7;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskLimitEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional bool ready_add = 6;
    if (has_ready_add()) {
      total_size += 1 + 1;
    }

    // optional bool is_open = 7;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskLimitEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskLimitEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskLimitEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskLimitEntry::MergeFrom(const DailyTaskLimitEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_ready_add()) {
      set_ready_add(from.ready_add());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskLimitEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskLimitEntry::CopyFrom(const DailyTaskLimitEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskLimitEntry::IsInitialized() const {

  return true;
}

void DailyTaskLimitEntry::Swap(DailyTaskLimitEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(last_time_, other->last_time_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(ready_add_, other->ready_add_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskLimitEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskLimitEntry_descriptor_;
  metadata.reflection = DailyTaskLimitEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskBackDayEntry::kLeftNumFieldNumber;
const int DailyTaskBackDayEntry::kExternalLeftNumFieldNumber;
const int DailyTaskBackDayEntry::kLastTimeFieldNumber;
#endif  // !_MSC_VER

DailyTaskBackDayEntry::DailyTaskBackDayEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskBackDayEntry::InitAsDefaultInstance() {
}

DailyTaskBackDayEntry::DailyTaskBackDayEntry(const DailyTaskBackDayEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskBackDayEntry::SharedCtor() {
  _cached_size_ = 0;
  left_num_ = 0;
  external_left_num_ = 0;
  last_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskBackDayEntry::~DailyTaskBackDayEntry() {
  SharedDtor();
}

void DailyTaskBackDayEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskBackDayEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskBackDayEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskBackDayEntry_descriptor_;
}

const DailyTaskBackDayEntry& DailyTaskBackDayEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskBackDayEntry* DailyTaskBackDayEntry::default_instance_ = NULL;

DailyTaskBackDayEntry* DailyTaskBackDayEntry::New() const {
  return new DailyTaskBackDayEntry;
}

void DailyTaskBackDayEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_num_ = 0;
    external_left_num_ = 0;
    last_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskBackDayEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_external_left_num;
        break;
      }

      // optional int32 external_left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_left_num_)));
          set_has_external_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional int64 last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskBackDayEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 left_num = 1;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_num(), output);
  }

  // optional int32 external_left_num = 2;
  if (has_external_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->external_left_num(), output);
  }

  // optional int64 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskBackDayEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 left_num = 1;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left_num(), target);
  }

  // optional int32 external_left_num = 2;
  if (has_external_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->external_left_num(), target);
  }

  // optional int64 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskBackDayEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left_num = 1;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 external_left_num = 2;
    if (has_external_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_left_num());
    }

    // optional int64 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskBackDayEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskBackDayEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskBackDayEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskBackDayEntry::MergeFrom(const DailyTaskBackDayEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_external_left_num()) {
      set_external_left_num(from.external_left_num());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskBackDayEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskBackDayEntry::CopyFrom(const DailyTaskBackDayEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskBackDayEntry::IsInitialized() const {

  return true;
}

void DailyTaskBackDayEntry::Swap(DailyTaskBackDayEntry* other) {
  if (other != this) {
    std::swap(left_num_, other->left_num_);
    std::swap(external_left_num_, other->external_left_num_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskBackDayEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskBackDayEntry_descriptor_;
  metadata.reflection = DailyTaskBackDayEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskBackEntry::kTaskCfgIdFieldNumber;
const int DailyTaskBackEntry::kTaskStateFieldNumber;
const int DailyTaskBackEntry::kDayDataFieldNumber;
const int DailyTaskBackEntry::kLeftNumFieldNumber;
const int DailyTaskBackEntry::kExternalLeftNumFieldNumber;
#endif  // !_MSC_VER

DailyTaskBackEntry::DailyTaskBackEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskBackEntry::InitAsDefaultInstance() {
}

DailyTaskBackEntry::DailyTaskBackEntry(const DailyTaskBackEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskBackEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  task_state_ = 0;
  left_num_ = 0;
  external_left_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskBackEntry::~DailyTaskBackEntry() {
  SharedDtor();
}

void DailyTaskBackEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskBackEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskBackEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskBackEntry_descriptor_;
}

const DailyTaskBackEntry& DailyTaskBackEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskBackEntry* DailyTaskBackEntry::default_instance_ = NULL;

DailyTaskBackEntry* DailyTaskBackEntry::New() const {
  return new DailyTaskBackEntry;
}

void DailyTaskBackEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    task_state_ = 0;
    left_num_ = 0;
    external_left_num_ = 0;
  }
  day_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskBackEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_day_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_day_data;
        if (input->ExpectTag(40)) goto parse_left_num;
        break;
      }

      // optional int32 left_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_external_left_num;
        break;
      }

      // optional int32 external_left_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_left_num_)));
          set_has_external_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskBackEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  for (int i = 0; i < this->day_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->day_data(i), output);
  }

  // optional int32 left_num = 5;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_num(), output);
  }

  // optional int32 external_left_num = 6;
  if (has_external_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->external_left_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskBackEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  for (int i = 0; i < this->day_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->day_data(i), target);
  }

  // optional int32 left_num = 5;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_num(), target);
  }

  // optional int32 external_left_num = 6;
  if (has_external_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->external_left_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskBackEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional int32 left_num = 5;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 external_left_num = 6;
    if (has_external_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_left_num());
    }

  }
  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  total_size += 1 * this->day_data_size();
  for (int i = 0; i < this->day_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskBackEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskBackEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskBackEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskBackEntry::MergeFrom(const DailyTaskBackEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_data_.MergeFrom(from.day_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_external_left_num()) {
      set_external_left_num(from.external_left_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskBackEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskBackEntry::CopyFrom(const DailyTaskBackEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskBackEntry::IsInitialized() const {

  return true;
}

void DailyTaskBackEntry::Swap(DailyTaskBackEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(task_state_, other->task_state_);
    day_data_.Swap(&other->day_data_);
    std::swap(left_num_, other->left_num_);
    std::swap(external_left_num_, other->external_left_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskBackEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskBackEntry_descriptor_;
  metadata.reflection = DailyTaskBackEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskRewardEntry::kRewardIdFieldNumber;
const int DailyTaskRewardEntry::kStateFieldNumber;
#endif  // !_MSC_VER

DailyTaskRewardEntry::DailyTaskRewardEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskRewardEntry::InitAsDefaultInstance() {
}

DailyTaskRewardEntry::DailyTaskRewardEntry(const DailyTaskRewardEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskRewardEntry::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskRewardEntry::~DailyTaskRewardEntry() {
  SharedDtor();
}

void DailyTaskRewardEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskRewardEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskRewardEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskRewardEntry_descriptor_;
}

const DailyTaskRewardEntry& DailyTaskRewardEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskRewardEntry* DailyTaskRewardEntry::default_instance_ = NULL;

DailyTaskRewardEntry* DailyTaskRewardEntry::New() const {
  return new DailyTaskRewardEntry;
}

void DailyTaskRewardEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskRewardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskRewardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reward_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskRewardEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reward_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskRewardEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskRewardEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskRewardEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskRewardEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskRewardEntry::MergeFrom(const DailyTaskRewardEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskRewardEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskRewardEntry::CopyFrom(const DailyTaskRewardEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskRewardEntry::IsInitialized() const {

  return true;
}

void DailyTaskRewardEntry::Swap(DailyTaskRewardEntry* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskRewardEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskRewardEntry_descriptor_;
  metadata.reflection = DailyTaskRewardEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskAllData::kTaskDataFieldNumber;
const int DailyTaskAllData::kTaskLimitDataFieldNumber;
const int DailyTaskAllData::kBackDataFieldNumber;
const int DailyTaskAllData::kRewardDataFieldNumber;
const int DailyTaskAllData::kDailyScoreFieldNumber;
const int DailyTaskAllData::kDailyLevelFieldNumber;
const int DailyTaskAllData::kCreateTimeFieldNumber;
const int DailyTaskAllData::kDailyExpFieldNumber;
#endif  // !_MSC_VER

DailyTaskAllData::DailyTaskAllData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskAllData::InitAsDefaultInstance() {
}

DailyTaskAllData::DailyTaskAllData(const DailyTaskAllData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskAllData::SharedCtor() {
  _cached_size_ = 0;
  daily_score_ = 0u;
  daily_level_ = 0u;
  create_time_ = GOOGLE_ULONGLONG(0);
  daily_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskAllData::~DailyTaskAllData() {
  SharedDtor();
}

void DailyTaskAllData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskAllData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskAllData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskAllData_descriptor_;
}

const DailyTaskAllData& DailyTaskAllData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskAllData* DailyTaskAllData::default_instance_ = NULL;

DailyTaskAllData* DailyTaskAllData::New() const {
  return new DailyTaskAllData;
}

void DailyTaskAllData::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    daily_score_ = 0u;
    daily_level_ = 0u;
    create_time_ = GOOGLE_ULONGLONG(0);
    daily_exp_ = GOOGLE_ULONGLONG(0);
  }
  task_data_.Clear();
  task_limit_data_.Clear();
  back_data_.Clear();
  reward_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskAllData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyTaskEntry task_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_data;
        if (input->ExpectTag(18)) goto parse_task_limit_data;
        break;
      }

      // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_limit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_limit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_limit_data;
        if (input->ExpectTag(26)) goto parse_back_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_back_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_back_data;
        if (input->ExpectTag(34)) goto parse_reward_data;
        break;
      }

      // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward_data;
        if (input->ExpectTag(40)) goto parse_daily_score;
        break;
      }

      // optional uint32 daily_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_score_)));
          set_has_daily_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_level;
        break;
      }

      // optional uint32 daily_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_level_)));
          set_has_daily_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_daily_exp;
        break;
      }

      // optional uint64 daily_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_exp_)));
          set_has_daily_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskAllData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  for (int i = 0; i < this->task_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_data(i), output);
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_limit_data(i), output);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  for (int i = 0; i < this->back_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->back_data(i), output);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  for (int i = 0; i < this->reward_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward_data(i), output);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_score(), output);
  }

  // optional uint32 daily_level = 6;
  if (has_daily_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->daily_level(), output);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->create_time(), output);
  }

  // optional uint64 daily_exp = 8;
  if (has_daily_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->daily_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskAllData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  for (int i = 0; i < this->task_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_data(i), target);
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_limit_data(i), target);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  for (int i = 0; i < this->back_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->back_data(i), target);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  for (int i = 0; i < this->reward_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward_data(i), target);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_score(), target);
  }

  // optional uint32 daily_level = 6;
  if (has_daily_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->daily_level(), target);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->create_time(), target);
  }

  // optional uint64 daily_exp = 8;
  if (has_daily_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->daily_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskAllData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 daily_score = 5;
    if (has_daily_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_score());
    }

    // optional uint32 daily_level = 6;
    if (has_daily_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_level());
    }

    // optional uint64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint64 daily_exp = 8;
    if (has_daily_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_exp());
    }

  }
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  total_size += 1 * this->task_data_size();
  for (int i = 0; i < this->task_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_data(i));
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  total_size += 1 * this->task_limit_data_size();
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_limit_data(i));
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  total_size += 1 * this->back_data_size();
  for (int i = 0; i < this->back_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->back_data(i));
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  total_size += 1 * this->reward_data_size();
  for (int i = 0; i < this->reward_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskAllData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskAllData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskAllData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskAllData::MergeFrom(const DailyTaskAllData& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_data_.MergeFrom(from.task_data_);
  task_limit_data_.MergeFrom(from.task_limit_data_);
  back_data_.MergeFrom(from.back_data_);
  reward_data_.MergeFrom(from.reward_data_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_daily_score()) {
      set_daily_score(from.daily_score());
    }
    if (from.has_daily_level()) {
      set_daily_level(from.daily_level());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_daily_exp()) {
      set_daily_exp(from.daily_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskAllData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskAllData::CopyFrom(const DailyTaskAllData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskAllData::IsInitialized() const {

  return true;
}

void DailyTaskAllData::Swap(DailyTaskAllData* other) {
  if (other != this) {
    task_data_.Swap(&other->task_data_);
    task_limit_data_.Swap(&other->task_limit_data_);
    back_data_.Swap(&other->back_data_);
    reward_data_.Swap(&other->reward_data_);
    std::swap(daily_score_, other->daily_score_);
    std::swap(daily_level_, other->daily_level_);
    std::swap(create_time_, other->create_time_);
    std::swap(daily_exp_, other->daily_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskAllData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskAllData_descriptor_;
  metadata.reflection = DailyTaskAllData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBRecentSubmitMission::kMissionTypeFieldNumber;
const int CharacterDBRecentSubmitMission::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBRecentSubmitMission::InitAsDefaultInstance() {
}

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission(const CharacterDBRecentSubmitMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  mission_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBRecentSubmitMission::~CharacterDBRecentSubmitMission() {
  SharedDtor();
}

void CharacterDBRecentSubmitMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBRecentSubmitMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBRecentSubmitMission_descriptor_;
}

const CharacterDBRecentSubmitMission& CharacterDBRecentSubmitMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::default_instance_ = NULL;

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::New() const {
  return new CharacterDBRecentSubmitMission;
}

void CharacterDBRecentSubmitMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    mission_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBRecentSubmitMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // optional uint64 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBRecentSubmitMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBRecentSubmitMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBRecentSubmitMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mission_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBRecentSubmitMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBRecentSubmitMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBRecentSubmitMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBRecentSubmitMission::MergeFrom(const CharacterDBRecentSubmitMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBRecentSubmitMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::CopyFrom(const CharacterDBRecentSubmitMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBRecentSubmitMission::IsInitialized() const {

  return true;
}

void CharacterDBRecentSubmitMission::Swap(CharacterDBRecentSubmitMission* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBRecentSubmitMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBRecentSubmitMission_descriptor_;
  metadata.reflection = CharacterDBRecentSubmitMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionItemInfo::kTypeFieldNumber;
const int CharacterDBMissionItemInfo::kIdFieldNumber;
const int CharacterDBMissionItemInfo::kCurrentValueFieldNumber;
const int CharacterDBMissionItemInfo::kFinalValueFieldNumber;
const int CharacterDBMissionItemInfo::kCompletedFlagFieldNumber;
const int CharacterDBMissionItemInfo::kParma1FieldNumber;
const int CharacterDBMissionItemInfo::kParma2FieldNumber;
const int CharacterDBMissionItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionItemInfo::InitAsDefaultInstance() {
}

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo(const CharacterDBMissionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  currentvalue_ = 0u;
  finalvalue_ = 0u;
  completedflag_ = false;
  parma1_ = GOOGLE_ULONGLONG(0);
  parma2_ = GOOGLE_ULONGLONG(0);
  parma3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionItemInfo::~CharacterDBMissionItemInfo() {
  SharedDtor();
}

void CharacterDBMissionItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionItemInfo_descriptor_;
}

const CharacterDBMissionItemInfo& CharacterDBMissionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::default_instance_ = NULL;

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::New() const {
  return new CharacterDBMissionItemInfo;
}

void CharacterDBMissionItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    currentvalue_ = 0u;
    finalvalue_ = 0u;
    completedflag_ = false;
    parma1_ = GOOGLE_ULONGLONG(0);
    parma2_ = GOOGLE_ULONGLONG(0);
    parma3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentValue;
        break;
      }

      // optional uint32 currentValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finalValue;
        break;
      }

      // optional uint32 finalValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalvalue_)));
          set_has_finalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_completedFlag;
        break;
      }

      // optional bool completedFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completedflag_)));
          set_has_completedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma1;
        break;
      }

      // optional uint64 parma1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma2;
        break;
      }

      // optional uint64 parma2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_parma3;
        break;
      }

      // optional uint64 parma3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentvalue(), output);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finalvalue(), output);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->completedflag(), output);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->parma1(), output);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->parma2(), output);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentvalue(), target);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finalvalue(), target);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->completedflag(), target);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->parma1(), target);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->parma2(), target);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 currentValue = 3;
    if (has_currentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentvalue());
    }

    // optional uint32 finalValue = 4;
    if (has_finalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalvalue());
    }

    // optional bool completedFlag = 5;
    if (has_completedflag()) {
      total_size += 1 + 1;
    }

    // optional uint64 parma1 = 6;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma1());
    }

    // optional uint64 parma2 = 7;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma2());
    }

    // optional uint64 parma3 = 8;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionItemInfo::MergeFrom(const CharacterDBMissionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentvalue()) {
      set_currentvalue(from.currentvalue());
    }
    if (from.has_finalvalue()) {
      set_finalvalue(from.finalvalue());
    }
    if (from.has_completedflag()) {
      set_completedflag(from.completedflag());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::CopyFrom(const CharacterDBMissionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionItemInfo::IsInitialized() const {

  return true;
}

void CharacterDBMissionItemInfo::Swap(CharacterDBMissionItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(currentvalue_, other->currentvalue_);
    std::swap(finalvalue_, other->finalvalue_);
    std::swap(completedflag_, other->completedflag_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionItemInfo_descriptor_;
  metadata.reflection = CharacterDBMissionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionTrack::kMissionIdFieldNumber;
const int CharacterDBMissionTrack::kDynamicidFieldNumber;
const int CharacterDBMissionTrack::kStatusFieldNumber;
const int CharacterDBMissionTrack::kAcceptMissionTimeFieldNumber;
const int CharacterDBMissionTrack::kItemInfoFieldNumber;
const int CharacterDBMissionTrack::kTextidFieldNumber;
const int CharacterDBMissionTrack::kMissionTypeFieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionTrack::CharacterDBMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionTrack::InitAsDefaultInstance() {
}

CharacterDBMissionTrack::CharacterDBMissionTrack(const CharacterDBMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = GOOGLE_ULONGLONG(0);
  dynamicid_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  acceptmissiontime_ = GOOGLE_ULONGLONG(0);
  textid_ = GOOGLE_ULONGLONG(0);
  missiontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionTrack::~CharacterDBMissionTrack() {
  SharedDtor();
}

void CharacterDBMissionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionTrack_descriptor_;
}

const CharacterDBMissionTrack& CharacterDBMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBMissionTrack* CharacterDBMissionTrack::default_instance_ = NULL;

CharacterDBMissionTrack* CharacterDBMissionTrack::New() const {
  return new CharacterDBMissionTrack;
}

void CharacterDBMissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = GOOGLE_ULONGLONG(0);
    dynamicid_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    acceptmissiontime_ = GOOGLE_ULONGLONG(0);
    textid_ = GOOGLE_ULONGLONG(0);
    missiontype_ = 0u;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptMissionTime;
        break;
      }

      // optional uint64 acceptMissionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptMissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptmissiontime_)));
          set_has_acceptmissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        break;
      }

      // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        if (input->ExpectTag(48)) goto parse_textid;
        break;
      }

      // optional uint64 textid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_missionType;
        break;
      }

      // optional uint32 missionType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->missionid(), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->acceptmissiontime(), output);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->iteminfo(i), output);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->textid(), output);
  }

  // optional uint32 missionType = 7;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->missiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->missionid(), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->acceptmissiontime(), target);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->iteminfo(i), target);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->textid(), target);
  }

  // optional uint32 missionType = 7;
  if (has_missiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->missiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missionid());
    }

    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 acceptMissionTime = 4;
    if (has_acceptmissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acceptmissiontime());
    }

    // optional uint64 textid = 6;
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->textid());
    }

    // optional uint32 missionType = 7;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontype());
    }

  }
  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionTrack::MergeFrom(const CharacterDBMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_acceptmissiontime()) {
      set_acceptmissiontime(from.acceptmissiontime());
    }
    if (from.has_textid()) {
      set_textid(from.textid());
    }
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionTrack::CopyFrom(const CharacterDBMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionTrack::IsInitialized() const {

  return true;
}

void CharacterDBMissionTrack::Swap(CharacterDBMissionTrack* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(status_, other->status_);
    std::swap(acceptmissiontime_, other->acceptmissiontime_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(textid_, other->textid_);
    std::swap(missiontype_, other->missiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionTrack_descriptor_;
  metadata.reflection = CharacterDBMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDyMissionBountyParam::kTenStateFieldNumber;
const int CharacterDBDyMissionBountyParam::kTwentyStateFieldNumber;
#endif  // !_MSC_VER

CharacterDBDyMissionBountyParam::CharacterDBDyMissionBountyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDyMissionBountyParam::InitAsDefaultInstance() {
}

CharacterDBDyMissionBountyParam::CharacterDBDyMissionBountyParam(const CharacterDBDyMissionBountyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDyMissionBountyParam::SharedCtor() {
  _cached_size_ = 0;
  ten_state_ = 0u;
  twenty_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDyMissionBountyParam::~CharacterDBDyMissionBountyParam() {
  SharedDtor();
}

void CharacterDBDyMissionBountyParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDyMissionBountyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDyMissionBountyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDyMissionBountyParam_descriptor_;
}

const CharacterDBDyMissionBountyParam& CharacterDBDyMissionBountyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBDyMissionBountyParam* CharacterDBDyMissionBountyParam::default_instance_ = NULL;

CharacterDBDyMissionBountyParam* CharacterDBDyMissionBountyParam::New() const {
  return new CharacterDBDyMissionBountyParam;
}

void CharacterDBDyMissionBountyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ten_state_ = 0u;
    twenty_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDyMissionBountyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ten_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_state_)));
          set_has_ten_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_twenty_state;
        break;
      }

      // optional uint32 twenty_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twenty_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twenty_state_)));
          set_has_twenty_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDyMissionBountyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ten_state = 1;
  if (has_ten_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ten_state(), output);
  }

  // optional uint32 twenty_state = 2;
  if (has_twenty_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->twenty_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDyMissionBountyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ten_state = 1;
  if (has_ten_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ten_state(), target);
  }

  // optional uint32 twenty_state = 2;
  if (has_twenty_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->twenty_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDyMissionBountyParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ten_state = 1;
    if (has_ten_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ten_state());
    }

    // optional uint32 twenty_state = 2;
    if (has_twenty_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->twenty_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDyMissionBountyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDyMissionBountyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDyMissionBountyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDyMissionBountyParam::MergeFrom(const CharacterDBDyMissionBountyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ten_state()) {
      set_ten_state(from.ten_state());
    }
    if (from.has_twenty_state()) {
      set_twenty_state(from.twenty_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDyMissionBountyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDyMissionBountyParam::CopyFrom(const CharacterDBDyMissionBountyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDyMissionBountyParam::IsInitialized() const {

  return true;
}

void CharacterDBDyMissionBountyParam::Swap(CharacterDBDyMissionBountyParam* other) {
  if (other != this) {
    std::swap(ten_state_, other->ten_state_);
    std::swap(twenty_state_, other->twenty_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDyMissionBountyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDyMissionBountyParam_descriptor_;
  metadata.reflection = CharacterDBDyMissionBountyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDyMissionInfo::kMissionTypeFieldNumber;
const int CharacterDBDyMissionInfo::kLastfreshFieldNumber;
const int CharacterDBDyMissionInfo::kAcceptNumFieldNumber;
const int CharacterDBDyMissionInfo::kBountyParamFieldNumber;
#endif  // !_MSC_VER

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDyMissionInfo::InitAsDefaultInstance() {
  bounty_param_ = const_cast< ::proto_ff::CharacterDBDyMissionBountyParam*>(&::proto_ff::CharacterDBDyMissionBountyParam::default_instance());
}

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo(const CharacterDBDyMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  lastfresh_ = GOOGLE_ULONGLONG(0);
  accept_num_ = 0;
  bounty_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDyMissionInfo::~CharacterDBDyMissionInfo() {
  SharedDtor();
}

void CharacterDBDyMissionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bounty_param_;
  }
}

void CharacterDBDyMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDyMissionInfo_descriptor_;
}

const CharacterDBDyMissionInfo& CharacterDBDyMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::default_instance_ = NULL;

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::New() const {
  return new CharacterDBDyMissionInfo;
}

void CharacterDBDyMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    lastfresh_ = GOOGLE_ULONGLONG(0);
    accept_num_ = 0;
    if (has_bounty_param()) {
      if (bounty_param_ != NULL) bounty_param_->::proto_ff::CharacterDBDyMissionBountyParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDyMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastfresh;
        break;
      }

      // optional uint64 lastfresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastfresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfresh_)));
          set_has_lastfresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bounty_param;
        break;
      }

      // optional .proto_ff.CharacterDBDyMissionBountyParam bounty_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounty_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounty_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDyMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastfresh(), output);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accept_num(), output);
  }

  // optional .proto_ff.CharacterDBDyMissionBountyParam bounty_param = 4;
  if (has_bounty_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bounty_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDyMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastfresh(), target);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accept_num(), target);
  }

  // optional .proto_ff.CharacterDBDyMissionBountyParam bounty_param = 4;
  if (has_bounty_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bounty_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDyMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 lastfresh = 2;
    if (has_lastfresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfresh());
    }

    // optional int32 accept_num = 3;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

    // optional .proto_ff.CharacterDBDyMissionBountyParam bounty_param = 4;
    if (has_bounty_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounty_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDyMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDyMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDyMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDyMissionInfo::MergeFrom(const CharacterDBDyMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_lastfresh()) {
      set_lastfresh(from.lastfresh());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
    if (from.has_bounty_param()) {
      mutable_bounty_param()->::proto_ff::CharacterDBDyMissionBountyParam::MergeFrom(from.bounty_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDyMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::CopyFrom(const CharacterDBDyMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDyMissionInfo::IsInitialized() const {

  return true;
}

void CharacterDBDyMissionInfo::Swap(CharacterDBDyMissionInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(lastfresh_, other->lastfresh_);
    std::swap(accept_num_, other->accept_num_);
    std::swap(bounty_param_, other->bounty_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDyMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDyMissionInfo_descriptor_;
  metadata.reflection = CharacterDBDyMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrestigeMissionDBData::kPrestigeIdFieldNumber;
const int GuildPrestigeMissionDBData::kTaskIdFieldNumber;
const int GuildPrestigeMissionDBData::kTaskStateFieldNumber;
const int GuildPrestigeMissionDBData::kIndexFieldNumber;
const int GuildPrestigeMissionDBData::kTrackFieldNumber;
#endif  // !_MSC_VER

GuildPrestigeMissionDBData::GuildPrestigeMissionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPrestigeMissionDBData::InitAsDefaultInstance() {
  track_ = const_cast< ::proto_ff::CharacterDBMissionTrack*>(&::proto_ff::CharacterDBMissionTrack::default_instance());
}

GuildPrestigeMissionDBData::GuildPrestigeMissionDBData(const GuildPrestigeMissionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPrestigeMissionDBData::SharedCtor() {
  _cached_size_ = 0;
  prestige_id_ = GOOGLE_LONGLONG(0);
  task_id_ = GOOGLE_LONGLONG(0);
  task_state_ = 0;
  index_ = 0;
  track_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrestigeMissionDBData::~GuildPrestigeMissionDBData() {
  SharedDtor();
}

void GuildPrestigeMissionDBData::SharedDtor() {
  if (this != default_instance_) {
    delete track_;
  }
}

void GuildPrestigeMissionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrestigeMissionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrestigeMissionDBData_descriptor_;
}

const GuildPrestigeMissionDBData& GuildPrestigeMissionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GuildPrestigeMissionDBData* GuildPrestigeMissionDBData::default_instance_ = NULL;

GuildPrestigeMissionDBData* GuildPrestigeMissionDBData::New() const {
  return new GuildPrestigeMissionDBData;
}

void GuildPrestigeMissionDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prestige_id_ = GOOGLE_LONGLONG(0);
    task_id_ = GOOGLE_LONGLONG(0);
    task_state_ = 0;
    index_ = 0;
    if (has_track()) {
      if (track_ != NULL) track_->::proto_ff::CharacterDBMissionTrack::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrestigeMissionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 prestige_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prestige_id_)));
          set_has_prestige_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_task_id;
        break;
      }

      // optional int64 task_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_track;
        break;
      }

      // optional .proto_ff.CharacterDBMissionTrack track = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildPrestigeMissionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 prestige_id = 1;
  if (has_prestige_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->prestige_id(), output);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->task_id(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // optional int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // optional .proto_ff.CharacterDBMissionTrack track = 5;
  if (has_track()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->track(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPrestigeMissionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 prestige_id = 1;
  if (has_prestige_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->prestige_id(), target);
  }

  // optional int64 task_id = 2;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->task_id(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // optional int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // optional .proto_ff.CharacterDBMissionTrack track = 5;
  if (has_track()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->track(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPrestigeMissionDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 prestige_id = 1;
    if (has_prestige_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prestige_id());
    }

    // optional int64 task_id = 2;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .proto_ff.CharacterDBMissionTrack track = 5;
    if (has_track()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrestigeMissionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrestigeMissionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrestigeMissionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrestigeMissionDBData::MergeFrom(const GuildPrestigeMissionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestige_id()) {
      set_prestige_id(from.prestige_id());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_track()) {
      mutable_track()->::proto_ff::CharacterDBMissionTrack::MergeFrom(from.track());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrestigeMissionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrestigeMissionDBData::CopyFrom(const GuildPrestigeMissionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrestigeMissionDBData::IsInitialized() const {

  return true;
}

void GuildPrestigeMissionDBData::Swap(GuildPrestigeMissionDBData* other) {
  if (other != this) {
    std::swap(prestige_id_, other->prestige_id_);
    std::swap(task_id_, other->task_id_);
    std::swap(task_state_, other->task_state_);
    std::swap(index_, other->index_);
    std::swap(track_, other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrestigeMissionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrestigeMissionDBData_descriptor_;
  metadata.reflection = GuildPrestigeMissionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrestigeMissionDB::kRefreshNumFieldNumber;
const int GuildPrestigeMissionDB::kAllRefreshNumFieldNumber;
const int GuildPrestigeMissionDB::kAcceptNumFieldNumber;
const int GuildPrestigeMissionDB::kAllAcceptNumFieldNumber;
const int GuildPrestigeMissionDB::kTaskPoolFieldNumber;
const int GuildPrestigeMissionDB::kLastRefreshTimeFieldNumber;
#endif  // !_MSC_VER

GuildPrestigeMissionDB::GuildPrestigeMissionDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildPrestigeMissionDB::InitAsDefaultInstance() {
}

GuildPrestigeMissionDB::GuildPrestigeMissionDB(const GuildPrestigeMissionDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildPrestigeMissionDB::SharedCtor() {
  _cached_size_ = 0;
  refresh_num_ = 0;
  all_refresh_num_ = 0;
  accept_num_ = 0;
  all_accept_num_ = 0;
  last_refresh_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrestigeMissionDB::~GuildPrestigeMissionDB() {
  SharedDtor();
}

void GuildPrestigeMissionDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildPrestigeMissionDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrestigeMissionDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrestigeMissionDB_descriptor_;
}

const GuildPrestigeMissionDB& GuildPrestigeMissionDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GuildPrestigeMissionDB* GuildPrestigeMissionDB::default_instance_ = NULL;

GuildPrestigeMissionDB* GuildPrestigeMissionDB::New() const {
  return new GuildPrestigeMissionDB;
}

void GuildPrestigeMissionDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refresh_num_ = 0;
    all_refresh_num_ = 0;
    accept_num_ = 0;
    all_accept_num_ = 0;
    last_refresh_time_ = GOOGLE_LONGLONG(0);
  }
  task_pool_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrestigeMissionDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 refresh_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refresh_num_)));
          set_has_refresh_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_all_refresh_num;
        break;
      }

      // optional int32 all_refresh_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_refresh_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_refresh_num_)));
          set_has_all_refresh_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_all_accept_num;
        break;
      }

      // optional int32 all_accept_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_all_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &all_accept_num_)));
          set_has_all_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_task_pool;
        break;
      }

      // repeated .proto_ff.GuildPrestigeMissionDBData task_pool = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_task_pool;
        if (input->ExpectTag(56)) goto parse_last_refresh_time;
        break;
      }

      // optional int64 last_refresh_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_refresh_time_)));
          set_has_last_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildPrestigeMissionDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 refresh_num = 1;
  if (has_refresh_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refresh_num(), output);
  }

  // optional int32 all_refresh_num = 2;
  if (has_all_refresh_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->all_refresh_num(), output);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accept_num(), output);
  }

  // optional int32 all_accept_num = 4;
  if (has_all_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->all_accept_num(), output);
  }

  // repeated .proto_ff.GuildPrestigeMissionDBData task_pool = 5;
  for (int i = 0; i < this->task_pool_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->task_pool(i), output);
  }

  // optional int64 last_refresh_time = 7;
  if (has_last_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->last_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildPrestigeMissionDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 refresh_num = 1;
  if (has_refresh_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refresh_num(), target);
  }

  // optional int32 all_refresh_num = 2;
  if (has_all_refresh_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->all_refresh_num(), target);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accept_num(), target);
  }

  // optional int32 all_accept_num = 4;
  if (has_all_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->all_accept_num(), target);
  }

  // repeated .proto_ff.GuildPrestigeMissionDBData task_pool = 5;
  for (int i = 0; i < this->task_pool_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->task_pool(i), target);
  }

  // optional int64 last_refresh_time = 7;
  if (has_last_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->last_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildPrestigeMissionDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 refresh_num = 1;
    if (has_refresh_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refresh_num());
    }

    // optional int32 all_refresh_num = 2;
    if (has_all_refresh_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_refresh_num());
    }

    // optional int32 accept_num = 3;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

    // optional int32 all_accept_num = 4;
    if (has_all_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->all_accept_num());
    }

    // optional int64 last_refresh_time = 7;
    if (has_last_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_refresh_time());
    }

  }
  // repeated .proto_ff.GuildPrestigeMissionDBData task_pool = 5;
  total_size += 1 * this->task_pool_size();
  for (int i = 0; i < this->task_pool_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_pool(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrestigeMissionDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrestigeMissionDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrestigeMissionDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrestigeMissionDB::MergeFrom(const GuildPrestigeMissionDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_pool_.MergeFrom(from.task_pool_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refresh_num()) {
      set_refresh_num(from.refresh_num());
    }
    if (from.has_all_refresh_num()) {
      set_all_refresh_num(from.all_refresh_num());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
    if (from.has_all_accept_num()) {
      set_all_accept_num(from.all_accept_num());
    }
    if (from.has_last_refresh_time()) {
      set_last_refresh_time(from.last_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrestigeMissionDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrestigeMissionDB::CopyFrom(const GuildPrestigeMissionDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrestigeMissionDB::IsInitialized() const {

  return true;
}

void GuildPrestigeMissionDB::Swap(GuildPrestigeMissionDB* other) {
  if (other != this) {
    std::swap(refresh_num_, other->refresh_num_);
    std::swap(all_refresh_num_, other->all_refresh_num_);
    std::swap(accept_num_, other->accept_num_);
    std::swap(all_accept_num_, other->all_accept_num_);
    task_pool_.Swap(&other->task_pool_);
    std::swap(last_refresh_time_, other->last_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrestigeMissionDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrestigeMissionDB_descriptor_;
  metadata.reflection = GuildPrestigeMissionDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBTaskData::kMissionTrackFieldNumber;
const int CharacterDBTaskData::kDyinfoFieldNumber;
const int CharacterDBTaskData::kAlreadySubmitFieldNumber;
const int CharacterDBTaskData::kRecentSubmitFieldNumber;
const int CharacterDBTaskData::kPrestigeMissionFieldNumber;
#endif  // !_MSC_VER

CharacterDBTaskData::CharacterDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBTaskData::InitAsDefaultInstance() {
  prestige_mission_ = const_cast< ::proto_ff::GuildPrestigeMissionDB*>(&::proto_ff::GuildPrestigeMissionDB::default_instance());
}

CharacterDBTaskData::CharacterDBTaskData(const CharacterDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  prestige_mission_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBTaskData::~CharacterDBTaskData() {
  SharedDtor();
}

void CharacterDBTaskData::SharedDtor() {
  if (this != default_instance_) {
    delete prestige_mission_;
  }
}

void CharacterDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBTaskData_descriptor_;
}

const CharacterDBTaskData& CharacterDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBTaskData* CharacterDBTaskData::default_instance_ = NULL;

CharacterDBTaskData* CharacterDBTaskData::New() const {
  return new CharacterDBTaskData;
}

void CharacterDBTaskData::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_prestige_mission()) {
      if (prestige_mission_ != NULL) prestige_mission_->::proto_ff::GuildPrestigeMissionDB::Clear();
    }
  }
  missiontrack_.Clear();
  dyinfo_.Clear();
  already_submit_.Clear();
  recent_submit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missiontrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missionTrack;
        if (input->ExpectTag(18)) goto parse_dyinfo;
        break;
      }

      // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dyinfo;
        if (input->ExpectTag(24)) goto parse_already_submit;
        break;
      }

      // repeated uint64 already_submit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_submit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_already_submit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_already_submit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_already_submit;
        if (input->ExpectTag(34)) goto parse_recent_submit;
        break;
      }

      // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_submit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recent_submit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recent_submit;
        if (input->ExpectTag(42)) goto parse_prestige_mission;
        break;
      }

      // optional .proto_ff.GuildPrestigeMissionDB prestige_mission = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestige_mission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prestige_mission()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missiontrack(i), output);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dyinfo(i), output);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->already_submit(i), output);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recent_submit(i), output);
  }

  // optional .proto_ff.GuildPrestigeMissionDB prestige_mission = 5;
  if (has_prestige_mission()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->prestige_mission(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missiontrack(i), target);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dyinfo(i), target);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->already_submit(i), target);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recent_submit(i), target);
  }

  // optional .proto_ff.GuildPrestigeMissionDB prestige_mission = 5;
  if (has_prestige_mission()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->prestige_mission(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional .proto_ff.GuildPrestigeMissionDB prestige_mission = 5;
    if (has_prestige_mission()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prestige_mission());
    }

  }
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  total_size += 1 * this->missiontrack_size();
  for (int i = 0; i < this->missiontrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missiontrack(i));
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  total_size += 1 * this->dyinfo_size();
  for (int i = 0; i < this->dyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dyinfo(i));
  }

  // repeated uint64 already_submit = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_submit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->already_submit(i));
    }
    total_size += 1 * this->already_submit_size() + data_size;
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  total_size += 1 * this->recent_submit_size();
  for (int i = 0; i < this->recent_submit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recent_submit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBTaskData::MergeFrom(const CharacterDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  missiontrack_.MergeFrom(from.missiontrack_);
  dyinfo_.MergeFrom(from.dyinfo_);
  already_submit_.MergeFrom(from.already_submit_);
  recent_submit_.MergeFrom(from.recent_submit_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_prestige_mission()) {
      mutable_prestige_mission()->::proto_ff::GuildPrestigeMissionDB::MergeFrom(from.prestige_mission());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBTaskData::CopyFrom(const CharacterDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBTaskData::IsInitialized() const {

  return true;
}

void CharacterDBTaskData::Swap(CharacterDBTaskData* other) {
  if (other != this) {
    missiontrack_.Swap(&other->missiontrack_);
    dyinfo_.Swap(&other->dyinfo_);
    already_submit_.Swap(&other->already_submit_);
    recent_submit_.Swap(&other->recent_submit_);
    std::swap(prestige_mission_, other->prestige_mission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBTaskData_descriptor_;
  metadata.reflection = CharacterDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyVipDataRsp::kExpFieldNumber;
const int NotifyVipDataRsp::kIdsFieldNumber;
#endif  // !_MSC_VER

NotifyVipDataRsp::NotifyVipDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyVipDataRsp::InitAsDefaultInstance() {
}

NotifyVipDataRsp::NotifyVipDataRsp(const NotifyVipDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyVipDataRsp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyVipDataRsp::~NotifyVipDataRsp() {
  SharedDtor();
}

void NotifyVipDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyVipDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyVipDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyVipDataRsp_descriptor_;
}

const NotifyVipDataRsp& NotifyVipDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

NotifyVipDataRsp* NotifyVipDataRsp::default_instance_ = NULL;

NotifyVipDataRsp* NotifyVipDataRsp::New() const {
  return new NotifyVipDataRsp;
}

void NotifyVipDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyVipDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyVipDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyVipDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyVipDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated int32 ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyVipDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyVipDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyVipDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyVipDataRsp::MergeFrom(const NotifyVipDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyVipDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyVipDataRsp::CopyFrom(const NotifyVipDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyVipDataRsp::IsInitialized() const {

  return true;
}

void NotifyVipDataRsp::Swap(NotifyVipDataRsp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyVipDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyVipDataRsp_descriptor_;
  metadata.reflection = NotifyVipDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallResult::kResultFieldNumber;
const int ArenaChallResult::kChallFieldNumber;
const int ArenaChallResult::kTimeFieldNumber;
const int ArenaChallResult::kDstNameFieldNumber;
const int ArenaChallResult::kSrcRankIdFieldNumber;
const int ArenaChallResult::kDstRankIdFieldNumber;
const int ArenaChallResult::kItemsFieldNumber;
const int ArenaChallResult::kDupIdFieldNumber;
#endif  // !_MSC_VER

ArenaChallResult::ArenaChallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallResult::InitAsDefaultInstance() {
}

ArenaChallResult::ArenaChallResult(const ArenaChallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  chall_ = false;
  time_ = GOOGLE_LONGLONG(0);
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  src_rank_id_ = 0;
  dst_rank_id_ = 0;
  dup_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallResult::~ArenaChallResult() {
  SharedDtor();
}

void ArenaChallResult::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void ArenaChallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallResult_descriptor_;
}

const ArenaChallResult& ArenaChallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ArenaChallResult* ArenaChallResult::default_instance_ = NULL;

ArenaChallResult* ArenaChallResult::New() const {
  return new ArenaChallResult;
}

void ArenaChallResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    chall_ = false;
    time_ = GOOGLE_LONGLONG(0);
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
    src_rank_id_ = 0;
    dst_rank_id_ = 0;
    dup_id_ = GOOGLE_LONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chall;
        break;
      }

      // optional bool chall = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chall_)));
          set_has_chall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dst_name;
        break;
      }

      // optional string dst_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dst_name().data(), this->dst_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_src_rank_id;
        break;
      }

      // optional int32 src_rank_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_rank_id_)));
          set_has_src_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dst_rank_id;
        break;
      }

      // optional int32 dst_rank_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_rank_id_)));
          set_has_dst_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ComItem items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectTag(64)) goto parse_dup_id;
        break;
      }

      // optional int64 dup_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional bool chall = 2;
  if (has_chall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chall(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional string dst_name = 4;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dst_name(), output);
  }

  // optional int32 src_rank_id = 5;
  if (has_src_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->src_rank_id(), output);
  }

  // optional int32 dst_rank_id = 6;
  if (has_dst_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dst_rank_id(), output);
  }

  // repeated .proto_ff.ComItem items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  // optional int64 dup_id = 8;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->dup_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional bool chall = 2;
  if (has_chall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chall(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional string dst_name = 4;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dst_name().data(), this->dst_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dst_name(), target);
  }

  // optional int32 src_rank_id = 5;
  if (has_src_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->src_rank_id(), target);
  }

  // optional int32 dst_rank_id = 6;
  if (has_dst_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dst_rank_id(), target);
  }

  // repeated .proto_ff.ComItem items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  // optional int64 dup_id = 8;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->dup_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional bool chall = 2;
    if (has_chall()) {
      total_size += 1 + 1;
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string dst_name = 4;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst_name());
    }

    // optional int32 src_rank_id = 5;
    if (has_src_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_rank_id());
    }

    // optional int32 dst_rank_id = 6;
    if (has_dst_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_rank_id());
    }

    // optional int64 dup_id = 8;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dup_id());
    }

  }
  // repeated .proto_ff.ComItem items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallResult::MergeFrom(const ArenaChallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_chall()) {
      set_chall(from.chall());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
    if (from.has_src_rank_id()) {
      set_src_rank_id(from.src_rank_id());
    }
    if (from.has_dst_rank_id()) {
      set_dst_rank_id(from.dst_rank_id());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallResult::CopyFrom(const ArenaChallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallResult::IsInitialized() const {

  return true;
}

void ArenaChallResult::Swap(ArenaChallResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(chall_, other->chall_);
    std::swap(time_, other->time_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(src_rank_id_, other->src_rank_id_);
    std::swap(dst_rank_id_, other->dst_rank_id_);
    items_.Swap(&other->items_);
    std::swap(dup_id_, other->dup_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallResult_descriptor_;
  metadata.reflection = ArenaChallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyArenaReward::kCfgIdFieldNumber;
const int DailyArenaReward::kStateFieldNumber;
#endif  // !_MSC_VER

DailyArenaReward::DailyArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyArenaReward::InitAsDefaultInstance() {
}

DailyArenaReward::DailyArenaReward(const DailyArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyArenaReward::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyArenaReward::~DailyArenaReward() {
  SharedDtor();
}

void DailyArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyArenaReward_descriptor_;
}

const DailyArenaReward& DailyArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyArenaReward* DailyArenaReward::default_instance_ = NULL;

DailyArenaReward* DailyArenaReward::New() const {
  return new DailyArenaReward;
}

void DailyArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfg_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfg_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyArenaReward::MergeFrom(const DailyArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyArenaReward::CopyFrom(const DailyArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyArenaReward::IsInitialized() const {

  return true;
}

void DailyArenaReward::Swap(DailyArenaReward* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyArenaReward_descriptor_;
  metadata.reflection = DailyArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallArenaReward::kCfgIdFieldNumber;
const int ChallArenaReward::kStateFieldNumber;
#endif  // !_MSC_VER

ChallArenaReward::ChallArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallArenaReward::InitAsDefaultInstance() {
}

ChallArenaReward::ChallArenaReward(const ChallArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallArenaReward::SharedCtor() {
  _cached_size_ = 0;
  cfg_id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallArenaReward::~ChallArenaReward() {
  SharedDtor();
}

void ChallArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallArenaReward_descriptor_;
}

const ChallArenaReward& ChallArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ChallArenaReward* ChallArenaReward::default_instance_ = NULL;

ChallArenaReward* ChallArenaReward::New() const {
  return new ChallArenaReward;
}

void ChallArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfg_id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_id_)));
          set_has_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfg_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfg_id = 1;
  if (has_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfg_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfg_id = 1;
    if (has_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallArenaReward::MergeFrom(const ChallArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfg_id()) {
      set_cfg_id(from.cfg_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallArenaReward::CopyFrom(const ChallArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallArenaReward::IsInitialized() const {

  return true;
}

void ChallArenaReward::Swap(ChallArenaReward* other) {
  if (other != this) {
    std::swap(cfg_id_, other->cfg_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallArenaReward_descriptor_;
  metadata.reflection = ChallArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyServerFlag::kBtDupFieldNumber;
#endif  // !_MSC_VER

NotifyServerFlag::NotifyServerFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyServerFlag::InitAsDefaultInstance() {
}

NotifyServerFlag::NotifyServerFlag(const NotifyServerFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyServerFlag::SharedCtor() {
  _cached_size_ = 0;
  bt_dup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyServerFlag::~NotifyServerFlag() {
  SharedDtor();
}

void NotifyServerFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyServerFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyServerFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyServerFlag_descriptor_;
}

const NotifyServerFlag& NotifyServerFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

NotifyServerFlag* NotifyServerFlag::default_instance_ = NULL;

NotifyServerFlag* NotifyServerFlag::New() const {
  return new NotifyServerFlag;
}

void NotifyServerFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bt_dup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyServerFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bt_dup = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bt_dup_)));
          set_has_bt_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyServerFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bt_dup = 1;
  if (has_bt_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bt_dup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyServerFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bt_dup = 1;
  if (has_bt_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bt_dup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyServerFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bt_dup = 1;
    if (has_bt_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bt_dup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyServerFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyServerFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyServerFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyServerFlag::MergeFrom(const NotifyServerFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bt_dup()) {
      set_bt_dup(from.bt_dup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyServerFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyServerFlag::CopyFrom(const NotifyServerFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyServerFlag::IsInitialized() const {

  return true;
}

void NotifyServerFlag::Swap(NotifyServerFlag* other) {
  if (other != this) {
    std::swap(bt_dup_, other->bt_dup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyServerFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyServerFlag_descriptor_;
  metadata.reflection = NotifyServerFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSoulSkillData::kSkillIdFieldNumber;
const int FacadeSoulSkillData::kStatusFieldNumber;
#endif  // !_MSC_VER

FacadeSoulSkillData::FacadeSoulSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSoulSkillData::InitAsDefaultInstance() {
}

FacadeSoulSkillData::FacadeSoulSkillData(const FacadeSoulSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSoulSkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_LONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSoulSkillData::~FacadeSoulSkillData() {
  SharedDtor();
}

void FacadeSoulSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSoulSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSoulSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSoulSkillData_descriptor_;
}

const FacadeSoulSkillData& FacadeSoulSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeSoulSkillData* FacadeSoulSkillData::default_instance_ = NULL;

FacadeSoulSkillData* FacadeSoulSkillData::New() const {
  return new FacadeSoulSkillData;
}

void FacadeSoulSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_LONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSoulSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSoulSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skill_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSoulSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSoulSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSoulSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSoulSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSoulSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSoulSkillData::MergeFrom(const FacadeSoulSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSoulSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSoulSkillData::CopyFrom(const FacadeSoulSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSoulSkillData::IsInitialized() const {

  return true;
}

void FacadeSoulSkillData::Swap(FacadeSoulSkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSoulSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSoulSkillData_descriptor_;
  metadata.reflection = FacadeSoulSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSoulActivityData::kActivityIdFieldNumber;
const int FacadeSoulActivityData::kStatusFieldNumber;
#endif  // !_MSC_VER

FacadeSoulActivityData::FacadeSoulActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSoulActivityData::InitAsDefaultInstance() {
}

FacadeSoulActivityData::FacadeSoulActivityData(const FacadeSoulActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSoulActivityData::SharedCtor() {
  _cached_size_ = 0;
  activity_id_ = GOOGLE_LONGLONG(0);
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSoulActivityData::~FacadeSoulActivityData() {
  SharedDtor();
}

void FacadeSoulActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSoulActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSoulActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSoulActivityData_descriptor_;
}

const FacadeSoulActivityData& FacadeSoulActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeSoulActivityData* FacadeSoulActivityData::default_instance_ = NULL;

FacadeSoulActivityData* FacadeSoulActivityData::New() const {
  return new FacadeSoulActivityData;
}

void FacadeSoulActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_id_ = GOOGLE_LONGLONG(0);
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSoulActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 activity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activity_id_)));
          set_has_activity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSoulActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 activity_id = 1;
  if (has_activity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->activity_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSoulActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 activity_id = 1;
  if (has_activity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->activity_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSoulActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 activity_id = 1;
    if (has_activity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activity_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSoulActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSoulActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSoulActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSoulActivityData::MergeFrom(const FacadeSoulActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity_id()) {
      set_activity_id(from.activity_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSoulActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSoulActivityData::CopyFrom(const FacadeSoulActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSoulActivityData::IsInitialized() const {

  return true;
}

void FacadeSoulActivityData::Swap(FacadeSoulActivityData* other) {
  if (other != this) {
    std::swap(activity_id_, other->activity_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSoulActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSoulActivityData_descriptor_;
  metadata.reflection = FacadeSoulActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSoulData::kSoulIdFieldNumber;
const int FacadeSoulData::kSoulActiveFieldNumber;
const int FacadeSoulData::kSoulLevelFieldNumber;
const int FacadeSoulData::kSkillDataFieldNumber;
const int FacadeSoulData::kAcviityDataFieldNumber;
#endif  // !_MSC_VER

FacadeSoulData::FacadeSoulData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSoulData::InitAsDefaultInstance() {
}

FacadeSoulData::FacadeSoulData(const FacadeSoulData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSoulData::SharedCtor() {
  _cached_size_ = 0;
  soul_id_ = 0u;
  soul_active_ = false;
  soul_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSoulData::~FacadeSoulData() {
  SharedDtor();
}

void FacadeSoulData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSoulData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSoulData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSoulData_descriptor_;
}

const FacadeSoulData& FacadeSoulData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeSoulData* FacadeSoulData::default_instance_ = NULL;

FacadeSoulData* FacadeSoulData::New() const {
  return new FacadeSoulData;
}

void FacadeSoulData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soul_id_ = 0u;
    soul_active_ = false;
    soul_level_ = 0u;
  }
  skill_data_.Clear();
  acviity_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSoulData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 soul_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_id_)));
          set_has_soul_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul_active;
        break;
      }

      // optional bool soul_active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &soul_active_)));
          set_has_soul_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_soul_level;
        break;
      }

      // optional uint32 soul_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &soul_level_)));
          set_has_soul_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.FacadeSoulSkillData skill_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        if (input->ExpectTag(50)) goto parse_acviity_data;
        break;
      }

      // repeated .proto_ff.FacadeSoulActivityData acviity_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acviity_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acviity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_acviity_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSoulData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 soul_id = 1;
  if (has_soul_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->soul_id(), output);
  }

  // optional bool soul_active = 2;
  if (has_soul_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->soul_active(), output);
  }

  // optional uint32 soul_level = 3;
  if (has_soul_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->soul_level(), output);
  }

  // repeated .proto_ff.FacadeSoulSkillData skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_data(i), output);
  }

  // repeated .proto_ff.FacadeSoulActivityData acviity_data = 6;
  for (int i = 0; i < this->acviity_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->acviity_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSoulData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 soul_id = 1;
  if (has_soul_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->soul_id(), target);
  }

  // optional bool soul_active = 2;
  if (has_soul_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->soul_active(), target);
  }

  // optional uint32 soul_level = 3;
  if (has_soul_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->soul_level(), target);
  }

  // repeated .proto_ff.FacadeSoulSkillData skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_data(i), target);
  }

  // repeated .proto_ff.FacadeSoulActivityData acviity_data = 6;
  for (int i = 0; i < this->acviity_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->acviity_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSoulData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 soul_id = 1;
    if (has_soul_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_id());
    }

    // optional bool soul_active = 2;
    if (has_soul_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 soul_level = 3;
    if (has_soul_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->soul_level());
    }

  }
  // repeated .proto_ff.FacadeSoulSkillData skill_data = 5;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.FacadeSoulActivityData acviity_data = 6;
  total_size += 1 * this->acviity_data_size();
  for (int i = 0; i < this->acviity_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acviity_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSoulData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSoulData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSoulData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSoulData::MergeFrom(const FacadeSoulData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_data_.MergeFrom(from.skill_data_);
  acviity_data_.MergeFrom(from.acviity_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soul_id()) {
      set_soul_id(from.soul_id());
    }
    if (from.has_soul_active()) {
      set_soul_active(from.soul_active());
    }
    if (from.has_soul_level()) {
      set_soul_level(from.soul_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSoulData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSoulData::CopyFrom(const FacadeSoulData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSoulData::IsInitialized() const {

  return true;
}

void FacadeSoulData::Swap(FacadeSoulData* other) {
  if (other != this) {
    std::swap(soul_id_, other->soul_id_);
    std::swap(soul_active_, other->soul_active_);
    std::swap(soul_level_, other->soul_level_);
    skill_data_.Swap(&other->skill_data_);
    acviity_data_.Swap(&other->acviity_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSoulData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSoulData_descriptor_;
  metadata.reflection = FacadeSoulData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSellProto::kIndexFieldNumber;
const int ItemSellProto::kNumFieldNumber;
#endif  // !_MSC_VER

ItemSellProto::ItemSellProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSellProto::InitAsDefaultInstance() {
}

ItemSellProto::ItemSellProto(const ItemSellProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSellProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSellProto::~ItemSellProto() {
  SharedDtor();
}

void ItemSellProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSellProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSellProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSellProto_descriptor_;
}

const ItemSellProto& ItemSellProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ItemSellProto* ItemSellProto::default_instance_ = NULL;

ItemSellProto* ItemSellProto::New() const {
  return new ItemSellProto;
}

void ItemSellProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSellProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSellProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSellProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSellProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSellProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSellProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSellProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSellProto::MergeFrom(const ItemSellProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSellProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSellProto::CopyFrom(const ItemSellProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSellProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemSellProto::Swap(ItemSellProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSellProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSellProto_descriptor_;
  metadata.reflection = ItemSellProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityFantasySkillData::kSkillIdFieldNumber;
const int DeityFantasySkillData::kSkillStateFieldNumber;
#endif  // !_MSC_VER

DeityFantasySkillData::DeityFantasySkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityFantasySkillData::InitAsDefaultInstance() {
}

DeityFantasySkillData::DeityFantasySkillData(const DeityFantasySkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityFantasySkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityFantasySkillData::~DeityFantasySkillData() {
  SharedDtor();
}

void DeityFantasySkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityFantasySkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityFantasySkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityFantasySkillData_descriptor_;
}

const DeityFantasySkillData& DeityFantasySkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityFantasySkillData* DeityFantasySkillData::default_instance_ = NULL;

DeityFantasySkillData* DeityFantasySkillData::New() const {
  return new DeityFantasySkillData;
}

void DeityFantasySkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityFantasySkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_state;
        break;
      }

      // optional uint32 skill_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_state_)));
          set_has_skill_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityFantasySkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 skill_state = 2;
  if (has_skill_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityFantasySkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_state = 2;
  if (has_skill_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityFantasySkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 skill_state = 2;
    if (has_skill_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityFantasySkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityFantasySkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityFantasySkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityFantasySkillData::MergeFrom(const DeityFantasySkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_state()) {
      set_skill_state(from.skill_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityFantasySkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityFantasySkillData::CopyFrom(const DeityFantasySkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityFantasySkillData::IsInitialized() const {

  return true;
}

void DeityFantasySkillData::Swap(DeityFantasySkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_state_, other->skill_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityFantasySkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityFantasySkillData_descriptor_;
  metadata.reflection = DeityFantasySkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityEquipData::kInfosFieldNumber;
const int DeityEquipData::kLvAttrFieldNumber;
#endif  // !_MSC_VER

DeityEquipData::DeityEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityEquipData::InitAsDefaultInstance() {
}

DeityEquipData::DeityEquipData(const DeityEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityEquipData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityEquipData::~DeityEquipData() {
  SharedDtor();
}

void DeityEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityEquipData_descriptor_;
}

const DeityEquipData& DeityEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityEquipData* DeityEquipData::default_instance_ = NULL;

DeityEquipData* DeityEquipData::New() const {
  return new DeityEquipData;
}

void DeityEquipData::Clear() {
  infos_.Clear();
  lv_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EquipInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_lv_attr;
        break;
      }

      // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lv_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lv_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lv_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityEquipData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.EquipInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  total_size += 1 * this->lv_attr_size();
  for (int i = 0; i < this->lv_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lv_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityEquipData::MergeFrom(const DeityEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  lv_attr_.MergeFrom(from.lv_attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityEquipData::CopyFrom(const DeityEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityEquipData::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void DeityEquipData::Swap(DeityEquipData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    lv_attr_.Swap(&other->lv_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityEquipData_descriptor_;
  metadata.reflection = DeityEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityEquipSuitData::kIdFieldNumber;
const int DeityEquipSuitData::kStateFieldNumber;
#endif  // !_MSC_VER

DeityEquipSuitData::DeityEquipSuitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityEquipSuitData::InitAsDefaultInstance() {
}

DeityEquipSuitData::DeityEquipSuitData(const DeityEquipSuitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityEquipSuitData::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityEquipSuitData::~DeityEquipSuitData() {
  SharedDtor();
}

void DeityEquipSuitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityEquipSuitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityEquipSuitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityEquipSuitData_descriptor_;
}

const DeityEquipSuitData& DeityEquipSuitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityEquipSuitData* DeityEquipSuitData::default_instance_ = NULL;

DeityEquipSuitData* DeityEquipSuitData::New() const {
  return new DeityEquipSuitData;
}

void DeityEquipSuitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityEquipSuitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityEquipSuitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityEquipSuitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityEquipSuitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityEquipSuitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityEquipSuitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityEquipSuitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityEquipSuitData::MergeFrom(const DeityEquipSuitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityEquipSuitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityEquipSuitData::CopyFrom(const DeityEquipSuitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityEquipSuitData::IsInitialized() const {

  return true;
}

void DeityEquipSuitData::Swap(DeityEquipSuitData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityEquipSuitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityEquipSuitData_descriptor_;
  metadata.reflection = DeityEquipSuitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityFantasyData::kFantasyIdFieldNumber;
const int DeityFantasyData::kFantasyLevFieldNumber;
const int DeityFantasyData::kFantasyLevExpFieldNumber;
const int DeityFantasyData::kFantasyStarFieldNumber;
const int DeityFantasyData::kSkillDataFieldNumber;
const int DeityFantasyData::kFantasyFightFieldNumber;
const int DeityFantasyData::kEquipDataFieldNumber;
const int DeityFantasyData::kEquipSuitDataFieldNumber;
#endif  // !_MSC_VER

DeityFantasyData::DeityFantasyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityFantasyData::InitAsDefaultInstance() {
  equip_data_ = const_cast< ::proto_ff::DeityEquipData*>(&::proto_ff::DeityEquipData::default_instance());
}

DeityFantasyData::DeityFantasyData(const DeityFantasyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityFantasyData::SharedCtor() {
  _cached_size_ = 0;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  fantasy_lev_ = 0u;
  fantasy_lev_exp_ = GOOGLE_ULONGLONG(0);
  fantasy_star_ = 0u;
  fantasy_fight_ = GOOGLE_ULONGLONG(0);
  equip_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityFantasyData::~DeityFantasyData() {
  SharedDtor();
}

void DeityFantasyData::SharedDtor() {
  if (this != default_instance_) {
    delete equip_data_;
  }
}

void DeityFantasyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityFantasyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityFantasyData_descriptor_;
}

const DeityFantasyData& DeityFantasyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityFantasyData* DeityFantasyData::default_instance_ = NULL;

DeityFantasyData* DeityFantasyData::New() const {
  return new DeityFantasyData;
}

void DeityFantasyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantasy_id_ = GOOGLE_ULONGLONG(0);
    fantasy_lev_ = 0u;
    fantasy_lev_exp_ = GOOGLE_ULONGLONG(0);
    fantasy_star_ = 0u;
    fantasy_fight_ = GOOGLE_ULONGLONG(0);
    if (has_equip_data()) {
      if (equip_data_ != NULL) equip_data_->::proto_ff::DeityEquipData::Clear();
    }
  }
  skill_data_.Clear();
  equip_suit_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityFantasyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_lev;
        break;
      }

      // optional uint32 fantasy_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_lev_)));
          set_has_fantasy_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fantasy_lev_exp;
        break;
      }

      // optional uint64 fantasy_lev_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_lev_exp_)));
          set_has_fantasy_lev_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fantasy_star;
        break;
      }

      // optional uint32 fantasy_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_star_)));
          set_has_fantasy_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.DeityFantasySkillData skill_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_data;
        if (input->ExpectTag(48)) goto parse_fantasy_fight;
        break;
      }

      // optional uint64 fantasy_fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_fight_)));
          set_has_fantasy_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equip_data;
        break;
      }

      // optional .proto_ff.DeityEquipData equip_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_suit_data;
        break;
      }

      // repeated .proto_ff.DeityEquipSuitData equip_suit_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip_suit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_suit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip_suit_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityFantasyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_id(), output);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_lev(), output);
  }

  // optional uint64 fantasy_lev_exp = 3;
  if (has_fantasy_lev_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fantasy_lev_exp(), output);
  }

  // optional uint32 fantasy_star = 4;
  if (has_fantasy_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fantasy_star(), output);
  }

  // repeated .proto_ff.DeityFantasySkillData skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_data(i), output);
  }

  // optional uint64 fantasy_fight = 6;
  if (has_fantasy_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fantasy_fight(), output);
  }

  // optional .proto_ff.DeityEquipData equip_data = 7;
  if (has_equip_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equip_data(), output);
  }

  // repeated .proto_ff.DeityEquipSuitData equip_suit_data = 8;
  for (int i = 0; i < this->equip_suit_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip_suit_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityFantasyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_id(), target);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_lev(), target);
  }

  // optional uint64 fantasy_lev_exp = 3;
  if (has_fantasy_lev_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fantasy_lev_exp(), target);
  }

  // optional uint32 fantasy_star = 4;
  if (has_fantasy_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fantasy_star(), target);
  }

  // repeated .proto_ff.DeityFantasySkillData skill_data = 5;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_data(i), target);
  }

  // optional uint64 fantasy_fight = 6;
  if (has_fantasy_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fantasy_fight(), target);
  }

  // optional .proto_ff.DeityEquipData equip_data = 7;
  if (has_equip_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equip_data(), target);
  }

  // repeated .proto_ff.DeityEquipSuitData equip_suit_data = 8;
  for (int i = 0; i < this->equip_suit_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip_suit_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityFantasyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fantasy_id = 1;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

    // optional uint32 fantasy_lev = 2;
    if (has_fantasy_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_lev());
    }

    // optional uint64 fantasy_lev_exp = 3;
    if (has_fantasy_lev_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_lev_exp());
    }

    // optional uint32 fantasy_star = 4;
    if (has_fantasy_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_star());
    }

    // optional uint64 fantasy_fight = 6;
    if (has_fantasy_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_fight());
    }

    // optional .proto_ff.DeityEquipData equip_data = 7;
    if (has_equip_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip_data());
    }

  }
  // repeated .proto_ff.DeityFantasySkillData skill_data = 5;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.DeityEquipSuitData equip_suit_data = 8;
  total_size += 1 * this->equip_suit_data_size();
  for (int i = 0; i < this->equip_suit_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_suit_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityFantasyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityFantasyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityFantasyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityFantasyData::MergeFrom(const DeityFantasyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_data_.MergeFrom(from.skill_data_);
  equip_suit_data_.MergeFrom(from.equip_suit_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
    if (from.has_fantasy_lev()) {
      set_fantasy_lev(from.fantasy_lev());
    }
    if (from.has_fantasy_lev_exp()) {
      set_fantasy_lev_exp(from.fantasy_lev_exp());
    }
    if (from.has_fantasy_star()) {
      set_fantasy_star(from.fantasy_star());
    }
    if (from.has_fantasy_fight()) {
      set_fantasy_fight(from.fantasy_fight());
    }
    if (from.has_equip_data()) {
      mutable_equip_data()->::proto_ff::DeityEquipData::MergeFrom(from.equip_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityFantasyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityFantasyData::CopyFrom(const DeityFantasyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityFantasyData::IsInitialized() const {

  if (has_equip_data()) {
    if (!this->equip_data().IsInitialized()) return false;
  }
  return true;
}

void DeityFantasyData::Swap(DeityFantasyData* other) {
  if (other != this) {
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(fantasy_lev_, other->fantasy_lev_);
    std::swap(fantasy_lev_exp_, other->fantasy_lev_exp_);
    std::swap(fantasy_star_, other->fantasy_star_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(fantasy_fight_, other->fantasy_fight_);
    std::swap(equip_data_, other->equip_data_);
    equip_suit_data_.Swap(&other->equip_suit_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityFantasyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityFantasyData_descriptor_;
  metadata.reflection = DeityFantasyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityFragmentData::kFragmentIdFieldNumber;
const int DeityFragmentData::kUseTimesFieldNumber;
#endif  // !_MSC_VER

DeityFragmentData::DeityFragmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityFragmentData::InitAsDefaultInstance() {
}

DeityFragmentData::DeityFragmentData(const DeityFragmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityFragmentData::SharedCtor() {
  _cached_size_ = 0;
  fragment_id_ = GOOGLE_ULONGLONG(0);
  use_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityFragmentData::~DeityFragmentData() {
  SharedDtor();
}

void DeityFragmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityFragmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityFragmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityFragmentData_descriptor_;
}

const DeityFragmentData& DeityFragmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityFragmentData* DeityFragmentData::default_instance_ = NULL;

DeityFragmentData* DeityFragmentData::New() const {
  return new DeityFragmentData;
}

void DeityFragmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragment_id_ = GOOGLE_ULONGLONG(0);
    use_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityFragmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fragment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }

      // optional uint32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityFragmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fragment_id(), output);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityFragmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fragment_id(), target);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityFragmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fragment_id = 1;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragment_id());
    }

    // optional uint32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityFragmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityFragmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityFragmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityFragmentData::MergeFrom(const DeityFragmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityFragmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityFragmentData::CopyFrom(const DeityFragmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityFragmentData::IsInitialized() const {

  return true;
}

void DeityFragmentData::Swap(DeityFragmentData* other) {
  if (other != this) {
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityFragmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityFragmentData_descriptor_;
  metadata.reflection = DeityFragmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeitySkillData::kSkillIdFieldNumber;
const int DeitySkillData::kSkillLevFieldNumber;
#endif  // !_MSC_VER

DeitySkillData::DeitySkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeitySkillData::InitAsDefaultInstance() {
}

DeitySkillData::DeitySkillData(const DeitySkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeitySkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeitySkillData::~DeitySkillData() {
  SharedDtor();
}

void DeitySkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeitySkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeitySkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeitySkillData_descriptor_;
}

const DeitySkillData& DeitySkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeitySkillData* DeitySkillData::default_instance_ = NULL;

DeitySkillData* DeitySkillData::New() const {
  return new DeitySkillData;
}

void DeitySkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeitySkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_lev;
        break;
      }

      // optional uint32 skill_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeitySkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeitySkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeitySkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 skill_lev = 2;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeitySkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeitySkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeitySkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeitySkillData::MergeFrom(const DeitySkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeitySkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeitySkillData::CopyFrom(const DeitySkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeitySkillData::IsInitialized() const {

  return true;
}

void DeitySkillData::Swap(DeitySkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeitySkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeitySkillData_descriptor_;
  metadata.reflection = DeitySkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityBattleSlotData::kIdFieldNumber;
const int DeityBattleSlotData::kCurStateFieldNumber;
const int DeityBattleSlotData::kDeityIdFieldNumber;
const int DeityBattleSlotData::kEnterWarTimeFieldNumber;
#endif  // !_MSC_VER

DeityBattleSlotData::DeityBattleSlotData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityBattleSlotData::InitAsDefaultInstance() {
}

DeityBattleSlotData::DeityBattleSlotData(const DeityBattleSlotData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityBattleSlotData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cur_state_ = 0u;
  deity_id_ = GOOGLE_LONGLONG(0);
  enter_war_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityBattleSlotData::~DeityBattleSlotData() {
  SharedDtor();
}

void DeityBattleSlotData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityBattleSlotData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityBattleSlotData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityBattleSlotData_descriptor_;
}

const DeityBattleSlotData& DeityBattleSlotData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DeityBattleSlotData* DeityBattleSlotData::default_instance_ = NULL;

DeityBattleSlotData* DeityBattleSlotData::New() const {
  return new DeityBattleSlotData;
}

void DeityBattleSlotData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cur_state_ = 0u;
    deity_id_ = GOOGLE_LONGLONG(0);
    enter_war_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityBattleSlotData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_state;
        break;
      }

      // optional uint32 cur_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_state_)));
          set_has_cur_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deity_id;
        break;
      }

      // optional int64 deity_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deity_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deity_id_)));
          set_has_deity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enter_war_time;
        break;
      }

      // optional int64 enter_war_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_war_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &enter_war_time_)));
          set_has_enter_war_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityBattleSlotData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_state(), output);
  }

  // optional int64 deity_id = 3;
  if (has_deity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deity_id(), output);
  }

  // optional int64 enter_war_time = 4;
  if (has_enter_war_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->enter_war_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityBattleSlotData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cur_state = 2;
  if (has_cur_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_state(), target);
  }

  // optional int64 deity_id = 3;
  if (has_deity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->deity_id(), target);
  }

  // optional int64 enter_war_time = 4;
  if (has_enter_war_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->enter_war_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityBattleSlotData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cur_state = 2;
    if (has_cur_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_state());
    }

    // optional int64 deity_id = 3;
    if (has_deity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deity_id());
    }

    // optional int64 enter_war_time = 4;
    if (has_enter_war_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->enter_war_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityBattleSlotData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityBattleSlotData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityBattleSlotData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityBattleSlotData::MergeFrom(const DeityBattleSlotData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur_state()) {
      set_cur_state(from.cur_state());
    }
    if (from.has_deity_id()) {
      set_deity_id(from.deity_id());
    }
    if (from.has_enter_war_time()) {
      set_enter_war_time(from.enter_war_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityBattleSlotData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityBattleSlotData::CopyFrom(const DeityBattleSlotData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityBattleSlotData::IsInitialized() const {

  return true;
}

void DeityBattleSlotData::Swap(DeityBattleSlotData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_state_, other->cur_state_);
    std::swap(deity_id_, other->deity_id_);
    std::swap(enter_war_time_, other->enter_war_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityBattleSlotData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityBattleSlotData_descriptor_;
  metadata.reflection = DeityBattleSlotData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorSuitState::kIndexFieldNumber;
const int ArmorSuitState::kStateFieldNumber;
#endif  // !_MSC_VER

ArmorSuitState::ArmorSuitState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmorSuitState::InitAsDefaultInstance() {
}

ArmorSuitState::ArmorSuitState(const ArmorSuitState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmorSuitState::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorSuitState::~ArmorSuitState() {
  SharedDtor();
}

void ArmorSuitState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorSuitState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorSuitState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorSuitState_descriptor_;
}

const ArmorSuitState& ArmorSuitState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ArmorSuitState* ArmorSuitState::default_instance_ = NULL;

ArmorSuitState* ArmorSuitState::New() const {
  return new ArmorSuitState;
}

void ArmorSuitState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmorSuitState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmorSuitState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmorSuitState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmorSuitState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorSuitState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmorSuitState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmorSuitState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmorSuitState::MergeFrom(const ArmorSuitState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmorSuitState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorSuitState::CopyFrom(const ArmorSuitState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorSuitState::IsInitialized() const {

  return true;
}

void ArmorSuitState::Swap(ArmorSuitState* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmorSuitState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorSuitState_descriptor_;
  metadata.reflection = ArmorSuitState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorInfo::kIdFieldNumber;
const int ArmorInfo::kSuitsFieldNumber;
const int ArmorInfo::kAllstateFieldNumber;
const int ArmorInfo::kPosFieldNumber;
#endif  // !_MSC_VER

ArmorInfo::ArmorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmorInfo::InitAsDefaultInstance() {
}

ArmorInfo::ArmorInfo(const ArmorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmorInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  allstate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorInfo::~ArmorInfo() {
  SharedDtor();
}

void ArmorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorInfo_descriptor_;
}

const ArmorInfo& ArmorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ArmorInfo* ArmorInfo::default_instance_ = NULL;

ArmorInfo* ArmorInfo::New() const {
  return new ArmorInfo;
}

void ArmorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    allstate_ = 0;
  }
  suits_.Clear();
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_suits;
        break;
      }

      // repeated .proto_ff.ArmorSuitState suits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_suits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_suits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_suits;
        if (input->ExpectTag(24)) goto parse_allstate;
        break;
      }

      // optional int32 allstate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allstate_)));
          set_has_allstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // repeated int32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .proto_ff.ArmorSuitState suits = 2;
  for (int i = 0; i < this->suits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->suits(i), output);
  }

  // optional int32 allstate = 3;
  if (has_allstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allstate(), output);
  }

  // repeated int32 pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.ArmorSuitState suits = 2;
  for (int i = 0; i < this->suits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->suits(i), target);
  }

  // optional int32 allstate = 3;
  if (has_allstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allstate(), target);
  }

  // repeated int32 pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 allstate = 3;
    if (has_allstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allstate());
    }

  }
  // repeated .proto_ff.ArmorSuitState suits = 2;
  total_size += 1 * this->suits_size();
  for (int i = 0; i < this->suits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->suits(i));
  }

  // repeated int32 pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmorInfo::MergeFrom(const ArmorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  suits_.MergeFrom(from.suits_);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_allstate()) {
      set_allstate(from.allstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorInfo::CopyFrom(const ArmorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorInfo::IsInitialized() const {

  return true;
}

void ArmorInfo::Swap(ArmorInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    suits_.Swap(&other->suits_);
    std::swap(allstate_, other->allstate_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorInfo_descriptor_;
  metadata.reflection = ArmorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfo::kTitleIdFieldNumber;
const int TitleInfo::kStatusFieldNumber;
const int TitleInfo::kStartTimeFieldNumber;
const int TitleInfo::kEndTimeFieldNumber;
const int TitleInfo::kStarFieldNumber;
#endif  // !_MSC_VER

TitleInfo::TitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleInfo::InitAsDefaultInstance() {
}

TitleInfo::TitleInfo(const TitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleInfo::SharedCtor() {
  _cached_size_ = 0;
  title_id_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  end_time_ = GOOGLE_LONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfo::~TitleInfo() {
  SharedDtor();
}

void TitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfo_descriptor_;
}

const TitleInfo& TitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

TitleInfo* TitleInfo::default_instance_ = NULL;

TitleInfo* TitleInfo::New() const {
  return new TitleInfo;
}

void TitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    title_id_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    end_time_ = GOOGLE_LONGLONG(0);
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &title_id_)));
          set_has_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_start_time;
        break;
      }

      // optional int64 start_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // optional int64 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional int32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 title_id = 1;
  if (has_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->title_id(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->start_time(), output);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->end_time(), output);
  }

  // optional int32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 title_id = 1;
  if (has_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->title_id(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int64 start_time = 3;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->start_time(), target);
  }

  // optional int64 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->end_time(), target);
  }

  // optional int32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 title_id = 1;
    if (has_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->title_id());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 start_time = 3;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

    // optional int64 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end_time());
    }

    // optional int32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title_id()) {
      set_title_id(from.title_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {

  return true;
}

void TitleInfo::Swap(TitleInfo* other) {
  if (other != this) {
    std::swap(title_id_, other->title_id_);
    std::swap(status_, other->status_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfo_descriptor_;
  metadata.reflection = TitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationMissionSoulData::kSoulTypeFieldNumber;
const int OccupationMissionSoulData::kSoulPosFieldNumber;
const int OccupationMissionSoulData::kStatusFieldNumber;
#endif  // !_MSC_VER

OccupationMissionSoulData::OccupationMissionSoulData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationMissionSoulData::InitAsDefaultInstance() {
}

OccupationMissionSoulData::OccupationMissionSoulData(const OccupationMissionSoulData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationMissionSoulData::SharedCtor() {
  _cached_size_ = 0;
  soul_type_ = 0;
  soul_pos_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationMissionSoulData::~OccupationMissionSoulData() {
  SharedDtor();
}

void OccupationMissionSoulData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationMissionSoulData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationMissionSoulData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationMissionSoulData_descriptor_;
}

const OccupationMissionSoulData& OccupationMissionSoulData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

OccupationMissionSoulData* OccupationMissionSoulData::default_instance_ = NULL;

OccupationMissionSoulData* OccupationMissionSoulData::New() const {
  return new OccupationMissionSoulData;
}

void OccupationMissionSoulData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    soul_type_ = 0;
    soul_pos_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationMissionSoulData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 soul_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_type_)));
          set_has_soul_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soul_pos;
        break;
      }

      // optional int32 soul_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soul_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soul_pos_)));
          set_has_soul_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationMissionSoulData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 soul_type = 1;
  if (has_soul_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->soul_type(), output);
  }

  // optional int32 soul_pos = 2;
  if (has_soul_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soul_pos(), output);
  }

  // optional int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationMissionSoulData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 soul_type = 1;
  if (has_soul_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->soul_type(), target);
  }

  // optional int32 soul_pos = 2;
  if (has_soul_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soul_pos(), target);
  }

  // optional int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationMissionSoulData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 soul_type = 1;
    if (has_soul_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_type());
    }

    // optional int32 soul_pos = 2;
    if (has_soul_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soul_pos());
    }

    // optional int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationMissionSoulData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationMissionSoulData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationMissionSoulData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationMissionSoulData::MergeFrom(const OccupationMissionSoulData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_soul_type()) {
      set_soul_type(from.soul_type());
    }
    if (from.has_soul_pos()) {
      set_soul_pos(from.soul_pos());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationMissionSoulData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationMissionSoulData::CopyFrom(const OccupationMissionSoulData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationMissionSoulData::IsInitialized() const {

  return true;
}

void OccupationMissionSoulData::Swap(OccupationMissionSoulData* other) {
  if (other != this) {
    std::swap(soul_type_, other->soul_type_);
    std::swap(soul_pos_, other->soul_pos_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationMissionSoulData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationMissionSoulData_descriptor_;
  metadata.reflection = OccupationMissionSoulData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationMissionStageData::kStageFieldNumber;
const int OccupationMissionStageData::kStatusFieldNumber;
const int OccupationMissionStageData::kSoulDataFieldNumber;
#endif  // !_MSC_VER

OccupationMissionStageData::OccupationMissionStageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationMissionStageData::InitAsDefaultInstance() {
}

OccupationMissionStageData::OccupationMissionStageData(const OccupationMissionStageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationMissionStageData::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationMissionStageData::~OccupationMissionStageData() {
  SharedDtor();
}

void OccupationMissionStageData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationMissionStageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationMissionStageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationMissionStageData_descriptor_;
}

const OccupationMissionStageData& OccupationMissionStageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

OccupationMissionStageData* OccupationMissionStageData::default_instance_ = NULL;

OccupationMissionStageData* OccupationMissionStageData::New() const {
  return new OccupationMissionStageData;
}

void OccupationMissionStageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    status_ = 0;
  }
  soul_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationMissionStageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_soul_data;
        break;
      }

      // repeated .proto_ff.OccupationMissionSoulData soul_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_soul_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_soul_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationMissionStageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated .proto_ff.OccupationMissionSoulData soul_data = 3;
  for (int i = 0; i < this->soul_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->soul_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationMissionStageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated .proto_ff.OccupationMissionSoulData soul_data = 3;
  for (int i = 0; i < this->soul_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->soul_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationMissionStageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .proto_ff.OccupationMissionSoulData soul_data = 3;
  total_size += 1 * this->soul_data_size();
  for (int i = 0; i < this->soul_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soul_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationMissionStageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationMissionStageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationMissionStageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationMissionStageData::MergeFrom(const OccupationMissionStageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  soul_data_.MergeFrom(from.soul_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationMissionStageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationMissionStageData::CopyFrom(const OccupationMissionStageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationMissionStageData::IsInitialized() const {

  return true;
}

void OccupationMissionStageData::Swap(OccupationMissionStageData* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(status_, other->status_);
    soul_data_.Swap(&other->soul_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationMissionStageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationMissionStageData_descriptor_;
  metadata.reflection = OccupationMissionStageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationMissionGradeData::kGradeFieldNumber;
const int OccupationMissionGradeData::kStatusFieldNumber;
const int OccupationMissionGradeData::kStageDataFieldNumber;
#endif  // !_MSC_VER

OccupationMissionGradeData::OccupationMissionGradeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationMissionGradeData::InitAsDefaultInstance() {
}

OccupationMissionGradeData::OccupationMissionGradeData(const OccupationMissionGradeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationMissionGradeData::SharedCtor() {
  _cached_size_ = 0;
  grade_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationMissionGradeData::~OccupationMissionGradeData() {
  SharedDtor();
}

void OccupationMissionGradeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationMissionGradeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationMissionGradeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationMissionGradeData_descriptor_;
}

const OccupationMissionGradeData& OccupationMissionGradeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

OccupationMissionGradeData* OccupationMissionGradeData::default_instance_ = NULL;

OccupationMissionGradeData* OccupationMissionGradeData::New() const {
  return new OccupationMissionGradeData;
}

void OccupationMissionGradeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    grade_ = 0;
    status_ = 0;
  }
  stage_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationMissionGradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 grade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stage_data;
        break;
      }

      // repeated .proto_ff.OccupationMissionStageData stage_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stage_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationMissionGradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->grade(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // repeated .proto_ff.OccupationMissionStageData stage_data = 3;
  for (int i = 0; i < this->stage_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stage_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationMissionGradeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 grade = 1;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->grade(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // repeated .proto_ff.OccupationMissionStageData stage_data = 3;
  for (int i = 0; i < this->stage_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stage_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationMissionGradeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 grade = 1;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .proto_ff.OccupationMissionStageData stage_data = 3;
  total_size += 1 * this->stage_data_size();
  for (int i = 0; i < this->stage_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationMissionGradeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationMissionGradeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationMissionGradeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationMissionGradeData::MergeFrom(const OccupationMissionGradeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_data_.MergeFrom(from.stage_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationMissionGradeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationMissionGradeData::CopyFrom(const OccupationMissionGradeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationMissionGradeData::IsInitialized() const {

  return true;
}

void OccupationMissionGradeData::Swap(OccupationMissionGradeData* other) {
  if (other != this) {
    std::swap(grade_, other->grade_);
    std::swap(status_, other->status_);
    stage_data_.Swap(&other->stage_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationMissionGradeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationMissionGradeData_descriptor_;
  metadata.reflection = OccupationMissionGradeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupationMissionData::kGradeDataFieldNumber;
#endif  // !_MSC_VER

OccupationMissionData::OccupationMissionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupationMissionData::InitAsDefaultInstance() {
}

OccupationMissionData::OccupationMissionData(const OccupationMissionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupationMissionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupationMissionData::~OccupationMissionData() {
  SharedDtor();
}

void OccupationMissionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupationMissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupationMissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupationMissionData_descriptor_;
}

const OccupationMissionData& OccupationMissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

OccupationMissionData* OccupationMissionData::default_instance_ = NULL;

OccupationMissionData* OccupationMissionData::New() const {
  return new OccupationMissionData;
}

void OccupationMissionData::Clear() {
  grade_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupationMissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.OccupationMissionGradeData grade_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grade_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grade_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_grade_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupationMissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.OccupationMissionGradeData grade_data = 1;
  for (int i = 0; i < this->grade_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grade_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupationMissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.OccupationMissionGradeData grade_data = 1;
  for (int i = 0; i < this->grade_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grade_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupationMissionData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.OccupationMissionGradeData grade_data = 1;
  total_size += 1 * this->grade_data_size();
  for (int i = 0; i < this->grade_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grade_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupationMissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupationMissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupationMissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupationMissionData::MergeFrom(const OccupationMissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  grade_data_.MergeFrom(from.grade_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupationMissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupationMissionData::CopyFrom(const OccupationMissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupationMissionData::IsInitialized() const {

  return true;
}

void OccupationMissionData::Swap(OccupationMissionData* other) {
  if (other != this) {
    grade_data_.Swap(&other->grade_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupationMissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupationMissionData_descriptor_;
  metadata.reflection = OccupationMissionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQEquipInfo::kInstIdFieldNumber;
const int BestEQEquipInfo::kCfgIdFieldNumber;
const int BestEQEquipInfo::kMakeIdFieldNumber;
const int BestEQEquipInfo::kSkillsFieldNumber;
#endif  // !_MSC_VER

BestEQEquipInfo::BestEQEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQEquipInfo::InitAsDefaultInstance() {
}

BestEQEquipInfo::BestEQEquipInfo(const BestEQEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  cfgid_ = 0;
  makeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQEquipInfo::~BestEQEquipInfo() {
  SharedDtor();
}

void BestEQEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQEquipInfo_descriptor_;
}

const BestEQEquipInfo& BestEQEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BestEQEquipInfo* BestEQEquipInfo::default_instance_ = NULL;

BestEQEquipInfo* BestEQEquipInfo::New() const {
  return new BestEQEquipInfo;
}

void BestEQEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
    cfgid_ = 0;
    makeid_ = 0;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgId;
        break;
      }

      // optional int32 cfgId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_makeId;
        break;
      }

      // optional int32 makeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_makeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &makeid_)));
          set_has_makeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skills;
        break;
      }

      // repeated .proto_ff.ComPair skills = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // optional int32 cfgId = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfgid(), output);
  }

  // optional int32 makeId = 3;
  if (has_makeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->makeid(), output);
  }

  // repeated .proto_ff.ComPair skills = 4;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // optional int32 cfgId = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfgid(), target);
  }

  // optional int32 makeId = 3;
  if (has_makeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->makeid(), target);
  }

  // repeated .proto_ff.ComPair skills = 4;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 cfgId = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional int32 makeId = 3;
    if (has_makeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->makeid());
    }

  }
  // repeated .proto_ff.ComPair skills = 4;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQEquipInfo::MergeFrom(const BestEQEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_makeid()) {
      set_makeid(from.makeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQEquipInfo::CopyFrom(const BestEQEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQEquipInfo::IsInitialized() const {

  return true;
}

void BestEQEquipInfo::Swap(BestEQEquipInfo* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(makeid_, other->makeid_);
    skills_.Swap(&other->skills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQEquipInfo_descriptor_;
  metadata.reflection = BestEQEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQBreak::kLvFieldNumber;
const int BestEQBreak::kExpsFieldNumber;
const int BestEQBreak::kGenAttrFieldNumber;
#endif  // !_MSC_VER

BestEQBreak::BestEQBreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQBreak::InitAsDefaultInstance() {
}

BestEQBreak::BestEQBreak(const BestEQBreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQBreak::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQBreak::~BestEQBreak() {
  SharedDtor();
}

void BestEQBreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQBreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQBreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQBreak_descriptor_;
}

const BestEQBreak& BestEQBreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BestEQBreak* BestEQBreak::default_instance_ = NULL;

BestEQBreak* BestEQBreak::New() const {
  return new BestEQBreak;
}

void BestEQBreak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
  }
  exps_.Clear();
  genattr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQBreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exps;
        break;
      }

      // repeated int32 exps = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_exps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exps;
        if (input->ExpectTag(26)) goto parse_genAttr;
        break;
      }

      // repeated .proto_ff.ComPair genAttr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genattr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_genAttr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQBreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // repeated int32 exps = 2;
  for (int i = 0; i < this->exps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->exps(i), output);
  }

  // repeated .proto_ff.ComPair genAttr = 3;
  for (int i = 0; i < this->genattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->genattr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQBreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // repeated int32 exps = 2;
  for (int i = 0; i < this->exps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->exps(i), target);
  }

  // repeated .proto_ff.ComPair genAttr = 3;
  for (int i = 0; i < this->genattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->genattr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQBreak::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated int32 exps = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exps(i));
    }
    total_size += 1 * this->exps_size() + data_size;
  }

  // repeated .proto_ff.ComPair genAttr = 3;
  total_size += 1 * this->genattr_size();
  for (int i = 0; i < this->genattr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genattr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQBreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQBreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQBreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQBreak::MergeFrom(const BestEQBreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  exps_.MergeFrom(from.exps_);
  genattr_.MergeFrom(from.genattr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQBreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQBreak::CopyFrom(const BestEQBreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQBreak::IsInitialized() const {

  return true;
}

void BestEQBreak::Swap(BestEQBreak* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    exps_.Swap(&other->exps_);
    genattr_.Swap(&other->genattr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQBreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQBreak_descriptor_;
  metadata.reflection = BestEQBreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQSlotInfo::kSlotFieldNumber;
const int BestEQSlotInfo::kInstIdFieldNumber;
const int BestEQSlotInfo::kPourIdFieldNumber;
const int BestEQSlotInfo::kPourExpFieldNumber;
const int BestEQSlotInfo::kPourUnLockFieldNumber;
const int BestEQSlotInfo::kBreakInfoFieldNumber;
const int BestEQSlotInfo::kAwakenLvFieldNumber;
#endif  // !_MSC_VER

BestEQSlotInfo::BestEQSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQSlotInfo::InitAsDefaultInstance() {
  breakinfo_ = const_cast< ::proto_ff::BestEQBreak*>(&::proto_ff::BestEQBreak::default_instance());
}

BestEQSlotInfo::BestEQSlotInfo(const BestEQSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0;
  instid_ = 0;
  pourid_ = 0;
  pourexp_ = 0;
  pourunlock_ = 0;
  breakinfo_ = NULL;
  awakenlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQSlotInfo::~BestEQSlotInfo() {
  SharedDtor();
}

void BestEQSlotInfo::SharedDtor() {
  if (this != default_instance_) {
    delete breakinfo_;
  }
}

void BestEQSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQSlotInfo_descriptor_;
}

const BestEQSlotInfo& BestEQSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BestEQSlotInfo* BestEQSlotInfo::default_instance_ = NULL;

BestEQSlotInfo* BestEQSlotInfo::New() const {
  return new BestEQSlotInfo;
}

void BestEQSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0;
    instid_ = 0;
    pourid_ = 0;
    pourexp_ = 0;
    pourunlock_ = 0;
    if (has_breakinfo()) {
      if (breakinfo_ != NULL) breakinfo_->::proto_ff::BestEQBreak::Clear();
    }
    awakenlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instId;
        break;
      }

      // optional int32 instId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pourId;
        break;
      }

      // optional int32 pourId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourid_)));
          set_has_pourid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pourExp;
        break;
      }

      // optional int32 pourExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourexp_)));
          set_has_pourexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pourUnLock;
        break;
      }

      // optional int32 pourUnLock = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pourUnLock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pourunlock_)));
          set_has_pourunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_breakInfo;
        break;
      }

      // optional .proto_ff.BestEQBreak breakInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_breakInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_breakinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_awakenLv;
        break;
      }

      // optional int32 awakenLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awakenLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awakenlv_)));
          set_has_awakenlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot(), output);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instid(), output);
  }

  // optional int32 pourId = 3;
  if (has_pourid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pourid(), output);
  }

  // optional int32 pourExp = 4;
  if (has_pourexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pourexp(), output);
  }

  // optional int32 pourUnLock = 5;
  if (has_pourunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pourunlock(), output);
  }

  // optional .proto_ff.BestEQBreak breakInfo = 6;
  if (has_breakinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->breakinfo(), output);
  }

  // optional int32 awakenLv = 7;
  if (has_awakenlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->awakenlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot(), target);
  }

  // optional int32 instId = 2;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instid(), target);
  }

  // optional int32 pourId = 3;
  if (has_pourid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pourid(), target);
  }

  // optional int32 pourExp = 4;
  if (has_pourexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pourexp(), target);
  }

  // optional int32 pourUnLock = 5;
  if (has_pourunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pourunlock(), target);
  }

  // optional .proto_ff.BestEQBreak breakInfo = 6;
  if (has_breakinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->breakinfo(), target);
  }

  // optional int32 awakenLv = 7;
  if (has_awakenlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->awakenlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 instId = 2;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

    // optional int32 pourId = 3;
    if (has_pourid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourid());
    }

    // optional int32 pourExp = 4;
    if (has_pourexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourexp());
    }

    // optional int32 pourUnLock = 5;
    if (has_pourunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pourunlock());
    }

    // optional .proto_ff.BestEQBreak breakInfo = 6;
    if (has_breakinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->breakinfo());
    }

    // optional int32 awakenLv = 7;
    if (has_awakenlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awakenlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQSlotInfo::MergeFrom(const BestEQSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
    if (from.has_pourid()) {
      set_pourid(from.pourid());
    }
    if (from.has_pourexp()) {
      set_pourexp(from.pourexp());
    }
    if (from.has_pourunlock()) {
      set_pourunlock(from.pourunlock());
    }
    if (from.has_breakinfo()) {
      mutable_breakinfo()->::proto_ff::BestEQBreak::MergeFrom(from.breakinfo());
    }
    if (from.has_awakenlv()) {
      set_awakenlv(from.awakenlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQSlotInfo::CopyFrom(const BestEQSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQSlotInfo::IsInitialized() const {

  return true;
}

void BestEQSlotInfo::Swap(BestEQSlotInfo* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    std::swap(instid_, other->instid_);
    std::swap(pourid_, other->pourid_);
    std::swap(pourexp_, other->pourexp_);
    std::swap(pourunlock_, other->pourunlock_);
    std::swap(breakinfo_, other->breakinfo_);
    std::swap(awakenlv_, other->awakenlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQSlotInfo_descriptor_;
  metadata.reflection = BestEQSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BestEQTask::kIdFieldNumber;
const int BestEQTask::kStateFieldNumber;
#endif  // !_MSC_VER

BestEQTask::BestEQTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BestEQTask::InitAsDefaultInstance() {
}

BestEQTask::BestEQTask(const BestEQTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BestEQTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BestEQTask::~BestEQTask() {
  SharedDtor();
}

void BestEQTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BestEQTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BestEQTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BestEQTask_descriptor_;
}

const BestEQTask& BestEQTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BestEQTask* BestEQTask::default_instance_ = NULL;

BestEQTask* BestEQTask::New() const {
  return new BestEQTask;
}

void BestEQTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BestEQTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BestEQTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BestEQTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BestEQTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BestEQTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BestEQTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BestEQTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BestEQTask::MergeFrom(const BestEQTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BestEQTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BestEQTask::CopyFrom(const BestEQTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BestEQTask::IsInitialized() const {

  return true;
}

void BestEQTask::Swap(BestEQTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BestEQTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BestEQTask_descriptor_;
  metadata.reflection = BestEQTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
