// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auction.proto

#ifndef PROTOBUF_auction_2eproto__INCLUDED
#define PROTOBUF_auction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_auction_2eproto();
void protobuf_AssignDesc_auction_2eproto();
void protobuf_ShutdownFile_auction_2eproto();

class auctionacquisition;
class Sheet_auctionacquisition;
class auctionpurchase;
class Sheet_auctionpurchase;

// ===================================================================

class auctionacquisition : public ::google::protobuf::Message {
 public:
  auctionacquisition();
  virtual ~auctionacquisition();

  auctionacquisition(const auctionacquisition& from);

  inline auctionacquisition& operator=(const auctionacquisition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auctionacquisition& default_instance();

  void Swap(auctionacquisition* other);

  // implements Message ----------------------------------------------

  auctionacquisition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auctionacquisition& from);
  void MergeFrom(const auctionacquisition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 profession = 2;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 2;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string icon = 5;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 5;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional int32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.auctionacquisition)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 position_;
  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_auction_2eproto();
  friend void protobuf_AssignDesc_auction_2eproto();
  friend void protobuf_ShutdownFile_auction_2eproto();

  void InitAsDefaultInstance();
  static auctionacquisition* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_auctionacquisition : public ::google::protobuf::Message {
 public:
  Sheet_auctionacquisition();
  virtual ~Sheet_auctionacquisition();

  Sheet_auctionacquisition(const Sheet_auctionacquisition& from);

  inline Sheet_auctionacquisition& operator=(const Sheet_auctionacquisition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_auctionacquisition& default_instance();

  void Swap(Sheet_auctionacquisition* other);

  // implements Message ----------------------------------------------

  Sheet_auctionacquisition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_auctionacquisition& from);
  void MergeFrom(const Sheet_auctionacquisition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
  inline int auctionacquisition_list_size() const;
  inline void clear_auctionacquisition_list();
  static const int kAuctionacquisitionListFieldNumber = 1;
  inline const ::proto_ff::auctionacquisition& auctionacquisition_list(int index) const;
  inline ::proto_ff::auctionacquisition* mutable_auctionacquisition_list(int index);
  inline ::proto_ff::auctionacquisition* add_auctionacquisition_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionacquisition >&
      auctionacquisition_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionacquisition >*
      mutable_auctionacquisition_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_auctionacquisition)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionacquisition > auctionacquisition_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auction_2eproto();
  friend void protobuf_AssignDesc_auction_2eproto();
  friend void protobuf_ShutdownFile_auction_2eproto();

  void InitAsDefaultInstance();
  static Sheet_auctionacquisition* default_instance_;
};
// -------------------------------------------------------------------

class auctionpurchase : public ::google::protobuf::Message {
 public:
  auctionpurchase();
  virtual ~auctionpurchase();

  auctionpurchase(const auctionpurchase& from);

  inline auctionpurchase& operator=(const auctionpurchase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const auctionpurchase& default_instance();

  void Swap(auctionpurchase* other);

  // implements Message ----------------------------------------------

  auctionpurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const auctionpurchase& from);
  void MergeFrom(const auctionpurchase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 subType = 3;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 3;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string itemName = 5;
  inline bool has_itemname() const;
  inline void clear_itemname();
  static const int kItemNameFieldNumber = 5;
  inline const ::std::string& itemname() const;
  inline void set_itemname(const ::std::string& value);
  inline void set_itemname(const char* value);
  inline void set_itemname(const char* value, size_t size);
  inline ::std::string* mutable_itemname();
  inline ::std::string* release_itemname();
  inline void set_allocated_itemname(::std::string* itemname);

  // optional string itemId = 6;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 6;
  inline const ::std::string& itemid() const;
  inline void set_itemid(const ::std::string& value);
  inline void set_itemid(const char* value);
  inline void set_itemid(const char* value, size_t size);
  inline ::std::string* mutable_itemid();
  inline ::std::string* release_itemid();
  inline void set_allocated_itemid(::std::string* itemid);

  // @@protoc_insertion_point(class_scope:proto_ff.auctionpurchase)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemname();
  inline void clear_has_itemname();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 subtype_;
  ::std::string* name_;
  ::std::string* itemname_;
  ::std::string* itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_auction_2eproto();
  friend void protobuf_AssignDesc_auction_2eproto();
  friend void protobuf_ShutdownFile_auction_2eproto();

  void InitAsDefaultInstance();
  static auctionpurchase* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_auctionpurchase : public ::google::protobuf::Message {
 public:
  Sheet_auctionpurchase();
  virtual ~Sheet_auctionpurchase();

  Sheet_auctionpurchase(const Sheet_auctionpurchase& from);

  inline Sheet_auctionpurchase& operator=(const Sheet_auctionpurchase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_auctionpurchase& default_instance();

  void Swap(Sheet_auctionpurchase* other);

  // implements Message ----------------------------------------------

  Sheet_auctionpurchase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_auctionpurchase& from);
  void MergeFrom(const Sheet_auctionpurchase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
  inline int auctionpurchase_list_size() const;
  inline void clear_auctionpurchase_list();
  static const int kAuctionpurchaseListFieldNumber = 1;
  inline const ::proto_ff::auctionpurchase& auctionpurchase_list(int index) const;
  inline ::proto_ff::auctionpurchase* mutable_auctionpurchase_list(int index);
  inline ::proto_ff::auctionpurchase* add_auctionpurchase_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionpurchase >&
      auctionpurchase_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionpurchase >*
      mutable_auctionpurchase_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_auctionpurchase)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionpurchase > auctionpurchase_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_auction_2eproto();
  friend void protobuf_AssignDesc_auction_2eproto();
  friend void protobuf_ShutdownFile_auction_2eproto();

  void InitAsDefaultInstance();
  static Sheet_auctionpurchase* default_instance_;
};
// ===================================================================


// ===================================================================

// auctionacquisition

// optional int64 Id = 1;
inline bool auctionacquisition::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auctionacquisition::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auctionacquisition::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auctionacquisition::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 auctionacquisition::id() const {
  return id_;
}
inline void auctionacquisition::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 profession = 2;
inline bool auctionacquisition::has_profession() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auctionacquisition::set_has_profession() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auctionacquisition::clear_has_profession() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auctionacquisition::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 auctionacquisition::profession() const {
  return profession_;
}
inline void auctionacquisition::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 position = 3;
inline bool auctionacquisition::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auctionacquisition::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auctionacquisition::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auctionacquisition::clear_position() {
  position_ = 0;
  clear_has_position();
}
inline ::google::protobuf::int32 auctionacquisition::position() const {
  return position_;
}
inline void auctionacquisition::set_position(::google::protobuf::int32 value) {
  set_has_position();
  position_ = value;
}

// optional string name = 4;
inline bool auctionacquisition::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void auctionacquisition::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void auctionacquisition::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void auctionacquisition::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& auctionacquisition::name() const {
  return *name_;
}
inline void auctionacquisition::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void auctionacquisition::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void auctionacquisition::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auctionacquisition::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* auctionacquisition::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auctionacquisition::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string icon = 5;
inline bool auctionacquisition::has_icon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void auctionacquisition::set_has_icon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void auctionacquisition::clear_has_icon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void auctionacquisition::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& auctionacquisition::icon() const {
  return *icon_;
}
inline void auctionacquisition::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void auctionacquisition::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void auctionacquisition::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auctionacquisition::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* auctionacquisition::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auctionacquisition::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 num = 6;
inline bool auctionacquisition::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void auctionacquisition::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void auctionacquisition::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void auctionacquisition::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 auctionacquisition::num() const {
  return num_;
}
inline void auctionacquisition::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Sheet_auctionacquisition

// repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
inline int Sheet_auctionacquisition::auctionacquisition_list_size() const {
  return auctionacquisition_list_.size();
}
inline void Sheet_auctionacquisition::clear_auctionacquisition_list() {
  auctionacquisition_list_.Clear();
}
inline const ::proto_ff::auctionacquisition& Sheet_auctionacquisition::auctionacquisition_list(int index) const {
  return auctionacquisition_list_.Get(index);
}
inline ::proto_ff::auctionacquisition* Sheet_auctionacquisition::mutable_auctionacquisition_list(int index) {
  return auctionacquisition_list_.Mutable(index);
}
inline ::proto_ff::auctionacquisition* Sheet_auctionacquisition::add_auctionacquisition_list() {
  return auctionacquisition_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionacquisition >&
Sheet_auctionacquisition::auctionacquisition_list() const {
  return auctionacquisition_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionacquisition >*
Sheet_auctionacquisition::mutable_auctionacquisition_list() {
  return &auctionacquisition_list_;
}

// -------------------------------------------------------------------

// auctionpurchase

// optional int64 Id = 1;
inline bool auctionpurchase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void auctionpurchase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void auctionpurchase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void auctionpurchase::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 auctionpurchase::id() const {
  return id_;
}
inline void auctionpurchase::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool auctionpurchase::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void auctionpurchase::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void auctionpurchase::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void auctionpurchase::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 auctionpurchase::type() const {
  return type_;
}
inline void auctionpurchase::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 subType = 3;
inline bool auctionpurchase::has_subtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void auctionpurchase::set_has_subtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void auctionpurchase::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void auctionpurchase::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 auctionpurchase::subtype() const {
  return subtype_;
}
inline void auctionpurchase::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// optional string name = 4;
inline bool auctionpurchase::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void auctionpurchase::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void auctionpurchase::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void auctionpurchase::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& auctionpurchase::name() const {
  return *name_;
}
inline void auctionpurchase::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void auctionpurchase::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void auctionpurchase::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auctionpurchase::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* auctionpurchase::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auctionpurchase::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string itemName = 5;
inline bool auctionpurchase::has_itemname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void auctionpurchase::set_has_itemname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void auctionpurchase::clear_has_itemname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void auctionpurchase::clear_itemname() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    itemname_->clear();
  }
  clear_has_itemname();
}
inline const ::std::string& auctionpurchase::itemname() const {
  return *itemname_;
}
inline void auctionpurchase::set_itemname(const ::std::string& value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void auctionpurchase::set_itemname(const char* value) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(value);
}
inline void auctionpurchase::set_itemname(const char* value, size_t size) {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  itemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auctionpurchase::mutable_itemname() {
  set_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    itemname_ = new ::std::string;
  }
  return itemname_;
}
inline ::std::string* auctionpurchase::release_itemname() {
  clear_has_itemname();
  if (itemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemname_;
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auctionpurchase::set_allocated_itemname(::std::string* itemname) {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemname) {
    set_has_itemname();
    itemname_ = itemname;
  } else {
    clear_has_itemname();
    itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string itemId = 6;
inline bool auctionpurchase::has_itemid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void auctionpurchase::set_has_itemid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void auctionpurchase::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void auctionpurchase::clear_itemid() {
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    itemid_->clear();
  }
  clear_has_itemid();
}
inline const ::std::string& auctionpurchase::itemid() const {
  return *itemid_;
}
inline void auctionpurchase::set_itemid(const ::std::string& value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
}
inline void auctionpurchase::set_itemid(const char* value) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(value);
}
inline void auctionpurchase::set_itemid(const char* value, size_t size) {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  itemid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* auctionpurchase::mutable_itemid() {
  set_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    itemid_ = new ::std::string;
  }
  return itemid_;
}
inline ::std::string* auctionpurchase::release_itemid() {
  clear_has_itemid();
  if (itemid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemid_;
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void auctionpurchase::set_allocated_itemid(::std::string* itemid) {
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (itemid) {
    set_has_itemid();
    itemid_ = itemid;
  } else {
    clear_has_itemid();
    itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_auctionpurchase

// repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
inline int Sheet_auctionpurchase::auctionpurchase_list_size() const {
  return auctionpurchase_list_.size();
}
inline void Sheet_auctionpurchase::clear_auctionpurchase_list() {
  auctionpurchase_list_.Clear();
}
inline const ::proto_ff::auctionpurchase& Sheet_auctionpurchase::auctionpurchase_list(int index) const {
  return auctionpurchase_list_.Get(index);
}
inline ::proto_ff::auctionpurchase* Sheet_auctionpurchase::mutable_auctionpurchase_list(int index) {
  return auctionpurchase_list_.Mutable(index);
}
inline ::proto_ff::auctionpurchase* Sheet_auctionpurchase::add_auctionpurchase_list() {
  return auctionpurchase_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionpurchase >&
Sheet_auctionpurchase::auctionpurchase_list() const {
  return auctionpurchase_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::auctionpurchase >*
Sheet_auctionpurchase::mutable_auctionpurchase_list() {
  return &auctionpurchase_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_auction_2eproto__INCLUDED
