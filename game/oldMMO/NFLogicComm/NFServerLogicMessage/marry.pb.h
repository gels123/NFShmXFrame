// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marry.proto

#ifndef PROTOBUF_marry_2eproto__INCLUDED
#define PROTOBUF_marry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_marry_2eproto();
void protobuf_AssignDesc_marry_2eproto();
void protobuf_ShutdownFile_marry_2eproto();

class marryconst;
class Sheet_marryconst;
class marrybanquetfireworkDesc;
class marrybanquet;
class Sheet_marrybanquet;
class marrygear;
class Sheet_marrygear;
class marrytimes;
class Sheet_marrytimes;
class marrywarm;
class Sheet_marrywarm;
class marrylevelexpwarmDesc;
class marrylevelexp;
class Sheet_marrylevelexp;

// ===================================================================

class marryconst : public ::google::protobuf::Message {
 public:
  marryconst();
  virtual ~marryconst();

  marryconst(const marryconst& from);

  inline marryconst& operator=(const marryconst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marryconst& default_instance();

  void Swap(marryconst* other);

  // implements Message ----------------------------------------------

  marryconst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marryconst& from);
  void MergeFrom(const marryconst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 constantdata = 2;
  inline bool has_constantdata() const;
  inline void clear_constantdata();
  static const int kConstantdataFieldNumber = 2;
  inline ::google::protobuf::int64 constantdata() const;
  inline void set_constantdata(::google::protobuf::int64 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.marryconst)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_constantdata();
  inline void clear_has_constantdata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 constantdata_;
  ::std::string* stringdata_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marryconst* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marryconst : public ::google::protobuf::Message {
 public:
  Sheet_marryconst();
  virtual ~Sheet_marryconst();

  Sheet_marryconst(const Sheet_marryconst& from);

  inline Sheet_marryconst& operator=(const Sheet_marryconst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marryconst& default_instance();

  void Swap(Sheet_marryconst* other);

  // implements Message ----------------------------------------------

  Sheet_marryconst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marryconst& from);
  void MergeFrom(const Sheet_marryconst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marryconst marryconst_List = 1;
  inline int marryconst_list_size() const;
  inline void clear_marryconst_list();
  static const int kMarryconstListFieldNumber = 1;
  inline const ::proto_ff::marryconst& marryconst_list(int index) const;
  inline ::proto_ff::marryconst* mutable_marryconst_list(int index);
  inline ::proto_ff::marryconst* add_marryconst_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marryconst >&
      marryconst_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marryconst >*
      mutable_marryconst_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marryconst)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marryconst > marryconst_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marryconst* default_instance_;
};
// -------------------------------------------------------------------

class marrybanquetfireworkDesc : public ::google::protobuf::Message {
 public:
  marrybanquetfireworkDesc();
  virtual ~marrybanquetfireworkDesc();

  marrybanquetfireworkDesc(const marrybanquetfireworkDesc& from);

  inline marrybanquetfireworkDesc& operator=(const marrybanquetfireworkDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrybanquetfireworkDesc& default_instance();

  void Swap(marrybanquetfireworkDesc* other);

  // implements Message ----------------------------------------------

  marrybanquetfireworkDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrybanquetfireworkDesc& from);
  void MergeFrom(const marrybanquetfireworkDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 Item = 1;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional int32 Price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int64 Efc = 3;
  inline bool has_efc() const;
  inline void clear_efc();
  static const int kEfcFieldNumber = 3;
  inline ::google::protobuf::int64 efc() const;
  inline void set_efc(::google::protobuf::int64 value);

  // optional int32 Warm = 4;
  inline bool has_warm() const;
  inline void clear_warm();
  static const int kWarmFieldNumber = 4;
  inline ::google::protobuf::int32 warm() const;
  inline void set_warm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.marrybanquetfireworkDesc)
 private:
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_efc();
  inline void clear_has_efc();
  inline void set_has_warm();
  inline void clear_has_warm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_;
  ::google::protobuf::int64 efc_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 warm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrybanquetfireworkDesc* default_instance_;
};
// -------------------------------------------------------------------

class marrybanquet : public ::google::protobuf::Message {
 public:
  marrybanquet();
  virtual ~marrybanquet();

  marrybanquet(const marrybanquet& from);

  inline marrybanquet& operator=(const marrybanquet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrybanquet& default_instance();

  void Swap(marrybanquet* other);

  // implements Message ----------------------------------------------

  marrybanquet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrybanquet& from);
  void MergeFrom(const marrybanquet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 orderItem = 2;
  inline bool has_orderitem() const;
  inline void clear_orderitem();
  static const int kOrderItemFieldNumber = 2;
  inline ::google::protobuf::int64 orderitem() const;
  inline void set_orderitem(::google::protobuf::int64 value);

  // optional int32 orderNum = 3;
  inline bool has_ordernum() const;
  inline void clear_ordernum();
  static const int kOrderNumFieldNumber = 3;
  inline ::google::protobuf::int32 ordernum() const;
  inline void set_ordernum(::google::protobuf::int32 value);

  // optional int64 banquetReward = 4;
  inline bool has_banquetreward() const;
  inline void clear_banquetreward();
  static const int kBanquetRewardFieldNumber = 4;
  inline ::google::protobuf::int64 banquetreward() const;
  inline void set_banquetreward(::google::protobuf::int64 value);

  // optional int32 rewardNum = 5;
  inline bool has_rewardnum() const;
  inline void clear_rewardnum();
  static const int kRewardNumFieldNumber = 5;
  inline ::google::protobuf::int32 rewardnum() const;
  inline void set_rewardnum(::google::protobuf::int32 value);

  // optional int32 makeLoveWarmValue = 6;
  inline bool has_makelovewarmvalue() const;
  inline void clear_makelovewarmvalue();
  static const int kMakeLoveWarmValueFieldNumber = 6;
  inline ::google::protobuf::int32 makelovewarmvalue() const;
  inline void set_makelovewarmvalue(::google::protobuf::int32 value);

  // optional int32 inviteNum = 7;
  inline bool has_invitenum() const;
  inline void clear_invitenum();
  static const int kInviteNumFieldNumber = 7;
  inline ::google::protobuf::int32 invitenum() const;
  inline void set_invitenum(::google::protobuf::int32 value);

  // optional int32 strangerNum = 8;
  inline bool has_strangernum() const;
  inline void clear_strangernum();
  static const int kStrangerNumFieldNumber = 8;
  inline ::google::protobuf::int32 strangernum() const;
  inline void set_strangernum(::google::protobuf::int32 value);

  // optional int32 preludeTime = 9;
  inline bool has_preludetime() const;
  inline void clear_preludetime();
  static const int kPreludeTimeFieldNumber = 9;
  inline ::google::protobuf::int32 preludetime() const;
  inline void set_preludetime(::google::protobuf::int32 value);

  // optional int32 banquetTime = 10;
  inline bool has_banquettime() const;
  inline void clear_banquettime();
  static const int kBanquetTimeFieldNumber = 10;
  inline ::google::protobuf::int32 banquettime() const;
  inline void set_banquettime(::google::protobuf::int32 value);

  // optional int64 makeLoveEfc = 11;
  inline bool has_makeloveefc() const;
  inline void clear_makeloveefc();
  static const int kMakeLoveEfcFieldNumber = 11;
  inline ::google::protobuf::int64 makeloveefc() const;
  inline void set_makeloveefc(::google::protobuf::int64 value);

  // optional int32 warmValue = 12;
  inline bool has_warmvalue() const;
  inline void clear_warmvalue();
  static const int kWarmValueFieldNumber = 12;
  inline ::google::protobuf::int32 warmvalue() const;
  inline void set_warmvalue(::google::protobuf::int32 value);

  // optional int32 warmCycle = 13;
  inline bool has_warmcycle() const;
  inline void clear_warmcycle();
  static const int kWarmCycleFieldNumber = 13;
  inline ::google::protobuf::int32 warmcycle() const;
  inline void set_warmcycle(::google::protobuf::int32 value);

  // optional int64 duplcateId = 14;
  inline bool has_duplcateid() const;
  inline void clear_duplcateid();
  static const int kDuplcateIdFieldNumber = 14;
  inline ::google::protobuf::int64 duplcateid() const;
  inline void set_duplcateid(::google::protobuf::int64 value);

  // repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
  inline int firework_size() const;
  inline void clear_firework();
  static const int kFireworkFieldNumber = 15;
  inline const ::proto_ff::marrybanquetfireworkDesc& firework(int index) const;
  inline ::proto_ff::marrybanquetfireworkDesc* mutable_firework(int index);
  inline ::proto_ff::marrybanquetfireworkDesc* add_firework();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquetfireworkDesc >&
      firework() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquetfireworkDesc >*
      mutable_firework();

  // @@protoc_insertion_point(class_scope:proto_ff.marrybanquet)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_orderitem();
  inline void clear_has_orderitem();
  inline void set_has_ordernum();
  inline void clear_has_ordernum();
  inline void set_has_banquetreward();
  inline void clear_has_banquetreward();
  inline void set_has_rewardnum();
  inline void clear_has_rewardnum();
  inline void set_has_makelovewarmvalue();
  inline void clear_has_makelovewarmvalue();
  inline void set_has_invitenum();
  inline void clear_has_invitenum();
  inline void set_has_strangernum();
  inline void clear_has_strangernum();
  inline void set_has_preludetime();
  inline void clear_has_preludetime();
  inline void set_has_banquettime();
  inline void clear_has_banquettime();
  inline void set_has_makeloveefc();
  inline void clear_has_makeloveefc();
  inline void set_has_warmvalue();
  inline void clear_has_warmvalue();
  inline void set_has_warmcycle();
  inline void clear_has_warmcycle();
  inline void set_has_duplcateid();
  inline void clear_has_duplcateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 orderitem_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 ordernum_;
  ::google::protobuf::int64 banquetreward_;
  ::google::protobuf::int32 rewardnum_;
  ::google::protobuf::int32 makelovewarmvalue_;
  ::google::protobuf::int32 invitenum_;
  ::google::protobuf::int32 strangernum_;
  ::google::protobuf::int32 preludetime_;
  ::google::protobuf::int32 banquettime_;
  ::google::protobuf::int64 makeloveefc_;
  ::google::protobuf::int32 warmvalue_;
  ::google::protobuf::int32 warmcycle_;
  ::google::protobuf::int64 duplcateid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquetfireworkDesc > firework_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrybanquet* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marrybanquet : public ::google::protobuf::Message {
 public:
  Sheet_marrybanquet();
  virtual ~Sheet_marrybanquet();

  Sheet_marrybanquet(const Sheet_marrybanquet& from);

  inline Sheet_marrybanquet& operator=(const Sheet_marrybanquet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marrybanquet& default_instance();

  void Swap(Sheet_marrybanquet* other);

  // implements Message ----------------------------------------------

  Sheet_marrybanquet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marrybanquet& from);
  void MergeFrom(const Sheet_marrybanquet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marrybanquet marrybanquet_List = 1;
  inline int marrybanquet_list_size() const;
  inline void clear_marrybanquet_list();
  static const int kMarrybanquetListFieldNumber = 1;
  inline const ::proto_ff::marrybanquet& marrybanquet_list(int index) const;
  inline ::proto_ff::marrybanquet* mutable_marrybanquet_list(int index);
  inline ::proto_ff::marrybanquet* add_marrybanquet_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquet >&
      marrybanquet_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquet >*
      mutable_marrybanquet_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marrybanquet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquet > marrybanquet_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marrybanquet* default_instance_;
};
// -------------------------------------------------------------------

class marrygear : public ::google::protobuf::Message {
 public:
  marrygear();
  virtual ~marrygear();

  marrygear(const marrygear& from);

  inline marrygear& operator=(const marrygear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrygear& default_instance();

  void Swap(marrygear* other);

  // implements Message ----------------------------------------------

  marrygear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrygear& from);
  void MergeFrom(const marrygear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline ::google::protobuf::int64 title() const;
  inline void set_title(::google::protobuf::int64 value);

  // optional int64 item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional string nickName = 4;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNickNameFieldNumber = 4;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // optional int64 initiate = 5;
  inline bool has_initiate() const;
  inline void clear_initiate();
  static const int kInitiateFieldNumber = 5;
  inline ::google::protobuf::int64 initiate() const;
  inline void set_initiate(::google::protobuf::int64 value);

  // optional int32 usetype = 6;
  inline bool has_usetype() const;
  inline void clear_usetype();
  static const int kUsetypeFieldNumber = 6;
  inline ::google::protobuf::int32 usetype() const;
  inline void set_usetype(::google::protobuf::int32 value);

  // optional int32 useprice = 7;
  inline bool has_useprice() const;
  inline void clear_useprice();
  static const int kUsepriceFieldNumber = 7;
  inline ::google::protobuf::int32 useprice() const;
  inline void set_useprice(::google::protobuf::int32 value);

  // optional int32 AAPrice = 8;
  inline bool has_aaprice() const;
  inline void clear_aaprice();
  static const int kAAPriceFieldNumber = 8;
  inline ::google::protobuf::int32 aaprice() const;
  inline void set_aaprice(::google::protobuf::int32 value);

  // optional string preset = 9;
  inline bool has_preset() const;
  inline void clear_preset();
  static const int kPresetFieldNumber = 9;
  inline const ::std::string& preset() const;
  inline void set_preset(const ::std::string& value);
  inline void set_preset(const char* value);
  inline void set_preset(const char* value, size_t size);
  inline ::std::string* mutable_preset();
  inline ::std::string* release_preset();
  inline void set_allocated_preset(::std::string* preset);

  // optional int64 weddingEffect = 10;
  inline bool has_weddingeffect() const;
  inline void clear_weddingeffect();
  static const int kWeddingEffectFieldNumber = 10;
  inline ::google::protobuf::int64 weddingeffect() const;
  inline void set_weddingeffect(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.marrygear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_initiate();
  inline void clear_has_initiate();
  inline void set_has_usetype();
  inline void clear_has_usetype();
  inline void set_has_useprice();
  inline void clear_has_useprice();
  inline void set_has_aaprice();
  inline void clear_has_aaprice();
  inline void set_has_preset();
  inline void clear_has_preset();
  inline void set_has_weddingeffect();
  inline void clear_has_weddingeffect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 title_;
  ::google::protobuf::int64 item_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 usetype_;
  ::std::string* nickname_;
  ::google::protobuf::int64 initiate_;
  ::google::protobuf::int32 useprice_;
  ::google::protobuf::int32 aaprice_;
  ::std::string* preset_;
  ::google::protobuf::int64 weddingeffect_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrygear* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marrygear : public ::google::protobuf::Message {
 public:
  Sheet_marrygear();
  virtual ~Sheet_marrygear();

  Sheet_marrygear(const Sheet_marrygear& from);

  inline Sheet_marrygear& operator=(const Sheet_marrygear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marrygear& default_instance();

  void Swap(Sheet_marrygear* other);

  // implements Message ----------------------------------------------

  Sheet_marrygear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marrygear& from);
  void MergeFrom(const Sheet_marrygear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marrygear marrygear_List = 1;
  inline int marrygear_list_size() const;
  inline void clear_marrygear_list();
  static const int kMarrygearListFieldNumber = 1;
  inline const ::proto_ff::marrygear& marrygear_list(int index) const;
  inline ::proto_ff::marrygear* mutable_marrygear_list(int index);
  inline ::proto_ff::marrygear* add_marrygear_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrygear >&
      marrygear_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrygear >*
      mutable_marrygear_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marrygear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrygear > marrygear_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marrygear* default_instance_;
};
// -------------------------------------------------------------------

class marrytimes : public ::google::protobuf::Message {
 public:
  marrytimes();
  virtual ~marrytimes();

  marrytimes(const marrytimes& from);

  inline marrytimes& operator=(const marrytimes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrytimes& default_instance();

  void Swap(marrytimes* other);

  // implements Message ----------------------------------------------

  marrytimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrytimes& from);
  void MergeFrom(const marrytimes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline const ::std::string& starttime() const;
  inline void set_starttime(const ::std::string& value);
  inline void set_starttime(const char* value);
  inline void set_starttime(const char* value, size_t size);
  inline ::std::string* mutable_starttime();
  inline ::std::string* release_starttime();
  inline void set_allocated_starttime(::std::string* starttime);

  // optional string endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline const ::std::string& endtime() const;
  inline void set_endtime(const ::std::string& value);
  inline void set_endtime(const char* value);
  inline void set_endtime(const char* value, size_t size);
  inline ::std::string* mutable_endtime();
  inline ::std::string* release_endtime();
  inline void set_allocated_endtime(::std::string* endtime);

  // optional string limit = 4;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline const ::std::string& limit() const;
  inline void set_limit(const ::std::string& value);
  inline void set_limit(const char* value);
  inline void set_limit(const char* value, size_t size);
  inline ::std::string* mutable_limit();
  inline ::std::string* release_limit();
  inline void set_allocated_limit(::std::string* limit);

  // @@protoc_insertion_point(class_scope:proto_ff.marrytimes)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* starttime_;
  ::std::string* endtime_;
  ::std::string* limit_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrytimes* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marrytimes : public ::google::protobuf::Message {
 public:
  Sheet_marrytimes();
  virtual ~Sheet_marrytimes();

  Sheet_marrytimes(const Sheet_marrytimes& from);

  inline Sheet_marrytimes& operator=(const Sheet_marrytimes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marrytimes& default_instance();

  void Swap(Sheet_marrytimes* other);

  // implements Message ----------------------------------------------

  Sheet_marrytimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marrytimes& from);
  void MergeFrom(const Sheet_marrytimes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marrytimes marrytimes_List = 1;
  inline int marrytimes_list_size() const;
  inline void clear_marrytimes_list();
  static const int kMarrytimesListFieldNumber = 1;
  inline const ::proto_ff::marrytimes& marrytimes_list(int index) const;
  inline ::proto_ff::marrytimes* mutable_marrytimes_list(int index);
  inline ::proto_ff::marrytimes* add_marrytimes_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrytimes >&
      marrytimes_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrytimes >*
      mutable_marrytimes_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marrytimes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrytimes > marrytimes_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marrytimes* default_instance_;
};
// -------------------------------------------------------------------

class marrywarm : public ::google::protobuf::Message {
 public:
  marrywarm();
  virtual ~marrywarm();

  marrywarm(const marrywarm& from);

  inline marrywarm& operator=(const marrywarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrywarm& default_instance();

  void Swap(marrywarm* other);

  // implements Message ----------------------------------------------

  marrywarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrywarm& from);
  void MergeFrom(const marrywarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 warmValue = 2;
  inline bool has_warmvalue() const;
  inline void clear_warmvalue();
  static const int kWarmValueFieldNumber = 2;
  inline ::google::protobuf::int32 warmvalue() const;
  inline void set_warmvalue(::google::protobuf::int32 value);

  // optional int64 monsterId = 3;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 3;
  inline ::google::protobuf::int64 monsterid() const;
  inline void set_monsterid(::google::protobuf::int64 value);

  // optional int32 monsterFlashCycle = 4;
  inline bool has_monsterflashcycle() const;
  inline void clear_monsterflashcycle();
  static const int kMonsterFlashCycleFieldNumber = 4;
  inline ::google::protobuf::int32 monsterflashcycle() const;
  inline void set_monsterflashcycle(::google::protobuf::int32 value);

  // optional int32 warmExpValue = 5;
  inline bool has_warmexpvalue() const;
  inline void clear_warmexpvalue();
  static const int kWarmExpValueFieldNumber = 5;
  inline ::google::protobuf::int32 warmexpvalue() const;
  inline void set_warmexpvalue(::google::protobuf::int32 value);

  // optional int32 warmExpCycle = 6;
  inline bool has_warmexpcycle() const;
  inline void clear_warmexpcycle();
  static const int kWarmExpCycleFieldNumber = 6;
  inline ::google::protobuf::int32 warmexpcycle() const;
  inline void set_warmexpcycle(::google::protobuf::int32 value);

  // optional int32 warmGetNum = 7;
  inline bool has_warmgetnum() const;
  inline void clear_warmgetnum();
  static const int kWarmGetNumFieldNumber = 7;
  inline ::google::protobuf::int32 warmgetnum() const;
  inline void set_warmgetnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.marrywarm)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_warmvalue();
  inline void clear_has_warmvalue();
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monsterflashcycle();
  inline void clear_has_monsterflashcycle();
  inline void set_has_warmexpvalue();
  inline void clear_has_warmexpvalue();
  inline void set_has_warmexpcycle();
  inline void clear_has_warmexpcycle();
  inline void set_has_warmgetnum();
  inline void clear_has_warmgetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 warmvalue_;
  ::google::protobuf::int64 monsterid_;
  ::google::protobuf::int32 monsterflashcycle_;
  ::google::protobuf::int32 warmexpvalue_;
  ::google::protobuf::int32 warmexpcycle_;
  ::google::protobuf::int32 warmgetnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrywarm* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marrywarm : public ::google::protobuf::Message {
 public:
  Sheet_marrywarm();
  virtual ~Sheet_marrywarm();

  Sheet_marrywarm(const Sheet_marrywarm& from);

  inline Sheet_marrywarm& operator=(const Sheet_marrywarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marrywarm& default_instance();

  void Swap(Sheet_marrywarm* other);

  // implements Message ----------------------------------------------

  Sheet_marrywarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marrywarm& from);
  void MergeFrom(const Sheet_marrywarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marrywarm marrywarm_List = 1;
  inline int marrywarm_list_size() const;
  inline void clear_marrywarm_list();
  static const int kMarrywarmListFieldNumber = 1;
  inline const ::proto_ff::marrywarm& marrywarm_list(int index) const;
  inline ::proto_ff::marrywarm* mutable_marrywarm_list(int index);
  inline ::proto_ff::marrywarm* add_marrywarm_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrywarm >&
      marrywarm_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrywarm >*
      mutable_marrywarm_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marrywarm)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrywarm > marrywarm_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marrywarm* default_instance_;
};
// -------------------------------------------------------------------

class marrylevelexpwarmDesc : public ::google::protobuf::Message {
 public:
  marrylevelexpwarmDesc();
  virtual ~marrylevelexpwarmDesc();

  marrylevelexpwarmDesc(const marrylevelexpwarmDesc& from);

  inline marrylevelexpwarmDesc& operator=(const marrylevelexpwarmDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrylevelexpwarmDesc& default_instance();

  void Swap(marrylevelexpwarmDesc* other);

  // implements Message ----------------------------------------------

  marrylevelexpwarmDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrylevelexpwarmDesc& from);
  void MergeFrom(const marrylevelexpwarmDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int64 Exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.marrylevelexpwarmDesc)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrylevelexpwarmDesc* default_instance_;
};
// -------------------------------------------------------------------

class marrylevelexp : public ::google::protobuf::Message {
 public:
  marrylevelexp();
  virtual ~marrylevelexp();

  marrylevelexp(const marrylevelexp& from);

  inline marrylevelexp& operator=(const marrylevelexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const marrylevelexp& default_instance();

  void Swap(marrylevelexp* other);

  // implements Message ----------------------------------------------

  marrylevelexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const marrylevelexp& from);
  void MergeFrom(const marrylevelexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
  inline int warm_size() const;
  inline void clear_warm();
  static const int kWarmFieldNumber = 2;
  inline const ::proto_ff::marrylevelexpwarmDesc& warm(int index) const;
  inline ::proto_ff::marrylevelexpwarmDesc* mutable_warm(int index);
  inline ::proto_ff::marrylevelexpwarmDesc* add_warm();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexpwarmDesc >&
      warm() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexpwarmDesc >*
      mutable_warm();

  // @@protoc_insertion_point(class_scope:proto_ff.marrylevelexp)
 private:
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexpwarmDesc > warm_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static marrylevelexp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_marrylevelexp : public ::google::protobuf::Message {
 public:
  Sheet_marrylevelexp();
  virtual ~Sheet_marrylevelexp();

  Sheet_marrylevelexp(const Sheet_marrylevelexp& from);

  inline Sheet_marrylevelexp& operator=(const Sheet_marrylevelexp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_marrylevelexp& default_instance();

  void Swap(Sheet_marrylevelexp* other);

  // implements Message ----------------------------------------------

  Sheet_marrylevelexp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_marrylevelexp& from);
  void MergeFrom(const Sheet_marrylevelexp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
  inline int marrylevelexp_list_size() const;
  inline void clear_marrylevelexp_list();
  static const int kMarrylevelexpListFieldNumber = 1;
  inline const ::proto_ff::marrylevelexp& marrylevelexp_list(int index) const;
  inline ::proto_ff::marrylevelexp* mutable_marrylevelexp_list(int index);
  inline ::proto_ff::marrylevelexp* add_marrylevelexp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexp >&
      marrylevelexp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexp >*
      mutable_marrylevelexp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_marrylevelexp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexp > marrylevelexp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_marry_2eproto();
  friend void protobuf_AssignDesc_marry_2eproto();
  friend void protobuf_ShutdownFile_marry_2eproto();

  void InitAsDefaultInstance();
  static Sheet_marrylevelexp* default_instance_;
};
// ===================================================================


// ===================================================================

// marryconst

// optional int32 id = 1;
inline bool marryconst::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marryconst::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marryconst::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marryconst::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marryconst::id() const {
  return id_;
}
inline void marryconst::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 constantdata = 2;
inline bool marryconst::has_constantdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marryconst::set_has_constantdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marryconst::clear_has_constantdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marryconst::clear_constantdata() {
  constantdata_ = GOOGLE_LONGLONG(0);
  clear_has_constantdata();
}
inline ::google::protobuf::int64 marryconst::constantdata() const {
  return constantdata_;
}
inline void marryconst::set_constantdata(::google::protobuf::int64 value) {
  set_has_constantdata();
  constantdata_ = value;
}

// optional string stringdata = 3;
inline bool marryconst::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marryconst::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marryconst::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marryconst::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& marryconst::stringdata() const {
  return *stringdata_;
}
inline void marryconst::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void marryconst::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void marryconst::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marryconst::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* marryconst::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marryconst::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_marryconst

// repeated .proto_ff.marryconst marryconst_List = 1;
inline int Sheet_marryconst::marryconst_list_size() const {
  return marryconst_list_.size();
}
inline void Sheet_marryconst::clear_marryconst_list() {
  marryconst_list_.Clear();
}
inline const ::proto_ff::marryconst& Sheet_marryconst::marryconst_list(int index) const {
  return marryconst_list_.Get(index);
}
inline ::proto_ff::marryconst* Sheet_marryconst::mutable_marryconst_list(int index) {
  return marryconst_list_.Mutable(index);
}
inline ::proto_ff::marryconst* Sheet_marryconst::add_marryconst_list() {
  return marryconst_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marryconst >&
Sheet_marryconst::marryconst_list() const {
  return marryconst_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marryconst >*
Sheet_marryconst::mutable_marryconst_list() {
  return &marryconst_list_;
}

// -------------------------------------------------------------------

// marrybanquetfireworkDesc

// optional int64 Item = 1;
inline bool marrybanquetfireworkDesc::has_item() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrybanquetfireworkDesc::set_has_item() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrybanquetfireworkDesc::clear_has_item() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrybanquetfireworkDesc::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 marrybanquetfireworkDesc::item() const {
  return item_;
}
inline void marrybanquetfireworkDesc::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 Price = 2;
inline bool marrybanquetfireworkDesc::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrybanquetfireworkDesc::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrybanquetfireworkDesc::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrybanquetfireworkDesc::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 marrybanquetfireworkDesc::price() const {
  return price_;
}
inline void marrybanquetfireworkDesc::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int64 Efc = 3;
inline bool marrybanquetfireworkDesc::has_efc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marrybanquetfireworkDesc::set_has_efc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marrybanquetfireworkDesc::clear_has_efc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marrybanquetfireworkDesc::clear_efc() {
  efc_ = GOOGLE_LONGLONG(0);
  clear_has_efc();
}
inline ::google::protobuf::int64 marrybanquetfireworkDesc::efc() const {
  return efc_;
}
inline void marrybanquetfireworkDesc::set_efc(::google::protobuf::int64 value) {
  set_has_efc();
  efc_ = value;
}

// optional int32 Warm = 4;
inline bool marrybanquetfireworkDesc::has_warm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marrybanquetfireworkDesc::set_has_warm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marrybanquetfireworkDesc::clear_has_warm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marrybanquetfireworkDesc::clear_warm() {
  warm_ = 0;
  clear_has_warm();
}
inline ::google::protobuf::int32 marrybanquetfireworkDesc::warm() const {
  return warm_;
}
inline void marrybanquetfireworkDesc::set_warm(::google::protobuf::int32 value) {
  set_has_warm();
  warm_ = value;
}

// -------------------------------------------------------------------

// marrybanquet

// optional int32 id = 1;
inline bool marrybanquet::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrybanquet::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrybanquet::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrybanquet::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marrybanquet::id() const {
  return id_;
}
inline void marrybanquet::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 orderItem = 2;
inline bool marrybanquet::has_orderitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrybanquet::set_has_orderitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrybanquet::clear_has_orderitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrybanquet::clear_orderitem() {
  orderitem_ = GOOGLE_LONGLONG(0);
  clear_has_orderitem();
}
inline ::google::protobuf::int64 marrybanquet::orderitem() const {
  return orderitem_;
}
inline void marrybanquet::set_orderitem(::google::protobuf::int64 value) {
  set_has_orderitem();
  orderitem_ = value;
}

// optional int32 orderNum = 3;
inline bool marrybanquet::has_ordernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marrybanquet::set_has_ordernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marrybanquet::clear_has_ordernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marrybanquet::clear_ordernum() {
  ordernum_ = 0;
  clear_has_ordernum();
}
inline ::google::protobuf::int32 marrybanquet::ordernum() const {
  return ordernum_;
}
inline void marrybanquet::set_ordernum(::google::protobuf::int32 value) {
  set_has_ordernum();
  ordernum_ = value;
}

// optional int64 banquetReward = 4;
inline bool marrybanquet::has_banquetreward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marrybanquet::set_has_banquetreward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marrybanquet::clear_has_banquetreward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marrybanquet::clear_banquetreward() {
  banquetreward_ = GOOGLE_LONGLONG(0);
  clear_has_banquetreward();
}
inline ::google::protobuf::int64 marrybanquet::banquetreward() const {
  return banquetreward_;
}
inline void marrybanquet::set_banquetreward(::google::protobuf::int64 value) {
  set_has_banquetreward();
  banquetreward_ = value;
}

// optional int32 rewardNum = 5;
inline bool marrybanquet::has_rewardnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void marrybanquet::set_has_rewardnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void marrybanquet::clear_has_rewardnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void marrybanquet::clear_rewardnum() {
  rewardnum_ = 0;
  clear_has_rewardnum();
}
inline ::google::protobuf::int32 marrybanquet::rewardnum() const {
  return rewardnum_;
}
inline void marrybanquet::set_rewardnum(::google::protobuf::int32 value) {
  set_has_rewardnum();
  rewardnum_ = value;
}

// optional int32 makeLoveWarmValue = 6;
inline bool marrybanquet::has_makelovewarmvalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void marrybanquet::set_has_makelovewarmvalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void marrybanquet::clear_has_makelovewarmvalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void marrybanquet::clear_makelovewarmvalue() {
  makelovewarmvalue_ = 0;
  clear_has_makelovewarmvalue();
}
inline ::google::protobuf::int32 marrybanquet::makelovewarmvalue() const {
  return makelovewarmvalue_;
}
inline void marrybanquet::set_makelovewarmvalue(::google::protobuf::int32 value) {
  set_has_makelovewarmvalue();
  makelovewarmvalue_ = value;
}

// optional int32 inviteNum = 7;
inline bool marrybanquet::has_invitenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void marrybanquet::set_has_invitenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void marrybanquet::clear_has_invitenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void marrybanquet::clear_invitenum() {
  invitenum_ = 0;
  clear_has_invitenum();
}
inline ::google::protobuf::int32 marrybanquet::invitenum() const {
  return invitenum_;
}
inline void marrybanquet::set_invitenum(::google::protobuf::int32 value) {
  set_has_invitenum();
  invitenum_ = value;
}

// optional int32 strangerNum = 8;
inline bool marrybanquet::has_strangernum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void marrybanquet::set_has_strangernum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void marrybanquet::clear_has_strangernum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void marrybanquet::clear_strangernum() {
  strangernum_ = 0;
  clear_has_strangernum();
}
inline ::google::protobuf::int32 marrybanquet::strangernum() const {
  return strangernum_;
}
inline void marrybanquet::set_strangernum(::google::protobuf::int32 value) {
  set_has_strangernum();
  strangernum_ = value;
}

// optional int32 preludeTime = 9;
inline bool marrybanquet::has_preludetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void marrybanquet::set_has_preludetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void marrybanquet::clear_has_preludetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void marrybanquet::clear_preludetime() {
  preludetime_ = 0;
  clear_has_preludetime();
}
inline ::google::protobuf::int32 marrybanquet::preludetime() const {
  return preludetime_;
}
inline void marrybanquet::set_preludetime(::google::protobuf::int32 value) {
  set_has_preludetime();
  preludetime_ = value;
}

// optional int32 banquetTime = 10;
inline bool marrybanquet::has_banquettime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void marrybanquet::set_has_banquettime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void marrybanquet::clear_has_banquettime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void marrybanquet::clear_banquettime() {
  banquettime_ = 0;
  clear_has_banquettime();
}
inline ::google::protobuf::int32 marrybanquet::banquettime() const {
  return banquettime_;
}
inline void marrybanquet::set_banquettime(::google::protobuf::int32 value) {
  set_has_banquettime();
  banquettime_ = value;
}

// optional int64 makeLoveEfc = 11;
inline bool marrybanquet::has_makeloveefc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void marrybanquet::set_has_makeloveefc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void marrybanquet::clear_has_makeloveefc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void marrybanquet::clear_makeloveefc() {
  makeloveefc_ = GOOGLE_LONGLONG(0);
  clear_has_makeloveefc();
}
inline ::google::protobuf::int64 marrybanquet::makeloveefc() const {
  return makeloveefc_;
}
inline void marrybanquet::set_makeloveefc(::google::protobuf::int64 value) {
  set_has_makeloveefc();
  makeloveefc_ = value;
}

// optional int32 warmValue = 12;
inline bool marrybanquet::has_warmvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void marrybanquet::set_has_warmvalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void marrybanquet::clear_has_warmvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void marrybanquet::clear_warmvalue() {
  warmvalue_ = 0;
  clear_has_warmvalue();
}
inline ::google::protobuf::int32 marrybanquet::warmvalue() const {
  return warmvalue_;
}
inline void marrybanquet::set_warmvalue(::google::protobuf::int32 value) {
  set_has_warmvalue();
  warmvalue_ = value;
}

// optional int32 warmCycle = 13;
inline bool marrybanquet::has_warmcycle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void marrybanquet::set_has_warmcycle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void marrybanquet::clear_has_warmcycle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void marrybanquet::clear_warmcycle() {
  warmcycle_ = 0;
  clear_has_warmcycle();
}
inline ::google::protobuf::int32 marrybanquet::warmcycle() const {
  return warmcycle_;
}
inline void marrybanquet::set_warmcycle(::google::protobuf::int32 value) {
  set_has_warmcycle();
  warmcycle_ = value;
}

// optional int64 duplcateId = 14;
inline bool marrybanquet::has_duplcateid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void marrybanquet::set_has_duplcateid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void marrybanquet::clear_has_duplcateid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void marrybanquet::clear_duplcateid() {
  duplcateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplcateid();
}
inline ::google::protobuf::int64 marrybanquet::duplcateid() const {
  return duplcateid_;
}
inline void marrybanquet::set_duplcateid(::google::protobuf::int64 value) {
  set_has_duplcateid();
  duplcateid_ = value;
}

// repeated .proto_ff.marrybanquetfireworkDesc firework = 15;
inline int marrybanquet::firework_size() const {
  return firework_.size();
}
inline void marrybanquet::clear_firework() {
  firework_.Clear();
}
inline const ::proto_ff::marrybanquetfireworkDesc& marrybanquet::firework(int index) const {
  return firework_.Get(index);
}
inline ::proto_ff::marrybanquetfireworkDesc* marrybanquet::mutable_firework(int index) {
  return firework_.Mutable(index);
}
inline ::proto_ff::marrybanquetfireworkDesc* marrybanquet::add_firework() {
  return firework_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquetfireworkDesc >&
marrybanquet::firework() const {
  return firework_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquetfireworkDesc >*
marrybanquet::mutable_firework() {
  return &firework_;
}

// -------------------------------------------------------------------

// Sheet_marrybanquet

// repeated .proto_ff.marrybanquet marrybanquet_List = 1;
inline int Sheet_marrybanquet::marrybanquet_list_size() const {
  return marrybanquet_list_.size();
}
inline void Sheet_marrybanquet::clear_marrybanquet_list() {
  marrybanquet_list_.Clear();
}
inline const ::proto_ff::marrybanquet& Sheet_marrybanquet::marrybanquet_list(int index) const {
  return marrybanquet_list_.Get(index);
}
inline ::proto_ff::marrybanquet* Sheet_marrybanquet::mutable_marrybanquet_list(int index) {
  return marrybanquet_list_.Mutable(index);
}
inline ::proto_ff::marrybanquet* Sheet_marrybanquet::add_marrybanquet_list() {
  return marrybanquet_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquet >&
Sheet_marrybanquet::marrybanquet_list() const {
  return marrybanquet_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrybanquet >*
Sheet_marrybanquet::mutable_marrybanquet_list() {
  return &marrybanquet_list_;
}

// -------------------------------------------------------------------

// marrygear

// optional int32 id = 1;
inline bool marrygear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrygear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrygear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrygear::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marrygear::id() const {
  return id_;
}
inline void marrygear::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 title = 2;
inline bool marrygear::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrygear::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrygear::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrygear::clear_title() {
  title_ = GOOGLE_LONGLONG(0);
  clear_has_title();
}
inline ::google::protobuf::int64 marrygear::title() const {
  return title_;
}
inline void marrygear::set_title(::google::protobuf::int64 value) {
  set_has_title();
  title_ = value;
}

// optional int64 item = 3;
inline bool marrygear::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marrygear::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marrygear::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marrygear::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 marrygear::item() const {
  return item_;
}
inline void marrygear::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional string nickName = 4;
inline bool marrygear::has_nickname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marrygear::set_has_nickname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marrygear::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marrygear::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& marrygear::nickname() const {
  return *nickname_;
}
inline void marrygear::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void marrygear::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void marrygear::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marrygear::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* marrygear::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marrygear::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 initiate = 5;
inline bool marrygear::has_initiate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void marrygear::set_has_initiate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void marrygear::clear_has_initiate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void marrygear::clear_initiate() {
  initiate_ = GOOGLE_LONGLONG(0);
  clear_has_initiate();
}
inline ::google::protobuf::int64 marrygear::initiate() const {
  return initiate_;
}
inline void marrygear::set_initiate(::google::protobuf::int64 value) {
  set_has_initiate();
  initiate_ = value;
}

// optional int32 usetype = 6;
inline bool marrygear::has_usetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void marrygear::set_has_usetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void marrygear::clear_has_usetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void marrygear::clear_usetype() {
  usetype_ = 0;
  clear_has_usetype();
}
inline ::google::protobuf::int32 marrygear::usetype() const {
  return usetype_;
}
inline void marrygear::set_usetype(::google::protobuf::int32 value) {
  set_has_usetype();
  usetype_ = value;
}

// optional int32 useprice = 7;
inline bool marrygear::has_useprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void marrygear::set_has_useprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void marrygear::clear_has_useprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void marrygear::clear_useprice() {
  useprice_ = 0;
  clear_has_useprice();
}
inline ::google::protobuf::int32 marrygear::useprice() const {
  return useprice_;
}
inline void marrygear::set_useprice(::google::protobuf::int32 value) {
  set_has_useprice();
  useprice_ = value;
}

// optional int32 AAPrice = 8;
inline bool marrygear::has_aaprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void marrygear::set_has_aaprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void marrygear::clear_has_aaprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void marrygear::clear_aaprice() {
  aaprice_ = 0;
  clear_has_aaprice();
}
inline ::google::protobuf::int32 marrygear::aaprice() const {
  return aaprice_;
}
inline void marrygear::set_aaprice(::google::protobuf::int32 value) {
  set_has_aaprice();
  aaprice_ = value;
}

// optional string preset = 9;
inline bool marrygear::has_preset() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void marrygear::set_has_preset() {
  _has_bits_[0] |= 0x00000100u;
}
inline void marrygear::clear_has_preset() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void marrygear::clear_preset() {
  if (preset_ != &::google::protobuf::internal::kEmptyString) {
    preset_->clear();
  }
  clear_has_preset();
}
inline const ::std::string& marrygear::preset() const {
  return *preset_;
}
inline void marrygear::set_preset(const ::std::string& value) {
  set_has_preset();
  if (preset_ == &::google::protobuf::internal::kEmptyString) {
    preset_ = new ::std::string;
  }
  preset_->assign(value);
}
inline void marrygear::set_preset(const char* value) {
  set_has_preset();
  if (preset_ == &::google::protobuf::internal::kEmptyString) {
    preset_ = new ::std::string;
  }
  preset_->assign(value);
}
inline void marrygear::set_preset(const char* value, size_t size) {
  set_has_preset();
  if (preset_ == &::google::protobuf::internal::kEmptyString) {
    preset_ = new ::std::string;
  }
  preset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marrygear::mutable_preset() {
  set_has_preset();
  if (preset_ == &::google::protobuf::internal::kEmptyString) {
    preset_ = new ::std::string;
  }
  return preset_;
}
inline ::std::string* marrygear::release_preset() {
  clear_has_preset();
  if (preset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preset_;
    preset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marrygear::set_allocated_preset(::std::string* preset) {
  if (preset_ != &::google::protobuf::internal::kEmptyString) {
    delete preset_;
  }
  if (preset) {
    set_has_preset();
    preset_ = preset;
  } else {
    clear_has_preset();
    preset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 weddingEffect = 10;
inline bool marrygear::has_weddingeffect() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void marrygear::set_has_weddingeffect() {
  _has_bits_[0] |= 0x00000200u;
}
inline void marrygear::clear_has_weddingeffect() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void marrygear::clear_weddingeffect() {
  weddingeffect_ = GOOGLE_LONGLONG(0);
  clear_has_weddingeffect();
}
inline ::google::protobuf::int64 marrygear::weddingeffect() const {
  return weddingeffect_;
}
inline void marrygear::set_weddingeffect(::google::protobuf::int64 value) {
  set_has_weddingeffect();
  weddingeffect_ = value;
}

// -------------------------------------------------------------------

// Sheet_marrygear

// repeated .proto_ff.marrygear marrygear_List = 1;
inline int Sheet_marrygear::marrygear_list_size() const {
  return marrygear_list_.size();
}
inline void Sheet_marrygear::clear_marrygear_list() {
  marrygear_list_.Clear();
}
inline const ::proto_ff::marrygear& Sheet_marrygear::marrygear_list(int index) const {
  return marrygear_list_.Get(index);
}
inline ::proto_ff::marrygear* Sheet_marrygear::mutable_marrygear_list(int index) {
  return marrygear_list_.Mutable(index);
}
inline ::proto_ff::marrygear* Sheet_marrygear::add_marrygear_list() {
  return marrygear_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrygear >&
Sheet_marrygear::marrygear_list() const {
  return marrygear_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrygear >*
Sheet_marrygear::mutable_marrygear_list() {
  return &marrygear_list_;
}

// -------------------------------------------------------------------

// marrytimes

// optional int32 id = 1;
inline bool marrytimes::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrytimes::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrytimes::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrytimes::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marrytimes::id() const {
  return id_;
}
inline void marrytimes::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string startTime = 2;
inline bool marrytimes::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrytimes::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrytimes::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrytimes::clear_starttime() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    starttime_->clear();
  }
  clear_has_starttime();
}
inline const ::std::string& marrytimes::starttime() const {
  return *starttime_;
}
inline void marrytimes::set_starttime(const ::std::string& value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void marrytimes::set_starttime(const char* value) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(value);
}
inline void marrytimes::set_starttime(const char* value, size_t size) {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  starttime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marrytimes::mutable_starttime() {
  set_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    starttime_ = new ::std::string;
  }
  return starttime_;
}
inline ::std::string* marrytimes::release_starttime() {
  clear_has_starttime();
  if (starttime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starttime_;
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marrytimes::set_allocated_starttime(::std::string* starttime) {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (starttime) {
    set_has_starttime();
    starttime_ = starttime;
  } else {
    clear_has_starttime();
    starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string endTime = 3;
inline bool marrytimes::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marrytimes::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marrytimes::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marrytimes::clear_endtime() {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    endtime_->clear();
  }
  clear_has_endtime();
}
inline const ::std::string& marrytimes::endtime() const {
  return *endtime_;
}
inline void marrytimes::set_endtime(const ::std::string& value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void marrytimes::set_endtime(const char* value) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(value);
}
inline void marrytimes::set_endtime(const char* value, size_t size) {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  endtime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marrytimes::mutable_endtime() {
  set_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    endtime_ = new ::std::string;
  }
  return endtime_;
}
inline ::std::string* marrytimes::release_endtime() {
  clear_has_endtime();
  if (endtime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endtime_;
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marrytimes::set_allocated_endtime(::std::string* endtime) {
  if (endtime_ != &::google::protobuf::internal::kEmptyString) {
    delete endtime_;
  }
  if (endtime) {
    set_has_endtime();
    endtime_ = endtime;
  } else {
    clear_has_endtime();
    endtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string limit = 4;
inline bool marrytimes::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marrytimes::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marrytimes::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marrytimes::clear_limit() {
  if (limit_ != &::google::protobuf::internal::kEmptyString) {
    limit_->clear();
  }
  clear_has_limit();
}
inline const ::std::string& marrytimes::limit() const {
  return *limit_;
}
inline void marrytimes::set_limit(const ::std::string& value) {
  set_has_limit();
  if (limit_ == &::google::protobuf::internal::kEmptyString) {
    limit_ = new ::std::string;
  }
  limit_->assign(value);
}
inline void marrytimes::set_limit(const char* value) {
  set_has_limit();
  if (limit_ == &::google::protobuf::internal::kEmptyString) {
    limit_ = new ::std::string;
  }
  limit_->assign(value);
}
inline void marrytimes::set_limit(const char* value, size_t size) {
  set_has_limit();
  if (limit_ == &::google::protobuf::internal::kEmptyString) {
    limit_ = new ::std::string;
  }
  limit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* marrytimes::mutable_limit() {
  set_has_limit();
  if (limit_ == &::google::protobuf::internal::kEmptyString) {
    limit_ = new ::std::string;
  }
  return limit_;
}
inline ::std::string* marrytimes::release_limit() {
  clear_has_limit();
  if (limit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = limit_;
    limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void marrytimes::set_allocated_limit(::std::string* limit) {
  if (limit_ != &::google::protobuf::internal::kEmptyString) {
    delete limit_;
  }
  if (limit) {
    set_has_limit();
    limit_ = limit;
  } else {
    clear_has_limit();
    limit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_marrytimes

// repeated .proto_ff.marrytimes marrytimes_List = 1;
inline int Sheet_marrytimes::marrytimes_list_size() const {
  return marrytimes_list_.size();
}
inline void Sheet_marrytimes::clear_marrytimes_list() {
  marrytimes_list_.Clear();
}
inline const ::proto_ff::marrytimes& Sheet_marrytimes::marrytimes_list(int index) const {
  return marrytimes_list_.Get(index);
}
inline ::proto_ff::marrytimes* Sheet_marrytimes::mutable_marrytimes_list(int index) {
  return marrytimes_list_.Mutable(index);
}
inline ::proto_ff::marrytimes* Sheet_marrytimes::add_marrytimes_list() {
  return marrytimes_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrytimes >&
Sheet_marrytimes::marrytimes_list() const {
  return marrytimes_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrytimes >*
Sheet_marrytimes::mutable_marrytimes_list() {
  return &marrytimes_list_;
}

// -------------------------------------------------------------------

// marrywarm

// optional int32 id = 1;
inline bool marrywarm::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrywarm::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrywarm::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrywarm::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marrywarm::id() const {
  return id_;
}
inline void marrywarm::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 warmValue = 2;
inline bool marrywarm::has_warmvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrywarm::set_has_warmvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrywarm::clear_has_warmvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrywarm::clear_warmvalue() {
  warmvalue_ = 0;
  clear_has_warmvalue();
}
inline ::google::protobuf::int32 marrywarm::warmvalue() const {
  return warmvalue_;
}
inline void marrywarm::set_warmvalue(::google::protobuf::int32 value) {
  set_has_warmvalue();
  warmvalue_ = value;
}

// optional int64 monsterId = 3;
inline bool marrywarm::has_monsterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void marrywarm::set_has_monsterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void marrywarm::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void marrywarm::clear_monsterid() {
  monsterid_ = GOOGLE_LONGLONG(0);
  clear_has_monsterid();
}
inline ::google::protobuf::int64 marrywarm::monsterid() const {
  return monsterid_;
}
inline void marrywarm::set_monsterid(::google::protobuf::int64 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional int32 monsterFlashCycle = 4;
inline bool marrywarm::has_monsterflashcycle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void marrywarm::set_has_monsterflashcycle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void marrywarm::clear_has_monsterflashcycle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void marrywarm::clear_monsterflashcycle() {
  monsterflashcycle_ = 0;
  clear_has_monsterflashcycle();
}
inline ::google::protobuf::int32 marrywarm::monsterflashcycle() const {
  return monsterflashcycle_;
}
inline void marrywarm::set_monsterflashcycle(::google::protobuf::int32 value) {
  set_has_monsterflashcycle();
  monsterflashcycle_ = value;
}

// optional int32 warmExpValue = 5;
inline bool marrywarm::has_warmexpvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void marrywarm::set_has_warmexpvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void marrywarm::clear_has_warmexpvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void marrywarm::clear_warmexpvalue() {
  warmexpvalue_ = 0;
  clear_has_warmexpvalue();
}
inline ::google::protobuf::int32 marrywarm::warmexpvalue() const {
  return warmexpvalue_;
}
inline void marrywarm::set_warmexpvalue(::google::protobuf::int32 value) {
  set_has_warmexpvalue();
  warmexpvalue_ = value;
}

// optional int32 warmExpCycle = 6;
inline bool marrywarm::has_warmexpcycle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void marrywarm::set_has_warmexpcycle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void marrywarm::clear_has_warmexpcycle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void marrywarm::clear_warmexpcycle() {
  warmexpcycle_ = 0;
  clear_has_warmexpcycle();
}
inline ::google::protobuf::int32 marrywarm::warmexpcycle() const {
  return warmexpcycle_;
}
inline void marrywarm::set_warmexpcycle(::google::protobuf::int32 value) {
  set_has_warmexpcycle();
  warmexpcycle_ = value;
}

// optional int32 warmGetNum = 7;
inline bool marrywarm::has_warmgetnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void marrywarm::set_has_warmgetnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void marrywarm::clear_has_warmgetnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void marrywarm::clear_warmgetnum() {
  warmgetnum_ = 0;
  clear_has_warmgetnum();
}
inline ::google::protobuf::int32 marrywarm::warmgetnum() const {
  return warmgetnum_;
}
inline void marrywarm::set_warmgetnum(::google::protobuf::int32 value) {
  set_has_warmgetnum();
  warmgetnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_marrywarm

// repeated .proto_ff.marrywarm marrywarm_List = 1;
inline int Sheet_marrywarm::marrywarm_list_size() const {
  return marrywarm_list_.size();
}
inline void Sheet_marrywarm::clear_marrywarm_list() {
  marrywarm_list_.Clear();
}
inline const ::proto_ff::marrywarm& Sheet_marrywarm::marrywarm_list(int index) const {
  return marrywarm_list_.Get(index);
}
inline ::proto_ff::marrywarm* Sheet_marrywarm::mutable_marrywarm_list(int index) {
  return marrywarm_list_.Mutable(index);
}
inline ::proto_ff::marrywarm* Sheet_marrywarm::add_marrywarm_list() {
  return marrywarm_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrywarm >&
Sheet_marrywarm::marrywarm_list() const {
  return marrywarm_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrywarm >*
Sheet_marrywarm::mutable_marrywarm_list() {
  return &marrywarm_list_;
}

// -------------------------------------------------------------------

// marrylevelexpwarmDesc

// optional int32 Id = 1;
inline bool marrylevelexpwarmDesc::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrylevelexpwarmDesc::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrylevelexpwarmDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrylevelexpwarmDesc::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 marrylevelexpwarmDesc::id() const {
  return id_;
}
inline void marrylevelexpwarmDesc::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int64 Exp = 2;
inline bool marrylevelexpwarmDesc::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void marrylevelexpwarmDesc::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void marrylevelexpwarmDesc::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void marrylevelexpwarmDesc::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 marrylevelexpwarmDesc::exp() const {
  return exp_;
}
inline void marrylevelexpwarmDesc::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// marrylevelexp

// optional int32 level = 1;
inline bool marrylevelexp::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void marrylevelexp::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void marrylevelexp::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void marrylevelexp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 marrylevelexp::level() const {
  return level_;
}
inline void marrylevelexp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// repeated .proto_ff.marrylevelexpwarmDesc warm = 2;
inline int marrylevelexp::warm_size() const {
  return warm_.size();
}
inline void marrylevelexp::clear_warm() {
  warm_.Clear();
}
inline const ::proto_ff::marrylevelexpwarmDesc& marrylevelexp::warm(int index) const {
  return warm_.Get(index);
}
inline ::proto_ff::marrylevelexpwarmDesc* marrylevelexp::mutable_warm(int index) {
  return warm_.Mutable(index);
}
inline ::proto_ff::marrylevelexpwarmDesc* marrylevelexp::add_warm() {
  return warm_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexpwarmDesc >&
marrylevelexp::warm() const {
  return warm_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexpwarmDesc >*
marrylevelexp::mutable_warm() {
  return &warm_;
}

// -------------------------------------------------------------------

// Sheet_marrylevelexp

// repeated .proto_ff.marrylevelexp marrylevelexp_List = 1;
inline int Sheet_marrylevelexp::marrylevelexp_list_size() const {
  return marrylevelexp_list_.size();
}
inline void Sheet_marrylevelexp::clear_marrylevelexp_list() {
  marrylevelexp_list_.Clear();
}
inline const ::proto_ff::marrylevelexp& Sheet_marrylevelexp::marrylevelexp_list(int index) const {
  return marrylevelexp_list_.Get(index);
}
inline ::proto_ff::marrylevelexp* Sheet_marrylevelexp::mutable_marrylevelexp_list(int index) {
  return marrylevelexp_list_.Mutable(index);
}
inline ::proto_ff::marrylevelexp* Sheet_marrylevelexp::add_marrylevelexp_list() {
  return marrylevelexp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexp >&
Sheet_marrylevelexp::marrylevelexp_list() const {
  return marrylevelexp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::marrylevelexp >*
Sheet_marrylevelexp::mutable_marrylevelexp_list() {
  return &marrylevelexp_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_marry_2eproto__INCLUDED
