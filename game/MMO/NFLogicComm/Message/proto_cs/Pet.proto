import "ProtoBuffer/Com.proto";
import "ProtoBuffer/ComDefine.proto";
package ProtoBuf;

//======================================通信===================================//
//通知 NOTIFY_PET_MODULE_RSP
message NotifyPetModuleRsp
{
	repeated int32 	fetter = 1;	 		//已领取的羁绊
	repeated PetInfo pets = 2;	 		//所有宠物
	repeated PetHatchInfo hatchs = 3;	//孵化的槽位信息
	repeated int64 	cfgids = 4;			//获得过的宠物
	repeated PetGrow grows = 5;			//宠物专属养成列表(这里是已激活的列表)
}

//更新宠物信息 NOTIFY_PET_RSP
message NotifyPetRsp
{
	optional int32	opt = 1;	 //0：更新所有，1添加，2删除，3更新
	repeated PetInfo pets = 2;	 //宠物数据
}
//更新宠物羁绊 NOTIFY_PET_FETTER_RSP
message NotifyPetFetterRsp
{
	repeated int32 	fetter = 1;	 //已领取的羁绊
}

//更新宠物孵化 NOTIFY_PET_HATCH_RSP
message NotifyPetHatchRsp
{
	repeated PetHatchInfo hatchs = 1;	//孵化的槽位信息
}

//更新获得过的宠物配置id列表 NOTIFY_PET_GETED_LIST_RSP
message NotifyPetGetedListRsp
{
	repeated int64 	cfgids = 1;			//获得过的宠物
}


//1-1:宠物升级请求  CLIENT_PET_LVUP_REQ
message PetLvUpReq
{
	optional int32 instId = 1;	//宠物id
	optional int64 itemid = 2;	//升级消耗物品
}

//1-2:宠物升级返回 CLIENT_PET_LVUP_RSP
message PetLvUpRsp
{
	optional int32 ret = 1;
	optional int32 instId = 2;	//宠物id
}


//2-1: 宠物进阶请求  CLIENT_PET_STEP_LV_REQ
message PetStepLvReq
{
	optional int32 instId = 1;	//宠物id
}

//2-2: 宠物进阶返回 CLIENT_PET_STEP_LV_RSP
message PetStepLvRsp
{
	optional int32 ret = 1;
	optional int32 instId = 2;	//宠物id
}


//3-1: 宠物升星请求  CLIENT_PET_STAR_LV_REQ
message PetStarLvReq
{
	optional int32 instId = 1;	//宠物id
	repeated int32 costPetIds = 2;
	optional int32 isCostItem = 3;
}

//3-2: 宠物升星返回 CLIENT_PET_STAR_LV_RSP
message PetStarLvRsp
{
	optional int32 ret = 1;
	optional int32 instId = 2;	//宠物id
}

//4-1: 宠物添加出战，移除战 CLIENT_PET_FORMATION_REQ
message PetFormationReq
{
	optional int32 opt =1;			//0:添加，1：删除
	optional int32 instId = 2;		//宠物id
	optional int32 slot = 3;		//槽位
}

//4-2: 宠物添加出战，移除战  CLIENT_PET_FORMATION_RSP
message PetFormationRsp
{
	optional int32 ret = 1;
	optional int32 opt = 2;			//0:添加，1：删除
	optional int32 instId = 3;		//宠物id
	optional int32 slot = 4;		//槽位
}

//5-1: 添加宠物到孵化槽位(添加单个，添加所有蛋) CLIENT_PET_ADD_HATCH_REQ 
message PetAddHatchReq
{
	repeated ComPair pair = 1; 		//key:宠物蛋位置，value:槽位	
}

//5-2: 添加宠物到孵化槽位返回(添加单个，添加所有蛋) CLIENT_PET_ADD_HATCH_RSP
message PetAddHatchRsp
{
	optional int32 ret = 1;
	repeated ComPair pair = 2; 		//key:宠物蛋位置，value:槽位	
}

//6-1: 解锁孵化槽位 CLIENT_PET_HATCH_UNLOCK_REQ
message PetHatchUnlockReq
{
	optional int32 slot = 1;
}


//6-2: 解锁孵化槽位返回 CLIENT_PET_HATCH_UNLOCK_RSP
message PetHatchUnlockRsp
{
	optional int32 ret = 1;
	optional int32 slot = 2;
}

//7-1: 领取孵化蛋请求(领取单个,领取所有)  CLIENT_PET_HATCH_EGG_REQ
message PetHatchEggReq
{
	repeated int32 slots = 1;
}

//7-2: 孵化蛋返回 CLIENT_PET_HATCH_EGG_RSP
message PetHatchEggRsp
{
	optional int32 ret = 1;
	optional int32 opt = 2;			//0:单个领取孵化，1：一键孵化
	repeated int32 slot = 3;		
	repeated int32 petInstIds = 4;	//孵化出的宠物
}


//8-1: 激活羁绊请求 CLIENT_PET_ACTIVE_FETTER_REQ
message PetActiveFetterReq
{
	optional int32 id = 1;			//配置羁绊ID
}

//8-2: 激活羁绊返回 CLIENT_PET_ACTIVE_FETTER_RSP
message PetActiveFetterRsp
{
	optional int32 ret = 1;
	optional int32 id = 2;			//配置羁绊ID
}


//9-1:升级技能 CLIENT_PET_SKILL_LV_REQ
message PetSkillLvReq
{
	optional int32 opt = 1; 		//0:主动，1专属，2：被动
	optional int32 instId = 2;		//宠物id
	optional int32 skill_id = 3;
}


//9-2:升级技能返回 CLIENT_PET_SKILL_LV_RSP
message PetSkillLvRsp
{
	optional int32 ret = 1;
	optional int32 opt = 2; 		//0:主动，1专属，2：被动
	optional int32 instId = 3;		//宠物id
	optional int32 skill_id = 4;
	optional int32 lv = 5;			//当前技能等级
}

//10-1:重生宠物 CLIENT_PET_REST_REQ
message PetRestReq
{
	optional int32 instId = 1;
}
//10-2:重生宠物返回 CLIENT_PET_REST_RSP
message PetRestRsp
{
	optional int32 ret = 1;
	optional int32 instId = 2;		//宠物id
	repeated ComPair64 items =3;
	repeated ComPair64 pets = 4;
}

//11-1:分解宠物 CLIENT_PET_DECOMPOSE_REQ
message PetDecomposeReq
{
	repeated int32 instIds = 1;
}

//11-2:分解宠物返回 CLIENT_PET_DECOMPOSE_RSP
message PetDecomposeRsp
{
	optional int32 ret = 1;
}

//12-1:立即孵化 CLIENT_PET_QUICK_HATCH_EGG_REQ
message PetQuickHatchEggReq
{
	optional int32 slot = 1;
}

//12-2:立即孵化返回 CLIENT_PET_QUICK_HATCH_EGG_RSP
message PetQuickHatchEggRsp
{
	optional int32 ret = 1;
	optional int32 slot = 2;
}

//13-1:宠物重生预览 CLIENT_PET_REVIEW_REQ
message PetRestReViewReq
{
	optional int32 instId = 1;
}
//13-2:宠物重生预览返回 CLIENT_PET_REVIEW_RSP
message PetRestReViewRsp
{
	optional int32 ret = 1;
	optional int32 instId = 2;		//宠物id
	repeated ComPair64 items =3;
	repeated ComPair64 pets = 4;
}
//===========================宠物专属===============================
//14-1: 更新宠物专属列表信息 NOTIFY_PET_GROW
message NotifyPetGrow
{
	repeated PetGrow grows = 1;
}
//15-1: 宠物专属操作 PET_GROW_OPT_REQ
message PetGrowOptReq
{
	optional int32 type = 1;	//1:激活，2:锻造(强化) 3(升星) 4重置 5,星级选着额外属性下标(填starindex)
	optional int32 cfgid = 2;
	optional int32 starindex = 3;
}
//15-2: 宠物专属操作返回  PET_GROW_OPT_RSP
message PetGrowOptRsp
{
	optional int32 ret = 1;
	optional int32 type = 2;	//1:激活，2:锻造(强化) 3(升星)，4重置
	optional int32 cfgid = 3;
	optional int32 code = 4;	 //强化返回 0:成功 1失敗
}



//================================================================================//
