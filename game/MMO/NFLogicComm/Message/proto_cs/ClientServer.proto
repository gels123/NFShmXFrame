package proto_ff;

// calm 自定义的fieldoption都在该文件中
import "yd_fieldoptions.proto";
import "common_logic.proto";

import "Com.proto";

//功能解锁返回结果
//LOGIC_TO_CLIENT_FUNCTIONUNLOCK_INFO
message FunctionUnlockInfoRsp
{
  required int32 retCode	= 1;
  required int32 synType  = 2;    //同步类型 1全部解锁功能   2新增解锁功能
  repeated FunctionUnlockInfoData	data = 3;
}

//CLIENT_TO_SERVER_FUNCTIONUNLOCK_GET_REWARD_REQ		= 582;
message FunctionUnlockGetRewardReq
{
  optional uint64 function_id = 1;
}

//SERVER_TO_CLIENT_FUNCTIONUNLOCK_GET_REWARD_RSP		= 583;
message FunctionUnlockGetRewardRsp
{
  optional int32 ret_code = 1;
  optional FunctionUnlockInfoData data = 2;
}

/////////////////////////////////外观系统(包过 翅膀，宝具， 剑灵， 神器系统)//////////////////////////////////////////////

/*enum FacadeType
{
  FACADE_WING_TYPE = 1; //翅膀
  FACADE_TREASURE_TYPE = 2; //宝具
  FACADE_ARTIFACT_TYPE = 3; //神器系统
  FACADE_PARTNER_TYPE = 4; //剑灵(伙伴)系统，
}*/
//外观信息	CLIENT_TO_LOGIC_FACADE_INFO_REQ
message FacadeInfoReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
}

//外观信息	LOGIC_TO_CLIENT_FACADE_INFO_RSP
message FacadeInfoRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 facade_id = 2;		//外观ID
  optional uint32 facade_lev = 3;
  optional uint64 facade_exp = 4;   	//进阶外观经验值
  optional bool use_facade = 5;		//外观是否使用
  optional bool use_soul_item = 6; //器魂道具是否使用
  repeated FacadeFragmentData fragment_data = 7; //羽灵信息
  optional uint64 fight_value = 8; //战力
  repeated FacadeSkillData skill_data = 9; //技能数据
}

//CLIENT_TO_LOGIC_FACADE_SKILL_UNLOCK_NOTIFY = 915; //外观技能解锁
message FacadeSkillUnlockNotify
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional FacadeSkillData skill_data = 2; //技能数据
}

//CLIENT_TO_LOGIC_FACADE_SKILL_LEV_REQ = 916; //技能升级
message FacadeSkillLevReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 skill_id = 2;
}
//LOGIC_TO_CLIENT_FACADE_SKILL_LEV_RSP = 917; //技能升级
message FacadeSkillLevRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
  optional FacadeSkillData skill_data = 3; //技能数据
}

//外观升级请求	CLIENT_TO_LOGIC_FACADE_LEVUP_REQ
message	FacadeLevupReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 material_id = 2;
}

//外观升级请求	LOGIC_TO_CLIENT_FACADE_LEVUP_RSP
message FacadeLevupRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;		//
  optional uint64 facade_id = 3;		//外观ID
  optional uint32 facade_lev = 4;
  optional uint64 facade_exp = 5;   	//进阶外观经验值
  optional uint64 fight_value = 8; //战力
}

//外观穿戴	CLIENT_TO_LOGIC_FACADE_DRESS_REQ
message	FacadeDressReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
}

//外观穿戴	LOGIC_TO_CLIENT_FACADE_DRESS_RSP
message	FacadeDressRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
  optional bool use_facade = 3;		//外观是否使用
  optional uint64 fight_value = 8; //战力
}

//外观重置	CLIENT_TO_LOGIC_FACADE_UNDRESS_REQ
message	FacadeUnDressReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
}

//外观重置	LOGIC_TO_CLIENT_FACADE_UNDRESS_RSP
message	FacadeUnDressRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
  optional bool use_facade = 3;		//外观是否使用
  optional uint64 fight_value = 8; //战力
}

//羽灵使用	CLIENT_TO_LOGIC_FACADE_FRAGEMNT_USE_REQ
message	FacadeFragmentUseReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 fragment_id = 2;
}

//羽灵使用	LOGIC_TO_CLIENT_FACADE_FRAGEMNT_USE_RSP
message	FacadeFragmentUseRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
  repeated FacadeFragmentData fragment_data = 3; //羽灵信息
  optional uint64 fight_value = 4; //战力
}

//外观幻化信息	CLIENT_TO_LOGIC_FACADE_FANTASY_INFO_REQ
message FacadeFantasyInfoReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
}

//幻化信息	LOGIC_TO_CLIENT_FACADE_FANTASY_INFO_RSP
message FacadeFantasyInfoRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  repeated FacadeFantasyData fantasy_data = 5;	//幻化外观ID
  optional uint64 equip_fantasy_id = 6;		//装备的外观ID(幻化中的一个)
}

//幻化激活请求	CLIENT_TO_LOGIC_FACADE_FASTASY_ACTIVE_REQ
message	FacadeFantasyActiveReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 fantasy_id = 2;
}

//幻化激活请求	LOGIC_TO_CLIENT_FACADE_FASTASY_ACTIVE_RSP
message	FacadeFastasyActiveRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional FacadeFantasyData fantasy_data = 2;
  optional uint32 ret_code = 3;
}

//幻化升级请求	CLIENT_TO_LOGIC_FACADE_FASTASY_LEVELUP_REQ
message	FacadeFantasyLevelupReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 fantasy_id = 2;
}

//幻化升级请求	LOGIC_TO_CLIENT_FACADE_FASTASY_LEVELUP_RSP
message	FacadeFastasyLevelupRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional FacadeFantasyData fantasy_data = 2;
  optional uint32 ret_code = 3;
}

//幻化穿戴	CLIENT_TO_LOGIC_FACADE_FANTASY_DRESS_REQ
message	FacadeFastasyDressReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint64 equip_fantasy_id = 2;	//幻化ID
}

//幻化穿戴	LOGIC_TO_CLIENT_FACADE_FANTASY_DRESS_RSP
message	FacadeFastasyDressRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
  optional uint64 equip_fantasy_id = 3;
}

//幻化重置	CLIENT_TO_LOGIC_FACADE_FANTASY_UNDRESS_REQ
message	FacadeFastasyUnDressReq
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
}

//幻化重置	LOGIC_TO_CLIENT_FACADE_FANTASY_UNDRESS_RSP
message	FacadeFastasyUnDressRsp
{
  optional uint32 facade_type = 1; //FacadeType定义在ComDefine里
  optional uint32 ret_code = 2;
}

// 打坐请求 CLIENT_TO_LOGIC_PLAYER_SEAT_REQ
message PlayerSeatReq
{
  optional int32	opt = 1;	// 1 打坐 , 0 取消打坐
}

// 打坐返回 LOGIC_TO_CLIENT_SEAT_RSP
message PlayerSeatRsp
{
  optional int32	opt = 1;	// 1 打坐 , 0 取消打坐
  optional int32 	ret = 2;	// 0 成功, 其他失败
  optional uint64 exp = 3;
  optional uint32 online_hangup_time = 4;
  optional uint64 online_all_exp = 5;
  repeated ComPair64 items = 6;	// 奖励物品
}

// 打坐每分钟经验 返回给客户端 LOGIC_TO_CLIENT_SEAT_EXP_RSP
message PlayerSeatExpRsp
{
  optional uint64 exp = 1;
  optional uint32 online_hangup_time = 2;
  optional uint64 online_all_exp = 3;
  repeated ComPair64 items = 4;	// 奖励物品
}

// 登陆获取挂机数据(客户端登陆进来就发) CLIENT_TO_LOGIC_LOGIN_HANGUP_DATA_REQ
message PlayerLoginHangUpDataReq
{

}

// 登陆获取挂机数据返回 LOGIC_TO_CLIENT_LOGIN_HANGUP_DATA_RSP
message PlayerLoginHangUpDataRsp
{
  optional int32 hangup_time 					= 1;	// 冥想时间(秒)
  optional int32 hangup_surplus_time 			= 2;	// 挂机剩余时间
  optional uint64 add_exp						= 3;	// 加成经验
  optional int32 before_lv					= 4;	// 挂机前等级
  optional int32  after_lv					= 5;	// 挂机后等级
  optional uint64 before_fight				= 6;	// 之前战力
  optional uint64 after_fight					= 7;	// 之后战力
  repeated ComPair64 items					= 8;	// 奖励物品
  repeated int32	add_value					= 9;	// 加成值(vip,特权,神权)
}

// 获取挂机奖励 CLIENT_TO_LOGIC_GET_HANGUP_REWARD_REQ
message PlayerHangUpRewardReq
{
  optional int32 opt = 1; //0 offline reward 1 online reward
}

// 获取挂机奖励 LOGIC_TO_CLIENT_GET_HANGUP_REWARD_RSP
message PlayerHangUpRewardRsp
{
  optional int32 	ret = 2;	// 0 成功, 其他失败
}

//CLIENT_TO_LOGIC_GET_DAILY_TASK_DATA_REQ = 960; //获得Daily活动数据
message GetDailyTaskDataReq
{

}

//LOGIC_TO_CLIENT_GET_DAILY_TASK_DATA_RSP = 961; //获得Daily活动数据
message GetDailyTaskDataRsp
{
  optional DailyTaskAllData data = 1;
}

//LOGIC_TO_CLIENT_UPDATE_DAILY_TASK_NOTIFY = 962; //任务更新, 任务完成，解锁，状态改变
message UpdateDailyTaskNotify
{
  repeated DailyTaskEntry data = 1;
  repeated DailyTaskLimitEntry limit_data = 2;
  repeated DailyTaskRewardEntry reward_data = 3;
  repeated DailyTaskBackEntry back_data = 4;
  optional uint32 daily_score = 5; //当前活跃值
  optional uint64 daily_exp = 6; //用来升级的经验
}

//CLIENT_TO_LOGIC_GET_DAILY_TASK_REWARD_REQ = 964; //请求每日任务奖励
message GetDailyTaskRewardReq
{
  optional int32 reward_id = 1;
}

//LOGIC_TO_CLIENT_GET_DAILY_TASK_REWARD_RSP = 965; //请求每日任务奖励
message GetDailyTaskRewardRsp
{
  optional int32 ret_code = 1;
  optional int32 reward_id = 2;
}

//CLIENT_TO_LOGIC_DAILY_TASK_LEVELUP_REQ = 966; //每日任务养成等级提升
message DailyTaskLevelupReq
{

}

//LOGIC_TO_CLIENT_DAILY_TASK_LEVELUP_RSP = 967; //每日任务养成等级提升
message DailyTaskLevelupRsp
{
  optional int32 ret_code = 1;
  optional uint32 daily_level = 2; //当前等级
  optional uint64 daily_exp = 3; //用来升级的经验
}

//CLIENT_TO_LOGIC_DAILY_LIMIT_TASK_ADD_READY_REQ = 968; //限时任务投名
message DailyLimitTaskAddReadyReq
{
  optional int64 task_id = 1;
}

//LOGIC_TO_CLIENT_DAILY_LIMIT_TASK_ADD_READY_RSP = 969; //限时任务投名
message DailyLimitTaskAddReadyRsp
{
  optional int32 ret_code = 1;
  optional DailyTaskLimitEntry data = 2;
}

//CLIENT_TO_LOGIC_DAILY_BACK_TASK_BACK_REQ = 970; //找回请求
message DailyBackTaskBackReq
{
  optional int64 back_id = 1;
  optional int32 left_time = 2;
  optional int32 external_left_time = 3;
  optional int32 type = 4; //0:use gold //1:use diamond
}

//LOGIC_TO_CLIENT_DAILY_BACK_TASK_BACK_RSP = 971; //找回请求
message DailyBackTaskBackRsp
{
  optional int32 ret_code = 1;
  optional DailyTaskBackEntry data = 2;
}

//CLIENT_TO_LOGIC_DAILY_LIMIT_TASK_ADD_ALL_READY_REQ = 972; //限时任务投名
message DailyLimitTaskAddAllReadyReq
{
}
//LOGIC_TO_CLIENT_DAILY_LIMIT_TASK_ADD_ALL_READY_RSP = 973; //限时任务投名
message DailyLimitTaskAddAllReadyRsp
{
  optional int32 ret_code = 1;
  repeated DailyTaskLimitEntry data = 2;
}

//CLIENT_TO_LOGIC_DAILY_BACK_ALL_TASK_BACK_REQ = 974; //找回请求
message DailyBackTaskBackAllReq
{
  optional int32 type = 1; //0:use gold //1:use diamond
  optional bool back = 2;
  optional bool external_back = 3;
}

//LOGIC_TO_CLIENT_DAILY_BACK_ALL_TASK_BACK_RSP = 975; //找回请求
message DailyBackTaskBackAllRsp
{
  optional int32 ret_code = 1;
  repeated DailyTaskBackEntry data = 2;
}