package proto_ff;
import "Com.proto";
import "ComDefine.proto";

//角色属性数据
message QueryCharacterDetailInfo
{
	optional uint64 cid = 1;				// ID
	optional bytes	name  = 2;				// 名字
	optional uint32 level = 3;				// 等级
	optional uint32 prof = 4;				// 职业
	optional uint64 fight = 5;				// 战斗力
	optional bytes  unionName=6;			// 工会名
	optional uint32  unionDuty=7;			// 工会职务
	optional RoleFacadeProto facade = 8;	// 外观数据
	repeated EquipInfo equips = 9;		// 装备数据
	optional uint32 vipLevel = 11;			// VIP等级
	optional uint64 partnerId = 12;			// 出战的伙伴
	repeated Attr64 attr_lst = 13;
	optional bytes marry_name = 14; //情侣名字
	optional uint32 zid_id = 15; //区分
	repeated BestEQSlotInfo	 best_slots = 16;		//神机装备槽位
}


//通用的 各个功能点战力结构
message FuncFightProto
{
	repeated Attr64 func_fight = 1; //功能点战力, Attr64 结构中 AttrNum 字段表示 must.xlsx-stronger 表 id字段， Attrvalue 字段表示具体的战力值
	optional int64 fight = 2;		//角色战力，取角色身上 A_FIGHT 属性的战力
	optional uint64 cid = 3;		//角色cid
}



//查询用户信息	CLIENT_TO_CENTER_CHARACTER_DETAIL_DATA
message CWCharacterDetailReq
{
	optional uint64 charID = 1;	//需要查看的玩家ID
}

//返回用户信息	CENTER_TO_CLIENT_CHARACTER_DETAIL_DATA
message WCCharacterDetailRsp
{
	optional uint32 ret = 1;							//错误码
	optional QueryCharacterDetailInfo detail = 2;//角色详细数据属性(包括装备)
}

//查询用户简要信息	CLIENT_TO_CENTER_CHARACTER_MINI_DATA
message CWCharacterMiniReq
{
	optional uint64 charID = 1;	//需要查看的玩家ID
	optional string name = 2;	//需要查看的玩家名字( charID 为0的时按 name 查找)
}
//返回用户简要信息	CENTER_TO_CLIENT_CHARACTER_MINI_DATA
message WCCharacterMiniRsp
{
	optional uint32 ret = 1;							//错误码
	optional RolePlayerMiniInfo characterInfo = 2;	//角色简要数据
}

//查询角色功能点战力数据 CLIENT_TO_CENTER_CHAR_FUNC_FIGHT_DATA
message QueryCharFuncFightReq
{
	optional uint64 query_cid = 1; //待查询的角色cid
}
//返回 查询角色功能点战力数据 CENTER_TO_CLIENT_CHAR_FUNC_FIGHT_DATA
message QueryCharFuncFightRsp
{
	optional int32 retcode = 1;		//返回码
	optional FuncFightProto info = 2; //功能点战力数据
}


//服务器内部使用
message QueryLoadMirrorDataCallBack
{
	required uint64 srcID = 1;	//查看方ID
	required uint64 dstID = 2;	//被查看方ID
}

message WGCharacterDetailReq
{
	optional uint64 srcID = 1;	//查看方
	optional uint64 dstID = 2;	//被查看方
}

message GWCharacterDetailRsp
{
	optional uint64 srcID = 1;				//查询方
	optional uint64 dstID = 2;				//被查看方
	optional QueryCharacterDetailInfo detail = 3;	//数据
}

//跨服查询角色详细信息
message QueryCharacterDetailCrossServerReq
{
	required uint64 srcID = 1;	//查看方ID
	required uint64 dstID = 2;	//被查看方ID
}
//跨服查询角色详细返回
message QueryCharacterDetailCrossServerRsp
{
	optional uint64 srcID = 1;				//查询方
	optional uint64 dstID = 2;				//被查看方
	optional QueryCharacterDetailInfo detail = 3;	//数据
}

//跨服查询角色简单信息
message QueryCharacterMiniCrossServerReq
{
	required uint64 srcID = 1;	//查看方ID
	required uint64 dstID = 2;	//被查看方ID
}
//跨服查询角色简单返回
message QueryCharacterMiniCrossServerRsp
{
	optional uint64 srcID = 1;				//查询方
	optional uint64 dstID = 2;				//被查看方
	optional RolePlayerMiniInfo miniInfo = 3;	//数据
}


//跨服查询角色功能点战力数据  SERVER_TO_SERVER_QUERY_CHAR_FUNC_FIGHT_DATA_REQ
message QueryCharFuncFightCrossReq
{
	required uint64 srcID = 1;	//查看方ID
	required uint64 dstID = 2;	//被查看方ID
}

//跨服查询角色功能点战力数据 返回 SERVER_TO_SERVER_QUERY_CHAR_FUNC_FIGHT_DATA_RSP
message QueryCharFuncFightCrossRsp
{
	optional int32 retcode = 1;				//返回码
	optional uint64 srcID = 2;				//查询方
	optional uint64 dstID = 3;				//被查看方
	optional FuncFightProto info = 4;		//功能点战力数据
}