package proto_ff;
import "Com.proto";
import "ComDefine.proto";
import "Scene.proto";
import "DBProxy.proto";


//=================================结构=============================================
//掉落数据
message DupDropProto
{
	repeated ItemProtoInfo pick_item = 1;	//拾取的物品
	optional int64 pick_gold = 2;			//拾取的金币
	optional int64 pick_exp = 3;			//拾取的经验
	optional int32 kill_num = 4;			//击杀怪物数量
	repeated ItemProtoInfo star3 = 5;		//三星掉落
}
//爬塔领奖日志
message DupTowerRecordEntry
{
	optional string name = 1;
	optional uint64 time = 2;
}
//副本队伍邀请信息
message DupTeamInviteState
{
	optional uint64 	cid = 1;
	optional int32 		state = 2;	//0：等待，1同意，2拒绝
}

//=================================类型副本数据==========================================
//1:爬塔副本具体数据更新
message TowerDupData
{
	repeated int64 ids = 1;					//已领取的奖励
}

message PassDupData
{
	optional int64 id = 1;					//通关boss的副本id
	optional int32 star = 2;
}
//幽冥古殿通关最高层数据
message PassGhostData
{
	optional int32 wave = 1;
	optional int32 time = 2;
	repeated int32 recv_ids = 3;			//首通领取的id
}

//镇魂魔域副本信息
message PassMoyuData
{
	repeated int32 recv_layer = 1;			//已领取层数奖励
	optional uint64 day_harm = 2;			//当日伤害
	optional uint64 week_harm = 3;			//本周伤害
	optional uint64 last_day_harm = 4;		//昨日伤害
	optional uint64 last_week_harm = 5;		//上周伤害
}

//九层妖塔数据
message YaoTaData
{
	repeated int32 pass_ids = 1;			//已领副本通关奖励id(都是副本id)
	repeated int32 first_pass_ids = 2;		//首通副本id奖励列表(都是副本id)
}


//2：副本组数据
message ComDupGroupData
{
	optional int32 group = 1;				//副本组
	optional uint64 pass_dupId = 2;			//当前通关的副本ID
	optional int32  enter_num = 3;			//可进入次数
	optional int32 	max_num = 4;			//最大次数
	optional int32 	buy_num = 5;			//购买的次数
	optional int32  star = 6;				//当前副本星级
	optional TowerDupData  tower = 7;		//爬塔
	repeated PassDupData  pass = 8;			//副本通关数据
	optional PassGhostData ghost = 9;		//幽灵古殿
	optional PassMoyuData moyu = 10;		//镇魂魔域
	optional YaoTaData yaota = 11;			//九层妖塔数据
}


//=================================通信===========================================
//1：进入副本请求 ENTER_DUP_REQ
message EnterDupReq
{
	optional uint64 dupId = 1;	//副本ID
	optional int32 mergeNum =2; //副本合并次数
}
//1-1:进入副本返回 ENTER_DUP_RSP
message EnterDupRsp 
{
	optional int32 ret = 1;
	optional uint64 dupId = 2;
	optional int32 	dupTime = 3;	//副本总时常，战前倒计时结束之后开始算时常。-1副本没有时间限制
}

//2-1: 请求副本结果 DUP_RESULT_REQ
message DupResultReq
{	
	
}
//2-2: 副本结果返回 DUP_RESULT_RSP
message DupResultRsp
{
	optional int32 result = 1;			//结果 0 成功，1 失败
	optional uint64 dupId = 2;			//副本ID
	optional int32 star = 3;			//星级
	optional int32 cost_sec = 4;		//消耗的时间，单位：秒
	optional DupDropProto info = 5;		//副本掉落物品
}

//3-1:离开副本请求 DUP_LEAVE_REQ
message DupLeaveReq
{

}
//3-2:离开副本返回 DUP_LEAVE_RSP
message DupLeaveRsp
{
	optional int32 result = 1;
	optional int64 dupId = 2;
}


//4: 上线通知副本数据及副本数据更新 NOTIFY_DUP_RSP
message NotifyDupRsp
{
	optional int32 type = 1;				//0:发送全部数据 1：发送具体副本数据
	repeated ComDupGroupData infos = 2;		//副本组数据
}

//5: 副本运行中界面数据更新 NOTIFY_DUP_RUN_RSP
message NotifyDupRunRsp
{
	optional uint64 dupId = 1;
	optional int32 kill_num = 2;			//是否击杀了怪物
	optional int32 all_num  = 3;			//总数
	optional int32 cur_wave = 4;			//当前波次
	optional int32 max_wave = 5;			//最大波次
	optional int64 cur_hp = 6;				//当前目标血量
	optional int64 max_hp = 7;				//最大目标血量
 	repeated ComPair64 items = 8;			//掉落物品
	optional int32 kill_boss_num = 9;
	optional int32 boss_num = 10;
	optional int64 add_exp = 11;			
	
}


//6: 副本结束状态 NOTIFY_DUP_END_RSP
message NotifyDupEndRsp
{
	optional uint64 dupId = 1;
}


//7:玩家进入副本，战前倒计时 NOTIFY_DUP_BEGIN_CD_RSP (后期在用,先留着)
message NotifyDupBeginCdRsp
{
	optional uint64 sceneId = 1;
	optional uint64 dupId = 2;
	optional uint64 timeEnd = 3;		//倒计时时间戳（未来时间节点 ）
}

//8:领取爬塔奖励 RECV_TOWER_DUP_REQ
message RecvTowerDupReq
{
	optional uint64 	id = 1;
}
//8-1: 领取爬塔奖励 RECV_TOWER_DUP_RSP
message RecvTowerDupRsp
{
	optional int32 result = 1;
	optional uint64 id = 2;
}
//9-1: 购买副本次数请求 BUY_DUP_NUM_REQ
message BuyDupNumReq
{
	optional int32 group = 1;
	optional int32 num = 2;
}
//9-2: 购买副本次数返回 BUY_DUP_NUM_RSP
message BuyDupNumRsp
{
	optional int32 result = 1;
	optional int32 group = 2;
	optional int32 num = 3;
}

//10-1: 查看爬塔领奖记录 DUP_TOWER_RECORD_REQ
message DupTowerRecordReq
{
	optional uint64 id =1;
}
//10-2:爬塔领奖记录返回 DUP_TOWER_RECORD_RSP
message DupTowerRecordRsp
{
	optional uint64 id =1;
	repeated DupTowerRecordEntry entrys = 2;
}

//11-1: 组队副本邀请玩家进副本 DUP_TEAM_INVITE_REQ
message DupTeamInviteReq
{
	required uint64 dupid = 1;		//副本ID
	optional uint32 mergeNum = 2;
}

//11-2: 组队副本邀请返回 DUP_TEAM_INVITE_RSP
message DupTeamInviteRsp
{
	optional int32 	ret = 1;
	required uint64 dupid = 2;		//副本ID
}

//12-2 :组队副本邀请状态更新 NOTIFY_DUP_TEAM_INVITE_STATE_RSP
message NotifyDupTeamInviteStateRsp
{
	optional int32 ret = 1;
	optional int32 type =2;//1初始进入。2 其他更新
	optional int64 dupid = 3;
	repeated DupTeamInviteState infos= 4;
}

//13-1: 组队副本同意拒绝操作 DUP_TEAM_OPT_REQ
message DupTeamOptReq
{
	optional int32 opt = 1;	//1同意。2 拒绝
	optional uint32 mergeNum = 2;
}

//13-2：组队副本同意拒绝操作返回 DUP_TEAM_OPT_RSP 
message DupTeamOptRsp
{
	optional int32 ret = 1;
	optional int32 opt = 2;	//1同意。2 拒绝
}

//14-1: 副本扫荡 DUP_SWEEP_REQ
message DupSweepReq
{
	optional int32 dupid = 1;
	optional int32 num = 2;
	optional int32 show_type = 3; //方便客户端显示，0：默认扫荡，1：仙梦助手扫荡
}

//14-2: 副本扫荡 DUP_SWEEP_RSP
message DupSweepRsp
{
	optional int32 ret = 1;
	optional int32 dupid = 2;
	optional int32 num = 3;
	optional DupDropProto info = 4;		//副本掉落物品
	optional int32 show_type = 5; //方便客户端显示，0：默认扫荡，1：仙梦助手扫荡
}

//===========================幽冥古殿========================
//1-1:幽冥古殿排行榜数据请求 GHOST_DUP_RANK_REQ
message GhostDupRankReq
{
}

//1-2:幽冥古殿排行榜数据返回 GHOST_DUP_RANK_RSP
message GHostDupRankRsp
{
	repeated GHostDupRankInfo ranks = 1; //rank = 0 不在榜内
	optional int32 my_wave = 2;
	optional int32 my_time = 3; 
	optional int32 my_rank = 4;
}

//2-1：幽冥古殿运行数据 NOTIFY_GHOST_DUP_RUN
message NotifyGHostDupRun
{
	optional uint64 fight =1; //评价战力
	optional int32 curwave = 2; //当前波束
	optional int32 num = 3;	 //数量
}
//3-1: 启动波数倒计时(3秒客户端倒计时)  NOTIFY_GHOST_CHG_STEP
message NotifyGHostChgStep
{
	optional int32 time = 1;	//切换波数倒计时 3秒
}
//4-1：幽冥古殿奖励 NOTIFY_GHOST_DUP_RES
message NotifyGHostDupRes
{
	optional int32 curwave = 1;
	optional int32 time =2 ;
	repeated ItemProtoInfo reward = 3;	//奖励的物品	
}
//5-1:领取幽冥古殿首通奖励 GHOST_RECV_PASS_REQ
message GhostRecvPassReq
{
	optional int32 id = 1;
}
//5-2:领取幽冥古殿首通奖励 GHOST_RECV_PASS_RSP
message GhostRecvPassRsp
{
	optional int32 ret = 1;
	optional int32 id = 2;
}

//=============================九层妖塔=====================
//1-1:九层妖塔页面数据请求 YAOTA_REQ
message YaotaReq
{

}

//1-2:通知玩家首通信息 NOTIFY_YAOTA_FIRST_PASS
message NotifyYaotaFirstPass
{
	repeated int32 can_recv_first_pass_ids = 1; //玩家可以领取(首通奖励)集合 
	repeated int32 first_pass_ids = 2;			//首通id列表
}

//2-1:请求首通队伍信息 YAOTA_DUP_FIRST_PASS_INFO_REQ
message YaotaFirstPassInfoReq
{
	optional int32 dupid = 1;
}

//2-2:首通队伍信息返回 YAOTA_DUP_FIRST_PASS_INFO_RSP
message YaotaFirstPassInfoRsp
{
	optional int32 dupid = 1;
	repeated RolePlayerMiniInfo info = 2;
	optional uint64 time = 3; //通关时间
}

//3-1:妖塔领取奖励請求 YAOTA_RECV_REQ
message YaotaRecvReq
{
	optional int32 type = 1; //1：首通奖励，2通关奖励 3：一键领奖
	optional int32 dupId = 2; 
}
//3-1:妖塔领取奖励返回 YAOTA_RECV_RSP
message YaotaRecvRsp
{
	optional int32 ret =1;
	optional int32 type = 2; //1：首通奖励，2通关奖励 3：一键领奖
	optional int32 dupId = 3; 
}
//4-1：通知九层妖塔副本结果 NOTIFY_YAOTA_DUP_RES
message NotifyYaotaDupRes
{
	optional int32 flag = 1; //1 进入下一层，2：当前挑战失败了，客户显示成功结算退出，3：已经到通关最后一关，客户端显示成功，显示结算退出
	repeated ItemProtoInfo reward = 2;	//奖励的物品	
	optional int32 time =3 ;	//通過時間
}

// =========================服务器间通信===================

//2：逻辑服请求进入或者创建副本  L2C_ENTER_DUP_REQ
message L2CEnterDupReq
{
	optional CreateSceneParamProto params = 1;
}

//3：逻辑服创建副本返回给中心服 L2C_CREATE_DUP_RSP
message L2CCreateDupRsp
{
	optional int32 ret = 1;				//返回码
	optional uint64 sceneId = 2;		//副本场景ID
	optional uint64 dupId = 3;			//副本ID
}
//4: 逻辑服副本状态改变通知中心服 L2C_DUP_STATE_CHG_NOTIFY
message L2CDupStateChgNotify
{
	optional uint64 sceneId = 1;		//副本场景ID
	optional uint64 dupId = 2;			//副本ID
	optional int32 state = 3;			//当前状态
	optional uint64 time = 4;			//改变状态的时间
}

//5: 中心服拉取玩家进副本 C2L_PULL_ROLE_ENTER_DUP_NOTIFY
message C2LPullRoleEnterDupNotify
{
	required uint64 char_id = 1;			//角色ID
	required uint64 duplicate_id = 2;		//副本ID
	required uint64 scene_id = 3;			//副本场景ID
	optional uint64 born_id  = 4;			//副本出生点ID
	optional uint32 zoneid = 5;				//区服ID
	optional int32 	tran_tag = 6;			//传送标记
}

//6:逻辑服更新角色副本行为 L2C_DUP_ROLE_ACTION_NOTIFY
message L2CDupRoleActionNotify
{
	optional int64 sceneId = 1;
	optional int64 cid = 2;
	optional int32 actionId = 3;
	optional int32 ret = 4;
}

//7:社交服向中心服 请求进入副本 S2C_ENTER_DUP_REQ
message S2CEnterDupReq
{
	optional CreateSceneParamProto params = 1;
}
//8:中心服返回社交服副本进入结果  C2S_ENTER_DUP_RSP
message C2SEnterDupRsp
{
	optional int32 		ret = 1;
	optional CreateSceneParamProto params = 2;
}
//9:逻辑服玩家领取爬塔奖励通知中心服 L2C_TOWER_RECV_RECORD_REQ
message L2CTowerRecvRecordReq
{
	optional int64 	 id = 1;
	optional int64 	 cid = 2;
	optional string  name = 3;
	optional int64 	 time = 4;
}

//10：逻辑服请求进入或者创建副本到社交服  L2S_ENTER_DUP_REQ
message L2SEnterDupReq
{
	optional CreateSceneParamProto params = 1;
}

//11-1: 组队副本邀请玩家进副本 L2S_DUP_TEAM_INVITE_REQ
message L2SDupTeamInviteReq
{
	required uint64 dupid = 1;		//副本ID
	optional int64 teamid = 2;		//组队ID
	optional int64 cid = 3;			//队长ID
	optional CreateSceneParamProto params = 4; //创建场景参数
}

//12-1：中心服返回创建副本结果给社交服 C2S_CREATE_DUP_RESULT_RSP
message C2SCreateDupResultRsp
{
	optional int32 ret = 1;	//返回码
	optional uint64 sceneid = 2; //副本场景ID
	optional uint64 mapid = 3;	 //场景ID
	optional uint32 logicid = 4; //场景所在逻辑服ID
	optional uint32 zoneid = 5;	 //场景所在的区域ID
	optional int32 keytype = 6;	 //副本keytype
	optional uint64 keyval = 7;	 //副本keyvalue
	optional int32  teamid = 8;	 //队伍id
	optional int32 	dupid = 9;	 //副本ID
	optional bytes str_param = 10;//字符串参数
}

//13-1:社交服通知中心服让玩家进副本 S2C_NOTIFY_CHAR_ENTER_DUP
message S2CNotifyCharEnterDup
{
	optional uint64 cid = 1;
	optional uint64 dupid = 2;    //副本ID
	optional uint64 sceneid = 3;  //副本场景ID
	optional uint64 bornid = 4;	  //出生点ID
	optional int32 	tran_tag = 5; //传送类型
}

//13-1:社交服通知逻辑服让竞技场机器人进副本 NOTIFY_REBOT_ENTER_DUP
message NotifyRebotEnterDup
{
	optional uint64 cid = 1;
	optional uint64 dupid = 2;   //副本ID
	optional uint64 sceneid = 3; //副本场景ID
	optional int32 bornid = 4;	 //出生点索引
	optional int32 teamid = 5;	 //机器人队伍ID
	
}
//14-1: 逻辑服队伍同意或拒绝给社交服 L2S_DUP_TEAM_OPT_REQ
message L2SDupTeamOptReq
{
	optional int32 opt = 1;	//1同意。2 拒绝
	optional uint32 mergeNum = 2;
	optional int32 teamId = 3;
	optional uint64 cid = 4;
}
//15-1: 社交服通知中心服玩家机器人进入副本 S2C_NOFITY_ROLE_REBOT_ENTER_DUP
message S2CNofityRoleRebotEnterDup
{
	optional uint64 cid = 1;
	optional uint64 dupid = 2;   //副本ID
	optional uint64 sceneid = 3; //副本场景ID
	optional int32  bornid = 4;	 //出生点ID
	optional int32  teamid = 5;  //机器人队伍ID
	optional int32 	logicid = 6; //逻辑服id
	optional int32  campid = 7;  //阵营ID
}
//16-1: 中心服玩家机器人进入副本  C2L_ROLE_ROBOT_ENTER_DUP_REQ
message C2LRoleRobotEnterDupReq
{
	optional uint64 cid = 1;
	optional uint64 dupid = 2;   //副本ID
	optional uint64 sceneid = 3; //副本场景ID
	optional int32  bornid = 4;	 //出生点ID
	repeated RoleMirrorData mirrors = 5;	//中心服玩家机器人进入副本 
}

//17-1:逻辑服通知中心服副本结果 L2C_DUP_RESULT_RSP
message L2CDupResultRsp
{
	optional uint64 sceneId = 1;
	optional uint64 dupId = 2;
	optional int32 result = 3;
}
//18-1:中心服通知配置机器人进入副本  C2L_ENTER_REBOT_REQ
message C2LEnterRebotReq
{
	optional uint64 cid = 1;
	optional uint64 dupid = 2;   //副本ID
	optional uint64 sceneid = 3; //副本场景ID
	optional int32 bornid = 4;	 //出生点索引
}
//19-1:中心服通知社交服副本完成  C2S_NOTIFY_DUP_FINISH_RSP
message C2SNotifyDupFinishRsp
{
	optional int32 result = 1;	//返回码
	optional uint64 sceneid = 2; //副本场景ID
	optional uint64 mapid = 3;	 //场景ID
	optional uint32 logicid = 4; //场景所在逻辑服ID
	optional uint32 zoneid = 5;	 //场景所在的区域ID
	optional int32 keytype = 6;	 //副本keytype
	optional uint64 keyval = 7;	 //副本keyvalue
	optional int32  teamid = 8;	 //队伍id
	optional int64 	dupid = 9;	 //副本ID
}

//20-1: C2S_TEAM_ENTER_DUP_REQ  通知社交服让队伍所有人进入副本(所有人都准备就绪，或者进入下一层副本等)
message C2STeamEnterDupReq
{
	optional int32 dupId = 1;
	optional CreateSceneParamProto params = 3; //创建场景参数
	optional int32 isdyn = 4; //是否是动态副本 0：不是，1动态副本(动态副本直接到逻辑服去创建)
}



//========================新增社交服直接让逻辑服创建副本机制，以适应各种跨服玩法======================

//20-1: 社交服通知逻辑服创建副本 S2L_CREATE_DUP_REQ
message S2LCreateDupReq
{
	optional CreateSceneParamProto params = 1;
	optional bytes	ex_params = 2;
}

//20-2: 逻辑服返回创建副本结果到社交服  L2S_CREATE_DUP_RSP
message L2SCreateDupRsp
{
	optional C2SCreateDupResultRsp rsp = 1;
}

//21-1：社交服通知逻辑服玩家进入副本 S2L_NOTIFY_ROLE_ENTER_DUP
message S2LNotifyRoleEnterDup
{
	optional int64  cid = 1;
	optional int32 zid= 2;
	optional uint64 sceneid = 3;
	optional uint64 mapid = 4;	 //场景ID
	optional int32 bornid = 5; 	//出生点
}

//22-1 逻辑服副本产生结果通知社交服  L2S_NOTIFY_DUP_FINISH_RSP
message L2SNotifyDupFinishRsp
{
	optional C2SNotifyDupFinishRsp rsp = 1;
}


//逻辑服请求幽冥古殿排行榜 L2C_GHOST_DUP_RANK_REQ
message L2CGHostDupRankReq
{
	optional uint64 cid = 1;
	optional int32 wave =2 ;
	optional int32 time = 3;
}
//逻辑服更新幽冥古殿排行榜 L2C_UPDATE_GHOST_DUP_RANK_REQ
message L2CUpdateGHostDupRankReq
{
	optional uint64 cid = 1;
	optional int32 wave =2 ;
	optional int32 time = 3;
}
//通关九成妖塔信息 L2C_SYN_PASS_YAOTA_REQ
message L2CSynPassYaotaReq
{
	optional int32 dupid = 1;
	repeated RolePlayerMiniInfo info = 2;
	optional uint64 time = 3; //通关时间
}
//逻辑服请求解散副本中的队伍 NOTIFY_DUP_TEAM_DIS_REQ
message NotifyDupTeamDisReq
{
	optional int32 teamid = 1;
}

//传给妖塔霸主数据到中心服。 LC_NOTIFY_YAOTA_FIRST_PASS_REQ
message LCNotifyYaotaFirstPassReq
{
	optional uint64 cid = 1;
	repeated int32 recved_first_pass_ids = 2;
}

//领取九层妖塔奖励 CL_YAOTA_RECV_REQ
message CLYaotaRecvReq
{
	optional uint64  cid = 1;
	optional int32 dupid = 2;
	optional int32 type = 3;
	repeated int32 first_pass_ids = 4;
}


