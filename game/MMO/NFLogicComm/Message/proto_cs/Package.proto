import "ProtoBuffer/Com.proto";
import "ProtoBuffer/ComDefine.proto";
package ProtoBuf;


//===============================================背包系统===============================================//

//===============================================数据结构===============================================//
//单个物品提示
message ItemTipProto
{
	optional uint64 item_id = 1;	//物品ID
	optional uint32 item_num = 2;	//物品增加的数量
}
//多个物品提示
message MutItemTipProto
{
	repeated ItemTipProto mut_tip = 1;
}

//===============================================交互===============================================//

//1-1:请求背包物品信息(CLIENT_PACKAGE_INFO_REQ)	(原来:CLIENT_TO_LOGIC_PACKAGE_INFO)
message PackageInfoReq
{
	required int32 package_type = 1;		//背包索引
}

//1-2:背包物品信息返回(CLIENT_PACKAGE_INFO_RSP)	(原来)LOGIC_TO_CLIENT_PACKAGE_INFO
message PackageInfoRsp
{
	required int32 package_type = 1;		//背包索引
	required int32 init_all_grid = 2;		//初始格子数
	required int32 expand_grid = 3;			//扩展格子数
	required int32 max_grid = 4;			//格子最大值
	repeated ItemProtoInfo item_list = 5;	//背包内物品列表
}


//2-1:请求整理背包	CLIENT_PACKAGE_SORT_REQ
message PackageSortReq
{
	required int32 package_type = 1;//背包类型
	//空
}

//2-2:整理返回	CLIENT_PACKAGE_SORT_RSP
message PackageSortRsp
{
	required int32 package_type = 1;//背包类型
	required int32 retcode = 2;				//返回码
	repeated ItemProtoInfo item_list = 3;// 整理后背包内物品列表
}

//3-1:仓库和背包之间的操作（物品移进移出）	CLIENT_STORAGE_OPERATE_REQ
message StorageOperateReq
{
	required int32 operate_type = 1;	//操作类型，1 从背包移动物到仓库，2 从仓库移动物品到背包
	required int32 operate_index = 2;	//操作索引 从背包移到仓库时代表 背包索引，  从仓库移动到背包 代表仓库索引
	optional int32 operate_num = 3;		//操作的数量，移动物品的数量
}

//3-2:仓库和背包之间的操作（物品移进移出） CLIENT_STORAGE_OPERATE_RSP
message StorageOperateRsp
{
	required int32 retcode = 1;		//返回码
}


//4: 背包更新 NOTIFY_PACKAGE_UPDATE
message NotifyPackageUpdate
{
	required uint32 package_type = 1;		//背包类型
	repeated ItemProtoInfo item_list = 2;	//更新物品
	optional MutItemTipProto item_tip = 3;  //物品提示
}

//请求使用物品	CLIENT_TO_LOGIC_PACKAGE_USE
message PackageUseReq
{
	required int32 index = 1;			//使用物品所在的格子索引
	optional int32 num = 2;				//使用数量
	repeated uint64 item_lst = 3;		//物品ID列表,对应可选物品box的物品ID列表，每个BOX只能选一个物品
}

//使用物品返回	LOGIC_TO_CLIENT_PACKAGE_USE
message PackageUseRet
{
	required int32 retcode = 1;	//返回码
}

//CLIENT_TO_LOGIC_PACKAGE_SELL = 209;		//出售物品
message PackageSellReq
{
	repeated ItemSellProto sell = 1;		//出售物品信息，出售单个物品才会有数量，一键出售只需要列表中的格子索引
}

//LOGIC_TO_CLIENT_PACKAGE_SELL = 210;		//出售
message PackageSellRet
{
	required int32 retcode = 1;				//返回码
}

// PACKAGE_EXPAND_REQ
message PackageExpandReq
{
	optional int32 package_type = 1;//背包类型
	optional int32 expand_grid = 2; //扩展格子数
}

//背包扩展	PACKAGE_EXPAND_RSP
message PackageExpandRsp
{
	optional int32 ret = 1;
	optional int32 package_type = 2;//背包类型
	optional int32 expand_grid = 3; //扩展格子数
}
//===============================================================================================//