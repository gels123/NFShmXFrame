//神机谷战场
package proto_ff;
import "Com.proto";
import "ComDefine.proto";
import "Skill.proto";

message GVBEnterReq
{
    required uint32 unused=1;
};

message GVBEnterRsp
{
    required uint32 Result=1;
};

//水晶采集请求
message GVBSCrystalCollectReq
{
    required uint32 number=1;//水晶号
};

//提交水晶
message GVBCrystallSubmitReq
{
    required uint64 monsterEid=1;
};

//退出战场请示
message GVBExitReq
{
    required uint32 unused=1;
};
message GVBTransFailed
{
     required uint32 error=1;
};

message GVBMonster
{
 required uint32 team=1;
 required uint64 hp=2;
 required uint64 hpmax=3;
};

message GVBDataReq
{
    required uint32 unused=1;
};
message GVBDatasRsp
{
    required uint32 state=1;//1匹配中，2战斗中
    required uint32 countdown=2;//倒计时
    optional uint32 team1Score=3;//队1的积分
    optional uint32 team2Score=4;//队2的积分
    optional uint32 selfScore=5;//自己的积分
    optional uint32 selfTeam=6;//自己所在的组
    optional uint32 crystalState=7;//水晶状态，1正常，2被人持有，3生成倒计时
    optional uint64 crystalOwner=8;//水晶的持有者
    optional uint32 crystalBornCountdown=9;//水晶生成倒计时时间
    optional uint32 crystalOwnerTeam=10;
    optional uint32 crystalOwnerProfession=11;
    optional GVBMonster m1=12;
    optional GVBMonster m2=13;
    optional GVBMonster m3=14;
    optional uint32 killCount=15;//杀了多少人
    optional uint32 killsCount=16;//连杀次数
    optional uint32 breakKillsCount=17;//打断别人的连杀次数
    optional uint32 interceptCount=18;//拦截了多少次
    optional uint32 crystalCount=19;//运了多少次水晶
};

//请交排名
message GVBRankReq
{
    required uint32 unused=1;
};
message GVBRankPlayerInfo{
    required uint32 rank=1;
    required string name=2;
    required uint32 score=3;
    required uint32 team=4;
    required uint64 cid=5;
}
message GVBRankRsp
{
    repeated GVBRankPlayerInfo players=1;
};



message GVBPlayerInfo{
    required uint32 score=1;
    required uint32 killCount=2;
    required uint32 dieCount=3;
    required uint32 interceptCount=4;
    required uint32 crystalCount=5;//运水晶次数
    required string name=6;
    required uint32 team=7;
    required uint32 killMonsterCount=8;
}

message GVBResultBC{
    required uint32 winTeam=1;
    repeated GVBPlayerInfo players=2;
};

message GVBM1AttrChgBC{
    required GVBMonster m1=1;
};
message GVBM2AttrChgBC{
    required GVBMonster m2=1;
};
message GVBM3AttrChgBC{
   required GVBMonster m3=1;
};


//自己战场信息更新
message GVBSelfInfoUpdateNT{
    optional uint32 killCount=1;//杀了多少人
    optional uint32 killsCount=2;//连杀次数
    optional uint32 breakKillsCount=3;//打断别人的连杀次数
    optional uint32 interceptCount=4;//拦截了多少次
    optional uint32 crystalCount=5;//运了多少次水晶
    optional uint32 selfScore =6;
};


message GVBKillPlayerInfo{
    required uint32 killsCount=1;
    required string name=2;
    required RoleFacadeProto facade=3;
    required uint32 team=4;
};
//广播杀人
message GVBKillPlayerBC{
    required GVBKillPlayerInfo atker=1;
    required GVBKillPlayerInfo behit=2;
};

// message GVBKillPlayerBC
// {
//     required uint32 killerTeam=1;
//     required uint32 killedTeam=2;
//     required uint32 killerProf=3;
//     required uint32 killedProf=4;
// };

//广播资源点数量变更
message GVBResPointChg
{
    required uint32 team1Score=1;
    required uint32 team2Score=2;
};

//广播水晶状态
message GVBCrystalStateBC
{
    required uint32 crystalState=1;//1正常，2被别人采了，3水晶生成倒计时
    required uint32 crystalBornCountdown=2;
    optional uint64 crystalOwner=3;
    optional uint32 crystalOwnerTeam=4;
    optional uint32 crystalOwnerProfession=5;
};

//采集晶
message GVBCrystalCollectReq
{
    required uint32 type=1;//1采集开始，2采集结束，3采集打断
};
message GVBCrystalCollectRsp
{
    required uint32 type=1;//1采集开始，2被别人采了，3水晶生成倒计时
};

message GVBDailyScoreDataReq
{};

message GVBDailyScoreDataRsp
{
   repeated uint32 rewardsState=1;
   required uint32 dailyScore=2;
};

message GVBDailyScoreRewardRcvReq
{
    required uint32 idx=1;
};

message GVBDailyScoreRewardRcvRsp
{
   required uint32 error=1;
   optional uint32 idx=2;
};


message GVBRoomReq{
    required uint64 cid=1;//player id
    required uint64 fromLogicServerId=2;
    required uint64 fromZone=3;
    required uint32 type = 4;
    required bool   enterPrev=5;
    optional uint32 playersMax=6;
    optional uint32 lifeTime=7;//多久后关闭，关闭后两分钟后销毁
    required uint32 mapId=8;
    required uint64 session=9;
    required uint32 actId=10;//活动id
}
message GVBRoomRsp{
    required uint64 cid=1;
    optional uint64 roomId=2;
    required uint32 mapId=3;
    required uint32 type=4;
    required uint64 session=5;
    optional uint32 error=6;//1活动未开启，2已参与过
}
message GVBRoomCloseReq{
    required uint32 type=1;
    required uint64 roomId=2;
    required uint32 option=3;
}

message GVBRoomSetEntryMapReq{
    required uint64 roomId=1;
    required uint32 mapId=2;
    required uint32 fromZone=3;
}

message GVBRoomKickPlayer{
    required uint64 cid=1;
    required uint64 sceneid=2;
}

message GVBRoomUniqueIdReq{
    required uint32 fromZone=1;
    required uint32 fromLogic=2;
    required uint64 sceneId=3;
}
message GVBRoomUniqueIdRsp{
    required uint32 error=1;
    required uint64 sceneId=2;
    required uint64 uniqueId=3;
}


message GVBCrystalOwnerPosReq{

}

message GVBCrystalOwnerPosRsp{
    required Vector3PB pos=1;
}

//////////////WashParty

//错误码 1采集次数已达上限,2泼水次数已达上限,3按摩次数已达上限,4无目标,5状态不允许,6对方已离开


message WPPEnterReq
{
};
message WPPExitReq
{
};
message WPPEnterRsp
{   
    required uint32 collectTimes=1;
    required uint64 expTotal=2;
    required uint32 splashTimes=3;
    required uint32 massageTimes=4;
    required int64 collectCD=5;
    required uint32 wpp_state=6;
};


//双修
message WPPPairPracticeReq
{
    required uint64 target=1;
    required Vector3PB selfPos=2;
    required Vector3PB selfDir=3;
    required Vector3PB targetPos=4;
}
//双修返回
message WPPPairPracticeRsp{
    required uint32 error=1;
}

//按摩
message WPPMassageReq{
    required uint64 target=1;
    required Vector3PB selfPos=2;
    required Vector3PB selfDir=3;
    required Vector3PB targetPos=4;
}

//按摩返回
message WPPMassageRsp{
    required uint32 error=1;
    optional uint32 massageTimes=2;
}

//泼水
message WPPSplashReq{
   required SkillUseReq skillReq=1;
}
//泼水返回
message WPPSplashRsp
{
   required uint32 error=1;
   required uint32 splashTimes=2;
}

//采集返回
message WPPCollectRsp{
    required uint32 error=1;
    optional uint32 collectTimes=2;
}

//定期加经验通知
message WPPExpAddNt
{   
    required uint64 expTotal=1;
    required uint64 expAdd=2;
};
//采集物刷新计时通知
message WPPCollectCDNt{
    required uint64 cd=1;
};

//通知视野开始或退出按摩或双修状态
message WPPActionNt
{
    //1按摩，2双修，3退出按摩，4退出双修
    required uint32 type=1;
    required uint64 cid=2;
    optional uint64 other=3;
    optional Vector3PB pos=4;
    optional Vector3PB dir=5;
};

message WPPCancelCurActReq
{}

message WPPCancelCurActRsp
{
    required uint32 error=1;
}




///////////////////////////////////

message CTPEnterReq{

};

message CTPExitReq
{
};

message CTPPlayerInfo{
    required uint64 cid=1;
    required string name=2;
    required uint32 team=3;
    required uint64 serverId=4;
    required uint32 killCount=5;
    required uint64 atkPower=6;
    required uint32 dieCount=7;
    required uint32 score=8;
    required bool isRebot=9;
};

message CTPResult{
    required uint32 winTeam=1;
    repeated CTPPlayerInfo rank=2;
    required uint32 team1Score=3;
    required uint32 team2Score=4; 
    required bool last=5;
};

message CTPEnterRsp{
    optional uint64 matchStartTime=1;
    optional uint64 readyStartTime=2;
    optional uint64 relifeStartTime=3;
    optional uint64 roundStartTime=4;
    optional uint32 roundStart=5;//--第几轮
    required uint32 team1Score=6;
    required uint32 team2Score=7;
    required uint32 team1Players=8;
    required uint32 team2Players=9;
    required uint32 myScore=10;
    repeated CTPPlayerInfo  rank=11;//当前排名
    required uint32 team=12;//我所在的队
    repeated CTPResult results=13;//每轮的结果
    optional uint32 team1RealPlayers=14;//队1真人数量
    optional uint32 team2RealPlayers=15;
};

message CTPReadyStart{
    required uint64 readyStartTime=1;
};

message CTPRoundStart{
    required uint64 roundStartTime=1;
    required uint32 roundStart=2;//--第几轮
};

message CTPScoreRankNt{
    repeated CTPPlayerInfo rank=1;
    required uint32 team1Score=2;
    required uint32 team2Score=3;
};

message CTPScoreChgNt{
    required uint64 cid=1;
    required uint32 team1Score=2;
    required uint32 team2Score=3;
};


message CTPKillPlayerInfo{
    required uint32 killsCount=1;
    required string name=2;
    required RoleFacadeProto facade=3;
    required uint32 team=4;
};

message CTPKillNt{
    required CTPKillPlayerInfo atker=1;
    required CTPKillPlayerInfo behit=2;
};

message CTPPlayersChgNt{
    required uint32 team1Players=1;
    required uint32 team2Players=2;
    required uint32 team1RealPlayers=3;
    required uint32 team2RealPlayers=4;
};

message GVBEnterError{
    required uint32 errcode=1;
};


//-------------------------------------
message GMADatas{
    optional uint32 remainTime=1;//总时间
    optional uint32 freeTimeRemain=2;//当前免费时间剩余
    optional uint32 freeTime=3;//总免费时间
    optional uint32 privilege=4;
    optional uint64 recvFreeTimePrev=5;//上一次领取免费时间（utc)
    optional bool isPause=6;
    optional uint32 expGet=7;
    optional uint32 getFreeTimeCD=8; //多久后可获取免费时间
    optional int64  expTotal=9;
    optional int64 expAccumulate=10;//特权累积经验
};
message GMABossInfo{
    required uint32 players=1;
    required uint32 posId=2;
    required uint32 cfgId=3;
};
message GMABossInfoReqData{
    required uint32 cfgId=1;
    required uint32 posId=2;
}
message GMABossInfoReq
{
    repeated GMABossInfoReqData list=1;
};
message GMABossInfoRsp
{
    repeated  GMABossInfo bossListInfo=1;
};
message GMABossInfoSingleReq
{
    required uint32 mapId=1;//cfg id
    required uint32 posId=2;//pos id
};
message GMABossInfoSingleRsp
{
    required uint32 players=1;
    required uint32 posId=2;
};
message GMAPauseReq{
     required bool isPause=1;
};
message GMAPauseRsp{
    required bool isPause=1;
};
message GMAPayReq//特权购买
{};
message GMAPayRsp
{
    required uint32 error=1;
    required uint32 privilege=2;
};
message GMAEnterReq
{}
message GMAGotoFloorReq{
    required uint32 posIdx=1;
};
message GMAGotoFloorRsp{
    required uint32 error=1;
};
message GMATimeRechargeReq{//兑换时间
    required uint32 itemId=1;
    required uint32 count=2;
};
message GMATimeRechargeRsp{//兑换时间
    required uint32 error=1;
};
message GMAExitReq
{};
message GMAResultReq
{};
message GMAResultRsp
{
    repeated uint64 itemIds=1;
    repeated uint64 itemCounts=2;
    required uint64 timeUsed=3;
};
message GMADatasReq
{};

message GMAError{
    required uint32 errcode=1;
};

message GMATimeReq{
    required uint32 op =1;//0need ,1not need
};




//////////////////////////NickGod//////////////////

//封神之战全局持久化数据(玩家)
message NGPDPlayer{
    optional uint64 cid=1;
    optional uint32 kills=2;
    optional uint32 scores=3;
    optional uint32 aliveTime=4;
    optional uint32 rank=5;
    optional string name=6;
    optional uint32 nickId=7;
    optional uint64 fight=8;//战力
    repeated uint32 scoreRewardsRecvLog=9;//积分奖励领取记录
    optional uint32 zid=10;
};

message NGPDBattle{
    required uint64 id=1;
    repeated NGPDPlayer players=2;
    optional uint64 saveTime=3;
};
message NGPDAddTBoxOpenLog{
    required string name=1;
    required uint32 itemId=2;
    required uint32 itemCount=3;
    required uint32 zid=4;
};
message NGTBoxItemServerLog{//返回挖宝获得道具全服记录
    message record{
        required string name=1;
        required uint32 itemId=2;
        required uint32 itemCount=3;
    };
    required uint32 zid=1;
    repeated record records=2;
};
message NGPDGlobal{
    repeated NGPDBattle battles=1;
    repeated NGTBoxItemServerLog tboxItemLog=2;
};
message NGPDBattleReq{
    required uint64 session=1;
    required uint32 fromzone=2;
    required uint32 fromlogic=3;
    required uint64 id=4;
};
message NGPDBattleRsp{
    required uint64 session=1;
    optional NGPDBattle pd=2;
};
message NGPDBattleSaveReq{
    required NGPDBattle pd=1;
    optional bool finish=2;
};
message NGPDPlayerPDReq{
    optional uint32 fromZone=1;
    optional uint32 fromLogic=2;
    optional uint64 cid=3;
    required uint64 session=4;
};
message NGPDPlayerPDRsp{
    required uint64 cid=1;
    optional NGPDPlayer p=2;
    required uint64 session=3;
};
message NGPDPlayerSaveReq{
    optional NGPDPlayer p=1;
};
message NGPDRankReq{
    required uint64 cid=1;
};//请求积分排名
message NGPDTBoxOpenServerLogReq//请求挖宝获得道具全服记录
{
    required uint64 cid=1;
}
///////////////client msg//////////////////////

message NGBoss{
    required uint32 cfgId=1;
    required float x=2;
    required float y=3;
    required float z=4;
}
message NGEnterReq{}
message NGExitReq{}//退出
message NGDataRsp{//战场内完整数据
    optional int32 stage=1;//0匹配阶段，1第一阶段，2第二阶段，3第三阶段
    optional int32 countdown=2;//倒计时
    optional bool nxtStageReady=3;//是否准备下一个阶段
    optional uint32 scores=4;//积分
    optional uint32 rank=5;//当前排名(第三阶段才有)
    optional uint32 players=6;//剩余玩家数量(第三阶段才有)
    repeated NGBoss bosses=7;
    optional bool bossesSet=8;
};
message NGRankReq{};//请求积分排名
message NGRankRsp{
    repeated NGPDPlayer players=1;
};
message NGFinishNt{//战场结束通知
    repeated NGPDPlayer rank=1;
};
message NGScoreRewardRecvReq{//领取积分奖励
    required uint32 cfgId=1;
};
message NGScoreRewardRecvRsp{
    required uint32 errCode=1;//0成功了，1无数据，2找不到配置,3积分不足,4已领取过,5背包空间不足
    optional uint32 cfgId=2;//
};
message NGTBoxOpenReq{//开箱请求
    required uint32 boxIdx=1;//从0开始
    required bool useCurrency=2;
};
message NGTBoxOpenRsp{//返回
    required uint32 errcode=1;//1已开启过，2道具不足,3背包已满,4格子索引错误(要小于37),5道具有重复ID
    required uint32 boxIdx=2;
};
message NGDbDatasRsp{//个人数据更新
	optional uint32 layers=1;//探宝当前第几层从0开始
    repeated NGTBoxOpened openedList=2;//已开启过的列表
	optional uint64 weekTime=3;//周一0点的时间(秒）用于周重置进度
	optional uint32 battleWeekTimes=4;//本周封神之战完成的次数
	optional uint64 battleId=5;//当前战场id
	repeated NGTBoxItem itemsLog=6;//挖宝个人记录
	optional uint32 privilege=7;//1表示已开通了宝库特权
	repeated uint32 privilegeRecvLog=8;//特权领取记录
	repeated NGStorePurchaseLog storePurchaseLog=9;//特惠商店够买记录
	optional uint32 payAcc=10;//特惠商店累积充值
	repeated uint32 payAccRecvLog=11;//累充领取记录
	optional uint32 scores=12;//积分
    repeated uint32 scoreRewardsRecvLog=13;//积分奖励领取列表
    optional bool openedListSet=14;
    optional bool itemsListSet=15;
	optional bool privilegeRecvLogSet=16;
	optional bool storePurchaseLogSet=17;
	optional bool payAccRecvLogSet=18;
    optional bool scoreRewardsRecvLogSet=19;//积分奖励领取列表
};

message NGPrivilegePayReq//充特权
{};
message NGPrivilegePayRsp{
    required uint32 errcode=1;//1已开启 2钱不够
};
message NGPrivilegeRewardRecvReq{//领取特权奖励
    required uint32 cfgId=1;
};
message NGPrivilegeRewardRecvRsp{
    required uint32 errcode=1;//0成功, 1背包空间不够，2已领取过,3没有特权,4封神之战次数不够,5今天不能领取
};
message NGStorePurchaseReq{//特惠购买
    required uint32 cfgId=1;
};
message NGStorePurchaseRsp{
    required uint32 errcode=1;//背包空间不够,2钱不够,3购买次数上限 4不在活动期
};

message NGPayAccRecvReq{//累充领取
    required uint32 cfgId=1;
}
message NGPayAccRecvRsp{//
    required uint32 errcode=1;//1累充不够,2已领取过，不能再领,3背包空间不够
    required uint32 cfgId=2;
}
message NGTBoxOpenServerLogReq//请求挖宝获得道具全服记录
{
}
message NGTBoxOpenServerLogRsp
{
    required NGTBoxItemServerLog log=1;
}
message NGTBoxNxtLayerReq
{
}
message NGTBoxNxtLayerRsp{
    required uint32 errcode=1;//1已经是最后一层，2当前层没有完成
}