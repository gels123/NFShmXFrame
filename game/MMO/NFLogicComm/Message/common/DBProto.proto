package proto_ff;

// calm 自定义的fieldoption都在该文件中
import "yd_fieldoptions.proto";
import "Com.proto";
import "ComDefine.proto";

//角色复活 DB数据
message RoleReliveProto
{
  optional uint64 tired_time = 1;		//复活疲劳开始时间
  optional int32 relive_num = 2;		//复活疲劳重置之前 已经累计复活次数
  optional int32 is_tired = 3;		//是否处于疲劳状态
  optional uint64 mapid = 4;			//地图ID
  optional int32 map_relive_num = 5;	//地图上已经复活了的次数
}

//角色DB 基础数据
message RoleDBBaseData
{
  required string name = 1;				// 名字
  required uint32 prof = 2;				// 职业
  required uint32 level = 3;			// 等级
  required int64  exp = 4;				// 经验
  required int64 hp = 5;				// 生命
  required int64 fight = 6;				// 战斗力

  required uint64 createTime = 7;		// 创建时间（UTC时间）
  required uint64 loginTime = 8;		// 上一次登陆的时间（UTC时间）
  required uint64 logoutTime = 9;		// 上一次下线时间（UTC时间）

  required uint64 enter_scene_id = 10;  // 当前进入的场景Id
  required uint64 enter_map_id = 11;	// 当前进入的地图ID
  required float enterposx = 12;		// 当前进入的地图的X坐标
  required float enterposy = 13;		// 当前进入的地图的Y坐标
  required float enterposz = 14;		// 当前进入的地图的Z坐标

  optional uint64 lastsceneid = 15;		//玩家进入上个地图的场景Id
  optional uint64 lastmapid = 16;		//玩家进入上个地图Id
  optional float  lastposx = 17;		//玩家上个地图的x坐标
  optional float  lastposy = 18;		//玩家上个地图的y坐标
  optional float  lastposz = 19;		//玩家上个地图的z坐标

  optional RoleFacadeProto facade = 20; //外观(离线数据用)

  optional uint32 vip_level = 21;		//vip等级

  optional int32 state = 22;			//角色状态，Com.proto 中的枚举 ECState
  optional uint64 hanguptime = 23;		//挂机时长

  optional RoleReliveProto relive = 24; //复活

  optional int64 gold = 25;				//金币
  optional int64 dia = 26;				//钻石
  optional int64 bdia = 27;				//绑钻
  optional int64 magic = 28;			//魔晶
  optional int64 prestige = 29;			//声望
  optional int32 vipLv = 30;			//vip等级
  optional int64 arenacoin		= 31;	//竞技币
  optional int64 godevil_exp	= 32;	//神魔经验
  optional int32 godevil_level  = 33;	//神魔等级
}



//背包DB数据存储结构
message BagItemsDBData
{
  repeated ItemProtoInfo data = 1;
  optional int32      offset = 2;
}

message BagDBSimpleData
{
  optional uint32 package_type = 1;
  optional uint32 expand_num = 2;
}

message RoleDBUnitBagData
{
  optional string table_name = 1;
  optional BagDBSimpleData simple = 2;
  repeated BagItemsDBData parts = 3;
}

//角色DB 背包数据
message RoleDBBagData
{
  repeated RoleDBUnitBagData bags = 1;
}


//角色DB 装备数据
message RoleDBEquipData
{
  repeated EquipInfo infos = 1;
  repeated EquipLvAttrInfo lv_attr = 2;
  optional uint32 stove_level = 3;
  optional uint64 stove_exp = 4;
}

//角色DB 任务数据
message RoleDBTaskData
{

}

// 养成(外观系统)
message GrowPartEntryDBInfo
{
  optional int64 id = 1;
  optional int32 lv = 2;
}
message GrowPartDBData
{
  optional int32 type = 1;
  repeated GrowPartEntryDBInfo  entrys = 2;
  optional int64 curId = 3;
}

message GrowDBData
{
  repeated GrowPartDBData parts = 1;
}

// 游戏迷你部件 存储杂项数据
message DayUseItemData
{
  repeated ComPair64 info = 1;
}

//竞技场数据
message CharacterArenaData
{
  optional uint32 challengeTimes = 1;			//剩余挑战次数
  optional uint64 updateTime = 2;				//刷新的时间
  optional uint32 historyRankId = 3[default=20001];	//历史最高排名
  optional uint32 buyChallengeTimes	= 4;	//今天已购买挑战次数
  repeated ArenaChallResult result = 5; //挑战记录
  repeated ChallArenaReward chall_reward = 7; //竞技场冲榜奖励
  optional int32 allChallengeTimes = 8;
  optional int32 rank_id = 9;
}

message MiniDBData
{
  optional uint64 lastTime = 1;
  optional DayUseItemData useItem = 2;
  optional CharacterArenaData arena_data = 3;
}

message FacadeDataInfo
{
  optional uint32 facade_type = 1;
  optional uint64 facade_id = 2;
  optional uint32 facade_lev = 3;
  optional uint64 facade_exp = 4;
  optional bool use_soul_item = 5;
  optional bool use_facade = 6;
  optional uint64 equip_fantasy_id = 7;
  repeated FacadeFantasyData fantasy_map = 8;
  repeated FacadeFragmentData fragment_map = 9;
  repeated FacadeSkillData skill_data = 10; //技能数据
  optional FacadeSoulData soul_data = 11;
}

message MountDataInfo
{
  optional uint64 mount_id = 1;
  optional uint32 mount_lev = 2;
  optional uint64 mount_exp = 3;
  optional bool use_facade = 4;
  optional uint64 equip_fantasy_id = 5;
  repeated MountFantasyData fantasy_map = 6;
  repeated MountFragmentData fragment_map = 7;
  repeated MountSkillData skill_data = 8;
  repeated MountKunData kun_data = 9;
  repeated MountBloodData blood_data = 10;
  repeated MountBabySlotData baby_slot_data = 11;
  optional uint32 ride_state = 12;
  optional uint64 mount_model_id = 13;
  optional uint64 last_mount_model_id = 14;
}


message DeityDataInfo
{
  optional uint64 deity_id = 1;
  optional uint32 deity_lev = 2;
  optional uint64 deity_exp = 3;
  repeated DeityFantasyData fantasy_map = 4;
  repeated DeityFragmentData fragment_map = 5;
  repeated DeitySkillData skill_data = 6;
  repeated DeityBattleSlotData battle_data = 7;
}

message FacadeDBData
{
  repeated FacadeDataInfo data = 1;
}

//技能详细信息
message SkillDBInfo
{
  optional uint64 skill_id = 1;
  optional int32 level = 2;    //等级
  optional int32 wakeup = 3;    //是否觉醒，1-已觉醒，0-未觉醒
  optional int64 use_msc = 4;    //最近使用时间
}
//技能位置信息
message SkillDBPos
{
  optional uint64 skill_id = 1;
  optional uint32 pos = 2;
  optional int32 use = 3;		//是否自动释放，1-是，0-否
}

//技能进阶位置信息
message SkillDBAdvPos
{
  optional uint32 pos = 1;
  optional uint32 advance = 2;
  optional uint32 unlock = 3;
}
//技能进阶信息
message SkillDBAdvInfo
{
  optional int32 advance = 1;    //进阶类型 1-火，2-雷，3-风
  optional int32 level = 2;      //等级
}

//技能位置列表信息
message SkillDBGroup
{
  optional uint32 group = 1;
  optional int32  chg = 2;        //技能组最近切换时间
  repeated SkillDBPos pos_lst = 3;
}
//宠物技能CD
message PetSkillCdDB
{
  optional uint64 skill_id = 1;
  optional uint64 use_msec = 2;
  optional int64 pet_instid = 3;
}

//技能数据
message SkillDBData
{
  repeated SkillDBInfo info_lst = 1;
  repeated SkillDBGroup group_lst = 2;
  optional uint32 group = 3;					//当前使用的技能组
  optional uint64 last_group = 4;				//最近一次切换技能组的时间
  repeated SkillDBAdvPos adv_pos = 5;			//
  repeated SkillDBAdvInfo adv_info = 6;
  optional uint32 cur_advpos = 7;
  repeated PetSkillCdDB pet_cd = 8;
}

message GodRelicsActivityData
{
  repeated GodRelicsTaskGroupEntry group_data = 1;
  optional int64 cur_group_id = 2;
}

message MiniActivityDBData
{
  optional GodRelicsActivityData god_relics_data = 1;
  optional DailyTaskAllData daily_data = 2;
}

//副本数据
message DupRecord
{
  optional uint64 dupId = 1;
  optional int32  star = 2;		//最高星级
}

message DupGroupData
{
  optional int32  group = 1;			//副本组
  optional int32  enterNum = 2;		//已进入次数
  optional int32 	buyNum = 3;			//已购买次数
  optional int32  useNum = 4;			//使用物品次数
  optional uint64 lastFresh = 5;		//上次刷新时间
}
message DupTowerDBRecordEntry
{
  optional string name = 1;
  optional uint64 time = 2;
  optional uint64 cid = 3;
}

message DupTowerDBRecord
{
  optional uint64  id = 1;
  repeated DupTowerDBRecordEntry entrys = 2;
}

message DupTowerDBData
{
  repeated uint64 ids = 1;				//已领取的ids
}


message DupDBData
{
  repeated DupRecord		record = 1;			//副本历史记录
  repeated DupGroupData 	groups = 2;			//副本组数据
  optional DupTowerDBData	 tower = 3;			//爬塔数据
}



//buff详细信息
message BuffDBInfo
{
  optional uint64 buffid = 1;         //buff id
  optional uint64 index = 2;          //索引
  optional uint64 skillid = 3;        //技能ID
  optional uint32 skilllev = 4;       //技能等级
  optional bool is_forever = 5;       //是否是永久buff
  optional int64 startmsec = 6;      //buff开始的时间，单位：unix毫秒
  optional bool is_effect = 7;        //是否生效
  optional int64 param1 = 8;          //效果参数1
  optional int64 param2 = 9;          //效果参数2
  optional int64 extramsec = 10;      //额外时间，单位：毫秒
  optional int32 is_end = 11;			//是否结束了
}
//buff 冷却时间信息
message BuffDBCdInfo
{
  optional uint64 buffid = 1;         //buff id
  optional uint64 lastmsec = 2;       //buff最近一次的冷却时间，单位：unix毫秒
}
//buff数据
message BuffDBData
{
  repeated BuffDBInfo info_lst = 1;
  repeated BuffDBCdInfo cd_lst = 2;
}

//打boss
message BossSimpleInfoDB
{
  optional int32  boss_type 		= 1;		// 组类型
  optional int32	cur_num			= 2;		// 当前使用的次数
  optional int32  back_num		= 4;		// 找回次数
  optional int32 	back_max_num	= 5;		// 找回最大次数
  optional int32 	enter_num		= 6;		// 进场景次数
  optional int32  use_item_num	= 7;		// 使用物品加成的次数
}


message BossDBData
{
  repeated BossSimpleInfoDB infos = 1;
  optional uint64 	lastTime 	= 2;
  repeated int64 		attents 	= 3;
}

message VipDBData
{
  optional int32 	vipExp = 1;		//当前VIP经验
  optional int32 	expDiamond = 2;	//剩余加经验的砖石
}


//角色总属性 DB数据
message AttrDBData
{
  repeated Attr64 attr_lst = 1;
}

message PetDBRecord
{
  optional int32 instId = 1;
  repeated ComPair64 costItem = 2;
  repeated ComPair64 costPet = 3; //消耗的宠物
}

message PetDBData
{
  repeated int32 	fetter = 1;	 //已领取的羁绊
  repeated PetInfo pets = 2;	 //所有宠物
  repeated PetHatchInfo hatchs = 3;	//孵化的槽位信息
  repeated PetDBRecord records = 4;   //培养记录
  repeated int64 	cfgids = 5;			//获得过的宠物
}

//商城DB信息
message MallDBInfo
{
  optional int64 id = 1;		//商品ID
  optional uint32 num = 2;		//已购买数量
  optional uint64 time = 3;	//最近购买时间
}

//角色商城 DB数据
message MallDBData
{
  repeated MallDBInfo day = 1;
  repeated MallDBInfo week = 2;
  repeated MallDBInfo forever = 3;
}


//护送数据
message ConvoyData
{
  optional int32 daynum 		= 1; 	//已护送次数
  optional int32 escortid  	= 2;	//当前镖车ID
  optional uint64 endTime 	= 3; 	//当前任务结束时间
  optional int32 freeNum 		= 4;	//已使用免费次数
  optional int32 genEscortId  = 5;	//随机到的镖车ID
  optional uint64 resetTime 	= 6; 	//上次重置次数时间
}

//玄功真甲
message ArmorDBData
{
  repeated ArmorInfo infos = 1;
}

//boss助战
message AssistDBData
{
  optional uint64 resetTime 	= 1; 	//上次重置次数时间
  optional int32 dayPrestige = 2;		//今日获得声望
  optional int32 sendNum = 3;			//当日发起
  optional int32 helpNum = 4;			//当日帮助者领取的礼包数
  optional int32 allSendNum = 5;		//完成求助总次数
  optional int32 allHelpNum = 6;		//完成援助总次数
}

message TitleDBData
{
  optional uint64 cur_wearing_title = 1;
  repeated TitleInfo data = 2;
}

//神魔 条件数据
message GodEvilCondDBProto
{
  optional int32 id = 1;			//条件id
  optional int32 state = 2;		//状态，0-不可领取，1-可领取，2-已领取
  optional int32 cur = 3;			//当前条件值
}
//神魔 多个条件数据
message GodEvilMultCondDBProto
{
  repeated GodEvilCondDBProto lst = 1;
}
//神魔任务数据
message GodEvilTaskDBProto
{
  optional int32 stage = 1;					//当前阶段
  optional GodEvilMultCondDBProto cond = 2;	//条件
  optional int32 finish = 3;					//是否完成所有的神魔任务
}

//神魔 DB数据
message GodEvilDBData
{
  optional int32 fetch = 1;				//是否已领取预告奖励
  optional GodEvilTaskDBProto task = 2;	//神魔任务
  optional int32 type = 3;				//激活的神魔类型
  optional uint64 last_time = 5;			//最近一次神魔变身的时间
}

// 角色DB数据
message RoleDBData
{
  required uint64                 cid					= 1[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_PRIMARYKEY];	// role cid
  required uint32                 zid					= 2[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // 区服ID
  optional uint32					uid					= 3[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // UID
  optional RoleDBBaseData         base				= 4;    // 基础数据
  optional RoleDBBagData          bag				    = 5;    // 背包数据
  optional RoleDBEquipData	    equip				= 6;	// 装备数据
  optional CharacterDBTaskData	task				= 7;    // 任务数据
  optional FunctionUnlockInfo unlockinfo				= 8;	// 功能解锁
  optional GrowDBData				grow				= 9;	// 养成数据
  optional MiniDBData				mini				= 10;	// 迷你部件数据
  optional FacadeDBData			facade              = 11;	// 外观部件数据
  optional SkillDBData            skill               = 12;   // 技能数据
  optional MiniActivityDBData mini_activity           = 13;   // 杂七杂八活动数据
  optional DupDBData		        dup                 = 14;	// 副本
  optional BuffDBData             buff                = 15;   // buff数据
  optional BossDBData				boss				= 16;	// boss
  optional VipDBData				vip					= 17;	// vip
  optional AttrDBData				attr				= 18;	// 属性数据
  optional MountDataInfo    		mount 				= 19;	//坐骑
  optional DeityDataInfo			deity				= 20;	//天神
  optional PetDBData				pet					= 21;	//宠物
  optional MallDBData				mall				= 22;   // 商城
  optional ConvoyData				convoy				= 23;	//护送
  optional ArmorDBData			armor				= 24;	//玄功真甲
  optional AssistDBData			assist				= 25;	//boss助战
  optional TitleDBData      title       = 26;
}

//--------------------------- 角色镜像数据  ------------------------------
//角色镜像数据
message RoleMirrorData
{
  enum Type
  {
    Role = 1;		//竞技场玩家镜像
    Rebot = 2;		//竞技场机器人
    TeamRole = 3;   //组队玩家镜像
    TeamRebot = 4;	//组队机器人
  }

  optional uint64 cid					= 1;//角色ID, 当是玩家时是玩家cid, 当是机器人时表示机器人表配置ID
  optional int32 type					= 2;//类型，用于区分玩家和机器人  1-竞技场玩家镜像，2-竞技场机器人, 3-组队玩家镜像, 4-组队机器人
  optional uint32 teamid				= 3;//队伍ID,组队机器人才需要赋值
  optional uint32 zid					= 4;//区服ID，玩家镜像需要赋值
  optional AttrDBData attr			= 5;//总属性
  optional SkillDBData skill          = 6;//技能数据
  optional RoleDBBaseData base		= 7;//基础数据（包含外观数据）
}


//-------------------------------- 帮派 ----------------------------------------

//帮派单个成员信息
message FactionMemDBProto
{
  optional uint64 cid = 1;						//玩家ID
  optional int32   duty = 2;						//职位
  optional uint64 join_time = 3;					//加入时间
  optional uint32 total_contri = 4;				//总贡献
}

//帮派成员信息
message FactionMultMemDBProto
{
  repeated FactionMemDBProto mem_lst = 1;
}

//帮派单个申请信息
message FactionApplyDBProto
{
  optional uint64 cid = 1;
  optional uint64 time = 2;
}
//帮派申请信息
message FactionMultApplyDBProto
{
  repeated FactionApplyDBProto apply_lst = 1;
}
//帮派单个记录
message FactionRecordDBProto
{
  optional uint64 cid = 1;
  optional uint64 time = 2;
  optional int32 op = 3;
  optional int64 param1 = 4;
}
//帮派记录
message FactionMutRecordDBProto
{
  repeated FactionRecordDBProto record_lst = 1;
}

//帮派DB基础数据
message FactionDBBase
{
  optional uint32 faction_id					= 1;	//帮派ID
  optional bytes name							= 2;	//帮派名字
  optional uint64 leader_id					= 3;	//会长
  optional uint64 fight						= 4;	//战力
  optional bytes notice						= 5;	//公告
  optional uint64 last_notice_time			= 6;	//最近修改公告的时间
  optional uint32 level						= 7;	//帮派等级
  optional uint64 exp							= 8;	//帮派经验
  optional uint64 create_time					= 9;	//创建时间
  optional uint64 proxy_id					= 10;	//代理帮主
  optional uint64 proxy_time					= 11;	//代理时间
  optional int32 grade						= 12;	//帮派评级
  optional FactionMultMemDBProto member		= 13;	//帮派成员
  optional FactionMultApplyDBProto apply      = 14;   //帮派申请
  optional FactionMutRecordDBProto record		= 15;   //帮派记录
}

//帮派其他数据
message FactionDBData
{

}

//帮派所有的DB数据
message FactionAllDBData
{
  optional uint32 faction_id	= 1;	//帮派ID
  optional FactionDBBase base = 2;	//基础数据
  optional FactionDBData data = 3;	//其他数据
}




//------------------------------------ 登录 -------------------------------------


// 角色列表请求 DB_ROLE_LIST_REQ
message RoleListDBReq
{
  required uint64 reqid = 1;
  required uint32 uid = 2;
  required uint32 gateid = 3;
  required uint32 born_zid = 4;
}
//返回角色列表 DB_ROLE_LIST_RSP
message RoleListDBRsp
{
  required int32        ret = 1;
  required uint64        reqid = 2;
  required uint32             uid = 3;
  required uint32             gateid = 4;
  repeated RoleListDBProto    role_lst = 5;
  optional uint32        regnum = 6;  //注册人数
}
//创角请求 DB_CREATE_ROLE_REQ
message CreateRoleDBReq
{
  required uint64 reqid = 1;
  required uint32 zid = 2;
  required uint32 gateid = 3;
  required RoleDBData data = 4;
  optional uint32 uid = 5;      //uid
  optional uint32 channel_id = 6;      //渠道id
  optional uint32 zone_mid = 7;      //全服邮件最新id
  optional uint32 born_zid = 8;    //出生区服id

}
//返回创角结果  DB_CREATE_ROLE_RSP
message CreateRoleDBRsp
{
  required int32    ret = 1;
  required uint64     reqid = 2;
  required uint32     uid = 3;
  required uint32 gateid = 4;
  optional RoleListDBProto info = 5;
  optional uint32     born_zid = 6;
  optional CenterRoleProto simple = 7;
}
//角色信息请求 DB_ROLE_INFO_REQ
message RoleInfoDBReq
{
  required uint64 reqid = 1;
  required uint64 cid = 2;
  optional int32  change = 3;
}
//返回角色信息  DB_ROLE_INFO_RSP
message RoleInfoDBRsp
{
  required int32 ret = 1;
  required uint64 reqid = 2;
  required uint64 cid = 3;
  optional int32  change = 4;
  optional RoleDBData info = 5;
}

//更新角色信息  DB_ROLE_INFO_UPDATE_REQ
message RoleInfoUpdateDBReq
{
  required uint64 cid = 1;
  required uint32 uid = 2;
  optional RoleDBData info = 3;
}

//请求 角色改名 DB_ROLE_CHG_NAME_REQ
message RoleChgNameDBReq
{
  required uint64 cid = 1;
  required string name = 2;
}
//返回 角色改名 DB_ROLE_CHG_NAME_RSP
message RoleChgNameDBRsp
{
  required int32 ret = 1;
  required uint64 cid = 2;
  required string name = 3;
}

//---------------------------------- 中心服角色简要数据缓存 ------------------------
//角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_REQ
message RoleSimpleListDBReq{
}

//DB返回 角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_RSP
message RoleSimpleListDBRsp{
  required int32 ret = 1;              //返回码，详见 ComProtocol.proto ERetCode枚举
  repeated CenterRoleProto info = 2;          //角色离线数据
  optional int32 finish_flag = 3;        //所有数据加载是否是完成的标志
}


//--------------------------------- 切换逻辑服  -----------------------------------

//玩家切逻辑节点请求
message CreatureTransLogicDBReq
{
  optional string trans_data = 1; //切换逻辑节点数据 LogicCreatureTransSceneReq 序列化之后的数据
}
//DB返回逻辑服 生物切场景(主要用于玩家) 结果   DB_CREATURE_TRANS_SCENE_RSP
message CreatureTransLogicDBRsp
{
  required int32 retcode = 1; //返回码
  optional uint64 cid = 2;  //玩家CID
}

//------------------------------------ Mail -------------------------------------
//新邮件信息
message NewMailDBInfo
{
  repeated MailInfo data = 1;  //更新的邮件数据
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}
//邮件操作信息
message MailDBOperateInfo
{
  repeated uint32 mid_lst = 1; //邮件ID列表
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}

//保存邮件
message SaveMailDBReq
{
  required uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //新邮件信息
  optional MailDBOperateInfo del = 3;      //删除的邮件操作
  optional MailDBOperateInfo fetch = 4;    //领取附件的操作
  optional MailDBOperateInfo read = 5;    //阅读邮件的操作
  optional int32 notify = 6;          //是否需要通知
}

message SaveMailDBRsp
{
  required uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //发送陈功的 新邮件信息
  optional MailDBOperateInfo del = 3;      //操作成功的 删除的邮件
  optional MailDBOperateInfo fetch = 4;    //操作成功的 领取附件
  optional MailDBOperateInfo read = 5;    //操作成功的 阅读邮件
  optional int32 notify = 6;          //是否需要通知
}

//请求玩家邮件数据
message CharacterMailDBRequest
{
  optional uint64 charID = 1;      //角色ID
  optional uint32 zone_mail_flag = 2; //是否加载zone mail标志
  optional int32 offset = 3;      //加载偏移
  optional uint32 reqid = 4;      //请求ID
}

//返回玩家邮件数据
message CharacterMailDBResponse
{
  optional uint64 charID = 1;      //角色ID
  repeated MailInfo info = 2;      //邮件详细数据
  optional uint32 zoneMailId = 3;     //角色最新全服id
  optional int32 offset = 4;      //加载偏移
  optional uint32 reqid = 5;      //请求ID
}

//加载最大邮件ID
message MaxMailIDRequest
{

}

message MaxMailIDResponse
{
  required uint32 maxZoneMailId = 1; //全服邮件最大id
  optional uint32 maxMailId = 2;
}

//删除角色邮件数据
message DeleteCharacterMail
{
  required uint64 charID = 1;          //角色ID
}

//DBPROXY_PROTOCOL_ALL_ZONE_MAIL_SAVE_RSP
message ZoneMailSaveRsp
{
  required uint32  mailId = 1;              //全服邮件最新ID返回
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_REQ
message ZoneMailTransCharacterMailReq
{
  required uint32 mailId = 1;
  required uint64 cid = 2;
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_RSP
message ZoneMailTransCharacterMailRsp
{
  required uint64   cid = 1;
  repeated MailInfo data = 2;          //需要更新到角色邮件的全服邮件数据
}

//中心服向DB请求角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_REQ
message WebMailDBDataReq
{
  optional int32 op_type = 1;    //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;
  optional uint32 pernum = 3;    //每页邮件数量
  optional uint32 curpage = 4;  //当前页
  repeated uint32 id_lst = 5;    //需要撤回附件的邮件ID 列表
  required string webId = 6;    //web唯一ID的字符串
}
//DB返回中心服角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_RSP
message WebMailDBDataRsp
{
  optional int32 op_type = 1;        //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;        //玩家cid
  optional uint32 curpage = 3;      //当前页
  optional uint32 totalcount = 4;      //总数量
  repeated uint32 id_lst = 5;        //成功撤回附件的邮件ID 列表
  repeated WebMailDataProto info_lst = 6;  //邮件数据列表
  required string webId = 7;        //web唯一ID的字符串
}
//------------------------------------ Mail -------------------------------------

//////////////////////////////////////Friend/////////////////////////////////////////////

message FriendDBInfo
{
  optional uint64 charID = 1;          //角色ID
  optional RelationDBInfo data = 2;      //好友数据
}

//好友数据请求
message FriendDBRequest
{
  optional uint64 charid = 1;        //操作人
  repeated uint64 dstid_lst = 2;      //请求角色列表
  optional uint32 operate_type = 3;    //操作类型
  optional bytes data = 4;        //参数数据
  optional uint32 query_times = 5;    //query次数
}
//好友数据返回
message FriendDBResponse
{
  optional int32 retcode = 1;        //返回码，详见 ComProtocol.proto ERetCode枚举
  optional uint64 charid = 2;        //操作人
  optional uint32 operate_type = 3;    //操作类型
  repeated FriendDBInfo info_lst = 4;    //好友数据
  repeated uint64 last_lst = 5;      //上一次剩余未加载角色列表
  optional bytes data = 6;        //参数数据
  optional uint32 query_times = 7;    //query次数
}

//所有的好友数据请求
message AllFriendDBRequest{
  required int32 offset = 1;    //数据库记录的偏移
}


message AllFriendDBResponse{
  required int32 retcode = 1;          //返回码，详见 ComProtocol.proto ERetCode枚举
  required int32 offset = 2;          //数据库记录的偏移
  repeated FriendDBInfo info = 3;        //好友数据
}

//保存好友数据
message SaveFriendDBRequest{
  repeated FriendDBInfo info = 1;    //好友数据
}

//删除好友数据
message DelteFriendDBRequest{
  optional uint64 charId = 1;
}

//////////////////////////////////////Friend/////////////////////////////////////////////

//////////////////////////////////////global/////////////////////////////////////////////
//请求global表数据
message GlobalDBRequst{

}
message GlobalDBEntry
{
  optional int32 type_id = 1;		//类型ID
  optional bytes data = 2;		//数据
}
//请求global表db返回的数据
message GlobalDBResponse{
  repeated GlobalDBEntry entry = 1; //全局数据部分
  optional int32 isfinish = 2;	//是否结束
}
//保存global表数据
message GlobalDBSetRequest{
  required int32 type_id = 1;		//类型ID
  optional bytes data = 2;		//数据
}

//保存global表数据db返回
message GlobalDBSetResponse{
  required int32 retcode = 1;		//返回码
  required int32 type_id = 2;		//类型ID
}
message GlobalComData
{
  repeated DupTowerDBRecord towerDupReward =1;	 //爬塔副本领奖记录
}


////////////////////////////////////// 活动  //////////////////////////////////////////

message ActDBProto
{
  optional uint64 actid = 1;
  optional uint32 zid = 2;
  optional uint64 finishtime = 3;
}

//获取活动数据 DB_ACT_GET_DATA_REQ
message ActDBReq
{
  //
}
//返回活动数据 DB_ACT_GET_DATA_RSP
message ActDBRsp
{
  repeated ActDBProto lst = 1;
}
//保存活动数据 DB_ACT_SAVE_DATA_REQ
message ActSaveDBReq
{
  repeated ActDBProto lst = 1;
}

//竞技场
message AllArenaDBRequest
{
  required int32 offset = 1;		//数据库记录的偏移
  required int32 retnum = 2;		//数据库返回的数量
}
//竞技场DB信息
message ArenaDBInfo
{
  optional uint64 charID = 1;					//角色ID
  optional uint32 rankId = 2;					//排名
}
//竞技场多个DB信息
message ArenaMoreDBInfo
{
  repeated ArenaDBInfo info = 1;	//竞技场数据
  optional uint32  day = 2;		//哪天的数据
  optional uint32	 giveReward = 3;//是否发过奖励
  optional uint32 max_rank = 4;//最大排名
}

message AllArenaDBResponse
{
  required int32 retcode = 1;					//返回码，详见 ComProtocol.proto ERetCode枚举
  required int32 offset = 2;					//数据库记录的偏移
  repeated ArenaDBInfo info = 3;				//竞技场数据
}

//保存竞技数据
message SaveArenaDBRequest{
  repeated ArenaDBInfo info = 1;
}

//删除玩家竞技场数据
message DeleteArenaDBRequest
{
  optional uint64 charId = 1;
}

///////////////////////////////// 玩家镜像  //////////////////////////////////

//请求玩家镜像数据 DB_ROLE_MIRROR_REQ
message RoleMirrorDBReq
{
  required uint64 cid = 1;		//角色cid
  required int64 int_param = 2;   //参数,原样返回
  required string str_param = 3;  //参数,原样返回
  required uint32 reqtype = 4;	//请求类型,原样返回

}

//返回玩家镜像数据 DB_ROLE_MIRROR_RSP
message RoleMirrorDBRsp
{
  required int32 ret = 1;
  required uint64 cid = 2;			//角色cid
  required int64 int_param = 3;		//参数
  required string str_param = 4;		//参数
  required uint32 reqtype = 5;		//请求类型
  optional RoleMirrorData data = 6;	//数据
}

// ---------------------------------------  帮派  --------------------------------
//获取帮派数据 DB_FACTION_GET_DATA_REQ
message FactionDataDBReq
{
}
//DB返回帮派数据 DB_FACTION_GET_DATA_RSP
message FactionDataDBRsp
{
  repeated FactionAllDBData data_lst = 1;
  optional int32 finish = 2;
}
//保存帮派数据 DB_FACTION_SAVE_DATA_REQ
message FactionSaveDBReq
{
  optional FactionAllDBData data = 1;
}
//删除帮派数据 DB_FACTION_DEL_REQ
message FactionDelDBReq
{
  optional uint32 faction_id = 1;
}
