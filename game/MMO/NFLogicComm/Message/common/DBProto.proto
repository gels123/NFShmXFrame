package proto_ff;

// calm 自定义的fieldoption都在该文件中
import "yd_fieldoptions.proto";
import "Com.proto";
import "ComDefine.proto";

//角色复活 DB数据
message RoleReliveProto
{
  optional uint64 tired_time = 1;		//复活疲劳开始时间
  optional int32 relive_num = 2;		//复活疲劳重置之前 已经累计复活次数
  optional int32 is_tired = 3;		//是否处于疲劳状态
  optional uint64 mapid = 4;			//地图ID
  optional int32 map_relive_num = 5;	//地图上已经复活了的次数
}

//角色DB 基础数据
message RoleDBBaseData
{
  optional string name = 1[(yd_fieldoptions.field_bufsize) = 32];  // 名字
  optional uint32 prof = 2;  // 职业
  optional uint32 level = 3;    // 等级
  optional int64  exp = 4;   // 经验
  optional int64 hp = 5;   // 生命
  optional int64 fight = 6;   // 战斗力

  optional uint64 createTime = 7;		// 创建时间（UTC时间）
  optional uint64 loginTime = 8;		// 上一次登陆的时间（UTC时间）
  optional uint64 logoutTime = 9;		// 上一次下线时间（UTC时间）

  optional uint64 enter_scene_id = 10;  // 当前进入的场景Id
  optional uint64 enter_map_id = 11;	// 当前进入的地图ID
  optional float enterposx = 12;		// 当前进入的地图的X坐标
  optional float enterposy = 13;		// 当前进入的地图的Y坐标
  optional float enterposz = 14;		// 当前进入的地图的Z坐标

  optional uint64 lastsceneid = 15;		//玩家进入上个地图的场景Id
  optional uint64 lastmapid = 16;		//玩家进入上个地图Id
  optional float  lastposx = 17;		//玩家上个地图的x坐标
  optional float  lastposy = 18;		//玩家上个地图的y坐标
  optional float  lastposz = 19;		//玩家上个地图的z坐标

  optional RoleFacadeProto facade = 20; //外观(离线数据用)

  optional uint32 vip_level = 21;		//vip等级

  optional int32 state = 22;			//角色状态，Com.proto 中的枚举 ECState
  optional uint64 hanguptime = 23;		//挂机时长

  optional RoleReliveProto relive = 24; //复活

  optional int64 gold = 25;				//金币
  optional int64 dia = 26;				//钻石
  optional int64 bdia = 27;				//绑钻
  optional int64 magic = 28;			//魔晶
  optional int64 prestige = 29;			//声望
  optional int32 vipLv = 30;			//vip等级
}

//背包DB数据存储结构
message BagItemsDBData
{
  repeated ItemProtoInfo data = 1[(yd_fieldoptions.field_arysize) = 100];
  optional int32      offset = 2;
}

message BagDBSimpleData
{
  optional uint32 package_type = 1;
  optional uint32 expand_num = 2;
}

message RoleDBUnitBagData
{
  optional string table_name = 1[(yd_fieldoptions.field_bufsize) = 32];
  optional BagDBSimpleData simple = 2;
  repeated BagItemsDBData parts = 3[(yd_fieldoptions.field_arysize) = 100];
}

//角色DB 背包数据
message RoleDBBagData
{
  repeated RoleDBUnitBagData bags = 1[(yd_fieldoptions.field_arysize) = 100];
}


//角色DB 装备数据
message RoleDBEquipData
{
  repeated EquipInfo infos = 1[(yd_fieldoptions.field_arysize) = 100];
}

//角色DB 任务数据
message RoleDBTaskData
{

}

// 养成(外观系统)
message GrowPartEntryDBInfo
{
  optional int64 id = 1;
  optional int32 lv = 2;
}
message GrowPartDBData
{
  optional int32 type = 1;
  repeated GrowPartEntryDBInfo  entrys = 2[(yd_fieldoptions.field_arysize) = 12];
  optional int64 curId = 3;
}

message GrowDBData
{
  repeated GrowPartDBData parts = 1[(yd_fieldoptions.field_arysize) = 12];
}

// 游戏迷你部件 存储杂项数据
message DayUseItemData
{
  repeated ComPair64 info = 1[(yd_fieldoptions.field_arysize) = 10];
}

message MiniDBData
{
  optional uint64 lastTime = 1;
  optional DayUseItemData useItem = 2;
}

message FacadeDataInfo
{
  optional uint32 facade_type = 1;
  optional uint64 facade_id = 2;
  optional uint32 facade_lev = 3;
  optional uint64 facade_exp = 4;
  optional bool use_soul_item = 5;
  optional bool use_facade = 6;
  optional uint64 equip_fantasy_id = 7;
  repeated FacadeFantasyData fantasy_map = 8[(yd_fieldoptions.field_arysize) = 12];
  repeated FacadeFragmentData fragment_map = 9[(yd_fieldoptions.field_arysize) = 12];
  repeated FacadeSkillData skill_data = 10[(yd_fieldoptions.field_arysize) = 12]; //技能数据
}

message FacadeDBData
{
  repeated FacadeDataInfo data = 1[(yd_fieldoptions.field_arysize) = 4];
}

//技能详细信息
message SkillDBInfo
{
  optional uint64 skill_id = 1;
  optional int32 level = 2;    //等级
  optional int32 wakeup = 3;    //是否觉醒，1-已觉醒，0-未觉醒
  optional int32 advance = 4;    //进阶类型 0-未进阶， 1-火，2-雷，3-风
  optional int64 use_msc = 5;    //最近使用时间
}
//技能位置信息
message SkillDBPos
{
  optional uint64 skill_id = 1;
  optional uint32 pos = 2;
}

//技能位置列表信息
message SkillDBGroup
{
  optional uint32 group = 1;
  optional int32  chg = 2;        //技能组最近切换时间
  repeated SkillDBPos pos_lst = 3[(yd_fieldoptions.field_arysize) = 12];
}

//技能数据
message SkillDBData
{
  repeated SkillDBInfo info_lst = 1[(yd_fieldoptions.field_arysize) = 12];
  repeated SkillDBGroup group_lst = 2[(yd_fieldoptions.field_arysize) = 12];
  optional uint32 group = 3;          //当前使用的技能组
  optional uint64 last_group = 4;     //最近一次切换技能组的时间
}

message GodRelicsActivityData
{
  repeated GodRelicsTaskGroupEntry group_data = 1[(yd_fieldoptions.field_arysize) = 12];
  optional int64 cur_group_id = 2;
}

message MiniActivityDBData
{
  optional GodRelicsActivityData god_relics_data = 1;
  optional DailyTaskAllData daily_data = 2;
}

//副本数据
message DupRecord
{
  optional uint64 dupId = 1;
  optional int32  star = 2;		//最高星级
}

message DupGroupData
{
  optional int32  group = 1;			//副本组
  optional int32  enterNum = 2;		//已进入次数
  optional int32 	buyNum = 3;			//已购买次数
  optional int32  useNum = 4;			//使用物品次数
  optional uint64 lastFresh = 5;		//上次刷新时间
}
message DupTowerDBRecordEntry
{
  optional string name = 1[(yd_fieldoptions.field_bufsize) = 32];
  optional uint64 time = 2;
  optional uint64 cid = 3;
}

message DupTowerDBRecord
{
  optional uint64  id = 1;
  repeated DupTowerDBRecordEntry entrys = 2[(yd_fieldoptions.field_arysize) = 10];
}

message DupTowerDBData
{
  optional uint64 pass_dupId = 1;			//当前通关的副本ID
  repeated uint64 ids = 2[(yd_fieldoptions.field_arysize) = 10];				//已领取的ids
}
message ComDupDBData
{
  optional uint64 pass_dupId = 1;			//当前通关的副本ID
  optional int32 star = 2;				//星级
}

message DupDBData
{
  repeated DupRecord		record = 1[(yd_fieldoptions.field_arysize) = 10];			//副本历史记录
  repeated DupGroupData 	groups = 2[(yd_fieldoptions.field_arysize) = 10];			//副本组数据
  optional DupTowerDBData	 tower = 3;			//爬塔
  optional ComDupDBData 	 level = 4;			//等级本
}



//buff详细信息
message BuffDBInfo
{
  optional uint64 buffid = 1;         //buff id
  optional uint64 index = 2;          //索引
  optional uint64 skillid = 3;        //技能ID
  optional uint32 skilllev = 4;       //技能等级
  optional bool is_forever = 5;       //是否是永久buff
  optional int64 startmsec = 6;      //buff开始的时间，单位：unix毫秒
  optional bool is_effect = 7;        //是否生效
  optional int64 param1 = 8;          //效果参数1
  optional int64 param2 = 9;          //效果参数2
  optional int64 extramsec = 10;      //额外时间，单位：毫秒
}
//buff 冷却时间信息
message BuffDBCdInfo
{
  optional uint64 buffid = 1;         //buff id
  optional uint64 lastmsec = 2;       //buff最近一次的冷却时间，单位：unix毫秒
}
//buff数据
message BuffDBData
{
  repeated BuffDBInfo info_lst = 1[(yd_fieldoptions.field_arysize) = 10];
  repeated BuffDBCdInfo cd_lst = 2[(yd_fieldoptions.field_arysize) = 10];
}

//打boss
message BossSimpleInfoDB
{
  optional int32  boss_type 		= 1;		// 组类型
  optional int32	cur_num			= 2;		// 当前使用的次数
  optional int32  back_num		= 4;		// 找回次数
  optional int32 	back_max_num	= 5;		// 找回最大次数
  optional int32 	enter_num		= 6;		// 进场景次数
  optional int32  use_item_num	= 7;		// 使用物品加成的次数
}


message BossDBData
{
  repeated BossSimpleInfoDB infos = 1[(yd_fieldoptions.field_arysize) = 10];
  optional uint64 	lastTime 	= 2;
  repeated int64 		attents 	= 3[(yd_fieldoptions.field_arysize) = 10];
}

message VipDBData
{
  optional int32 	vipExp = 1;		//当前VIP经验
  optional int32 	expDiamond = 2;	//剩余加经验的砖石
}

// 角色DB数据
message RoleDBData
{
  optional uint64                 cid = 1[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_PRIMARYKEY];  // role cid
  optional uint32                 zid = 2[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // 区服ID
  optional uint32          uid = 3[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // UID
  optional RoleDBBaseData         base				= 4;    // 基础数据
  optional RoleDBBagData          bag				    = 5;    // 背包数据
  optional RoleDBEquipData	    equip				= 6;	// 装备数据
  optional CharacterDBTaskData	        task				= 7;    // 任务数据
  optional FunctionUnlockInfo unlockinfo				= 8;	// 功能解锁
  optional GrowDBData				grow				= 9;	// 养成数据
  optional MiniDBData				mini				= 10;	// 迷你部件数据
  optional FacadeDBData			facade              = 11;	// 外观部件数据
  optional SkillDBData            skill               = 12;   // 技能数据
  optional MiniActivityDBData mini_activity           = 13;   // 杂七杂八活动数据
  optional DupDBData		        dup                 = 14;	// 副本
  optional BuffDBData             buff                = 15;   // buff数据
  optional BossDBData				boss				= 16;	// boss
  optional VipDBData				vip					= 17;	// vip
}

//角色列表中角色数据
message LoginRoleDBProto
{

}



//------------------------------------ 登录 -------------------------------------


// 角色列表请求 DB_ROLE_LIST_REQ
message RoleListDBReq
{
  optional uint64 reqid = 1;
  optional uint32 uid = 2;
  optional uint32 gateid = 3;
  optional uint32 born_zid = 4;
}
//返回角色列表 DB_ROLE_LIST_RSP
message RoleListDBRsp
{
  optional int32        ret = 1;
  optional uint64        reqid = 2;
  optional uint32             uid = 3;
  optional uint32             gateid = 4;
  repeated RoleListDBProto    role_lst = 5[(yd_fieldoptions.field_arysize) = 20];
  optional uint32        regnum = 6;  //注册人数
}
//创角请求 DB_CREATE_ROLE_REQ
message CreateRoleDBReq
{
  optional uint64 reqid = 1;
  optional uint32 zid = 2;
  optional uint32 gateid = 3;
  optional RoleDBData data = 4;
  optional uint32 uid = 5;      //uid
  optional uint32 channel_id = 6;      //渠道id
  optional uint32 zone_mid = 7;      //全服邮件最新id
  optional uint32 born_zid = 8;    //出生区服id

}
//返回创角结果  DB_CREATE_ROLE_RSP
message CreateRoleDBRsp
{
  optional int32    ret = 1;
  optional uint64     reqid = 2;
  optional uint32     uid = 3;
  optional uint32 gateid = 4;
  optional RoleListDBProto info = 5;
  optional uint32     born_zid = 6;
  optional CenterRoleProto simple = 7;
}
//角色信息请求 DB_ROLE_INFO_REQ
message RoleInfoDBReq
{
  optional uint64 reqid = 1;
  optional uint64 cid = 2;
  optional int32  change = 3;
}
//返回角色信息  DB_ROLE_INFO_RSP
message RoleInfoDBRsp
{
  optional int32 ret = 1;
  optional uint64 reqid = 2;
  optional uint64 cid = 3;
  optional int32  change = 4;
  optional RoleDBData info = 5;
}

//更新角色信息  DB_ROLE_INFO_UPDATE_REQ
message RoleInfoUpdateDBReq
{
  optional uint64 cid = 1;
  optional uint32 uid = 2;
  optional RoleDBData info = 3;
}

//请求 角色改名 DB_ROLE_CHG_NAME_REQ
message RoleChgNameDBReq
{
  optional uint64 cid = 1;
  optional string name = 2[(yd_fieldoptions.field_bufsize) = 32];
}
//返回 角色改名 DB_ROLE_CHG_NAME_RSP
message RoleChgNameDBRsp
{
  optional int32 ret = 1;
  optional uint64 cid = 2;
  optional string name = 3[(yd_fieldoptions.field_bufsize) = 32];
}

//---------------------------------- 中心服角色简要数据缓存 ------------------------
//角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_REQ
message RoleSimpleListDBReq{
}

//DB返回 角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_RSP
message RoleSimpleListDBRsp{
  optional int32 ret = 1;              //返回码，详见 ComProtocol.proto ERetCode枚举
  repeated CenterRoleProto info = 2[(yd_fieldoptions.field_arysize) = 20];          //角色离线数据
  optional int32 finish_flag = 3;        //所有数据加载是否是完成的标志
}


//--------------------------------- 切换逻辑服  -----------------------------------

//玩家切逻辑节点请求
message CreatureTransLogicDBReq
{
  optional string trans_data = 1[(yd_fieldoptions.field_bufsize) = 32]; //切换逻辑节点数据 LogicCreatureTransSceneReq 序列化之后的数据
}
//DB返回逻辑服 生物切场景(主要用于玩家) 结果   DB_CREATURE_TRANS_SCENE_RSP
message CreatureTransLogicDBRsp
{
  optional int32 retcode = 1; //返回码
  optional uint64 cid = 2;  //玩家CID
}

//------------------------------------ Mail -------------------------------------
//新邮件信息
message NewMailDBInfo
{
  repeated MailInfo data = 1[(yd_fieldoptions.field_arysize) = 1000];  //更新的邮件数据
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}
//邮件操作信息
message MailDBOperateInfo
{
  repeated uint32 mid_lst = 1[(yd_fieldoptions.field_arysize) = 1000]; //邮件ID列表
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}

//保存邮件
message SaveMailDBReq
{
  optional uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //新邮件信息
  optional MailDBOperateInfo del = 3;      //删除的邮件操作
  optional MailDBOperateInfo fetch = 4;    //领取附件的操作
  optional MailDBOperateInfo read = 5;    //阅读邮件的操作
  optional int32 notify = 6;          //是否需要通知
}

message SaveMailDBRsp
{
  optional uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //发送陈功的 新邮件信息
  optional MailDBOperateInfo del = 3;      //操作成功的 删除的邮件
  optional MailDBOperateInfo fetch = 4;    //操作成功的 领取附件
  optional MailDBOperateInfo read = 5;    //操作成功的 阅读邮件
  optional int32 notify = 6;          //是否需要通知
}

//请求玩家邮件数据
message CharacterMailDBRequest
{
  optional uint64 charID = 1;      //角色ID
  optional uint32 zone_mail_flag = 2; //是否加载zone mail标志
  optional int32 offset = 3;      //加载偏移
  optional uint32 reqid = 4;      //请求ID
}

//返回玩家邮件数据
message CharacterMailDBResponse
{
  optional uint64 charID = 1;      //角色ID
  repeated MailInfo info = 2[(yd_fieldoptions.field_arysize) = 1000];      //邮件详细数据
  optional uint32 zoneMailId = 3;     //角色最新全服id
  optional int32 offset = 4;      //加载偏移
  optional uint32 reqid = 5;      //请求ID
}

//加载最大邮件ID
message MaxMailIDRequest
{

}

message MaxMailIDResponse
{
  optional uint32 maxZoneMailId = 1; //全服邮件最大id
  optional uint32 maxMailId = 2;
}

//删除角色邮件数据
message DeleteCharacterMail
{
  optional uint64 charID = 1;          //角色ID
}

//DBPROXY_PROTOCOL_ALL_ZONE_MAIL_SAVE_RSP
message ZoneMailSaveRsp
{
  optional uint32  mailId = 1;              //全服邮件最新ID返回
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_REQ
message ZoneMailTransCharacterMailReq
{
  optional uint32 mailId = 1;
  optional uint64 cid = 2;
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_RSP
message ZoneMailTransCharacterMailRsp
{
  optional uint64   cid = 1;
  repeated MailInfo data = 2[(yd_fieldoptions.field_arysize) = 1000];          //需要更新到角色邮件的全服邮件数据
}

//中心服向DB请求角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_REQ
message WebMailDBDataReq
{
  optional int32 op_type = 1;    //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;
  optional uint32 pernum = 3;    //每页邮件数量
  optional uint32 curpage = 4;  //当前页
  repeated uint32 id_lst = 5[(yd_fieldoptions.field_arysize) = 1000];    //需要撤回附件的邮件ID 列表
  optional string webId = 6[(yd_fieldoptions.field_bufsize) = 32];    //web唯一ID的字符串
}
//DB返回中心服角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_RSP
message WebMailDBDataRsp
{
  optional int32 op_type = 1;        //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;        //玩家cid
  optional uint32 curpage = 3;      //当前页
  optional uint32 totalcount = 4;      //总数量
  repeated uint32 id_lst = 5[(yd_fieldoptions.field_arysize) = 1000];        //成功撤回附件的邮件ID 列表
  repeated WebMailDataProto info_lst = 6[(yd_fieldoptions.field_arysize) = 1000];  //邮件数据列表
  optional string webId = 7[(yd_fieldoptions.field_bufsize) = 32];        //web唯一ID的字符串
}
//------------------------------------ Mail -------------------------------------

//////////////////////////////////////Friend/////////////////////////////////////////////

message FriendDBInfo
{
  optional uint64 charID = 1;          //角色ID
  optional RelationDBInfo data = 2;      //好友数据
}

//好友数据请求
message FriendDBRequest
{
  optional uint64 charid = 1;        //操作人
  repeated uint64 dstid_lst = 2[(yd_fieldoptions.field_arysize) = 10];      //请求角色列表
  optional uint32 operate_type = 3;    //操作类型
  optional bytes data = 4[(yd_fieldoptions.field_bufsize) = 32];        //参数数据
  optional uint32 query_times = 5;    //query次数
}
//好友数据返回
message FriendDBResponse
{
  optional int32 retcode = 1;        //返回码，详见 ComProtocol.proto ERetCode枚举
  optional uint64 charid = 2;        //操作人
  optional uint32 operate_type = 3;    //操作类型
  repeated FriendDBInfo info_lst = 4[(yd_fieldoptions.field_arysize) = 10];    //好友数据
  repeated uint64 last_lst = 5[(yd_fieldoptions.field_arysize) = 10];      //上一次剩余未加载角色列表
  optional bytes data = 6[(yd_fieldoptions.field_bufsize) = 32];        //参数数据
  optional uint32 query_times = 7;    //query次数
}

//所有的好友数据请求
message AllFriendDBRequest{
  optional int32 offset = 1;    //数据库记录的偏移
}

message AllFriendDBResponse{
  optional int32 retcode = 1;          //返回码，详见 ComProtocol.proto ERetCode枚举
  optional int32 offset = 2;          //数据库记录的偏移
  repeated FriendDBInfo info = 3[(yd_fieldoptions.field_arysize) = 10];        //好友数据
}

//保存好友数据
message SaveFriendDBRequest{
  repeated FriendDBInfo info = 1[(yd_fieldoptions.field_arysize) = 10];    //好友数据
}

//删除好友数据
message DelteFriendDBRequest{
  optional uint64 charId = 1;
}

//////////////////////////////////////Friend/////////////////////////////////////////////

//////////////////////////////////////global/////////////////////////////////////////////
//请求global表数据
message GlobalDBRequst{

}
message GlobalDBEntry
{
  optional int32 type_id = 1;		//类型ID
  optional bytes data = 2;		//数据
}
//请求global表db返回的数据
message GlobalDBResponse{
  repeated GlobalDBEntry entry = 1[(yd_fieldoptions.field_arysize) = 10]; //全局数据部分
  optional int32 isfinish = 2;	//是否结束
}
//保存global表数据
message GlobalDBSetRequest{
  optional int32 type_id = 1;		//类型ID
  optional bytes data = 2;		//数据
}

//保存global表数据db返回
message GlobalDBSetResponse{
  optional int32 retcode = 1;		//返回码
  optional int32 type_id = 2;		//类型ID
}
message GlobalComData
{
  repeated DupTowerDBRecord towerDupReward =1[(yd_fieldoptions.field_arysize) = 10];	 //爬塔副本领奖记录
}


////////////////////////////////////// 活动  //////////////////////////////////////////

message ActDBProto
{
  optional uint64 actid = 1;
  optional uint32 zid = 2;
  optional uint64 finishtime = 3;
}

//获取活动数据 DB_ACT_GET_DATA_REQ
message ActDBReq
{
  //
}
//返回活动数据 DB_ACT_GET_DATA_RSP
message ActDBRsp
{
  repeated ActDBProto lst = 1[(yd_fieldoptions.field_arysize) = 10];
}
//保存活动数据 DB_ACT_SAVE_DATA_REQ
message ActSaveDBReq
{
  repeated ActDBProto lst = 1[(yd_fieldoptions.field_arysize) = 10];
}
