package proto_ff;

// calm 自定义的fieldoption都在该文件中
import "yd_fieldoptions.proto";
import "Com.proto";
import "ComDefine.proto";

//角色复活 DB数据
message RoleReliveProto
{
  optional uint64 tired_time = 1;		//复活疲劳开始时间
  optional int32 relive_num = 2;		//复活疲劳重置之前 已经累计复活次数
  optional int32 is_tired = 3;		//是否处于疲劳状态
  optional uint64 mapid = 4;			//地图ID
  optional int32 map_relive_num = 5;	//地图上已经复活了的次数
}

//角色DB 基础数据
message RoleDBBaseData
{
  required bytes name = 1;				// 名字
  required uint32 prof = 2;				// 职业
  required uint32 level = 3;			// 等级
  required int64  exp = 4;				// 经验
  required int64 hp = 5;				// 生命
  required int64 fight = 6;				// 战斗力

  required uint64 createTime = 7;		// 创建时间（UTC时间）
  required uint64 loginTime = 8;		// 上一次登陆的时间（UTC时间）
  required uint64 logoutTime = 9;		// 上一次下线时间（UTC时间）

  required uint64 enter_scene_id = 10;  // 当前进入的场景Id
  required uint64 enter_map_id = 11;	// 当前进入的地图ID
  required float enterposx = 12;		// 当前进入的地图的X坐标
  required float enterposy = 13;		// 当前进入的地图的Y坐标
  required float enterposz = 14;		// 当前进入的地图的Z坐标

  optional uint64 lastsceneid = 15;		//玩家进入上个地图的场景Id
  optional uint64 lastmapid = 16;		//玩家进入上个地图Id
  optional float  lastposx = 17;		//玩家上个地图的x坐标
  optional float  lastposy = 18;		//玩家上个地图的y坐标
  optional float  lastposz = 19;		//玩家上个地图的z坐标

  optional RoleFacadeProto facade = 20; //外观(离线数据用)

  optional uint32 vip_level = 21;		//vip等级

  optional int32 state = 22;			//角色状态，Com.proto 中的枚举 ECState
  optional uint64 hanguptime = 23;		//挂机时长

  optional RoleReliveProto relive = 24; //复活

  optional int64 gold = 25;				//金币
  optional int64 dia = 26;				//钻石
  optional int64 bdia = 27;				//绑钻
  optional int64 magic = 28;			//魔晶
  optional int64 prestige = 29;			//声望
  optional int32 contri = 30;			//贡献
  optional int64 arenacoin		= 31;	//竞技币
  optional int64 godevil_exp	= 32;	//神魔经验
  optional int32 godevil_level  = 33;	//神魔等级
  optional uint32 login_day		= 34;   //登录天数
  optional uint64 login_day_time = 35;	//上一次计算登录天数的时间
  optional int64  best_aq		= 36;	//神机装备暗器精华
  optional int64  best_lj		= 37;	//神机装备灵甲精华

  optional uint32 day_prestige	= 38;	//今日获得的声望
  optional uint64 prestige_time = 39;	//今日获得的声望重置时间

	optional uint32 pt_stage = 40; //修真
	optional string guide			= 41;	//新手指引信息
	optional int64 battlepass_xiance = 42; //A_BATTLEPASS_XIANCE = 240; //天降福源 福源石
	optional int64 battlepass_baoding = 43; //A_BATTLEPASS_BAODING = 241; //天降福源 金仙丹
	optional int64 findtreasure_shengfu = 44; //A_FINDTREASURE_SHENGJIFU = 242; //真龙寻宝 神机符
	optional int64 findtreasure_battlesoul = 45;//A_FINDTREASURE_BATTLE_SOUL = 243; //真龙寻宝 战魂碎片
	optional int64 holybeast_build = 46; ////A_HOLYBEAST_BUILD = 218; //神兽令牌
	optional int64 magic_sum = 47; //magic sum

  optional int32 subpack_type = 48;		//分包下载类型
  optional int32 subpack_fetch = 49;    //是否已领取分包下载奖励
  optional uint64 hunling = 50;			//魂灵值
}



//背包DB数据存储结构
message BagItemsDBData
{
  repeated ItemProtoInfo data = 1;
  optional int32      offset = 2;
}

message BagDBSimpleData
{
  optional uint32 package_type = 1;
  optional uint32 expand_num = 2;
}

message RoleDBUnitBagData
{
  optional bytes table_name = 1;
  optional BagDBSimpleData simple = 2;
  repeated BagItemsDBData parts = 3;
}

//角色DB 背包数据
message RoleDBBagData
{
  repeated RoleDBUnitBagData bags = 1;
}


//角色DB 装备数据
message RoleDBEquipData
{
  repeated EquipInfo infos = 1;
  repeated EquipLvAttrInfo lv_attr = 2;
  optional uint32 stove_level = 3;
  optional uint64 stove_exp = 4;
}

//角色DB 任务数据
message RoleDBTaskData
{

}

// 养成(外观系统)
message GrowPartEntryDBInfo
{
  optional int64 id = 1;
  optional int32 lv = 2;
  optional int64 time = 3; //过期时间戳
}
message GrowPartDBData
{
  optional int32 type = 1;
  repeated GrowPartEntryDBInfo  entrys = 2;
  optional int64 curId = 3;
}

message GrowDBData
{
  repeated GrowPartDBData parts = 1;
}

// 游戏迷你部件 存储杂项数据
message DayUseItemData
{
	repeated ComPair64 info = 1;
}

//竞技场数据
message CharacterArenaData
{
  optional uint32 challengeTimes = 1;			//剩余挑战次数
  optional uint64 updateTime = 2;				//刷新的时间
  optional uint32 historyRankId = 3[default=20001];	//历史最高排名
  optional uint32 buyChallengeTimes	= 4;	//今天已购买挑战次数
  repeated ArenaChallResult result = 5; //挑战记录
  repeated ChallArenaReward chall_reward = 7; //竞技场冲榜奖励
  optional int32 allChallengeTimes = 8;
  optional int32 rank_id = 9;
}

message MiniDBData
{
	optional uint64 lastTime = 1;
	optional DayUseItemData useItem = 2;
	optional CharacterArenaData arena_data = 3;
	repeated ComPair64 use_item_add_attr = 4;
}

message FacadeDataInfo
{
  optional uint32 facade_type = 1;
  optional uint64 facade_id = 2;
  optional uint32 facade_lev = 3;
  optional uint64 facade_exp = 4;
  optional bool use_soul_item = 5;
  optional bool use_facade = 6;
  optional uint64 equip_fantasy_id = 7;
  repeated FacadeFantasyData fantasy_map = 8;
  repeated FacadeFragmentData fragment_map = 9;
  repeated FacadeSkillData skill_data = 10; //技能数据
  optional FacadeSoulData soul_data = 11;
}

message MountDataInfo
{
  optional uint64 mount_id = 1;
  optional uint32 mount_lev = 2;
  optional uint64 mount_exp = 3;
  optional bool use_facade = 4;
  optional uint64 equip_fantasy_id = 5;
  repeated MountFantasyData fantasy_map = 6;
  repeated MountFragmentData fragment_map = 7;
  repeated MountSkillData skill_data = 8;
  repeated MountKunData kun_data = 9;
  repeated MountBloodData blood_data = 10;
  repeated MountBabySlotData baby_slot_data = 11;
  optional uint32 ride_state = 12;
  optional uint64 mount_model_id = 13;
  optional uint64 last_mount_model_id = 14;
	repeated MountKunChangeData kun_change_data = 15;
	optional uint64 equip_kun_id = 16;
	optional uint64 equip_kun_change_id = 17;
	repeated MountFairyLand fairy_land = 18;
	repeated MountFairySlot fairy_slot = 19;
	optional uint64 cur_fairy_land = 20;
}


message DeityDataInfo
{
  optional uint64 deity_id = 1;
  optional uint32 deity_lev = 2;
  optional uint64 deity_exp = 3;
  repeated DeityFantasyData fantasy_map = 4;
  repeated DeityFragmentData fragment_map = 5;
  repeated DeitySkillData skill_data = 6;
  repeated DeityBattleSlotData battle_data = 7;
}

message FacadeDBData
{
  repeated FacadeDataInfo data = 1;
}

//技能详细信息
message SkillDBInfo
{
  optional uint64 skill_id = 1;
  optional int32 level = 2;    //等级
  optional int32 wakeup = 3;    //是否觉醒，1-已觉醒，0-未觉醒
  optional int64 use_msc = 4;    //最近使用时间
}
//技能位置信息
message SkillDBPos
{
  optional uint64 skill_id = 1;
  optional uint32 pos = 2;
  optional int32 use = 3;		//是否自动释放，1-是，0-否
}

//技能进阶位置信息
message SkillDBAdvPos
{
	optional uint32 pos = 1;
	optional uint32 advance = 2;
	optional uint32 unlock = 3;
}
//技能进阶信息
message SkillDBAdvInfo
{
	optional int32 advance = 1;    //进阶类型 1-火，2-雷，3-风
	optional int32 level = 2;      //等级
}

//技能位置列表信息
message SkillDBGroup
{
  optional uint32 group = 1;
  optional int32  chg = 2;        //技能组最近切换时间
  repeated SkillDBPos pos_lst = 3;
}
//宠物技能CD
message PetSkillCdDB
{
	optional uint64 skill_id = 1;
	optional uint64 use_msec = 2;
	optional int64 pet_instid = 3;
}
//技能天赋信息
message SkillDBTalentProto
{
	optional int32 id = 1;
	optional int32 level = 2;
}
//技能天赋数据
message SkillDBTalent
{
	repeated SkillDBTalentProto info = 1;	//天赋信息
	optional uint32 cnt = 2;				//可用天赋点数
}
//技能数据
message SkillDBData
{
    repeated SkillDBInfo info_lst = 1;
    repeated SkillDBGroup group_lst = 2; 
    optional uint32 group = 3;					//当前使用的技能组
    optional uint64 last_group = 4;				//最近一次切换技能组的时间
	repeated SkillDBAdvPos adv_pos = 5;			//
	repeated SkillDBAdvInfo adv_info = 6;
	optional uint32 cur_advpos = 7;		
	repeated PetSkillCdDB pet_cd = 8;
	optional SkillDBTalent talent = 9;
	optional uint32 anger_value = 10; 
}

message GodRelicsActivityData
{
  repeated GodRelicsTaskGroupEntry group_data = 1;
  optional int64 cur_group_id = 2;
}

message MiniActivityDBData
{
  optional GodRelicsActivityData god_relics_data = 1;
  optional DailyTaskAllData daily_data = 2;
}

//副本数据
message DupRecord
{
	optional uint64 dupId = 1;
	optional int32  star = 2;		//最高星级
}

message DupGroupData
{
	optional int32  group = 1;			//副本组
	optional int32  enterNum = 2;		//已进入次数
	optional int32 	buyNum = 3;			//已购买次数
	optional int32  useNum = 4;			//使用物品次数
	optional uint64 lastFresh = 5;		//上次刷新时间
}
message DupTowerDBRecordEntry
{
	optional bytes name = 1;
	optional uint64 time = 2;
	optional uint64 cid = 3;
}

message DupTowerDBRecord
{
	optional uint64  id = 1;
	repeated DupTowerDBRecordEntry entrys = 2;
}

message DupTowerDBData
{
	repeated uint64 ids = 1;				//已领取的ids
}

message GhostDBData
{
	optional int32 wave = 1;
	optional int32 time = 2;
	repeated int32 recv_ids = 3;			//首通领取的id
}

message MoyuDBData
{
	repeated int32 recv_layer = 1;			//已领取层数奖励
	optional uint64 day_harm = 2;			//当日伤害
	optional uint64 week_harm = 3;			//本周伤害
	optional uint64 last_day_harm = 4;		//昨日伤害
	optional uint64 last_week_harm = 5;		//上周伤害
	optional uint64 time = 6;
}

message YaoTaDBData
{
	repeated int32 pass_ids = 1;			//已领副本通关奖励id(都是副本id)
	repeated int32 first_pass_ids = 2;		//首通副本id奖励列表(都是副本id)
	optional uint64 pass_time_point = 3;	//最高层副本通关时间点
	optional int32 pass_duration = 4;		//通关时长
}

message DupDBData
{
	repeated DupRecord		record = 1;			//副本历史记录
	repeated DupGroupData 	groups = 2;			//副本组数据
	optional DupTowerDBData	 tower = 3;			//爬塔数据
	optional GhostDBData	 ghost = 4;			//幽冥古殿
	optional MoyuDBData		 moyu = 5;			//镇魂魔域
	optional YaoTaDBData	 yaota = 6;			//九层妖塔数据
}

message GhostDupRankDB
{
	repeated GHostDupRankInfo ranks =1;
}

//buff详细信息
message BuffDBInfo
{
    optional uint64 buffid = 1;         //buff id
    optional uint64 index = 2;          //索引
    optional uint64 skillid = 3;        //技能ID
    optional uint32 skilllev = 4;       //技能等级
    optional bool is_forever = 5;       //是否是永久buff
    optional int64 startmsec = 6;      //buff开始的时间，单位：unix毫秒   
    optional bool is_effect = 7;        //是否生效
    optional int64 param1 = 8;          //效果参数1
    optional int64 param2 = 9;          //效果参数2
    optional int64 extramsec = 10;      //额外时间，单位：毫秒
	optional int32 is_end = 11;			//是否结束了
	optional int64 param3 = 12;         //效果参数3
    optional int64 param4 = 13;         //效果参数4
	optional int64 param5 = 14;         //效果参数5
	optional int64 param6 = 15;         //效果参数6
	optional int64 param7 = 16;         //效果参数7
}
//buff 冷却时间信息
message BuffDBCdInfo
{
    optional uint64 buffid = 1;         //buff id   
    optional uint64 lastmsec = 2;       //buff最近一次的冷却时间，单位：unix毫秒  
}
//buff 护盾信息
message BuffDBShieldInfo
{
	optional int64 god_shield = 1;	//天神护盾已吸收的伤害
	optional int64 mag_shield = 2;	//神魔护盾已吸收的伤害
}
//buff数据
message BuffDBData
{
    repeated BuffDBInfo info_lst = 1;
    repeated BuffDBCdInfo cd_lst = 2;
	optional BuffDBShieldInfo shield = 3;
}

//打boss
message BossSimpleInfoDB
{
	optional int32  boss_type 		= 1;		// 组类型
	optional int32	cur_num			= 2;		// 当前使用的次数
	optional int32  back_num		= 4;		// 找回次数
	optional int32 	back_max_num	= 5;		// 找回最大次数
	optional int32 	enter_num		= 6;		// 进场景次数
	optional int32  use_item_num	= 7;		// 使用物品加成的次数
	repeated ComPair groupInfo 		= 8;		// 使用组信息
}


message BossDBData
{
	repeated BossSimpleInfoDB infos = 1;
	optional uint64 	lastTime 	= 2;
	repeated int64 		attents 	= 3;
}

message VipDBData
{
	optional int32 	vipExp = 1;					//当前VIP经验
	optional int32 	expDiamond = 2;				//剩余加经验的砖石
	repeated int32 	privilege_ids = 3; 			//开放的特权
	optional int32 vip_hide = 4;	 			//0:不隐藏vip 1：隐藏VIP
	optional int32 active_type = 5; 			//0:未激活   1:限时激活 2:永久激活
	optional uint64  outtime = 6; 				//过期时间。 未来时间戳 限时激活才有效
	optional uint64 last_recv_day_gift_time = 7;		//上次领取每日礼包的时间
	repeated int32  lv_gift = 8;				//已购买的vip专属等級礼包
	optional int32  zero_state = 9; 			//0元购物是否买了 0：没买，1：买了
	optional int32 	recv_zero = 10; 			//0沒有领取0元够礼包， 1已领取
	optional uint64 add_exp = 11;				//经验
	optional int32 	recv_exp = 12;				//是否领取了经验
	optional uint64 refresh_time = 13;			//更新时间
	optional uint64 active_time = 14;			//激活时间
}


//角色总属性 DB数据
message AttrDBData
{
	repeated Attr64 attr_lst = 1;
}

message PetDBRecord
{
	optional int32 instId = 1;
	repeated ComPair64 costItem = 2;
	repeated ComPair64 costPet = 3; //消耗的宠物
}

message PetGrowDB
{
	optional int32 cfgid = 1;  	   //宠物配置id
	optional int32 stronglv = 2;   //强化等級 (默认0级)
	optional int32 starlv = 3; 	   //升星等级 (默认0星)
	optional int32 starindex = 4; //星级默认选中索引(1) starValue 表 advance_Type 下标。
	optional int32 failnum = 5; 	//失败的次数
}



message PetDBData
{
	repeated int32 	fetter = 1;	 //已领取的羁绊
	repeated PetInfo pets = 2;	 //所有宠物
	repeated PetHatchInfo hatchs = 3;	//孵化的槽位信息
	repeated PetDBRecord records = 4;   //培养记录
	repeated int64 	cfgids = 5;			//获得过的宠物
	repeated PetGrowDB grows = 6;		//宠物专属养成列表(这里是已激活的列表)
	optional PetYaoHunModule yaohun = 7; //妖魂数据
}

//商城DB信息
message MallDBInfo
{
	optional int64 id = 1;		//商品ID
	optional uint32 num = 2;	//已购买数量
	optional uint64 time = 3;	//最近购买时间
}

//角色商城 DB数据
message MallDBData
{
	repeated MallDBInfo day = 1;
	repeated MallDBInfo week = 2;
	repeated MallDBInfo forever = 3;
}


//护送数据
message ConvoyData
{
	optional int32 daynum 		= 1; 	//已护送次数
	optional int32 escortid  	= 2;	//当前镖车ID
	optional uint64 endTime 	= 3; 	//当前任务结束时间
	optional int32 freeNum 		= 4;	//已使用免费次数
	optional int32 genEscortId  = 5;	//随机到的镖车ID
	optional uint64 resetTime 	= 6; 	//上次重置次数时间
}

//玄功真甲
message ArmorDBData
{
	repeated ArmorInfo infos = 1;
}

//boss助战
message AssistDBData
{
	optional uint64 resetTime 	= 1; 	//上次重置次数时间
	optional int32 dayPrestige = 2;		//今日获得声望
	optional int32 sendNum = 3;			//当日发起求援次数（完成）
	optional int32 helpNum = 4;			//当日应援次数（完成)
	optional int32 allSendNum = 5;		//完成求助总次数
	optional int32 allHelpNum = 6;		//完成援助总次数
	optional int32 recvSendGiftNum = 7; //今日领取求援礼包数量
	optional int32 recvHelpGiftNum = 8; //今日领取援助礼包数量
	repeated int32 rewardIds = 9;		//已经领取过的id
	repeated ComPair64 thanksInfo = 10;	//感谢时信息
}

message TitleDBData
{
  optional uint64 cur_wearing_title = 1;
  repeated TitleInfo data = 2;
}

//神魔 条件数据
message GodEvilCondDBProto
{
	optional int32 id = 1;			//条件id
	optional int32 state = 2;		//状态，0-不可领取，1-可领取，2-已领取
	optional int32 cur = 3;			//当前条件值
}
//神魔 多个条件数据
message GodEvilMultCondDBProto
{
	repeated GodEvilCondDBProto lst = 1;
}
//神魔任务数据
message GodEvilTaskDBProto
{
	optional int32 stage = 1;					//当前阶段
	optional GodEvilMultCondDBProto cond = 2;	//条件
	optional int32 finish = 3;					//是否完成所有的神魔任务(主界面的任务)
	optional int32 accept = 4;					//是否接取过第一个任务(主界面的任务)
}

//神魔 DB数据
message GodEvilDBData
{
	optional int32 fetch = 1;				//是否已领取预告奖励
	optional GodEvilTaskDBProto task = 2;	//神魔任务
	optional int32 type = 3;				//激活的神魔类型
	optional uint64 last_time = 4;			//最近一次神魔变身的时间
	optional int32 vessel_lev = 5;			//神魔鼎特权等级
	optional int32 mirror_lev = 6;			//轮回境特权等级
	optional int64 extra_exp = 7;			//额外存储的神魔经验
	repeated ItemProtoInfo equip = 8;		//神魔特权装备 
	repeated ItemProtoInfo dress = 9;		//神魔穿戴装备 
}

//充值 DB数据
message PayDBData
{
	repeated uint32 db_id = 1;		//已发货的离线充值的dbid
	repeated bytes product = 2;		//已充值过的计费点
	optional uint32 relrmb = 3;		//累计充值人名币(包括模拟充值)
	optional uint32 rmb = 4;		//累计充值人名币(运营活动)
	optional uint32 fakermb = 5;	//w模拟充值的人名币(web后台,充值卡等虚拟物品)
	optional uint32 todayrmb = 6;	//今日充值人名币
	optional uint64 todaytime = 7;	//今日最近一次充值时间
	optional uint32 sdkrmb = 8;		//累计充值人名币(sdk充值)
}

//帮派工资
message FactionDBSalary
{
	optional int32 id = 1;
	optional int32 cur = 2;
	optional int32 fetch = 3;
}

//帮派晚宴，传功数据
message FactionDBDinner
{
	optional int32 trans = 1;		//传功次数
	optional int32 meat = 2;		//吃肉次数
	optional uint32 exp = 3;		//经验
	optional uint32 contri = 4;		//贡献
	optional uint64 time = 5;		//最近参加晚宴的时间
	optional uint64 trans_time = 6;	//最近刷新传功次数的时间
}
//帮派 技能数据
message FactionDBSkillProto
{
	optional int32 id = 1;
	optional int32 level = 2;
}
message FactionDBSkill
{
	repeated FactionDBSkillProto info = 1;
}

message FactionDBGuard
{
	optional uint32 exp = 1;
	optional uint32 contri = 2;
	optional uint64 cur_encouragement_gold_count = 3;
	optional uint64 cur_encouragement_diamond_count = 4;
}


//角色帮派DB数据
message RoleFactionDBData
{
	optional int32 donate_num = 1;		//已经捐献的次数
	optional uint64 donate_fresh = 2;	//最近一次刷新捐献次数的时间
	repeated FactionDBSalary salary = 3;//工资
	optional uint64 salary_fresh = 4;	//最近一次刷新工资的时间
	optional FactionDBDinner dinner = 5;//帮派晚宴活动数据
	optional FactionDBSkill skill = 6;	//帮派技能
	optional FactionDBGuard guard = 7;
	optional int32 fetch_war = 8;		//今日是否领取过帮派战每日俸禄
	optional uint64 fetch_time = 9;		//最近一次领取帮派战每日俸禄的时间
}

//角色神机装备数据
message RoleBestEQDBData
{
	repeated BestEQSlotInfo	 slots = 1;		//神机装备槽位
	repeated BestEQTask	tasks = 2;			//神机装备前置任务
}

//上古神灵数据
message AncientDBData
{
	optional int32 unlock_star_id 	= 1;	//当前已经解锁的星级ID
	repeated AncientInfo infos 	= 2;
}

//角色战徽战旗数据
message RoleEmblemDBInfo
{
	optional int32 id = 1;		//配置ID
	optional int32 lv = 2;		//阶级
	optional int32 star = 3;	//星级
}
//角色1v1赛季信息
message Role1v1DBInfo
{
	optional int32 score = 1;			//积分
	optional int32 match_num = 2;		//已匹配场次
	optional int32 win_num = 3;			//胜利场次
	optional int32 conti_num = 4;       //连胜场次
	optional int32 reward_num = 5;		//今日以获得奖励次数
	repeated int32 already_fetch = 6;	//已领取奖励
	optional uint64 reward_time = 7;	//最近重置奖励次数的时间
	optional uint64 reset_time = 8;		//最近重置赛季信息的时间
	optional int32 cur_conti_num = 9;   //当前连胜场次

}
//角色 PVP DB数据
message RolePvpDBData
{
	optional int32 pkmode = 1;
	optional int32 chg_time = 2;
	optional int32 killvalue = 3;
	optional int32 onlinesec = 4;
	repeated RoleEmblemDBInfo emblem = 5;
	optional Role1v1DBInfo pk1v1 = 6;
}

message RoleMarryExpress
{
	optional bytes name = 1;
	optional uint64 item = 2;
	optional int32 text_id = 3;
	optional uint64 time = 4;
}


//结婚数据
message RoleMarryDBData
{
	optional MarrySelfInfo info = 1;
	repeated RoleMarryExpress toSlef = 2;   //对我表白
	repeated RoleMarryExpress toOther = 3;  //对他表白
	optional WeddingDupRoleInfo dup_record = 4;	//婚宴副本记录
	optional uint64 lastTime = 5;
}

//藏经阁
message EncylopediaDBData
{
	optional HandBookPBData hand_book = 1;
}

// 角色DB数据
message GVBPData
{
	repeated uint32 rewards_state=1;
	optional uint32 daily_score=2;
	optional uint64 record_time=3;
}

//角色充值相关的活动DB数据
message ChargeDBData
{
	optional int32 first_rmb =  1;		//首充 累计充值
	repeated int32 first_fetch = 2;		//首充 已领取的奖励
	optional int32 dia_rmb = 3;			//首充 钻石秘宝累计充值
	repeated int32 dia_fetch = 4;		//首充 钻石秘宝已领取的奖励
	optional int32 star_rmb = 5;		//首充 星耀秘宝累计充值
	repeated int32 star_fetch = 6;		//首充 星耀秘宝已领取的奖励
	optional int32 king_rmb = 7;		//首充 王者秘宝累计充值
	repeated int32 king_fetch = 8;		//首充 王者秘宝已领取的奖励
	optional int32 second_rmb = 9;		//首充 超值续充累计充值
	repeated int32 second_fetch = 10;	//首充 超值续充已领取的奖励
	optional int32 open_total = 11;		//贵族 开服累充 已充值额度
	repeated int32 open_total_fetch = 12;//贵族 开服累充 已领取奖励
}

//条件礼包DB信息
message GiftCondDBProto
{
	optional int32 id = 1;		//配置ID
	optional uint64 time = 2;	//开启时间
	optional int32 buy = 3;		//是否已购买
	optional int32 close = 4;   //活动已关闭
}
//0元礼包DB信息
message GiftZeroDBProto
{
	optional int32 id = 1;		//配置ID
	optional int32 buy = 2;		//是否已购买
	optional int32 fetch = 3;	//是否已领取奖励
}
//0元礼包日志信息
message GiftZeroLogDBProto
{
	optional bytes name = 1;	//角色名字
	optional int32 type = 2;	//1-购买，2-领取
	optional int32 value = 3;	//type=1时，表示购买的0元礼包配置ID，type=2时，表示领取的钻石数量
}


//角色礼包相关的DB数据
message GiftDBData
{
	repeated GiftCondDBProto cond = 1;
	repeated GiftZeroDBProto zero = 2;
	repeated GiftZeroLogDBProto zero_log = 3;
}

//节日活动简要信息
message FestSimpleDBProto
{

}

//限时商店数据
message FestShopDBProto
{
	repeated ComPair info = 1;	//购买信息
}
//签到(天天养龙)
message FestSignDBProto
{
	optional int32 is_sign = 1;  //是否签到
}
//金库(天天养龙)
message FestGoldStoreDBProto
{
	repeated ComPair info = 1;
}
//砸蛋(天天养龙)任务
message FestDigEggTaskDBProto
{
	optional int32 id = 1;		//配置ID
	optional int32 cur = 2;		//当前进度
	optional int32 fetch = 3;	//是否已领取 0-未领取，1-已领取
}
//砸蛋(天天养龙)
message FestDigEggDBProto
{
	repeated ComPair id_lst = 1;				//已抽奖 id 列表
	optional int32 free = 2;					//今日已经免费重置了多少次
	optional uint64 time = 3;					//最近一次免费重置时间
	optional uint64 auto_time = 4;				//最近一次自动重置的时间
	repeated FestDigEggTaskDBProto task = 5;	//任务
	optional uint64 task_time = 6;				//任务最近一次重置时间
}

//天天养龙（烛龙挑战）
message FestCandleDBProto
{
	repeated int32 id_lst = 1;		//已领取奖励id列表
	optional uint64 time = 2;		//最近重置的时间
	optional int64 harm = 3;		//总伤害
}

//天天养龙（变态养龙寺）
message FestBtDragonDBProto
{
}



//转盘多倍返玉
message FestRTurnableRechargeDBProto
{
	repeated FestRTurnableRechargeOneProto info = 1;
}



message FestDailyTotalRechargeDBProto
{
	repeated FestDailyTotalRechargeOneProto info = 1; //每日累计充值
	optional uint32 total_recharge = 2;
	optional uint64 flush_time = 3;
}

//活跃转盘
message FestTurnableDBProto
{
	repeated FestTurnableTaskProto task = 1;
	optional uint32 left_num = 2; //可以转动的剩余次数
	optional uint64 flush_time = 3;
	repeated int32 chou_jiang_ids = 5; //已经被抽奖的id
}

//全民嗨翻天
message FestDonateDBProto
{
	repeated FestDonateSingleProto single = 1;
	repeated FestDonateServerProto server = 2;
	optional uint32 single_num = 3;
	repeated FestDonateTaskProto task = 4;
	optional uint64 flush_time = 5;
}

//定时福利
message FestOnlineDBProto
{
	repeated FestOnlineOneProto data = 1;
	optional uint64 flush_time = 2;
}

//开服集字
message FestCollectWordDBProto
{
	repeated FestCollectWordOneProto data = 1;
	optional uint64 flush_time = 2;
}
message FestBossFirstDB
{
	repeated int32 recv_kill_ids = 1;   //领取过的击杀奖励(活動配置muban_BossFristKill id)
	repeated int32 recv_red_ids = 2;	//领取过的首杀红包(活動配置muban_BossFristKill id)
	repeated int32 m_kills_ids = 3;		//我击杀过的boss(活動配置muban_BossFristKill id)
}

message FMarryRoleDB
{
	repeated FMarryTask tasks = 1;
	repeated int32 process_ids = 2; //已领取进度id
	optional int32 score = 3;		//积分
}

//每日累充
message DayTotalRechargeDBProto
{
	repeated int32 fetch_lst = 1;		//已领取ID列表
	optional uint32 recharge = 2;		//累充金额
	optional uint64 time = 3;			//累充时间
	optional uint64 reset_time = 4;		//最近重置的时间
}
//累计充值
message TotalRechargeDBProto
{
	repeated int32 fetch_lst = 1;		//已领取ID列表
	optional uint32 recharge = 2;		//累计充值金额
}
//登录奖励
message LoginRewardDBProto
{
	repeated ComPair fetch = 1;			//登录天数对应的领取状态
}

//第一天到最后一天，每天领取的奖励
message DayFetchInfo
{
	optional int32 day = 1;			//第几天
	repeated int32 gear_lst = 2;	//已领取的挡位
}
//每个挡位，累计领取天数的奖励
message GearFetchInfo
{
	optional int32 gear = 1;		//挡位
	repeated int32 day_lst = 2;		//已领取的累计天数列表
}

//连续累充
message ContiRechargeDBProto
{
	optional uint32 recharge = 1;			 //活动时间内累计充值金额
	optional int32 supplement = 2;			 //是否补领
	repeated DayFetchInfo day_fetch = 3;	 //每天已领取的奖励
	repeated GearFetchInfo gear_fetch = 4;	 //已领取的挡位奖励
}

message ShopProto
{
	optional int32 type = 1;	//商店类型
	optional uint32 total = 2;	//累计消费
	repeated int32 fetch = 3;	//已领取累计消费奖励的 消费金额
	repeated ComPair buy = 4;	//已购买的商品数量 muban_RebateStore_mall表ID - 已购买的数量
}

//限时秒杀
message LimitSaleDBProto
{
	repeated ShopProto shop = 1;	//商店信息
	optional uint64 fresh_time = 2;	//最近一次刷新时间
}

//节日活动详细数据
message FestDetailDBProto
{
	required int32 template_id = 1;										//活动模板ID
	required int32 period = 2;											//期数
	required uint64 begintime = 3;										//活动开始时间
	optional FestShopDBProto shop = 4;									//限时商店
	optional FestDailyTotalRechargeDBProto daily_total_recharge = 5;	//每日累计充值
	optional FestSignDBProto sign = 6;									//签到(天天养龙)
	optional FestGoldStoreDBProto gold_store = 7;						//金库(天天养龙)
	optional FestDigEggDBProto dig_egg = 8;								//砸蛋(天天养龙)
	optional FestRTurnableRechargeDBProto rturnable_recharge = 9;		//转盘多倍返玉
	optional FestTurnableDBProto turntable = 10;						//活跃转盘
	optional FestDonateDBProto donate = 11;								//全民嗨翻天
	optional FestOnlineDBProto online = 12;								//定时福利
	optional FestCollectWordDBProto collect_word = 13;					//开服集字
	optional DrawPizeProto draw_pize = 14;								//开服庆典
	optional FestRankDBData server_rank = 15;							//开服比拼
	optional FestBossFirstDB boss = 16;									//BOSS首杀
	optional FestHuiMengXiYouData hui_meng_xi_you = 17; //回梦西游
	optional FestBtDragonDBProto bt_dragon = 18;						//变态养龙寺(天天养龙)
	optional FestCandleDBProto candle = 19;								//烛龙挑战(天天养龙)
	optional FMarryRoleDB marry = 20;									//完美情人
	optional DayTotalRechargeDBProto day_total_recharge = 21;			//每日累充
	optional TotalRechargeDBProto total_recharge = 22;					//累计充值
	optional LoginRewardDBProto login = 23;								//登录奖励
	optional ContiRechargeDBProto conti_recharge = 24;					//连续累充
	optional LimitSaleDBProto limit_sale = 25;							//限时秒杀

}

//节日活动
message FestDBData
{
	repeated FestDetailDBProto info = 1;		//限时商店
	repeated int32 close = 2;					//已经关闭了的活动模板ID列表
}


//帝弑影龙信息
message ShadowDBProto
{
	optional int32 lev = 1;	//等级
	optional int32 exp = 2;		//经验
	optional int32 star = 3;	//星级
	optional int32 lucky = 4;	//幸运值
	repeated ComPair frag = 5;	//碎片信息 itemid - num
	optional int32 curstar = 6; //当前幻化的星级
}
//光环类信息
message HaloDBProto
{
	repeated ComPair info = 1;  //id-star
	optional int32 curid = 2;	//当前幻化的 id
	optional int32 curstar = 3; //当前幻化的 星级
}
//幻世烛龙
message DragonDBData
{
	optional ShadowDBProto shadow = 1;
	optional HaloDBProto halo = 2;
}

//转生装备信息
message RoleDBTurnData
{
	repeated TurnEntry entrys = 1;		//所有转生养成
	optional TurnSimple simple = 2;
	repeated TurnHelper helper = 3;	
	optional uint64 refresh_time = 4;
	repeated TurnTask tasks = 5;
}

//神元区域
message GMADbData{
    optional uint32 remainTime=1;//总时间
    optional uint32 freeTimeRemain=2;//当前免费时间剩余
    optional uint32 freeTime=3;//总免费时间
    optional uint32 privilege=4;//是否充特权
    optional uint64 recvFreeTimePrev=5;//上一次领取免费时间（utc)
	optional int64 expTotal=6;//总经验
	optional int64 expAccumulate=7;//特权累积经验
}

message SoulDBData
{
	optional SoulEntry entry = 1;  //战魂数据
	optional SoulPool pool = 2;	   //聚灵池
	repeated ComPair tasks = 3;    //任务 key:id value: //0:未达成，1可领取，2 已领取
}

//奇门八卦
message MoFaDBData
{
	repeated MoFaEquipInfo data = 1;
}

message RuneDBData
{
	repeated RuneEntry entrys = 1;
}

message RoleDBData
{
	required uint64                 cid					= 1[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_PRIMARYKEY];	// role cid
	required uint32                 zid					= 2[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // 区服ID
	optional uint32					uid					= 3[(yd_fieldoptions.db_field_type) = E_FIELDTYPE_INDEX];    // UID
    optional RoleDBBaseData         base				= 4;    // 基础数据
    optional RoleDBBagData          bag				    = 5;    // 背包数据
    optional RoleDBEquipData	    equip				= 6;	// 装备数据
    optional CharacterDBTaskData	task				= 7;    // 任务数据
	optional FunctionUnlockInfo unlockinfo				= 8;	// 功能解锁
	optional GrowDBData				grow				= 9;	// 养成数据
	optional MiniDBData				mini				= 10;	// 迷你部件数据
    optional FacadeDBData			facade              = 11;	// 外观部件数据
    optional SkillDBData            skill               = 12;   // 技能数据
    optional MiniActivityDBData mini_activity           = 13;   // 杂七杂八活动数据
    optional DupDBData		        dup                 = 14;	// 副本
    optional BuffDBData             buff                = 15;   // buff数据
	optional BossDBData				boss				= 16;	// boss
	optional VipDBData				vip					= 17;	// vip
	optional AttrDBData				attr				= 18;	// 属性数据
	optional MountDataInfo    		mount 				= 19;	//坐骑
	optional DeityDataInfo			deity				= 20;	//天神
	optional PetDBData				pet					= 21;	//宠物
	optional MallDBData				mall				= 22;   // 商城
	optional ConvoyData				convoy				= 23;	//护送
	optional ArmorDBData			armor				= 24;	//玄功真甲
	optional AssistDBData			assist				= 25;	//boss助战
	optional TitleDBData			title				= 26;
	optional GodEvilDBData			godevil				= 27;   //神魔数据
	optional OccupationMissionData occupatoin			= 28;	//转职数据
	optional PayDBData				pay					= 29;	//充值数据
	optional RoleFactionDBData      role_faction        = 30;   //角色帮派数据
	optional RoleBestEQDBData		best_equip			= 31;	//神机装备
  	
	optional AchievementData		achievement			= 32;	//成就系统
	optional AncientDBData			ancient				= 33;	//上古神灵
	optional RolePvpDBData          pvp                 = 34;   //PVP
	optional PracticeTrueDBData 	ptdata=35;
	optional RoleMarryDBData		role_marry			= 36;	//结婚
	optional EncylopediaDBData		encylopeddia		= 37; //藏经阁

	optional GVBPData  				gvb_pdata			= 38; //神机谷战场数据
	optional PSDatas				psdatas 			= 39; //个人商店
	optional DragonSoulData			dragon_soul			= 40; //龙魂
	optional WelfarePBData			welfare				= 41; //福利
	optional DailyWelfarePBData daily_welfare			= 42; //每日特惠
	optional ChargeDBData			charge				= 43; //福利-充值活动相关的数据
	optional GiftDBData				gift				= 44; //礼包活动相关的数据
	optional FindTreatureDBData find_treature			= 45; //真龙寻宝
	optional FestDBData				fest				= 46; //节日活动
	optional DragonDBData			dragon				= 47; //幻世烛龙
	optional StarData				star				= 48; //不灭星辰
	optional int32					change				= 49; //是否是切换逻辑服(切换逻辑服填充)
	optional RoleDBTurnData			turn				= 50; //神体装备

	optional GMADbData 				gma_datas			= 51;//神元区域
	optional SoulDBData				soul				= 52; //战魂
	optional MoFaDBData       		mofa        		= 53; //奇门八卦
	optional RuneDBData				rune				= 54; //符文
}

//待发送红包信息
message RedWaitDBProto
{
	optional uint32 idx = 1;			//唯一索引
	optional int32 cfgid = 2;			//配置ID
	optional uint64 time = 3;			//时间
}

//红包触发次数信息
message RedTriggerDBProto
{
	optional int32 cfgid = 1;			//配置ID
	optional int32 count = 2;			//已触发次数
}

//角色红包DB数据
message RoleRedDBData
{
	optional uint32 bdia = 1;						//可额外领取帮派红包的绑钻
	optional uint32 magic = 2;						//可额外领取帮派红包的魔晶
	optional uint32 todaynum = 3;					//今日已发送红包的次数
	optional uint32 todaymagic = 4;					//今日已领取魔晶
	optional uint32 todaybdia = 5;					//今日已领取绑钻
	optional uint64 freshtime = 6;					//最近刷新今日次数的时间
	repeated int32 send_lst = 7;					//已发送红包配置ID列表
	repeated RedWaitDBProto wait_lst = 8;			//待发送红包
	optional uint64 cid = 9;						//角色cid
	repeated RedTriggerDBProto trigger_lst = 10;	//今日触发次数
}

//已领取红包
message RedFetchDBProto
{
	optional uint64 cid = 1;		//角色cid
	optional uint32 val = 2;		//领取金额
	optional uint64 time = 3;		//领取时间
};
//已领取红包列表
message RedFetchListDBProto
{
	repeated RedFetchDBProto info = 1;
}

//已发送红包信息
message RedSendDBProto
{
	optional uint32 idx = 1;				//唯一索引
	optional int32 cfgid = 2;				//配置ID
	optional uint64 sender = 3;				//发送者
	optional uint64 sendtime = 4;			//红包产生的时间
	optional bytes word = 5;				//红包寄语
	optional int32 finish = 6;				//是否领取完了
	optional RedFetchListDBProto fetch = 7; //已领取的金额 
};

//红包DB数据
message RedDBData
{
	repeated RedWaitDBProto wait = 1;			//等待发送红包
	repeated RedTriggerDBProto trigger_lst = 2;	//今日触发次数
	optional uint64 freshtime = 3;				//最近刷新今日次数的时间
	repeated RedSendDBProto send = 4;			//已发送红包
	optional uint32 faction_id = 5;				//帮派ID，非帮派红包数据为0
}



//--------------------------- 角色镜像数据  ------------------------------
//角色镜像数据
message RoleMirrorData
{
	enum Type
	{
		Role = 1;		//竞技场玩家镜像
		Rebot = 2;		//竞技场机器人
		TeamRole = 3;   //组队玩家镜像
		TeamRebot = 4;	//组队机器人
	}

	optional uint64 cid							= 1;//角色ID, 当是玩家时是玩家cid, 当是机器人时表示机器人表配置ID
	optional int32 type							= 2;//类型，用于区分玩家和机器人  1-竞技场玩家镜像，2-竞技场机器人, 3-组队玩家镜像, 4-组队机器人
	optional uint32 teamid						= 3;//队伍ID,组队机器人才需要赋值
	optional uint32 zid							= 4;//区服ID，玩家镜像需要赋值
	optional AttrDBData attr					= 5;//总属性
	optional SkillDBData skill					= 6;//技能数据
	optional RoleDBBaseData base				= 7;//基础数据（包含外观数据）
	optional RoleDBEquipData equip				= 8;//装备数据
	repeated BestEQEquipInfo beast_equips		= 9;//所有的神机装备
	repeated BestEQSlotInfo	 beast_slots		= 10;//神机装备槽位
	optional int32 campid						= 11;//机器人阵营id
	optional int32 relive						= 12;//自动复活类型，0-不自动复活  1-附近复活点复活，2-原地复活
}


//-------------------------------- 帮派 ----------------------------------------

//帮派单个成员信息
message FactionMemDBProto
{
	optional uint64 cid = 1;						//玩家ID
	optional int32   duty = 2;						//职位
	optional uint64 join_time = 3;					//加入时间
	optional uint32 total_contri = 4;				//总贡献
}

//帮派成员信息
message FactionMultMemDBProto
{
	repeated FactionMemDBProto mem_lst = 1;
}

//帮派单个申请信息
message FactionApplyDBProto
{
	optional uint64 cid = 1;
	optional uint64 time = 2;
}
//帮派申请信息
message FactionMultApplyDBProto
{
	repeated FactionApplyDBProto apply_lst = 1;
}
//帮派单个记录
message FactionRecordDBProto
{
	optional uint64 cid = 1;
	optional uint64 time = 2;
	optional int32 op = 3;
	optional int64 param1 = 4;
}
//帮派记录
message FactionMutRecordDBProto
{
	repeated FactionRecordDBProto record_lst = 1;
}

//帮派DB基础数据
message FactionDBBase
{
	optional uint32 faction_id					= 1;	//帮派ID
	optional bytes name							= 2;	//帮派名字
	optional uint64 leader_id					= 3;	//会长
	optional uint64 fight						= 4;	//战力
	optional bytes notice						= 5;	//公告
	optional uint64 last_notice_time			= 6;	//最近修改公告的时间
	optional uint32 level						= 7;	//帮派等级
	optional uint64 exp							= 8;	//帮派经验
	optional uint64 create_time					= 9;	//创建时间
	optional uint64 proxy_id					= 10;	//代理帮主
	optional uint64 proxy_time					= 11;	//代理时间
	optional int32 grade						= 12;	//帮派评级
	optional FactionMultMemDBProto member		= 13;	//帮派成员
	optional FactionMultApplyDBProto apply      = 14;   //帮派申请
	optional FactionMutRecordDBProto record		= 15;   //帮派记录
	optional int32 apply_type					= 16;	//申请方式
	optional int32 apply_lev					= 17;	//申请的最小等级
	optional uint64 apply_fight					= 18;   //申请的最低战力
}

//帮派神兽排名DB数据
message FactionBeastHarmDBProto
{
	optional uint64 cid = 1;
	optional int64 harm = 2;
}

//帮派神兽DB数据
message FactionBeastDBData
{
	repeated FactionBeastHarmDBProto harm = 1;		//排名
	optional uint32 star = 2;						//星级
	optional int32 is_open = 3;						//是否已开启
	optional uint32 tribute = 4;					//神兽贡品
	optional uint32 today_count = 5;				//今日开启次数
	optional uint64 today_fresh = 6;				//最近一次刷新今日开启次数的时间
	optional uint32 week_count = 7;					//本周开启次数
	optional uint64 week_fresh = 8;					//最近一次刷新本周开启次数的时间
	optional int32 level = 9;						//神兽等级
	optional uint64 opentime = 10;					//最近一次开启的时间
}

//帮派守卫排名信息
message FactionGuardHarmDBProto
{
	optional uint64 cid = 1;		//玩家cid
	optional bytes name = 2;		//玩家名字
	optional int64 harm = 3;		//伤害
}

//帮派守卫DB数据
message FactionGuardDBData
{
	repeated FactionGuardHarmDBProto harm = 1;		//排名
	repeated FactionGuardHarmDBProto old_harm = 2;		//排名
	optional bool can_enter = 3;
}

//帮派镇魂魔域
message FactionMoyu
{
	optional uint64 week_harm = 1; 		//本周伤害
	optional uint64 last_week_harm = 2; //上周伤害
	optional int32 cur_layer = 3;
	optional uint64 cur_hp = 4;
	optional uint64 max_hp = 5;
	optional uint64 harm_time = 6;		//伤害时间
	optional uint64 refresh_time = 7; 	//时间
	optional int32 pass_layer = 8;		//通关的层
}

//帮派其他数据
message FactionDBData
{
	optional FactionBeastDBData beast = 1;  //帮派神兽
	optional FactionGuardDBData guard = 2; //帮派守卫
	optional FactionMoyu 		moyu = 3;	//帮派镇魂魔域
}

//帮派所有的DB数据
message FactionAllDBData
{
	optional uint32 faction_id	= 1;	//帮派ID
	optional FactionDBBase base = 2;	//基础数据
	optional FactionDBData data = 3;	//其他数据
}

message FactionDBMoyuRankEntry
{
	optional uint64 id = 1; 
	optional bytes name = 2;
	optional int32 zid = 3;
	optional uint64 harm = 4;
	optional uint64 harm_time =5;
}

message FactionDBMoyuRank
{
	optional int32 type = 1;	//类型
	optional int32 group = 2;	//分組
	repeated FactionDBMoyuRankEntry rank =3;
	optional uint64 time = 4;
}

message FactionDBMoyuRankDB
{
	repeated FactionDBMoyuRank infos=1; 
}

//------------------------------------ 登录 -------------------------------------


// 角色列表请求 DB_ROLE_LIST_REQ
message RoleListDBReq
{
  required uint64 reqid = 1;
  required uint32 uid = 2;
  required uint32 gateid = 3;
  required uint32 born_zid = 4;
}
//返回角色列表 DB_ROLE_LIST_RSP
message RoleListDBRsp
{
  required int32        ret = 1;
  required uint64        reqid = 2;
  required uint32             uid = 3;
  required uint32             gateid = 4;
  repeated RoleListDBProto    role_lst = 5;
  optional uint32        regnum = 6;  //注册人数
}
//创角请求 DB_CREATE_ROLE_REQ
message CreateRoleDBReq
{
  required uint64 reqid = 1;
  required uint32 zid = 2;
  required uint32 gateid = 3;
  required RoleDBData data = 4;
  optional uint32 uid = 5;      //uid
  optional uint32 channel_id = 6;      //渠道id
  optional uint32 zone_mid = 7;      //全服邮件最新id
  optional uint32 born_zid = 8;    //出生区服id

}
//返回创角结果  DB_CREATE_ROLE_RSP
message CreateRoleDBRsp
{
  required int32    ret = 1;
  required uint64     reqid = 2;
  required uint32     uid = 3;
  required uint32 gateid = 4;
  optional RoleListDBProto info = 5;
  optional uint32     born_zid = 6;
  optional CenterRoleProto simple = 7;
}
//角色信息请求 DB_ROLE_INFO_REQ
message RoleInfoDBReq
{
  required uint64 reqid = 1;
  required uint64 cid = 2;
  optional int32  change = 3;
}
//返回角色信息  DB_ROLE_INFO_RSP
message RoleInfoDBRsp
{
  required int32 ret = 1;
  required uint64 reqid = 2;
  required uint64 cid = 3;
  optional int32  change = 4;
  optional RoleDBData info = 5;
}

//更新角色信息  DB_ROLE_INFO_UPDATE_REQ	
message RoleInfoUpdateDBReq
{
  required uint64 cid = 1;
  required uint32 uid = 2;
  optional RoleDBData info = 3;
}

//请求 角色改名 DB_ROLE_CHG_NAME_REQ
message RoleChgNameDBReq
{
  required uint64 cid = 1;
  required bytes name = 2;
}
//返回 角色改名 DB_ROLE_CHG_NAME_RSP
message RoleChgNameDBRsp
{
  required int32 ret = 1;
  required uint64 cid = 2;
  required bytes name = 3;
}

//---------------------------------- 中心服角色简要数据缓存 ------------------------
//角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_REQ
message RoleSimpleListDBReq{
}

//DB返回 角色简要数据列表请求   DB_ROLE_SIMPLE_LIST_RSP
message RoleSimpleListDBRsp{
  required int32 ret = 1;              //返回码，详见 ComProtocol.proto ERetCode枚举
  repeated CenterRoleProto info = 2;          //角色离线数据
  optional int32 finish_flag = 3;        //所有数据加载是否是完成的标志
}


//--------------------------------- 切换逻辑服  -----------------------------------

//玩家切逻辑节点请求
message CreatureTransLogicDBReq
{
  optional bytes trans_data = 1; //切换逻辑节点数据 LogicCreatureTransSceneReq 序列化之后的数据
}
//DB返回逻辑服 生物切场景(主要用于玩家) 结果   DB_CREATURE_TRANS_SCENE_RSP
message CreatureTransLogicDBRsp
{
  required int32 retcode = 1; //返回码
  optional uint64 cid = 2;  //玩家CID
}

//------------------------------------ Mail -------------------------------------
//新邮件信息
message NewMailDBInfo
{
  repeated MailInfo data = 1;  //更新的邮件数据
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}
//邮件操作信息
message MailDBOperateInfo
{
  repeated uint32 mid_lst = 1; //邮件ID列表
  optional int32 result = 2;  //操作结果(DB返回的时候用到)
}

//保存邮件
message SaveMailDBReq
{
  required uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //新邮件信息
  optional MailDBOperateInfo del = 3;      //删除的邮件操作
  optional MailDBOperateInfo fetch = 4;    //领取附件的操作
  optional MailDBOperateInfo read = 5;    //阅读邮件的操作
  optional int32 notify = 6;          //是否需要通知
}

message SaveMailDBRsp
{
  required uint64 charid = 1;          //角色ID
  optional NewMailDBInfo info = 2;      //发送陈功的 新邮件信息
  optional MailDBOperateInfo del = 3;      //操作成功的 删除的邮件
  optional MailDBOperateInfo fetch = 4;    //操作成功的 领取附件
  optional MailDBOperateInfo read = 5;    //操作成功的 阅读邮件
  optional int32 notify = 6;          //是否需要通知
}

//请求玩家邮件数据
message CharacterMailDBRequest
{
  optional uint64 charID = 1;      //角色ID
  optional uint32 zone_mail_flag = 2; //是否加载zone mail标志
  optional int32 offset = 3;      //加载偏移
  optional uint32 reqid = 4;      //请求ID
}

//返回玩家邮件数据
message CharacterMailDBResponse
{
  optional uint64 charID = 1;      //角色ID
  repeated MailInfo info = 2;      //邮件详细数据
  optional uint32 zoneMailId = 3;     //角色最新全服id
  optional int32 offset = 4;      //加载偏移
  optional uint32 reqid = 5;      //请求ID
}

//加载最大邮件ID
message MaxMailIDRequest
{

}

message MaxMailIDResponse
{
  required uint32 maxZoneMailId = 1; //全服邮件最大id
}

//删除角色邮件数据
message DeleteCharacterMail
{
  required uint64 charID = 1;          //角色ID
}

//DBPROXY_PROTOCOL_ALL_ZONE_MAIL_SAVE_RSP
message ZoneMailSaveRsp
{
  required uint32  mailId = 1;              //全服邮件最新ID返回
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_REQ
message ZoneMailTransCharacterMailReq
{
  required uint32 mailId = 1;
  required uint64 cid = 2;
  required uint64 createtime = 3;
}

//DBPROXY_PROTOCOL_ZONE_MAIL_TRANS_RSP
message ZoneMailTransCharacterMailRsp
{
  required uint64   cid = 1;
  repeated MailInfo data = 2;          //需要更新到角色邮件的全服邮件数据
  required uint32 max_zone_mailid = 3; //全服邮件最大ID
}

//中心服向DB请求角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_REQ
message WebMailDBDataReq
{
  optional int32 op_type = 1;    //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;
  optional uint32 pernum = 3;    //每页邮件数量
  optional uint32 curpage = 4;  //当前页
  repeated uint32 id_lst = 5;    //需要撤回附件的邮件ID 列表
  required bytes webId = 6;    //web唯一ID的字符串
}
//DB返回中心服角色web邮件相关的数据 DBPROXY_PROTOCOL_WEB_MAIL_DATA_RSP
message WebMailDBDataRsp
{
  optional int32 op_type = 1;        //操作类型 1 查询邮件数据，2 撤回附件
  optional uint64 cid = 2;        //玩家cid
  optional uint32 curpage = 3;      //当前页
  optional uint32 totalcount = 4;      //总数量
  repeated uint32 id_lst = 5;        //成功撤回附件的邮件ID 列表
  repeated WebMailDataProto info_lst = 6;  //邮件数据列表
  required bytes webId = 7;        //web唯一ID的字符串
}
//------------------------------------ Mail -------------------------------------

//////////////////////////////////////Friend/////////////////////////////////////////////

message FriendDBInfo
{
  optional uint64 charID = 1;          //角色ID
  optional RelationDBInfo data = 2;      //好友数据
}

//好友数据请求
message FriendDBRequest
{
  optional uint64 charid = 1;        //操作人
  repeated uint64 dstid_lst = 2;      //请求角色列表
  optional uint32 operate_type = 3;    //操作类型
  optional bytes data = 4;        //参数数据
  optional uint32 query_times = 5;    //query次数
}
//好友数据返回
message FriendDBResponse
{
  optional int32 retcode = 1;        //返回码，详见 ComProtocol.proto ERetCode枚举
  optional uint64 charid = 2;        //操作人
  optional uint32 operate_type = 3;    //操作类型
  repeated FriendDBInfo info_lst = 4;    //好友数据
  repeated uint64 last_lst = 5;      //上一次剩余未加载角色列表
  optional bytes data = 6;        //参数数据
  optional uint32 query_times = 7;    //query次数
}

//所有的好友数据请求
message AllFriendDBRequest{
  required int32 offset = 1;    //数据库记录的偏移
}


message AllFriendDBResponse{
  required int32 retcode = 1;          //返回码，详见 ComProtocol.proto ERetCode枚举
  required int32 offset = 2;          //数据库记录的偏移
  repeated FriendDBInfo info = 3;        //好友数据
}

//保存好友数据
message SaveFriendDBRequest{
  repeated FriendDBInfo info = 1;    //好友数据
}

//删除好友数据
message DelteFriendDBRequest{
  optional uint64 charId = 1;
}

//////////////////////////////////////Friend/////////////////////////////////////////////

//////////////////////////////////////global/////////////////////////////////////////////
//请求global表数据
message GlobalDBRequst{
	
}
message GlobalDBEntry
{
	optional int32 type_id = 1;		//类型ID
	optional bytes data = 2;		//数据
}
//请求global表db返回的数据
message GlobalDBResponse{
	repeated GlobalDBEntry entry = 1; //全局数据部分
	optional int32 isfinish = 2;	//是否结束
}
//保存global表数据
message GlobalDBSetRequest{
	required int32 type_id = 1;		//类型ID
	optional bytes data = 2;		//数据
}

//保存global表数据db返回
message GlobalDBSetResponse{
	required int32 retcode = 1;		//返回码
	required int32 type_id = 2;		//类型ID
}
message GlobalComData
{
	repeated DupTowerDBRecord towerDupReward =1;	 //爬塔副本领奖记录
}

message GlobalYaotaDupDBEntry
{
	optional int32 dupid = 1;
	repeated RolePlayerMiniInfo info = 2;
	optional uint64 time = 3;
}

//九层妖塔霸主记录
message GlobalYaotaDupDBData
{
	repeated GlobalYaotaDupDBEntry entrys = 3;
}


////////////////////////////////////// 活动  //////////////////////////////////////////

message ActDBProto
{
	optional uint64 actid = 1;
	optional uint32 zid = 2;
	optional uint64 finishtime = 3;
}

//获取活动数据 DB_ACT_GET_DATA_REQ
message ActDBReq
{
	//
}
//返回活动数据 DB_ACT_GET_DATA_RSP
message ActDBRsp
{
	repeated ActDBProto lst = 1;
}
//保存活动数据 DB_ACT_SAVE_DATA_REQ	
message ActSaveDBReq
{
	repeated ActDBProto lst = 1;
}

//竞技场
message AllArenaDBRequest
{
  required int32 offset = 1;		//数据库记录的偏移
  required int32 retnum = 2;		//数据库返回的数量
}
//竞技场DB信息
message ArenaDBInfo
{
  optional uint64 charID = 1;					//角色ID
  optional uint32 rankId = 2;					//排名
}
//竞技场多个DB信息
message ArenaMoreDBInfo
{
  repeated ArenaDBInfo info = 1;	//竞技场数据
  optional uint32  day = 2;		//哪天的数据
  optional uint32	 giveReward = 3;//是否发过奖励
  optional uint32 max_rank = 4;//最大排名
}

message AllArenaDBResponse
{
  required int32 retcode = 1;					//返回码，详见 ComProtocol.proto ERetCode枚举
  required int32 offset = 2;					//数据库记录的偏移
  repeated ArenaDBInfo info = 3;				//竞技场数据
}

//保存竞技数据
message SaveArenaDBRequest{
  repeated ArenaDBInfo info = 1;
}

//删除玩家竞技场数据
message DeleteArenaDBRequest
{
  optional uint64 charId = 1;
}

///////////////////////////////// 玩家镜像  //////////////////////////////////

//请求玩家镜像数据 DB_ROLE_MIRROR_REQ
message RoleMirrorDBReq
{
	required uint64 cid = 1;		//角色cid
	required int64 int_param = 2;   //参数,原样返回
	required bytes str_param = 3;  //参数,原样返回
	required uint32 reqtype = 4;	//请求类型,原样返回

}

//返回玩家镜像数据 DB_ROLE_MIRROR_RSP
message RoleMirrorDBRsp
{
	required int32 ret = 1; 
	required uint64 cid = 2;			//角色cid
	required int64 int_param = 3;		//参数
	required bytes str_param = 4;		//参数
	required uint32 reqtype = 5;		//请求类型
	optional RoleMirrorData data = 6;	//数据
}

// ---------------------------------------  帮派  --------------------------------
//获取帮派数据 DB_FACTION_GET_DATA_REQ	
message FactionDataDBReq
{
}
//DB返回帮派数据 DB_FACTION_GET_DATA_RSP	
message FactionDataDBRsp
{
	repeated FactionAllDBData data_lst = 1;
	optional int32 finish = 2;
}
//保存帮派数据 DB_FACTION_SAVE_DATA_REQ
message FactionSaveDBReq
{
	optional FactionAllDBData data = 1;
}
//删除帮派数据 DB_FACTION_DEL_REQ
message FactionDelDBReq
{
	optional uint32 faction_id = 1;
}

//---------------------------------- 帮派红包---------------------------------------------
//获取帮派红包数据 DB_RED_REQ
message FactionRedDBReq
{
}
//DB返回帮派红包数据  DB_RED_RSP
message FactionRedDBRsp
{
	repeated RedDBData data_lst = 1;
	optional int32 finish = 2;
}
//保存帮派红包数据  DB_RED_SAVE_REQ
message FactionRedSaveDBReq
{
	required uint32 faction_id = 1;
	required RedDBData data0 = 2;
	required RedDBData data1 = 3;
	required RedDBData data2 = 4;
}
//删除帮派红包数据  DB_RED_DEL_REQ
message FactionRedDelDBReq
{
	required uint32 faction_id = 1;
}
//获取所有玩家红包数据 DB_RED_ROLE_REQ
message RoleRedDBReq
{
}
//DB返回帮派红包数据  DB_RED_ROLE_RSP
message RoleRedDBRsp
{
	repeated RoleRedDBData data_lst = 1;
	optional int32 finish = 2;
}

//---------------------------------- 通用的 DB数据表 ---------------------------------
//------ 适用于 只有两个字段的数据库表的加载和保存以及删除
//------ 表名自定义，表字段固定为 id-bigint,  data-blob

//通用的 请求从DB加载数据 DB_COM_LOAD_REQ
message ComLoadDBReq
{
	required uint64 id = 1;			//角色cid或者唯一ID
	required bytes table_name = 2;	//数据库表名
	required uint32 cmd = 3;		//加载DB数据后,通过哪个命令id返回给请求加载数据的服务器
}
//通用的返回 DB数据(返回的消息id是 ComLoadDBReq 中的 cmd)
message ComLoadDBRsp
{
	required uint64 id = 1;			//角色cid或者唯一ID
	required bytes data = 2;		//DB数据
}

//通用的 请求从DB加载所有数据 DB_COM_LOAD_ALL_REQ
message ComLoadAllDBReq
{
	required bytes table_name = 1;	//数据库表名
	required uint32 cmd = 2;		//加载DB数据后,通过哪个命令id返回给请求加载数据的服务器
}
//通用的结构
message ComDBProto
{
	required uint64 id = 1;			//角色cid或者唯一ID
	required bytes data = 2;		//DB数据
}
//通用的 返回 从DB加载所有数据 (返回的消息id是 ComLoadAllDBReq 中的 cmd)
message ComLoadAllDBRsp
{
	repeated ComDBProto data = 1;
	required int32 is_finish = 2;   //是否发送完了
}


//通用的 保存DB数据  DB_COM_SAVE_REQ
message ComSaveDBReq
{
	required uint64 id = 1;			//角色cid或者唯一ID
	required bytes data = 2;		//数据
	required bytes table_name = 3;	//表名
}
//通用的 删除DB数据 DB_COM_DEL_REQ
message ComDelDBReq
{
	required bytes table_name = 1;	//数据库表名
	repeated uint64 id_lst = 2;		//待删除的唯一ID列表
}
//------------------------------------------结婚----------------------------------------------------

message MarryApply
{
	optional uint64 apply_dst_id = 1;	//目标cid
	optional uint64 time = 2; 			//申请时间
	optional int32 gear = 3;			//档位
}

message MarrySimpleInfo
{
	optional uint64 m_id = 1;
	optional uint64 dst_id = 2;
	optional uint32 marry_id = 3;		//第几对
	optional MarryBrief brief = 4;		//简要数据
	optional MarryApply apply = 5;		//申请信息
	optional int32 state = 6;			//状态
}

//1-1:加载结婚数据 	DB_LOAD_MARRY_REQ
message MarryDBLoadReq
{
	optional int32 offset = 1;		//数据库记录的偏移
}

//1-2:db返回结婚数据  DB_LOAD_MARRY_RSP
message MarryDBLoadRsp
{
	optional int32 ret = 1;						//返回码
	optional int32 offset = 2;					//数据库记录的偏移
	repeated MarrySimpleInfo simple = 3;
}

//2-1:保存结婚数据 DB_MARRY_SAVE_REQ
message MarryDBSaveReq
{
	optional MarrySimpleInfo info = 1;
}

//---------------- 帮派答题排名 --------------------------
//帮派答题排名DB信息
message AnswerRankDBProto
{
	optional uint32 factionid = 1;
	optional bytes name = 2;
	optional uint32 count = 3;
	optional uint32 zid = 4;
}
//帮派答题DB数据
message AnswerDBData
{
	repeated AnswerRankDBProto rank = 1;
}

//---------------- 帮派守卫排名 --------------------------
//帮派守卫排名DB信息
message GuardRankDBProto
{
	optional uint32 factionid = 1;
	optional bytes name = 2;
	optional uint32 count = 3;
	optional uint64 time = 4;
	optional uint32 zid = 5;
}

//帮派守卫DB数据
message GuardDBData
{
	repeated GuardRankDBProto old_rank = 1;
	repeated GuardRankDBProto cur_rank = 2;
}


//-------------------------- 跨服1v1 -----------------------------------
//1v1排名
message Rank1v1DBProto
{
	optional int32 rank = 1; //排名
	optional uint64 cid = 2; //cid
	optional bytes name = 3; //名字
	optional int32 prof = 4; //职业
	optional uint64 fight = 5;//战力
	optional uint32 zid = 6; //区服ID
	optional int32 score = 7;//积分
	optional uint64 time = 8;//时间
	optional int32 match_num = 9;//参与场次
}
//1v1 DB数据
message Act1v1DBData
{
	repeated Rank1v1DBProto rank = 1;
	optional uint64 reset_time = 2;
	optional int32 num = 3;	
}

//---------------------------- 帮派战 ----------------------------------

//赛区帮派DB信息
message RaceFactionDBProto
{
	optional uint32 faction_id = 1;
	optional bytes name = 2;
	optional uint64 fight = 3;
	optional uint32 zid = 4;
}
//赛区帮派匹配信息
message RaceMatchDBProto
{
	optional uint32 faction_id1 = 1;
	optional uint32 faction_id2 = 2;
	optional uint32 faction_id = 3;		  //胜利的帮派
}
//赛区信息
message RaceDBProto
{
	optional int32 race = 1;					//赛区，1-人级赛区 2-地级赛区 3-天级赛区 4-仙级赛区 5-神级赛区
	repeated RaceFactionDBProto info_lst = 2;	//赛区帮派信息
}
//帮派排名
message WarRankDBProto
{
	optional uint32 faction_id = 1;
	optional bytes name = 2;
	optional uint32 zid = 3;
	optional int32 rank = 4;
}

//帮派战DB数据
message FactionWarDBData
{
	repeated RaceDBProto race = 1;			//赛区信息
	repeated WarRankDBProto rank = 2;		//帮派排名
	optional uint32 win_id = 3;
	optional bytes win_name = 4;
	optional int32 win_num = 5;
	optional uint32 win_zid = 6;
}

//砸蛋日志(天天养龙)
message DigEggLogDBProto
{
	optional bytes name = 1;
	optional int32 id = 2;
	optional uint64 cid = 3;
}
//节日活动砸蛋日志
message FestDigEggLogDBProto
{
	optional int32 template_id = 1;
	repeated DigEggLogDBProto info = 2;
}
//所有的 节日活动砸蛋日志 数据
message FestDigEggLogDBData
{
	repeated FestDigEggLogDBProto log = 1;
}

//所有的 节日活动转盘多倍返玉 数据
message FestRTurnableLogDBData
{
	repeated FestRTurnableLogDBProto log = 1;
}

//所有的 全民嗨翻天 数据
message FestDonateDBData
{
	repeated DonateServerDBProto data = 1;
}

//所有的 开服庆典 数据
message FestDrawPizeLogDBData
{
	repeated FestDrawPizeLogDBProto log = 1;
}
//===============市场=====================
//商品信息
message GoodsDB
{
	optional uint64 order_id =1;			//商品id
	optional int32 	market_type = 2;		//商品所属市场 1：世界 2工会
	optional uint64 market_owner = 3;		//世界0：工会id
	optional uint64 role_id = 4;			//上架者cid
	optional uint64 start_time = 5;			//挂单时间
	optional uint64 end_time = 6;			//结束时间
	optional uint64 vie_id = 7;				//当前竞价玩家cid
	optional int32 	state = 8;				//0交易中 1成交 2流拍 
	optional int32 isdelete = 9;			//是否删除
	optional uint64 cmpt_time =10;			//交易完成时间
	optional int32 cur_price = 11;			//当前价格
	optional int32 cmpt_price = 12;			//成交价格
	optional uint64 buyer_id = 13;			//购买方id
	optional uint64 vie_time = 14;			//竞价时间
	optional ItemProtoInfo item_data = 15; 	//物品信息
	optional int32 item_price = 16;			//物品总价
	optional bytes take_list = 17;			//分红者cids
	optional bytes vie_list = 18;			//参与竞价的玩家ids
	optional uint64 ready_time = 19;			//准备时间
	optional int32 is_take = 20;			//是否已分红
}
//加载市场商品 LOAD_GOODS_REQ
message LoadGoodsReq
{	
	optional int64 start_time = 1;
}
//商品信息加载 MARKET_DB_LOAD_RSP
message MarketDBLoadRsp
{
	repeated GoodsDB infos =1;
	optional int32 is_finish = 2;
}
//商品信息保存 MARKET_SAVE_REQ
message MarketSaveReq
{
	optional GoodsDB info = 1;
}
//删除商品 MARKET_DEL_REQ
message MarketDelReq
{
	optional uint64 order_id = 1;
}

//===========================  烛龙挑战(天天养龙)  DB数据 =================================

message CandleHarmDBProto
{
	optional uint64 cid = 1;
	optional bytes name = 2;
	optional uint64 harm = 3;
	optional uint32 zid = 4;
	optional int32 rank = 5;
}

//烛龙挑战DB数据
message CandleDBData
{
	optional int32 index = 1;
	repeated CandleHarmDBProto ham = 2;		//排名伤害
	optional uint64 time = 3;				//上一次重置的时间
}
