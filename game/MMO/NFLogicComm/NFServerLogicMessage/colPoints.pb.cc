// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: colPoints.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "colPoints.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* colPointscolPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  colPointscolPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_colPointscolPoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_colPointscolPoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* colPointstask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  colPointstask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_colPointstask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_colPointstask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_colPoints_2eproto() {
  protobuf_AddDesc_colPoints_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "colPoints.proto");
  GOOGLE_CHECK(file != NULL);
  colPointscolPoints_descriptor_ = file->message_type(0);
  static const int colPointscolPoints_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, beginpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, targetpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, taskid_),
  };
  colPointscolPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      colPointscolPoints_descriptor_,
      colPointscolPoints::default_instance_,
      colPointscolPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointscolPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(colPointscolPoints));
  Sheet_colPointscolPoints_descriptor_ = file->message_type(1);
  static const int Sheet_colPointscolPoints_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointscolPoints, colpointscolpoints_list_),
  };
  Sheet_colPointscolPoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_colPointscolPoints_descriptor_,
      Sheet_colPointscolPoints::default_instance_,
      Sheet_colPointscolPoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointscolPoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointscolPoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_colPointscolPoints));
  colPointstask_descriptor_ = file->message_type(2);
  static const int colPointstask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, taskparam_),
  };
  colPointstask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      colPointstask_descriptor_,
      colPointstask::default_instance_,
      colPointstask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(colPointstask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(colPointstask));
  Sheet_colPointstask_descriptor_ = file->message_type(3);
  static const int Sheet_colPointstask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointstask, colpointstask_list_),
  };
  Sheet_colPointstask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_colPointstask_descriptor_,
      Sheet_colPointstask::default_instance_,
      Sheet_colPointstask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointstask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_colPointstask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_colPointstask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_colPoints_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    colPointscolPoints_descriptor_, &colPointscolPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_colPointscolPoints_descriptor_, &Sheet_colPointscolPoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    colPointstask_descriptor_, &colPointstask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_colPointstask_descriptor_, &Sheet_colPointstask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_colPoints_2eproto() {
  delete colPointscolPoints::default_instance_;
  delete colPointscolPoints_reflection_;
  delete Sheet_colPointscolPoints::default_instance_;
  delete Sheet_colPointscolPoints_reflection_;
  delete colPointstask::default_instance_;
  delete colPointstask_reflection_;
  delete Sheet_colPointstask::default_instance_;
  delete Sheet_colPointstask_reflection_;
}

void protobuf_AddDesc_colPoints_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017colPoints.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\322\001\n\022colPointscolPoints\022\022\n\002id\030"
    "\001 \001(\005B\006\302\377\024\002id\022\032\n\006weight\030\002 \001(\005B\n\302\377\024\006\346\235\203\351\207"
    "\215\022\031\n\005boxid\030\003 \001(\003B\n\302\377\024\006\345\245\226\345\212\261\022$\n\nbeginPoi"
    "nt\030\004 \001(\005B\020\302\377\024\014\345\210\235\345\247\213\347\202\271\346\225\260\022%\n\013targetPoin"
    "t\030\005 \001(\005B\020\302\377\024\014\347\233\256\346\240\207\347\202\271\346\225\260\022$\n\006taskID\030\006 \001("
    "\tB\024\302\377\024\014\345\214\205\345\220\253\344\273\273\345\212\241\220\301\024 \"_\n\030Sheet_colPoin"
    "tscolPoints\022C\n\027colPointscolPoints_List\030\001"
    " \003(\0132\034.proto_ff.colPointscolPointsB\004\210\301\024l"
    "\"\257\001\n\rcolPointstask\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\037"
    "\n\005point\030\002 \001(\005B\020\302\377\024\014\345\242\236\345\212\240\347\202\271\346\225\260\022 \n\003num\030\003"
    " \001(\005B\023\302\377\024\017\345\217\257\345\256\214\346\210\220\346\254\241\346\225\260\022\036\n\004task\030\004 \001(\005B"
    "\020\302\377\024\014\346\235\241\344\273\266\347\261\273\345\236\213\022\'\n\ttaskParam\030\005 \001(\tB\024\302\377"
    "\024\014\346\235\241\344\273\266\345\217\202\346\225\260\220\301\024 \"P\n\023Sheet_colPointstas"
    "k\0229\n\022colPointstask_List\030\001 \003(\0132\027.proto_ff"
    ".colPointstaskB\004\210\301\024k", 620);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "colPoints.proto", &protobuf_RegisterTypes);
  colPointscolPoints::default_instance_ = new colPointscolPoints();
  Sheet_colPointscolPoints::default_instance_ = new Sheet_colPointscolPoints();
  colPointstask::default_instance_ = new colPointstask();
  Sheet_colPointstask::default_instance_ = new Sheet_colPointstask();
  colPointscolPoints::default_instance_->InitAsDefaultInstance();
  Sheet_colPointscolPoints::default_instance_->InitAsDefaultInstance();
  colPointstask::default_instance_->InitAsDefaultInstance();
  Sheet_colPointstask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_colPoints_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_colPoints_2eproto {
  StaticDescriptorInitializer_colPoints_2eproto() {
    protobuf_AddDesc_colPoints_2eproto();
  }
} static_descriptor_initializer_colPoints_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int colPointscolPoints::kIdFieldNumber;
const int colPointscolPoints::kWeightFieldNumber;
const int colPointscolPoints::kBoxidFieldNumber;
const int colPointscolPoints::kBeginPointFieldNumber;
const int colPointscolPoints::kTargetPointFieldNumber;
const int colPointscolPoints::kTaskIDFieldNumber;
#endif  // !_MSC_VER

colPointscolPoints::colPointscolPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void colPointscolPoints::InitAsDefaultInstance() {
}

colPointscolPoints::colPointscolPoints(const colPointscolPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void colPointscolPoints::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  weight_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  beginpoint_ = 0;
  targetpoint_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

colPointscolPoints::~colPointscolPoints() {
  SharedDtor();
}

void colPointscolPoints::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void colPointscolPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* colPointscolPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return colPointscolPoints_descriptor_;
}

const colPointscolPoints& colPointscolPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colPoints_2eproto();
  return *default_instance_;
}

colPointscolPoints* colPointscolPoints::default_instance_ = NULL;

colPointscolPoints* colPointscolPoints::New() const {
  return new colPointscolPoints;
}

void colPointscolPoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    weight_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    beginpoint_ = 0;
    targetpoint_ = 0;
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool colPointscolPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weight;
        break;
      }

      // optional int32 weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beginPoint;
        break;
      }

      // optional int32 beginPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginpoint_)));
          set_has_beginpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetPoint;
        break;
      }

      // optional int32 targetPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetpoint_)));
          set_has_targetpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_taskID;
        break;
      }

      // optional string taskID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void colPointscolPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->weight(), output);
  }

  // optional int64 boxid = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  // optional int32 beginPoint = 4;
  if (has_beginpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beginpoint(), output);
  }

  // optional int32 targetPoint = 5;
  if (has_targetpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetpoint(), output);
  }

  // optional string taskID = 6;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* colPointscolPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->weight(), target);
  }

  // optional int64 boxid = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  // optional int32 beginPoint = 4;
  if (has_beginpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->beginpoint(), target);
  }

  // optional int32 targetPoint = 5;
  if (has_targetpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetpoint(), target);
  }

  // optional string taskID = 6;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int colPointscolPoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 weight = 2;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int64 boxid = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 beginPoint = 4;
    if (has_beginpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginpoint());
    }

    // optional int32 targetPoint = 5;
    if (has_targetpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetpoint());
    }

    // optional string taskID = 6;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void colPointscolPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const colPointscolPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const colPointscolPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void colPointscolPoints::MergeFrom(const colPointscolPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_beginpoint()) {
      set_beginpoint(from.beginpoint());
    }
    if (from.has_targetpoint()) {
      set_targetpoint(from.targetpoint());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void colPointscolPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void colPointscolPoints::CopyFrom(const colPointscolPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool colPointscolPoints::IsInitialized() const {

  return true;
}

void colPointscolPoints::Swap(colPointscolPoints* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weight_, other->weight_);
    std::swap(boxid_, other->boxid_);
    std::swap(beginpoint_, other->beginpoint_);
    std::swap(targetpoint_, other->targetpoint_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata colPointscolPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = colPointscolPoints_descriptor_;
  metadata.reflection = colPointscolPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_colPointscolPoints::kColPointscolPointsListFieldNumber;
#endif  // !_MSC_VER

Sheet_colPointscolPoints::Sheet_colPointscolPoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_colPointscolPoints::InitAsDefaultInstance() {
}

Sheet_colPointscolPoints::Sheet_colPointscolPoints(const Sheet_colPointscolPoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_colPointscolPoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_colPointscolPoints::~Sheet_colPointscolPoints() {
  SharedDtor();
}

void Sheet_colPointscolPoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_colPointscolPoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_colPointscolPoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_colPointscolPoints_descriptor_;
}

const Sheet_colPointscolPoints& Sheet_colPointscolPoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colPoints_2eproto();
  return *default_instance_;
}

Sheet_colPointscolPoints* Sheet_colPointscolPoints::default_instance_ = NULL;

Sheet_colPointscolPoints* Sheet_colPointscolPoints::New() const {
  return new Sheet_colPointscolPoints;
}

void Sheet_colPointscolPoints::Clear() {
  colpointscolpoints_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_colPointscolPoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colPointscolPoints_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colpointscolpoints_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_colPointscolPoints_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_colPointscolPoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
  for (int i = 0; i < this->colpointscolpoints_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colpointscolpoints_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_colPointscolPoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
  for (int i = 0; i < this->colpointscolpoints_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colpointscolpoints_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_colPointscolPoints::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.colPointscolPoints colPointscolPoints_List = 1;
  total_size += 1 * this->colpointscolpoints_list_size();
  for (int i = 0; i < this->colpointscolpoints_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colpointscolpoints_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_colPointscolPoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_colPointscolPoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_colPointscolPoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_colPointscolPoints::MergeFrom(const Sheet_colPointscolPoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  colpointscolpoints_list_.MergeFrom(from.colpointscolpoints_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_colPointscolPoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_colPointscolPoints::CopyFrom(const Sheet_colPointscolPoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_colPointscolPoints::IsInitialized() const {

  return true;
}

void Sheet_colPointscolPoints::Swap(Sheet_colPointscolPoints* other) {
  if (other != this) {
    colpointscolpoints_list_.Swap(&other->colpointscolpoints_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_colPointscolPoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_colPointscolPoints_descriptor_;
  metadata.reflection = Sheet_colPointscolPoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int colPointstask::kIdFieldNumber;
const int colPointstask::kPointFieldNumber;
const int colPointstask::kNumFieldNumber;
const int colPointstask::kTaskFieldNumber;
const int colPointstask::kTaskParamFieldNumber;
#endif  // !_MSC_VER

colPointstask::colPointstask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void colPointstask::InitAsDefaultInstance() {
}

colPointstask::colPointstask(const colPointstask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void colPointstask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  point_ = 0;
  num_ = 0;
  task_ = 0;
  taskparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

colPointstask::~colPointstask() {
  SharedDtor();
}

void colPointstask::SharedDtor() {
  if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
    delete taskparam_;
  }
  if (this != default_instance_) {
  }
}

void colPointstask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* colPointstask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return colPointstask_descriptor_;
}

const colPointstask& colPointstask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colPoints_2eproto();
  return *default_instance_;
}

colPointstask* colPointstask::default_instance_ = NULL;

colPointstask* colPointstask::New() const {
  return new colPointstask;
}

void colPointstask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    point_ = 0;
    num_ = 0;
    task_ = 0;
    if (has_taskparam()) {
      if (taskparam_ != &::google::protobuf::internal::kEmptyString) {
        taskparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool colPointstask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional int32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_task;
        break;
      }

      // optional int32 task = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_)));
          set_has_task();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskParam;
        break;
      }

      // optional string taskParam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskparam().data(), this->taskparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void colPointstask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 task = 4;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->task(), output);
  }

  // optional string taskParam = 5;
  if (has_taskparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskparam().data(), this->taskparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->taskparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* colPointstask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 task = 4;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->task(), target);
  }

  // optional string taskParam = 5;
  if (has_taskparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskparam().data(), this->taskparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->taskparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int colPointstask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 task = 4;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task());
    }

    // optional string taskParam = 5;
    if (has_taskparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void colPointstask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const colPointstask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const colPointstask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void colPointstask::MergeFrom(const colPointstask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_task()) {
      set_task(from.task());
    }
    if (from.has_taskparam()) {
      set_taskparam(from.taskparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void colPointstask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void colPointstask::CopyFrom(const colPointstask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool colPointstask::IsInitialized() const {

  return true;
}

void colPointstask::Swap(colPointstask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_, other->point_);
    std::swap(num_, other->num_);
    std::swap(task_, other->task_);
    std::swap(taskparam_, other->taskparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata colPointstask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = colPointstask_descriptor_;
  metadata.reflection = colPointstask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_colPointstask::kColPointstaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_colPointstask::Sheet_colPointstask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_colPointstask::InitAsDefaultInstance() {
}

Sheet_colPointstask::Sheet_colPointstask(const Sheet_colPointstask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_colPointstask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_colPointstask::~Sheet_colPointstask() {
  SharedDtor();
}

void Sheet_colPointstask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_colPointstask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_colPointstask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_colPointstask_descriptor_;
}

const Sheet_colPointstask& Sheet_colPointstask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_colPoints_2eproto();
  return *default_instance_;
}

Sheet_colPointstask* Sheet_colPointstask::default_instance_ = NULL;

Sheet_colPointstask* Sheet_colPointstask::New() const {
  return new Sheet_colPointstask;
}

void Sheet_colPointstask::Clear() {
  colpointstask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_colPointstask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.colPointstask colPointstask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colPointstask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_colpointstask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_colPointstask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_colPointstask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.colPointstask colPointstask_List = 1;
  for (int i = 0; i < this->colpointstask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->colpointstask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_colPointstask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.colPointstask colPointstask_List = 1;
  for (int i = 0; i < this->colpointstask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->colpointstask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_colPointstask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.colPointstask colPointstask_List = 1;
  total_size += 1 * this->colpointstask_list_size();
  for (int i = 0; i < this->colpointstask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->colpointstask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_colPointstask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_colPointstask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_colPointstask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_colPointstask::MergeFrom(const Sheet_colPointstask& from) {
  GOOGLE_CHECK_NE(&from, this);
  colpointstask_list_.MergeFrom(from.colpointstask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_colPointstask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_colPointstask::CopyFrom(const Sheet_colPointstask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_colPointstask::IsInitialized() const {

  return true;
}

void Sheet_colPointstask::Swap(Sheet_colPointstask* other) {
  if (other != this) {
    colpointstask_list_.Swap(&other->colpointstask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_colPointstask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_colPointstask_descriptor_;
  metadata.reflection = Sheet_colPointstask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
