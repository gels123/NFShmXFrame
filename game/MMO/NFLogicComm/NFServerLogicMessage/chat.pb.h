// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class chatchat;
class Sheet_chatchat;
class chatspecialchat;
class Sheet_chatspecialchat;

// ===================================================================

class chatchat : public ::google::protobuf::Message {
 public:
  chatchat();
  virtual ~chatchat();

  chatchat(const chatchat& from);

  inline chatchat& operator=(const chatchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chatchat& default_instance();

  void Swap(chatchat* other);

  // implements Message ----------------------------------------------

  chatchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chatchat& from);
  void MergeFrom(const chatchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 chatId = 1;
  inline bool has_chatid() const;
  inline void clear_chatid();
  static const int kChatIdFieldNumber = 1;
  inline ::google::protobuf::int64 chatid() const;
  inline void set_chatid(::google::protobuf::int64 value);

  // optional int32 chatType = 2;
  inline bool has_chattype() const;
  inline void clear_chattype();
  static const int kChatTypeFieldNumber = 2;
  inline ::google::protobuf::int32 chattype() const;
  inline void set_chattype(::google::protobuf::int32 value);

  // optional int32 showTime = 3;
  inline bool has_showtime() const;
  inline void clear_showtime();
  static const int kShowTimeFieldNumber = 3;
  inline ::google::protobuf::int32 showtime() const;
  inline void set_showtime(::google::protobuf::int32 value);

  // optional string chatContent = 4;
  inline bool has_chatcontent() const;
  inline void clear_chatcontent();
  static const int kChatContentFieldNumber = 4;
  inline const ::std::string& chatcontent() const;
  inline void set_chatcontent(const ::std::string& value);
  inline void set_chatcontent(const char* value);
  inline void set_chatcontent(const char* value, size_t size);
  inline ::std::string* mutable_chatcontent();
  inline ::std::string* release_chatcontent();
  inline void set_allocated_chatcontent(::std::string* chatcontent);

  // optional int32 channel = 5;
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 5;
  inline ::google::protobuf::int32 channel() const;
  inline void set_channel(::google::protobuf::int32 value);

  // optional int32 CrossService = 6;
  inline bool has_crossservice() const;
  inline void clear_crossservice();
  static const int kCrossServiceFieldNumber = 6;
  inline ::google::protobuf::int32 crossservice() const;
  inline void set_crossservice(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.chatchat)
 private:
  inline void set_has_chatid();
  inline void clear_has_chatid();
  inline void set_has_chattype();
  inline void clear_has_chattype();
  inline void set_has_showtime();
  inline void clear_has_showtime();
  inline void set_has_chatcontent();
  inline void clear_has_chatcontent();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_crossservice();
  inline void clear_has_crossservice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 chatid_;
  ::google::protobuf::int32 chattype_;
  ::google::protobuf::int32 showtime_;
  ::std::string* chatcontent_;
  ::google::protobuf::int32 channel_;
  ::google::protobuf::int32 crossservice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static chatchat* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_chatchat : public ::google::protobuf::Message {
 public:
  Sheet_chatchat();
  virtual ~Sheet_chatchat();

  Sheet_chatchat(const Sheet_chatchat& from);

  inline Sheet_chatchat& operator=(const Sheet_chatchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_chatchat& default_instance();

  void Swap(Sheet_chatchat* other);

  // implements Message ----------------------------------------------

  Sheet_chatchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_chatchat& from);
  void MergeFrom(const Sheet_chatchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.chatchat chatchat_List = 1;
  inline int chatchat_list_size() const;
  inline void clear_chatchat_list();
  static const int kChatchatListFieldNumber = 1;
  inline const ::proto_ff::chatchat& chatchat_list(int index) const;
  inline ::proto_ff::chatchat* mutable_chatchat_list(int index);
  inline ::proto_ff::chatchat* add_chatchat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::chatchat >&
      chatchat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::chatchat >*
      mutable_chatchat_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_chatchat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::chatchat > chatchat_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Sheet_chatchat* default_instance_;
};
// -------------------------------------------------------------------

class chatspecialchat : public ::google::protobuf::Message {
 public:
  chatspecialchat();
  virtual ~chatspecialchat();

  chatspecialchat(const chatspecialchat& from);

  inline chatspecialchat& operator=(const chatspecialchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const chatspecialchat& default_instance();

  void Swap(chatspecialchat* other);

  // implements Message ----------------------------------------------

  chatspecialchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const chatspecialchat& from);
  void MergeFrom(const chatspecialchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string parama = 2;
  inline bool has_parama() const;
  inline void clear_parama();
  static const int kParamaFieldNumber = 2;
  inline const ::std::string& parama() const;
  inline void set_parama(const ::std::string& value);
  inline void set_parama(const char* value);
  inline void set_parama(const char* value, size_t size);
  inline ::std::string* mutable_parama();
  inline ::std::string* release_parama();
  inline void set_allocated_parama(::std::string* parama);

  // optional string paramb = 3;
  inline bool has_paramb() const;
  inline void clear_paramb();
  static const int kParambFieldNumber = 3;
  inline const ::std::string& paramb() const;
  inline void set_paramb(const ::std::string& value);
  inline void set_paramb(const char* value);
  inline void set_paramb(const char* value, size_t size);
  inline ::std::string* mutable_paramb();
  inline ::std::string* release_paramb();
  inline void set_allocated_paramb(::std::string* paramb);

  // optional int64 chat_Id = 4;
  inline bool has_chat_id() const;
  inline void clear_chat_id();
  static const int kChatIdFieldNumber = 4;
  inline ::google::protobuf::int64 chat_id() const;
  inline void set_chat_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.chatspecialchat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_parama();
  inline void clear_has_parama();
  inline void set_has_paramb();
  inline void clear_has_paramb();
  inline void set_has_chat_id();
  inline void clear_has_chat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* parama_;
  ::std::string* paramb_;
  ::google::protobuf::int64 chat_id_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static chatspecialchat* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_chatspecialchat : public ::google::protobuf::Message {
 public:
  Sheet_chatspecialchat();
  virtual ~Sheet_chatspecialchat();

  Sheet_chatspecialchat(const Sheet_chatspecialchat& from);

  inline Sheet_chatspecialchat& operator=(const Sheet_chatspecialchat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_chatspecialchat& default_instance();

  void Swap(Sheet_chatspecialchat* other);

  // implements Message ----------------------------------------------

  Sheet_chatspecialchat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_chatspecialchat& from);
  void MergeFrom(const Sheet_chatspecialchat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
  inline int chatspecialchat_list_size() const;
  inline void clear_chatspecialchat_list();
  static const int kChatspecialchatListFieldNumber = 1;
  inline const ::proto_ff::chatspecialchat& chatspecialchat_list(int index) const;
  inline ::proto_ff::chatspecialchat* mutable_chatspecialchat_list(int index);
  inline ::proto_ff::chatspecialchat* add_chatspecialchat_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::chatspecialchat >&
      chatspecialchat_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::chatspecialchat >*
      mutable_chatspecialchat_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_chatspecialchat)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::chatspecialchat > chatspecialchat_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_chat_2eproto();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
  static Sheet_chatspecialchat* default_instance_;
};
// ===================================================================


// ===================================================================

// chatchat

// optional int64 chatId = 1;
inline bool chatchat::has_chatid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatchat::set_has_chatid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chatchat::clear_has_chatid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chatchat::clear_chatid() {
  chatid_ = GOOGLE_LONGLONG(0);
  clear_has_chatid();
}
inline ::google::protobuf::int64 chatchat::chatid() const {
  return chatid_;
}
inline void chatchat::set_chatid(::google::protobuf::int64 value) {
  set_has_chatid();
  chatid_ = value;
}

// optional int32 chatType = 2;
inline bool chatchat::has_chattype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatchat::set_has_chattype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chatchat::clear_has_chattype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chatchat::clear_chattype() {
  chattype_ = 0;
  clear_has_chattype();
}
inline ::google::protobuf::int32 chatchat::chattype() const {
  return chattype_;
}
inline void chatchat::set_chattype(::google::protobuf::int32 value) {
  set_has_chattype();
  chattype_ = value;
}

// optional int32 showTime = 3;
inline bool chatchat::has_showtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chatchat::set_has_showtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chatchat::clear_has_showtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chatchat::clear_showtime() {
  showtime_ = 0;
  clear_has_showtime();
}
inline ::google::protobuf::int32 chatchat::showtime() const {
  return showtime_;
}
inline void chatchat::set_showtime(::google::protobuf::int32 value) {
  set_has_showtime();
  showtime_ = value;
}

// optional string chatContent = 4;
inline bool chatchat::has_chatcontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chatchat::set_has_chatcontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chatchat::clear_has_chatcontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chatchat::clear_chatcontent() {
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    chatcontent_->clear();
  }
  clear_has_chatcontent();
}
inline const ::std::string& chatchat::chatcontent() const {
  return *chatcontent_;
}
inline void chatchat::set_chatcontent(const ::std::string& value) {
  set_has_chatcontent();
  if (chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    chatcontent_ = new ::std::string;
  }
  chatcontent_->assign(value);
}
inline void chatchat::set_chatcontent(const char* value) {
  set_has_chatcontent();
  if (chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    chatcontent_ = new ::std::string;
  }
  chatcontent_->assign(value);
}
inline void chatchat::set_chatcontent(const char* value, size_t size) {
  set_has_chatcontent();
  if (chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    chatcontent_ = new ::std::string;
  }
  chatcontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chatchat::mutable_chatcontent() {
  set_has_chatcontent();
  if (chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    chatcontent_ = new ::std::string;
  }
  return chatcontent_;
}
inline ::std::string* chatchat::release_chatcontent() {
  clear_has_chatcontent();
  if (chatcontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chatcontent_;
    chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chatchat::set_allocated_chatcontent(::std::string* chatcontent) {
  if (chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete chatcontent_;
  }
  if (chatcontent) {
    set_has_chatcontent();
    chatcontent_ = chatcontent;
  } else {
    clear_has_chatcontent();
    chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 channel = 5;
inline bool chatchat::has_channel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void chatchat::set_has_channel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void chatchat::clear_has_channel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void chatchat::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::google::protobuf::int32 chatchat::channel() const {
  return channel_;
}
inline void chatchat::set_channel(::google::protobuf::int32 value) {
  set_has_channel();
  channel_ = value;
}

// optional int32 CrossService = 6;
inline bool chatchat::has_crossservice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void chatchat::set_has_crossservice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void chatchat::clear_has_crossservice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void chatchat::clear_crossservice() {
  crossservice_ = 0;
  clear_has_crossservice();
}
inline ::google::protobuf::int32 chatchat::crossservice() const {
  return crossservice_;
}
inline void chatchat::set_crossservice(::google::protobuf::int32 value) {
  set_has_crossservice();
  crossservice_ = value;
}

// -------------------------------------------------------------------

// Sheet_chatchat

// repeated .proto_ff.chatchat chatchat_List = 1;
inline int Sheet_chatchat::chatchat_list_size() const {
  return chatchat_list_.size();
}
inline void Sheet_chatchat::clear_chatchat_list() {
  chatchat_list_.Clear();
}
inline const ::proto_ff::chatchat& Sheet_chatchat::chatchat_list(int index) const {
  return chatchat_list_.Get(index);
}
inline ::proto_ff::chatchat* Sheet_chatchat::mutable_chatchat_list(int index) {
  return chatchat_list_.Mutable(index);
}
inline ::proto_ff::chatchat* Sheet_chatchat::add_chatchat_list() {
  return chatchat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::chatchat >&
Sheet_chatchat::chatchat_list() const {
  return chatchat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::chatchat >*
Sheet_chatchat::mutable_chatchat_list() {
  return &chatchat_list_;
}

// -------------------------------------------------------------------

// chatspecialchat

// optional int32 type = 1;
inline bool chatspecialchat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void chatspecialchat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void chatspecialchat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void chatspecialchat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 chatspecialchat::type() const {
  return type_;
}
inline void chatspecialchat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string parama = 2;
inline bool chatspecialchat::has_parama() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void chatspecialchat::set_has_parama() {
  _has_bits_[0] |= 0x00000002u;
}
inline void chatspecialchat::clear_has_parama() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void chatspecialchat::clear_parama() {
  if (parama_ != &::google::protobuf::internal::kEmptyString) {
    parama_->clear();
  }
  clear_has_parama();
}
inline const ::std::string& chatspecialchat::parama() const {
  return *parama_;
}
inline void chatspecialchat::set_parama(const ::std::string& value) {
  set_has_parama();
  if (parama_ == &::google::protobuf::internal::kEmptyString) {
    parama_ = new ::std::string;
  }
  parama_->assign(value);
}
inline void chatspecialchat::set_parama(const char* value) {
  set_has_parama();
  if (parama_ == &::google::protobuf::internal::kEmptyString) {
    parama_ = new ::std::string;
  }
  parama_->assign(value);
}
inline void chatspecialchat::set_parama(const char* value, size_t size) {
  set_has_parama();
  if (parama_ == &::google::protobuf::internal::kEmptyString) {
    parama_ = new ::std::string;
  }
  parama_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chatspecialchat::mutable_parama() {
  set_has_parama();
  if (parama_ == &::google::protobuf::internal::kEmptyString) {
    parama_ = new ::std::string;
  }
  return parama_;
}
inline ::std::string* chatspecialchat::release_parama() {
  clear_has_parama();
  if (parama_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parama_;
    parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chatspecialchat::set_allocated_parama(::std::string* parama) {
  if (parama_ != &::google::protobuf::internal::kEmptyString) {
    delete parama_;
  }
  if (parama) {
    set_has_parama();
    parama_ = parama;
  } else {
    clear_has_parama();
    parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string paramb = 3;
inline bool chatspecialchat::has_paramb() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void chatspecialchat::set_has_paramb() {
  _has_bits_[0] |= 0x00000004u;
}
inline void chatspecialchat::clear_has_paramb() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void chatspecialchat::clear_paramb() {
  if (paramb_ != &::google::protobuf::internal::kEmptyString) {
    paramb_->clear();
  }
  clear_has_paramb();
}
inline const ::std::string& chatspecialchat::paramb() const {
  return *paramb_;
}
inline void chatspecialchat::set_paramb(const ::std::string& value) {
  set_has_paramb();
  if (paramb_ == &::google::protobuf::internal::kEmptyString) {
    paramb_ = new ::std::string;
  }
  paramb_->assign(value);
}
inline void chatspecialchat::set_paramb(const char* value) {
  set_has_paramb();
  if (paramb_ == &::google::protobuf::internal::kEmptyString) {
    paramb_ = new ::std::string;
  }
  paramb_->assign(value);
}
inline void chatspecialchat::set_paramb(const char* value, size_t size) {
  set_has_paramb();
  if (paramb_ == &::google::protobuf::internal::kEmptyString) {
    paramb_ = new ::std::string;
  }
  paramb_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* chatspecialchat::mutable_paramb() {
  set_has_paramb();
  if (paramb_ == &::google::protobuf::internal::kEmptyString) {
    paramb_ = new ::std::string;
  }
  return paramb_;
}
inline ::std::string* chatspecialchat::release_paramb() {
  clear_has_paramb();
  if (paramb_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = paramb_;
    paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void chatspecialchat::set_allocated_paramb(::std::string* paramb) {
  if (paramb_ != &::google::protobuf::internal::kEmptyString) {
    delete paramb_;
  }
  if (paramb) {
    set_has_paramb();
    paramb_ = paramb;
  } else {
    clear_has_paramb();
    paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 chat_Id = 4;
inline bool chatspecialchat::has_chat_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void chatspecialchat::set_has_chat_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void chatspecialchat::clear_has_chat_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void chatspecialchat::clear_chat_id() {
  chat_id_ = GOOGLE_LONGLONG(0);
  clear_has_chat_id();
}
inline ::google::protobuf::int64 chatspecialchat::chat_id() const {
  return chat_id_;
}
inline void chatspecialchat::set_chat_id(::google::protobuf::int64 value) {
  set_has_chat_id();
  chat_id_ = value;
}

// -------------------------------------------------------------------

// Sheet_chatspecialchat

// repeated .proto_ff.chatspecialchat chatspecialchat_List = 1;
inline int Sheet_chatspecialchat::chatspecialchat_list_size() const {
  return chatspecialchat_list_.size();
}
inline void Sheet_chatspecialchat::clear_chatspecialchat_list() {
  chatspecialchat_list_.Clear();
}
inline const ::proto_ff::chatspecialchat& Sheet_chatspecialchat::chatspecialchat_list(int index) const {
  return chatspecialchat_list_.Get(index);
}
inline ::proto_ff::chatspecialchat* Sheet_chatspecialchat::mutable_chatspecialchat_list(int index) {
  return chatspecialchat_list_.Mutable(index);
}
inline ::proto_ff::chatspecialchat* Sheet_chatspecialchat::add_chatspecialchat_list() {
  return chatspecialchat_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::chatspecialchat >&
Sheet_chatspecialchat::chatspecialchat_list() const {
  return chatspecialchat_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::chatspecialchat >*
Sheet_chatspecialchat::mutable_chatspecialchat_list() {
  return &chatspecialchat_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
