// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: marry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "marry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyMarrySelf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarrySelf_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryApplyOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryApplyOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryApplyOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryApplyOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryRefuse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryRefuse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryCmpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryCmpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyNewMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyNewMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRecvGearRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRecvGearRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRecvGearRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRecvGearRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRecvChildReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRecvChildReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryRecvChildRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryRecvChildRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DivorceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DivorceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DivorceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DivorceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryChildOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryChildOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryChildOptRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryChildOptRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyExpressToDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyExpressToDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpressDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpressDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryInviteDstBuyDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryInviteDstBuyDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryInviteDstBuyDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryInviteDstBuyDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryDstBuyDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryDstBuyDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBuyRefuseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBuyRefuseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBuyDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBuyDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBuyDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBuyDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryBuyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryBuyResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryLockLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryLockLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryLockLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryLockLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBoxBuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBoxBuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBoxBuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBoxBuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBoxRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBoxRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryBoxRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryBoxRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryDupSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryDupSelect_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryDupSelectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryDupSelectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryDupSelectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryDupSelectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryDupResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryDupResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchMarryFriendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchMarryFriendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchMarryFriendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchMarryFriendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryTaskRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryTaskRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryTaskRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryTaskRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryWeddingDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryWeddingDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeWeddingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeWeddingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MakeWeddingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MakeWeddingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingInviteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingInviteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingInviteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingInviteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterWeddingDupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterWeddingDupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterWeddingDupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterWeddingDupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingBuySeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingBuySeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingBuySeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingBuySeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingTourFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingTourFollow_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBroadExpress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBroadExpress_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingSignReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingSignReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingSignRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingSignRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingFireReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingFireReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingFireRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingFireRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyBroadFire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyBroadFire_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingDupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingDupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWeddingDupRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWeddingDupRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* throwCakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  throwCakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* throwCakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  throwCakeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyMarryRedNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyMarryRedNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMarryRedReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMarryRedReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMarryRedRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMarryRedRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LMarryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LMarryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CMarryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CMarryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyMarryCmpt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyMarryCmpt_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CUpdateMarryBrief_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CUpdateMarryBrief_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyDivorce_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LExpressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LExpressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CNotifyExpressSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CNotifyExpressSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyExpressToDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyExpressToDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyMarryDst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyMarryDst_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LGlobalExpressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LGlobalExpressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyMarryBuySuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyMarryBuySuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LMarryRecvDstCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LMarryRecvDstCard_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LWeddingBuySeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LWeddingBuySeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2CWeddingBuySeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2CWeddingBuySeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LNotifyWeddingTour_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LNotifyWeddingTour_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LWeddingTourOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LWeddingTourOver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_marry_2eproto() {
  protobuf_AddDesc_marry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "marry.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyMarrySelf_descriptor_ = file->message_type(0);
  static const int NotifyMarrySelf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarrySelf, info_),
  };
  NotifyMarrySelf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarrySelf_descriptor_,
      NotifyMarrySelf::default_instance_,
      NotifyMarrySelf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarrySelf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarrySelf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarrySelf));
  NotifyMarryDst_descriptor_ = file->message_type(1);
  static const int NotifyMarryDst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDst, mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDst, brief_),
  };
  NotifyMarryDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryDst_descriptor_,
      NotifyMarryDst::default_instance_,
      NotifyMarryDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryDst));
  MarryReq_descriptor_ = file->message_type(2);
  static const int MarryReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryReq, dst_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryReq, gear_),
  };
  MarryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryReq_descriptor_,
      MarryReq::default_instance_,
      MarryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryReq));
  MarryRsp_descriptor_ = file->message_type(3);
  static const int MarryRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRsp, dst_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRsp, gear_),
  };
  MarryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRsp_descriptor_,
      MarryRsp::default_instance_,
      MarryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRsp));
  NotifyMarryApply_descriptor_ = file->message_type(4);
  static const int NotifyMarryApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryApply, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryApply, gear_),
  };
  NotifyMarryApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryApply_descriptor_,
      NotifyMarryApply::default_instance_,
      NotifyMarryApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryApply));
  MarryApplyOptReq_descriptor_ = file->message_type(5);
  static const int MarryApplyOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptReq, opt_),
  };
  MarryApplyOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryApplyOptReq_descriptor_,
      MarryApplyOptReq::default_instance_,
      MarryApplyOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryApplyOptReq));
  MarryApplyOptRsp_descriptor_ = file->message_type(6);
  static const int MarryApplyOptRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptRsp, opt_),
  };
  MarryApplyOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryApplyOptRsp_descriptor_,
      MarryApplyOptRsp::default_instance_,
      MarryApplyOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApplyOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryApplyOptRsp));
  NotifyMarryRefuse_descriptor_ = file->message_type(7);
  static const int NotifyMarryRefuse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRefuse, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRefuse, dst_),
  };
  NotifyMarryRefuse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryRefuse_descriptor_,
      NotifyMarryRefuse::default_instance_,
      NotifyMarryRefuse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRefuse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRefuse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryRefuse));
  NotifyMarryCmpt_descriptor_ = file->message_type(8);
  static const int NotifyMarryCmpt_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, applyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, marry_id_),
  };
  NotifyMarryCmpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryCmpt_descriptor_,
      NotifyMarryCmpt::default_instance_,
      NotifyMarryCmpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryCmpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryCmpt));
  NotifyNewMarry_descriptor_ = file->message_type(9);
  static const int NotifyNewMarry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, gear_),
  };
  NotifyNewMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyNewMarry_descriptor_,
      NotifyNewMarry::default_instance_,
      NotifyNewMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyNewMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyNewMarry));
  MarryRecvGearRewardReq_descriptor_ = file->message_type(10);
  static const int MarryRecvGearRewardReq_offsets_[1] = {
  };
  MarryRecvGearRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRecvGearRewardReq_descriptor_,
      MarryRecvGearRewardReq::default_instance_,
      MarryRecvGearRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvGearRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvGearRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRecvGearRewardReq));
  MarryRecvGearRewardRsp_descriptor_ = file->message_type(11);
  static const int MarryRecvGearRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvGearRewardRsp, ret_),
  };
  MarryRecvGearRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRecvGearRewardRsp_descriptor_,
      MarryRecvGearRewardRsp::default_instance_,
      MarryRecvGearRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvGearRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvGearRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRecvGearRewardRsp));
  MarryRecvChildReq_descriptor_ = file->message_type(12);
  static const int MarryRecvChildReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildReq, child_id_),
  };
  MarryRecvChildReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRecvChildReq_descriptor_,
      MarryRecvChildReq::default_instance_,
      MarryRecvChildReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRecvChildReq));
  MarryRecvChildRsp_descriptor_ = file->message_type(13);
  static const int MarryRecvChildRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildRsp, child_id_),
  };
  MarryRecvChildRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryRecvChildRsp_descriptor_,
      MarryRecvChildRsp::default_instance_,
      MarryRecvChildRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryRecvChildRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryRecvChildRsp));
  DivorceReq_descriptor_ = file->message_type(14);
  static const int DivorceReq_offsets_[1] = {
  };
  DivorceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DivorceReq_descriptor_,
      DivorceReq::default_instance_,
      DivorceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DivorceReq));
  DivorceRsp_descriptor_ = file->message_type(15);
  static const int DivorceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRsp, ret_),
  };
  DivorceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DivorceRsp_descriptor_,
      DivorceRsp::default_instance_,
      DivorceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DivorceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DivorceRsp));
  MarryChildOptReq_descriptor_ = file->message_type(16);
  static const int MarryChildOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptReq, child_id_),
  };
  MarryChildOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryChildOptReq_descriptor_,
      MarryChildOptReq::default_instance_,
      MarryChildOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryChildOptReq));
  MarryChildOptRsp_descriptor_ = file->message_type(17);
  static const int MarryChildOptRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptRsp, child_id_),
  };
  MarryChildOptRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryChildOptRsp_descriptor_,
      MarryChildOptRsp::default_instance_,
      MarryChildOptRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryChildOptRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryChildOptRsp));
  ExpressReq_descriptor_ = file->message_type(18);
  static const int ExpressReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, text_id_),
  };
  ExpressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressReq_descriptor_,
      ExpressReq::default_instance_,
      ExpressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressReq));
  ExpressRsp_descriptor_ = file->message_type(19);
  static const int ExpressRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, text_id_),
  };
  ExpressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressRsp_descriptor_,
      ExpressRsp::default_instance_,
      ExpressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressRsp));
  NotifyExpressToDst_descriptor_ = file->message_type(20);
  static const int NotifyExpressToDst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, text_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, time_),
  };
  NotifyExpressToDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyExpressToDst_descriptor_,
      NotifyExpressToDst::default_instance_,
      NotifyExpressToDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyExpressToDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyExpressToDst));
  ExpressDataReq_descriptor_ = file->message_type(21);
  static const int ExpressDataReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataReq, type_),
  };
  ExpressDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressDataReq_descriptor_,
      ExpressDataReq::default_instance_,
      ExpressDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressDataReq));
  ExpressDataRsp_descriptor_ = file->message_type(22);
  static const int ExpressDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataRsp, logs_),
  };
  ExpressDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpressDataRsp_descriptor_,
      ExpressDataRsp::default_instance_,
      ExpressDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpressDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpressDataRsp));
  MarryInviteDstBuyDupReq_descriptor_ = file->message_type(23);
  static const int MarryInviteDstBuyDupReq_offsets_[1] = {
  };
  MarryInviteDstBuyDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryInviteDstBuyDupReq_descriptor_,
      MarryInviteDstBuyDupReq::default_instance_,
      MarryInviteDstBuyDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviteDstBuyDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviteDstBuyDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryInviteDstBuyDupReq));
  MarryInviteDstBuyDupRsp_descriptor_ = file->message_type(24);
  static const int MarryInviteDstBuyDupRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviteDstBuyDupRsp, ret_),
  };
  MarryInviteDstBuyDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryInviteDstBuyDupRsp_descriptor_,
      MarryInviteDstBuyDupRsp::default_instance_,
      MarryInviteDstBuyDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviteDstBuyDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInviteDstBuyDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryInviteDstBuyDupRsp));
  NotifyMarryDstBuyDup_descriptor_ = file->message_type(25);
  static const int NotifyMarryDstBuyDup_offsets_[1] = {
  };
  NotifyMarryDstBuyDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryDstBuyDup_descriptor_,
      NotifyMarryDstBuyDup::default_instance_,
      NotifyMarryDstBuyDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDstBuyDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDstBuyDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryDstBuyDup));
  MarryBuyRefuseReq_descriptor_ = file->message_type(26);
  static const int MarryBuyRefuseReq_offsets_[1] = {
  };
  MarryBuyRefuseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBuyRefuseReq_descriptor_,
      MarryBuyRefuseReq::default_instance_,
      MarryBuyRefuseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyRefuseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyRefuseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBuyRefuseReq));
  MarryBuyDupReq_descriptor_ = file->message_type(27);
  static const int MarryBuyDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupReq, type_),
  };
  MarryBuyDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBuyDupReq_descriptor_,
      MarryBuyDupReq::default_instance_,
      MarryBuyDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBuyDupReq));
  MarryBuyDupRsp_descriptor_ = file->message_type(28);
  static const int MarryBuyDupRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupRsp, ret_),
  };
  MarryBuyDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBuyDupRsp_descriptor_,
      MarryBuyDupRsp::default_instance_,
      MarryBuyDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBuyDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBuyDupRsp));
  NotifyMarryBuyResult_descriptor_ = file->message_type(29);
  static const int NotifyMarryBuyResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryBuyResult, ret_),
  };
  NotifyMarryBuyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryBuyResult_descriptor_,
      NotifyMarryBuyResult::default_instance_,
      NotifyMarryBuyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryBuyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryBuyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryBuyResult));
  MarryLockLvReq_descriptor_ = file->message_type(30);
  static const int MarryLockLvReq_offsets_[1] = {
  };
  MarryLockLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryLockLvReq_descriptor_,
      MarryLockLvReq::default_instance_,
      MarryLockLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryLockLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryLockLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryLockLvReq));
  MarryLockLvRsp_descriptor_ = file->message_type(31);
  static const int MarryLockLvRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryLockLvRsp, ret_),
  };
  MarryLockLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryLockLvRsp_descriptor_,
      MarryLockLvRsp::default_instance_,
      MarryLockLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryLockLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryLockLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryLockLvRsp));
  MarryBoxBuyReq_descriptor_ = file->message_type(32);
  static const int MarryBoxBuyReq_offsets_[1] = {
  };
  MarryBoxBuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBoxBuyReq_descriptor_,
      MarryBoxBuyReq::default_instance_,
      MarryBoxBuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxBuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxBuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBoxBuyReq));
  MarryBoxBuyRsp_descriptor_ = file->message_type(33);
  static const int MarryBoxBuyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxBuyRsp, ret_),
  };
  MarryBoxBuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBoxBuyRsp_descriptor_,
      MarryBoxBuyRsp::default_instance_,
      MarryBoxBuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxBuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxBuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBoxBuyRsp));
  MarryBoxRecvReq_descriptor_ = file->message_type(34);
  static const int MarryBoxRecvReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvReq, type_),
  };
  MarryBoxRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBoxRecvReq_descriptor_,
      MarryBoxRecvReq::default_instance_,
      MarryBoxRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBoxRecvReq));
  MarryBoxRecvRsp_descriptor_ = file->message_type(35);
  static const int MarryBoxRecvRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvRsp, type_),
  };
  MarryBoxRecvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryBoxRecvRsp_descriptor_,
      MarryBoxRecvRsp::default_instance_,
      MarryBoxRecvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryBoxRecvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryBoxRecvRsp));
  NotifyMarryDupSelect_descriptor_ = file->message_type(36);
  static const int NotifyMarryDupSelect_offsets_[1] = {
  };
  NotifyMarryDupSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryDupSelect_descriptor_,
      NotifyMarryDupSelect::default_instance_,
      NotifyMarryDupSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryDupSelect));
  MarryDupSelectReq_descriptor_ = file->message_type(37);
  static const int MarryDupSelectReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectReq, id_),
  };
  MarryDupSelectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryDupSelectReq_descriptor_,
      MarryDupSelectReq::default_instance_,
      MarryDupSelectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryDupSelectReq));
  MarryDupSelectRsp_descriptor_ = file->message_type(38);
  static const int MarryDupSelectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectRsp, id_),
  };
  MarryDupSelectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryDupSelectRsp_descriptor_,
      MarryDupSelectRsp::default_instance_,
      MarryDupSelectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDupSelectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryDupSelectRsp));
  NotifyMarryDupResult_descriptor_ = file->message_type(39);
  static const int NotifyMarryDupResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, boxid_),
  };
  NotifyMarryDupResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryDupResult_descriptor_,
      NotifyMarryDupResult::default_instance_,
      NotifyMarryDupResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryDupResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryDupResult));
  SearchMarryFriendReq_descriptor_ = file->message_type(40);
  static const int SearchMarryFriendReq_offsets_[1] = {
  };
  SearchMarryFriendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchMarryFriendReq_descriptor_,
      SearchMarryFriendReq::default_instance_,
      SearchMarryFriendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMarryFriendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMarryFriendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchMarryFriendReq));
  SearchMarryFriendRsp_descriptor_ = file->message_type(41);
  static const int SearchMarryFriendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMarryFriendRsp, infos_),
  };
  SearchMarryFriendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchMarryFriendRsp_descriptor_,
      SearchMarryFriendRsp::default_instance_,
      SearchMarryFriendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMarryFriendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchMarryFriendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchMarryFriendRsp));
  MarryTaskRecvReq_descriptor_ = file->message_type(42);
  static const int MarryTaskRecvReq_offsets_[1] = {
  };
  MarryTaskRecvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryTaskRecvReq_descriptor_,
      MarryTaskRecvReq::default_instance_,
      MarryTaskRecvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryTaskRecvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryTaskRecvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryTaskRecvReq));
  MarryTaskRecvRsp_descriptor_ = file->message_type(43);
  static const int MarryTaskRecvRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryTaskRecvRsp, ret_),
  };
  MarryTaskRecvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryTaskRecvRsp_descriptor_,
      MarryTaskRecvRsp::default_instance_,
      MarryTaskRecvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryTaskRecvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryTaskRecvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryTaskRecvRsp));
  MarryWeddingDataReq_descriptor_ = file->message_type(44);
  static const int MarryWeddingDataReq_offsets_[1] = {
  };
  MarryWeddingDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryWeddingDataReq_descriptor_,
      MarryWeddingDataReq::default_instance_,
      MarryWeddingDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryWeddingDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryWeddingDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryWeddingDataReq));
  NotifyWeddingData_descriptor_ = file->message_type(45);
  static const int NotifyWeddingData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingData, wedding_num_),
  };
  NotifyWeddingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingData_descriptor_,
      NotifyWeddingData::default_instance_,
      NotifyWeddingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingData));
  NotifyWeddingPlan_descriptor_ = file->message_type(46);
  static const int NotifyWeddingPlan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingPlan, infos_),
  };
  NotifyWeddingPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingPlan_descriptor_,
      NotifyWeddingPlan::default_instance_,
      NotifyWeddingPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingPlan));
  NotifyWeddingStep_descriptor_ = file->message_type(47);
  static const int NotifyWeddingStep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingStep, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingStep, step_),
  };
  NotifyWeddingStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingStep_descriptor_,
      NotifyWeddingStep::default_instance_,
      NotifyWeddingStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingStep));
  NotifyWeddingRole_descriptor_ = file->message_type(48);
  static const int NotifyWeddingRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingRole, can_join_wedding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingRole, apply_wedding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingRole, detail_),
  };
  NotifyWeddingRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingRole_descriptor_,
      NotifyWeddingRole::default_instance_,
      NotifyWeddingRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingRole));
  MakeWeddingReq_descriptor_ = file->message_type(49);
  static const int MakeWeddingReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingReq, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingReq, wedding_gear_),
  };
  MakeWeddingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeWeddingReq_descriptor_,
      MakeWeddingReq::default_instance_,
      MakeWeddingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeWeddingReq));
  MakeWeddingRsp_descriptor_ = file->message_type(50);
  static const int MakeWeddingRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingRsp, ret_),
  };
  MakeWeddingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MakeWeddingRsp_descriptor_,
      MakeWeddingRsp::default_instance_,
      MakeWeddingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MakeWeddingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MakeWeddingRsp));
  WeddingInviteReq_descriptor_ = file->message_type(51);
  static const int WeddingInviteReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteReq, invite_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteReq, invite_cid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteReq, wedding_id_),
  };
  WeddingInviteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingInviteReq_descriptor_,
      WeddingInviteReq::default_instance_,
      WeddingInviteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingInviteReq));
  WeddingInviteRsp_descriptor_ = file->message_type(52);
  static const int WeddingInviteRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, invite_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, invite_cid_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, wedding_id_),
  };
  WeddingInviteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingInviteRsp_descriptor_,
      WeddingInviteRsp::default_instance_,
      WeddingInviteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInviteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingInviteRsp));
  EnterWeddingDupReq_descriptor_ = file->message_type(53);
  static const int EnterWeddingDupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupReq, wedding_id_),
  };
  EnterWeddingDupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterWeddingDupReq_descriptor_,
      EnterWeddingDupReq::default_instance_,
      EnterWeddingDupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterWeddingDupReq));
  EnterWeddingDupRsp_descriptor_ = file->message_type(54);
  static const int EnterWeddingDupRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupRsp, wedding_id_),
  };
  EnterWeddingDupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterWeddingDupRsp_descriptor_,
      EnterWeddingDupRsp::default_instance_,
      EnterWeddingDupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterWeddingDupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterWeddingDupRsp));
  NotifyWeddingInvite_descriptor_ = file->message_type(55);
  static const int NotifyWeddingInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingInvite, wedding_id_),
  };
  NotifyWeddingInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingInvite_descriptor_,
      NotifyWeddingInvite::default_instance_,
      NotifyWeddingInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingInvite));
  WeddingBuySeatReq_descriptor_ = file->message_type(56);
  static const int WeddingBuySeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatReq, wedding_id_),
  };
  WeddingBuySeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingBuySeatReq_descriptor_,
      WeddingBuySeatReq::default_instance_,
      WeddingBuySeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingBuySeatReq));
  WeddingBuySeatRsp_descriptor_ = file->message_type(57);
  static const int WeddingBuySeatRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatRsp, wedding_id_),
  };
  WeddingBuySeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingBuySeatRsp_descriptor_,
      WeddingBuySeatRsp::default_instance_,
      WeddingBuySeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingBuySeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingBuySeatRsp));
  WeddingApplyReq_descriptor_ = file->message_type(58);
  static const int WeddingApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyReq, wedding_id_),
  };
  WeddingApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingApplyReq_descriptor_,
      WeddingApplyReq::default_instance_,
      WeddingApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingApplyReq));
  WeddingApplyRsp_descriptor_ = file->message_type(59);
  static const int WeddingApplyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyRsp, wedding_id_),
  };
  WeddingApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingApplyRsp_descriptor_,
      WeddingApplyRsp::default_instance_,
      WeddingApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingApplyRsp));
  NotifyWeddingTourFollow_descriptor_ = file->message_type(60);
  static const int NotifyWeddingTourFollow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingTourFollow, monster_cid_),
  };
  NotifyWeddingTourFollow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingTourFollow_descriptor_,
      NotifyWeddingTourFollow::default_instance_,
      NotifyWeddingTourFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingTourFollow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingTourFollow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingTourFollow));
  NotifyWeddingApply_descriptor_ = file->message_type(61);
  static const int NotifyWeddingApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingApply, wedding_id_),
  };
  NotifyWeddingApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingApply_descriptor_,
      NotifyWeddingApply::default_instance_,
      NotifyWeddingApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingApply));
  NotifyBroadExpress_descriptor_ = file->message_type(62);
  static const int NotifyBroadExpress_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, src_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, dst_name_),
  };
  NotifyBroadExpress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBroadExpress_descriptor_,
      NotifyBroadExpress::default_instance_,
      NotifyBroadExpress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadExpress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBroadExpress));
  WeddingSignReq_descriptor_ = file->message_type(63);
  static const int WeddingSignReq_offsets_[1] = {
  };
  WeddingSignReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingSignReq_descriptor_,
      WeddingSignReq::default_instance_,
      WeddingSignReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSignReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSignReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingSignReq));
  WeddingSignRsp_descriptor_ = file->message_type(64);
  static const int WeddingSignRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSignRsp, ret_),
  };
  WeddingSignRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingSignRsp_descriptor_,
      WeddingSignRsp::default_instance_,
      WeddingSignRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSignRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingSignRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingSignRsp));
  WeddingFireReq_descriptor_ = file->message_type(65);
  static const int WeddingFireReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireReq, itemid_),
  };
  WeddingFireReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingFireReq_descriptor_,
      WeddingFireReq::default_instance_,
      WeddingFireReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingFireReq));
  WeddingFireRsp_descriptor_ = file->message_type(66);
  static const int WeddingFireRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireRsp, itemid_),
  };
  WeddingFireRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingFireRsp_descriptor_,
      WeddingFireRsp::default_instance_,
      WeddingFireRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingFireRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingFireRsp));
  NotifyBroadFire_descriptor_ = file->message_type(67);
  static const int NotifyBroadFire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadFire, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadFire, itemid_),
  };
  NotifyBroadFire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyBroadFire_descriptor_,
      NotifyBroadFire::default_instance_,
      NotifyBroadFire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadFire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyBroadFire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyBroadFire));
  NotifyWeddingDupData_descriptor_ = file->message_type(68);
  static const int NotifyWeddingDupData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, enter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, step_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, qinyou_npc_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, qinyou_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, warm_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, infos_),
  };
  NotifyWeddingDupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingDupData_descriptor_,
      NotifyWeddingDupData::default_instance_,
      NotifyWeddingDupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingDupData));
  NotifyWeddingDupRole_descriptor_ = file->message_type(69);
  static const int NotifyWeddingDupRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, sign_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, cakerewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, curcakenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, yanxi_cid_),
  };
  NotifyWeddingDupRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWeddingDupRole_descriptor_,
      NotifyWeddingDupRole::default_instance_,
      NotifyWeddingDupRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWeddingDupRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWeddingDupRole));
  throwCakeReq_descriptor_ = file->message_type(70);
  static const int throwCakeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeReq, target_cid_),
  };
  throwCakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      throwCakeReq_descriptor_,
      throwCakeReq::default_instance_,
      throwCakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(throwCakeReq));
  throwCakeRsp_descriptor_ = file->message_type(71);
  static const int throwCakeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeRsp, ret_),
  };
  throwCakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      throwCakeRsp_descriptor_,
      throwCakeRsp::default_instance_,
      throwCakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(throwCakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(throwCakeRsp));
  NotifyMarryRedNum_descriptor_ = file->message_type(72);
  static const int NotifyMarryRedNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRedNum, num_),
  };
  NotifyMarryRedNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyMarryRedNum_descriptor_,
      NotifyMarryRedNum::default_instance_,
      NotifyMarryRedNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRedNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyMarryRedNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyMarryRedNum));
  SendMarryRedReq_descriptor_ = file->message_type(73);
  static const int SendMarryRedReq_offsets_[1] = {
  };
  SendMarryRedReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMarryRedReq_descriptor_,
      SendMarryRedReq::default_instance_,
      SendMarryRedReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMarryRedReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMarryRedReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMarryRedReq));
  SendMarryRedRsp_descriptor_ = file->message_type(74);
  static const int SendMarryRedRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMarryRedRsp, ret_),
  };
  SendMarryRedRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMarryRedRsp_descriptor_,
      SendMarryRedRsp::default_instance_,
      SendMarryRedRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMarryRedRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMarryRedRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMarryRedRsp));
  C2LMarryReq_descriptor_ = file->message_type(75);
  static const int C2LMarryReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryReq, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryReq, dst_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryReq, gear_),
  };
  C2LMarryReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LMarryReq_descriptor_,
      C2LMarryReq::default_instance_,
      C2LMarryReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LMarryReq));
  L2CMarryRsp_descriptor_ = file->message_type(76);
  static const int L2CMarryRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, dst_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, gear_),
  };
  L2CMarryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CMarryRsp_descriptor_,
      L2CMarryRsp::default_instance_,
      L2CMarryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CMarryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CMarryRsp));
  C2LNotifyMarryCmpt_descriptor_ = file->message_type(77);
  static const int C2LNotifyMarryCmpt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, applyer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, cid_),
  };
  C2LNotifyMarryCmpt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyMarryCmpt_descriptor_,
      C2LNotifyMarryCmpt::default_instance_,
      C2LNotifyMarryCmpt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryCmpt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyMarryCmpt));
  L2CUpdateMarryBrief_descriptor_ = file->message_type(78);
  static const int L2CUpdateMarryBrief_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateMarryBrief, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateMarryBrief, brief_),
  };
  L2CUpdateMarryBrief_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CUpdateMarryBrief_descriptor_,
      L2CUpdateMarryBrief::default_instance_,
      L2CUpdateMarryBrief_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateMarryBrief, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CUpdateMarryBrief, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CUpdateMarryBrief));
  C2LNotifyDivorce_descriptor_ = file->message_type(79);
  static const int C2LNotifyDivorce_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyDivorce, cid_),
  };
  C2LNotifyDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyDivorce_descriptor_,
      C2LNotifyDivorce::default_instance_,
      C2LNotifyDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyDivorce));
  C2LExpressReq_descriptor_ = file->message_type(80);
  static const int C2LExpressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LExpressReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LExpressReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LExpressReq, req_),
  };
  C2LExpressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LExpressReq_descriptor_,
      C2LExpressReq::default_instance_,
      C2LExpressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LExpressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LExpressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LExpressReq));
  L2CNotifyExpressSuccess_descriptor_ = file->message_type(81);
  static const int L2CNotifyExpressSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CNotifyExpressSuccess, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CNotifyExpressSuccess, req_),
  };
  L2CNotifyExpressSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CNotifyExpressSuccess_descriptor_,
      L2CNotifyExpressSuccess::default_instance_,
      L2CNotifyExpressSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CNotifyExpressSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CNotifyExpressSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CNotifyExpressSuccess));
  C2LNotifyExpressToDst_descriptor_ = file->message_type(82);
  static const int C2LNotifyExpressToDst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyExpressToDst, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyExpressToDst, req_),
  };
  C2LNotifyExpressToDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyExpressToDst_descriptor_,
      C2LNotifyExpressToDst::default_instance_,
      C2LNotifyExpressToDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyExpressToDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyExpressToDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyExpressToDst));
  C2LNotifyMarryDst_descriptor_ = file->message_type(83);
  static const int C2LNotifyMarryDst_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, my_dst_recv_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, dst_give_dup_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, gear_),
  };
  C2LNotifyMarryDst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyMarryDst_descriptor_,
      C2LNotifyMarryDst::default_instance_,
      C2LNotifyMarryDst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryDst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyMarryDst));
  C2LGlobalExpressReq_descriptor_ = file->message_type(84);
  static const int C2LGlobalExpressReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LGlobalExpressReq, cid_),
  };
  C2LGlobalExpressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LGlobalExpressReq_descriptor_,
      C2LGlobalExpressReq::default_instance_,
      C2LGlobalExpressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LGlobalExpressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LGlobalExpressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LGlobalExpressReq));
  C2LNotifyMarryBuySuccess_descriptor_ = file->message_type(85);
  static const int C2LNotifyMarryBuySuccess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryBuySuccess, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryBuySuccess, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryBuySuccess, type_),
  };
  C2LNotifyMarryBuySuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyMarryBuySuccess_descriptor_,
      C2LNotifyMarryBuySuccess::default_instance_,
      C2LNotifyMarryBuySuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryBuySuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyMarryBuySuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyMarryBuySuccess));
  C2LMarryRecvDstCard_descriptor_ = file->message_type(86);
  static const int C2LMarryRecvDstCard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryRecvDstCard, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryRecvDstCard, days_),
  };
  C2LMarryRecvDstCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LMarryRecvDstCard_descriptor_,
      C2LMarryRecvDstCard::default_instance_,
      C2LMarryRecvDstCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryRecvDstCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LMarryRecvDstCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LMarryRecvDstCard));
  C2LWeddingBuySeatReq_descriptor_ = file->message_type(87);
  static const int C2LWeddingBuySeatReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingBuySeatReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingBuySeatReq, wedding_id_),
  };
  C2LWeddingBuySeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LWeddingBuySeatReq_descriptor_,
      C2LWeddingBuySeatReq::default_instance_,
      C2LWeddingBuySeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingBuySeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingBuySeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LWeddingBuySeatReq));
  L2CWeddingBuySeatRsp_descriptor_ = file->message_type(88);
  static const int L2CWeddingBuySeatRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CWeddingBuySeatRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CWeddingBuySeatRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CWeddingBuySeatRsp, wedding_id_),
  };
  L2CWeddingBuySeatRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2CWeddingBuySeatRsp_descriptor_,
      L2CWeddingBuySeatRsp::default_instance_,
      L2CWeddingBuySeatRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CWeddingBuySeatRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2CWeddingBuySeatRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2CWeddingBuySeatRsp));
  C2LNotifyWeddingTour_descriptor_ = file->message_type(89);
  static const int C2LNotifyWeddingTour_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, wedding_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, tour_end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, src_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, dst_cid_),
  };
  C2LNotifyWeddingTour_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LNotifyWeddingTour_descriptor_,
      C2LNotifyWeddingTour::default_instance_,
      C2LNotifyWeddingTour_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LNotifyWeddingTour, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LNotifyWeddingTour));
  C2LWeddingTourOver_descriptor_ = file->message_type(90);
  static const int C2LWeddingTourOver_offsets_[1] = {
  };
  C2LWeddingTourOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LWeddingTourOver_descriptor_,
      C2LWeddingTourOver::default_instance_,
      C2LWeddingTourOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingTourOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LWeddingTourOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LWeddingTourOver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_marry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarrySelf_descriptor_, &NotifyMarrySelf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryDst_descriptor_, &NotifyMarryDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryReq_descriptor_, &MarryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRsp_descriptor_, &MarryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryApply_descriptor_, &NotifyMarryApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryApplyOptReq_descriptor_, &MarryApplyOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryApplyOptRsp_descriptor_, &MarryApplyOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryRefuse_descriptor_, &NotifyMarryRefuse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryCmpt_descriptor_, &NotifyMarryCmpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyNewMarry_descriptor_, &NotifyNewMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRecvGearRewardReq_descriptor_, &MarryRecvGearRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRecvGearRewardRsp_descriptor_, &MarryRecvGearRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRecvChildReq_descriptor_, &MarryRecvChildReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryRecvChildRsp_descriptor_, &MarryRecvChildRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DivorceReq_descriptor_, &DivorceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DivorceRsp_descriptor_, &DivorceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryChildOptReq_descriptor_, &MarryChildOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryChildOptRsp_descriptor_, &MarryChildOptRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressReq_descriptor_, &ExpressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressRsp_descriptor_, &ExpressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyExpressToDst_descriptor_, &NotifyExpressToDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressDataReq_descriptor_, &ExpressDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpressDataRsp_descriptor_, &ExpressDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryInviteDstBuyDupReq_descriptor_, &MarryInviteDstBuyDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryInviteDstBuyDupRsp_descriptor_, &MarryInviteDstBuyDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryDstBuyDup_descriptor_, &NotifyMarryDstBuyDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBuyRefuseReq_descriptor_, &MarryBuyRefuseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBuyDupReq_descriptor_, &MarryBuyDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBuyDupRsp_descriptor_, &MarryBuyDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryBuyResult_descriptor_, &NotifyMarryBuyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryLockLvReq_descriptor_, &MarryLockLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryLockLvRsp_descriptor_, &MarryLockLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBoxBuyReq_descriptor_, &MarryBoxBuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBoxBuyRsp_descriptor_, &MarryBoxBuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBoxRecvReq_descriptor_, &MarryBoxRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryBoxRecvRsp_descriptor_, &MarryBoxRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryDupSelect_descriptor_, &NotifyMarryDupSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryDupSelectReq_descriptor_, &MarryDupSelectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryDupSelectRsp_descriptor_, &MarryDupSelectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryDupResult_descriptor_, &NotifyMarryDupResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchMarryFriendReq_descriptor_, &SearchMarryFriendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchMarryFriendRsp_descriptor_, &SearchMarryFriendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryTaskRecvReq_descriptor_, &MarryTaskRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryTaskRecvRsp_descriptor_, &MarryTaskRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryWeddingDataReq_descriptor_, &MarryWeddingDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingData_descriptor_, &NotifyWeddingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingPlan_descriptor_, &NotifyWeddingPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingStep_descriptor_, &NotifyWeddingStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingRole_descriptor_, &NotifyWeddingRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeWeddingReq_descriptor_, &MakeWeddingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MakeWeddingRsp_descriptor_, &MakeWeddingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingInviteReq_descriptor_, &WeddingInviteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingInviteRsp_descriptor_, &WeddingInviteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterWeddingDupReq_descriptor_, &EnterWeddingDupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterWeddingDupRsp_descriptor_, &EnterWeddingDupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingInvite_descriptor_, &NotifyWeddingInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingBuySeatReq_descriptor_, &WeddingBuySeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingBuySeatRsp_descriptor_, &WeddingBuySeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingApplyReq_descriptor_, &WeddingApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingApplyRsp_descriptor_, &WeddingApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingTourFollow_descriptor_, &NotifyWeddingTourFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingApply_descriptor_, &NotifyWeddingApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBroadExpress_descriptor_, &NotifyBroadExpress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingSignReq_descriptor_, &WeddingSignReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingSignRsp_descriptor_, &WeddingSignRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingFireReq_descriptor_, &WeddingFireReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingFireRsp_descriptor_, &WeddingFireRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyBroadFire_descriptor_, &NotifyBroadFire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingDupData_descriptor_, &NotifyWeddingDupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWeddingDupRole_descriptor_, &NotifyWeddingDupRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    throwCakeReq_descriptor_, &throwCakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    throwCakeRsp_descriptor_, &throwCakeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyMarryRedNum_descriptor_, &NotifyMarryRedNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMarryRedReq_descriptor_, &SendMarryRedReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMarryRedRsp_descriptor_, &SendMarryRedRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LMarryReq_descriptor_, &C2LMarryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CMarryRsp_descriptor_, &L2CMarryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyMarryCmpt_descriptor_, &C2LNotifyMarryCmpt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CUpdateMarryBrief_descriptor_, &L2CUpdateMarryBrief::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyDivorce_descriptor_, &C2LNotifyDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LExpressReq_descriptor_, &C2LExpressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CNotifyExpressSuccess_descriptor_, &L2CNotifyExpressSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyExpressToDst_descriptor_, &C2LNotifyExpressToDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyMarryDst_descriptor_, &C2LNotifyMarryDst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LGlobalExpressReq_descriptor_, &C2LGlobalExpressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyMarryBuySuccess_descriptor_, &C2LNotifyMarryBuySuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LMarryRecvDstCard_descriptor_, &C2LMarryRecvDstCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LWeddingBuySeatReq_descriptor_, &C2LWeddingBuySeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2CWeddingBuySeatRsp_descriptor_, &L2CWeddingBuySeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LNotifyWeddingTour_descriptor_, &C2LNotifyWeddingTour::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LWeddingTourOver_descriptor_, &C2LWeddingTourOver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_marry_2eproto() {
  delete NotifyMarrySelf::default_instance_;
  delete NotifyMarrySelf_reflection_;
  delete NotifyMarryDst::default_instance_;
  delete NotifyMarryDst_reflection_;
  delete MarryReq::default_instance_;
  delete MarryReq_reflection_;
  delete MarryRsp::default_instance_;
  delete MarryRsp_reflection_;
  delete NotifyMarryApply::default_instance_;
  delete NotifyMarryApply_reflection_;
  delete MarryApplyOptReq::default_instance_;
  delete MarryApplyOptReq_reflection_;
  delete MarryApplyOptRsp::default_instance_;
  delete MarryApplyOptRsp_reflection_;
  delete NotifyMarryRefuse::default_instance_;
  delete NotifyMarryRefuse_reflection_;
  delete NotifyMarryCmpt::default_instance_;
  delete NotifyMarryCmpt_reflection_;
  delete NotifyNewMarry::default_instance_;
  delete NotifyNewMarry_reflection_;
  delete MarryRecvGearRewardReq::default_instance_;
  delete MarryRecvGearRewardReq_reflection_;
  delete MarryRecvGearRewardRsp::default_instance_;
  delete MarryRecvGearRewardRsp_reflection_;
  delete MarryRecvChildReq::default_instance_;
  delete MarryRecvChildReq_reflection_;
  delete MarryRecvChildRsp::default_instance_;
  delete MarryRecvChildRsp_reflection_;
  delete DivorceReq::default_instance_;
  delete DivorceReq_reflection_;
  delete DivorceRsp::default_instance_;
  delete DivorceRsp_reflection_;
  delete MarryChildOptReq::default_instance_;
  delete MarryChildOptReq_reflection_;
  delete MarryChildOptRsp::default_instance_;
  delete MarryChildOptRsp_reflection_;
  delete ExpressReq::default_instance_;
  delete ExpressReq_reflection_;
  delete ExpressRsp::default_instance_;
  delete ExpressRsp_reflection_;
  delete NotifyExpressToDst::default_instance_;
  delete NotifyExpressToDst_reflection_;
  delete ExpressDataReq::default_instance_;
  delete ExpressDataReq_reflection_;
  delete ExpressDataRsp::default_instance_;
  delete ExpressDataRsp_reflection_;
  delete MarryInviteDstBuyDupReq::default_instance_;
  delete MarryInviteDstBuyDupReq_reflection_;
  delete MarryInviteDstBuyDupRsp::default_instance_;
  delete MarryInviteDstBuyDupRsp_reflection_;
  delete NotifyMarryDstBuyDup::default_instance_;
  delete NotifyMarryDstBuyDup_reflection_;
  delete MarryBuyRefuseReq::default_instance_;
  delete MarryBuyRefuseReq_reflection_;
  delete MarryBuyDupReq::default_instance_;
  delete MarryBuyDupReq_reflection_;
  delete MarryBuyDupRsp::default_instance_;
  delete MarryBuyDupRsp_reflection_;
  delete NotifyMarryBuyResult::default_instance_;
  delete NotifyMarryBuyResult_reflection_;
  delete MarryLockLvReq::default_instance_;
  delete MarryLockLvReq_reflection_;
  delete MarryLockLvRsp::default_instance_;
  delete MarryLockLvRsp_reflection_;
  delete MarryBoxBuyReq::default_instance_;
  delete MarryBoxBuyReq_reflection_;
  delete MarryBoxBuyRsp::default_instance_;
  delete MarryBoxBuyRsp_reflection_;
  delete MarryBoxRecvReq::default_instance_;
  delete MarryBoxRecvReq_reflection_;
  delete MarryBoxRecvRsp::default_instance_;
  delete MarryBoxRecvRsp_reflection_;
  delete NotifyMarryDupSelect::default_instance_;
  delete NotifyMarryDupSelect_reflection_;
  delete MarryDupSelectReq::default_instance_;
  delete MarryDupSelectReq_reflection_;
  delete MarryDupSelectRsp::default_instance_;
  delete MarryDupSelectRsp_reflection_;
  delete NotifyMarryDupResult::default_instance_;
  delete NotifyMarryDupResult_reflection_;
  delete SearchMarryFriendReq::default_instance_;
  delete SearchMarryFriendReq_reflection_;
  delete SearchMarryFriendRsp::default_instance_;
  delete SearchMarryFriendRsp_reflection_;
  delete MarryTaskRecvReq::default_instance_;
  delete MarryTaskRecvReq_reflection_;
  delete MarryTaskRecvRsp::default_instance_;
  delete MarryTaskRecvRsp_reflection_;
  delete MarryWeddingDataReq::default_instance_;
  delete MarryWeddingDataReq_reflection_;
  delete NotifyWeddingData::default_instance_;
  delete NotifyWeddingData_reflection_;
  delete NotifyWeddingPlan::default_instance_;
  delete NotifyWeddingPlan_reflection_;
  delete NotifyWeddingStep::default_instance_;
  delete NotifyWeddingStep_reflection_;
  delete NotifyWeddingRole::default_instance_;
  delete NotifyWeddingRole_reflection_;
  delete MakeWeddingReq::default_instance_;
  delete MakeWeddingReq_reflection_;
  delete MakeWeddingRsp::default_instance_;
  delete MakeWeddingRsp_reflection_;
  delete WeddingInviteReq::default_instance_;
  delete WeddingInviteReq_reflection_;
  delete WeddingInviteRsp::default_instance_;
  delete WeddingInviteRsp_reflection_;
  delete EnterWeddingDupReq::default_instance_;
  delete EnterWeddingDupReq_reflection_;
  delete EnterWeddingDupRsp::default_instance_;
  delete EnterWeddingDupRsp_reflection_;
  delete NotifyWeddingInvite::default_instance_;
  delete NotifyWeddingInvite_reflection_;
  delete WeddingBuySeatReq::default_instance_;
  delete WeddingBuySeatReq_reflection_;
  delete WeddingBuySeatRsp::default_instance_;
  delete WeddingBuySeatRsp_reflection_;
  delete WeddingApplyReq::default_instance_;
  delete WeddingApplyReq_reflection_;
  delete WeddingApplyRsp::default_instance_;
  delete WeddingApplyRsp_reflection_;
  delete NotifyWeddingTourFollow::default_instance_;
  delete NotifyWeddingTourFollow_reflection_;
  delete NotifyWeddingApply::default_instance_;
  delete NotifyWeddingApply_reflection_;
  delete NotifyBroadExpress::default_instance_;
  delete NotifyBroadExpress_reflection_;
  delete WeddingSignReq::default_instance_;
  delete WeddingSignReq_reflection_;
  delete WeddingSignRsp::default_instance_;
  delete WeddingSignRsp_reflection_;
  delete WeddingFireReq::default_instance_;
  delete WeddingFireReq_reflection_;
  delete WeddingFireRsp::default_instance_;
  delete WeddingFireRsp_reflection_;
  delete NotifyBroadFire::default_instance_;
  delete NotifyBroadFire_reflection_;
  delete NotifyWeddingDupData::default_instance_;
  delete NotifyWeddingDupData_reflection_;
  delete NotifyWeddingDupRole::default_instance_;
  delete NotifyWeddingDupRole_reflection_;
  delete throwCakeReq::default_instance_;
  delete throwCakeReq_reflection_;
  delete throwCakeRsp::default_instance_;
  delete throwCakeRsp_reflection_;
  delete NotifyMarryRedNum::default_instance_;
  delete NotifyMarryRedNum_reflection_;
  delete SendMarryRedReq::default_instance_;
  delete SendMarryRedReq_reflection_;
  delete SendMarryRedRsp::default_instance_;
  delete SendMarryRedRsp_reflection_;
  delete C2LMarryReq::default_instance_;
  delete C2LMarryReq_reflection_;
  delete L2CMarryRsp::default_instance_;
  delete L2CMarryRsp_reflection_;
  delete C2LNotifyMarryCmpt::default_instance_;
  delete C2LNotifyMarryCmpt_reflection_;
  delete L2CUpdateMarryBrief::default_instance_;
  delete L2CUpdateMarryBrief_reflection_;
  delete C2LNotifyDivorce::default_instance_;
  delete C2LNotifyDivorce_reflection_;
  delete C2LExpressReq::default_instance_;
  delete C2LExpressReq_reflection_;
  delete L2CNotifyExpressSuccess::default_instance_;
  delete L2CNotifyExpressSuccess_reflection_;
  delete C2LNotifyExpressToDst::default_instance_;
  delete C2LNotifyExpressToDst_reflection_;
  delete C2LNotifyMarryDst::default_instance_;
  delete C2LNotifyMarryDst_reflection_;
  delete C2LGlobalExpressReq::default_instance_;
  delete C2LGlobalExpressReq_reflection_;
  delete C2LNotifyMarryBuySuccess::default_instance_;
  delete C2LNotifyMarryBuySuccess_reflection_;
  delete C2LMarryRecvDstCard::default_instance_;
  delete C2LMarryRecvDstCard_reflection_;
  delete C2LWeddingBuySeatReq::default_instance_;
  delete C2LWeddingBuySeatReq_reflection_;
  delete L2CWeddingBuySeatRsp::default_instance_;
  delete L2CWeddingBuySeatRsp_reflection_;
  delete C2LNotifyWeddingTour::default_instance_;
  delete C2LNotifyWeddingTour_reflection_;
  delete C2LWeddingTourOver::default_instance_;
  delete C2LWeddingTourOver_reflection_;
}

void protobuf_AddDesc_marry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013marry.proto\022\010proto_ff\032\tCom.proto\032\017ComD"
    "efine.proto\"8\n\017NotifyMarrySelf\022%\n\004info\030\001"
    " \001(\0132\027.proto_ff.MarrySelfInfo\"a\n\016NotifyM"
    "arryDst\022*\n\004mini\030\001 \001(\0132\034.proto_ff.RolePla"
    "yerMiniInfo\022#\n\005brief\030\002 \001(\0132\024.proto_ff.Ma"
    "rryBrief\")\n\010MarryReq\022\017\n\007dst_cid\030\001 \001(\004\022\014\n"
    "\004gear\030\002 \001(\005\"6\n\010MarryRsp\022\013\n\003ret\030\001 \001(\005\022\017\n\007"
    "dst_cid\030\002 \001(\004\022\014\n\004gear\030\003 \001(\005\"K\n\020NotifyMar"
    "ryApply\022)\n\003src\030\001 \001(\0132\034.proto_ff.RolePlay"
    "erMiniInfo\022\014\n\004gear\030\002 \001(\005\"\037\n\020MarryApplyOp"
    "tReq\022\013\n\003opt\030\001 \001(\005\",\n\020MarryApplyOptRsp\022\013\n"
    "\003ret\030\001 \001(\005\022\013\n\003opt\030\002 \001(\005\"K\n\021NotifyMarryRe"
    "fuse\022\013\n\003ret\030\001 \001(\005\022)\n\003dst\030\002 \001(\0132\034.proto_f"
    "f.RolePlayerMiniInfo\"m\n\017NotifyMarryCmpt\022"
    ")\n\003dst\030\001 \001(\0132\034.proto_ff.RolePlayerMiniIn"
    "fo\022\014\n\004gear\030\002 \001(\005\022\017\n\007applyer\030\003 \001(\004\022\020\n\010mar"
    "ry_id\030\004 \001(\005\"\206\001\n\016NotifyNewMarry\022)\n\003src\030\001 "
    "\001(\0132\034.proto_ff.RolePlayerMiniInfo\022)\n\003dst"
    "\030\002 \001(\0132\034.proto_ff.RolePlayerMiniInfo\022\020\n\010"
    "marry_id\030\003 \001(\005\022\014\n\004gear\030\004 \001(\005\"\030\n\026MarryRec"
    "vGearRewardReq\"%\n\026MarryRecvGearRewardRsp"
    "\022\013\n\003ret\030\001 \001(\005\"%\n\021MarryRecvChildReq\022\020\n\010ch"
    "ild_id\030\001 \001(\005\"2\n\021MarryRecvChildRsp\022\013\n\003ret"
    "\030\001 \001(\005\022\020\n\010child_id\030\002 \001(\005\"\014\n\nDivorceReq\"\031"
    "\n\nDivorceRsp\022\013\n\003ret\030\001 \001(\005\"2\n\020MarryChildO"
    "ptReq\022\014\n\004type\030\001 \001(\005\022\020\n\010child_id\030\002 \001(\005\"\?\n"
    "\020MarryChildOptRsp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002"
    " \001(\005\022\020\n\010child_id\030\003 \001(\005\"E\n\nExpressReq\022\013\n\003"
    "cid\030\001 \001(\004\022\014\n\004item\030\002 \001(\004\022\013\n\003num\030\003 \001(\005\022\017\n\007"
    "text_id\030\004 \001(\005\"R\n\nExpressRsp\022\013\n\003ret\030\001 \001(\005"
    "\022\013\n\003cid\030\002 \001(\004\022\014\n\004item\030\003 \001(\004\022\013\n\003num\030\004 \001(\005"
    "\022\017\n\007text_id\030\005 \001(\005\"y\n\022NotifyExpressToDst\022"
    ")\n\003src\030\001 \001(\0132\034.proto_ff.RolePlayerMiniIn"
    "fo\022\014\n\004item\030\002 \001(\004\022\013\n\003num\030\003 \001(\005\022\017\n\007text_id"
    "\030\004 \001(\005\022\014\n\004time\030\005 \001(\004\"\036\n\016ExpressDataReq\022\014"
    "\n\004type\030\001 \001(\005\"B\n\016ExpressDataRsp\022\014\n\004type\030\001"
    " \001(\005\022\"\n\004logs\030\002 \003(\0132\024.proto_ff.ExpressLog"
    "\"\031\n\027MarryInviteDstBuyDupReq\"&\n\027MarryInvi"
    "teDstBuyDupRsp\022\013\n\003ret\030\001 \001(\005\"\026\n\024NotifyMar"
    "ryDstBuyDup\"\023\n\021MarryBuyRefuseReq\"\036\n\016Marr"
    "yBuyDupReq\022\014\n\004type\030\001 \001(\005\"\035\n\016MarryBuyDupR"
    "sp\022\013\n\003ret\030\001 \001(\005\"#\n\024NotifyMarryBuyResult\022"
    "\013\n\003ret\030\001 \001(\005\"\020\n\016MarryLockLvReq\"\035\n\016MarryL"
    "ockLvRsp\022\013\n\003ret\030\001 \001(\005\"\020\n\016MarryBoxBuyReq\""
    "\035\n\016MarryBoxBuyRsp\022\013\n\003ret\030\001 \001(\005\"\037\n\017MarryB"
    "oxRecvReq\022\014\n\004type\030\001 \001(\005\",\n\017MarryBoxRecvR"
    "sp\022\013\n\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\026\n\024NotifyM"
    "arryDupSelect\"\037\n\021MarryDupSelectReq\022\n\n\002id"
    "\030\001 \001(\005\"\037\n\021MarryDupSelectRsp\022\n\n\002id\030\001 \001(\005\""
    "M\n\024NotifyMarryDupResult\022\013\n\003ret\030\001 \001(\005\022\014\n\004"
    "code\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\022\r\n\005boxid\030\004 \001(\005\"\026"
    "\n\024SearchMarryFriendReq\"C\n\024SearchMarryFri"
    "endRsp\022+\n\005infos\030\001 \003(\0132\034.proto_ff.RolePla"
    "yerMiniInfo\"\022\n\020MarryTaskRecvReq\"\037\n\020Marry"
    "TaskRecvRsp\022\013\n\003ret\030\001 \001(\005\"\025\n\023MarryWedding"
    "DataReq\"b\n\021NotifyWeddingData\022\014\n\004type\030\001 \001"
    "(\005\022*\n\005infos\030\002 \003(\0132\033.proto_ff.WeddingSimp"
    "leInfo\022\023\n\013wedding_num\030\003 \001(\005\"\?\n\021NotifyWed"
    "dingPlan\022*\n\005infos\030\001 \003(\0132\033.proto_ff.Weddi"
    "ngSimpleInfo\"5\n\021NotifyWeddingStep\022\022\n\nwed"
    "ding_id\030\001 \001(\005\022\014\n\004step\030\002 \001(\005\"m\n\021NotifyWed"
    "dingRole\022\030\n\020can_join_wedding\030\001 \003(\005\022\025\n\rap"
    "ply_wedding\030\002 \003(\005\022\'\n\006detail\030\003 \003(\0132\027.prot"
    "o_ff.WeddingDetail\":\n\016MakeWeddingReq\022\022\n\n"
    "wedding_id\030\001 \001(\005\022\024\n\014wedding_gear\030\002 \001(\005\"\035"
    "\n\016MakeWeddingRsp\022\013\n\003ret\030\001 \001(\005\"T\n\020Wedding"
    "InviteReq\022\023\n\013invite_type\030\001 \001(\005\022\027\n\017invite"
    "_cid_list\030\002 \003(\004\022\022\n\nwedding_id\030\003 \001(\005\"a\n\020W"
    "eddingInviteRsp\022\013\n\003ret\030\001 \001(\005\022\023\n\013invite_t"
    "ype\030\002 \001(\005\022\027\n\017invite_cid_list\030\003 \003(\004\022\022\n\nwe"
    "dding_id\030\004 \001(\005\"(\n\022EnterWeddingDupReq\022\022\n\n"
    "wedding_id\030\001 \001(\005\"5\n\022EnterWeddingDupRsp\022\013"
    "\n\003ret\030\001 \001(\005\022\022\n\nwedding_id\030\002 \001(\005\")\n\023Notif"
    "yWeddingInvite\022\022\n\nwedding_id\030\001 \001(\005\"\'\n\021We"
    "ddingBuySeatReq\022\022\n\nwedding_id\030\001 \001(\005\"4\n\021W"
    "eddingBuySeatRsp\022\013\n\003ret\030\001 \001(\005\022\022\n\nwedding"
    "_id\030\002 \001(\005\"%\n\017WeddingApplyReq\022\022\n\nwedding_"
    "id\030\001 \001(\005\"2\n\017WeddingApplyRsp\022\013\n\003ret\030\001 \001(\005"
    "\022\022\n\nwedding_id\030\002 \001(\005\".\n\027NotifyWeddingTou"
    "rFollow\022\023\n\013monster_cid\030\001 \001(\004\"(\n\022NotifyWe"
    "ddingApply\022\022\n\nwedding_id\030\001 \001(\005\"e\n\022Notify"
    "BroadExpress\022\016\n\006itemid\030\001 \001(\005\022\013\n\003num\030\002 \001("
    "\005\022\016\n\006src_id\030\003 \001(\004\022\020\n\010src_name\030\004 \001(\014\022\020\n\010d"
    "st_name\030\005 \001(\014\"\020\n\016WeddingSignReq\"\035\n\016Weddi"
    "ngSignRsp\022\013\n\003ret\030\001 \001(\005\" \n\016WeddingFireReq"
    "\022\016\n\006itemid\030\001 \001(\005\"-\n\016WeddingFireRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\016\n\006itemid\030\002 \001(\005\".\n\017NotifyBroadFi"
    "re\022\013\n\003cid\030\001 \001(\004\022\016\n\006itemid\030\002 \001(\005\"\272\001\n\024Noti"
    "fyWeddingDupData\022\014\n\004step\030\001 \001(\005\022\r\n\005enter\030"
    "\002 \001(\005\022\025\n\rstep_end_time\030\003 \001(\004\022\026\n\016qinyou_n"
    "pc_cid\030\004 \001(\004\022\025\n\rqinyou_result\030\005 \001(\005\022\022\n\nw"
    "arm_value\030\006 \001(\005\022+\n\005infos\030\007 \003(\0132\034.proto_f"
    "f.RolePlayerMiniInfo\"s\n\024NotifyWeddingDup"
    "Role\022\020\n\010sign_num\030\001 \001(\005\022\013\n\003exp\030\002 \001(\004\022\025\n\rc"
    "akeRewardNum\030\003 \001(\005\022\022\n\ncurCakeNum\030\004 \001(\005\022\021"
    "\n\tyanxi_cid\030\005 \003(\004\"\"\n\014throwCakeReq\022\022\n\ntar"
    "get_cid\030\001 \001(\004\"\033\n\014throwCakeRsp\022\013\n\003ret\030\001 \001"
    "(\005\" \n\021NotifyMarryRedNum\022\013\n\003num\030\001 \001(\005\"\021\n\017"
    "SendMarryRedReq\"\036\n\017SendMarryRedRsp\022\013\n\003re"
    "t\030\001 \001(\005\"<\n\013C2LMarryReq\022\016\n\006src_id\030\001 \001(\004\022\017"
    "\n\007dst_cid\030\002 \001(\004\022\014\n\004gear\030\003 \001(\005\"I\n\013L2CMarr"
    "yRsp\022\013\n\003ret\030\001 \001(\005\022\016\n\006src_id\030\002 \001(\004\022\017\n\007dst"
    "_cid\030\003 \001(\004\022\014\n\004gear\030\004 \001(\005\"}\n\022C2LNotifyMar"
    "ryCmpt\022)\n\003dst\030\001 \001(\0132\034.proto_ff.RolePlaye"
    "rMiniInfo\022\014\n\004gear\030\002 \001(\005\022\017\n\007applyer\030\003 \001(\004"
    "\022\020\n\010marry_id\030\004 \001(\005\022\013\n\003cid\030\005 \001(\004\"G\n\023L2CUp"
    "dateMarryBrief\022\013\n\003cid\030\001 \001(\004\022#\n\005brief\030\002 \001"
    "(\0132\024.proto_ff.MarryBrief\"\037\n\020C2LNotifyDiv"
    "orce\022\013\n\003cid\030\001 \001(\004\"M\n\rC2LExpressReq\022\013\n\003ci"
    "d\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022!\n\003req\030\003 \001(\0132\024.pro"
    "to_ff.ExpressReq\"I\n\027L2CNotifyExpressSucc"
    "ess\022\013\n\003cid\030\001 \001(\004\022!\n\003req\030\002 \001(\0132\024.proto_ff"
    ".ExpressReq\"O\n\025C2LNotifyExpressToDst\022\013\n\003"
    "cid\030\001 \001(\004\022)\n\003req\030\002 \001(\0132\034.proto_ff.Notify"
    "ExpressToDst\"\270\001\n\021C2LNotifyMarryDst\022\014\n\004ty"
    "pe\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\027\n\017my_dst_recv_day"
    "\030\003 \001(\005\022\030\n\020dst_give_dup_num\030\004 \001(\005\022\020\n\010marr"
    "y_id\030\005 \001(\005\022#\n\005brief\030\006 \001(\0132\024.proto_ff.Mar"
    "ryBrief\022\020\n\010dst_name\030\007 \001(\014\022\014\n\004gear\030\010 \003(\005\""
    "\"\n\023C2LGlobalExpressReq\022\013\n\003cid\030\001 \001(\004\"B\n\030C"
    "2LNotifyMarryBuySuccess\022\013\n\003cid\030\001 \001(\004\022\013\n\003"
    "ret\030\002 \001(\005\022\014\n\004type\030\003 \001(\005\"0\n\023C2LMarryRecvD"
    "stCard\022\013\n\003cid\030\001 \001(\004\022\014\n\004days\030\002 \001(\005\"7\n\024C2L"
    "WeddingBuySeatReq\022\013\n\003cid\030\001 \001(\004\022\022\n\nweddin"
    "g_id\030\002 \001(\005\"D\n\024L2CWeddingBuySeatRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\022\n\nwedding_id\030\003 \001(\005"
    "\"u\n\024C2LNotifyWeddingTour\022\022\n\nwedding_id\030\001"
    " \001(\r\022\020\n\010scene_id\030\002 \001(\004\022\025\n\rtour_end_time\030"
    "\003 \001(\004\022\017\n\007src_cid\030\004 \001(\004\022\017\n\007dst_cid\030\005 \001(\004\""
    "\024\n\022C2LWeddingTourOver", 5181);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "marry.proto", &protobuf_RegisterTypes);
  NotifyMarrySelf::default_instance_ = new NotifyMarrySelf();
  NotifyMarryDst::default_instance_ = new NotifyMarryDst();
  MarryReq::default_instance_ = new MarryReq();
  MarryRsp::default_instance_ = new MarryRsp();
  NotifyMarryApply::default_instance_ = new NotifyMarryApply();
  MarryApplyOptReq::default_instance_ = new MarryApplyOptReq();
  MarryApplyOptRsp::default_instance_ = new MarryApplyOptRsp();
  NotifyMarryRefuse::default_instance_ = new NotifyMarryRefuse();
  NotifyMarryCmpt::default_instance_ = new NotifyMarryCmpt();
  NotifyNewMarry::default_instance_ = new NotifyNewMarry();
  MarryRecvGearRewardReq::default_instance_ = new MarryRecvGearRewardReq();
  MarryRecvGearRewardRsp::default_instance_ = new MarryRecvGearRewardRsp();
  MarryRecvChildReq::default_instance_ = new MarryRecvChildReq();
  MarryRecvChildRsp::default_instance_ = new MarryRecvChildRsp();
  DivorceReq::default_instance_ = new DivorceReq();
  DivorceRsp::default_instance_ = new DivorceRsp();
  MarryChildOptReq::default_instance_ = new MarryChildOptReq();
  MarryChildOptRsp::default_instance_ = new MarryChildOptRsp();
  ExpressReq::default_instance_ = new ExpressReq();
  ExpressRsp::default_instance_ = new ExpressRsp();
  NotifyExpressToDst::default_instance_ = new NotifyExpressToDst();
  ExpressDataReq::default_instance_ = new ExpressDataReq();
  ExpressDataRsp::default_instance_ = new ExpressDataRsp();
  MarryInviteDstBuyDupReq::default_instance_ = new MarryInviteDstBuyDupReq();
  MarryInviteDstBuyDupRsp::default_instance_ = new MarryInviteDstBuyDupRsp();
  NotifyMarryDstBuyDup::default_instance_ = new NotifyMarryDstBuyDup();
  MarryBuyRefuseReq::default_instance_ = new MarryBuyRefuseReq();
  MarryBuyDupReq::default_instance_ = new MarryBuyDupReq();
  MarryBuyDupRsp::default_instance_ = new MarryBuyDupRsp();
  NotifyMarryBuyResult::default_instance_ = new NotifyMarryBuyResult();
  MarryLockLvReq::default_instance_ = new MarryLockLvReq();
  MarryLockLvRsp::default_instance_ = new MarryLockLvRsp();
  MarryBoxBuyReq::default_instance_ = new MarryBoxBuyReq();
  MarryBoxBuyRsp::default_instance_ = new MarryBoxBuyRsp();
  MarryBoxRecvReq::default_instance_ = new MarryBoxRecvReq();
  MarryBoxRecvRsp::default_instance_ = new MarryBoxRecvRsp();
  NotifyMarryDupSelect::default_instance_ = new NotifyMarryDupSelect();
  MarryDupSelectReq::default_instance_ = new MarryDupSelectReq();
  MarryDupSelectRsp::default_instance_ = new MarryDupSelectRsp();
  NotifyMarryDupResult::default_instance_ = new NotifyMarryDupResult();
  SearchMarryFriendReq::default_instance_ = new SearchMarryFriendReq();
  SearchMarryFriendRsp::default_instance_ = new SearchMarryFriendRsp();
  MarryTaskRecvReq::default_instance_ = new MarryTaskRecvReq();
  MarryTaskRecvRsp::default_instance_ = new MarryTaskRecvRsp();
  MarryWeddingDataReq::default_instance_ = new MarryWeddingDataReq();
  NotifyWeddingData::default_instance_ = new NotifyWeddingData();
  NotifyWeddingPlan::default_instance_ = new NotifyWeddingPlan();
  NotifyWeddingStep::default_instance_ = new NotifyWeddingStep();
  NotifyWeddingRole::default_instance_ = new NotifyWeddingRole();
  MakeWeddingReq::default_instance_ = new MakeWeddingReq();
  MakeWeddingRsp::default_instance_ = new MakeWeddingRsp();
  WeddingInviteReq::default_instance_ = new WeddingInviteReq();
  WeddingInviteRsp::default_instance_ = new WeddingInviteRsp();
  EnterWeddingDupReq::default_instance_ = new EnterWeddingDupReq();
  EnterWeddingDupRsp::default_instance_ = new EnterWeddingDupRsp();
  NotifyWeddingInvite::default_instance_ = new NotifyWeddingInvite();
  WeddingBuySeatReq::default_instance_ = new WeddingBuySeatReq();
  WeddingBuySeatRsp::default_instance_ = new WeddingBuySeatRsp();
  WeddingApplyReq::default_instance_ = new WeddingApplyReq();
  WeddingApplyRsp::default_instance_ = new WeddingApplyRsp();
  NotifyWeddingTourFollow::default_instance_ = new NotifyWeddingTourFollow();
  NotifyWeddingApply::default_instance_ = new NotifyWeddingApply();
  NotifyBroadExpress::default_instance_ = new NotifyBroadExpress();
  WeddingSignReq::default_instance_ = new WeddingSignReq();
  WeddingSignRsp::default_instance_ = new WeddingSignRsp();
  WeddingFireReq::default_instance_ = new WeddingFireReq();
  WeddingFireRsp::default_instance_ = new WeddingFireRsp();
  NotifyBroadFire::default_instance_ = new NotifyBroadFire();
  NotifyWeddingDupData::default_instance_ = new NotifyWeddingDupData();
  NotifyWeddingDupRole::default_instance_ = new NotifyWeddingDupRole();
  throwCakeReq::default_instance_ = new throwCakeReq();
  throwCakeRsp::default_instance_ = new throwCakeRsp();
  NotifyMarryRedNum::default_instance_ = new NotifyMarryRedNum();
  SendMarryRedReq::default_instance_ = new SendMarryRedReq();
  SendMarryRedRsp::default_instance_ = new SendMarryRedRsp();
  C2LMarryReq::default_instance_ = new C2LMarryReq();
  L2CMarryRsp::default_instance_ = new L2CMarryRsp();
  C2LNotifyMarryCmpt::default_instance_ = new C2LNotifyMarryCmpt();
  L2CUpdateMarryBrief::default_instance_ = new L2CUpdateMarryBrief();
  C2LNotifyDivorce::default_instance_ = new C2LNotifyDivorce();
  C2LExpressReq::default_instance_ = new C2LExpressReq();
  L2CNotifyExpressSuccess::default_instance_ = new L2CNotifyExpressSuccess();
  C2LNotifyExpressToDst::default_instance_ = new C2LNotifyExpressToDst();
  C2LNotifyMarryDst::default_instance_ = new C2LNotifyMarryDst();
  C2LGlobalExpressReq::default_instance_ = new C2LGlobalExpressReq();
  C2LNotifyMarryBuySuccess::default_instance_ = new C2LNotifyMarryBuySuccess();
  C2LMarryRecvDstCard::default_instance_ = new C2LMarryRecvDstCard();
  C2LWeddingBuySeatReq::default_instance_ = new C2LWeddingBuySeatReq();
  L2CWeddingBuySeatRsp::default_instance_ = new L2CWeddingBuySeatRsp();
  C2LNotifyWeddingTour::default_instance_ = new C2LNotifyWeddingTour();
  C2LWeddingTourOver::default_instance_ = new C2LWeddingTourOver();
  NotifyMarrySelf::default_instance_->InitAsDefaultInstance();
  NotifyMarryDst::default_instance_->InitAsDefaultInstance();
  MarryReq::default_instance_->InitAsDefaultInstance();
  MarryRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryApply::default_instance_->InitAsDefaultInstance();
  MarryApplyOptReq::default_instance_->InitAsDefaultInstance();
  MarryApplyOptRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryRefuse::default_instance_->InitAsDefaultInstance();
  NotifyMarryCmpt::default_instance_->InitAsDefaultInstance();
  NotifyNewMarry::default_instance_->InitAsDefaultInstance();
  MarryRecvGearRewardReq::default_instance_->InitAsDefaultInstance();
  MarryRecvGearRewardRsp::default_instance_->InitAsDefaultInstance();
  MarryRecvChildReq::default_instance_->InitAsDefaultInstance();
  MarryRecvChildRsp::default_instance_->InitAsDefaultInstance();
  DivorceReq::default_instance_->InitAsDefaultInstance();
  DivorceRsp::default_instance_->InitAsDefaultInstance();
  MarryChildOptReq::default_instance_->InitAsDefaultInstance();
  MarryChildOptRsp::default_instance_->InitAsDefaultInstance();
  ExpressReq::default_instance_->InitAsDefaultInstance();
  ExpressRsp::default_instance_->InitAsDefaultInstance();
  NotifyExpressToDst::default_instance_->InitAsDefaultInstance();
  ExpressDataReq::default_instance_->InitAsDefaultInstance();
  ExpressDataRsp::default_instance_->InitAsDefaultInstance();
  MarryInviteDstBuyDupReq::default_instance_->InitAsDefaultInstance();
  MarryInviteDstBuyDupRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryDstBuyDup::default_instance_->InitAsDefaultInstance();
  MarryBuyRefuseReq::default_instance_->InitAsDefaultInstance();
  MarryBuyDupReq::default_instance_->InitAsDefaultInstance();
  MarryBuyDupRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryBuyResult::default_instance_->InitAsDefaultInstance();
  MarryLockLvReq::default_instance_->InitAsDefaultInstance();
  MarryLockLvRsp::default_instance_->InitAsDefaultInstance();
  MarryBoxBuyReq::default_instance_->InitAsDefaultInstance();
  MarryBoxBuyRsp::default_instance_->InitAsDefaultInstance();
  MarryBoxRecvReq::default_instance_->InitAsDefaultInstance();
  MarryBoxRecvRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryDupSelect::default_instance_->InitAsDefaultInstance();
  MarryDupSelectReq::default_instance_->InitAsDefaultInstance();
  MarryDupSelectRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryDupResult::default_instance_->InitAsDefaultInstance();
  SearchMarryFriendReq::default_instance_->InitAsDefaultInstance();
  SearchMarryFriendRsp::default_instance_->InitAsDefaultInstance();
  MarryTaskRecvReq::default_instance_->InitAsDefaultInstance();
  MarryTaskRecvRsp::default_instance_->InitAsDefaultInstance();
  MarryWeddingDataReq::default_instance_->InitAsDefaultInstance();
  NotifyWeddingData::default_instance_->InitAsDefaultInstance();
  NotifyWeddingPlan::default_instance_->InitAsDefaultInstance();
  NotifyWeddingStep::default_instance_->InitAsDefaultInstance();
  NotifyWeddingRole::default_instance_->InitAsDefaultInstance();
  MakeWeddingReq::default_instance_->InitAsDefaultInstance();
  MakeWeddingRsp::default_instance_->InitAsDefaultInstance();
  WeddingInviteReq::default_instance_->InitAsDefaultInstance();
  WeddingInviteRsp::default_instance_->InitAsDefaultInstance();
  EnterWeddingDupReq::default_instance_->InitAsDefaultInstance();
  EnterWeddingDupRsp::default_instance_->InitAsDefaultInstance();
  NotifyWeddingInvite::default_instance_->InitAsDefaultInstance();
  WeddingBuySeatReq::default_instance_->InitAsDefaultInstance();
  WeddingBuySeatRsp::default_instance_->InitAsDefaultInstance();
  WeddingApplyReq::default_instance_->InitAsDefaultInstance();
  WeddingApplyRsp::default_instance_->InitAsDefaultInstance();
  NotifyWeddingTourFollow::default_instance_->InitAsDefaultInstance();
  NotifyWeddingApply::default_instance_->InitAsDefaultInstance();
  NotifyBroadExpress::default_instance_->InitAsDefaultInstance();
  WeddingSignReq::default_instance_->InitAsDefaultInstance();
  WeddingSignRsp::default_instance_->InitAsDefaultInstance();
  WeddingFireReq::default_instance_->InitAsDefaultInstance();
  WeddingFireRsp::default_instance_->InitAsDefaultInstance();
  NotifyBroadFire::default_instance_->InitAsDefaultInstance();
  NotifyWeddingDupData::default_instance_->InitAsDefaultInstance();
  NotifyWeddingDupRole::default_instance_->InitAsDefaultInstance();
  throwCakeReq::default_instance_->InitAsDefaultInstance();
  throwCakeRsp::default_instance_->InitAsDefaultInstance();
  NotifyMarryRedNum::default_instance_->InitAsDefaultInstance();
  SendMarryRedReq::default_instance_->InitAsDefaultInstance();
  SendMarryRedRsp::default_instance_->InitAsDefaultInstance();
  C2LMarryReq::default_instance_->InitAsDefaultInstance();
  L2CMarryRsp::default_instance_->InitAsDefaultInstance();
  C2LNotifyMarryCmpt::default_instance_->InitAsDefaultInstance();
  L2CUpdateMarryBrief::default_instance_->InitAsDefaultInstance();
  C2LNotifyDivorce::default_instance_->InitAsDefaultInstance();
  C2LExpressReq::default_instance_->InitAsDefaultInstance();
  L2CNotifyExpressSuccess::default_instance_->InitAsDefaultInstance();
  C2LNotifyExpressToDst::default_instance_->InitAsDefaultInstance();
  C2LNotifyMarryDst::default_instance_->InitAsDefaultInstance();
  C2LGlobalExpressReq::default_instance_->InitAsDefaultInstance();
  C2LNotifyMarryBuySuccess::default_instance_->InitAsDefaultInstance();
  C2LMarryRecvDstCard::default_instance_->InitAsDefaultInstance();
  C2LWeddingBuySeatReq::default_instance_->InitAsDefaultInstance();
  L2CWeddingBuySeatRsp::default_instance_->InitAsDefaultInstance();
  C2LNotifyWeddingTour::default_instance_->InitAsDefaultInstance();
  C2LWeddingTourOver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_marry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_marry_2eproto {
  StaticDescriptorInitializer_marry_2eproto() {
    protobuf_AddDesc_marry_2eproto();
  }
} static_descriptor_initializer_marry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyMarrySelf::kInfoFieldNumber;
#endif  // !_MSC_VER

NotifyMarrySelf::NotifyMarrySelf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarrySelf::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::MarrySelfInfo*>(&::proto_ff::MarrySelfInfo::default_instance());
}

NotifyMarrySelf::NotifyMarrySelf(const NotifyMarrySelf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarrySelf::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarrySelf::~NotifyMarrySelf() {
  SharedDtor();
}

void NotifyMarrySelf::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyMarrySelf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarrySelf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarrySelf_descriptor_;
}

const NotifyMarrySelf& NotifyMarrySelf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarrySelf* NotifyMarrySelf::default_instance_ = NULL;

NotifyMarrySelf* NotifyMarrySelf::New() const {
  return new NotifyMarrySelf;
}

void NotifyMarrySelf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::MarrySelfInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarrySelf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MarrySelfInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarrySelf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MarrySelfInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarrySelf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MarrySelfInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarrySelf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MarrySelfInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarrySelf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarrySelf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarrySelf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarrySelf::MergeFrom(const NotifyMarrySelf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::MarrySelfInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarrySelf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarrySelf::CopyFrom(const NotifyMarrySelf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarrySelf::IsInitialized() const {

  return true;
}

void NotifyMarrySelf::Swap(NotifyMarrySelf* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarrySelf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarrySelf_descriptor_;
  metadata.reflection = NotifyMarrySelf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryDst::kMiniFieldNumber;
const int NotifyMarryDst::kBriefFieldNumber;
#endif  // !_MSC_VER

NotifyMarryDst::NotifyMarryDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryDst::InitAsDefaultInstance() {
  mini_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
  brief_ = const_cast< ::proto_ff::MarryBrief*>(&::proto_ff::MarryBrief::default_instance());
}

NotifyMarryDst::NotifyMarryDst(const NotifyMarryDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryDst::SharedCtor() {
  _cached_size_ = 0;
  mini_ = NULL;
  brief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryDst::~NotifyMarryDst() {
  SharedDtor();
}

void NotifyMarryDst::SharedDtor() {
  if (this != default_instance_) {
    delete mini_;
    delete brief_;
  }
}

void NotifyMarryDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryDst_descriptor_;
}

const NotifyMarryDst& NotifyMarryDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryDst* NotifyMarryDst::default_instance_ = NULL;

NotifyMarryDst* NotifyMarryDst::New() const {
  return new NotifyMarryDst;
}

void NotifyMarryDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mini()) {
      if (mini_ != NULL) mini_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    if (has_brief()) {
      if (brief_ != NULL) brief_->::proto_ff::MarryBrief::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo mini = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brief;
        break;
      }

      // optional .proto_ff.MarryBrief brief = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo mini = 1;
  if (has_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mini(), output);
  }

  // optional .proto_ff.MarryBrief brief = 2;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->brief(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo mini = 1;
  if (has_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mini(), target);
  }

  // optional .proto_ff.MarryBrief brief = 2;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->brief(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo mini = 1;
    if (has_mini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini());
    }

    // optional .proto_ff.MarryBrief brief = 2;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryDst::MergeFrom(const NotifyMarryDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mini()) {
      mutable_mini()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.mini());
    }
    if (from.has_brief()) {
      mutable_brief()->::proto_ff::MarryBrief::MergeFrom(from.brief());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryDst::CopyFrom(const NotifyMarryDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryDst::IsInitialized() const {

  if (has_mini()) {
    if (!this->mini().IsInitialized()) return false;
  }
  return true;
}

void NotifyMarryDst::Swap(NotifyMarryDst* other) {
  if (other != this) {
    std::swap(mini_, other->mini_);
    std::swap(brief_, other->brief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryDst_descriptor_;
  metadata.reflection = NotifyMarryDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryReq::kDstCidFieldNumber;
const int MarryReq::kGearFieldNumber;
#endif  // !_MSC_VER

MarryReq::MarryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryReq::InitAsDefaultInstance() {
}

MarryReq::MarryReq(const MarryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryReq::SharedCtor() {
  _cached_size_ = 0;
  dst_cid_ = GOOGLE_ULONGLONG(0);
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryReq::~MarryReq() {
  SharedDtor();
}

void MarryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryReq_descriptor_;
}

const MarryReq& MarryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryReq* MarryReq::default_instance_ = NULL;

MarryReq* MarryReq::New() const {
  return new MarryReq;
}

void MarryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_cid_ = GOOGLE_ULONGLONG(0);
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dst_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_cid_)));
          set_has_dst_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dst_cid = 1;
  if (has_dst_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst_cid(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dst_cid = 1;
  if (has_dst_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst_cid(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dst_cid = 1;
    if (has_dst_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_cid());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryReq::MergeFrom(const MarryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_cid()) {
      set_dst_cid(from.dst_cid());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryReq::CopyFrom(const MarryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryReq::IsInitialized() const {

  return true;
}

void MarryReq::Swap(MarryReq* other) {
  if (other != this) {
    std::swap(dst_cid_, other->dst_cid_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryReq_descriptor_;
  metadata.reflection = MarryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryRsp::kRetFieldNumber;
const int MarryRsp::kDstCidFieldNumber;
const int MarryRsp::kGearFieldNumber;
#endif  // !_MSC_VER

MarryRsp::MarryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryRsp::InitAsDefaultInstance() {
}

MarryRsp::MarryRsp(const MarryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dst_cid_ = GOOGLE_ULONGLONG(0);
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRsp::~MarryRsp() {
  SharedDtor();
}

void MarryRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRsp_descriptor_;
}

const MarryRsp& MarryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryRsp* MarryRsp::default_instance_ = NULL;

MarryRsp* MarryRsp::New() const {
  return new MarryRsp;
}

void MarryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dst_cid_ = GOOGLE_ULONGLONG(0);
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_cid;
        break;
      }

      // optional uint64 dst_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_cid_)));
          set_has_dst_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gear;
        break;
      }

      // optional int32 gear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 dst_cid = 2;
  if (has_dst_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_cid(), output);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 dst_cid = 2;
  if (has_dst_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_cid(), target);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 dst_cid = 2;
    if (has_dst_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_cid());
    }

    // optional int32 gear = 3;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRsp::MergeFrom(const MarryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dst_cid()) {
      set_dst_cid(from.dst_cid());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRsp::CopyFrom(const MarryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRsp::IsInitialized() const {

  return true;
}

void MarryRsp::Swap(MarryRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dst_cid_, other->dst_cid_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRsp_descriptor_;
  metadata.reflection = MarryRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryApply::kSrcFieldNumber;
const int NotifyMarryApply::kGearFieldNumber;
#endif  // !_MSC_VER

NotifyMarryApply::NotifyMarryApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryApply::InitAsDefaultInstance() {
  src_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyMarryApply::NotifyMarryApply(const NotifyMarryApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryApply::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryApply::~NotifyMarryApply() {
  SharedDtor();
}

void NotifyMarryApply::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
  }
}

void NotifyMarryApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryApply_descriptor_;
}

const NotifyMarryApply& NotifyMarryApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryApply* NotifyMarryApply::default_instance_ = NULL;

NotifyMarryApply* NotifyMarryApply::New() const {
  return new NotifyMarryApply;
}

void NotifyMarryApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryApply::MergeFrom(const NotifyMarryApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.src());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryApply::CopyFrom(const NotifyMarryApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryApply::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  return true;
}

void NotifyMarryApply::Swap(NotifyMarryApply* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryApply_descriptor_;
  metadata.reflection = NotifyMarryApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryApplyOptReq::kOptFieldNumber;
#endif  // !_MSC_VER

MarryApplyOptReq::MarryApplyOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryApplyOptReq::InitAsDefaultInstance() {
}

MarryApplyOptReq::MarryApplyOptReq(const MarryApplyOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryApplyOptReq::SharedCtor() {
  _cached_size_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryApplyOptReq::~MarryApplyOptReq() {
  SharedDtor();
}

void MarryApplyOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryApplyOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryApplyOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryApplyOptReq_descriptor_;
}

const MarryApplyOptReq& MarryApplyOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryApplyOptReq* MarryApplyOptReq::default_instance_ = NULL;

MarryApplyOptReq* MarryApplyOptReq::New() const {
  return new MarryApplyOptReq;
}

void MarryApplyOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryApplyOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 opt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryApplyOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryApplyOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 opt = 1;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryApplyOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 opt = 1;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryApplyOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryApplyOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryApplyOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryApplyOptReq::MergeFrom(const MarryApplyOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryApplyOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryApplyOptReq::CopyFrom(const MarryApplyOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryApplyOptReq::IsInitialized() const {

  return true;
}

void MarryApplyOptReq::Swap(MarryApplyOptReq* other) {
  if (other != this) {
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryApplyOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryApplyOptReq_descriptor_;
  metadata.reflection = MarryApplyOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryApplyOptRsp::kRetFieldNumber;
const int MarryApplyOptRsp::kOptFieldNumber;
#endif  // !_MSC_VER

MarryApplyOptRsp::MarryApplyOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryApplyOptRsp::InitAsDefaultInstance() {
}

MarryApplyOptRsp::MarryApplyOptRsp(const MarryApplyOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryApplyOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryApplyOptRsp::~MarryApplyOptRsp() {
  SharedDtor();
}

void MarryApplyOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryApplyOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryApplyOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryApplyOptRsp_descriptor_;
}

const MarryApplyOptRsp& MarryApplyOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryApplyOptRsp* MarryApplyOptRsp::default_instance_ = NULL;

MarryApplyOptRsp* MarryApplyOptRsp::New() const {
  return new MarryApplyOptRsp;
}

void MarryApplyOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryApplyOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryApplyOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryApplyOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryApplyOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryApplyOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryApplyOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryApplyOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryApplyOptRsp::MergeFrom(const MarryApplyOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryApplyOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryApplyOptRsp::CopyFrom(const MarryApplyOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryApplyOptRsp::IsInitialized() const {

  return true;
}

void MarryApplyOptRsp::Swap(MarryApplyOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryApplyOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryApplyOptRsp_descriptor_;
  metadata.reflection = MarryApplyOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryRefuse::kRetFieldNumber;
const int NotifyMarryRefuse::kDstFieldNumber;
#endif  // !_MSC_VER

NotifyMarryRefuse::NotifyMarryRefuse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryRefuse::InitAsDefaultInstance() {
  dst_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyMarryRefuse::NotifyMarryRefuse(const NotifyMarryRefuse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryRefuse::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryRefuse::~NotifyMarryRefuse() {
  SharedDtor();
}

void NotifyMarryRefuse::SharedDtor() {
  if (this != default_instance_) {
    delete dst_;
  }
}

void NotifyMarryRefuse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryRefuse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryRefuse_descriptor_;
}

const NotifyMarryRefuse& NotifyMarryRefuse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryRefuse* NotifyMarryRefuse::default_instance_ = NULL;

NotifyMarryRefuse* NotifyMarryRefuse::New() const {
  return new NotifyMarryRefuse;
}

void NotifyMarryRefuse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_dst()) {
      if (dst_ != NULL) dst_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryRefuse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryRefuse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryRefuse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryRefuse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.RolePlayerMiniInfo dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryRefuse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryRefuse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryRefuse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryRefuse::MergeFrom(const NotifyMarryRefuse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dst()) {
      mutable_dst()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryRefuse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryRefuse::CopyFrom(const NotifyMarryRefuse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryRefuse::IsInitialized() const {

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void NotifyMarryRefuse::Swap(NotifyMarryRefuse* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dst_, other->dst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryRefuse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryRefuse_descriptor_;
  metadata.reflection = NotifyMarryRefuse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryCmpt::kDstFieldNumber;
const int NotifyMarryCmpt::kGearFieldNumber;
const int NotifyMarryCmpt::kApplyerFieldNumber;
const int NotifyMarryCmpt::kMarryIdFieldNumber;
#endif  // !_MSC_VER

NotifyMarryCmpt::NotifyMarryCmpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryCmpt::InitAsDefaultInstance() {
  dst_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyMarryCmpt::NotifyMarryCmpt(const NotifyMarryCmpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryCmpt::SharedCtor() {
  _cached_size_ = 0;
  dst_ = NULL;
  gear_ = 0;
  applyer_ = GOOGLE_ULONGLONG(0);
  marry_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryCmpt::~NotifyMarryCmpt() {
  SharedDtor();
}

void NotifyMarryCmpt::SharedDtor() {
  if (this != default_instance_) {
    delete dst_;
  }
}

void NotifyMarryCmpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryCmpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryCmpt_descriptor_;
}

const NotifyMarryCmpt& NotifyMarryCmpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryCmpt* NotifyMarryCmpt::default_instance_ = NULL;

NotifyMarryCmpt* NotifyMarryCmpt::New() const {
  return new NotifyMarryCmpt;
}

void NotifyMarryCmpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dst()) {
      if (dst_ != NULL) dst_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    gear_ = 0;
    applyer_ = GOOGLE_ULONGLONG(0);
    marry_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryCmpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyer;
        break;
      }

      // optional uint64 applyer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applyer_)));
          set_has_applyer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryCmpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  // optional uint64 applyer = 3;
  if (has_applyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->applyer(), output);
  }

  // optional int32 marry_id = 4;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->marry_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryCmpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  // optional uint64 applyer = 3;
  if (has_applyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->applyer(), target);
  }

  // optional int32 marry_id = 4;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->marry_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryCmpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional uint64 applyer = 3;
    if (has_applyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applyer());
    }

    // optional int32 marry_id = 4;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryCmpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryCmpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryCmpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryCmpt::MergeFrom(const NotifyMarryCmpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      mutable_dst()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.dst());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
    if (from.has_applyer()) {
      set_applyer(from.applyer());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryCmpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryCmpt::CopyFrom(const NotifyMarryCmpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryCmpt::IsInitialized() const {

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void NotifyMarryCmpt::Swap(NotifyMarryCmpt* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(gear_, other->gear_);
    std::swap(applyer_, other->applyer_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryCmpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryCmpt_descriptor_;
  metadata.reflection = NotifyMarryCmpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyNewMarry::kSrcFieldNumber;
const int NotifyNewMarry::kDstFieldNumber;
const int NotifyNewMarry::kMarryIdFieldNumber;
const int NotifyNewMarry::kGearFieldNumber;
#endif  // !_MSC_VER

NotifyNewMarry::NotifyNewMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyNewMarry::InitAsDefaultInstance() {
  src_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
  dst_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyNewMarry::NotifyNewMarry(const NotifyNewMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyNewMarry::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  dst_ = NULL;
  marry_id_ = 0;
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyNewMarry::~NotifyNewMarry() {
  SharedDtor();
}

void NotifyNewMarry::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
    delete dst_;
  }
}

void NotifyNewMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyNewMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyNewMarry_descriptor_;
}

const NotifyNewMarry& NotifyNewMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyNewMarry* NotifyNewMarry::default_instance_ = NULL;

NotifyNewMarry* NotifyNewMarry::New() const {
  return new NotifyNewMarry;
}

void NotifyNewMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    if (has_dst()) {
      if (dst_ != NULL) dst_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    marry_id_ = 0;
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyNewMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo dst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gear;
        break;
      }

      // optional int32 gear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyNewMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dst(), output);
  }

  // optional int32 marry_id = 3;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->marry_id(), output);
  }

  // optional int32 gear = 4;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyNewMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dst(), target);
  }

  // optional int32 marry_id = 3;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->marry_id(), target);
  }

  // optional int32 gear = 4;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyNewMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // optional .proto_ff.RolePlayerMiniInfo dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

    // optional int32 marry_id = 3;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional int32 gear = 4;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyNewMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyNewMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyNewMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyNewMarry::MergeFrom(const NotifyNewMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.src());
    }
    if (from.has_dst()) {
      mutable_dst()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.dst());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyNewMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyNewMarry::CopyFrom(const NotifyNewMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyNewMarry::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void NotifyNewMarry::Swap(NotifyNewMarry* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyNewMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyNewMarry_descriptor_;
  metadata.reflection = NotifyNewMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryRecvGearRewardReq::MarryRecvGearRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryRecvGearRewardReq::InitAsDefaultInstance() {
}

MarryRecvGearRewardReq::MarryRecvGearRewardReq(const MarryRecvGearRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryRecvGearRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRecvGearRewardReq::~MarryRecvGearRewardReq() {
  SharedDtor();
}

void MarryRecvGearRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryRecvGearRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRecvGearRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRecvGearRewardReq_descriptor_;
}

const MarryRecvGearRewardReq& MarryRecvGearRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryRecvGearRewardReq* MarryRecvGearRewardReq::default_instance_ = NULL;

MarryRecvGearRewardReq* MarryRecvGearRewardReq::New() const {
  return new MarryRecvGearRewardReq;
}

void MarryRecvGearRewardReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRecvGearRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryRecvGearRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryRecvGearRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryRecvGearRewardReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRecvGearRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRecvGearRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRecvGearRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRecvGearRewardReq::MergeFrom(const MarryRecvGearRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRecvGearRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRecvGearRewardReq::CopyFrom(const MarryRecvGearRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRecvGearRewardReq::IsInitialized() const {

  return true;
}

void MarryRecvGearRewardReq::Swap(MarryRecvGearRewardReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRecvGearRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRecvGearRewardReq_descriptor_;
  metadata.reflection = MarryRecvGearRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryRecvGearRewardRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryRecvGearRewardRsp::MarryRecvGearRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryRecvGearRewardRsp::InitAsDefaultInstance() {
}

MarryRecvGearRewardRsp::MarryRecvGearRewardRsp(const MarryRecvGearRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryRecvGearRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRecvGearRewardRsp::~MarryRecvGearRewardRsp() {
  SharedDtor();
}

void MarryRecvGearRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryRecvGearRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRecvGearRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRecvGearRewardRsp_descriptor_;
}

const MarryRecvGearRewardRsp& MarryRecvGearRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryRecvGearRewardRsp* MarryRecvGearRewardRsp::default_instance_ = NULL;

MarryRecvGearRewardRsp* MarryRecvGearRewardRsp::New() const {
  return new MarryRecvGearRewardRsp;
}

void MarryRecvGearRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRecvGearRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryRecvGearRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryRecvGearRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryRecvGearRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRecvGearRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRecvGearRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRecvGearRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRecvGearRewardRsp::MergeFrom(const MarryRecvGearRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRecvGearRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRecvGearRewardRsp::CopyFrom(const MarryRecvGearRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRecvGearRewardRsp::IsInitialized() const {

  return true;
}

void MarryRecvGearRewardRsp::Swap(MarryRecvGearRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRecvGearRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRecvGearRewardRsp_descriptor_;
  metadata.reflection = MarryRecvGearRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryRecvChildReq::kChildIdFieldNumber;
#endif  // !_MSC_VER

MarryRecvChildReq::MarryRecvChildReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryRecvChildReq::InitAsDefaultInstance() {
}

MarryRecvChildReq::MarryRecvChildReq(const MarryRecvChildReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryRecvChildReq::SharedCtor() {
  _cached_size_ = 0;
  child_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRecvChildReq::~MarryRecvChildReq() {
  SharedDtor();
}

void MarryRecvChildReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryRecvChildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRecvChildReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRecvChildReq_descriptor_;
}

const MarryRecvChildReq& MarryRecvChildReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryRecvChildReq* MarryRecvChildReq::default_instance_ = NULL;

MarryRecvChildReq* MarryRecvChildReq::New() const {
  return new MarryRecvChildReq;
}

void MarryRecvChildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    child_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRecvChildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 child_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryRecvChildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 child_id = 1;
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryRecvChildReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 child_id = 1;
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryRecvChildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 child_id = 1;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRecvChildReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRecvChildReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRecvChildReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRecvChildReq::MergeFrom(const MarryRecvChildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRecvChildReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRecvChildReq::CopyFrom(const MarryRecvChildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRecvChildReq::IsInitialized() const {

  return true;
}

void MarryRecvChildReq::Swap(MarryRecvChildReq* other) {
  if (other != this) {
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRecvChildReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRecvChildReq_descriptor_;
  metadata.reflection = MarryRecvChildReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryRecvChildRsp::kRetFieldNumber;
const int MarryRecvChildRsp::kChildIdFieldNumber;
#endif  // !_MSC_VER

MarryRecvChildRsp::MarryRecvChildRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryRecvChildRsp::InitAsDefaultInstance() {
}

MarryRecvChildRsp::MarryRecvChildRsp(const MarryRecvChildRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryRecvChildRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  child_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryRecvChildRsp::~MarryRecvChildRsp() {
  SharedDtor();
}

void MarryRecvChildRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryRecvChildRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryRecvChildRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryRecvChildRsp_descriptor_;
}

const MarryRecvChildRsp& MarryRecvChildRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryRecvChildRsp* MarryRecvChildRsp::default_instance_ = NULL;

MarryRecvChildRsp* MarryRecvChildRsp::New() const {
  return new MarryRecvChildRsp;
}

void MarryRecvChildRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    child_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryRecvChildRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_child_id;
        break;
      }

      // optional int32 child_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryRecvChildRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 child_id = 2;
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryRecvChildRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 child_id = 2;
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryRecvChildRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 child_id = 2;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryRecvChildRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryRecvChildRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryRecvChildRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryRecvChildRsp::MergeFrom(const MarryRecvChildRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryRecvChildRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryRecvChildRsp::CopyFrom(const MarryRecvChildRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryRecvChildRsp::IsInitialized() const {

  return true;
}

void MarryRecvChildRsp::Swap(MarryRecvChildRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryRecvChildRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryRecvChildRsp_descriptor_;
  metadata.reflection = MarryRecvChildRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DivorceReq::DivorceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DivorceReq::InitAsDefaultInstance() {
}

DivorceReq::DivorceReq(const DivorceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DivorceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DivorceReq::~DivorceReq() {
  SharedDtor();
}

void DivorceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DivorceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivorceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivorceReq_descriptor_;
}

const DivorceReq& DivorceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

DivorceReq* DivorceReq::default_instance_ = NULL;

DivorceReq* DivorceReq::New() const {
  return new DivorceReq;
}

void DivorceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DivorceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void DivorceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DivorceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DivorceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivorceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DivorceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DivorceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DivorceReq::MergeFrom(const DivorceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DivorceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivorceReq::CopyFrom(const DivorceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivorceReq::IsInitialized() const {

  return true;
}

void DivorceReq::Swap(DivorceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DivorceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DivorceReq_descriptor_;
  metadata.reflection = DivorceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DivorceRsp::kRetFieldNumber;
#endif  // !_MSC_VER

DivorceRsp::DivorceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DivorceRsp::InitAsDefaultInstance() {
}

DivorceRsp::DivorceRsp(const DivorceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DivorceRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DivorceRsp::~DivorceRsp() {
  SharedDtor();
}

void DivorceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DivorceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DivorceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DivorceRsp_descriptor_;
}

const DivorceRsp& DivorceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

DivorceRsp* DivorceRsp::default_instance_ = NULL;

DivorceRsp* DivorceRsp::New() const {
  return new DivorceRsp;
}

void DivorceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DivorceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DivorceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DivorceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DivorceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DivorceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DivorceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DivorceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DivorceRsp::MergeFrom(const DivorceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DivorceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DivorceRsp::CopyFrom(const DivorceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivorceRsp::IsInitialized() const {

  return true;
}

void DivorceRsp::Swap(DivorceRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DivorceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DivorceRsp_descriptor_;
  metadata.reflection = DivorceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryChildOptReq::kTypeFieldNumber;
const int MarryChildOptReq::kChildIdFieldNumber;
#endif  // !_MSC_VER

MarryChildOptReq::MarryChildOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryChildOptReq::InitAsDefaultInstance() {
}

MarryChildOptReq::MarryChildOptReq(const MarryChildOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryChildOptReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  child_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryChildOptReq::~MarryChildOptReq() {
  SharedDtor();
}

void MarryChildOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryChildOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryChildOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryChildOptReq_descriptor_;
}

const MarryChildOptReq& MarryChildOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryChildOptReq* MarryChildOptReq::default_instance_ = NULL;

MarryChildOptReq* MarryChildOptReq::New() const {
  return new MarryChildOptReq;
}

void MarryChildOptReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    child_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryChildOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_child_id;
        break;
      }

      // optional int32 child_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryChildOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 child_id = 2;
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryChildOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 child_id = 2;
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryChildOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 child_id = 2;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryChildOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryChildOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryChildOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryChildOptReq::MergeFrom(const MarryChildOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryChildOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryChildOptReq::CopyFrom(const MarryChildOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryChildOptReq::IsInitialized() const {

  return true;
}

void MarryChildOptReq::Swap(MarryChildOptReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryChildOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryChildOptReq_descriptor_;
  metadata.reflection = MarryChildOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryChildOptRsp::kRetFieldNumber;
const int MarryChildOptRsp::kTypeFieldNumber;
const int MarryChildOptRsp::kChildIdFieldNumber;
#endif  // !_MSC_VER

MarryChildOptRsp::MarryChildOptRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryChildOptRsp::InitAsDefaultInstance() {
}

MarryChildOptRsp::MarryChildOptRsp(const MarryChildOptRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryChildOptRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  child_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryChildOptRsp::~MarryChildOptRsp() {
  SharedDtor();
}

void MarryChildOptRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryChildOptRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryChildOptRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryChildOptRsp_descriptor_;
}

const MarryChildOptRsp& MarryChildOptRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryChildOptRsp* MarryChildOptRsp::default_instance_ = NULL;

MarryChildOptRsp* MarryChildOptRsp::New() const {
  return new MarryChildOptRsp;
}

void MarryChildOptRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    child_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryChildOptRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_child_id;
        break;
      }

      // optional int32 child_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryChildOptRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 child_id = 3;
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryChildOptRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 child_id = 3;
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryChildOptRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 child_id = 3;
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryChildOptRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryChildOptRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryChildOptRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryChildOptRsp::MergeFrom(const MarryChildOptRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryChildOptRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryChildOptRsp::CopyFrom(const MarryChildOptRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryChildOptRsp::IsInitialized() const {

  return true;
}

void MarryChildOptRsp::Swap(MarryChildOptRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryChildOptRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryChildOptRsp_descriptor_;
  metadata.reflection = MarryChildOptRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressReq::kCidFieldNumber;
const int ExpressReq::kItemFieldNumber;
const int ExpressReq::kNumFieldNumber;
const int ExpressReq::kTextIdFieldNumber;
#endif  // !_MSC_VER

ExpressReq::ExpressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressReq::InitAsDefaultInstance() {
}

ExpressReq::ExpressReq(const ExpressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  item_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  text_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressReq::~ExpressReq() {
  SharedDtor();
}

void ExpressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressReq_descriptor_;
}

const ExpressReq& ExpressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

ExpressReq* ExpressReq::default_instance_ = NULL;

ExpressReq* ExpressReq::New() const {
  return new ExpressReq;
}

void ExpressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    item_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    text_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional uint64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_text_id;
        break;
      }

      // optional int32 text_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_id_)));
          set_has_text_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 text_id = 4;
  if (has_text_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->text_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 text_id = 4;
  if (has_text_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->text_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 text_id = 4;
    if (has_text_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressReq::MergeFrom(const ExpressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_text_id()) {
      set_text_id(from.text_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressReq::CopyFrom(const ExpressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressReq::IsInitialized() const {

  return true;
}

void ExpressReq::Swap(ExpressReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(text_id_, other->text_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressReq_descriptor_;
  metadata.reflection = ExpressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressRsp::kRetFieldNumber;
const int ExpressRsp::kCidFieldNumber;
const int ExpressRsp::kItemFieldNumber;
const int ExpressRsp::kNumFieldNumber;
const int ExpressRsp::kTextIdFieldNumber;
#endif  // !_MSC_VER

ExpressRsp::ExpressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressRsp::InitAsDefaultInstance() {
}

ExpressRsp::ExpressRsp(const ExpressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  item_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  text_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressRsp::~ExpressRsp() {
  SharedDtor();
}

void ExpressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressRsp_descriptor_;
}

const ExpressRsp& ExpressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

ExpressRsp* ExpressRsp::default_instance_ = NULL;

ExpressRsp* ExpressRsp::New() const {
  return new ExpressRsp;
}

void ExpressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    item_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    text_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional uint64 item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_text_id;
        break;
      }

      // optional int32 text_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_id_)));
          set_has_text_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint64 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 text_id = 5;
  if (has_text_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->text_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint64 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 text_id = 5;
  if (has_text_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->text_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 text_id = 5;
    if (has_text_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressRsp::MergeFrom(const ExpressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_text_id()) {
      set_text_id(from.text_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressRsp::CopyFrom(const ExpressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressRsp::IsInitialized() const {

  return true;
}

void ExpressRsp::Swap(ExpressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(text_id_, other->text_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressRsp_descriptor_;
  metadata.reflection = ExpressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyExpressToDst::kSrcFieldNumber;
const int NotifyExpressToDst::kItemFieldNumber;
const int NotifyExpressToDst::kNumFieldNumber;
const int NotifyExpressToDst::kTextIdFieldNumber;
const int NotifyExpressToDst::kTimeFieldNumber;
#endif  // !_MSC_VER

NotifyExpressToDst::NotifyExpressToDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyExpressToDst::InitAsDefaultInstance() {
  src_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

NotifyExpressToDst::NotifyExpressToDst(const NotifyExpressToDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyExpressToDst::SharedCtor() {
  _cached_size_ = 0;
  src_ = NULL;
  item_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  text_id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyExpressToDst::~NotifyExpressToDst() {
  SharedDtor();
}

void NotifyExpressToDst::SharedDtor() {
  if (this != default_instance_) {
    delete src_;
  }
}

void NotifyExpressToDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyExpressToDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyExpressToDst_descriptor_;
}

const NotifyExpressToDst& NotifyExpressToDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyExpressToDst* NotifyExpressToDst::default_instance_ = NULL;

NotifyExpressToDst* NotifyExpressToDst::New() const {
  return new NotifyExpressToDst;
}

void NotifyExpressToDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_src()) {
      if (src_ != NULL) src_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    item_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
    text_id_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyExpressToDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo src = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional uint64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_text_id;
        break;
      }

      // optional int32 text_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_id_)));
          set_has_text_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyExpressToDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 text_id = 4;
  if (has_text_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->text_id(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyExpressToDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 text_id = 4;
  if (has_text_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->text_id(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyExpressToDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // optional uint64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 text_id = 4;
    if (has_text_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_id());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyExpressToDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyExpressToDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyExpressToDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyExpressToDst::MergeFrom(const NotifyExpressToDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.src());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_text_id()) {
      set_text_id(from.text_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyExpressToDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyExpressToDst::CopyFrom(const NotifyExpressToDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyExpressToDst::IsInitialized() const {

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  return true;
}

void NotifyExpressToDst::Swap(NotifyExpressToDst* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(text_id_, other->text_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyExpressToDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyExpressToDst_descriptor_;
  metadata.reflection = NotifyExpressToDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressDataReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ExpressDataReq::ExpressDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressDataReq::InitAsDefaultInstance() {
}

ExpressDataReq::ExpressDataReq(const ExpressDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressDataReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressDataReq::~ExpressDataReq() {
  SharedDtor();
}

void ExpressDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressDataReq_descriptor_;
}

const ExpressDataReq& ExpressDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

ExpressDataReq* ExpressDataReq::default_instance_ = NULL;

ExpressDataReq* ExpressDataReq::New() const {
  return new ExpressDataReq;
}

void ExpressDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressDataReq::MergeFrom(const ExpressDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressDataReq::CopyFrom(const ExpressDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressDataReq::IsInitialized() const {

  return true;
}

void ExpressDataReq::Swap(ExpressDataReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressDataReq_descriptor_;
  metadata.reflection = ExpressDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpressDataRsp::kTypeFieldNumber;
const int ExpressDataRsp::kLogsFieldNumber;
#endif  // !_MSC_VER

ExpressDataRsp::ExpressDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpressDataRsp::InitAsDefaultInstance() {
}

ExpressDataRsp::ExpressDataRsp(const ExpressDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpressDataRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpressDataRsp::~ExpressDataRsp() {
  SharedDtor();
}

void ExpressDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpressDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpressDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpressDataRsp_descriptor_;
}

const ExpressDataRsp& ExpressDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

ExpressDataRsp* ExpressDataRsp::default_instance_ = NULL;

ExpressDataRsp* ExpressDataRsp::New() const {
  return new ExpressDataRsp;
}

void ExpressDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  logs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpressDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        break;
      }

      // repeated .proto_ff.ExpressLog logs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpressDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.ExpressLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpressDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.ExpressLog logs = 2;
  for (int i = 0; i < this->logs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpressDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.ExpressLog logs = 2;
  total_size += 1 * this->logs_size();
  for (int i = 0; i < this->logs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpressDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpressDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpressDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpressDataRsp::MergeFrom(const ExpressDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  logs_.MergeFrom(from.logs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpressDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpressDataRsp::CopyFrom(const ExpressDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpressDataRsp::IsInitialized() const {

  return true;
}

void ExpressDataRsp::Swap(ExpressDataRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    logs_.Swap(&other->logs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpressDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpressDataRsp_descriptor_;
  metadata.reflection = ExpressDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryInviteDstBuyDupReq::MarryInviteDstBuyDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryInviteDstBuyDupReq::InitAsDefaultInstance() {
}

MarryInviteDstBuyDupReq::MarryInviteDstBuyDupReq(const MarryInviteDstBuyDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryInviteDstBuyDupReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryInviteDstBuyDupReq::~MarryInviteDstBuyDupReq() {
  SharedDtor();
}

void MarryInviteDstBuyDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryInviteDstBuyDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryInviteDstBuyDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviteDstBuyDupReq_descriptor_;
}

const MarryInviteDstBuyDupReq& MarryInviteDstBuyDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryInviteDstBuyDupReq* MarryInviteDstBuyDupReq::default_instance_ = NULL;

MarryInviteDstBuyDupReq* MarryInviteDstBuyDupReq::New() const {
  return new MarryInviteDstBuyDupReq;
}

void MarryInviteDstBuyDupReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryInviteDstBuyDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryInviteDstBuyDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryInviteDstBuyDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryInviteDstBuyDupReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryInviteDstBuyDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryInviteDstBuyDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryInviteDstBuyDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryInviteDstBuyDupReq::MergeFrom(const MarryInviteDstBuyDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryInviteDstBuyDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryInviteDstBuyDupReq::CopyFrom(const MarryInviteDstBuyDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryInviteDstBuyDupReq::IsInitialized() const {

  return true;
}

void MarryInviteDstBuyDupReq::Swap(MarryInviteDstBuyDupReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryInviteDstBuyDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryInviteDstBuyDupReq_descriptor_;
  metadata.reflection = MarryInviteDstBuyDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryInviteDstBuyDupRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryInviteDstBuyDupRsp::MarryInviteDstBuyDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryInviteDstBuyDupRsp::InitAsDefaultInstance() {
}

MarryInviteDstBuyDupRsp::MarryInviteDstBuyDupRsp(const MarryInviteDstBuyDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryInviteDstBuyDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryInviteDstBuyDupRsp::~MarryInviteDstBuyDupRsp() {
  SharedDtor();
}

void MarryInviteDstBuyDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryInviteDstBuyDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryInviteDstBuyDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInviteDstBuyDupRsp_descriptor_;
}

const MarryInviteDstBuyDupRsp& MarryInviteDstBuyDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryInviteDstBuyDupRsp* MarryInviteDstBuyDupRsp::default_instance_ = NULL;

MarryInviteDstBuyDupRsp* MarryInviteDstBuyDupRsp::New() const {
  return new MarryInviteDstBuyDupRsp;
}

void MarryInviteDstBuyDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryInviteDstBuyDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryInviteDstBuyDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryInviteDstBuyDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryInviteDstBuyDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryInviteDstBuyDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryInviteDstBuyDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryInviteDstBuyDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryInviteDstBuyDupRsp::MergeFrom(const MarryInviteDstBuyDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryInviteDstBuyDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryInviteDstBuyDupRsp::CopyFrom(const MarryInviteDstBuyDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryInviteDstBuyDupRsp::IsInitialized() const {

  return true;
}

void MarryInviteDstBuyDupRsp::Swap(MarryInviteDstBuyDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryInviteDstBuyDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryInviteDstBuyDupRsp_descriptor_;
  metadata.reflection = MarryInviteDstBuyDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyMarryDstBuyDup::NotifyMarryDstBuyDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryDstBuyDup::InitAsDefaultInstance() {
}

NotifyMarryDstBuyDup::NotifyMarryDstBuyDup(const NotifyMarryDstBuyDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryDstBuyDup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryDstBuyDup::~NotifyMarryDstBuyDup() {
  SharedDtor();
}

void NotifyMarryDstBuyDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarryDstBuyDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryDstBuyDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryDstBuyDup_descriptor_;
}

const NotifyMarryDstBuyDup& NotifyMarryDstBuyDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryDstBuyDup* NotifyMarryDstBuyDup::default_instance_ = NULL;

NotifyMarryDstBuyDup* NotifyMarryDstBuyDup::New() const {
  return new NotifyMarryDstBuyDup;
}

void NotifyMarryDstBuyDup::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryDstBuyDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyMarryDstBuyDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryDstBuyDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryDstBuyDup::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryDstBuyDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryDstBuyDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryDstBuyDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryDstBuyDup::MergeFrom(const NotifyMarryDstBuyDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryDstBuyDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryDstBuyDup::CopyFrom(const NotifyMarryDstBuyDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryDstBuyDup::IsInitialized() const {

  return true;
}

void NotifyMarryDstBuyDup::Swap(NotifyMarryDstBuyDup* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryDstBuyDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryDstBuyDup_descriptor_;
  metadata.reflection = NotifyMarryDstBuyDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryBuyRefuseReq::MarryBuyRefuseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBuyRefuseReq::InitAsDefaultInstance() {
}

MarryBuyRefuseReq::MarryBuyRefuseReq(const MarryBuyRefuseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBuyRefuseReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBuyRefuseReq::~MarryBuyRefuseReq() {
  SharedDtor();
}

void MarryBuyRefuseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBuyRefuseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBuyRefuseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBuyRefuseReq_descriptor_;
}

const MarryBuyRefuseReq& MarryBuyRefuseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBuyRefuseReq* MarryBuyRefuseReq::default_instance_ = NULL;

MarryBuyRefuseReq* MarryBuyRefuseReq::New() const {
  return new MarryBuyRefuseReq;
}

void MarryBuyRefuseReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBuyRefuseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryBuyRefuseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBuyRefuseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBuyRefuseReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBuyRefuseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBuyRefuseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBuyRefuseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBuyRefuseReq::MergeFrom(const MarryBuyRefuseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBuyRefuseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBuyRefuseReq::CopyFrom(const MarryBuyRefuseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBuyRefuseReq::IsInitialized() const {

  return true;
}

void MarryBuyRefuseReq::Swap(MarryBuyRefuseReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBuyRefuseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBuyRefuseReq_descriptor_;
  metadata.reflection = MarryBuyRefuseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryBuyDupReq::kTypeFieldNumber;
#endif  // !_MSC_VER

MarryBuyDupReq::MarryBuyDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBuyDupReq::InitAsDefaultInstance() {
}

MarryBuyDupReq::MarryBuyDupReq(const MarryBuyDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBuyDupReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBuyDupReq::~MarryBuyDupReq() {
  SharedDtor();
}

void MarryBuyDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBuyDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBuyDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBuyDupReq_descriptor_;
}

const MarryBuyDupReq& MarryBuyDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBuyDupReq* MarryBuyDupReq::default_instance_ = NULL;

MarryBuyDupReq* MarryBuyDupReq::New() const {
  return new MarryBuyDupReq;
}

void MarryBuyDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBuyDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryBuyDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBuyDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBuyDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBuyDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBuyDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBuyDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBuyDupReq::MergeFrom(const MarryBuyDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBuyDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBuyDupReq::CopyFrom(const MarryBuyDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBuyDupReq::IsInitialized() const {

  return true;
}

void MarryBuyDupReq::Swap(MarryBuyDupReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBuyDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBuyDupReq_descriptor_;
  metadata.reflection = MarryBuyDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryBuyDupRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryBuyDupRsp::MarryBuyDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBuyDupRsp::InitAsDefaultInstance() {
}

MarryBuyDupRsp::MarryBuyDupRsp(const MarryBuyDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBuyDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBuyDupRsp::~MarryBuyDupRsp() {
  SharedDtor();
}

void MarryBuyDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBuyDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBuyDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBuyDupRsp_descriptor_;
}

const MarryBuyDupRsp& MarryBuyDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBuyDupRsp* MarryBuyDupRsp::default_instance_ = NULL;

MarryBuyDupRsp* MarryBuyDupRsp::New() const {
  return new MarryBuyDupRsp;
}

void MarryBuyDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBuyDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryBuyDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBuyDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBuyDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBuyDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBuyDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBuyDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBuyDupRsp::MergeFrom(const MarryBuyDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBuyDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBuyDupRsp::CopyFrom(const MarryBuyDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBuyDupRsp::IsInitialized() const {

  return true;
}

void MarryBuyDupRsp::Swap(MarryBuyDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBuyDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBuyDupRsp_descriptor_;
  metadata.reflection = MarryBuyDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryBuyResult::kRetFieldNumber;
#endif  // !_MSC_VER

NotifyMarryBuyResult::NotifyMarryBuyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryBuyResult::InitAsDefaultInstance() {
}

NotifyMarryBuyResult::NotifyMarryBuyResult(const NotifyMarryBuyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryBuyResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryBuyResult::~NotifyMarryBuyResult() {
  SharedDtor();
}

void NotifyMarryBuyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarryBuyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryBuyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryBuyResult_descriptor_;
}

const NotifyMarryBuyResult& NotifyMarryBuyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryBuyResult* NotifyMarryBuyResult::default_instance_ = NULL;

NotifyMarryBuyResult* NotifyMarryBuyResult::New() const {
  return new NotifyMarryBuyResult;
}

void NotifyMarryBuyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryBuyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryBuyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryBuyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryBuyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryBuyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryBuyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryBuyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryBuyResult::MergeFrom(const NotifyMarryBuyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryBuyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryBuyResult::CopyFrom(const NotifyMarryBuyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryBuyResult::IsInitialized() const {

  return true;
}

void NotifyMarryBuyResult::Swap(NotifyMarryBuyResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryBuyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryBuyResult_descriptor_;
  metadata.reflection = NotifyMarryBuyResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryLockLvReq::MarryLockLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryLockLvReq::InitAsDefaultInstance() {
}

MarryLockLvReq::MarryLockLvReq(const MarryLockLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryLockLvReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryLockLvReq::~MarryLockLvReq() {
  SharedDtor();
}

void MarryLockLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryLockLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryLockLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryLockLvReq_descriptor_;
}

const MarryLockLvReq& MarryLockLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryLockLvReq* MarryLockLvReq::default_instance_ = NULL;

MarryLockLvReq* MarryLockLvReq::New() const {
  return new MarryLockLvReq;
}

void MarryLockLvReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryLockLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryLockLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryLockLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryLockLvReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryLockLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryLockLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryLockLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryLockLvReq::MergeFrom(const MarryLockLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryLockLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryLockLvReq::CopyFrom(const MarryLockLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryLockLvReq::IsInitialized() const {

  return true;
}

void MarryLockLvReq::Swap(MarryLockLvReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryLockLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryLockLvReq_descriptor_;
  metadata.reflection = MarryLockLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryLockLvRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryLockLvRsp::MarryLockLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryLockLvRsp::InitAsDefaultInstance() {
}

MarryLockLvRsp::MarryLockLvRsp(const MarryLockLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryLockLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryLockLvRsp::~MarryLockLvRsp() {
  SharedDtor();
}

void MarryLockLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryLockLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryLockLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryLockLvRsp_descriptor_;
}

const MarryLockLvRsp& MarryLockLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryLockLvRsp* MarryLockLvRsp::default_instance_ = NULL;

MarryLockLvRsp* MarryLockLvRsp::New() const {
  return new MarryLockLvRsp;
}

void MarryLockLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryLockLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryLockLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryLockLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryLockLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryLockLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryLockLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryLockLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryLockLvRsp::MergeFrom(const MarryLockLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryLockLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryLockLvRsp::CopyFrom(const MarryLockLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryLockLvRsp::IsInitialized() const {

  return true;
}

void MarryLockLvRsp::Swap(MarryLockLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryLockLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryLockLvRsp_descriptor_;
  metadata.reflection = MarryLockLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryBoxBuyReq::MarryBoxBuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBoxBuyReq::InitAsDefaultInstance() {
}

MarryBoxBuyReq::MarryBoxBuyReq(const MarryBoxBuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBoxBuyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBoxBuyReq::~MarryBoxBuyReq() {
  SharedDtor();
}

void MarryBoxBuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBoxBuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBoxBuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBoxBuyReq_descriptor_;
}

const MarryBoxBuyReq& MarryBoxBuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBoxBuyReq* MarryBoxBuyReq::default_instance_ = NULL;

MarryBoxBuyReq* MarryBoxBuyReq::New() const {
  return new MarryBoxBuyReq;
}

void MarryBoxBuyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBoxBuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryBoxBuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBoxBuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBoxBuyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBoxBuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBoxBuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBoxBuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBoxBuyReq::MergeFrom(const MarryBoxBuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBoxBuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBoxBuyReq::CopyFrom(const MarryBoxBuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBoxBuyReq::IsInitialized() const {

  return true;
}

void MarryBoxBuyReq::Swap(MarryBoxBuyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBoxBuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBoxBuyReq_descriptor_;
  metadata.reflection = MarryBoxBuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryBoxBuyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryBoxBuyRsp::MarryBoxBuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBoxBuyRsp::InitAsDefaultInstance() {
}

MarryBoxBuyRsp::MarryBoxBuyRsp(const MarryBoxBuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBoxBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBoxBuyRsp::~MarryBoxBuyRsp() {
  SharedDtor();
}

void MarryBoxBuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBoxBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBoxBuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBoxBuyRsp_descriptor_;
}

const MarryBoxBuyRsp& MarryBoxBuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBoxBuyRsp* MarryBoxBuyRsp::default_instance_ = NULL;

MarryBoxBuyRsp* MarryBoxBuyRsp::New() const {
  return new MarryBoxBuyRsp;
}

void MarryBoxBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBoxBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryBoxBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBoxBuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBoxBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBoxBuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBoxBuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBoxBuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBoxBuyRsp::MergeFrom(const MarryBoxBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBoxBuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBoxBuyRsp::CopyFrom(const MarryBoxBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBoxBuyRsp::IsInitialized() const {

  return true;
}

void MarryBoxBuyRsp::Swap(MarryBoxBuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBoxBuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBoxBuyRsp_descriptor_;
  metadata.reflection = MarryBoxBuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryBoxRecvReq::kTypeFieldNumber;
#endif  // !_MSC_VER

MarryBoxRecvReq::MarryBoxRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBoxRecvReq::InitAsDefaultInstance() {
}

MarryBoxRecvReq::MarryBoxRecvReq(const MarryBoxRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBoxRecvReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBoxRecvReq::~MarryBoxRecvReq() {
  SharedDtor();
}

void MarryBoxRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBoxRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBoxRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBoxRecvReq_descriptor_;
}

const MarryBoxRecvReq& MarryBoxRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBoxRecvReq* MarryBoxRecvReq::default_instance_ = NULL;

MarryBoxRecvReq* MarryBoxRecvReq::New() const {
  return new MarryBoxRecvReq;
}

void MarryBoxRecvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBoxRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryBoxRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBoxRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBoxRecvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBoxRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBoxRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBoxRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBoxRecvReq::MergeFrom(const MarryBoxRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBoxRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBoxRecvReq::CopyFrom(const MarryBoxRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBoxRecvReq::IsInitialized() const {

  return true;
}

void MarryBoxRecvReq::Swap(MarryBoxRecvReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBoxRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBoxRecvReq_descriptor_;
  metadata.reflection = MarryBoxRecvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryBoxRecvRsp::kRetFieldNumber;
const int MarryBoxRecvRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

MarryBoxRecvRsp::MarryBoxRecvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryBoxRecvRsp::InitAsDefaultInstance() {
}

MarryBoxRecvRsp::MarryBoxRecvRsp(const MarryBoxRecvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryBoxRecvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryBoxRecvRsp::~MarryBoxRecvRsp() {
  SharedDtor();
}

void MarryBoxRecvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryBoxRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryBoxRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryBoxRecvRsp_descriptor_;
}

const MarryBoxRecvRsp& MarryBoxRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryBoxRecvRsp* MarryBoxRecvRsp::default_instance_ = NULL;

MarryBoxRecvRsp* MarryBoxRecvRsp::New() const {
  return new MarryBoxRecvRsp;
}

void MarryBoxRecvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryBoxRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryBoxRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryBoxRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryBoxRecvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryBoxRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryBoxRecvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryBoxRecvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryBoxRecvRsp::MergeFrom(const MarryBoxRecvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryBoxRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryBoxRecvRsp::CopyFrom(const MarryBoxRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryBoxRecvRsp::IsInitialized() const {

  return true;
}

void MarryBoxRecvRsp::Swap(MarryBoxRecvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryBoxRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryBoxRecvRsp_descriptor_;
  metadata.reflection = MarryBoxRecvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyMarryDupSelect::NotifyMarryDupSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryDupSelect::InitAsDefaultInstance() {
}

NotifyMarryDupSelect::NotifyMarryDupSelect(const NotifyMarryDupSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryDupSelect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryDupSelect::~NotifyMarryDupSelect() {
  SharedDtor();
}

void NotifyMarryDupSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarryDupSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryDupSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryDupSelect_descriptor_;
}

const NotifyMarryDupSelect& NotifyMarryDupSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryDupSelect* NotifyMarryDupSelect::default_instance_ = NULL;

NotifyMarryDupSelect* NotifyMarryDupSelect::New() const {
  return new NotifyMarryDupSelect;
}

void NotifyMarryDupSelect::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryDupSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyMarryDupSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryDupSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryDupSelect::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryDupSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryDupSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryDupSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryDupSelect::MergeFrom(const NotifyMarryDupSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryDupSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryDupSelect::CopyFrom(const NotifyMarryDupSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryDupSelect::IsInitialized() const {

  return true;
}

void NotifyMarryDupSelect::Swap(NotifyMarryDupSelect* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryDupSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryDupSelect_descriptor_;
  metadata.reflection = NotifyMarryDupSelect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryDupSelectReq::kIdFieldNumber;
#endif  // !_MSC_VER

MarryDupSelectReq::MarryDupSelectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryDupSelectReq::InitAsDefaultInstance() {
}

MarryDupSelectReq::MarryDupSelectReq(const MarryDupSelectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryDupSelectReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryDupSelectReq::~MarryDupSelectReq() {
  SharedDtor();
}

void MarryDupSelectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryDupSelectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryDupSelectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryDupSelectReq_descriptor_;
}

const MarryDupSelectReq& MarryDupSelectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryDupSelectReq* MarryDupSelectReq::default_instance_ = NULL;

MarryDupSelectReq* MarryDupSelectReq::New() const {
  return new MarryDupSelectReq;
}

void MarryDupSelectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryDupSelectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryDupSelectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryDupSelectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryDupSelectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryDupSelectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryDupSelectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryDupSelectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryDupSelectReq::MergeFrom(const MarryDupSelectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryDupSelectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryDupSelectReq::CopyFrom(const MarryDupSelectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryDupSelectReq::IsInitialized() const {

  return true;
}

void MarryDupSelectReq::Swap(MarryDupSelectReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryDupSelectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryDupSelectReq_descriptor_;
  metadata.reflection = MarryDupSelectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryDupSelectRsp::kIdFieldNumber;
#endif  // !_MSC_VER

MarryDupSelectRsp::MarryDupSelectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryDupSelectRsp::InitAsDefaultInstance() {
}

MarryDupSelectRsp::MarryDupSelectRsp(const MarryDupSelectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryDupSelectRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryDupSelectRsp::~MarryDupSelectRsp() {
  SharedDtor();
}

void MarryDupSelectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryDupSelectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryDupSelectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryDupSelectRsp_descriptor_;
}

const MarryDupSelectRsp& MarryDupSelectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryDupSelectRsp* MarryDupSelectRsp::default_instance_ = NULL;

MarryDupSelectRsp* MarryDupSelectRsp::New() const {
  return new MarryDupSelectRsp;
}

void MarryDupSelectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryDupSelectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryDupSelectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryDupSelectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryDupSelectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryDupSelectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryDupSelectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryDupSelectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryDupSelectRsp::MergeFrom(const MarryDupSelectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryDupSelectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryDupSelectRsp::CopyFrom(const MarryDupSelectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryDupSelectRsp::IsInitialized() const {

  return true;
}

void MarryDupSelectRsp::Swap(MarryDupSelectRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryDupSelectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryDupSelectRsp_descriptor_;
  metadata.reflection = MarryDupSelectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryDupResult::kRetFieldNumber;
const int NotifyMarryDupResult::kCodeFieldNumber;
const int NotifyMarryDupResult::kExpFieldNumber;
const int NotifyMarryDupResult::kBoxidFieldNumber;
#endif  // !_MSC_VER

NotifyMarryDupResult::NotifyMarryDupResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryDupResult::InitAsDefaultInstance() {
}

NotifyMarryDupResult::NotifyMarryDupResult(const NotifyMarryDupResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryDupResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  code_ = 0;
  exp_ = 0;
  boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryDupResult::~NotifyMarryDupResult() {
  SharedDtor();
}

void NotifyMarryDupResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarryDupResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryDupResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryDupResult_descriptor_;
}

const NotifyMarryDupResult& NotifyMarryDupResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryDupResult* NotifyMarryDupResult::default_instance_ = NULL;

NotifyMarryDupResult* NotifyMarryDupResult::New() const {
  return new NotifyMarryDupResult;
}

void NotifyMarryDupResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    code_ = 0;
    exp_ = 0;
    boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryDupResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxid;
        break;
      }

      // optional int32 boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryDupResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 boxid = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryDupResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 boxid = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryDupResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 boxid = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryDupResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryDupResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryDupResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryDupResult::MergeFrom(const NotifyMarryDupResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryDupResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryDupResult::CopyFrom(const NotifyMarryDupResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryDupResult::IsInitialized() const {

  return true;
}

void NotifyMarryDupResult::Swap(NotifyMarryDupResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(code_, other->code_);
    std::swap(exp_, other->exp_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryDupResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryDupResult_descriptor_;
  metadata.reflection = NotifyMarryDupResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SearchMarryFriendReq::SearchMarryFriendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchMarryFriendReq::InitAsDefaultInstance() {
}

SearchMarryFriendReq::SearchMarryFriendReq(const SearchMarryFriendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchMarryFriendReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchMarryFriendReq::~SearchMarryFriendReq() {
  SharedDtor();
}

void SearchMarryFriendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchMarryFriendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchMarryFriendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchMarryFriendReq_descriptor_;
}

const SearchMarryFriendReq& SearchMarryFriendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

SearchMarryFriendReq* SearchMarryFriendReq::default_instance_ = NULL;

SearchMarryFriendReq* SearchMarryFriendReq::New() const {
  return new SearchMarryFriendReq;
}

void SearchMarryFriendReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchMarryFriendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SearchMarryFriendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchMarryFriendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchMarryFriendReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchMarryFriendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchMarryFriendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchMarryFriendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchMarryFriendReq::MergeFrom(const SearchMarryFriendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchMarryFriendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchMarryFriendReq::CopyFrom(const SearchMarryFriendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMarryFriendReq::IsInitialized() const {

  return true;
}

void SearchMarryFriendReq::Swap(SearchMarryFriendReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchMarryFriendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchMarryFriendReq_descriptor_;
  metadata.reflection = SearchMarryFriendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchMarryFriendRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

SearchMarryFriendRsp::SearchMarryFriendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchMarryFriendRsp::InitAsDefaultInstance() {
}

SearchMarryFriendRsp::SearchMarryFriendRsp(const SearchMarryFriendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchMarryFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchMarryFriendRsp::~SearchMarryFriendRsp() {
  SharedDtor();
}

void SearchMarryFriendRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchMarryFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchMarryFriendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchMarryFriendRsp_descriptor_;
}

const SearchMarryFriendRsp& SearchMarryFriendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

SearchMarryFriendRsp* SearchMarryFriendRsp::default_instance_ = NULL;

SearchMarryFriendRsp* SearchMarryFriendRsp::New() const {
  return new SearchMarryFriendRsp;
}

void SearchMarryFriendRsp::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchMarryFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RolePlayerMiniInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchMarryFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RolePlayerMiniInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchMarryFriendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RolePlayerMiniInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchMarryFriendRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RolePlayerMiniInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchMarryFriendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchMarryFriendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchMarryFriendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchMarryFriendRsp::MergeFrom(const SearchMarryFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchMarryFriendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchMarryFriendRsp::CopyFrom(const SearchMarryFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchMarryFriendRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void SearchMarryFriendRsp::Swap(SearchMarryFriendRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchMarryFriendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchMarryFriendRsp_descriptor_;
  metadata.reflection = SearchMarryFriendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryTaskRecvReq::MarryTaskRecvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryTaskRecvReq::InitAsDefaultInstance() {
}

MarryTaskRecvReq::MarryTaskRecvReq(const MarryTaskRecvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryTaskRecvReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryTaskRecvReq::~MarryTaskRecvReq() {
  SharedDtor();
}

void MarryTaskRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryTaskRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryTaskRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryTaskRecvReq_descriptor_;
}

const MarryTaskRecvReq& MarryTaskRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryTaskRecvReq* MarryTaskRecvReq::default_instance_ = NULL;

MarryTaskRecvReq* MarryTaskRecvReq::New() const {
  return new MarryTaskRecvReq;
}

void MarryTaskRecvReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryTaskRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryTaskRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryTaskRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryTaskRecvReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryTaskRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryTaskRecvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryTaskRecvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryTaskRecvReq::MergeFrom(const MarryTaskRecvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryTaskRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryTaskRecvReq::CopyFrom(const MarryTaskRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryTaskRecvReq::IsInitialized() const {

  return true;
}

void MarryTaskRecvReq::Swap(MarryTaskRecvReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryTaskRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryTaskRecvReq_descriptor_;
  metadata.reflection = MarryTaskRecvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryTaskRecvRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MarryTaskRecvRsp::MarryTaskRecvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryTaskRecvRsp::InitAsDefaultInstance() {
}

MarryTaskRecvRsp::MarryTaskRecvRsp(const MarryTaskRecvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryTaskRecvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryTaskRecvRsp::~MarryTaskRecvRsp() {
  SharedDtor();
}

void MarryTaskRecvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryTaskRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryTaskRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryTaskRecvRsp_descriptor_;
}

const MarryTaskRecvRsp& MarryTaskRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryTaskRecvRsp* MarryTaskRecvRsp::default_instance_ = NULL;

MarryTaskRecvRsp* MarryTaskRecvRsp::New() const {
  return new MarryTaskRecvRsp;
}

void MarryTaskRecvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryTaskRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryTaskRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryTaskRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryTaskRecvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryTaskRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryTaskRecvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryTaskRecvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryTaskRecvRsp::MergeFrom(const MarryTaskRecvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryTaskRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryTaskRecvRsp::CopyFrom(const MarryTaskRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryTaskRecvRsp::IsInitialized() const {

  return true;
}

void MarryTaskRecvRsp::Swap(MarryTaskRecvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryTaskRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryTaskRecvRsp_descriptor_;
  metadata.reflection = MarryTaskRecvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MarryWeddingDataReq::MarryWeddingDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryWeddingDataReq::InitAsDefaultInstance() {
}

MarryWeddingDataReq::MarryWeddingDataReq(const MarryWeddingDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryWeddingDataReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryWeddingDataReq::~MarryWeddingDataReq() {
  SharedDtor();
}

void MarryWeddingDataReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryWeddingDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryWeddingDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryWeddingDataReq_descriptor_;
}

const MarryWeddingDataReq& MarryWeddingDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MarryWeddingDataReq* MarryWeddingDataReq::default_instance_ = NULL;

MarryWeddingDataReq* MarryWeddingDataReq::New() const {
  return new MarryWeddingDataReq;
}

void MarryWeddingDataReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryWeddingDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MarryWeddingDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryWeddingDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryWeddingDataReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryWeddingDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryWeddingDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryWeddingDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryWeddingDataReq::MergeFrom(const MarryWeddingDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryWeddingDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryWeddingDataReq::CopyFrom(const MarryWeddingDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryWeddingDataReq::IsInitialized() const {

  return true;
}

void MarryWeddingDataReq::Swap(MarryWeddingDataReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryWeddingDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryWeddingDataReq_descriptor_;
  metadata.reflection = MarryWeddingDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingData::kTypeFieldNumber;
const int NotifyWeddingData::kInfosFieldNumber;
const int NotifyWeddingData::kWeddingNumFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingData::NotifyWeddingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingData::InitAsDefaultInstance() {
}

NotifyWeddingData::NotifyWeddingData(const NotifyWeddingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  wedding_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingData::~NotifyWeddingData() {
  SharedDtor();
}

void NotifyWeddingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingData_descriptor_;
}

const NotifyWeddingData& NotifyWeddingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingData* NotifyWeddingData::default_instance_ = NULL;

NotifyWeddingData* NotifyWeddingData::New() const {
  return new NotifyWeddingData;
}

void NotifyWeddingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    wedding_num_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.WeddingSimpleInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_wedding_num;
        break;
      }

      // optional int32 wedding_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_num_)));
          set_has_wedding_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.WeddingSimpleInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int32 wedding_num = 3;
  if (has_wedding_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wedding_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.WeddingSimpleInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int32 wedding_num = 3;
  if (has_wedding_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wedding_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 wedding_num = 3;
    if (has_wedding_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_num());
    }

  }
  // repeated .proto_ff.WeddingSimpleInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingData::MergeFrom(const NotifyWeddingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_wedding_num()) {
      set_wedding_num(from.wedding_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingData::CopyFrom(const NotifyWeddingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingData::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyWeddingData::Swap(NotifyWeddingData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(wedding_num_, other->wedding_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingData_descriptor_;
  metadata.reflection = NotifyWeddingData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingPlan::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingPlan::NotifyWeddingPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingPlan::InitAsDefaultInstance() {
}

NotifyWeddingPlan::NotifyWeddingPlan(const NotifyWeddingPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingPlan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingPlan::~NotifyWeddingPlan() {
  SharedDtor();
}

void NotifyWeddingPlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingPlan_descriptor_;
}

const NotifyWeddingPlan& NotifyWeddingPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingPlan* NotifyWeddingPlan::default_instance_ = NULL;

NotifyWeddingPlan* NotifyWeddingPlan::New() const {
  return new NotifyWeddingPlan;
}

void NotifyWeddingPlan::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.WeddingSimpleInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.WeddingSimpleInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.WeddingSimpleInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingPlan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.WeddingSimpleInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingPlan::MergeFrom(const NotifyWeddingPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingPlan::CopyFrom(const NotifyWeddingPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingPlan::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyWeddingPlan::Swap(NotifyWeddingPlan* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingPlan_descriptor_;
  metadata.reflection = NotifyWeddingPlan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingStep::kWeddingIdFieldNumber;
const int NotifyWeddingStep::kStepFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingStep::NotifyWeddingStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingStep::InitAsDefaultInstance() {
}

NotifyWeddingStep::NotifyWeddingStep(const NotifyWeddingStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingStep::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  step_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingStep::~NotifyWeddingStep() {
  SharedDtor();
}

void NotifyWeddingStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingStep_descriptor_;
}

const NotifyWeddingStep& NotifyWeddingStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingStep* NotifyWeddingStep::default_instance_ = NULL;

NotifyWeddingStep* NotifyWeddingStep::New() const {
  return new NotifyWeddingStep;
}

void NotifyWeddingStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
    step_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step;
        break;
      }

      // optional int32 step = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  // optional int32 step = 2;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  // optional int32 step = 2;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

    // optional int32 step = 2;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingStep::MergeFrom(const NotifyWeddingStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingStep::CopyFrom(const NotifyWeddingStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingStep::IsInitialized() const {

  return true;
}

void NotifyWeddingStep::Swap(NotifyWeddingStep* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingStep_descriptor_;
  metadata.reflection = NotifyWeddingStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingRole::kCanJoinWeddingFieldNumber;
const int NotifyWeddingRole::kApplyWeddingFieldNumber;
const int NotifyWeddingRole::kDetailFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingRole::NotifyWeddingRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingRole::InitAsDefaultInstance() {
}

NotifyWeddingRole::NotifyWeddingRole(const NotifyWeddingRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingRole::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingRole::~NotifyWeddingRole() {
  SharedDtor();
}

void NotifyWeddingRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingRole_descriptor_;
}

const NotifyWeddingRole& NotifyWeddingRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingRole* NotifyWeddingRole::default_instance_ = NULL;

NotifyWeddingRole* NotifyWeddingRole::New() const {
  return new NotifyWeddingRole;
}

void NotifyWeddingRole::Clear() {
  can_join_wedding_.Clear();
  apply_wedding_.Clear();
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 can_join_wedding = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_join_wedding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_can_join_wedding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_can_join_wedding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_can_join_wedding;
        if (input->ExpectTag(16)) goto parse_apply_wedding;
        break;
      }

      // repeated int32 apply_wedding = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_wedding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_apply_wedding())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_apply_wedding())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_apply_wedding;
        if (input->ExpectTag(26)) goto parse_detail;
        break;
      }

      // repeated .proto_ff.WeddingDetail detail = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 can_join_wedding = 1;
  for (int i = 0; i < this->can_join_wedding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->can_join_wedding(i), output);
  }

  // repeated int32 apply_wedding = 2;
  for (int i = 0; i < this->apply_wedding_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->apply_wedding(i), output);
  }

  // repeated .proto_ff.WeddingDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 can_join_wedding = 1;
  for (int i = 0; i < this->can_join_wedding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->can_join_wedding(i), target);
  }

  // repeated int32 apply_wedding = 2;
  for (int i = 0; i < this->apply_wedding_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->apply_wedding(i), target);
  }

  // repeated .proto_ff.WeddingDetail detail = 3;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingRole::ByteSize() const {
  int total_size = 0;

  // repeated int32 can_join_wedding = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_join_wedding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->can_join_wedding(i));
    }
    total_size += 1 * this->can_join_wedding_size() + data_size;
  }

  // repeated int32 apply_wedding = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_wedding_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->apply_wedding(i));
    }
    total_size += 1 * this->apply_wedding_size() + data_size;
  }

  // repeated .proto_ff.WeddingDetail detail = 3;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingRole::MergeFrom(const NotifyWeddingRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  can_join_wedding_.MergeFrom(from.can_join_wedding_);
  apply_wedding_.MergeFrom(from.apply_wedding_);
  detail_.MergeFrom(from.detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingRole::CopyFrom(const NotifyWeddingRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingRole::IsInitialized() const {

  for (int i = 0; i < detail_size(); i++) {
    if (!this->detail(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyWeddingRole::Swap(NotifyWeddingRole* other) {
  if (other != this) {
    can_join_wedding_.Swap(&other->can_join_wedding_);
    apply_wedding_.Swap(&other->apply_wedding_);
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingRole_descriptor_;
  metadata.reflection = NotifyWeddingRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeWeddingReq::kWeddingIdFieldNumber;
const int MakeWeddingReq::kWeddingGearFieldNumber;
#endif  // !_MSC_VER

MakeWeddingReq::MakeWeddingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeWeddingReq::InitAsDefaultInstance() {
}

MakeWeddingReq::MakeWeddingReq(const MakeWeddingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeWeddingReq::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  wedding_gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeWeddingReq::~MakeWeddingReq() {
  SharedDtor();
}

void MakeWeddingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeWeddingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeWeddingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeWeddingReq_descriptor_;
}

const MakeWeddingReq& MakeWeddingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MakeWeddingReq* MakeWeddingReq::default_instance_ = NULL;

MakeWeddingReq* MakeWeddingReq::New() const {
  return new MakeWeddingReq;
}

void MakeWeddingReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
    wedding_gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeWeddingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wedding_gear;
        break;
      }

      // optional int32 wedding_gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_gear_)));
          set_has_wedding_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeWeddingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  // optional int32 wedding_gear = 2;
  if (has_wedding_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wedding_gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeWeddingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  // optional int32 wedding_gear = 2;
  if (has_wedding_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wedding_gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeWeddingReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

    // optional int32 wedding_gear = 2;
    if (has_wedding_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeWeddingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeWeddingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeWeddingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeWeddingReq::MergeFrom(const MakeWeddingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_wedding_gear()) {
      set_wedding_gear(from.wedding_gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeWeddingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeWeddingReq::CopyFrom(const MakeWeddingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeWeddingReq::IsInitialized() const {

  return true;
}

void MakeWeddingReq::Swap(MakeWeddingReq* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(wedding_gear_, other->wedding_gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeWeddingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeWeddingReq_descriptor_;
  metadata.reflection = MakeWeddingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MakeWeddingRsp::kRetFieldNumber;
#endif  // !_MSC_VER

MakeWeddingRsp::MakeWeddingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MakeWeddingRsp::InitAsDefaultInstance() {
}

MakeWeddingRsp::MakeWeddingRsp(const MakeWeddingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MakeWeddingRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MakeWeddingRsp::~MakeWeddingRsp() {
  SharedDtor();
}

void MakeWeddingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MakeWeddingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MakeWeddingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MakeWeddingRsp_descriptor_;
}

const MakeWeddingRsp& MakeWeddingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

MakeWeddingRsp* MakeWeddingRsp::default_instance_ = NULL;

MakeWeddingRsp* MakeWeddingRsp::New() const {
  return new MakeWeddingRsp;
}

void MakeWeddingRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MakeWeddingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MakeWeddingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MakeWeddingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MakeWeddingRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MakeWeddingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MakeWeddingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MakeWeddingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MakeWeddingRsp::MergeFrom(const MakeWeddingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MakeWeddingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MakeWeddingRsp::CopyFrom(const MakeWeddingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeWeddingRsp::IsInitialized() const {

  return true;
}

void MakeWeddingRsp::Swap(MakeWeddingRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MakeWeddingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MakeWeddingRsp_descriptor_;
  metadata.reflection = MakeWeddingRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingInviteReq::kInviteTypeFieldNumber;
const int WeddingInviteReq::kInviteCidListFieldNumber;
const int WeddingInviteReq::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingInviteReq::WeddingInviteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingInviteReq::InitAsDefaultInstance() {
}

WeddingInviteReq::WeddingInviteReq(const WeddingInviteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingInviteReq::SharedCtor() {
  _cached_size_ = 0;
  invite_type_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingInviteReq::~WeddingInviteReq() {
  SharedDtor();
}

void WeddingInviteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingInviteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingInviteReq_descriptor_;
}

const WeddingInviteReq& WeddingInviteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingInviteReq* WeddingInviteReq::default_instance_ = NULL;

WeddingInviteReq* WeddingInviteReq::New() const {
  return new WeddingInviteReq;
}

void WeddingInviteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invite_type_ = 0;
    wedding_id_ = 0;
  }
  invite_cid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 invite_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_type_)));
          set_has_invite_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invite_cid_list;
        break;
      }

      // repeated uint64 invite_cid_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_cid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_invite_cid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_invite_cid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invite_cid_list;
        if (input->ExpectTag(24)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 invite_type = 1;
  if (has_invite_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invite_type(), output);
  }

  // repeated uint64 invite_cid_list = 2;
  for (int i = 0; i < this->invite_cid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->invite_cid_list(i), output);
  }

  // optional int32 wedding_id = 3;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingInviteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 invite_type = 1;
  if (has_invite_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->invite_type(), target);
  }

  // repeated uint64 invite_cid_list = 2;
  for (int i = 0; i < this->invite_cid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->invite_cid_list(i), target);
  }

  // optional int32 wedding_id = 3;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingInviteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 invite_type = 1;
    if (has_invite_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_type());
    }

    // optional int32 wedding_id = 3;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  // repeated uint64 invite_cid_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->invite_cid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->invite_cid_list(i));
    }
    total_size += 1 * this->invite_cid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingInviteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingInviteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingInviteReq::MergeFrom(const WeddingInviteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  invite_cid_list_.MergeFrom(from.invite_cid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_type()) {
      set_invite_type(from.invite_type());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingInviteReq::CopyFrom(const WeddingInviteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingInviteReq::IsInitialized() const {

  return true;
}

void WeddingInviteReq::Swap(WeddingInviteReq* other) {
  if (other != this) {
    std::swap(invite_type_, other->invite_type_);
    invite_cid_list_.Swap(&other->invite_cid_list_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingInviteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingInviteReq_descriptor_;
  metadata.reflection = WeddingInviteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingInviteRsp::kRetFieldNumber;
const int WeddingInviteRsp::kInviteTypeFieldNumber;
const int WeddingInviteRsp::kInviteCidListFieldNumber;
const int WeddingInviteRsp::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingInviteRsp::WeddingInviteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingInviteRsp::InitAsDefaultInstance() {
}

WeddingInviteRsp::WeddingInviteRsp(const WeddingInviteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingInviteRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  invite_type_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingInviteRsp::~WeddingInviteRsp() {
  SharedDtor();
}

void WeddingInviteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingInviteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingInviteRsp_descriptor_;
}

const WeddingInviteRsp& WeddingInviteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingInviteRsp* WeddingInviteRsp::default_instance_ = NULL;

WeddingInviteRsp* WeddingInviteRsp::New() const {
  return new WeddingInviteRsp;
}

void WeddingInviteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    invite_type_ = 0;
    wedding_id_ = 0;
  }
  invite_cid_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invite_type;
        break;
      }

      // optional int32 invite_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invite_type_)));
          set_has_invite_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_invite_cid_list;
        break;
      }

      // repeated uint64 invite_cid_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_cid_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_invite_cid_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_invite_cid_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_invite_cid_list;
        if (input->ExpectTag(32)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 invite_type = 2;
  if (has_invite_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->invite_type(), output);
  }

  // repeated uint64 invite_cid_list = 3;
  for (int i = 0; i < this->invite_cid_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->invite_cid_list(i), output);
  }

  // optional int32 wedding_id = 4;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingInviteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 invite_type = 2;
  if (has_invite_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->invite_type(), target);
  }

  // repeated uint64 invite_cid_list = 3;
  for (int i = 0; i < this->invite_cid_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->invite_cid_list(i), target);
  }

  // optional int32 wedding_id = 4;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingInviteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 invite_type = 2;
    if (has_invite_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invite_type());
    }

    // optional int32 wedding_id = 4;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  // repeated uint64 invite_cid_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->invite_cid_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->invite_cid_list(i));
    }
    total_size += 1 * this->invite_cid_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingInviteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingInviteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingInviteRsp::MergeFrom(const WeddingInviteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  invite_cid_list_.MergeFrom(from.invite_cid_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_invite_type()) {
      set_invite_type(from.invite_type());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingInviteRsp::CopyFrom(const WeddingInviteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingInviteRsp::IsInitialized() const {

  return true;
}

void WeddingInviteRsp::Swap(WeddingInviteRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(invite_type_, other->invite_type_);
    invite_cid_list_.Swap(&other->invite_cid_list_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingInviteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingInviteRsp_descriptor_;
  metadata.reflection = WeddingInviteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterWeddingDupReq::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

EnterWeddingDupReq::EnterWeddingDupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterWeddingDupReq::InitAsDefaultInstance() {
}

EnterWeddingDupReq::EnterWeddingDupReq(const EnterWeddingDupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterWeddingDupReq::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterWeddingDupReq::~EnterWeddingDupReq() {
  SharedDtor();
}

void EnterWeddingDupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterWeddingDupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterWeddingDupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterWeddingDupReq_descriptor_;
}

const EnterWeddingDupReq& EnterWeddingDupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

EnterWeddingDupReq* EnterWeddingDupReq::default_instance_ = NULL;

EnterWeddingDupReq* EnterWeddingDupReq::New() const {
  return new EnterWeddingDupReq;
}

void EnterWeddingDupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterWeddingDupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterWeddingDupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterWeddingDupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterWeddingDupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterWeddingDupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterWeddingDupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterWeddingDupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterWeddingDupReq::MergeFrom(const EnterWeddingDupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterWeddingDupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWeddingDupReq::CopyFrom(const EnterWeddingDupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWeddingDupReq::IsInitialized() const {

  return true;
}

void EnterWeddingDupReq::Swap(EnterWeddingDupReq* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterWeddingDupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterWeddingDupReq_descriptor_;
  metadata.reflection = EnterWeddingDupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterWeddingDupRsp::kRetFieldNumber;
const int EnterWeddingDupRsp::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

EnterWeddingDupRsp::EnterWeddingDupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterWeddingDupRsp::InitAsDefaultInstance() {
}

EnterWeddingDupRsp::EnterWeddingDupRsp(const EnterWeddingDupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterWeddingDupRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterWeddingDupRsp::~EnterWeddingDupRsp() {
  SharedDtor();
}

void EnterWeddingDupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterWeddingDupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterWeddingDupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterWeddingDupRsp_descriptor_;
}

const EnterWeddingDupRsp& EnterWeddingDupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

EnterWeddingDupRsp* EnterWeddingDupRsp::default_instance_ = NULL;

EnterWeddingDupRsp* EnterWeddingDupRsp::New() const {
  return new EnterWeddingDupRsp;
}

void EnterWeddingDupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterWeddingDupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterWeddingDupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterWeddingDupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterWeddingDupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 wedding_id = 2;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterWeddingDupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterWeddingDupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterWeddingDupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterWeddingDupRsp::MergeFrom(const EnterWeddingDupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterWeddingDupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterWeddingDupRsp::CopyFrom(const EnterWeddingDupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterWeddingDupRsp::IsInitialized() const {

  return true;
}

void EnterWeddingDupRsp::Swap(EnterWeddingDupRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterWeddingDupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterWeddingDupRsp_descriptor_;
  metadata.reflection = EnterWeddingDupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingInvite::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingInvite::NotifyWeddingInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingInvite::InitAsDefaultInstance() {
}

NotifyWeddingInvite::NotifyWeddingInvite(const NotifyWeddingInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingInvite::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingInvite::~NotifyWeddingInvite() {
  SharedDtor();
}

void NotifyWeddingInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingInvite_descriptor_;
}

const NotifyWeddingInvite& NotifyWeddingInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingInvite* NotifyWeddingInvite::default_instance_ = NULL;

NotifyWeddingInvite* NotifyWeddingInvite::New() const {
  return new NotifyWeddingInvite;
}

void NotifyWeddingInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingInvite::MergeFrom(const NotifyWeddingInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingInvite::CopyFrom(const NotifyWeddingInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingInvite::IsInitialized() const {

  return true;
}

void NotifyWeddingInvite::Swap(NotifyWeddingInvite* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingInvite_descriptor_;
  metadata.reflection = NotifyWeddingInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingBuySeatReq::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingBuySeatReq::WeddingBuySeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingBuySeatReq::InitAsDefaultInstance() {
}

WeddingBuySeatReq::WeddingBuySeatReq(const WeddingBuySeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingBuySeatReq::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingBuySeatReq::~WeddingBuySeatReq() {
  SharedDtor();
}

void WeddingBuySeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingBuySeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingBuySeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingBuySeatReq_descriptor_;
}

const WeddingBuySeatReq& WeddingBuySeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingBuySeatReq* WeddingBuySeatReq::default_instance_ = NULL;

WeddingBuySeatReq* WeddingBuySeatReq::New() const {
  return new WeddingBuySeatReq;
}

void WeddingBuySeatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingBuySeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingBuySeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingBuySeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingBuySeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingBuySeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingBuySeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingBuySeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingBuySeatReq::MergeFrom(const WeddingBuySeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingBuySeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingBuySeatReq::CopyFrom(const WeddingBuySeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingBuySeatReq::IsInitialized() const {

  return true;
}

void WeddingBuySeatReq::Swap(WeddingBuySeatReq* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingBuySeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingBuySeatReq_descriptor_;
  metadata.reflection = WeddingBuySeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingBuySeatRsp::kRetFieldNumber;
const int WeddingBuySeatRsp::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingBuySeatRsp::WeddingBuySeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingBuySeatRsp::InitAsDefaultInstance() {
}

WeddingBuySeatRsp::WeddingBuySeatRsp(const WeddingBuySeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingBuySeatRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingBuySeatRsp::~WeddingBuySeatRsp() {
  SharedDtor();
}

void WeddingBuySeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingBuySeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingBuySeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingBuySeatRsp_descriptor_;
}

const WeddingBuySeatRsp& WeddingBuySeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingBuySeatRsp* WeddingBuySeatRsp::default_instance_ = NULL;

WeddingBuySeatRsp* WeddingBuySeatRsp::New() const {
  return new WeddingBuySeatRsp;
}

void WeddingBuySeatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingBuySeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingBuySeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingBuySeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingBuySeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 wedding_id = 2;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingBuySeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingBuySeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingBuySeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingBuySeatRsp::MergeFrom(const WeddingBuySeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingBuySeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingBuySeatRsp::CopyFrom(const WeddingBuySeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingBuySeatRsp::IsInitialized() const {

  return true;
}

void WeddingBuySeatRsp::Swap(WeddingBuySeatRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingBuySeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingBuySeatRsp_descriptor_;
  metadata.reflection = WeddingBuySeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingApplyReq::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingApplyReq::WeddingApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingApplyReq::InitAsDefaultInstance() {
}

WeddingApplyReq::WeddingApplyReq(const WeddingApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingApplyReq::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingApplyReq::~WeddingApplyReq() {
  SharedDtor();
}

void WeddingApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingApplyReq_descriptor_;
}

const WeddingApplyReq& WeddingApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingApplyReq* WeddingApplyReq::default_instance_ = NULL;

WeddingApplyReq* WeddingApplyReq::New() const {
  return new WeddingApplyReq;
}

void WeddingApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingApplyReq::MergeFrom(const WeddingApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingApplyReq::CopyFrom(const WeddingApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingApplyReq::IsInitialized() const {

  return true;
}

void WeddingApplyReq::Swap(WeddingApplyReq* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingApplyReq_descriptor_;
  metadata.reflection = WeddingApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingApplyRsp::kRetFieldNumber;
const int WeddingApplyRsp::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

WeddingApplyRsp::WeddingApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingApplyRsp::InitAsDefaultInstance() {
}

WeddingApplyRsp::WeddingApplyRsp(const WeddingApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingApplyRsp::~WeddingApplyRsp() {
  SharedDtor();
}

void WeddingApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingApplyRsp_descriptor_;
}

const WeddingApplyRsp& WeddingApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingApplyRsp* WeddingApplyRsp::default_instance_ = NULL;

WeddingApplyRsp* WeddingApplyRsp::New() const {
  return new WeddingApplyRsp;
}

void WeddingApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 wedding_id = 2;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingApplyRsp::MergeFrom(const WeddingApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingApplyRsp::CopyFrom(const WeddingApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingApplyRsp::IsInitialized() const {

  return true;
}

void WeddingApplyRsp::Swap(WeddingApplyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingApplyRsp_descriptor_;
  metadata.reflection = WeddingApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingTourFollow::kMonsterCidFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingTourFollow::NotifyWeddingTourFollow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingTourFollow::InitAsDefaultInstance() {
}

NotifyWeddingTourFollow::NotifyWeddingTourFollow(const NotifyWeddingTourFollow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingTourFollow::SharedCtor() {
  _cached_size_ = 0;
  monster_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingTourFollow::~NotifyWeddingTourFollow() {
  SharedDtor();
}

void NotifyWeddingTourFollow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingTourFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingTourFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingTourFollow_descriptor_;
}

const NotifyWeddingTourFollow& NotifyWeddingTourFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingTourFollow* NotifyWeddingTourFollow::default_instance_ = NULL;

NotifyWeddingTourFollow* NotifyWeddingTourFollow::New() const {
  return new NotifyWeddingTourFollow;
}

void NotifyWeddingTourFollow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monster_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingTourFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 monster_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monster_cid_)));
          set_has_monster_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingTourFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 monster_cid = 1;
  if (has_monster_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->monster_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingTourFollow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 monster_cid = 1;
  if (has_monster_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->monster_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingTourFollow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 monster_cid = 1;
    if (has_monster_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monster_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingTourFollow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingTourFollow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingTourFollow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingTourFollow::MergeFrom(const NotifyWeddingTourFollow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monster_cid()) {
      set_monster_cid(from.monster_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingTourFollow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingTourFollow::CopyFrom(const NotifyWeddingTourFollow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingTourFollow::IsInitialized() const {

  return true;
}

void NotifyWeddingTourFollow::Swap(NotifyWeddingTourFollow* other) {
  if (other != this) {
    std::swap(monster_cid_, other->monster_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingTourFollow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingTourFollow_descriptor_;
  metadata.reflection = NotifyWeddingTourFollow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingApply::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingApply::NotifyWeddingApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingApply::InitAsDefaultInstance() {
}

NotifyWeddingApply::NotifyWeddingApply(const NotifyWeddingApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingApply::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingApply::~NotifyWeddingApply() {
  SharedDtor();
}

void NotifyWeddingApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingApply_descriptor_;
}

const NotifyWeddingApply& NotifyWeddingApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingApply* NotifyWeddingApply::default_instance_ = NULL;

NotifyWeddingApply* NotifyWeddingApply::New() const {
  return new NotifyWeddingApply;
}

void NotifyWeddingApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingApply::MergeFrom(const NotifyWeddingApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingApply::CopyFrom(const NotifyWeddingApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingApply::IsInitialized() const {

  return true;
}

void NotifyWeddingApply::Swap(NotifyWeddingApply* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingApply_descriptor_;
  metadata.reflection = NotifyWeddingApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBroadExpress::kItemidFieldNumber;
const int NotifyBroadExpress::kNumFieldNumber;
const int NotifyBroadExpress::kSrcIdFieldNumber;
const int NotifyBroadExpress::kSrcNameFieldNumber;
const int NotifyBroadExpress::kDstNameFieldNumber;
#endif  // !_MSC_VER

NotifyBroadExpress::NotifyBroadExpress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBroadExpress::InitAsDefaultInstance() {
}

NotifyBroadExpress::NotifyBroadExpress(const NotifyBroadExpress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBroadExpress::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  src_id_ = GOOGLE_ULONGLONG(0);
  src_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBroadExpress::~NotifyBroadExpress() {
  SharedDtor();
}

void NotifyBroadExpress::SharedDtor() {
  if (src_name_ != &::google::protobuf::internal::kEmptyString) {
    delete src_name_;
  }
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
  }
}

void NotifyBroadExpress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBroadExpress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBroadExpress_descriptor_;
}

const NotifyBroadExpress& NotifyBroadExpress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyBroadExpress* NotifyBroadExpress::default_instance_ = NULL;

NotifyBroadExpress* NotifyBroadExpress::New() const {
  return new NotifyBroadExpress;
}

void NotifyBroadExpress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
    src_id_ = GOOGLE_ULONGLONG(0);
    if (has_src_name()) {
      if (src_name_ != &::google::protobuf::internal::kEmptyString) {
        src_name_->clear();
      }
    }
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBroadExpress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_src_id;
        break;
      }

      // optional uint64 src_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_src_name;
        break;
      }

      // optional bytes src_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dst_name;
        break;
      }

      // optional bytes dst_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBroadExpress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional uint64 src_id = 3;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->src_id(), output);
  }

  // optional bytes src_name = 4;
  if (has_src_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->src_name(), output);
  }

  // optional bytes dst_name = 5;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->dst_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBroadExpress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional uint64 src_id = 3;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->src_id(), target);
  }

  // optional bytes src_name = 4;
  if (has_src_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->src_name(), target);
  }

  // optional bytes dst_name = 5;
  if (has_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->dst_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBroadExpress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional uint64 src_id = 3;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_id());
    }

    // optional bytes src_name = 4;
    if (has_src_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_name());
    }

    // optional bytes dst_name = 5;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBroadExpress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBroadExpress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBroadExpress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBroadExpress::MergeFrom(const NotifyBroadExpress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_src_name()) {
      set_src_name(from.src_name());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBroadExpress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBroadExpress::CopyFrom(const NotifyBroadExpress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBroadExpress::IsInitialized() const {

  return true;
}

void NotifyBroadExpress::Swap(NotifyBroadExpress* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(src_id_, other->src_id_);
    std::swap(src_name_, other->src_name_);
    std::swap(dst_name_, other->dst_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBroadExpress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBroadExpress_descriptor_;
  metadata.reflection = NotifyBroadExpress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

WeddingSignReq::WeddingSignReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingSignReq::InitAsDefaultInstance() {
}

WeddingSignReq::WeddingSignReq(const WeddingSignReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingSignReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingSignReq::~WeddingSignReq() {
  SharedDtor();
}

void WeddingSignReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingSignReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingSignReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingSignReq_descriptor_;
}

const WeddingSignReq& WeddingSignReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingSignReq* WeddingSignReq::default_instance_ = NULL;

WeddingSignReq* WeddingSignReq::New() const {
  return new WeddingSignReq;
}

void WeddingSignReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingSignReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void WeddingSignReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingSignReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingSignReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingSignReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingSignReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingSignReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingSignReq::MergeFrom(const WeddingSignReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingSignReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingSignReq::CopyFrom(const WeddingSignReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingSignReq::IsInitialized() const {

  return true;
}

void WeddingSignReq::Swap(WeddingSignReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingSignReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingSignReq_descriptor_;
  metadata.reflection = WeddingSignReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingSignRsp::kRetFieldNumber;
#endif  // !_MSC_VER

WeddingSignRsp::WeddingSignRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingSignRsp::InitAsDefaultInstance() {
}

WeddingSignRsp::WeddingSignRsp(const WeddingSignRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingSignRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingSignRsp::~WeddingSignRsp() {
  SharedDtor();
}

void WeddingSignRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingSignRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingSignRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingSignRsp_descriptor_;
}

const WeddingSignRsp& WeddingSignRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingSignRsp* WeddingSignRsp::default_instance_ = NULL;

WeddingSignRsp* WeddingSignRsp::New() const {
  return new WeddingSignRsp;
}

void WeddingSignRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingSignRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingSignRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingSignRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingSignRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingSignRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingSignRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingSignRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingSignRsp::MergeFrom(const WeddingSignRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingSignRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingSignRsp::CopyFrom(const WeddingSignRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingSignRsp::IsInitialized() const {

  return true;
}

void WeddingSignRsp::Swap(WeddingSignRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingSignRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingSignRsp_descriptor_;
  metadata.reflection = WeddingSignRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingFireReq::kItemidFieldNumber;
#endif  // !_MSC_VER

WeddingFireReq::WeddingFireReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingFireReq::InitAsDefaultInstance() {
}

WeddingFireReq::WeddingFireReq(const WeddingFireReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingFireReq::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingFireReq::~WeddingFireReq() {
  SharedDtor();
}

void WeddingFireReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingFireReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingFireReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingFireReq_descriptor_;
}

const WeddingFireReq& WeddingFireReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingFireReq* WeddingFireReq::default_instance_ = NULL;

WeddingFireReq* WeddingFireReq::New() const {
  return new WeddingFireReq;
}

void WeddingFireReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingFireReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingFireReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingFireReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingFireReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingFireReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingFireReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingFireReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingFireReq::MergeFrom(const WeddingFireReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingFireReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingFireReq::CopyFrom(const WeddingFireReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingFireReq::IsInitialized() const {

  return true;
}

void WeddingFireReq::Swap(WeddingFireReq* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingFireReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingFireReq_descriptor_;
  metadata.reflection = WeddingFireReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingFireRsp::kRetFieldNumber;
const int WeddingFireRsp::kItemidFieldNumber;
#endif  // !_MSC_VER

WeddingFireRsp::WeddingFireRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeddingFireRsp::InitAsDefaultInstance() {
}

WeddingFireRsp::WeddingFireRsp(const WeddingFireRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeddingFireRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingFireRsp::~WeddingFireRsp() {
  SharedDtor();
}

void WeddingFireRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeddingFireRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingFireRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingFireRsp_descriptor_;
}

const WeddingFireRsp& WeddingFireRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

WeddingFireRsp* WeddingFireRsp::default_instance_ = NULL;

WeddingFireRsp* WeddingFireRsp::New() const {
  return new WeddingFireRsp;
}

void WeddingFireRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingFireRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeddingFireRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeddingFireRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeddingFireRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingFireRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingFireRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingFireRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingFireRsp::MergeFrom(const WeddingFireRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingFireRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingFireRsp::CopyFrom(const WeddingFireRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingFireRsp::IsInitialized() const {

  return true;
}

void WeddingFireRsp::Swap(WeddingFireRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingFireRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingFireRsp_descriptor_;
  metadata.reflection = WeddingFireRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyBroadFire::kCidFieldNumber;
const int NotifyBroadFire::kItemidFieldNumber;
#endif  // !_MSC_VER

NotifyBroadFire::NotifyBroadFire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyBroadFire::InitAsDefaultInstance() {
}

NotifyBroadFire::NotifyBroadFire(const NotifyBroadFire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyBroadFire::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyBroadFire::~NotifyBroadFire() {
  SharedDtor();
}

void NotifyBroadFire::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyBroadFire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyBroadFire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyBroadFire_descriptor_;
}

const NotifyBroadFire& NotifyBroadFire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyBroadFire* NotifyBroadFire::default_instance_ = NULL;

NotifyBroadFire* NotifyBroadFire::New() const {
  return new NotifyBroadFire;
}

void NotifyBroadFire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyBroadFire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int32 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyBroadFire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyBroadFire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyBroadFire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyBroadFire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyBroadFire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyBroadFire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyBroadFire::MergeFrom(const NotifyBroadFire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyBroadFire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyBroadFire::CopyFrom(const NotifyBroadFire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyBroadFire::IsInitialized() const {

  return true;
}

void NotifyBroadFire::Swap(NotifyBroadFire* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyBroadFire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyBroadFire_descriptor_;
  metadata.reflection = NotifyBroadFire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingDupData::kStepFieldNumber;
const int NotifyWeddingDupData::kEnterFieldNumber;
const int NotifyWeddingDupData::kStepEndTimeFieldNumber;
const int NotifyWeddingDupData::kQinyouNpcCidFieldNumber;
const int NotifyWeddingDupData::kQinyouResultFieldNumber;
const int NotifyWeddingDupData::kWarmValueFieldNumber;
const int NotifyWeddingDupData::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingDupData::NotifyWeddingDupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingDupData::InitAsDefaultInstance() {
}

NotifyWeddingDupData::NotifyWeddingDupData(const NotifyWeddingDupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingDupData::SharedCtor() {
  _cached_size_ = 0;
  step_ = 0;
  enter_ = 0;
  step_end_time_ = GOOGLE_ULONGLONG(0);
  qinyou_npc_cid_ = GOOGLE_ULONGLONG(0);
  qinyou_result_ = 0;
  warm_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingDupData::~NotifyWeddingDupData() {
  SharedDtor();
}

void NotifyWeddingDupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingDupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingDupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingDupData_descriptor_;
}

const NotifyWeddingDupData& NotifyWeddingDupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingDupData* NotifyWeddingDupData::default_instance_ = NULL;

NotifyWeddingDupData* NotifyWeddingDupData::New() const {
  return new NotifyWeddingDupData;
}

void NotifyWeddingDupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    step_ = 0;
    enter_ = 0;
    step_end_time_ = GOOGLE_ULONGLONG(0);
    qinyou_npc_cid_ = GOOGLE_ULONGLONG(0);
    qinyou_result_ = 0;
    warm_value_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingDupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enter;
        break;
      }

      // optional int32 enter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_)));
          set_has_enter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step_end_time;
        break;
      }

      // optional uint64 step_end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &step_end_time_)));
          set_has_step_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_qinyou_npc_cid;
        break;
      }

      // optional uint64 qinyou_npc_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qinyou_npc_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qinyou_npc_cid_)));
          set_has_qinyou_npc_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_qinyou_result;
        break;
      }

      // optional int32 qinyou_result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qinyou_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qinyou_result_)));
          set_has_qinyou_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_warm_value;
        break;
      }

      // optional int32 warm_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warm_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warm_value_)));
          set_has_warm_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo infos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingDupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 step = 1;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->step(), output);
  }

  // optional int32 enter = 2;
  if (has_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enter(), output);
  }

  // optional uint64 step_end_time = 3;
  if (has_step_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->step_end_time(), output);
  }

  // optional uint64 qinyou_npc_cid = 4;
  if (has_qinyou_npc_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->qinyou_npc_cid(), output);
  }

  // optional int32 qinyou_result = 5;
  if (has_qinyou_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->qinyou_result(), output);
  }

  // optional int32 warm_value = 6;
  if (has_warm_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->warm_value(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo infos = 7;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingDupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 step = 1;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->step(), target);
  }

  // optional int32 enter = 2;
  if (has_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enter(), target);
  }

  // optional uint64 step_end_time = 3;
  if (has_step_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->step_end_time(), target);
  }

  // optional uint64 qinyou_npc_cid = 4;
  if (has_qinyou_npc_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->qinyou_npc_cid(), target);
  }

  // optional int32 qinyou_result = 5;
  if (has_qinyou_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->qinyou_result(), target);
  }

  // optional int32 warm_value = 6;
  if (has_warm_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->warm_value(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo infos = 7;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingDupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 step = 1;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->step());
    }

    // optional int32 enter = 2;
    if (has_enter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter());
    }

    // optional uint64 step_end_time = 3;
    if (has_step_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->step_end_time());
    }

    // optional uint64 qinyou_npc_cid = 4;
    if (has_qinyou_npc_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->qinyou_npc_cid());
    }

    // optional int32 qinyou_result = 5;
    if (has_qinyou_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qinyou_result());
    }

    // optional int32 warm_value = 6;
    if (has_warm_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warm_value());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo infos = 7;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingDupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingDupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingDupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingDupData::MergeFrom(const NotifyWeddingDupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_enter()) {
      set_enter(from.enter());
    }
    if (from.has_step_end_time()) {
      set_step_end_time(from.step_end_time());
    }
    if (from.has_qinyou_npc_cid()) {
      set_qinyou_npc_cid(from.qinyou_npc_cid());
    }
    if (from.has_qinyou_result()) {
      set_qinyou_result(from.qinyou_result());
    }
    if (from.has_warm_value()) {
      set_warm_value(from.warm_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingDupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingDupData::CopyFrom(const NotifyWeddingDupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingDupData::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyWeddingDupData::Swap(NotifyWeddingDupData* other) {
  if (other != this) {
    std::swap(step_, other->step_);
    std::swap(enter_, other->enter_);
    std::swap(step_end_time_, other->step_end_time_);
    std::swap(qinyou_npc_cid_, other->qinyou_npc_cid_);
    std::swap(qinyou_result_, other->qinyou_result_);
    std::swap(warm_value_, other->warm_value_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingDupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingDupData_descriptor_;
  metadata.reflection = NotifyWeddingDupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWeddingDupRole::kSignNumFieldNumber;
const int NotifyWeddingDupRole::kExpFieldNumber;
const int NotifyWeddingDupRole::kCakeRewardNumFieldNumber;
const int NotifyWeddingDupRole::kCurCakeNumFieldNumber;
const int NotifyWeddingDupRole::kYanxiCidFieldNumber;
#endif  // !_MSC_VER

NotifyWeddingDupRole::NotifyWeddingDupRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWeddingDupRole::InitAsDefaultInstance() {
}

NotifyWeddingDupRole::NotifyWeddingDupRole(const NotifyWeddingDupRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWeddingDupRole::SharedCtor() {
  _cached_size_ = 0;
  sign_num_ = 0;
  exp_ = GOOGLE_ULONGLONG(0);
  cakerewardnum_ = 0;
  curcakenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWeddingDupRole::~NotifyWeddingDupRole() {
  SharedDtor();
}

void NotifyWeddingDupRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyWeddingDupRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWeddingDupRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWeddingDupRole_descriptor_;
}

const NotifyWeddingDupRole& NotifyWeddingDupRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyWeddingDupRole* NotifyWeddingDupRole::default_instance_ = NULL;

NotifyWeddingDupRole* NotifyWeddingDupRole::New() const {
  return new NotifyWeddingDupRole;
}

void NotifyWeddingDupRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_num_ = 0;
    exp_ = GOOGLE_ULONGLONG(0);
    cakerewardnum_ = 0;
    curcakenum_ = 0;
  }
  yanxi_cid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWeddingDupRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sign_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sign_num_)));
          set_has_sign_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cakeRewardNum;
        break;
      }

      // optional int32 cakeRewardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cakeRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cakerewardnum_)));
          set_has_cakerewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curCakeNum;
        break;
      }

      // optional int32 curCakeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curCakeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcakenum_)));
          set_has_curcakenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yanxi_cid;
        break;
      }

      // repeated uint64 yanxi_cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yanxi_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_yanxi_cid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_yanxi_cid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_yanxi_cid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWeddingDupRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sign_num = 1;
  if (has_sign_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sign_num(), output);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  // optional int32 cakeRewardNum = 3;
  if (has_cakerewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cakerewardnum(), output);
  }

  // optional int32 curCakeNum = 4;
  if (has_curcakenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curcakenum(), output);
  }

  // repeated uint64 yanxi_cid = 5;
  for (int i = 0; i < this->yanxi_cid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->yanxi_cid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWeddingDupRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sign_num = 1;
  if (has_sign_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sign_num(), target);
  }

  // optional uint64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->exp(), target);
  }

  // optional int32 cakeRewardNum = 3;
  if (has_cakerewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cakerewardnum(), target);
  }

  // optional int32 curCakeNum = 4;
  if (has_curcakenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curcakenum(), target);
  }

  // repeated uint64 yanxi_cid = 5;
  for (int i = 0; i < this->yanxi_cid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->yanxi_cid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWeddingDupRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sign_num = 1;
    if (has_sign_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sign_num());
    }

    // optional uint64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // optional int32 cakeRewardNum = 3;
    if (has_cakerewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cakerewardnum());
    }

    // optional int32 curCakeNum = 4;
    if (has_curcakenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcakenum());
    }

  }
  // repeated uint64 yanxi_cid = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->yanxi_cid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->yanxi_cid(i));
    }
    total_size += 1 * this->yanxi_cid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWeddingDupRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWeddingDupRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWeddingDupRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWeddingDupRole::MergeFrom(const NotifyWeddingDupRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  yanxi_cid_.MergeFrom(from.yanxi_cid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_num()) {
      set_sign_num(from.sign_num());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_cakerewardnum()) {
      set_cakerewardnum(from.cakerewardnum());
    }
    if (from.has_curcakenum()) {
      set_curcakenum(from.curcakenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWeddingDupRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWeddingDupRole::CopyFrom(const NotifyWeddingDupRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWeddingDupRole::IsInitialized() const {

  return true;
}

void NotifyWeddingDupRole::Swap(NotifyWeddingDupRole* other) {
  if (other != this) {
    std::swap(sign_num_, other->sign_num_);
    std::swap(exp_, other->exp_);
    std::swap(cakerewardnum_, other->cakerewardnum_);
    std::swap(curcakenum_, other->curcakenum_);
    yanxi_cid_.Swap(&other->yanxi_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWeddingDupRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWeddingDupRole_descriptor_;
  metadata.reflection = NotifyWeddingDupRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int throwCakeReq::kTargetCidFieldNumber;
#endif  // !_MSC_VER

throwCakeReq::throwCakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void throwCakeReq::InitAsDefaultInstance() {
}

throwCakeReq::throwCakeReq(const throwCakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void throwCakeReq::SharedCtor() {
  _cached_size_ = 0;
  target_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

throwCakeReq::~throwCakeReq() {
  SharedDtor();
}

void throwCakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void throwCakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* throwCakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return throwCakeReq_descriptor_;
}

const throwCakeReq& throwCakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

throwCakeReq* throwCakeReq::default_instance_ = NULL;

throwCakeReq* throwCakeReq::New() const {
  return new throwCakeReq;
}

void throwCakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool throwCakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_cid_)));
          set_has_target_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void throwCakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 target_cid = 1;
  if (has_target_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->target_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* throwCakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 target_cid = 1;
  if (has_target_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int throwCakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 target_cid = 1;
    if (has_target_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void throwCakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const throwCakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const throwCakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void throwCakeReq::MergeFrom(const throwCakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_cid()) {
      set_target_cid(from.target_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void throwCakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void throwCakeReq::CopyFrom(const throwCakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool throwCakeReq::IsInitialized() const {

  return true;
}

void throwCakeReq::Swap(throwCakeReq* other) {
  if (other != this) {
    std::swap(target_cid_, other->target_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata throwCakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = throwCakeReq_descriptor_;
  metadata.reflection = throwCakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int throwCakeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

throwCakeRsp::throwCakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void throwCakeRsp::InitAsDefaultInstance() {
}

throwCakeRsp::throwCakeRsp(const throwCakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void throwCakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

throwCakeRsp::~throwCakeRsp() {
  SharedDtor();
}

void throwCakeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void throwCakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* throwCakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return throwCakeRsp_descriptor_;
}

const throwCakeRsp& throwCakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

throwCakeRsp* throwCakeRsp::default_instance_ = NULL;

throwCakeRsp* throwCakeRsp::New() const {
  return new throwCakeRsp;
}

void throwCakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool throwCakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void throwCakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* throwCakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int throwCakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void throwCakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const throwCakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const throwCakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void throwCakeRsp::MergeFrom(const throwCakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void throwCakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void throwCakeRsp::CopyFrom(const throwCakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool throwCakeRsp::IsInitialized() const {

  return true;
}

void throwCakeRsp::Swap(throwCakeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata throwCakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = throwCakeRsp_descriptor_;
  metadata.reflection = throwCakeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyMarryRedNum::kNumFieldNumber;
#endif  // !_MSC_VER

NotifyMarryRedNum::NotifyMarryRedNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyMarryRedNum::InitAsDefaultInstance() {
}

NotifyMarryRedNum::NotifyMarryRedNum(const NotifyMarryRedNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyMarryRedNum::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyMarryRedNum::~NotifyMarryRedNum() {
  SharedDtor();
}

void NotifyMarryRedNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyMarryRedNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyMarryRedNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyMarryRedNum_descriptor_;
}

const NotifyMarryRedNum& NotifyMarryRedNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

NotifyMarryRedNum* NotifyMarryRedNum::default_instance_ = NULL;

NotifyMarryRedNum* NotifyMarryRedNum::New() const {
  return new NotifyMarryRedNum;
}

void NotifyMarryRedNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyMarryRedNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyMarryRedNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyMarryRedNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyMarryRedNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyMarryRedNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyMarryRedNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyMarryRedNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyMarryRedNum::MergeFrom(const NotifyMarryRedNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyMarryRedNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyMarryRedNum::CopyFrom(const NotifyMarryRedNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyMarryRedNum::IsInitialized() const {

  return true;
}

void NotifyMarryRedNum::Swap(NotifyMarryRedNum* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyMarryRedNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyMarryRedNum_descriptor_;
  metadata.reflection = NotifyMarryRedNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SendMarryRedReq::SendMarryRedReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMarryRedReq::InitAsDefaultInstance() {
}

SendMarryRedReq::SendMarryRedReq(const SendMarryRedReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMarryRedReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMarryRedReq::~SendMarryRedReq() {
  SharedDtor();
}

void SendMarryRedReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendMarryRedReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMarryRedReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMarryRedReq_descriptor_;
}

const SendMarryRedReq& SendMarryRedReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

SendMarryRedReq* SendMarryRedReq::default_instance_ = NULL;

SendMarryRedReq* SendMarryRedReq::New() const {
  return new SendMarryRedReq;
}

void SendMarryRedReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMarryRedReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SendMarryRedReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMarryRedReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMarryRedReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMarryRedReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMarryRedReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMarryRedReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMarryRedReq::MergeFrom(const SendMarryRedReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMarryRedReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMarryRedReq::CopyFrom(const SendMarryRedReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMarryRedReq::IsInitialized() const {

  return true;
}

void SendMarryRedReq::Swap(SendMarryRedReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMarryRedReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMarryRedReq_descriptor_;
  metadata.reflection = SendMarryRedReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMarryRedRsp::kRetFieldNumber;
#endif  // !_MSC_VER

SendMarryRedRsp::SendMarryRedRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SendMarryRedRsp::InitAsDefaultInstance() {
}

SendMarryRedRsp::SendMarryRedRsp(const SendMarryRedRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SendMarryRedRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMarryRedRsp::~SendMarryRedRsp() {
  SharedDtor();
}

void SendMarryRedRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendMarryRedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMarryRedRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMarryRedRsp_descriptor_;
}

const SendMarryRedRsp& SendMarryRedRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

SendMarryRedRsp* SendMarryRedRsp::default_instance_ = NULL;

SendMarryRedRsp* SendMarryRedRsp::New() const {
  return new SendMarryRedRsp;
}

void SendMarryRedRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMarryRedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SendMarryRedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SendMarryRedRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SendMarryRedRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMarryRedRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMarryRedRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMarryRedRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMarryRedRsp::MergeFrom(const SendMarryRedRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMarryRedRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMarryRedRsp::CopyFrom(const SendMarryRedRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMarryRedRsp::IsInitialized() const {

  return true;
}

void SendMarryRedRsp::Swap(SendMarryRedRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMarryRedRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMarryRedRsp_descriptor_;
  metadata.reflection = SendMarryRedRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LMarryReq::kSrcIdFieldNumber;
const int C2LMarryReq::kDstCidFieldNumber;
const int C2LMarryReq::kGearFieldNumber;
#endif  // !_MSC_VER

C2LMarryReq::C2LMarryReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LMarryReq::InitAsDefaultInstance() {
}

C2LMarryReq::C2LMarryReq(const C2LMarryReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LMarryReq::SharedCtor() {
  _cached_size_ = 0;
  src_id_ = GOOGLE_ULONGLONG(0);
  dst_cid_ = GOOGLE_ULONGLONG(0);
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LMarryReq::~C2LMarryReq() {
  SharedDtor();
}

void C2LMarryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LMarryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LMarryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LMarryReq_descriptor_;
}

const C2LMarryReq& C2LMarryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LMarryReq* C2LMarryReq::default_instance_ = NULL;

C2LMarryReq* C2LMarryReq::New() const {
  return new C2LMarryReq;
}

void C2LMarryReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    src_id_ = GOOGLE_ULONGLONG(0);
    dst_cid_ = GOOGLE_ULONGLONG(0);
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LMarryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 src_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_cid;
        break;
      }

      // optional uint64 dst_cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_cid_)));
          set_has_dst_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gear;
        break;
      }

      // optional int32 gear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LMarryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 src_id = 1;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->src_id(), output);
  }

  // optional uint64 dst_cid = 2;
  if (has_dst_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_cid(), output);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LMarryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 src_id = 1;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->src_id(), target);
  }

  // optional uint64 dst_cid = 2;
  if (has_dst_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_cid(), target);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LMarryReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 src_id = 1;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_id());
    }

    // optional uint64 dst_cid = 2;
    if (has_dst_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_cid());
    }

    // optional int32 gear = 3;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LMarryReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LMarryReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LMarryReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LMarryReq::MergeFrom(const C2LMarryReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_dst_cid()) {
      set_dst_cid(from.dst_cid());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LMarryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LMarryReq::CopyFrom(const C2LMarryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LMarryReq::IsInitialized() const {

  return true;
}

void C2LMarryReq::Swap(C2LMarryReq* other) {
  if (other != this) {
    std::swap(src_id_, other->src_id_);
    std::swap(dst_cid_, other->dst_cid_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LMarryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LMarryReq_descriptor_;
  metadata.reflection = C2LMarryReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CMarryRsp::kRetFieldNumber;
const int L2CMarryRsp::kSrcIdFieldNumber;
const int L2CMarryRsp::kDstCidFieldNumber;
const int L2CMarryRsp::kGearFieldNumber;
#endif  // !_MSC_VER

L2CMarryRsp::L2CMarryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CMarryRsp::InitAsDefaultInstance() {
}

L2CMarryRsp::L2CMarryRsp(const L2CMarryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CMarryRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  src_id_ = GOOGLE_ULONGLONG(0);
  dst_cid_ = GOOGLE_ULONGLONG(0);
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CMarryRsp::~L2CMarryRsp() {
  SharedDtor();
}

void L2CMarryRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CMarryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CMarryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CMarryRsp_descriptor_;
}

const L2CMarryRsp& L2CMarryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

L2CMarryRsp* L2CMarryRsp::default_instance_ = NULL;

L2CMarryRsp* L2CMarryRsp::New() const {
  return new L2CMarryRsp;
}

void L2CMarryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    src_id_ = GOOGLE_ULONGLONG(0);
    dst_cid_ = GOOGLE_ULONGLONG(0);
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CMarryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint64 src_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_cid;
        break;
      }

      // optional uint64 dst_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_cid_)));
          set_has_dst_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gear;
        break;
      }

      // optional int32 gear = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CMarryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->src_id(), output);
  }

  // optional uint64 dst_cid = 3;
  if (has_dst_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst_cid(), output);
  }

  // optional int32 gear = 4;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CMarryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->src_id(), target);
  }

  // optional uint64 dst_cid = 3;
  if (has_dst_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst_cid(), target);
  }

  // optional int32 gear = 4;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CMarryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_id());
    }

    // optional uint64 dst_cid = 3;
    if (has_dst_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_cid());
    }

    // optional int32 gear = 4;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CMarryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CMarryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CMarryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CMarryRsp::MergeFrom(const L2CMarryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_dst_cid()) {
      set_dst_cid(from.dst_cid());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CMarryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CMarryRsp::CopyFrom(const L2CMarryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CMarryRsp::IsInitialized() const {

  return true;
}

void L2CMarryRsp::Swap(L2CMarryRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(src_id_, other->src_id_);
    std::swap(dst_cid_, other->dst_cid_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CMarryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CMarryRsp_descriptor_;
  metadata.reflection = L2CMarryRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyMarryCmpt::kDstFieldNumber;
const int C2LNotifyMarryCmpt::kGearFieldNumber;
const int C2LNotifyMarryCmpt::kApplyerFieldNumber;
const int C2LNotifyMarryCmpt::kMarryIdFieldNumber;
const int C2LNotifyMarryCmpt::kCidFieldNumber;
#endif  // !_MSC_VER

C2LNotifyMarryCmpt::C2LNotifyMarryCmpt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyMarryCmpt::InitAsDefaultInstance() {
  dst_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
}

C2LNotifyMarryCmpt::C2LNotifyMarryCmpt(const C2LNotifyMarryCmpt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyMarryCmpt::SharedCtor() {
  _cached_size_ = 0;
  dst_ = NULL;
  gear_ = 0;
  applyer_ = GOOGLE_ULONGLONG(0);
  marry_id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyMarryCmpt::~C2LNotifyMarryCmpt() {
  SharedDtor();
}

void C2LNotifyMarryCmpt::SharedDtor() {
  if (this != default_instance_) {
    delete dst_;
  }
}

void C2LNotifyMarryCmpt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyMarryCmpt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyMarryCmpt_descriptor_;
}

const C2LNotifyMarryCmpt& C2LNotifyMarryCmpt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyMarryCmpt* C2LNotifyMarryCmpt::default_instance_ = NULL;

C2LNotifyMarryCmpt* C2LNotifyMarryCmpt::New() const {
  return new C2LNotifyMarryCmpt;
}

void C2LNotifyMarryCmpt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dst()) {
      if (dst_ != NULL) dst_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    gear_ = 0;
    applyer_ = GOOGLE_ULONGLONG(0);
    marry_id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyMarryCmpt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo dst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_applyer;
        break;
      }

      // optional uint64 applyer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applyer_)));
          set_has_applyer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyMarryCmpt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  // optional uint64 applyer = 3;
  if (has_applyer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->applyer(), output);
  }

  // optional int32 marry_id = 4;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->marry_id(), output);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyMarryCmpt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  // optional uint64 applyer = 3;
  if (has_applyer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->applyer(), target);
  }

  // optional int32 marry_id = 4;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->marry_id(), target);
  }

  // optional uint64 cid = 5;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyMarryCmpt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional uint64 applyer = 3;
    if (has_applyer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applyer());
    }

    // optional int32 marry_id = 4;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional uint64 cid = 5;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyMarryCmpt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyMarryCmpt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyMarryCmpt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyMarryCmpt::MergeFrom(const C2LNotifyMarryCmpt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      mutable_dst()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.dst());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
    if (from.has_applyer()) {
      set_applyer(from.applyer());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyMarryCmpt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyMarryCmpt::CopyFrom(const C2LNotifyMarryCmpt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyMarryCmpt::IsInitialized() const {

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void C2LNotifyMarryCmpt::Swap(C2LNotifyMarryCmpt* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(gear_, other->gear_);
    std::swap(applyer_, other->applyer_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyMarryCmpt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyMarryCmpt_descriptor_;
  metadata.reflection = C2LNotifyMarryCmpt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CUpdateMarryBrief::kCidFieldNumber;
const int L2CUpdateMarryBrief::kBriefFieldNumber;
#endif  // !_MSC_VER

L2CUpdateMarryBrief::L2CUpdateMarryBrief()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CUpdateMarryBrief::InitAsDefaultInstance() {
  brief_ = const_cast< ::proto_ff::MarryBrief*>(&::proto_ff::MarryBrief::default_instance());
}

L2CUpdateMarryBrief::L2CUpdateMarryBrief(const L2CUpdateMarryBrief& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CUpdateMarryBrief::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  brief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CUpdateMarryBrief::~L2CUpdateMarryBrief() {
  SharedDtor();
}

void L2CUpdateMarryBrief::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
  }
}

void L2CUpdateMarryBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CUpdateMarryBrief::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CUpdateMarryBrief_descriptor_;
}

const L2CUpdateMarryBrief& L2CUpdateMarryBrief::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

L2CUpdateMarryBrief* L2CUpdateMarryBrief::default_instance_ = NULL;

L2CUpdateMarryBrief* L2CUpdateMarryBrief::New() const {
  return new L2CUpdateMarryBrief;
}

void L2CUpdateMarryBrief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_brief()) {
      if (brief_ != NULL) brief_->::proto_ff::MarryBrief::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CUpdateMarryBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brief;
        break;
      }

      // optional .proto_ff.MarryBrief brief = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CUpdateMarryBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.MarryBrief brief = 2;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->brief(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CUpdateMarryBrief::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.MarryBrief brief = 2;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->brief(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CUpdateMarryBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.MarryBrief brief = 2;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CUpdateMarryBrief::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CUpdateMarryBrief* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CUpdateMarryBrief*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CUpdateMarryBrief::MergeFrom(const L2CUpdateMarryBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_brief()) {
      mutable_brief()->::proto_ff::MarryBrief::MergeFrom(from.brief());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CUpdateMarryBrief::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CUpdateMarryBrief::CopyFrom(const L2CUpdateMarryBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CUpdateMarryBrief::IsInitialized() const {

  return true;
}

void L2CUpdateMarryBrief::Swap(L2CUpdateMarryBrief* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(brief_, other->brief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CUpdateMarryBrief::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CUpdateMarryBrief_descriptor_;
  metadata.reflection = L2CUpdateMarryBrief_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyDivorce::kCidFieldNumber;
#endif  // !_MSC_VER

C2LNotifyDivorce::C2LNotifyDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyDivorce::InitAsDefaultInstance() {
}

C2LNotifyDivorce::C2LNotifyDivorce(const C2LNotifyDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyDivorce::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyDivorce::~C2LNotifyDivorce() {
  SharedDtor();
}

void C2LNotifyDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LNotifyDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyDivorce_descriptor_;
}

const C2LNotifyDivorce& C2LNotifyDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyDivorce* C2LNotifyDivorce::default_instance_ = NULL;

C2LNotifyDivorce* C2LNotifyDivorce::New() const {
  return new C2LNotifyDivorce;
}

void C2LNotifyDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyDivorce::MergeFrom(const C2LNotifyDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyDivorce::CopyFrom(const C2LNotifyDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyDivorce::IsInitialized() const {

  return true;
}

void C2LNotifyDivorce::Swap(C2LNotifyDivorce* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyDivorce_descriptor_;
  metadata.reflection = C2LNotifyDivorce_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LExpressReq::kCidFieldNumber;
const int C2LExpressReq::kNameFieldNumber;
const int C2LExpressReq::kReqFieldNumber;
#endif  // !_MSC_VER

C2LExpressReq::C2LExpressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LExpressReq::InitAsDefaultInstance() {
  req_ = const_cast< ::proto_ff::ExpressReq*>(&::proto_ff::ExpressReq::default_instance());
}

C2LExpressReq::C2LExpressReq(const C2LExpressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LExpressReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LExpressReq::~C2LExpressReq() {
  SharedDtor();
}

void C2LExpressReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete req_;
  }
}

void C2LExpressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LExpressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LExpressReq_descriptor_;
}

const C2LExpressReq& C2LExpressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LExpressReq* C2LExpressReq::default_instance_ = NULL;

C2LExpressReq* C2LExpressReq::New() const {
  return new C2LExpressReq;
}

void C2LExpressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_req()) {
      if (req_ != NULL) req_->::proto_ff::ExpressReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LExpressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_req;
        break;
      }

      // optional .proto_ff.ExpressReq req = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LExpressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional .proto_ff.ExpressReq req = 3;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LExpressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional .proto_ff.ExpressReq req = 3;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LExpressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .proto_ff.ExpressReq req = 3;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LExpressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LExpressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LExpressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LExpressReq::MergeFrom(const C2LExpressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_req()) {
      mutable_req()->::proto_ff::ExpressReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LExpressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LExpressReq::CopyFrom(const C2LExpressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LExpressReq::IsInitialized() const {

  return true;
}

void C2LExpressReq::Swap(C2LExpressReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LExpressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LExpressReq_descriptor_;
  metadata.reflection = C2LExpressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CNotifyExpressSuccess::kCidFieldNumber;
const int L2CNotifyExpressSuccess::kReqFieldNumber;
#endif  // !_MSC_VER

L2CNotifyExpressSuccess::L2CNotifyExpressSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CNotifyExpressSuccess::InitAsDefaultInstance() {
  req_ = const_cast< ::proto_ff::ExpressReq*>(&::proto_ff::ExpressReq::default_instance());
}

L2CNotifyExpressSuccess::L2CNotifyExpressSuccess(const L2CNotifyExpressSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CNotifyExpressSuccess::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CNotifyExpressSuccess::~L2CNotifyExpressSuccess() {
  SharedDtor();
}

void L2CNotifyExpressSuccess::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void L2CNotifyExpressSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CNotifyExpressSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CNotifyExpressSuccess_descriptor_;
}

const L2CNotifyExpressSuccess& L2CNotifyExpressSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

L2CNotifyExpressSuccess* L2CNotifyExpressSuccess::default_instance_ = NULL;

L2CNotifyExpressSuccess* L2CNotifyExpressSuccess::New() const {
  return new L2CNotifyExpressSuccess;
}

void L2CNotifyExpressSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_req()) {
      if (req_ != NULL) req_->::proto_ff::ExpressReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CNotifyExpressSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // optional .proto_ff.ExpressReq req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CNotifyExpressSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.ExpressReq req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CNotifyExpressSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.ExpressReq req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CNotifyExpressSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.ExpressReq req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CNotifyExpressSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CNotifyExpressSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CNotifyExpressSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CNotifyExpressSuccess::MergeFrom(const L2CNotifyExpressSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_req()) {
      mutable_req()->::proto_ff::ExpressReq::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CNotifyExpressSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CNotifyExpressSuccess::CopyFrom(const L2CNotifyExpressSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CNotifyExpressSuccess::IsInitialized() const {

  return true;
}

void L2CNotifyExpressSuccess::Swap(L2CNotifyExpressSuccess* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CNotifyExpressSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CNotifyExpressSuccess_descriptor_;
  metadata.reflection = L2CNotifyExpressSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyExpressToDst::kCidFieldNumber;
const int C2LNotifyExpressToDst::kReqFieldNumber;
#endif  // !_MSC_VER

C2LNotifyExpressToDst::C2LNotifyExpressToDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyExpressToDst::InitAsDefaultInstance() {
  req_ = const_cast< ::proto_ff::NotifyExpressToDst*>(&::proto_ff::NotifyExpressToDst::default_instance());
}

C2LNotifyExpressToDst::C2LNotifyExpressToDst(const C2LNotifyExpressToDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyExpressToDst::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  req_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyExpressToDst::~C2LNotifyExpressToDst() {
  SharedDtor();
}

void C2LNotifyExpressToDst::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
  }
}

void C2LNotifyExpressToDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyExpressToDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyExpressToDst_descriptor_;
}

const C2LNotifyExpressToDst& C2LNotifyExpressToDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyExpressToDst* C2LNotifyExpressToDst::default_instance_ = NULL;

C2LNotifyExpressToDst* C2LNotifyExpressToDst::New() const {
  return new C2LNotifyExpressToDst;
}

void C2LNotifyExpressToDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_req()) {
      if (req_ != NULL) req_->::proto_ff::NotifyExpressToDst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyExpressToDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // optional .proto_ff.NotifyExpressToDst req = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyExpressToDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional .proto_ff.NotifyExpressToDst req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyExpressToDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional .proto_ff.NotifyExpressToDst req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyExpressToDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.NotifyExpressToDst req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyExpressToDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyExpressToDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyExpressToDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyExpressToDst::MergeFrom(const C2LNotifyExpressToDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_req()) {
      mutable_req()->::proto_ff::NotifyExpressToDst::MergeFrom(from.req());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyExpressToDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyExpressToDst::CopyFrom(const C2LNotifyExpressToDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyExpressToDst::IsInitialized() const {

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  return true;
}

void C2LNotifyExpressToDst::Swap(C2LNotifyExpressToDst* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(req_, other->req_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyExpressToDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyExpressToDst_descriptor_;
  metadata.reflection = C2LNotifyExpressToDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyMarryDst::kTypeFieldNumber;
const int C2LNotifyMarryDst::kCidFieldNumber;
const int C2LNotifyMarryDst::kMyDstRecvDayFieldNumber;
const int C2LNotifyMarryDst::kDstGiveDupNumFieldNumber;
const int C2LNotifyMarryDst::kMarryIdFieldNumber;
const int C2LNotifyMarryDst::kBriefFieldNumber;
const int C2LNotifyMarryDst::kDstNameFieldNumber;
const int C2LNotifyMarryDst::kGearFieldNumber;
#endif  // !_MSC_VER

C2LNotifyMarryDst::C2LNotifyMarryDst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyMarryDst::InitAsDefaultInstance() {
  brief_ = const_cast< ::proto_ff::MarryBrief*>(&::proto_ff::MarryBrief::default_instance());
}

C2LNotifyMarryDst::C2LNotifyMarryDst(const C2LNotifyMarryDst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyMarryDst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  my_dst_recv_day_ = 0;
  dst_give_dup_num_ = 0;
  marry_id_ = 0;
  brief_ = NULL;
  dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyMarryDst::~C2LNotifyMarryDst() {
  SharedDtor();
}

void C2LNotifyMarryDst::SharedDtor() {
  if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_name_;
  }
  if (this != default_instance_) {
    delete brief_;
  }
}

void C2LNotifyMarryDst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyMarryDst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyMarryDst_descriptor_;
}

const C2LNotifyMarryDst& C2LNotifyMarryDst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyMarryDst* C2LNotifyMarryDst::default_instance_ = NULL;

C2LNotifyMarryDst* C2LNotifyMarryDst::New() const {
  return new C2LNotifyMarryDst;
}

void C2LNotifyMarryDst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    my_dst_recv_day_ = 0;
    dst_give_dup_num_ = 0;
    marry_id_ = 0;
    if (has_brief()) {
      if (brief_ != NULL) brief_->::proto_ff::MarryBrief::Clear();
    }
    if (has_dst_name()) {
      if (dst_name_ != &::google::protobuf::internal::kEmptyString) {
        dst_name_->clear();
      }
    }
  }
  gear_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyMarryDst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_my_dst_recv_day;
        break;
      }

      // optional int32 my_dst_recv_day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_my_dst_recv_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &my_dst_recv_day_)));
          set_has_my_dst_recv_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_give_dup_num;
        break;
      }

      // optional int32 dst_give_dup_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_give_dup_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_give_dup_num_)));
          set_has_dst_give_dup_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_marry_id;
        break;
      }

      // optional int32 marry_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_brief;
        break;
      }

      // optional .proto_ff.MarryBrief brief = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dst_name;
        break;
      }

      // optional bytes dst_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gear;
        break;
      }

      // repeated int32 gear = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_gear())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gear())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gear;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyMarryDst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 my_dst_recv_day = 3;
  if (has_my_dst_recv_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->my_dst_recv_day(), output);
  }

  // optional int32 dst_give_dup_num = 4;
  if (has_dst_give_dup_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_give_dup_num(), output);
  }

  // optional int32 marry_id = 5;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->marry_id(), output);
  }

  // optional .proto_ff.MarryBrief brief = 6;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->brief(), output);
  }

  // optional bytes dst_name = 7;
  if (has_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dst_name(), output);
  }

  // repeated int32 gear = 8;
  for (int i = 0; i < this->gear_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->gear(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyMarryDst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 my_dst_recv_day = 3;
  if (has_my_dst_recv_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->my_dst_recv_day(), target);
  }

  // optional int32 dst_give_dup_num = 4;
  if (has_dst_give_dup_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_give_dup_num(), target);
  }

  // optional int32 marry_id = 5;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->marry_id(), target);
  }

  // optional .proto_ff.MarryBrief brief = 6;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->brief(), target);
  }

  // optional bytes dst_name = 7;
  if (has_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dst_name(), target);
  }

  // repeated int32 gear = 8;
  for (int i = 0; i < this->gear_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->gear(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyMarryDst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 my_dst_recv_day = 3;
    if (has_my_dst_recv_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->my_dst_recv_day());
    }

    // optional int32 dst_give_dup_num = 4;
    if (has_dst_give_dup_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_give_dup_num());
    }

    // optional int32 marry_id = 5;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marry_id());
    }

    // optional .proto_ff.MarryBrief brief = 6;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // optional bytes dst_name = 7;
    if (has_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_name());
    }

  }
  // repeated int32 gear = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->gear_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gear(i));
    }
    total_size += 1 * this->gear_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyMarryDst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyMarryDst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyMarryDst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyMarryDst::MergeFrom(const C2LNotifyMarryDst& from) {
  GOOGLE_CHECK_NE(&from, this);
  gear_.MergeFrom(from.gear_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_my_dst_recv_day()) {
      set_my_dst_recv_day(from.my_dst_recv_day());
    }
    if (from.has_dst_give_dup_num()) {
      set_dst_give_dup_num(from.dst_give_dup_num());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_brief()) {
      mutable_brief()->::proto_ff::MarryBrief::MergeFrom(from.brief());
    }
    if (from.has_dst_name()) {
      set_dst_name(from.dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyMarryDst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyMarryDst::CopyFrom(const C2LNotifyMarryDst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyMarryDst::IsInitialized() const {

  return true;
}

void C2LNotifyMarryDst::Swap(C2LNotifyMarryDst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(my_dst_recv_day_, other->my_dst_recv_day_);
    std::swap(dst_give_dup_num_, other->dst_give_dup_num_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(brief_, other->brief_);
    std::swap(dst_name_, other->dst_name_);
    gear_.Swap(&other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyMarryDst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyMarryDst_descriptor_;
  metadata.reflection = C2LNotifyMarryDst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LGlobalExpressReq::kCidFieldNumber;
#endif  // !_MSC_VER

C2LGlobalExpressReq::C2LGlobalExpressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LGlobalExpressReq::InitAsDefaultInstance() {
}

C2LGlobalExpressReq::C2LGlobalExpressReq(const C2LGlobalExpressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LGlobalExpressReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LGlobalExpressReq::~C2LGlobalExpressReq() {
  SharedDtor();
}

void C2LGlobalExpressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LGlobalExpressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LGlobalExpressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LGlobalExpressReq_descriptor_;
}

const C2LGlobalExpressReq& C2LGlobalExpressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LGlobalExpressReq* C2LGlobalExpressReq::default_instance_ = NULL;

C2LGlobalExpressReq* C2LGlobalExpressReq::New() const {
  return new C2LGlobalExpressReq;
}

void C2LGlobalExpressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LGlobalExpressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LGlobalExpressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LGlobalExpressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LGlobalExpressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LGlobalExpressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LGlobalExpressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LGlobalExpressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LGlobalExpressReq::MergeFrom(const C2LGlobalExpressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LGlobalExpressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LGlobalExpressReq::CopyFrom(const C2LGlobalExpressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LGlobalExpressReq::IsInitialized() const {

  return true;
}

void C2LGlobalExpressReq::Swap(C2LGlobalExpressReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LGlobalExpressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LGlobalExpressReq_descriptor_;
  metadata.reflection = C2LGlobalExpressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyMarryBuySuccess::kCidFieldNumber;
const int C2LNotifyMarryBuySuccess::kRetFieldNumber;
const int C2LNotifyMarryBuySuccess::kTypeFieldNumber;
#endif  // !_MSC_VER

C2LNotifyMarryBuySuccess::C2LNotifyMarryBuySuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyMarryBuySuccess::InitAsDefaultInstance() {
}

C2LNotifyMarryBuySuccess::C2LNotifyMarryBuySuccess(const C2LNotifyMarryBuySuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyMarryBuySuccess::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyMarryBuySuccess::~C2LNotifyMarryBuySuccess() {
  SharedDtor();
}

void C2LNotifyMarryBuySuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LNotifyMarryBuySuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyMarryBuySuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyMarryBuySuccess_descriptor_;
}

const C2LNotifyMarryBuySuccess& C2LNotifyMarryBuySuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyMarryBuySuccess* C2LNotifyMarryBuySuccess::default_instance_ = NULL;

C2LNotifyMarryBuySuccess* C2LNotifyMarryBuySuccess::New() const {
  return new C2LNotifyMarryBuySuccess;
}

void C2LNotifyMarryBuySuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyMarryBuySuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyMarryBuySuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyMarryBuySuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyMarryBuySuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyMarryBuySuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyMarryBuySuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyMarryBuySuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyMarryBuySuccess::MergeFrom(const C2LNotifyMarryBuySuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyMarryBuySuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyMarryBuySuccess::CopyFrom(const C2LNotifyMarryBuySuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyMarryBuySuccess::IsInitialized() const {

  return true;
}

void C2LNotifyMarryBuySuccess::Swap(C2LNotifyMarryBuySuccess* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyMarryBuySuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyMarryBuySuccess_descriptor_;
  metadata.reflection = C2LNotifyMarryBuySuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LMarryRecvDstCard::kCidFieldNumber;
const int C2LMarryRecvDstCard::kDaysFieldNumber;
#endif  // !_MSC_VER

C2LMarryRecvDstCard::C2LMarryRecvDstCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LMarryRecvDstCard::InitAsDefaultInstance() {
}

C2LMarryRecvDstCard::C2LMarryRecvDstCard(const C2LMarryRecvDstCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LMarryRecvDstCard::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  days_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LMarryRecvDstCard::~C2LMarryRecvDstCard() {
  SharedDtor();
}

void C2LMarryRecvDstCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LMarryRecvDstCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LMarryRecvDstCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LMarryRecvDstCard_descriptor_;
}

const C2LMarryRecvDstCard& C2LMarryRecvDstCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LMarryRecvDstCard* C2LMarryRecvDstCard::default_instance_ = NULL;

C2LMarryRecvDstCard* C2LMarryRecvDstCard::New() const {
  return new C2LMarryRecvDstCard;
}

void C2LMarryRecvDstCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    days_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LMarryRecvDstCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_days;
        break;
      }

      // optional int32 days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LMarryRecvDstCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 days = 2;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LMarryRecvDstCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 days = 2;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LMarryRecvDstCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 days = 2;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->days());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LMarryRecvDstCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LMarryRecvDstCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LMarryRecvDstCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LMarryRecvDstCard::MergeFrom(const C2LMarryRecvDstCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_days()) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LMarryRecvDstCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LMarryRecvDstCard::CopyFrom(const C2LMarryRecvDstCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LMarryRecvDstCard::IsInitialized() const {

  return true;
}

void C2LMarryRecvDstCard::Swap(C2LMarryRecvDstCard* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(days_, other->days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LMarryRecvDstCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LMarryRecvDstCard_descriptor_;
  metadata.reflection = C2LMarryRecvDstCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LWeddingBuySeatReq::kCidFieldNumber;
const int C2LWeddingBuySeatReq::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

C2LWeddingBuySeatReq::C2LWeddingBuySeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LWeddingBuySeatReq::InitAsDefaultInstance() {
}

C2LWeddingBuySeatReq::C2LWeddingBuySeatReq(const C2LWeddingBuySeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LWeddingBuySeatReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LWeddingBuySeatReq::~C2LWeddingBuySeatReq() {
  SharedDtor();
}

void C2LWeddingBuySeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LWeddingBuySeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LWeddingBuySeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LWeddingBuySeatReq_descriptor_;
}

const C2LWeddingBuySeatReq& C2LWeddingBuySeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LWeddingBuySeatReq* C2LWeddingBuySeatReq::default_instance_ = NULL;

C2LWeddingBuySeatReq* C2LWeddingBuySeatReq::New() const {
  return new C2LWeddingBuySeatReq;
}

void C2LWeddingBuySeatReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LWeddingBuySeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LWeddingBuySeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LWeddingBuySeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 wedding_id = 2;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LWeddingBuySeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 wedding_id = 2;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LWeddingBuySeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LWeddingBuySeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LWeddingBuySeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LWeddingBuySeatReq::MergeFrom(const C2LWeddingBuySeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LWeddingBuySeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LWeddingBuySeatReq::CopyFrom(const C2LWeddingBuySeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LWeddingBuySeatReq::IsInitialized() const {

  return true;
}

void C2LWeddingBuySeatReq::Swap(C2LWeddingBuySeatReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LWeddingBuySeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LWeddingBuySeatReq_descriptor_;
  metadata.reflection = C2LWeddingBuySeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2CWeddingBuySeatRsp::kRetFieldNumber;
const int L2CWeddingBuySeatRsp::kCidFieldNumber;
const int L2CWeddingBuySeatRsp::kWeddingIdFieldNumber;
#endif  // !_MSC_VER

L2CWeddingBuySeatRsp::L2CWeddingBuySeatRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2CWeddingBuySeatRsp::InitAsDefaultInstance() {
}

L2CWeddingBuySeatRsp::L2CWeddingBuySeatRsp(const L2CWeddingBuySeatRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2CWeddingBuySeatRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  wedding_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2CWeddingBuySeatRsp::~L2CWeddingBuySeatRsp() {
  SharedDtor();
}

void L2CWeddingBuySeatRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2CWeddingBuySeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2CWeddingBuySeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2CWeddingBuySeatRsp_descriptor_;
}

const L2CWeddingBuySeatRsp& L2CWeddingBuySeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

L2CWeddingBuySeatRsp* L2CWeddingBuySeatRsp::default_instance_ = NULL;

L2CWeddingBuySeatRsp* L2CWeddingBuySeatRsp::New() const {
  return new L2CWeddingBuySeatRsp;
}

void L2CWeddingBuySeatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    wedding_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2CWeddingBuySeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wedding_id;
        break;
      }

      // optional int32 wedding_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedding_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2CWeddingBuySeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 wedding_id = 3;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wedding_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2CWeddingBuySeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 wedding_id = 3;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wedding_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2CWeddingBuySeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 wedding_id = 3;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedding_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2CWeddingBuySeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2CWeddingBuySeatRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2CWeddingBuySeatRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2CWeddingBuySeatRsp::MergeFrom(const L2CWeddingBuySeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2CWeddingBuySeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2CWeddingBuySeatRsp::CopyFrom(const L2CWeddingBuySeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2CWeddingBuySeatRsp::IsInitialized() const {

  return true;
}

void L2CWeddingBuySeatRsp::Swap(L2CWeddingBuySeatRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2CWeddingBuySeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2CWeddingBuySeatRsp_descriptor_;
  metadata.reflection = L2CWeddingBuySeatRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LNotifyWeddingTour::kWeddingIdFieldNumber;
const int C2LNotifyWeddingTour::kSceneIdFieldNumber;
const int C2LNotifyWeddingTour::kTourEndTimeFieldNumber;
const int C2LNotifyWeddingTour::kSrcCidFieldNumber;
const int C2LNotifyWeddingTour::kDstCidFieldNumber;
#endif  // !_MSC_VER

C2LNotifyWeddingTour::C2LNotifyWeddingTour()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LNotifyWeddingTour::InitAsDefaultInstance() {
}

C2LNotifyWeddingTour::C2LNotifyWeddingTour(const C2LNotifyWeddingTour& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LNotifyWeddingTour::SharedCtor() {
  _cached_size_ = 0;
  wedding_id_ = 0u;
  scene_id_ = GOOGLE_ULONGLONG(0);
  tour_end_time_ = GOOGLE_ULONGLONG(0);
  src_cid_ = GOOGLE_ULONGLONG(0);
  dst_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LNotifyWeddingTour::~C2LNotifyWeddingTour() {
  SharedDtor();
}

void C2LNotifyWeddingTour::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LNotifyWeddingTour::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LNotifyWeddingTour::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LNotifyWeddingTour_descriptor_;
}

const C2LNotifyWeddingTour& C2LNotifyWeddingTour::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LNotifyWeddingTour* C2LNotifyWeddingTour::default_instance_ = NULL;

C2LNotifyWeddingTour* C2LNotifyWeddingTour::New() const {
  return new C2LNotifyWeddingTour;
}

void C2LNotifyWeddingTour::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wedding_id_ = 0u;
    scene_id_ = GOOGLE_ULONGLONG(0);
    tour_end_time_ = GOOGLE_ULONGLONG(0);
    src_cid_ = GOOGLE_ULONGLONG(0);
    dst_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LNotifyWeddingTour::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 wedding_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wedding_id_)));
          set_has_wedding_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // optional uint64 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tour_end_time;
        break;
      }

      // optional uint64 tour_end_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tour_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tour_end_time_)));
          set_has_tour_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_src_cid;
        break;
      }

      // optional uint64 src_cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_cid_)));
          set_has_src_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dst_cid;
        break;
      }

      // optional uint64 dst_cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_cid_)));
          set_has_dst_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LNotifyWeddingTour::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 wedding_id = 1;
  if (has_wedding_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wedding_id(), output);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scene_id(), output);
  }

  // optional uint64 tour_end_time = 3;
  if (has_tour_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tour_end_time(), output);
  }

  // optional uint64 src_cid = 4;
  if (has_src_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->src_cid(), output);
  }

  // optional uint64 dst_cid = 5;
  if (has_dst_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->dst_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LNotifyWeddingTour::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 wedding_id = 1;
  if (has_wedding_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wedding_id(), target);
  }

  // optional uint64 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scene_id(), target);
  }

  // optional uint64 tour_end_time = 3;
  if (has_tour_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tour_end_time(), target);
  }

  // optional uint64 src_cid = 4;
  if (has_src_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->src_cid(), target);
  }

  // optional uint64 dst_cid = 5;
  if (has_dst_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->dst_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LNotifyWeddingTour::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 wedding_id = 1;
    if (has_wedding_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wedding_id());
    }

    // optional uint64 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // optional uint64 tour_end_time = 3;
    if (has_tour_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tour_end_time());
    }

    // optional uint64 src_cid = 4;
    if (has_src_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->src_cid());
    }

    // optional uint64 dst_cid = 5;
    if (has_dst_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LNotifyWeddingTour::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LNotifyWeddingTour* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LNotifyWeddingTour*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LNotifyWeddingTour::MergeFrom(const C2LNotifyWeddingTour& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedding_id()) {
      set_wedding_id(from.wedding_id());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_tour_end_time()) {
      set_tour_end_time(from.tour_end_time());
    }
    if (from.has_src_cid()) {
      set_src_cid(from.src_cid());
    }
    if (from.has_dst_cid()) {
      set_dst_cid(from.dst_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LNotifyWeddingTour::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LNotifyWeddingTour::CopyFrom(const C2LNotifyWeddingTour& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LNotifyWeddingTour::IsInitialized() const {

  return true;
}

void C2LNotifyWeddingTour::Swap(C2LNotifyWeddingTour* other) {
  if (other != this) {
    std::swap(wedding_id_, other->wedding_id_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(tour_end_time_, other->tour_end_time_);
    std::swap(src_cid_, other->src_cid_);
    std::swap(dst_cid_, other->dst_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LNotifyWeddingTour::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LNotifyWeddingTour_descriptor_;
  metadata.reflection = C2LNotifyWeddingTour_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

C2LWeddingTourOver::C2LWeddingTourOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LWeddingTourOver::InitAsDefaultInstance() {
}

C2LWeddingTourOver::C2LWeddingTourOver(const C2LWeddingTourOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LWeddingTourOver::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LWeddingTourOver::~C2LWeddingTourOver() {
  SharedDtor();
}

void C2LWeddingTourOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LWeddingTourOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LWeddingTourOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LWeddingTourOver_descriptor_;
}

const C2LWeddingTourOver& C2LWeddingTourOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_marry_2eproto();
  return *default_instance_;
}

C2LWeddingTourOver* C2LWeddingTourOver::default_instance_ = NULL;

C2LWeddingTourOver* C2LWeddingTourOver::New() const {
  return new C2LWeddingTourOver;
}

void C2LWeddingTourOver::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LWeddingTourOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void C2LWeddingTourOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LWeddingTourOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LWeddingTourOver::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LWeddingTourOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LWeddingTourOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LWeddingTourOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LWeddingTourOver::MergeFrom(const C2LWeddingTourOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LWeddingTourOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LWeddingTourOver::CopyFrom(const C2LWeddingTourOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LWeddingTourOver::IsInitialized() const {

  return true;
}

void C2LWeddingTourOver::Swap(C2LWeddingTourOver* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LWeddingTourOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LWeddingTourOver_descriptor_;
  metadata.reflection = C2LWeddingTourOver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
