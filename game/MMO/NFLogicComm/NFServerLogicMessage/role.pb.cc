// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* rolebornitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolebornitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolebornmailDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolebornmailDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolewarriorattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolewarriorattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolewarrior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolewarrior_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolewarrior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolewarrior_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemasterattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemasterattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolemaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolemaster_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleassassinattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleassassinattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleassassin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleassassin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleassassin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleassassin_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleshooterattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleshooterattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleshooter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleshooter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleshooter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleshooter_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleskillType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleskillType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleskillType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleskillType_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleaddSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleaddSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleaddSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleaddSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleworldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleworldexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleworldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleworldexp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_role_2eproto() {
  protobuf_AddDesc_role_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "role.proto");
  GOOGLE_CHECK(file != NULL);
  rolebornitemDesc_descriptor_ = file->message_type(0);
  static const int rolebornitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, name_),
  };
  rolebornitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolebornitemDesc_descriptor_,
      rolebornitemDesc::default_instance_,
      rolebornitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolebornitemDesc));
  rolebornmailDesc_descriptor_ = file->message_type(1);
  static const int rolebornmailDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, name_),
  };
  rolebornmailDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolebornmailDesc_descriptor_,
      rolebornmailDesc::default_instance_,
      rolebornmailDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolebornmailDesc));
  roleborn_descriptor_ = file->message_type(2);
  static const int roleborn_offsets_[38] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, professionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, bornlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, borntitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, birthface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, loginavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, newweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, newclothing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, weaponavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, roleavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryweapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryarmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrycloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryshoes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrynecklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryamulet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrybracer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryfashionweapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryfashionarmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrywings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, sheny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, shenw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, actbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, actskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mail_),
  };
  roleborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleborn_descriptor_,
      roleborn::default_instance_,
      roleborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleborn));
  Sheet_roleborn_descriptor_ = file->message_type(3);
  static const int Sheet_roleborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, roleborn_list_),
  };
  Sheet_roleborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleborn_descriptor_,
      Sheet_roleborn::default_instance_,
      Sheet_roleborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleborn));
  rolewarriorattributeDesc_descriptor_ = file->message_type(4);
  static const int rolewarriorattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarriorattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarriorattributeDesc, value_),
  };
  rolewarriorattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolewarriorattributeDesc_descriptor_,
      rolewarriorattributeDesc::default_instance_,
      rolewarriorattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarriorattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarriorattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolewarriorattributeDesc));
  rolewarrior_descriptor_ = file->message_type(5);
  static const int rolewarrior_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarrior, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarrior, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarrior, attribute_),
  };
  rolewarrior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolewarrior_descriptor_,
      rolewarrior::default_instance_,
      rolewarrior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarrior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolewarrior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolewarrior));
  Sheet_rolewarrior_descriptor_ = file->message_type(6);
  static const int Sheet_rolewarrior_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolewarrior, rolewarrior_list_),
  };
  Sheet_rolewarrior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolewarrior_descriptor_,
      Sheet_rolewarrior::default_instance_,
      Sheet_rolewarrior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolewarrior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolewarrior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolewarrior));
  rolemasterattributeDesc_descriptor_ = file->message_type(7);
  static const int rolemasterattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterattributeDesc, value_),
  };
  rolemasterattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemasterattributeDesc_descriptor_,
      rolemasterattributeDesc::default_instance_,
      rolemasterattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemasterattributeDesc));
  rolemaster_descriptor_ = file->message_type(8);
  static const int rolemaster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemaster, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemaster, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemaster, attribute_),
  };
  rolemaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemaster_descriptor_,
      rolemaster::default_instance_,
      rolemaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemaster));
  Sheet_rolemaster_descriptor_ = file->message_type(9);
  static const int Sheet_rolemaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemaster, rolemaster_list_),
  };
  Sheet_rolemaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolemaster_descriptor_,
      Sheet_rolemaster::default_instance_,
      Sheet_rolemaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolemaster));
  roleassassinattributeDesc_descriptor_ = file->message_type(10);
  static const int roleassassinattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassinattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassinattributeDesc, value_),
  };
  roleassassinattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleassassinattributeDesc_descriptor_,
      roleassassinattributeDesc::default_instance_,
      roleassassinattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassinattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassinattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleassassinattributeDesc));
  roleassassin_descriptor_ = file->message_type(11);
  static const int roleassassin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassin, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassin, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassin, attribute_),
  };
  roleassassin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleassassin_descriptor_,
      roleassassin::default_instance_,
      roleassassin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleassassin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleassassin));
  Sheet_roleassassin_descriptor_ = file->message_type(12);
  static const int Sheet_roleassassin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleassassin, roleassassin_list_),
  };
  Sheet_roleassassin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleassassin_descriptor_,
      Sheet_roleassassin::default_instance_,
      Sheet_roleassassin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleassassin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleassassin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleassassin));
  roleshooterattributeDesc_descriptor_ = file->message_type(13);
  static const int roleshooterattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooterattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooterattributeDesc, value_),
  };
  roleshooterattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleshooterattributeDesc_descriptor_,
      roleshooterattributeDesc::default_instance_,
      roleshooterattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooterattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooterattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleshooterattributeDesc));
  roleshooter_descriptor_ = file->message_type(14);
  static const int roleshooter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooter, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooter, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooter, attribute_),
  };
  roleshooter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleshooter_descriptor_,
      roleshooter::default_instance_,
      roleshooter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleshooter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleshooter));
  Sheet_roleshooter_descriptor_ = file->message_type(15);
  static const int Sheet_roleshooter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleshooter, roleshooter_list_),
  };
  Sheet_roleshooter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleshooter_descriptor_,
      Sheet_roleshooter::default_instance_,
      Sheet_roleshooter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleshooter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleshooter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleshooter));
  roleexp_descriptor_ = file->message_type(16);
  static const int roleexp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, skillpoint_),
  };
  roleexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleexp_descriptor_,
      roleexp::default_instance_,
      roleexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleexp));
  Sheet_roleexp_descriptor_ = file->message_type(17);
  static const int Sheet_roleexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, roleexp_list_),
  };
  Sheet_roleexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleexp_descriptor_,
      Sheet_roleexp::default_instance_,
      Sheet_roleexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleexp));
  roleskillType_descriptor_ = file->message_type(18);
  static const int roleskillType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, skilltype_),
  };
  roleskillType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleskillType_descriptor_,
      roleskillType::default_instance_,
      roleskillType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleskillType));
  Sheet_roleskillType_descriptor_ = file->message_type(19);
  static const int Sheet_roleskillType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, roleskilltype_list_),
  };
  Sheet_roleskillType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleskillType_descriptor_,
      Sheet_roleskillType::default_instance_,
      Sheet_roleskillType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleskillType));
  roleaddSkill_descriptor_ = file->message_type(20);
  static const int roleaddSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, skillid_),
  };
  roleaddSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleaddSkill_descriptor_,
      roleaddSkill::default_instance_,
      roleaddSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleaddSkill));
  Sheet_roleaddSkill_descriptor_ = file->message_type(21);
  static const int Sheet_roleaddSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, roleaddskill_list_),
  };
  Sheet_roleaddSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleaddSkill_descriptor_,
      Sheet_roleaddSkill::default_instance_,
      Sheet_roleaddSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleaddSkill));
  roleworldexp_descriptor_ = file->message_type(22);
  static const int roleworldexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, worldexp_),
  };
  roleworldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleworldexp_descriptor_,
      roleworldexp::default_instance_,
      roleworldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleworldexp));
  Sheet_roleworldexp_descriptor_ = file->message_type(23);
  static const int Sheet_roleworldexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, roleworldexp_list_),
  };
  Sheet_roleworldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleworldexp_descriptor_,
      Sheet_roleworldexp::default_instance_,
      Sheet_roleworldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleworldexp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_role_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolebornitemDesc_descriptor_, &rolebornitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolebornmailDesc_descriptor_, &rolebornmailDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleborn_descriptor_, &roleborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleborn_descriptor_, &Sheet_roleborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolewarriorattributeDesc_descriptor_, &rolewarriorattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolewarrior_descriptor_, &rolewarrior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolewarrior_descriptor_, &Sheet_rolewarrior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemasterattributeDesc_descriptor_, &rolemasterattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemaster_descriptor_, &rolemaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolemaster_descriptor_, &Sheet_rolemaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleassassinattributeDesc_descriptor_, &roleassassinattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleassassin_descriptor_, &roleassassin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleassassin_descriptor_, &Sheet_roleassassin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleshooterattributeDesc_descriptor_, &roleshooterattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleshooter_descriptor_, &roleshooter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleshooter_descriptor_, &Sheet_roleshooter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleexp_descriptor_, &roleexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleexp_descriptor_, &Sheet_roleexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleskillType_descriptor_, &roleskillType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleskillType_descriptor_, &Sheet_roleskillType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleaddSkill_descriptor_, &roleaddSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleaddSkill_descriptor_, &Sheet_roleaddSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleworldexp_descriptor_, &roleworldexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleworldexp_descriptor_, &Sheet_roleworldexp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_role_2eproto() {
  delete rolebornitemDesc::default_instance_;
  delete rolebornitemDesc_reflection_;
  delete rolebornmailDesc::default_instance_;
  delete rolebornmailDesc_reflection_;
  delete roleborn::default_instance_;
  delete roleborn_reflection_;
  delete Sheet_roleborn::default_instance_;
  delete Sheet_roleborn_reflection_;
  delete rolewarriorattributeDesc::default_instance_;
  delete rolewarriorattributeDesc_reflection_;
  delete rolewarrior::default_instance_;
  delete rolewarrior_reflection_;
  delete Sheet_rolewarrior::default_instance_;
  delete Sheet_rolewarrior_reflection_;
  delete rolemasterattributeDesc::default_instance_;
  delete rolemasterattributeDesc_reflection_;
  delete rolemaster::default_instance_;
  delete rolemaster_reflection_;
  delete Sheet_rolemaster::default_instance_;
  delete Sheet_rolemaster_reflection_;
  delete roleassassinattributeDesc::default_instance_;
  delete roleassassinattributeDesc_reflection_;
  delete roleassassin::default_instance_;
  delete roleassassin_reflection_;
  delete Sheet_roleassassin::default_instance_;
  delete Sheet_roleassassin_reflection_;
  delete roleshooterattributeDesc::default_instance_;
  delete roleshooterattributeDesc_reflection_;
  delete roleshooter::default_instance_;
  delete roleshooter_reflection_;
  delete Sheet_roleshooter::default_instance_;
  delete Sheet_roleshooter_reflection_;
  delete roleexp::default_instance_;
  delete roleexp_reflection_;
  delete Sheet_roleexp::default_instance_;
  delete Sheet_roleexp_reflection_;
  delete roleskillType::default_instance_;
  delete roleskillType_reflection_;
  delete Sheet_roleskillType::default_instance_;
  delete Sheet_roleskillType_reflection_;
  delete roleaddSkill::default_instance_;
  delete roleaddSkill_reflection_;
  delete Sheet_roleaddSkill::default_instance_;
  delete Sheet_roleaddSkill_reflection_;
  delete roleworldexp::default_instance_;
  delete roleworldexp_reflection_;
  delete Sheet_roleworldexp::default_instance_;
  delete Sheet_roleworldexp_reflection_;
}

void protobuf_AddDesc_role_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrole.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"E\n\020rolebornitemDesc\022\027\n\003num\030\001 \001(\005B\n"
    "\302\377\024\006\346\225\260\351\207\217\022\030\n\004name\030\002 \001(\003B\n\302\377\024\006\345\220\215\347\247\260\"E\n\020"
    "rolebornmailDesc\022\027\n\003num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207"
    "\217\022\030\n\004name\030\002 \001(\003B\n\302\377\024\006\345\220\215\347\247\260\"\230\014\n\010roleborn"
    "\022\034\n\006bornID\030\001 \001(\003B\014\302\377\024\010\344\270\273\351\224\256ID\022\"\n\014profes"
    "sionID\030\002 \001(\005B\014\302\377\024\010\350\201\214\344\270\232ID\022,\n\016profession"
    "Name\030\003 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\345\220\215\347\247\260\220\301\024 \022(\n\tplac"
    "ement\030\004 \001(\tB\025\302\377\024\014\350\201\214\344\270\232\344\273\213\347\273\215\220\301\024\345\001\022\032\n\006ge"
    "nder\030\005 \001(\005B\n\302\377\024\006\346\200\247\345\210\253\022#\n\tbornLevel\030\006 \001("
    "\005B\020\302\377\024\014\345\207\272\347\224\237\347\255\211\347\272\247\022#\n\tbornTitle\030\007 \001(\005B\020"
    "\302\377\024\014\346\220\272\345\270\246\347\247\260\345\217\267\022!\n\007diamond\030\010 \001(\003B\020\302\377\024\014\346"
    "\220\272\345\270\246\351\222\273\347\237\263\022+\n\013bindDiamond\030\t \001(\003B\026\302\377\024\022\346\220"
    "\272\345\270\246\347\273\221\345\256\232\351\222\273\347\237\263\022\036\n\004gold\030\n \001(\003B\020\302\377\024\014\346\220\272\345"
    "\270\246\351\207\221\345\270\201\022!\n\005mapID\030\013 \001(\003B\022\302\377\024\016\345\207\272\347\224\237\345\234\260\345\233"
    "\276ID\022#\n\tbirthFace\030\014 \001(\005B\020\302\377\024\014\345\207\272\347\224\237\346\234\235\345\220\221"
    "\022#\n\005icons\030\r \001(\tB\024\302\377\024\014\345\244\264\345\203\217\345\233\276\346\240\207\220\301\024 \022.\n"
    "\nloginAvata\030\016 \001(\tB\032\302\377\024\022\345\210\233\350\247\222\347\225\214\351\235\242\346\250\241\345\236"
    "\213\220\301\024 \0223\n\tnewweapon\030\017 \001(\tB \302\377\024\030\346\226\260\346\211\213\345\211\257\346"
    "\234\254\346\255\246\345\231\250\346\250\241\345\236\213\220\301\024 \0225\n\013newclothing\030\020 \001(\tB"
    " \302\377\024\030\346\226\260\346\211\213\345\211\257\346\234\254\350\241\243\346\234\215\346\250\241\345\236\213\220\301\024 \0222\n\013wea"
    "ponAvata\030\021 \001(\tB\035\302\377\024\025\345\207\272\347\224\237\346\227\266\346\255\246\345\231\250\346\250\241\345\236"
    "\213\220\301\024 \022*\n\troleAvata\030\022 \001(\tB\027\302\377\024\017\345\207\272\347\224\237\346\227\266\346"
    "\250\241\345\236\213\220\301\024 \022&\n\014carryWeapons\030\023 \001(\003B\020\302\377\024\014\350\243\205"
    "\345\244\207\346\255\246\345\231\250\022$\n\ncarryArmor\030\024 \001(\003B\020\302\377\024\014\350\243\205\345\244"
    "\207\350\241\243\346\234\215\022$\n\ncarryCloak\030\025 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346"
    "\212\253\351\243\216\022$\n\ncarryShoes\030\026 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\351\236\213"
    "\345\255\220\022\'\n\rcarryNecklace\030\027 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\351\241"
    "\271\351\223\276\022%\n\013carryAmulet\030\030 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\212\244"
    "\347\254\246\022%\n\013carryBracer\030\031 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\212\244\350"
    "\205\225\022#\n\tcarryRing\030\032 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\210\222\346\214\207\022"
    "9\n\023carryFashionWeapons\030\033 \001(\003B\034\302\377\024\030\350\243\205\345\244\207"
    "\346\227\266\350\243\205\357\274\210\346\255\246\345\231\250\357\274\211\0227\n\021carryFashionArmor\030"
    "\034 \001(\003B\034\302\377\024\030\350\243\205\345\244\207\346\227\266\350\243\205\357\274\210\350\241\243\346\234\215\357\274\211\022\036\n\nc"
    "arryWings\030\035 \001(\003B\n\302\377\024\006\347\277\205\350\206\200\022&\n\006mSpeed\030\036 "
    "\001(\005B\026\302\377\024\022\345\210\235\345\247\213\347\247\273\345\212\250\351\200\237\345\272\246\022\030\n\004view\030\037 \001("
    "\005B\n\302\377\024\006\350\247\206\351\207\216\022 \n\006radius\030  \001(\005B\020\302\377\024\014\344\272\272\347\211"
    "\251\345\215\212\345\276\204\022\037\n\005sheny\030! \001(\003B\020\302\377\024\014\347\245\236\350\243\205\350\241\243\346\234\215"
    "\022\037\n\005shenw\030\" \001(\003B\020\302\377\024\014\347\245\236\350\243\205\346\255\246\345\231\250\022\037\n\007act"
    "Buff\030# \003(\005B\016\302\377\024\n\347\224\237\346\210\220buff\022>\n\004item\030$ \003(\013"
    "2\032.proto_ff.rolebornitemDescB\024\302\377\024\014\350\203\214\345\214\205"
    "\347\211\251\345\223\201\210\301\024#\022\"\n\010actSkill\030% \003(\003B\020\302\377\024\014\347\224\237\346\210\220"
    "\346\212\200\350\203\275\022>\n\004mail\030& \003(\0132\032.proto_ff.roleborn"
    "mailDescB\024\302\377\024\014\351\202\256\344\273\266\347\211\251\345\223\201\210\301\024\001\"A\n\016Sheet_"
    "roleborn\022/\n\rroleborn_List\030\001 \003(\0132\022.proto_"
    "ff.rolebornB\004\210\301\024o\"L\n\030rolewarriorattribut"
    "eDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value"
    "\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\240\001\n\013rolewarrior\022\034\n\002lv\030\001 "
    "\001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 "
    "\001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022E\n\tattribute"
    "\030\003 \003(\0132\".proto_ff.rolewarriorattributeDe"
    "scB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026\"K\n\021Sheet_rolewarrior\022"
    "6\n\020rolewarrior_List\030\001 \003(\0132\025.proto_ff.rol"
    "ewarriorB\005\210\301\024\304\014\"K\n\027rolemasterattributeDe"
    "sc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002 "
    "\001(\005B\007\302\377\024\003\345\200\274\"\236\001\n\nrolemaster\022\034\n\002lv\030\001 \001(\005B"
    "\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 \001(\005B"
    "\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022D\n\tattribute\030\003 \003"
    "(\0132!.proto_ff.rolemasterattributeDescB\016\302"
    "\377\024\006\345\261\236\346\200\247\210\301\024\026\"H\n\020Sheet_rolemaster\0224\n\017rol"
    "emaster_List\030\001 \003(\0132\024.proto_ff.rolemaster"
    "B\005\210\301\024\304\014\"M\n\031roleassassinattributeDesc\022\030\n\004"
    "Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002 \001(\005B\007\302"
    "\377\024\003\345\200\274\"\242\001\n\014roleassassin\022\034\n\002lv\030\001 \001(\005B\020\302\377\024"
    "\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 \001(\005B\026\302\377\024"
    "\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022F\n\tattribute\030\003 \003(\0132#"
    ".proto_ff.roleassassinattributeDescB\016\302\377\024"
    "\006\345\261\236\346\200\247\210\301\024\026\"N\n\022Sheet_roleassassin\0228\n\021rol"
    "eassassin_List\030\001 \003(\0132\026.proto_ff.roleassa"
    "ssinB\005\210\301\024\304\014\"L\n\030roleshooterattributeDesc\022"
    "\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002 \001(\005"
    "B\007\302\377\024\003\345\200\274\"\240\001\n\013roleshooter\022\034\n\002lv\030\001 \001(\005B\020\302"
    "\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 \001(\005B\026\302"
    "\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022E\n\tattribute\030\003 \003(\013"
    "2\".proto_ff.roleshooterattributeDescB\016\302\377"
    "\024\006\345\261\236\346\200\247\210\301\024\026\"K\n\021Sheet_roleshooter\0226\n\020rol"
    "eshooter_List\030\001 \003(\0132\025.proto_ff.roleshoot"
    "erB\005\210\301\024\304\014\"u\n\007roleexp\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255"
    "\211\347\272\247\022/\n\003exp\030\002 \001(\003B\"\302\377\024\036\345\275\223\345\211\215\347\255\211\347\272\247\345\215\207\347\272"
    "\247\351\234\200\350\246\201\347\273\217\351\252\214\022!\n\nskillPoint\030\003 \001(\005B\r\302\377\024\t\345"
    "\244\251\350\265\213\347\202\271\"\?\n\rSheet_roleexp\022.\n\014roleexp_Lis"
    "t\030\001 \003(\0132\021.proto_ff.roleexpB\005\210\301\024\304\014\"S\n\rrol"
    "eskillType\022\035\n\007skillId\030\001 \001(\003B\014\302\377\024\010\346\212\200\350\203\275I"
    "D\022#\n\tskillType\030\002 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\"Q"
    "\n\023Sheet_roleskillType\022:\n\022roleskillType_L"
    "ist\030\001 \003(\0132\027.proto_ff.roleskillTypeB\005\210\301\024\315"
    "\001\"E\n\014roleaddSkill\022\022\n\002Id\030\001 \001(\005B\006\302\377\024\002ID\022!\n"
    "\007skillId\030\002 \001(\003B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\"M\n\022Shee"
    "t_roleaddSkill\0227\n\021roleaddSkill_List\030\001 \003("
    "\0132\026.proto_ff.roleaddSkillB\004\210\301\024i\"M\n\014rolew"
    "orldexp\022\031\n\002lv\030\001 \001(\003B\r\302\377\024\t\347\255\211\347\272\247\345\267\256\022\"\n\010wo"
    "rldExp\030\002 \001(\005B\020\302\377\024\014\347\273\217\351\252\214\345\212\240\346\210\220\"N\n\022Sheet_"
    "roleworldexp\0228\n\021roleworldexp_List\030\001 \003(\0132"
    "\026.proto_ff.roleworldexpB\005\210\301\024\334\004", 3750);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "role.proto", &protobuf_RegisterTypes);
  rolebornitemDesc::default_instance_ = new rolebornitemDesc();
  rolebornmailDesc::default_instance_ = new rolebornmailDesc();
  roleborn::default_instance_ = new roleborn();
  Sheet_roleborn::default_instance_ = new Sheet_roleborn();
  rolewarriorattributeDesc::default_instance_ = new rolewarriorattributeDesc();
  rolewarrior::default_instance_ = new rolewarrior();
  Sheet_rolewarrior::default_instance_ = new Sheet_rolewarrior();
  rolemasterattributeDesc::default_instance_ = new rolemasterattributeDesc();
  rolemaster::default_instance_ = new rolemaster();
  Sheet_rolemaster::default_instance_ = new Sheet_rolemaster();
  roleassassinattributeDesc::default_instance_ = new roleassassinattributeDesc();
  roleassassin::default_instance_ = new roleassassin();
  Sheet_roleassassin::default_instance_ = new Sheet_roleassassin();
  roleshooterattributeDesc::default_instance_ = new roleshooterattributeDesc();
  roleshooter::default_instance_ = new roleshooter();
  Sheet_roleshooter::default_instance_ = new Sheet_roleshooter();
  roleexp::default_instance_ = new roleexp();
  Sheet_roleexp::default_instance_ = new Sheet_roleexp();
  roleskillType::default_instance_ = new roleskillType();
  Sheet_roleskillType::default_instance_ = new Sheet_roleskillType();
  roleaddSkill::default_instance_ = new roleaddSkill();
  Sheet_roleaddSkill::default_instance_ = new Sheet_roleaddSkill();
  roleworldexp::default_instance_ = new roleworldexp();
  Sheet_roleworldexp::default_instance_ = new Sheet_roleworldexp();
  rolebornitemDesc::default_instance_->InitAsDefaultInstance();
  rolebornmailDesc::default_instance_->InitAsDefaultInstance();
  roleborn::default_instance_->InitAsDefaultInstance();
  Sheet_roleborn::default_instance_->InitAsDefaultInstance();
  rolewarriorattributeDesc::default_instance_->InitAsDefaultInstance();
  rolewarrior::default_instance_->InitAsDefaultInstance();
  Sheet_rolewarrior::default_instance_->InitAsDefaultInstance();
  rolemasterattributeDesc::default_instance_->InitAsDefaultInstance();
  rolemaster::default_instance_->InitAsDefaultInstance();
  Sheet_rolemaster::default_instance_->InitAsDefaultInstance();
  roleassassinattributeDesc::default_instance_->InitAsDefaultInstance();
  roleassassin::default_instance_->InitAsDefaultInstance();
  Sheet_roleassassin::default_instance_->InitAsDefaultInstance();
  roleshooterattributeDesc::default_instance_->InitAsDefaultInstance();
  roleshooter::default_instance_->InitAsDefaultInstance();
  Sheet_roleshooter::default_instance_->InitAsDefaultInstance();
  roleexp::default_instance_->InitAsDefaultInstance();
  Sheet_roleexp::default_instance_->InitAsDefaultInstance();
  roleskillType::default_instance_->InitAsDefaultInstance();
  Sheet_roleskillType::default_instance_->InitAsDefaultInstance();
  roleaddSkill::default_instance_->InitAsDefaultInstance();
  Sheet_roleaddSkill::default_instance_->InitAsDefaultInstance();
  roleworldexp::default_instance_->InitAsDefaultInstance();
  Sheet_roleworldexp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_2eproto {
  StaticDescriptorInitializer_role_2eproto() {
    protobuf_AddDesc_role_2eproto();
  }
} static_descriptor_initializer_role_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rolebornitemDesc::kNumFieldNumber;
const int rolebornitemDesc::kNameFieldNumber;
#endif  // !_MSC_VER

rolebornitemDesc::rolebornitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolebornitemDesc::InitAsDefaultInstance() {
}

rolebornitemDesc::rolebornitemDesc(const rolebornitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolebornitemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  name_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolebornitemDesc::~rolebornitemDesc() {
  SharedDtor();
}

void rolebornitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolebornitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolebornitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolebornitemDesc_descriptor_;
}

const rolebornitemDesc& rolebornitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolebornitemDesc* rolebornitemDesc::default_instance_ = NULL;

rolebornitemDesc* rolebornitemDesc::New() const {
  return new rolebornitemDesc;
}

void rolebornitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    name_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolebornitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolebornitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolebornitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolebornitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolebornitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolebornitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolebornitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolebornitemDesc::MergeFrom(const rolebornitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolebornitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolebornitemDesc::CopyFrom(const rolebornitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolebornitemDesc::IsInitialized() const {

  return true;
}

void rolebornitemDesc::Swap(rolebornitemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolebornitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolebornitemDesc_descriptor_;
  metadata.reflection = rolebornitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolebornmailDesc::kNumFieldNumber;
const int rolebornmailDesc::kNameFieldNumber;
#endif  // !_MSC_VER

rolebornmailDesc::rolebornmailDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolebornmailDesc::InitAsDefaultInstance() {
}

rolebornmailDesc::rolebornmailDesc(const rolebornmailDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolebornmailDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  name_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolebornmailDesc::~rolebornmailDesc() {
  SharedDtor();
}

void rolebornmailDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolebornmailDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolebornmailDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolebornmailDesc_descriptor_;
}

const rolebornmailDesc& rolebornmailDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolebornmailDesc* rolebornmailDesc::default_instance_ = NULL;

rolebornmailDesc* rolebornmailDesc::New() const {
  return new rolebornmailDesc;
}

void rolebornmailDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    name_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolebornmailDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolebornmailDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolebornmailDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolebornmailDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolebornmailDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolebornmailDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolebornmailDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolebornmailDesc::MergeFrom(const rolebornmailDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolebornmailDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolebornmailDesc::CopyFrom(const rolebornmailDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolebornmailDesc::IsInitialized() const {

  return true;
}

void rolebornmailDesc::Swap(rolebornmailDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolebornmailDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolebornmailDesc_descriptor_;
  metadata.reflection = rolebornmailDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleborn::kBornIDFieldNumber;
const int roleborn::kProfessionIDFieldNumber;
const int roleborn::kProfessionNameFieldNumber;
const int roleborn::kPlacementFieldNumber;
const int roleborn::kGenderFieldNumber;
const int roleborn::kBornLevelFieldNumber;
const int roleborn::kBornTitleFieldNumber;
const int roleborn::kDiamondFieldNumber;
const int roleborn::kBindDiamondFieldNumber;
const int roleborn::kGoldFieldNumber;
const int roleborn::kMapIDFieldNumber;
const int roleborn::kBirthFaceFieldNumber;
const int roleborn::kIconsFieldNumber;
const int roleborn::kLoginAvataFieldNumber;
const int roleborn::kNewweaponFieldNumber;
const int roleborn::kNewclothingFieldNumber;
const int roleborn::kWeaponAvataFieldNumber;
const int roleborn::kRoleAvataFieldNumber;
const int roleborn::kCarryWeaponsFieldNumber;
const int roleborn::kCarryArmorFieldNumber;
const int roleborn::kCarryCloakFieldNumber;
const int roleborn::kCarryShoesFieldNumber;
const int roleborn::kCarryNecklaceFieldNumber;
const int roleborn::kCarryAmuletFieldNumber;
const int roleborn::kCarryBracerFieldNumber;
const int roleborn::kCarryRingFieldNumber;
const int roleborn::kCarryFashionWeaponsFieldNumber;
const int roleborn::kCarryFashionArmorFieldNumber;
const int roleborn::kCarryWingsFieldNumber;
const int roleborn::kMSpeedFieldNumber;
const int roleborn::kViewFieldNumber;
const int roleborn::kRadiusFieldNumber;
const int roleborn::kShenyFieldNumber;
const int roleborn::kShenwFieldNumber;
const int roleborn::kActBuffFieldNumber;
const int roleborn::kItemFieldNumber;
const int roleborn::kActSkillFieldNumber;
const int roleborn::kMailFieldNumber;
#endif  // !_MSC_VER

roleborn::roleborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleborn::InitAsDefaultInstance() {
}

roleborn::roleborn(const roleborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleborn::SharedCtor() {
  _cached_size_ = 0;
  bornid_ = GOOGLE_LONGLONG(0);
  professionid_ = 0;
  professionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  placement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  bornlevel_ = 0;
  borntitle_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  binddiamond_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  birthface_ = 0;
  icons_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newweapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newclothing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaponavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carryweapons_ = GOOGLE_LONGLONG(0);
  carryarmor_ = GOOGLE_LONGLONG(0);
  carrycloak_ = GOOGLE_LONGLONG(0);
  carryshoes_ = GOOGLE_LONGLONG(0);
  carrynecklace_ = GOOGLE_LONGLONG(0);
  carryamulet_ = GOOGLE_LONGLONG(0);
  carrybracer_ = GOOGLE_LONGLONG(0);
  carryring_ = GOOGLE_LONGLONG(0);
  carryfashionweapons_ = GOOGLE_LONGLONG(0);
  carryfashionarmor_ = GOOGLE_LONGLONG(0);
  carrywings_ = GOOGLE_LONGLONG(0);
  mspeed_ = 0;
  view_ = 0;
  radius_ = 0;
  sheny_ = GOOGLE_LONGLONG(0);
  shenw_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleborn::~roleborn() {
  SharedDtor();
}

void roleborn::SharedDtor() {
  if (professionname_ != &::google::protobuf::internal::kEmptyString) {
    delete professionname_;
  }
  if (placement_ != &::google::protobuf::internal::kEmptyString) {
    delete placement_;
  }
  if (icons_ != &::google::protobuf::internal::kEmptyString) {
    delete icons_;
  }
  if (loginavata_ != &::google::protobuf::internal::kEmptyString) {
    delete loginavata_;
  }
  if (newweapon_ != &::google::protobuf::internal::kEmptyString) {
    delete newweapon_;
  }
  if (newclothing_ != &::google::protobuf::internal::kEmptyString) {
    delete newclothing_;
  }
  if (weaponavata_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponavata_;
  }
  if (roleavata_ != &::google::protobuf::internal::kEmptyString) {
    delete roleavata_;
  }
  if (this != default_instance_) {
  }
}

void roleborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleborn_descriptor_;
}

const roleborn& roleborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleborn* roleborn::default_instance_ = NULL;

roleborn* roleborn::New() const {
  return new roleborn;
}

void roleborn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bornid_ = GOOGLE_LONGLONG(0);
    professionid_ = 0;
    if (has_professionname()) {
      if (professionname_ != &::google::protobuf::internal::kEmptyString) {
        professionname_->clear();
      }
    }
    if (has_placement()) {
      if (placement_ != &::google::protobuf::internal::kEmptyString) {
        placement_->clear();
      }
    }
    gender_ = 0;
    bornlevel_ = 0;
    borntitle_ = 0;
    diamond_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    binddiamond_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    birthface_ = 0;
    if (has_icons()) {
      if (icons_ != &::google::protobuf::internal::kEmptyString) {
        icons_->clear();
      }
    }
    if (has_loginavata()) {
      if (loginavata_ != &::google::protobuf::internal::kEmptyString) {
        loginavata_->clear();
      }
    }
    if (has_newweapon()) {
      if (newweapon_ != &::google::protobuf::internal::kEmptyString) {
        newweapon_->clear();
      }
    }
    if (has_newclothing()) {
      if (newclothing_ != &::google::protobuf::internal::kEmptyString) {
        newclothing_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_weaponavata()) {
      if (weaponavata_ != &::google::protobuf::internal::kEmptyString) {
        weaponavata_->clear();
      }
    }
    if (has_roleavata()) {
      if (roleavata_ != &::google::protobuf::internal::kEmptyString) {
        roleavata_->clear();
      }
    }
    carryweapons_ = GOOGLE_LONGLONG(0);
    carryarmor_ = GOOGLE_LONGLONG(0);
    carrycloak_ = GOOGLE_LONGLONG(0);
    carryshoes_ = GOOGLE_LONGLONG(0);
    carrynecklace_ = GOOGLE_LONGLONG(0);
    carryamulet_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    carrybracer_ = GOOGLE_LONGLONG(0);
    carryring_ = GOOGLE_LONGLONG(0);
    carryfashionweapons_ = GOOGLE_LONGLONG(0);
    carryfashionarmor_ = GOOGLE_LONGLONG(0);
    carrywings_ = GOOGLE_LONGLONG(0);
    mspeed_ = 0;
    view_ = 0;
    radius_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    sheny_ = GOOGLE_LONGLONG(0);
    shenw_ = GOOGLE_LONGLONG(0);
  }
  actbuff_.Clear();
  item_.Clear();
  actskill_.Clear();
  mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bornID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_professionID;
        break;
      }

      // optional int32 professionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_professionName;
        break;
      }

      // optional string professionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionname().data(), this->professionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_placement;
        break;
      }

      // optional string placement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placement().data(), this->placement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional int32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bornLevel;
        break;
      }

      // optional int32 bornLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornlevel_)));
          set_has_bornlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bornTitle;
        break;
      }

      // optional int32 bornTitle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borntitle_)));
          set_has_borntitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bindDiamond;
        break;
      }

      // optional int64 bindDiamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional int64 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mapID;
        break;
      }

      // optional int64 mapID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_birthFace;
        break;
      }

      // optional int32 birthFace = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birthface_)));
          set_has_birthface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_icons;
        break;
      }

      // optional string icons = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icons().data(), this->icons().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_loginAvata;
        break;
      }

      // optional string loginAvata = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginavata().data(), this->loginavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_newweapon;
        break;
      }

      // optional string newweapon = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newweapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newweapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newweapon().data(), this->newweapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_newclothing;
        break;
      }

      // optional string newclothing = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newclothing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newclothing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newclothing().data(), this->newclothing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_weaponAvata;
        break;
      }

      // optional string weaponAvata = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaponAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaponavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weaponavata().data(), this->weaponavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_roleAvata;
        break;
      }

      // optional string roleAvata = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleavata().data(), this->roleavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_carryWeapons;
        break;
      }

      // optional int64 carryWeapons = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryWeapons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryweapons_)));
          set_has_carryweapons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_carryArmor;
        break;
      }

      // optional int64 carryArmor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryarmor_)));
          set_has_carryarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_carryCloak;
        break;
      }

      // optional int64 carryCloak = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryCloak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrycloak_)));
          set_has_carrycloak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_carryShoes;
        break;
      }

      // optional int64 carryShoes = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryShoes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryshoes_)));
          set_has_carryshoes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_carryNecklace;
        break;
      }

      // optional int64 carryNecklace = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryNecklace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrynecklace_)));
          set_has_carrynecklace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_carryAmulet;
        break;
      }

      // optional int64 carryAmulet = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryAmulet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryamulet_)));
          set_has_carryamulet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_carryBracer;
        break;
      }

      // optional int64 carryBracer = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryBracer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrybracer_)));
          set_has_carrybracer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_carryRing;
        break;
      }

      // optional int64 carryRing = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryRing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryring_)));
          set_has_carryring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_carryFashionWeapons;
        break;
      }

      // optional int64 carryFashionWeapons = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryFashionWeapons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryfashionweapons_)));
          set_has_carryfashionweapons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_carryFashionArmor;
        break;
      }

      // optional int64 carryFashionArmor = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryFashionArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryfashionarmor_)));
          set_has_carryfashionarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_carryWings;
        break;
      }

      // optional int64 carryWings = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryWings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrywings_)));
          set_has_carrywings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_mSpeed;
        break;
      }

      // optional int32 mSpeed = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_view;
        break;
      }

      // optional int32 view = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_)));
          set_has_view();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_radius;
        break;
      }

      // optional int32 radius = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_sheny;
        break;
      }

      // optional int64 sheny = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sheny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sheny_)));
          set_has_sheny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_shenw;
        break;
      }

      // optional int64 shenw = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shenw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shenw_)));
          set_has_shenw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_actBuff;
        break;
      }

      // repeated int32 actBuff = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 280, input, this->mutable_actbuff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actbuff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_actBuff;
        if (input->ExpectTag(290)) goto parse_item;
        break;
      }

      // repeated .proto_ff.rolebornitemDesc item = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_item;
        if (input->ExpectTag(296)) goto parse_actSkill;
        break;
      }

      // repeated int64 actSkill = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 296, input, this->mutable_actskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_actskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_actSkill;
        if (input->ExpectTag(306)) goto parse_mail;
        break;
      }

      // repeated .proto_ff.rolebornmailDesc mail = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bornID = 1;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bornid(), output);
  }

  // optional int32 professionID = 2;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->professionid(), output);
  }

  // optional string professionName = 3;
  if (has_professionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionname().data(), this->professionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->professionname(), output);
  }

  // optional string placement = 4;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placement().data(), this->placement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->placement(), output);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // optional int32 bornLevel = 6;
  if (has_bornlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bornlevel(), output);
  }

  // optional int32 bornTitle = 7;
  if (has_borntitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->borntitle(), output);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->diamond(), output);
  }

  // optional int64 bindDiamond = 9;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->binddiamond(), output);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gold(), output);
  }

  // optional int64 mapID = 11;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mapid(), output);
  }

  // optional int32 birthFace = 12;
  if (has_birthface()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->birthface(), output);
  }

  // optional string icons = 13;
  if (has_icons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icons().data(), this->icons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->icons(), output);
  }

  // optional string loginAvata = 14;
  if (has_loginavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginavata().data(), this->loginavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->loginavata(), output);
  }

  // optional string newweapon = 15;
  if (has_newweapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newweapon().data(), this->newweapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->newweapon(), output);
  }

  // optional string newclothing = 16;
  if (has_newclothing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newclothing().data(), this->newclothing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->newclothing(), output);
  }

  // optional string weaponAvata = 17;
  if (has_weaponavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaponavata().data(), this->weaponavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->weaponavata(), output);
  }

  // optional string roleAvata = 18;
  if (has_roleavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleavata().data(), this->roleavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->roleavata(), output);
  }

  // optional int64 carryWeapons = 19;
  if (has_carryweapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->carryweapons(), output);
  }

  // optional int64 carryArmor = 20;
  if (has_carryarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->carryarmor(), output);
  }

  // optional int64 carryCloak = 21;
  if (has_carrycloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->carrycloak(), output);
  }

  // optional int64 carryShoes = 22;
  if (has_carryshoes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->carryshoes(), output);
  }

  // optional int64 carryNecklace = 23;
  if (has_carrynecklace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->carrynecklace(), output);
  }

  // optional int64 carryAmulet = 24;
  if (has_carryamulet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->carryamulet(), output);
  }

  // optional int64 carryBracer = 25;
  if (has_carrybracer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->carrybracer(), output);
  }

  // optional int64 carryRing = 26;
  if (has_carryring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->carryring(), output);
  }

  // optional int64 carryFashionWeapons = 27;
  if (has_carryfashionweapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->carryfashionweapons(), output);
  }

  // optional int64 carryFashionArmor = 28;
  if (has_carryfashionarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->carryfashionarmor(), output);
  }

  // optional int64 carryWings = 29;
  if (has_carrywings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->carrywings(), output);
  }

  // optional int32 mSpeed = 30;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->mspeed(), output);
  }

  // optional int32 view = 31;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->view(), output);
  }

  // optional int32 radius = 32;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->radius(), output);
  }

  // optional int64 sheny = 33;
  if (has_sheny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->sheny(), output);
  }

  // optional int64 shenw = 34;
  if (has_shenw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(34, this->shenw(), output);
  }

  // repeated int32 actBuff = 35;
  for (int i = 0; i < this->actbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      35, this->actbuff(i), output);
  }

  // repeated .proto_ff.rolebornitemDesc item = 36;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->item(i), output);
  }

  // repeated int64 actSkill = 37;
  for (int i = 0; i < this->actskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      37, this->actskill(i), output);
  }

  // repeated .proto_ff.rolebornmailDesc mail = 38;
  for (int i = 0; i < this->mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bornID = 1;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bornid(), target);
  }

  // optional int32 professionID = 2;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->professionid(), target);
  }

  // optional string professionName = 3;
  if (has_professionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionname().data(), this->professionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->professionname(), target);
  }

  // optional string placement = 4;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placement().data(), this->placement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->placement(), target);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // optional int32 bornLevel = 6;
  if (has_bornlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bornlevel(), target);
  }

  // optional int32 bornTitle = 7;
  if (has_borntitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->borntitle(), target);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->diamond(), target);
  }

  // optional int64 bindDiamond = 9;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->binddiamond(), target);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gold(), target);
  }

  // optional int64 mapID = 11;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mapid(), target);
  }

  // optional int32 birthFace = 12;
  if (has_birthface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->birthface(), target);
  }

  // optional string icons = 13;
  if (has_icons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icons().data(), this->icons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->icons(), target);
  }

  // optional string loginAvata = 14;
  if (has_loginavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginavata().data(), this->loginavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->loginavata(), target);
  }

  // optional string newweapon = 15;
  if (has_newweapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newweapon().data(), this->newweapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->newweapon(), target);
  }

  // optional string newclothing = 16;
  if (has_newclothing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newclothing().data(), this->newclothing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->newclothing(), target);
  }

  // optional string weaponAvata = 17;
  if (has_weaponavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaponavata().data(), this->weaponavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->weaponavata(), target);
  }

  // optional string roleAvata = 18;
  if (has_roleavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleavata().data(), this->roleavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->roleavata(), target);
  }

  // optional int64 carryWeapons = 19;
  if (has_carryweapons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->carryweapons(), target);
  }

  // optional int64 carryArmor = 20;
  if (has_carryarmor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->carryarmor(), target);
  }

  // optional int64 carryCloak = 21;
  if (has_carrycloak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->carrycloak(), target);
  }

  // optional int64 carryShoes = 22;
  if (has_carryshoes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->carryshoes(), target);
  }

  // optional int64 carryNecklace = 23;
  if (has_carrynecklace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->carrynecklace(), target);
  }

  // optional int64 carryAmulet = 24;
  if (has_carryamulet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->carryamulet(), target);
  }

  // optional int64 carryBracer = 25;
  if (has_carrybracer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->carrybracer(), target);
  }

  // optional int64 carryRing = 26;
  if (has_carryring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->carryring(), target);
  }

  // optional int64 carryFashionWeapons = 27;
  if (has_carryfashionweapons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->carryfashionweapons(), target);
  }

  // optional int64 carryFashionArmor = 28;
  if (has_carryfashionarmor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->carryfashionarmor(), target);
  }

  // optional int64 carryWings = 29;
  if (has_carrywings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->carrywings(), target);
  }

  // optional int32 mSpeed = 30;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->mspeed(), target);
  }

  // optional int32 view = 31;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->view(), target);
  }

  // optional int32 radius = 32;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->radius(), target);
  }

  // optional int64 sheny = 33;
  if (has_sheny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->sheny(), target);
  }

  // optional int64 shenw = 34;
  if (has_shenw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(34, this->shenw(), target);
  }

  // repeated int32 actBuff = 35;
  for (int i = 0; i < this->actbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(35, this->actbuff(i), target);
  }

  // repeated .proto_ff.rolebornitemDesc item = 36;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->item(i), target);
  }

  // repeated int64 actSkill = 37;
  for (int i = 0; i < this->actskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(37, this->actskill(i), target);
  }

  // repeated .proto_ff.rolebornmailDesc mail = 38;
  for (int i = 0; i < this->mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bornID = 1;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bornid());
    }

    // optional int32 professionID = 2;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional string professionName = 3;
    if (has_professionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionname());
    }

    // optional string placement = 4;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placement());
    }

    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 bornLevel = 6;
    if (has_bornlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornlevel());
    }

    // optional int32 bornTitle = 7;
    if (has_borntitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->borntitle());
    }

    // optional int64 diamond = 8;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 bindDiamond = 9;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->binddiamond());
    }

    // optional int64 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 mapID = 11;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 birthFace = 12;
    if (has_birthface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birthface());
    }

    // optional string icons = 13;
    if (has_icons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icons());
    }

    // optional string loginAvata = 14;
    if (has_loginavata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginavata());
    }

    // optional string newweapon = 15;
    if (has_newweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newweapon());
    }

    // optional string newclothing = 16;
    if (has_newclothing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newclothing());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string weaponAvata = 17;
    if (has_weaponavata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaponavata());
    }

    // optional string roleAvata = 18;
    if (has_roleavata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleavata());
    }

    // optional int64 carryWeapons = 19;
    if (has_carryweapons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryweapons());
    }

    // optional int64 carryArmor = 20;
    if (has_carryarmor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryarmor());
    }

    // optional int64 carryCloak = 21;
    if (has_carrycloak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrycloak());
    }

    // optional int64 carryShoes = 22;
    if (has_carryshoes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryshoes());
    }

    // optional int64 carryNecklace = 23;
    if (has_carrynecklace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrynecklace());
    }

    // optional int64 carryAmulet = 24;
    if (has_carryamulet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryamulet());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 carryBracer = 25;
    if (has_carrybracer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrybracer());
    }

    // optional int64 carryRing = 26;
    if (has_carryring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryring());
    }

    // optional int64 carryFashionWeapons = 27;
    if (has_carryfashionweapons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryfashionweapons());
    }

    // optional int64 carryFashionArmor = 28;
    if (has_carryfashionarmor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryfashionarmor());
    }

    // optional int64 carryWings = 29;
    if (has_carrywings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrywings());
    }

    // optional int32 mSpeed = 30;
    if (has_mspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mspeed());
    }

    // optional int32 view = 31;
    if (has_view()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view());
    }

    // optional int32 radius = 32;
    if (has_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 sheny = 33;
    if (has_sheny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sheny());
    }

    // optional int64 shenw = 34;
    if (has_shenw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shenw());
    }

  }
  // repeated int32 actBuff = 35;
  {
    int data_size = 0;
    for (int i = 0; i < this->actbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actbuff(i));
    }
    total_size += 2 * this->actbuff_size() + data_size;
  }

  // repeated .proto_ff.rolebornitemDesc item = 36;
  total_size += 2 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated int64 actSkill = 37;
  {
    int data_size = 0;
    for (int i = 0; i < this->actskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->actskill(i));
    }
    total_size += 2 * this->actskill_size() + data_size;
  }

  // repeated .proto_ff.rolebornmailDesc mail = 38;
  total_size += 2 * this->mail_size();
  for (int i = 0; i < this->mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleborn::MergeFrom(const roleborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  actbuff_.MergeFrom(from.actbuff_);
  item_.MergeFrom(from.item_);
  actskill_.MergeFrom(from.actskill_);
  mail_.MergeFrom(from.mail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_professionname()) {
      set_professionname(from.professionname());
    }
    if (from.has_placement()) {
      set_placement(from.placement());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_bornlevel()) {
      set_bornlevel(from.bornlevel());
    }
    if (from.has_borntitle()) {
      set_borntitle(from.borntitle());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_birthface()) {
      set_birthface(from.birthface());
    }
    if (from.has_icons()) {
      set_icons(from.icons());
    }
    if (from.has_loginavata()) {
      set_loginavata(from.loginavata());
    }
    if (from.has_newweapon()) {
      set_newweapon(from.newweapon());
    }
    if (from.has_newclothing()) {
      set_newclothing(from.newclothing());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_weaponavata()) {
      set_weaponavata(from.weaponavata());
    }
    if (from.has_roleavata()) {
      set_roleavata(from.roleavata());
    }
    if (from.has_carryweapons()) {
      set_carryweapons(from.carryweapons());
    }
    if (from.has_carryarmor()) {
      set_carryarmor(from.carryarmor());
    }
    if (from.has_carrycloak()) {
      set_carrycloak(from.carrycloak());
    }
    if (from.has_carryshoes()) {
      set_carryshoes(from.carryshoes());
    }
    if (from.has_carrynecklace()) {
      set_carrynecklace(from.carrynecklace());
    }
    if (from.has_carryamulet()) {
      set_carryamulet(from.carryamulet());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_carrybracer()) {
      set_carrybracer(from.carrybracer());
    }
    if (from.has_carryring()) {
      set_carryring(from.carryring());
    }
    if (from.has_carryfashionweapons()) {
      set_carryfashionweapons(from.carryfashionweapons());
    }
    if (from.has_carryfashionarmor()) {
      set_carryfashionarmor(from.carryfashionarmor());
    }
    if (from.has_carrywings()) {
      set_carrywings(from.carrywings());
    }
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
    if (from.has_view()) {
      set_view(from.view());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sheny()) {
      set_sheny(from.sheny());
    }
    if (from.has_shenw()) {
      set_shenw(from.shenw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleborn::CopyFrom(const roleborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleborn::IsInitialized() const {

  return true;
}

void roleborn::Swap(roleborn* other) {
  if (other != this) {
    std::swap(bornid_, other->bornid_);
    std::swap(professionid_, other->professionid_);
    std::swap(professionname_, other->professionname_);
    std::swap(placement_, other->placement_);
    std::swap(gender_, other->gender_);
    std::swap(bornlevel_, other->bornlevel_);
    std::swap(borntitle_, other->borntitle_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(gold_, other->gold_);
    std::swap(mapid_, other->mapid_);
    std::swap(birthface_, other->birthface_);
    std::swap(icons_, other->icons_);
    std::swap(loginavata_, other->loginavata_);
    std::swap(newweapon_, other->newweapon_);
    std::swap(newclothing_, other->newclothing_);
    std::swap(weaponavata_, other->weaponavata_);
    std::swap(roleavata_, other->roleavata_);
    std::swap(carryweapons_, other->carryweapons_);
    std::swap(carryarmor_, other->carryarmor_);
    std::swap(carrycloak_, other->carrycloak_);
    std::swap(carryshoes_, other->carryshoes_);
    std::swap(carrynecklace_, other->carrynecklace_);
    std::swap(carryamulet_, other->carryamulet_);
    std::swap(carrybracer_, other->carrybracer_);
    std::swap(carryring_, other->carryring_);
    std::swap(carryfashionweapons_, other->carryfashionweapons_);
    std::swap(carryfashionarmor_, other->carryfashionarmor_);
    std::swap(carrywings_, other->carrywings_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(view_, other->view_);
    std::swap(radius_, other->radius_);
    std::swap(sheny_, other->sheny_);
    std::swap(shenw_, other->shenw_);
    actbuff_.Swap(&other->actbuff_);
    item_.Swap(&other->item_);
    actskill_.Swap(&other->actskill_);
    mail_.Swap(&other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleborn_descriptor_;
  metadata.reflection = roleborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleborn::kRolebornListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleborn::Sheet_roleborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleborn::InitAsDefaultInstance() {
}

Sheet_roleborn::Sheet_roleborn(const Sheet_roleborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleborn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleborn::~Sheet_roleborn() {
  SharedDtor();
}

void Sheet_roleborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleborn_descriptor_;
}

const Sheet_roleborn& Sheet_roleborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleborn* Sheet_roleborn::default_instance_ = NULL;

Sheet_roleborn* Sheet_roleborn::New() const {
  return new Sheet_roleborn;
}

void Sheet_roleborn::Clear() {
  roleborn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleborn roleborn_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleborn_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleborn_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleborn_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleborn roleborn_List = 1;
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleborn_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleborn roleborn_List = 1;
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleborn_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleborn::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleborn roleborn_List = 1;
  total_size += 1 * this->roleborn_list_size();
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleborn_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleborn::MergeFrom(const Sheet_roleborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleborn_list_.MergeFrom(from.roleborn_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleborn::CopyFrom(const Sheet_roleborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleborn::IsInitialized() const {

  return true;
}

void Sheet_roleborn::Swap(Sheet_roleborn* other) {
  if (other != this) {
    roleborn_list_.Swap(&other->roleborn_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleborn_descriptor_;
  metadata.reflection = Sheet_roleborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolewarriorattributeDesc::kTypeFieldNumber;
const int rolewarriorattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolewarriorattributeDesc::rolewarriorattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolewarriorattributeDesc::InitAsDefaultInstance() {
}

rolewarriorattributeDesc::rolewarriorattributeDesc(const rolewarriorattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolewarriorattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolewarriorattributeDesc::~rolewarriorattributeDesc() {
  SharedDtor();
}

void rolewarriorattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolewarriorattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolewarriorattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolewarriorattributeDesc_descriptor_;
}

const rolewarriorattributeDesc& rolewarriorattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolewarriorattributeDesc* rolewarriorattributeDesc::default_instance_ = NULL;

rolewarriorattributeDesc* rolewarriorattributeDesc::New() const {
  return new rolewarriorattributeDesc;
}

void rolewarriorattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolewarriorattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolewarriorattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolewarriorattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolewarriorattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolewarriorattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolewarriorattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolewarriorattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolewarriorattributeDesc::MergeFrom(const rolewarriorattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolewarriorattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolewarriorattributeDesc::CopyFrom(const rolewarriorattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolewarriorattributeDesc::IsInitialized() const {

  return true;
}

void rolewarriorattributeDesc::Swap(rolewarriorattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolewarriorattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolewarriorattributeDesc_descriptor_;
  metadata.reflection = rolewarriorattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolewarrior::kLvFieldNumber;
const int rolewarrior::kUpgradePointFieldNumber;
const int rolewarrior::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolewarrior::rolewarrior()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolewarrior::InitAsDefaultInstance() {
}

rolewarrior::rolewarrior(const rolewarrior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolewarrior::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolewarrior::~rolewarrior() {
  SharedDtor();
}

void rolewarrior::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolewarrior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolewarrior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolewarrior_descriptor_;
}

const rolewarrior& rolewarrior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolewarrior* rolewarrior::default_instance_ = NULL;

rolewarrior* rolewarrior::New() const {
  return new rolewarrior;
}

void rolewarrior::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolewarrior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolewarriorattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolewarrior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolewarriorattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolewarrior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolewarriorattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolewarrior::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolewarriorattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolewarrior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolewarrior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolewarrior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolewarrior::MergeFrom(const rolewarrior& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolewarrior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolewarrior::CopyFrom(const rolewarrior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolewarrior::IsInitialized() const {

  return true;
}

void rolewarrior::Swap(rolewarrior* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolewarrior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolewarrior_descriptor_;
  metadata.reflection = rolewarrior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolewarrior::kRolewarriorListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolewarrior::Sheet_rolewarrior()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolewarrior::InitAsDefaultInstance() {
}

Sheet_rolewarrior::Sheet_rolewarrior(const Sheet_rolewarrior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolewarrior::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolewarrior::~Sheet_rolewarrior() {
  SharedDtor();
}

void Sheet_rolewarrior::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolewarrior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolewarrior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolewarrior_descriptor_;
}

const Sheet_rolewarrior& Sheet_rolewarrior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolewarrior* Sheet_rolewarrior::default_instance_ = NULL;

Sheet_rolewarrior* Sheet_rolewarrior::New() const {
  return new Sheet_rolewarrior;
}

void Sheet_rolewarrior::Clear() {
  rolewarrior_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolewarrior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolewarrior rolewarrior_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolewarrior_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolewarrior_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolewarrior_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolewarrior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolewarrior rolewarrior_List = 1;
  for (int i = 0; i < this->rolewarrior_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolewarrior_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolewarrior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolewarrior rolewarrior_List = 1;
  for (int i = 0; i < this->rolewarrior_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolewarrior_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolewarrior::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolewarrior rolewarrior_List = 1;
  total_size += 1 * this->rolewarrior_list_size();
  for (int i = 0; i < this->rolewarrior_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolewarrior_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolewarrior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolewarrior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolewarrior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolewarrior::MergeFrom(const Sheet_rolewarrior& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolewarrior_list_.MergeFrom(from.rolewarrior_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolewarrior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolewarrior::CopyFrom(const Sheet_rolewarrior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolewarrior::IsInitialized() const {

  return true;
}

void Sheet_rolewarrior::Swap(Sheet_rolewarrior* other) {
  if (other != this) {
    rolewarrior_list_.Swap(&other->rolewarrior_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolewarrior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolewarrior_descriptor_;
  metadata.reflection = Sheet_rolewarrior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemasterattributeDesc::kTypeFieldNumber;
const int rolemasterattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolemasterattributeDesc::rolemasterattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemasterattributeDesc::InitAsDefaultInstance() {
}

rolemasterattributeDesc::rolemasterattributeDesc(const rolemasterattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemasterattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemasterattributeDesc::~rolemasterattributeDesc() {
  SharedDtor();
}

void rolemasterattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemasterattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemasterattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemasterattributeDesc_descriptor_;
}

const rolemasterattributeDesc& rolemasterattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemasterattributeDesc* rolemasterattributeDesc::default_instance_ = NULL;

rolemasterattributeDesc* rolemasterattributeDesc::New() const {
  return new rolemasterattributeDesc;
}

void rolemasterattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemasterattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemasterattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemasterattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemasterattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemasterattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemasterattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemasterattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemasterattributeDesc::MergeFrom(const rolemasterattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemasterattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemasterattributeDesc::CopyFrom(const rolemasterattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemasterattributeDesc::IsInitialized() const {

  return true;
}

void rolemasterattributeDesc::Swap(rolemasterattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemasterattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemasterattributeDesc_descriptor_;
  metadata.reflection = rolemasterattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemaster::kLvFieldNumber;
const int rolemaster::kUpgradePointFieldNumber;
const int rolemaster::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolemaster::rolemaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemaster::InitAsDefaultInstance() {
}

rolemaster::rolemaster(const rolemaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemaster::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemaster::~rolemaster() {
  SharedDtor();
}

void rolemaster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemaster_descriptor_;
}

const rolemaster& rolemaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemaster* rolemaster::default_instance_ = NULL;

rolemaster* rolemaster::New() const {
  return new rolemaster;
}

void rolemaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolemasterattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolemasterattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolemasterattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolemasterattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemaster::MergeFrom(const rolemaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemaster::CopyFrom(const rolemaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemaster::IsInitialized() const {

  return true;
}

void rolemaster::Swap(rolemaster* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemaster_descriptor_;
  metadata.reflection = rolemaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolemaster::kRolemasterListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolemaster::Sheet_rolemaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolemaster::InitAsDefaultInstance() {
}

Sheet_rolemaster::Sheet_rolemaster(const Sheet_rolemaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolemaster::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolemaster::~Sheet_rolemaster() {
  SharedDtor();
}

void Sheet_rolemaster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolemaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolemaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolemaster_descriptor_;
}

const Sheet_rolemaster& Sheet_rolemaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolemaster* Sheet_rolemaster::default_instance_ = NULL;

Sheet_rolemaster* Sheet_rolemaster::New() const {
  return new Sheet_rolemaster;
}

void Sheet_rolemaster::Clear() {
  rolemaster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolemaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolemaster rolemaster_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolemaster_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolemaster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolemaster_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolemaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolemaster rolemaster_List = 1;
  for (int i = 0; i < this->rolemaster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolemaster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolemaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolemaster rolemaster_List = 1;
  for (int i = 0; i < this->rolemaster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolemaster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolemaster::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolemaster rolemaster_List = 1;
  total_size += 1 * this->rolemaster_list_size();
  for (int i = 0; i < this->rolemaster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolemaster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolemaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolemaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolemaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolemaster::MergeFrom(const Sheet_rolemaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolemaster_list_.MergeFrom(from.rolemaster_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolemaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolemaster::CopyFrom(const Sheet_rolemaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolemaster::IsInitialized() const {

  return true;
}

void Sheet_rolemaster::Swap(Sheet_rolemaster* other) {
  if (other != this) {
    rolemaster_list_.Swap(&other->rolemaster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolemaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolemaster_descriptor_;
  metadata.reflection = Sheet_rolemaster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleassassinattributeDesc::kTypeFieldNumber;
const int roleassassinattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roleassassinattributeDesc::roleassassinattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleassassinattributeDesc::InitAsDefaultInstance() {
}

roleassassinattributeDesc::roleassassinattributeDesc(const roleassassinattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleassassinattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleassassinattributeDesc::~roleassassinattributeDesc() {
  SharedDtor();
}

void roleassassinattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleassassinattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleassassinattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleassassinattributeDesc_descriptor_;
}

const roleassassinattributeDesc& roleassassinattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleassassinattributeDesc* roleassassinattributeDesc::default_instance_ = NULL;

roleassassinattributeDesc* roleassassinattributeDesc::New() const {
  return new roleassassinattributeDesc;
}

void roleassassinattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleassassinattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleassassinattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleassassinattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleassassinattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleassassinattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleassassinattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleassassinattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleassassinattributeDesc::MergeFrom(const roleassassinattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleassassinattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleassassinattributeDesc::CopyFrom(const roleassassinattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleassassinattributeDesc::IsInitialized() const {

  return true;
}

void roleassassinattributeDesc::Swap(roleassassinattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleassassinattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleassassinattributeDesc_descriptor_;
  metadata.reflection = roleassassinattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleassassin::kLvFieldNumber;
const int roleassassin::kUpgradePointFieldNumber;
const int roleassassin::kAttributeFieldNumber;
#endif  // !_MSC_VER

roleassassin::roleassassin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleassassin::InitAsDefaultInstance() {
}

roleassassin::roleassassin(const roleassassin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleassassin::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleassassin::~roleassassin() {
  SharedDtor();
}

void roleassassin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleassassin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleassassin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleassassin_descriptor_;
}

const roleassassin& roleassassin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleassassin* roleassassin::default_instance_ = NULL;

roleassassin* roleassassin::New() const {
  return new roleassassin;
}

void roleassassin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleassassin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roleassassinattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleassassin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roleassassinattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleassassin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roleassassinattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleassassin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roleassassinattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleassassin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleassassin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleassassin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleassassin::MergeFrom(const roleassassin& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleassassin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleassassin::CopyFrom(const roleassassin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleassassin::IsInitialized() const {

  return true;
}

void roleassassin::Swap(roleassassin* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleassassin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleassassin_descriptor_;
  metadata.reflection = roleassassin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleassassin::kRoleassassinListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleassassin::Sheet_roleassassin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleassassin::InitAsDefaultInstance() {
}

Sheet_roleassassin::Sheet_roleassassin(const Sheet_roleassassin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleassassin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleassassin::~Sheet_roleassassin() {
  SharedDtor();
}

void Sheet_roleassassin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleassassin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleassassin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleassassin_descriptor_;
}

const Sheet_roleassassin& Sheet_roleassassin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleassassin* Sheet_roleassassin::default_instance_ = NULL;

Sheet_roleassassin* Sheet_roleassassin::New() const {
  return new Sheet_roleassassin;
}

void Sheet_roleassassin::Clear() {
  roleassassin_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleassassin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleassassin roleassassin_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleassassin_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleassassin_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleassassin_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleassassin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleassassin roleassassin_List = 1;
  for (int i = 0; i < this->roleassassin_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleassassin_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleassassin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleassassin roleassassin_List = 1;
  for (int i = 0; i < this->roleassassin_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleassassin_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleassassin::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleassassin roleassassin_List = 1;
  total_size += 1 * this->roleassassin_list_size();
  for (int i = 0; i < this->roleassassin_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleassassin_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleassassin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleassassin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleassassin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleassassin::MergeFrom(const Sheet_roleassassin& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleassassin_list_.MergeFrom(from.roleassassin_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleassassin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleassassin::CopyFrom(const Sheet_roleassassin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleassassin::IsInitialized() const {

  return true;
}

void Sheet_roleassassin::Swap(Sheet_roleassassin* other) {
  if (other != this) {
    roleassassin_list_.Swap(&other->roleassassin_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleassassin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleassassin_descriptor_;
  metadata.reflection = Sheet_roleassassin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleshooterattributeDesc::kTypeFieldNumber;
const int roleshooterattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roleshooterattributeDesc::roleshooterattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleshooterattributeDesc::InitAsDefaultInstance() {
}

roleshooterattributeDesc::roleshooterattributeDesc(const roleshooterattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleshooterattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleshooterattributeDesc::~roleshooterattributeDesc() {
  SharedDtor();
}

void roleshooterattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleshooterattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleshooterattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleshooterattributeDesc_descriptor_;
}

const roleshooterattributeDesc& roleshooterattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleshooterattributeDesc* roleshooterattributeDesc::default_instance_ = NULL;

roleshooterattributeDesc* roleshooterattributeDesc::New() const {
  return new roleshooterattributeDesc;
}

void roleshooterattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleshooterattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleshooterattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleshooterattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleshooterattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleshooterattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleshooterattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleshooterattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleshooterattributeDesc::MergeFrom(const roleshooterattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleshooterattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleshooterattributeDesc::CopyFrom(const roleshooterattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleshooterattributeDesc::IsInitialized() const {

  return true;
}

void roleshooterattributeDesc::Swap(roleshooterattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleshooterattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleshooterattributeDesc_descriptor_;
  metadata.reflection = roleshooterattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleshooter::kLvFieldNumber;
const int roleshooter::kUpgradePointFieldNumber;
const int roleshooter::kAttributeFieldNumber;
#endif  // !_MSC_VER

roleshooter::roleshooter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleshooter::InitAsDefaultInstance() {
}

roleshooter::roleshooter(const roleshooter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleshooter::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleshooter::~roleshooter() {
  SharedDtor();
}

void roleshooter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleshooter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleshooter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleshooter_descriptor_;
}

const roleshooter& roleshooter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleshooter* roleshooter::default_instance_ = NULL;

roleshooter* roleshooter::New() const {
  return new roleshooter;
}

void roleshooter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleshooter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roleshooterattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleshooter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roleshooterattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleshooter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roleshooterattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleshooter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roleshooterattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleshooter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleshooter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleshooter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleshooter::MergeFrom(const roleshooter& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleshooter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleshooter::CopyFrom(const roleshooter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleshooter::IsInitialized() const {

  return true;
}

void roleshooter::Swap(roleshooter* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleshooter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleshooter_descriptor_;
  metadata.reflection = roleshooter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleshooter::kRoleshooterListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleshooter::Sheet_roleshooter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleshooter::InitAsDefaultInstance() {
}

Sheet_roleshooter::Sheet_roleshooter(const Sheet_roleshooter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleshooter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleshooter::~Sheet_roleshooter() {
  SharedDtor();
}

void Sheet_roleshooter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleshooter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleshooter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleshooter_descriptor_;
}

const Sheet_roleshooter& Sheet_roleshooter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleshooter* Sheet_roleshooter::default_instance_ = NULL;

Sheet_roleshooter* Sheet_roleshooter::New() const {
  return new Sheet_roleshooter;
}

void Sheet_roleshooter::Clear() {
  roleshooter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleshooter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleshooter roleshooter_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleshooter_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleshooter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleshooter_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleshooter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleshooter roleshooter_List = 1;
  for (int i = 0; i < this->roleshooter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleshooter_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleshooter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleshooter roleshooter_List = 1;
  for (int i = 0; i < this->roleshooter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleshooter_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleshooter::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleshooter roleshooter_List = 1;
  total_size += 1 * this->roleshooter_list_size();
  for (int i = 0; i < this->roleshooter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleshooter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleshooter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleshooter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleshooter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleshooter::MergeFrom(const Sheet_roleshooter& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleshooter_list_.MergeFrom(from.roleshooter_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleshooter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleshooter::CopyFrom(const Sheet_roleshooter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleshooter::IsInitialized() const {

  return true;
}

void Sheet_roleshooter::Swap(Sheet_roleshooter* other) {
  if (other != this) {
    roleshooter_list_.Swap(&other->roleshooter_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleshooter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleshooter_descriptor_;
  metadata.reflection = Sheet_roleshooter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleexp::kLvFieldNumber;
const int roleexp::kExpFieldNumber;
const int roleexp::kSkillPointFieldNumber;
#endif  // !_MSC_VER

roleexp::roleexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleexp::InitAsDefaultInstance() {
}

roleexp::roleexp(const roleexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  skillpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleexp::~roleexp() {
  SharedDtor();
}

void roleexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleexp_descriptor_;
}

const roleexp& roleexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleexp* roleexp::default_instance_ = NULL;

roleexp* roleexp::New() const {
  return new roleexp;
}

void roleexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    skillpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillPoint;
        break;
      }

      // optional int32 skillPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  // optional int32 skillPoint = 3;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  // optional int32 skillPoint = 3;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 skillPoint = 3;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleexp::MergeFrom(const roleexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleexp::CopyFrom(const roleexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleexp::IsInitialized() const {

  return true;
}

void roleexp::Swap(roleexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleexp_descriptor_;
  metadata.reflection = roleexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleexp::kRoleexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleexp::Sheet_roleexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleexp::InitAsDefaultInstance() {
}

Sheet_roleexp::Sheet_roleexp(const Sheet_roleexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleexp::~Sheet_roleexp() {
  SharedDtor();
}

void Sheet_roleexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleexp_descriptor_;
}

const Sheet_roleexp& Sheet_roleexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleexp* Sheet_roleexp::default_instance_ = NULL;

Sheet_roleexp* Sheet_roleexp::New() const {
  return new Sheet_roleexp;
}

void Sheet_roleexp::Clear() {
  roleexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleexp roleexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleexp roleexp_List = 1;
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleexp roleexp_List = 1;
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleexp roleexp_List = 1;
  total_size += 1 * this->roleexp_list_size();
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleexp::MergeFrom(const Sheet_roleexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleexp_list_.MergeFrom(from.roleexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleexp::CopyFrom(const Sheet_roleexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleexp::IsInitialized() const {

  return true;
}

void Sheet_roleexp::Swap(Sheet_roleexp* other) {
  if (other != this) {
    roleexp_list_.Swap(&other->roleexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleexp_descriptor_;
  metadata.reflection = Sheet_roleexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleskillType::kSkillIdFieldNumber;
const int roleskillType::kSkillTypeFieldNumber;
#endif  // !_MSC_VER

roleskillType::roleskillType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleskillType::InitAsDefaultInstance() {
}

roleskillType::roleskillType(const roleskillType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleskillType::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  skilltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleskillType::~roleskillType() {
  SharedDtor();
}

void roleskillType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleskillType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleskillType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleskillType_descriptor_;
}

const roleskillType& roleskillType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleskillType* roleskillType::default_instance_ = NULL;

roleskillType* roleskillType::New() const {
  return new roleskillType;
}

void roleskillType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = GOOGLE_LONGLONG(0);
    skilltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleskillType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleskillType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skillid(), output);
  }

  // optional int32 skillType = 2;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleskillType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skillid(), target);
  }

  // optional int32 skillType = 2;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleskillType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int32 skillType = 2;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleskillType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleskillType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleskillType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleskillType::MergeFrom(const roleskillType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleskillType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleskillType::CopyFrom(const roleskillType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleskillType::IsInitialized() const {

  return true;
}

void roleskillType::Swap(roleskillType* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleskillType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleskillType_descriptor_;
  metadata.reflection = roleskillType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleskillType::kRoleskillTypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleskillType::Sheet_roleskillType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleskillType::InitAsDefaultInstance() {
}

Sheet_roleskillType::Sheet_roleskillType(const Sheet_roleskillType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleskillType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleskillType::~Sheet_roleskillType() {
  SharedDtor();
}

void Sheet_roleskillType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleskillType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleskillType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleskillType_descriptor_;
}

const Sheet_roleskillType& Sheet_roleskillType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleskillType* Sheet_roleskillType::default_instance_ = NULL;

Sheet_roleskillType* Sheet_roleskillType::New() const {
  return new Sheet_roleskillType;
}

void Sheet_roleskillType::Clear() {
  roleskilltype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleskillType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleskillType roleskillType_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleskillType_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleskilltype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleskillType_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleskillType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleskilltype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleskillType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleskilltype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleskillType::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  total_size += 1 * this->roleskilltype_list_size();
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleskilltype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleskillType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleskillType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleskillType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleskillType::MergeFrom(const Sheet_roleskillType& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleskilltype_list_.MergeFrom(from.roleskilltype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleskillType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleskillType::CopyFrom(const Sheet_roleskillType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleskillType::IsInitialized() const {

  return true;
}

void Sheet_roleskillType::Swap(Sheet_roleskillType* other) {
  if (other != this) {
    roleskilltype_list_.Swap(&other->roleskilltype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleskillType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleskillType_descriptor_;
  metadata.reflection = Sheet_roleskillType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleaddSkill::kIdFieldNumber;
const int roleaddSkill::kSkillIdFieldNumber;
#endif  // !_MSC_VER

roleaddSkill::roleaddSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleaddSkill::InitAsDefaultInstance() {
}

roleaddSkill::roleaddSkill(const roleaddSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleaddSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleaddSkill::~roleaddSkill() {
  SharedDtor();
}

void roleaddSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleaddSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleaddSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleaddSkill_descriptor_;
}

const roleaddSkill& roleaddSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleaddSkill* roleaddSkill::default_instance_ = NULL;

roleaddSkill* roleaddSkill::New() const {
  return new roleaddSkill;
}

void roleaddSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleaddSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int64 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleaddSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleaddSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleaddSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleaddSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleaddSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleaddSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleaddSkill::MergeFrom(const roleaddSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleaddSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleaddSkill::CopyFrom(const roleaddSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleaddSkill::IsInitialized() const {

  return true;
}

void roleaddSkill::Swap(roleaddSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleaddSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleaddSkill_descriptor_;
  metadata.reflection = roleaddSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleaddSkill::kRoleaddSkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleaddSkill::Sheet_roleaddSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleaddSkill::InitAsDefaultInstance() {
}

Sheet_roleaddSkill::Sheet_roleaddSkill(const Sheet_roleaddSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleaddSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleaddSkill::~Sheet_roleaddSkill() {
  SharedDtor();
}

void Sheet_roleaddSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleaddSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleaddSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleaddSkill_descriptor_;
}

const Sheet_roleaddSkill& Sheet_roleaddSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleaddSkill* Sheet_roleaddSkill::default_instance_ = NULL;

Sheet_roleaddSkill* Sheet_roleaddSkill::New() const {
  return new Sheet_roleaddSkill;
}

void Sheet_roleaddSkill::Clear() {
  roleaddskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleaddSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleaddSkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleaddskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleaddSkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleaddSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleaddskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleaddSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleaddskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleaddSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  total_size += 1 * this->roleaddskill_list_size();
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleaddskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleaddSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleaddSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleaddSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleaddSkill::MergeFrom(const Sheet_roleaddSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleaddskill_list_.MergeFrom(from.roleaddskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleaddSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleaddSkill::CopyFrom(const Sheet_roleaddSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleaddSkill::IsInitialized() const {

  return true;
}

void Sheet_roleaddSkill::Swap(Sheet_roleaddSkill* other) {
  if (other != this) {
    roleaddskill_list_.Swap(&other->roleaddskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleaddSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleaddSkill_descriptor_;
  metadata.reflection = Sheet_roleaddSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleworldexp::kLvFieldNumber;
const int roleworldexp::kWorldExpFieldNumber;
#endif  // !_MSC_VER

roleworldexp::roleworldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleworldexp::InitAsDefaultInstance() {
}

roleworldexp::roleworldexp(const roleworldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleworldexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = GOOGLE_LONGLONG(0);
  worldexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleworldexp::~roleworldexp() {
  SharedDtor();
}

void roleworldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleworldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleworldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleworldexp_descriptor_;
}

const roleworldexp& roleworldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleworldexp* roleworldexp::default_instance_ = NULL;

roleworldexp* roleworldexp::New() const {
  return new roleworldexp;
}

void roleworldexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = GOOGLE_LONGLONG(0);
    worldexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleworldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldExp;
        break;
      }

      // optional int32 worldExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldexp_)));
          set_has_worldexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleworldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lv(), output);
  }

  // optional int32 worldExp = 2;
  if (has_worldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleworldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lv(), target);
  }

  // optional int32 worldExp = 2;
  if (has_worldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleworldexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lv());
    }

    // optional int32 worldExp = 2;
    if (has_worldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleworldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleworldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleworldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleworldexp::MergeFrom(const roleworldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_worldexp()) {
      set_worldexp(from.worldexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleworldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleworldexp::CopyFrom(const roleworldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleworldexp::IsInitialized() const {

  return true;
}

void roleworldexp::Swap(roleworldexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(worldexp_, other->worldexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleworldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleworldexp_descriptor_;
  metadata.reflection = roleworldexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleworldexp::kRoleworldexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleworldexp::Sheet_roleworldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleworldexp::InitAsDefaultInstance() {
}

Sheet_roleworldexp::Sheet_roleworldexp(const Sheet_roleworldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleworldexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleworldexp::~Sheet_roleworldexp() {
  SharedDtor();
}

void Sheet_roleworldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleworldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleworldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleworldexp_descriptor_;
}

const Sheet_roleworldexp& Sheet_roleworldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleworldexp* Sheet_roleworldexp::default_instance_ = NULL;

Sheet_roleworldexp* Sheet_roleworldexp::New() const {
  return new Sheet_roleworldexp;
}

void Sheet_roleworldexp::Clear() {
  roleworldexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleworldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleworldexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleworldexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleworldexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleworldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleworldexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleworldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleworldexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleworldexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  total_size += 1 * this->roleworldexp_list_size();
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleworldexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleworldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleworldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleworldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleworldexp::MergeFrom(const Sheet_roleworldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleworldexp_list_.MergeFrom(from.roleworldexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleworldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleworldexp::CopyFrom(const Sheet_roleworldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleworldexp::IsInitialized() const {

  return true;
}

void Sheet_roleworldexp::Swap(Sheet_roleworldexp* other) {
  if (other != this) {
    roleworldexp_list_.Swap(&other->roleworldexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleworldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleworldexp_descriptor_;
  metadata.reflection = Sheet_roleworldexp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
