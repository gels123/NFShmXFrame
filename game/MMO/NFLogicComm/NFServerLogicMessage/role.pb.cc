// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: role.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "role.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* rolebornitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolebornitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolebornmailDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolebornmailDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemasterMaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemasterMaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemasterMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemasterMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolemasterMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolemasterMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemasterFemaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemasterFemaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolemasterFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolemasterFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolemasterFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolemasterFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolesickleMaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolesickleMaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolesickleMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolesickleMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolesickleMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolesickleMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolesickleFemaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolesickleFemaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rolesickleFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rolesickleFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rolesickleFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rolesickleFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleswordMaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleswordMaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleswordMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleswordMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleswordMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleswordMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleswordFemaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleswordFemaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleswordFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleswordFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleswordFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleswordFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* roletaidaoMaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roletaidaoMaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roletaidaoMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roletaidaoMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roletaidaoMale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roletaidaoMale_reflection_ = NULL;
const ::google::protobuf::Descriptor* roletaidaoFemaleattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roletaidaoFemaleattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* roletaidaoFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roletaidaoFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roletaidaoFemale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roletaidaoFemale_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleskillType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleskillType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleskillType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleskillType_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleaddSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleaddSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleaddSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleaddSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* roleworldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  roleworldexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_roleworldexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_roleworldexp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_role_2eproto() {
  protobuf_AddDesc_role_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "role.proto");
  GOOGLE_CHECK(file != NULL);
  rolebornitemDesc_descriptor_ = file->message_type(0);
  static const int rolebornitemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, name_),
  };
  rolebornitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolebornitemDesc_descriptor_,
      rolebornitemDesc::default_instance_,
      rolebornitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolebornitemDesc));
  rolebornmailDesc_descriptor_ = file->message_type(1);
  static const int rolebornmailDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, name_),
  };
  rolebornmailDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolebornmailDesc_descriptor_,
      rolebornmailDesc::default_instance_,
      rolebornmailDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolebornmailDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolebornmailDesc));
  roleborn_descriptor_ = file->message_type(2);
  static const int roleborn_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, bornid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, professionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, bornlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, borntitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, birthface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, icons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, loginavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, newweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, newclothing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, weaponavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, roleavata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, clothescolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, skincolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryweapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryarmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrycloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryshoes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrynecklace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryamulet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrybracer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryfashionweapons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carryfashionarmor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, carrywings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, sheny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, shenw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, actbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, actskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, mail_),
  };
  roleborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleborn_descriptor_,
      roleborn::default_instance_,
      roleborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleborn));
  Sheet_roleborn_descriptor_ = file->message_type(3);
  static const int Sheet_roleborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, roleborn_list_),
  };
  Sheet_roleborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleborn_descriptor_,
      Sheet_roleborn::default_instance_,
      Sheet_roleborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleborn));
  rolemasterMaleattributeDesc_descriptor_ = file->message_type(4);
  static const int rolemasterMaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMaleattributeDesc, value_),
  };
  rolemasterMaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemasterMaleattributeDesc_descriptor_,
      rolemasterMaleattributeDesc::default_instance_,
      rolemasterMaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemasterMaleattributeDesc));
  rolemasterMale_descriptor_ = file->message_type(5);
  static const int rolemasterMale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMale, attribute_),
  };
  rolemasterMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemasterMale_descriptor_,
      rolemasterMale::default_instance_,
      rolemasterMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemasterMale));
  Sheet_rolemasterMale_descriptor_ = file->message_type(6);
  static const int Sheet_rolemasterMale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterMale, rolemastermale_list_),
  };
  Sheet_rolemasterMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolemasterMale_descriptor_,
      Sheet_rolemasterMale::default_instance_,
      Sheet_rolemasterMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolemasterMale));
  rolemasterFemaleattributeDesc_descriptor_ = file->message_type(7);
  static const int rolemasterFemaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemaleattributeDesc, value_),
  };
  rolemasterFemaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemasterFemaleattributeDesc_descriptor_,
      rolemasterFemaleattributeDesc::default_instance_,
      rolemasterFemaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemasterFemaleattributeDesc));
  rolemasterFemale_descriptor_ = file->message_type(8);
  static const int rolemasterFemale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemale, attribute_),
  };
  rolemasterFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolemasterFemale_descriptor_,
      rolemasterFemale::default_instance_,
      rolemasterFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolemasterFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolemasterFemale));
  Sheet_rolemasterFemale_descriptor_ = file->message_type(9);
  static const int Sheet_rolemasterFemale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterFemale, rolemasterfemale_list_),
  };
  Sheet_rolemasterFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolemasterFemale_descriptor_,
      Sheet_rolemasterFemale::default_instance_,
      Sheet_rolemasterFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolemasterFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolemasterFemale));
  rolesickleMaleattributeDesc_descriptor_ = file->message_type(10);
  static const int rolesickleMaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMaleattributeDesc, value_),
  };
  rolesickleMaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolesickleMaleattributeDesc_descriptor_,
      rolesickleMaleattributeDesc::default_instance_,
      rolesickleMaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolesickleMaleattributeDesc));
  rolesickleMale_descriptor_ = file->message_type(11);
  static const int rolesickleMale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMale, attribute_),
  };
  rolesickleMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolesickleMale_descriptor_,
      rolesickleMale::default_instance_,
      rolesickleMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolesickleMale));
  Sheet_rolesickleMale_descriptor_ = file->message_type(12);
  static const int Sheet_rolesickleMale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleMale, rolesicklemale_list_),
  };
  Sheet_rolesickleMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolesickleMale_descriptor_,
      Sheet_rolesickleMale::default_instance_,
      Sheet_rolesickleMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolesickleMale));
  rolesickleFemaleattributeDesc_descriptor_ = file->message_type(13);
  static const int rolesickleFemaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemaleattributeDesc, value_),
  };
  rolesickleFemaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolesickleFemaleattributeDesc_descriptor_,
      rolesickleFemaleattributeDesc::default_instance_,
      rolesickleFemaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolesickleFemaleattributeDesc));
  rolesickleFemale_descriptor_ = file->message_type(14);
  static const int rolesickleFemale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemale, attribute_),
  };
  rolesickleFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rolesickleFemale_descriptor_,
      rolesickleFemale::default_instance_,
      rolesickleFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rolesickleFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rolesickleFemale));
  Sheet_rolesickleFemale_descriptor_ = file->message_type(15);
  static const int Sheet_rolesickleFemale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleFemale, rolesicklefemale_list_),
  };
  Sheet_rolesickleFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rolesickleFemale_descriptor_,
      Sheet_rolesickleFemale::default_instance_,
      Sheet_rolesickleFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rolesickleFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rolesickleFemale));
  roleswordMaleattributeDesc_descriptor_ = file->message_type(16);
  static const int roleswordMaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMaleattributeDesc, value_),
  };
  roleswordMaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleswordMaleattributeDesc_descriptor_,
      roleswordMaleattributeDesc::default_instance_,
      roleswordMaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleswordMaleattributeDesc));
  roleswordMale_descriptor_ = file->message_type(17);
  static const int roleswordMale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMale, attribute_),
  };
  roleswordMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleswordMale_descriptor_,
      roleswordMale::default_instance_,
      roleswordMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleswordMale));
  Sheet_roleswordMale_descriptor_ = file->message_type(18);
  static const int Sheet_roleswordMale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordMale, roleswordmale_list_),
  };
  Sheet_roleswordMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleswordMale_descriptor_,
      Sheet_roleswordMale::default_instance_,
      Sheet_roleswordMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleswordMale));
  roleswordFemaleattributeDesc_descriptor_ = file->message_type(19);
  static const int roleswordFemaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemaleattributeDesc, value_),
  };
  roleswordFemaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleswordFemaleattributeDesc_descriptor_,
      roleswordFemaleattributeDesc::default_instance_,
      roleswordFemaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleswordFemaleattributeDesc));
  roleswordFemale_descriptor_ = file->message_type(20);
  static const int roleswordFemale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemale, attribute_),
  };
  roleswordFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleswordFemale_descriptor_,
      roleswordFemale::default_instance_,
      roleswordFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleswordFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleswordFemale));
  Sheet_roleswordFemale_descriptor_ = file->message_type(21);
  static const int Sheet_roleswordFemale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordFemale, roleswordfemale_list_),
  };
  Sheet_roleswordFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleswordFemale_descriptor_,
      Sheet_roleswordFemale::default_instance_,
      Sheet_roleswordFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleswordFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleswordFemale));
  roletaidaoMaleattributeDesc_descriptor_ = file->message_type(22);
  static const int roletaidaoMaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMaleattributeDesc, value_),
  };
  roletaidaoMaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roletaidaoMaleattributeDesc_descriptor_,
      roletaidaoMaleattributeDesc::default_instance_,
      roletaidaoMaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roletaidaoMaleattributeDesc));
  roletaidaoMale_descriptor_ = file->message_type(23);
  static const int roletaidaoMale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMale, attribute_),
  };
  roletaidaoMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roletaidaoMale_descriptor_,
      roletaidaoMale::default_instance_,
      roletaidaoMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roletaidaoMale));
  Sheet_roletaidaoMale_descriptor_ = file->message_type(24);
  static const int Sheet_roletaidaoMale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoMale, roletaidaomale_list_),
  };
  Sheet_roletaidaoMale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roletaidaoMale_descriptor_,
      Sheet_roletaidaoMale::default_instance_,
      Sheet_roletaidaoMale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoMale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoMale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roletaidaoMale));
  roletaidaoFemaleattributeDesc_descriptor_ = file->message_type(25);
  static const int roletaidaoFemaleattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemaleattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemaleattributeDesc, value_),
  };
  roletaidaoFemaleattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roletaidaoFemaleattributeDesc_descriptor_,
      roletaidaoFemaleattributeDesc::default_instance_,
      roletaidaoFemaleattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemaleattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemaleattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roletaidaoFemaleattributeDesc));
  roletaidaoFemale_descriptor_ = file->message_type(26);
  static const int roletaidaoFemale_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemale, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemale, upgradepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemale, attribute_),
  };
  roletaidaoFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roletaidaoFemale_descriptor_,
      roletaidaoFemale::default_instance_,
      roletaidaoFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roletaidaoFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roletaidaoFemale));
  Sheet_roletaidaoFemale_descriptor_ = file->message_type(27);
  static const int Sheet_roletaidaoFemale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoFemale, roletaidaofemale_list_),
  };
  Sheet_roletaidaoFemale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roletaidaoFemale_descriptor_,
      Sheet_roletaidaoFemale::default_instance_,
      Sheet_roletaidaoFemale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoFemale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roletaidaoFemale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roletaidaoFemale));
  roleexp_descriptor_ = file->message_type(28);
  static const int roleexp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, skillpoint_),
  };
  roleexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleexp_descriptor_,
      roleexp::default_instance_,
      roleexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleexp));
  Sheet_roleexp_descriptor_ = file->message_type(29);
  static const int Sheet_roleexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, roleexp_list_),
  };
  Sheet_roleexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleexp_descriptor_,
      Sheet_roleexp::default_instance_,
      Sheet_roleexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleexp));
  roleskillType_descriptor_ = file->message_type(30);
  static const int roleskillType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, skilltype_),
  };
  roleskillType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleskillType_descriptor_,
      roleskillType::default_instance_,
      roleskillType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleskillType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleskillType));
  Sheet_roleskillType_descriptor_ = file->message_type(31);
  static const int Sheet_roleskillType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, roleskilltype_list_),
  };
  Sheet_roleskillType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleskillType_descriptor_,
      Sheet_roleskillType::default_instance_,
      Sheet_roleskillType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleskillType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleskillType));
  roleaddSkill_descriptor_ = file->message_type(32);
  static const int roleaddSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, skillid_),
  };
  roleaddSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleaddSkill_descriptor_,
      roleaddSkill::default_instance_,
      roleaddSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleaddSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleaddSkill));
  Sheet_roleaddSkill_descriptor_ = file->message_type(33);
  static const int Sheet_roleaddSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, roleaddskill_list_),
  };
  Sheet_roleaddSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleaddSkill_descriptor_,
      Sheet_roleaddSkill::default_instance_,
      Sheet_roleaddSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleaddSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleaddSkill));
  roleworldexp_descriptor_ = file->message_type(34);
  static const int roleworldexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, worldexp_),
  };
  roleworldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      roleworldexp_descriptor_,
      roleworldexp::default_instance_,
      roleworldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(roleworldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(roleworldexp));
  Sheet_roleworldexp_descriptor_ = file->message_type(35);
  static const int Sheet_roleworldexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, roleworldexp_list_),
  };
  Sheet_roleworldexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_roleworldexp_descriptor_,
      Sheet_roleworldexp::default_instance_,
      Sheet_roleworldexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_roleworldexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_roleworldexp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_role_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolebornitemDesc_descriptor_, &rolebornitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolebornmailDesc_descriptor_, &rolebornmailDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleborn_descriptor_, &roleborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleborn_descriptor_, &Sheet_roleborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemasterMaleattributeDesc_descriptor_, &rolemasterMaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemasterMale_descriptor_, &rolemasterMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolemasterMale_descriptor_, &Sheet_rolemasterMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemasterFemaleattributeDesc_descriptor_, &rolemasterFemaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolemasterFemale_descriptor_, &rolemasterFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolemasterFemale_descriptor_, &Sheet_rolemasterFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolesickleMaleattributeDesc_descriptor_, &rolesickleMaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolesickleMale_descriptor_, &rolesickleMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolesickleMale_descriptor_, &Sheet_rolesickleMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolesickleFemaleattributeDesc_descriptor_, &rolesickleFemaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rolesickleFemale_descriptor_, &rolesickleFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rolesickleFemale_descriptor_, &Sheet_rolesickleFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleswordMaleattributeDesc_descriptor_, &roleswordMaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleswordMale_descriptor_, &roleswordMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleswordMale_descriptor_, &Sheet_roleswordMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleswordFemaleattributeDesc_descriptor_, &roleswordFemaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleswordFemale_descriptor_, &roleswordFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleswordFemale_descriptor_, &Sheet_roleswordFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roletaidaoMaleattributeDesc_descriptor_, &roletaidaoMaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roletaidaoMale_descriptor_, &roletaidaoMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roletaidaoMale_descriptor_, &Sheet_roletaidaoMale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roletaidaoFemaleattributeDesc_descriptor_, &roletaidaoFemaleattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roletaidaoFemale_descriptor_, &roletaidaoFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roletaidaoFemale_descriptor_, &Sheet_roletaidaoFemale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleexp_descriptor_, &roleexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleexp_descriptor_, &Sheet_roleexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleskillType_descriptor_, &roleskillType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleskillType_descriptor_, &Sheet_roleskillType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleaddSkill_descriptor_, &roleaddSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleaddSkill_descriptor_, &Sheet_roleaddSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    roleworldexp_descriptor_, &roleworldexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_roleworldexp_descriptor_, &Sheet_roleworldexp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_role_2eproto() {
  delete rolebornitemDesc::default_instance_;
  delete rolebornitemDesc_reflection_;
  delete rolebornmailDesc::default_instance_;
  delete rolebornmailDesc_reflection_;
  delete roleborn::default_instance_;
  delete roleborn_reflection_;
  delete Sheet_roleborn::default_instance_;
  delete Sheet_roleborn_reflection_;
  delete rolemasterMaleattributeDesc::default_instance_;
  delete rolemasterMaleattributeDesc_reflection_;
  delete rolemasterMale::default_instance_;
  delete rolemasterMale_reflection_;
  delete Sheet_rolemasterMale::default_instance_;
  delete Sheet_rolemasterMale_reflection_;
  delete rolemasterFemaleattributeDesc::default_instance_;
  delete rolemasterFemaleattributeDesc_reflection_;
  delete rolemasterFemale::default_instance_;
  delete rolemasterFemale_reflection_;
  delete Sheet_rolemasterFemale::default_instance_;
  delete Sheet_rolemasterFemale_reflection_;
  delete rolesickleMaleattributeDesc::default_instance_;
  delete rolesickleMaleattributeDesc_reflection_;
  delete rolesickleMale::default_instance_;
  delete rolesickleMale_reflection_;
  delete Sheet_rolesickleMale::default_instance_;
  delete Sheet_rolesickleMale_reflection_;
  delete rolesickleFemaleattributeDesc::default_instance_;
  delete rolesickleFemaleattributeDesc_reflection_;
  delete rolesickleFemale::default_instance_;
  delete rolesickleFemale_reflection_;
  delete Sheet_rolesickleFemale::default_instance_;
  delete Sheet_rolesickleFemale_reflection_;
  delete roleswordMaleattributeDesc::default_instance_;
  delete roleswordMaleattributeDesc_reflection_;
  delete roleswordMale::default_instance_;
  delete roleswordMale_reflection_;
  delete Sheet_roleswordMale::default_instance_;
  delete Sheet_roleswordMale_reflection_;
  delete roleswordFemaleattributeDesc::default_instance_;
  delete roleswordFemaleattributeDesc_reflection_;
  delete roleswordFemale::default_instance_;
  delete roleswordFemale_reflection_;
  delete Sheet_roleswordFemale::default_instance_;
  delete Sheet_roleswordFemale_reflection_;
  delete roletaidaoMaleattributeDesc::default_instance_;
  delete roletaidaoMaleattributeDesc_reflection_;
  delete roletaidaoMale::default_instance_;
  delete roletaidaoMale_reflection_;
  delete Sheet_roletaidaoMale::default_instance_;
  delete Sheet_roletaidaoMale_reflection_;
  delete roletaidaoFemaleattributeDesc::default_instance_;
  delete roletaidaoFemaleattributeDesc_reflection_;
  delete roletaidaoFemale::default_instance_;
  delete roletaidaoFemale_reflection_;
  delete Sheet_roletaidaoFemale::default_instance_;
  delete Sheet_roletaidaoFemale_reflection_;
  delete roleexp::default_instance_;
  delete roleexp_reflection_;
  delete Sheet_roleexp::default_instance_;
  delete Sheet_roleexp_reflection_;
  delete roleskillType::default_instance_;
  delete roleskillType_reflection_;
  delete Sheet_roleskillType::default_instance_;
  delete Sheet_roleskillType_reflection_;
  delete roleaddSkill::default_instance_;
  delete roleaddSkill_reflection_;
  delete Sheet_roleaddSkill::default_instance_;
  delete Sheet_roleaddSkill_reflection_;
  delete roleworldexp::default_instance_;
  delete roleworldexp_reflection_;
  delete Sheet_roleworldexp::default_instance_;
  delete Sheet_roleworldexp_reflection_;
}

void protobuf_AddDesc_role_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nrole.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"E\n\020rolebornitemDesc\022\027\n\003num\030\001 \001(\005B\n"
    "\302\377\024\006\346\225\260\351\207\217\022\030\n\004name\030\002 \001(\003B\n\302\377\024\006\345\220\215\347\247\260\"E\n\020"
    "rolebornmailDesc\022\027\n\003num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207"
    "\217\022\030\n\004name\030\002 \001(\003B\n\302\377\024\006\345\220\215\347\247\260\"\257\r\n\010roleborn"
    "\022\034\n\006bornID\030\001 \001(\003B\014\302\377\024\010\344\270\273\351\224\256ID\022\"\n\014profes"
    "sionID\030\002 \001(\005B\014\302\377\024\010\350\201\214\344\270\232ID\022,\n\016profession"
    "Name\030\003 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\345\220\215\347\247\260\220\301\024<\022\'\n\tplac"
    "ement\030\004 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\344\273\213\347\273\215\220\301\024<\022\032\n\006gen"
    "der\030\005 \001(\005B\n\302\377\024\006\346\200\247\345\210\253\022#\n\tbornLevel\030\006 \001(\005"
    "B\020\302\377\024\014\345\207\272\347\224\237\347\255\211\347\272\247\022#\n\tbornTitle\030\007 \001(\005B\020\302"
    "\377\024\014\346\220\272\345\270\246\347\247\260\345\217\267\022!\n\007diamond\030\010 \001(\003B\020\302\377\024\014\346\220"
    "\272\345\270\246\351\222\273\347\237\263\022+\n\013bindDiamond\030\t \001(\003B\026\302\377\024\022\346\220\272"
    "\345\270\246\347\273\221\345\256\232\351\222\273\347\237\263\022\036\n\004gold\030\n \001(\003B\020\302\377\024\014\346\220\272\345\270"
    "\246\351\207\221\345\270\201\022!\n\005mapID\030\013 \001(\003B\022\302\377\024\016\345\207\272\347\224\237\345\234\260\345\233\276"
    "ID\022#\n\tbirthFace\030\014 \001(\005B\020\302\377\024\014\345\207\272\347\224\237\346\234\235\345\220\221\022"
    "#\n\005icons\030\r \001(\tB\024\302\377\024\014\345\244\264\345\203\217\345\233\276\346\240\207\220\301\024<\022.\n\n"
    "loginAvata\030\016 \001(\tB\032\302\377\024\022\345\210\233\350\247\222\347\225\214\351\235\242\346\250\241\345\236\213"
    "\220\301\024<\0223\n\tnewweapon\030\017 \001(\tB \302\377\024\030\346\226\260\346\211\213\345\211\257\346\234"
    "\254\346\255\246\345\231\250\346\250\241\345\236\213\220\301\024<\0225\n\013newclothing\030\020 \001(\tB "
    "\302\377\024\030\346\226\260\346\211\213\345\211\257\346\234\254\350\241\243\346\234\215\346\250\241\345\236\213\220\301\024<\0222\n\013weap"
    "onAvata\030\021 \001(\tB\035\302\377\024\025\345\207\272\347\224\237\346\227\266\346\255\246\345\231\250\346\250\241\345\236\213"
    "\220\301\024<\022*\n\troleAvata\030\022 \001(\tB\027\302\377\024\017\345\207\272\347\224\237\346\227\266\346\250"
    "\241\345\236\213\220\301\024<\022#\n\thairColor\030\023 \001(\005B\020\302\377\024\014\345\244\264\345\217\221\350"
    "\211\262\345\200\274\022&\n\014clothesColor\030\024 \001(\005B\020\302\377\024\014\350\241\243\346\234\215\350"
    "\211\262\345\200\274\022#\n\tskinColor\030\025 \001(\005B\020\302\377\024\014\347\232\256\350\202\244\350\211\262\345"
    "\200\274\022&\n\014carryWeapons\030\026 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\255\246\345"
    "\231\250\022$\n\ncarryArmor\030\027 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\350\241\243\346\234\215"
    "\022$\n\ncarryCloak\030\030 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\212\253\351\243\216\022$"
    "\n\ncarryShoes\030\031 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\351\236\213\345\255\220\022\'\n\r"
    "carryNecklace\030\032 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\351\241\271\351\223\276\022%\n"
    "\013carryAmulet\030\033 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\212\244\347\254\246\022%\n\013"
    "carryBracer\030\034 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\212\244\350\205\225\022#\n\tc"
    "arryRing\030\035 \001(\003B\020\302\377\024\014\350\243\205\345\244\207\346\210\222\346\214\207\0229\n\023carr"
    "yFashionWeapons\030\036 \001(\003B\034\302\377\024\030\350\243\205\345\244\207\346\227\266\350\243\205\357"
    "\274\210\346\255\246\345\231\250\357\274\211\0227\n\021carryFashionArmor\030\037 \001(\003B\034"
    "\302\377\024\030\350\243\205\345\244\207\346\227\266\350\243\205\357\274\210\350\241\243\346\234\215\357\274\211\022\036\n\ncarryWin"
    "gs\030  \001(\003B\n\302\377\024\006\347\277\205\350\206\200\022&\n\006mSpeed\030! \001(\005B\026\302\377"
    "\024\022\345\210\235\345\247\213\347\247\273\345\212\250\351\200\237\345\272\246\022\030\n\004view\030\" \001(\005B\n\302\377\024\006"
    "\350\247\206\351\207\216\022 \n\006radius\030# \001(\005B\020\302\377\024\014\344\272\272\347\211\251\345\215\212\345\276\204"
    "\022\034\n\005group\030$ \001(\005B\r\302\377\024\t\346\212\200\350\203\275\347\273\204\022\037\n\005sheny\030"
    "% \001(\003B\020\302\377\024\014\347\245\236\350\243\205\350\241\243\346\234\215\022\037\n\005shenw\030& \001(\003B\020"
    "\302\377\024\014\347\245\236\350\243\205\346\255\246\345\231\250\022#\n\007actBuff\030\' \003(\005B\022\302\377\024\n\347"
    "\224\237\346\210\220buff\210\301\024\004\022>\n\004item\030( \003(\0132\032.proto_ff.r"
    "olebornitemDescB\024\302\377\024\014\350\203\214\345\214\205\347\211\251\345\223\201\210\301\024#\022&\n"
    "\010actSkill\030) \003(\003B\024\302\377\024\014\347\224\237\346\210\220\346\212\200\350\203\275\210\301\024\014\022>\n"
    "\004mail\030* \003(\0132\032.proto_ff.rolebornmailDescB"
    "\024\302\377\024\014\351\202\256\344\273\266\347\211\251\345\223\201\210\301\024\001\"A\n\016Sheet_roleborn\022"
    "/\n\rroleborn_List\030\001 \003(\0132\022.proto_ff.rolebo"
    "rnB\004\210\301\024\024\"O\n\033rolemasterMaleattributeDesc\022"
    "\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002 \001(\005"
    "B\007\302\377\024\003\345\200\274\"\246\001\n\016rolemasterMale\022\034\n\002lv\030\001 \001(\005"
    "B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 \001(\005"
    "B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022H\n\tattribute\030\003 "
    "\003(\0132%.proto_ff.rolemasterMaleattributeDe"
    "scB\016\302\377\024\006\345\261\236\346\200\247\210\301\024F\"T\n\024Sheet_rolemasterMa"
    "le\022<\n\023rolemasterMale_List\030\001 \003(\0132\030.proto_"
    "ff.rolemasterMaleB\005\210\301\024\320\017\"Q\n\035rolemasterFe"
    "maleattributeDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273"
    "\345\236\213\022\026\n\005Value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\252\001\n\020rolemast"
    "erFemale\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,"
    "\n\014upgradePoint\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202"
    "\271\346\225\260\022J\n\tattribute\030\003 \003(\0132\'.proto_ff.rolem"
    "asterFemaleattributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026"
    "\"Z\n\026Sheet_rolemasterFemale\022@\n\025rolemaster"
    "Female_List\030\001 \003(\0132\032.proto_ff.rolemasterF"
    "emaleB\005\210\301\024\320\017\"O\n\033rolesickleMaleattributeD"
    "esc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002"
    " \001(\005B\007\302\377\024\003\345\200\274\"\246\001\n\016rolesickleMale\022\034\n\002lv\030\001"
    " \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002"
    " \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022H\n\tattribut"
    "e\030\003 \003(\0132%.proto_ff.rolesickleMaleattribu"
    "teDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026\"T\n\024Sheet_rolesick"
    "leMale\022<\n\023rolesickleMale_List\030\001 \003(\0132\030.pr"
    "oto_ff.rolesickleMaleB\005\210\301\024\320\017\"Q\n\035rolesick"
    "leFemaleattributeDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024"
    "\006\347\261\273\345\236\213\022\026\n\005Value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\252\001\n\020role"
    "sickleFemale\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347"
    "\272\247\022,\n\014upgradePoint\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345"
    "\276\227\347\202\271\346\225\260\022J\n\tattribute\030\003 \003(\0132\'.proto_ff.r"
    "olesickleFemaleattributeDescB\016\302\377\024\006\345\261\236\346\200\247"
    "\210\301\024\026\"Z\n\026Sheet_rolesickleFemale\022@\n\025rolesi"
    "ckleFemale_List\030\001 \003(\0132\032.proto_ff.rolesic"
    "kleFemaleB\005\210\301\024\320\017\"N\n\032roleswordMaleattribu"
    "teDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Valu"
    "e\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\244\001\n\rroleswordMale\022\034\n\002lv"
    "\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint"
    "\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022G\n\tattrib"
    "ute\030\003 \003(\0132$.proto_ff.roleswordMaleattrib"
    "uteDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026\"Q\n\023Sheet_roleswo"
    "rdMale\022:\n\022roleswordMale_List\030\001 \003(\0132\027.pro"
    "to_ff.roleswordMaleB\005\210\301\024\320\017\"P\n\034roleswordF"
    "emaleattributeDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261"
    "\273\345\236\213\022\026\n\005Value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\250\001\n\017roleswo"
    "rdFemale\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,"
    "\n\014upgradePoint\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202"
    "\271\346\225\260\022I\n\tattribute\030\003 \003(\0132&.proto_ff.roles"
    "wordFemaleattributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026\""
    "W\n\025Sheet_roleswordFemale\022>\n\024roleswordFem"
    "ale_List\030\001 \003(\0132\031.proto_ff.roleswordFemal"
    "eB\005\210\301\024\320\017\"O\n\033roletaidaoMaleattributeDesc\022"
    "\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n\005Value\030\002 \001(\005"
    "B\007\302\377\024\003\345\200\274\"\246\001\n\016roletaidaoMale\022\034\n\002lv\030\001 \001(\005"
    "B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,\n\014upgradePoint\030\002 \001(\005"
    "B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202\271\346\225\260\022H\n\tattribute\030\003 "
    "\003(\0132%.proto_ff.roletaidaoMaleattributeDe"
    "scB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026\"T\n\024Sheet_roletaidaoMa"
    "le\022<\n\023roletaidaoMale_List\030\001 \003(\0132\030.proto_"
    "ff.roletaidaoMaleB\005\210\301\024\320\017\"Q\n\035roletaidaoFe"
    "maleattributeDesc\022\030\n\004Type\030\001 \001(\005B\n\302\377\024\006\347\261\273"
    "\345\236\213\022\026\n\005Value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\252\001\n\020roletaid"
    "aoFemale\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\347\216\251\345\256\266\347\255\211\347\272\247\022,"
    "\n\014upgradePoint\030\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\350\216\267\345\276\227\347\202"
    "\271\346\225\260\022J\n\tattribute\030\003 \003(\0132\'.proto_ff.rolet"
    "aidaoFemaleattributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\026"
    "\"Z\n\026Sheet_roletaidaoFemale\022@\n\025roletaidao"
    "Female_List\030\001 \003(\0132\032.proto_ff.roletaidaoF"
    "emaleB\005\210\301\024\320\017\"u\n\007roleexp\022\026\n\002lv\030\001 \001(\005B\n\302\377\024"
    "\006\347\255\211\347\272\247\022/\n\003exp\030\002 \001(\003B\"\302\377\024\036\345\275\223\345\211\215\347\255\211\347\272\247\345\215"
    "\207\347\272\247\351\234\200\350\246\201\347\273\217\351\252\214\022!\n\nskillPoint\030\003 \001(\005B\r\302\377"
    "\024\t\345\244\251\350\265\213\347\202\271\"\?\n\rSheet_roleexp\022.\n\014roleexp_"
    "List\030\001 \003(\0132\021.proto_ff.roleexpB\005\210\301\024\320\017\"S\n\r"
    "roleskillType\022\035\n\007skillId\030\001 \001(\003B\014\302\377\024\010\346\212\200\350"
    "\203\275ID\022#\n\tskillType\030\002 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236"
    "\213\"Q\n\023Sheet_roleskillType\022:\n\022roleskillTyp"
    "e_List\030\001 \003(\0132\027.proto_ff.roleskillTypeB\005\210"
    "\301\024\310\001\"E\n\014roleaddSkill\022\022\n\002Id\030\001 \001(\005B\006\302\377\024\002ID"
    "\022!\n\007skillId\030\002 \001(\003B\020\302\377\024\014\346\212\200\350\203\275\347\261\273\345\236\213\"M\n\022S"
    "heet_roleaddSkill\0227\n\021roleaddSkill_List\030\001"
    " \003(\0132\026.proto_ff.roleaddSkillB\004\210\301\024\024\"M\n\014ro"
    "leworldexp\022\031\n\002lv\030\001 \001(\003B\r\302\377\024\t\347\255\211\347\272\247\345\267\256\022\"\n"
    "\010worldExp\030\002 \001(\005B\020\302\377\024\014\347\273\217\351\252\214\345\212\240\346\210\220\"N\n\022She"
    "et_roleworldexp\0228\n\021roleworldexp_List\030\001 \003"
    "(\0132\026.proto_ff.roleworldexpB\005\210\301\024\330\004", 5353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "role.proto", &protobuf_RegisterTypes);
  rolebornitemDesc::default_instance_ = new rolebornitemDesc();
  rolebornmailDesc::default_instance_ = new rolebornmailDesc();
  roleborn::default_instance_ = new roleborn();
  Sheet_roleborn::default_instance_ = new Sheet_roleborn();
  rolemasterMaleattributeDesc::default_instance_ = new rolemasterMaleattributeDesc();
  rolemasterMale::default_instance_ = new rolemasterMale();
  Sheet_rolemasterMale::default_instance_ = new Sheet_rolemasterMale();
  rolemasterFemaleattributeDesc::default_instance_ = new rolemasterFemaleattributeDesc();
  rolemasterFemale::default_instance_ = new rolemasterFemale();
  Sheet_rolemasterFemale::default_instance_ = new Sheet_rolemasterFemale();
  rolesickleMaleattributeDesc::default_instance_ = new rolesickleMaleattributeDesc();
  rolesickleMale::default_instance_ = new rolesickleMale();
  Sheet_rolesickleMale::default_instance_ = new Sheet_rolesickleMale();
  rolesickleFemaleattributeDesc::default_instance_ = new rolesickleFemaleattributeDesc();
  rolesickleFemale::default_instance_ = new rolesickleFemale();
  Sheet_rolesickleFemale::default_instance_ = new Sheet_rolesickleFemale();
  roleswordMaleattributeDesc::default_instance_ = new roleswordMaleattributeDesc();
  roleswordMale::default_instance_ = new roleswordMale();
  Sheet_roleswordMale::default_instance_ = new Sheet_roleswordMale();
  roleswordFemaleattributeDesc::default_instance_ = new roleswordFemaleattributeDesc();
  roleswordFemale::default_instance_ = new roleswordFemale();
  Sheet_roleswordFemale::default_instance_ = new Sheet_roleswordFemale();
  roletaidaoMaleattributeDesc::default_instance_ = new roletaidaoMaleattributeDesc();
  roletaidaoMale::default_instance_ = new roletaidaoMale();
  Sheet_roletaidaoMale::default_instance_ = new Sheet_roletaidaoMale();
  roletaidaoFemaleattributeDesc::default_instance_ = new roletaidaoFemaleattributeDesc();
  roletaidaoFemale::default_instance_ = new roletaidaoFemale();
  Sheet_roletaidaoFemale::default_instance_ = new Sheet_roletaidaoFemale();
  roleexp::default_instance_ = new roleexp();
  Sheet_roleexp::default_instance_ = new Sheet_roleexp();
  roleskillType::default_instance_ = new roleskillType();
  Sheet_roleskillType::default_instance_ = new Sheet_roleskillType();
  roleaddSkill::default_instance_ = new roleaddSkill();
  Sheet_roleaddSkill::default_instance_ = new Sheet_roleaddSkill();
  roleworldexp::default_instance_ = new roleworldexp();
  Sheet_roleworldexp::default_instance_ = new Sheet_roleworldexp();
  rolebornitemDesc::default_instance_->InitAsDefaultInstance();
  rolebornmailDesc::default_instance_->InitAsDefaultInstance();
  roleborn::default_instance_->InitAsDefaultInstance();
  Sheet_roleborn::default_instance_->InitAsDefaultInstance();
  rolemasterMaleattributeDesc::default_instance_->InitAsDefaultInstance();
  rolemasterMale::default_instance_->InitAsDefaultInstance();
  Sheet_rolemasterMale::default_instance_->InitAsDefaultInstance();
  rolemasterFemaleattributeDesc::default_instance_->InitAsDefaultInstance();
  rolemasterFemale::default_instance_->InitAsDefaultInstance();
  Sheet_rolemasterFemale::default_instance_->InitAsDefaultInstance();
  rolesickleMaleattributeDesc::default_instance_->InitAsDefaultInstance();
  rolesickleMale::default_instance_->InitAsDefaultInstance();
  Sheet_rolesickleMale::default_instance_->InitAsDefaultInstance();
  rolesickleFemaleattributeDesc::default_instance_->InitAsDefaultInstance();
  rolesickleFemale::default_instance_->InitAsDefaultInstance();
  Sheet_rolesickleFemale::default_instance_->InitAsDefaultInstance();
  roleswordMaleattributeDesc::default_instance_->InitAsDefaultInstance();
  roleswordMale::default_instance_->InitAsDefaultInstance();
  Sheet_roleswordMale::default_instance_->InitAsDefaultInstance();
  roleswordFemaleattributeDesc::default_instance_->InitAsDefaultInstance();
  roleswordFemale::default_instance_->InitAsDefaultInstance();
  Sheet_roleswordFemale::default_instance_->InitAsDefaultInstance();
  roletaidaoMaleattributeDesc::default_instance_->InitAsDefaultInstance();
  roletaidaoMale::default_instance_->InitAsDefaultInstance();
  Sheet_roletaidaoMale::default_instance_->InitAsDefaultInstance();
  roletaidaoFemaleattributeDesc::default_instance_->InitAsDefaultInstance();
  roletaidaoFemale::default_instance_->InitAsDefaultInstance();
  Sheet_roletaidaoFemale::default_instance_->InitAsDefaultInstance();
  roleexp::default_instance_->InitAsDefaultInstance();
  Sheet_roleexp::default_instance_->InitAsDefaultInstance();
  roleskillType::default_instance_->InitAsDefaultInstance();
  Sheet_roleskillType::default_instance_->InitAsDefaultInstance();
  roleaddSkill::default_instance_->InitAsDefaultInstance();
  Sheet_roleaddSkill::default_instance_->InitAsDefaultInstance();
  roleworldexp::default_instance_->InitAsDefaultInstance();
  Sheet_roleworldexp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_role_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_role_2eproto {
  StaticDescriptorInitializer_role_2eproto() {
    protobuf_AddDesc_role_2eproto();
  }
} static_descriptor_initializer_role_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rolebornitemDesc::kNumFieldNumber;
const int rolebornitemDesc::kNameFieldNumber;
#endif  // !_MSC_VER

rolebornitemDesc::rolebornitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolebornitemDesc::InitAsDefaultInstance() {
}

rolebornitemDesc::rolebornitemDesc(const rolebornitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolebornitemDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  name_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolebornitemDesc::~rolebornitemDesc() {
  SharedDtor();
}

void rolebornitemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolebornitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolebornitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolebornitemDesc_descriptor_;
}

const rolebornitemDesc& rolebornitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolebornitemDesc* rolebornitemDesc::default_instance_ = NULL;

rolebornitemDesc* rolebornitemDesc::New() const {
  return new rolebornitemDesc;
}

void rolebornitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    name_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolebornitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolebornitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolebornitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolebornitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolebornitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolebornitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolebornitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolebornitemDesc::MergeFrom(const rolebornitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolebornitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolebornitemDesc::CopyFrom(const rolebornitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolebornitemDesc::IsInitialized() const {

  return true;
}

void rolebornitemDesc::Swap(rolebornitemDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolebornitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolebornitemDesc_descriptor_;
  metadata.reflection = rolebornitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolebornmailDesc::kNumFieldNumber;
const int rolebornmailDesc::kNameFieldNumber;
#endif  // !_MSC_VER

rolebornmailDesc::rolebornmailDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolebornmailDesc::InitAsDefaultInstance() {
}

rolebornmailDesc::rolebornmailDesc(const rolebornmailDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolebornmailDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  name_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolebornmailDesc::~rolebornmailDesc() {
  SharedDtor();
}

void rolebornmailDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolebornmailDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolebornmailDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolebornmailDesc_descriptor_;
}

const rolebornmailDesc& rolebornmailDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolebornmailDesc* rolebornmailDesc::default_instance_ = NULL;

rolebornmailDesc* rolebornmailDesc::New() const {
  return new rolebornmailDesc;
}

void rolebornmailDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    name_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolebornmailDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_name;
        break;
      }

      // optional int64 name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolebornmailDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolebornmailDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 name = 2;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolebornmailDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolebornmailDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolebornmailDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolebornmailDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolebornmailDesc::MergeFrom(const rolebornmailDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolebornmailDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolebornmailDesc::CopyFrom(const rolebornmailDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolebornmailDesc::IsInitialized() const {

  return true;
}

void rolebornmailDesc::Swap(rolebornmailDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolebornmailDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolebornmailDesc_descriptor_;
  metadata.reflection = rolebornmailDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleborn::kBornIDFieldNumber;
const int roleborn::kProfessionIDFieldNumber;
const int roleborn::kProfessionNameFieldNumber;
const int roleborn::kPlacementFieldNumber;
const int roleborn::kGenderFieldNumber;
const int roleborn::kBornLevelFieldNumber;
const int roleborn::kBornTitleFieldNumber;
const int roleborn::kDiamondFieldNumber;
const int roleborn::kBindDiamondFieldNumber;
const int roleborn::kGoldFieldNumber;
const int roleborn::kMapIDFieldNumber;
const int roleborn::kBirthFaceFieldNumber;
const int roleborn::kIconsFieldNumber;
const int roleborn::kLoginAvataFieldNumber;
const int roleborn::kNewweaponFieldNumber;
const int roleborn::kNewclothingFieldNumber;
const int roleborn::kWeaponAvataFieldNumber;
const int roleborn::kRoleAvataFieldNumber;
const int roleborn::kHairColorFieldNumber;
const int roleborn::kClothesColorFieldNumber;
const int roleborn::kSkinColorFieldNumber;
const int roleborn::kCarryWeaponsFieldNumber;
const int roleborn::kCarryArmorFieldNumber;
const int roleborn::kCarryCloakFieldNumber;
const int roleborn::kCarryShoesFieldNumber;
const int roleborn::kCarryNecklaceFieldNumber;
const int roleborn::kCarryAmuletFieldNumber;
const int roleborn::kCarryBracerFieldNumber;
const int roleborn::kCarryRingFieldNumber;
const int roleborn::kCarryFashionWeaponsFieldNumber;
const int roleborn::kCarryFashionArmorFieldNumber;
const int roleborn::kCarryWingsFieldNumber;
const int roleborn::kMSpeedFieldNumber;
const int roleborn::kViewFieldNumber;
const int roleborn::kRadiusFieldNumber;
const int roleborn::kGroupFieldNumber;
const int roleborn::kShenyFieldNumber;
const int roleborn::kShenwFieldNumber;
const int roleborn::kActBuffFieldNumber;
const int roleborn::kItemFieldNumber;
const int roleborn::kActSkillFieldNumber;
const int roleborn::kMailFieldNumber;
#endif  // !_MSC_VER

roleborn::roleborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleborn::InitAsDefaultInstance() {
}

roleborn::roleborn(const roleborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleborn::SharedCtor() {
  _cached_size_ = 0;
  bornid_ = GOOGLE_LONGLONG(0);
  professionid_ = 0;
  professionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  placement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gender_ = 0;
  bornlevel_ = 0;
  borntitle_ = 0;
  diamond_ = GOOGLE_LONGLONG(0);
  binddiamond_ = GOOGLE_LONGLONG(0);
  gold_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  birthface_ = 0;
  icons_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newweapon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newclothing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaponavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roleavata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haircolor_ = 0;
  clothescolor_ = 0;
  skincolor_ = 0;
  carryweapons_ = GOOGLE_LONGLONG(0);
  carryarmor_ = GOOGLE_LONGLONG(0);
  carrycloak_ = GOOGLE_LONGLONG(0);
  carryshoes_ = GOOGLE_LONGLONG(0);
  carrynecklace_ = GOOGLE_LONGLONG(0);
  carryamulet_ = GOOGLE_LONGLONG(0);
  carrybracer_ = GOOGLE_LONGLONG(0);
  carryring_ = GOOGLE_LONGLONG(0);
  carryfashionweapons_ = GOOGLE_LONGLONG(0);
  carryfashionarmor_ = GOOGLE_LONGLONG(0);
  carrywings_ = GOOGLE_LONGLONG(0);
  mspeed_ = 0;
  view_ = 0;
  radius_ = 0;
  group_ = 0;
  sheny_ = GOOGLE_LONGLONG(0);
  shenw_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleborn::~roleborn() {
  SharedDtor();
}

void roleborn::SharedDtor() {
  if (professionname_ != &::google::protobuf::internal::kEmptyString) {
    delete professionname_;
  }
  if (placement_ != &::google::protobuf::internal::kEmptyString) {
    delete placement_;
  }
  if (icons_ != &::google::protobuf::internal::kEmptyString) {
    delete icons_;
  }
  if (loginavata_ != &::google::protobuf::internal::kEmptyString) {
    delete loginavata_;
  }
  if (newweapon_ != &::google::protobuf::internal::kEmptyString) {
    delete newweapon_;
  }
  if (newclothing_ != &::google::protobuf::internal::kEmptyString) {
    delete newclothing_;
  }
  if (weaponavata_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponavata_;
  }
  if (roleavata_ != &::google::protobuf::internal::kEmptyString) {
    delete roleavata_;
  }
  if (this != default_instance_) {
  }
}

void roleborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleborn_descriptor_;
}

const roleborn& roleborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleborn* roleborn::default_instance_ = NULL;

roleborn* roleborn::New() const {
  return new roleborn;
}

void roleborn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bornid_ = GOOGLE_LONGLONG(0);
    professionid_ = 0;
    if (has_professionname()) {
      if (professionname_ != &::google::protobuf::internal::kEmptyString) {
        professionname_->clear();
      }
    }
    if (has_placement()) {
      if (placement_ != &::google::protobuf::internal::kEmptyString) {
        placement_->clear();
      }
    }
    gender_ = 0;
    bornlevel_ = 0;
    borntitle_ = 0;
    diamond_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    binddiamond_ = GOOGLE_LONGLONG(0);
    gold_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    birthface_ = 0;
    if (has_icons()) {
      if (icons_ != &::google::protobuf::internal::kEmptyString) {
        icons_->clear();
      }
    }
    if (has_loginavata()) {
      if (loginavata_ != &::google::protobuf::internal::kEmptyString) {
        loginavata_->clear();
      }
    }
    if (has_newweapon()) {
      if (newweapon_ != &::google::protobuf::internal::kEmptyString) {
        newweapon_->clear();
      }
    }
    if (has_newclothing()) {
      if (newclothing_ != &::google::protobuf::internal::kEmptyString) {
        newclothing_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_weaponavata()) {
      if (weaponavata_ != &::google::protobuf::internal::kEmptyString) {
        weaponavata_->clear();
      }
    }
    if (has_roleavata()) {
      if (roleavata_ != &::google::protobuf::internal::kEmptyString) {
        roleavata_->clear();
      }
    }
    haircolor_ = 0;
    clothescolor_ = 0;
    skincolor_ = 0;
    carryweapons_ = GOOGLE_LONGLONG(0);
    carryarmor_ = GOOGLE_LONGLONG(0);
    carrycloak_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    carryshoes_ = GOOGLE_LONGLONG(0);
    carrynecklace_ = GOOGLE_LONGLONG(0);
    carryamulet_ = GOOGLE_LONGLONG(0);
    carrybracer_ = GOOGLE_LONGLONG(0);
    carryring_ = GOOGLE_LONGLONG(0);
    carryfashionweapons_ = GOOGLE_LONGLONG(0);
    carryfashionarmor_ = GOOGLE_LONGLONG(0);
    carrywings_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    mspeed_ = 0;
    view_ = 0;
    radius_ = 0;
    group_ = 0;
    sheny_ = GOOGLE_LONGLONG(0);
    shenw_ = GOOGLE_LONGLONG(0);
  }
  actbuff_.Clear();
  item_.Clear();
  actskill_.Clear();
  mail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 bornID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bornid_)));
          set_has_bornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_professionID;
        break;
      }

      // optional int32 professionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionid_)));
          set_has_professionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_professionName;
        break;
      }

      // optional string professionName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionname().data(), this->professionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_placement;
        break;
      }

      // optional string placement = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->placement().data(), this->placement().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gender;
        break;
      }

      // optional int32 gender = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bornLevel;
        break;
      }

      // optional int32 bornLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bornlevel_)));
          set_has_bornlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bornTitle;
        break;
      }

      // optional int32 bornTitle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borntitle_)));
          set_has_borntitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_diamond;
        break;
      }

      // optional int64 diamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bindDiamond;
        break;
      }

      // optional int64 bindDiamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional int64 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mapID;
        break;
      }

      // optional int64 mapID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_birthFace;
        break;
      }

      // optional int32 birthFace = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &birthface_)));
          set_has_birthface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_icons;
        break;
      }

      // optional string icons = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icons()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icons().data(), this->icons().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_loginAvata;
        break;
      }

      // optional string loginAvata = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginavata().data(), this->loginavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_newweapon;
        break;
      }

      // optional string newweapon = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newweapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newweapon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newweapon().data(), this->newweapon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_newclothing;
        break;
      }

      // optional string newclothing = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newclothing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newclothing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->newclothing().data(), this->newclothing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_weaponAvata;
        break;
      }

      // optional string weaponAvata = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaponAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaponavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->weaponavata().data(), this->weaponavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_roleAvata;
        break;
      }

      // optional string roleAvata = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleAvata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roleavata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roleavata().data(), this->roleavata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hairColor;
        break;
      }

      // optional int32 hairColor = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hairColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_clothesColor;
        break;
      }

      // optional int32 clothesColor = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothesColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothescolor_)));
          set_has_clothescolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_skinColor;
        break;
      }

      // optional int32 skinColor = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skinColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skincolor_)));
          set_has_skincolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_carryWeapons;
        break;
      }

      // optional int64 carryWeapons = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryWeapons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryweapons_)));
          set_has_carryweapons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_carryArmor;
        break;
      }

      // optional int64 carryArmor = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryarmor_)));
          set_has_carryarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_carryCloak;
        break;
      }

      // optional int64 carryCloak = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryCloak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrycloak_)));
          set_has_carrycloak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_carryShoes;
        break;
      }

      // optional int64 carryShoes = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryShoes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryshoes_)));
          set_has_carryshoes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_carryNecklace;
        break;
      }

      // optional int64 carryNecklace = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryNecklace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrynecklace_)));
          set_has_carrynecklace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_carryAmulet;
        break;
      }

      // optional int64 carryAmulet = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryAmulet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryamulet_)));
          set_has_carryamulet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_carryBracer;
        break;
      }

      // optional int64 carryBracer = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryBracer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrybracer_)));
          set_has_carrybracer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_carryRing;
        break;
      }

      // optional int64 carryRing = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryRing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryring_)));
          set_has_carryring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_carryFashionWeapons;
        break;
      }

      // optional int64 carryFashionWeapons = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryFashionWeapons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryfashionweapons_)));
          set_has_carryfashionweapons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_carryFashionArmor;
        break;
      }

      // optional int64 carryFashionArmor = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryFashionArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carryfashionarmor_)));
          set_has_carryfashionarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_carryWings;
        break;
      }

      // optional int64 carryWings = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carryWings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &carrywings_)));
          set_has_carrywings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_mSpeed;
        break;
      }

      // optional int32 mSpeed = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mspeed_)));
          set_has_mspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_view;
        break;
      }

      // optional int32 view = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_)));
          set_has_view();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_radius;
        break;
      }

      // optional int32 radius = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_group;
        break;
      }

      // optional int32 group = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_sheny;
        break;
      }

      // optional int64 sheny = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sheny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sheny_)));
          set_has_sheny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_shenw;
        break;
      }

      // optional int64 shenw = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shenw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shenw_)));
          set_has_shenw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_actBuff;
        break;
      }

      // repeated int32 actBuff = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 312, input, this->mutable_actbuff())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_actbuff())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_actBuff;
        if (input->ExpectTag(322)) goto parse_item;
        break;
      }

      // repeated .proto_ff.rolebornitemDesc item = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_item;
        if (input->ExpectTag(328)) goto parse_actSkill;
        break;
      }

      // repeated int64 actSkill = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 328, input, this->mutable_actskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_actskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_actSkill;
        if (input->ExpectTag(338)) goto parse_mail;
        break;
      }

      // repeated .proto_ff.rolebornmailDesc mail = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_mail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 bornID = 1;
  if (has_bornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bornid(), output);
  }

  // optional int32 professionID = 2;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->professionid(), output);
  }

  // optional string professionName = 3;
  if (has_professionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionname().data(), this->professionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->professionname(), output);
  }

  // optional string placement = 4;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placement().data(), this->placement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->placement(), output);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gender(), output);
  }

  // optional int32 bornLevel = 6;
  if (has_bornlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bornlevel(), output);
  }

  // optional int32 bornTitle = 7;
  if (has_borntitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->borntitle(), output);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->diamond(), output);
  }

  // optional int64 bindDiamond = 9;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->binddiamond(), output);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->gold(), output);
  }

  // optional int64 mapID = 11;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mapid(), output);
  }

  // optional int32 birthFace = 12;
  if (has_birthface()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->birthface(), output);
  }

  // optional string icons = 13;
  if (has_icons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icons().data(), this->icons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->icons(), output);
  }

  // optional string loginAvata = 14;
  if (has_loginavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginavata().data(), this->loginavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->loginavata(), output);
  }

  // optional string newweapon = 15;
  if (has_newweapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newweapon().data(), this->newweapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->newweapon(), output);
  }

  // optional string newclothing = 16;
  if (has_newclothing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newclothing().data(), this->newclothing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->newclothing(), output);
  }

  // optional string weaponAvata = 17;
  if (has_weaponavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaponavata().data(), this->weaponavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->weaponavata(), output);
  }

  // optional string roleAvata = 18;
  if (has_roleavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleavata().data(), this->roleavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->roleavata(), output);
  }

  // optional int32 hairColor = 19;
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->haircolor(), output);
  }

  // optional int32 clothesColor = 20;
  if (has_clothescolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->clothescolor(), output);
  }

  // optional int32 skinColor = 21;
  if (has_skincolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->skincolor(), output);
  }

  // optional int64 carryWeapons = 22;
  if (has_carryweapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->carryweapons(), output);
  }

  // optional int64 carryArmor = 23;
  if (has_carryarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(23, this->carryarmor(), output);
  }

  // optional int64 carryCloak = 24;
  if (has_carrycloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(24, this->carrycloak(), output);
  }

  // optional int64 carryShoes = 25;
  if (has_carryshoes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->carryshoes(), output);
  }

  // optional int64 carryNecklace = 26;
  if (has_carrynecklace()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->carrynecklace(), output);
  }

  // optional int64 carryAmulet = 27;
  if (has_carryamulet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->carryamulet(), output);
  }

  // optional int64 carryBracer = 28;
  if (has_carrybracer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->carrybracer(), output);
  }

  // optional int64 carryRing = 29;
  if (has_carryring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->carryring(), output);
  }

  // optional int64 carryFashionWeapons = 30;
  if (has_carryfashionweapons()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->carryfashionweapons(), output);
  }

  // optional int64 carryFashionArmor = 31;
  if (has_carryfashionarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->carryfashionarmor(), output);
  }

  // optional int64 carryWings = 32;
  if (has_carrywings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->carrywings(), output);
  }

  // optional int32 mSpeed = 33;
  if (has_mspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->mspeed(), output);
  }

  // optional int32 view = 34;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->view(), output);
  }

  // optional int32 radius = 35;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->radius(), output);
  }

  // optional int32 group = 36;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->group(), output);
  }

  // optional int64 sheny = 37;
  if (has_sheny()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->sheny(), output);
  }

  // optional int64 shenw = 38;
  if (has_shenw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->shenw(), output);
  }

  // repeated int32 actBuff = 39;
  for (int i = 0; i < this->actbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      39, this->actbuff(i), output);
  }

  // repeated .proto_ff.rolebornitemDesc item = 40;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->item(i), output);
  }

  // repeated int64 actSkill = 41;
  for (int i = 0; i < this->actskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      41, this->actskill(i), output);
  }

  // repeated .proto_ff.rolebornmailDesc mail = 42;
  for (int i = 0; i < this->mail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->mail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 bornID = 1;
  if (has_bornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bornid(), target);
  }

  // optional int32 professionID = 2;
  if (has_professionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->professionid(), target);
  }

  // optional string professionName = 3;
  if (has_professionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionname().data(), this->professionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->professionname(), target);
  }

  // optional string placement = 4;
  if (has_placement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->placement().data(), this->placement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->placement(), target);
  }

  // optional int32 gender = 5;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gender(), target);
  }

  // optional int32 bornLevel = 6;
  if (has_bornlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bornlevel(), target);
  }

  // optional int32 bornTitle = 7;
  if (has_borntitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->borntitle(), target);
  }

  // optional int64 diamond = 8;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->diamond(), target);
  }

  // optional int64 bindDiamond = 9;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->binddiamond(), target);
  }

  // optional int64 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->gold(), target);
  }

  // optional int64 mapID = 11;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mapid(), target);
  }

  // optional int32 birthFace = 12;
  if (has_birthface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->birthface(), target);
  }

  // optional string icons = 13;
  if (has_icons()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icons().data(), this->icons().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->icons(), target);
  }

  // optional string loginAvata = 14;
  if (has_loginavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginavata().data(), this->loginavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->loginavata(), target);
  }

  // optional string newweapon = 15;
  if (has_newweapon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newweapon().data(), this->newweapon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->newweapon(), target);
  }

  // optional string newclothing = 16;
  if (has_newclothing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->newclothing().data(), this->newclothing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->newclothing(), target);
  }

  // optional string weaponAvata = 17;
  if (has_weaponavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->weaponavata().data(), this->weaponavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->weaponavata(), target);
  }

  // optional string roleAvata = 18;
  if (has_roleavata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roleavata().data(), this->roleavata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->roleavata(), target);
  }

  // optional int32 hairColor = 19;
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->haircolor(), target);
  }

  // optional int32 clothesColor = 20;
  if (has_clothescolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->clothescolor(), target);
  }

  // optional int32 skinColor = 21;
  if (has_skincolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->skincolor(), target);
  }

  // optional int64 carryWeapons = 22;
  if (has_carryweapons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->carryweapons(), target);
  }

  // optional int64 carryArmor = 23;
  if (has_carryarmor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(23, this->carryarmor(), target);
  }

  // optional int64 carryCloak = 24;
  if (has_carrycloak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(24, this->carrycloak(), target);
  }

  // optional int64 carryShoes = 25;
  if (has_carryshoes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->carryshoes(), target);
  }

  // optional int64 carryNecklace = 26;
  if (has_carrynecklace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->carrynecklace(), target);
  }

  // optional int64 carryAmulet = 27;
  if (has_carryamulet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->carryamulet(), target);
  }

  // optional int64 carryBracer = 28;
  if (has_carrybracer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->carrybracer(), target);
  }

  // optional int64 carryRing = 29;
  if (has_carryring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->carryring(), target);
  }

  // optional int64 carryFashionWeapons = 30;
  if (has_carryfashionweapons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->carryfashionweapons(), target);
  }

  // optional int64 carryFashionArmor = 31;
  if (has_carryfashionarmor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->carryfashionarmor(), target);
  }

  // optional int64 carryWings = 32;
  if (has_carrywings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->carrywings(), target);
  }

  // optional int32 mSpeed = 33;
  if (has_mspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->mspeed(), target);
  }

  // optional int32 view = 34;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->view(), target);
  }

  // optional int32 radius = 35;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->radius(), target);
  }

  // optional int32 group = 36;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->group(), target);
  }

  // optional int64 sheny = 37;
  if (has_sheny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->sheny(), target);
  }

  // optional int64 shenw = 38;
  if (has_shenw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->shenw(), target);
  }

  // repeated int32 actBuff = 39;
  for (int i = 0; i < this->actbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(39, this->actbuff(i), target);
  }

  // repeated .proto_ff.rolebornitemDesc item = 40;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->item(i), target);
  }

  // repeated int64 actSkill = 41;
  for (int i = 0; i < this->actskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(41, this->actskill(i), target);
  }

  // repeated .proto_ff.rolebornmailDesc mail = 42;
  for (int i = 0; i < this->mail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->mail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 bornID = 1;
    if (has_bornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bornid());
    }

    // optional int32 professionID = 2;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionid());
    }

    // optional string professionName = 3;
    if (has_professionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionname());
    }

    // optional string placement = 4;
    if (has_placement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placement());
    }

    // optional int32 gender = 5;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional int32 bornLevel = 6;
    if (has_bornlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bornlevel());
    }

    // optional int32 bornTitle = 7;
    if (has_borntitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->borntitle());
    }

    // optional int64 diamond = 8;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->diamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 bindDiamond = 9;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->binddiamond());
    }

    // optional int64 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 mapID = 11;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 birthFace = 12;
    if (has_birthface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->birthface());
    }

    // optional string icons = 13;
    if (has_icons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icons());
    }

    // optional string loginAvata = 14;
    if (has_loginavata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginavata());
    }

    // optional string newweapon = 15;
    if (has_newweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newweapon());
    }

    // optional string newclothing = 16;
    if (has_newclothing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newclothing());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string weaponAvata = 17;
    if (has_weaponavata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaponavata());
    }

    // optional string roleAvata = 18;
    if (has_roleavata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roleavata());
    }

    // optional int32 hairColor = 19;
    if (has_haircolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->haircolor());
    }

    // optional int32 clothesColor = 20;
    if (has_clothescolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothescolor());
    }

    // optional int32 skinColor = 21;
    if (has_skincolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skincolor());
    }

    // optional int64 carryWeapons = 22;
    if (has_carryweapons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryweapons());
    }

    // optional int64 carryArmor = 23;
    if (has_carryarmor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryarmor());
    }

    // optional int64 carryCloak = 24;
    if (has_carrycloak()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrycloak());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 carryShoes = 25;
    if (has_carryshoes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryshoes());
    }

    // optional int64 carryNecklace = 26;
    if (has_carrynecklace()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrynecklace());
    }

    // optional int64 carryAmulet = 27;
    if (has_carryamulet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryamulet());
    }

    // optional int64 carryBracer = 28;
    if (has_carrybracer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrybracer());
    }

    // optional int64 carryRing = 29;
    if (has_carryring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryring());
    }

    // optional int64 carryFashionWeapons = 30;
    if (has_carryfashionweapons()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryfashionweapons());
    }

    // optional int64 carryFashionArmor = 31;
    if (has_carryfashionarmor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carryfashionarmor());
    }

    // optional int64 carryWings = 32;
    if (has_carrywings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->carrywings());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 mSpeed = 33;
    if (has_mspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mspeed());
    }

    // optional int32 view = 34;
    if (has_view()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view());
    }

    // optional int32 radius = 35;
    if (has_radius()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radius());
    }

    // optional int32 group = 36;
    if (has_group()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int64 sheny = 37;
    if (has_sheny()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sheny());
    }

    // optional int64 shenw = 38;
    if (has_shenw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shenw());
    }

  }
  // repeated int32 actBuff = 39;
  {
    int data_size = 0;
    for (int i = 0; i < this->actbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->actbuff(i));
    }
    total_size += 2 * this->actbuff_size() + data_size;
  }

  // repeated .proto_ff.rolebornitemDesc item = 40;
  total_size += 2 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated int64 actSkill = 41;
  {
    int data_size = 0;
    for (int i = 0; i < this->actskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->actskill(i));
    }
    total_size += 2 * this->actskill_size() + data_size;
  }

  // repeated .proto_ff.rolebornmailDesc mail = 42;
  total_size += 2 * this->mail_size();
  for (int i = 0; i < this->mail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleborn::MergeFrom(const roleborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  actbuff_.MergeFrom(from.actbuff_);
  item_.MergeFrom(from.item_);
  actskill_.MergeFrom(from.actskill_);
  mail_.MergeFrom(from.mail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bornid()) {
      set_bornid(from.bornid());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_professionname()) {
      set_professionname(from.professionname());
    }
    if (from.has_placement()) {
      set_placement(from.placement());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_bornlevel()) {
      set_bornlevel(from.bornlevel());
    }
    if (from.has_borntitle()) {
      set_borntitle(from.borntitle());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_birthface()) {
      set_birthface(from.birthface());
    }
    if (from.has_icons()) {
      set_icons(from.icons());
    }
    if (from.has_loginavata()) {
      set_loginavata(from.loginavata());
    }
    if (from.has_newweapon()) {
      set_newweapon(from.newweapon());
    }
    if (from.has_newclothing()) {
      set_newclothing(from.newclothing());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_weaponavata()) {
      set_weaponavata(from.weaponavata());
    }
    if (from.has_roleavata()) {
      set_roleavata(from.roleavata());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_clothescolor()) {
      set_clothescolor(from.clothescolor());
    }
    if (from.has_skincolor()) {
      set_skincolor(from.skincolor());
    }
    if (from.has_carryweapons()) {
      set_carryweapons(from.carryweapons());
    }
    if (from.has_carryarmor()) {
      set_carryarmor(from.carryarmor());
    }
    if (from.has_carrycloak()) {
      set_carrycloak(from.carrycloak());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_carryshoes()) {
      set_carryshoes(from.carryshoes());
    }
    if (from.has_carrynecklace()) {
      set_carrynecklace(from.carrynecklace());
    }
    if (from.has_carryamulet()) {
      set_carryamulet(from.carryamulet());
    }
    if (from.has_carrybracer()) {
      set_carrybracer(from.carrybracer());
    }
    if (from.has_carryring()) {
      set_carryring(from.carryring());
    }
    if (from.has_carryfashionweapons()) {
      set_carryfashionweapons(from.carryfashionweapons());
    }
    if (from.has_carryfashionarmor()) {
      set_carryfashionarmor(from.carryfashionarmor());
    }
    if (from.has_carrywings()) {
      set_carrywings(from.carrywings());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_mspeed()) {
      set_mspeed(from.mspeed());
    }
    if (from.has_view()) {
      set_view(from.view());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_sheny()) {
      set_sheny(from.sheny());
    }
    if (from.has_shenw()) {
      set_shenw(from.shenw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleborn::CopyFrom(const roleborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleborn::IsInitialized() const {

  return true;
}

void roleborn::Swap(roleborn* other) {
  if (other != this) {
    std::swap(bornid_, other->bornid_);
    std::swap(professionid_, other->professionid_);
    std::swap(professionname_, other->professionname_);
    std::swap(placement_, other->placement_);
    std::swap(gender_, other->gender_);
    std::swap(bornlevel_, other->bornlevel_);
    std::swap(borntitle_, other->borntitle_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(gold_, other->gold_);
    std::swap(mapid_, other->mapid_);
    std::swap(birthface_, other->birthface_);
    std::swap(icons_, other->icons_);
    std::swap(loginavata_, other->loginavata_);
    std::swap(newweapon_, other->newweapon_);
    std::swap(newclothing_, other->newclothing_);
    std::swap(weaponavata_, other->weaponavata_);
    std::swap(roleavata_, other->roleavata_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(clothescolor_, other->clothescolor_);
    std::swap(skincolor_, other->skincolor_);
    std::swap(carryweapons_, other->carryweapons_);
    std::swap(carryarmor_, other->carryarmor_);
    std::swap(carrycloak_, other->carrycloak_);
    std::swap(carryshoes_, other->carryshoes_);
    std::swap(carrynecklace_, other->carrynecklace_);
    std::swap(carryamulet_, other->carryamulet_);
    std::swap(carrybracer_, other->carrybracer_);
    std::swap(carryring_, other->carryring_);
    std::swap(carryfashionweapons_, other->carryfashionweapons_);
    std::swap(carryfashionarmor_, other->carryfashionarmor_);
    std::swap(carrywings_, other->carrywings_);
    std::swap(mspeed_, other->mspeed_);
    std::swap(view_, other->view_);
    std::swap(radius_, other->radius_);
    std::swap(group_, other->group_);
    std::swap(sheny_, other->sheny_);
    std::swap(shenw_, other->shenw_);
    actbuff_.Swap(&other->actbuff_);
    item_.Swap(&other->item_);
    actskill_.Swap(&other->actskill_);
    mail_.Swap(&other->mail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleborn_descriptor_;
  metadata.reflection = roleborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleborn::kRolebornListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleborn::Sheet_roleborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleborn::InitAsDefaultInstance() {
}

Sheet_roleborn::Sheet_roleborn(const Sheet_roleborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleborn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleborn::~Sheet_roleborn() {
  SharedDtor();
}

void Sheet_roleborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleborn_descriptor_;
}

const Sheet_roleborn& Sheet_roleborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleborn* Sheet_roleborn::default_instance_ = NULL;

Sheet_roleborn* Sheet_roleborn::New() const {
  return new Sheet_roleborn;
}

void Sheet_roleborn::Clear() {
  roleborn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleborn roleborn_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleborn_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleborn_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleborn_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleborn roleborn_List = 1;
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleborn_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleborn roleborn_List = 1;
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleborn_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleborn::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleborn roleborn_List = 1;
  total_size += 1 * this->roleborn_list_size();
  for (int i = 0; i < this->roleborn_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleborn_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleborn::MergeFrom(const Sheet_roleborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleborn_list_.MergeFrom(from.roleborn_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleborn::CopyFrom(const Sheet_roleborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleborn::IsInitialized() const {

  return true;
}

void Sheet_roleborn::Swap(Sheet_roleborn* other) {
  if (other != this) {
    roleborn_list_.Swap(&other->roleborn_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleborn_descriptor_;
  metadata.reflection = Sheet_roleborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemasterMaleattributeDesc::kTypeFieldNumber;
const int rolemasterMaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolemasterMaleattributeDesc::rolemasterMaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemasterMaleattributeDesc::InitAsDefaultInstance() {
}

rolemasterMaleattributeDesc::rolemasterMaleattributeDesc(const rolemasterMaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemasterMaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemasterMaleattributeDesc::~rolemasterMaleattributeDesc() {
  SharedDtor();
}

void rolemasterMaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemasterMaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemasterMaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemasterMaleattributeDesc_descriptor_;
}

const rolemasterMaleattributeDesc& rolemasterMaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemasterMaleattributeDesc* rolemasterMaleattributeDesc::default_instance_ = NULL;

rolemasterMaleattributeDesc* rolemasterMaleattributeDesc::New() const {
  return new rolemasterMaleattributeDesc;
}

void rolemasterMaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemasterMaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemasterMaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemasterMaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemasterMaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemasterMaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemasterMaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemasterMaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemasterMaleattributeDesc::MergeFrom(const rolemasterMaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemasterMaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemasterMaleattributeDesc::CopyFrom(const rolemasterMaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemasterMaleattributeDesc::IsInitialized() const {

  return true;
}

void rolemasterMaleattributeDesc::Swap(rolemasterMaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemasterMaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemasterMaleattributeDesc_descriptor_;
  metadata.reflection = rolemasterMaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemasterMale::kLvFieldNumber;
const int rolemasterMale::kUpgradePointFieldNumber;
const int rolemasterMale::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolemasterMale::rolemasterMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemasterMale::InitAsDefaultInstance() {
}

rolemasterMale::rolemasterMale(const rolemasterMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemasterMale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemasterMale::~rolemasterMale() {
  SharedDtor();
}

void rolemasterMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemasterMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemasterMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemasterMale_descriptor_;
}

const rolemasterMale& rolemasterMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemasterMale* rolemasterMale::default_instance_ = NULL;

rolemasterMale* rolemasterMale::New() const {
  return new rolemasterMale;
}

void rolemasterMale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemasterMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolemasterMaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemasterMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolemasterMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemasterMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolemasterMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemasterMale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolemasterMaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemasterMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemasterMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemasterMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemasterMale::MergeFrom(const rolemasterMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemasterMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemasterMale::CopyFrom(const rolemasterMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemasterMale::IsInitialized() const {

  return true;
}

void rolemasterMale::Swap(rolemasterMale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemasterMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemasterMale_descriptor_;
  metadata.reflection = rolemasterMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolemasterMale::kRolemasterMaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolemasterMale::Sheet_rolemasterMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolemasterMale::InitAsDefaultInstance() {
}

Sheet_rolemasterMale::Sheet_rolemasterMale(const Sheet_rolemasterMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolemasterMale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolemasterMale::~Sheet_rolemasterMale() {
  SharedDtor();
}

void Sheet_rolemasterMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolemasterMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolemasterMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolemasterMale_descriptor_;
}

const Sheet_rolemasterMale& Sheet_rolemasterMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolemasterMale* Sheet_rolemasterMale::default_instance_ = NULL;

Sheet_rolemasterMale* Sheet_rolemasterMale::New() const {
  return new Sheet_rolemasterMale;
}

void Sheet_rolemasterMale::Clear() {
  rolemastermale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolemasterMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolemasterMale rolemasterMale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolemasterMale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolemastermale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolemasterMale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolemasterMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolemasterMale rolemasterMale_List = 1;
  for (int i = 0; i < this->rolemastermale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolemastermale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolemasterMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolemasterMale rolemasterMale_List = 1;
  for (int i = 0; i < this->rolemastermale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolemastermale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolemasterMale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolemasterMale rolemasterMale_List = 1;
  total_size += 1 * this->rolemastermale_list_size();
  for (int i = 0; i < this->rolemastermale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolemastermale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolemasterMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolemasterMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolemasterMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolemasterMale::MergeFrom(const Sheet_rolemasterMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolemastermale_list_.MergeFrom(from.rolemastermale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolemasterMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolemasterMale::CopyFrom(const Sheet_rolemasterMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolemasterMale::IsInitialized() const {

  return true;
}

void Sheet_rolemasterMale::Swap(Sheet_rolemasterMale* other) {
  if (other != this) {
    rolemastermale_list_.Swap(&other->rolemastermale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolemasterMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolemasterMale_descriptor_;
  metadata.reflection = Sheet_rolemasterMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemasterFemaleattributeDesc::kTypeFieldNumber;
const int rolemasterFemaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolemasterFemaleattributeDesc::rolemasterFemaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemasterFemaleattributeDesc::InitAsDefaultInstance() {
}

rolemasterFemaleattributeDesc::rolemasterFemaleattributeDesc(const rolemasterFemaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemasterFemaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemasterFemaleattributeDesc::~rolemasterFemaleattributeDesc() {
  SharedDtor();
}

void rolemasterFemaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemasterFemaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemasterFemaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemasterFemaleattributeDesc_descriptor_;
}

const rolemasterFemaleattributeDesc& rolemasterFemaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemasterFemaleattributeDesc* rolemasterFemaleattributeDesc::default_instance_ = NULL;

rolemasterFemaleattributeDesc* rolemasterFemaleattributeDesc::New() const {
  return new rolemasterFemaleattributeDesc;
}

void rolemasterFemaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemasterFemaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemasterFemaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemasterFemaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemasterFemaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemasterFemaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemasterFemaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemasterFemaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemasterFemaleattributeDesc::MergeFrom(const rolemasterFemaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemasterFemaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemasterFemaleattributeDesc::CopyFrom(const rolemasterFemaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemasterFemaleattributeDesc::IsInitialized() const {

  return true;
}

void rolemasterFemaleattributeDesc::Swap(rolemasterFemaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemasterFemaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemasterFemaleattributeDesc_descriptor_;
  metadata.reflection = rolemasterFemaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolemasterFemale::kLvFieldNumber;
const int rolemasterFemale::kUpgradePointFieldNumber;
const int rolemasterFemale::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolemasterFemale::rolemasterFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolemasterFemale::InitAsDefaultInstance() {
}

rolemasterFemale::rolemasterFemale(const rolemasterFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolemasterFemale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolemasterFemale::~rolemasterFemale() {
  SharedDtor();
}

void rolemasterFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolemasterFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolemasterFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolemasterFemale_descriptor_;
}

const rolemasterFemale& rolemasterFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolemasterFemale* rolemasterFemale::default_instance_ = NULL;

rolemasterFemale* rolemasterFemale::New() const {
  return new rolemasterFemale;
}

void rolemasterFemale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolemasterFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolemasterFemaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolemasterFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolemasterFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolemasterFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolemasterFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolemasterFemale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolemasterFemaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolemasterFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolemasterFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolemasterFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolemasterFemale::MergeFrom(const rolemasterFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolemasterFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolemasterFemale::CopyFrom(const rolemasterFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolemasterFemale::IsInitialized() const {

  return true;
}

void rolemasterFemale::Swap(rolemasterFemale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolemasterFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolemasterFemale_descriptor_;
  metadata.reflection = rolemasterFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolemasterFemale::kRolemasterFemaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolemasterFemale::Sheet_rolemasterFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolemasterFemale::InitAsDefaultInstance() {
}

Sheet_rolemasterFemale::Sheet_rolemasterFemale(const Sheet_rolemasterFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolemasterFemale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolemasterFemale::~Sheet_rolemasterFemale() {
  SharedDtor();
}

void Sheet_rolemasterFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolemasterFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolemasterFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolemasterFemale_descriptor_;
}

const Sheet_rolemasterFemale& Sheet_rolemasterFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolemasterFemale* Sheet_rolemasterFemale::default_instance_ = NULL;

Sheet_rolemasterFemale* Sheet_rolemasterFemale::New() const {
  return new Sheet_rolemasterFemale;
}

void Sheet_rolemasterFemale::Clear() {
  rolemasterfemale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolemasterFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolemasterFemale rolemasterFemale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolemasterFemale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolemasterfemale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolemasterFemale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolemasterFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolemasterFemale rolemasterFemale_List = 1;
  for (int i = 0; i < this->rolemasterfemale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolemasterfemale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolemasterFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolemasterFemale rolemasterFemale_List = 1;
  for (int i = 0; i < this->rolemasterfemale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolemasterfemale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolemasterFemale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolemasterFemale rolemasterFemale_List = 1;
  total_size += 1 * this->rolemasterfemale_list_size();
  for (int i = 0; i < this->rolemasterfemale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolemasterfemale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolemasterFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolemasterFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolemasterFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolemasterFemale::MergeFrom(const Sheet_rolemasterFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolemasterfemale_list_.MergeFrom(from.rolemasterfemale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolemasterFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolemasterFemale::CopyFrom(const Sheet_rolemasterFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolemasterFemale::IsInitialized() const {

  return true;
}

void Sheet_rolemasterFemale::Swap(Sheet_rolemasterFemale* other) {
  if (other != this) {
    rolemasterfemale_list_.Swap(&other->rolemasterfemale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolemasterFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolemasterFemale_descriptor_;
  metadata.reflection = Sheet_rolemasterFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolesickleMaleattributeDesc::kTypeFieldNumber;
const int rolesickleMaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolesickleMaleattributeDesc::rolesickleMaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolesickleMaleattributeDesc::InitAsDefaultInstance() {
}

rolesickleMaleattributeDesc::rolesickleMaleattributeDesc(const rolesickleMaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolesickleMaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolesickleMaleattributeDesc::~rolesickleMaleattributeDesc() {
  SharedDtor();
}

void rolesickleMaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolesickleMaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolesickleMaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolesickleMaleattributeDesc_descriptor_;
}

const rolesickleMaleattributeDesc& rolesickleMaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolesickleMaleattributeDesc* rolesickleMaleattributeDesc::default_instance_ = NULL;

rolesickleMaleattributeDesc* rolesickleMaleattributeDesc::New() const {
  return new rolesickleMaleattributeDesc;
}

void rolesickleMaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolesickleMaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolesickleMaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolesickleMaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolesickleMaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolesickleMaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolesickleMaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolesickleMaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolesickleMaleattributeDesc::MergeFrom(const rolesickleMaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolesickleMaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolesickleMaleattributeDesc::CopyFrom(const rolesickleMaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolesickleMaleattributeDesc::IsInitialized() const {

  return true;
}

void rolesickleMaleattributeDesc::Swap(rolesickleMaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolesickleMaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolesickleMaleattributeDesc_descriptor_;
  metadata.reflection = rolesickleMaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolesickleMale::kLvFieldNumber;
const int rolesickleMale::kUpgradePointFieldNumber;
const int rolesickleMale::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolesickleMale::rolesickleMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolesickleMale::InitAsDefaultInstance() {
}

rolesickleMale::rolesickleMale(const rolesickleMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolesickleMale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolesickleMale::~rolesickleMale() {
  SharedDtor();
}

void rolesickleMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolesickleMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolesickleMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolesickleMale_descriptor_;
}

const rolesickleMale& rolesickleMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolesickleMale* rolesickleMale::default_instance_ = NULL;

rolesickleMale* rolesickleMale::New() const {
  return new rolesickleMale;
}

void rolesickleMale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolesickleMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolesickleMaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolesickleMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolesickleMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolesickleMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolesickleMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolesickleMale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolesickleMaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolesickleMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolesickleMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolesickleMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolesickleMale::MergeFrom(const rolesickleMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolesickleMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolesickleMale::CopyFrom(const rolesickleMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolesickleMale::IsInitialized() const {

  return true;
}

void rolesickleMale::Swap(rolesickleMale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolesickleMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolesickleMale_descriptor_;
  metadata.reflection = rolesickleMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolesickleMale::kRolesickleMaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolesickleMale::Sheet_rolesickleMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolesickleMale::InitAsDefaultInstance() {
}

Sheet_rolesickleMale::Sheet_rolesickleMale(const Sheet_rolesickleMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolesickleMale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolesickleMale::~Sheet_rolesickleMale() {
  SharedDtor();
}

void Sheet_rolesickleMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolesickleMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolesickleMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolesickleMale_descriptor_;
}

const Sheet_rolesickleMale& Sheet_rolesickleMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolesickleMale* Sheet_rolesickleMale::default_instance_ = NULL;

Sheet_rolesickleMale* Sheet_rolesickleMale::New() const {
  return new Sheet_rolesickleMale;
}

void Sheet_rolesickleMale::Clear() {
  rolesicklemale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolesickleMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolesickleMale rolesickleMale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolesickleMale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolesicklemale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolesickleMale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolesickleMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolesickleMale rolesickleMale_List = 1;
  for (int i = 0; i < this->rolesicklemale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolesicklemale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolesickleMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolesickleMale rolesickleMale_List = 1;
  for (int i = 0; i < this->rolesicklemale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolesicklemale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolesickleMale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolesickleMale rolesickleMale_List = 1;
  total_size += 1 * this->rolesicklemale_list_size();
  for (int i = 0; i < this->rolesicklemale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolesicklemale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolesickleMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolesickleMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolesickleMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolesickleMale::MergeFrom(const Sheet_rolesickleMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolesicklemale_list_.MergeFrom(from.rolesicklemale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolesickleMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolesickleMale::CopyFrom(const Sheet_rolesickleMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolesickleMale::IsInitialized() const {

  return true;
}

void Sheet_rolesickleMale::Swap(Sheet_rolesickleMale* other) {
  if (other != this) {
    rolesicklemale_list_.Swap(&other->rolesicklemale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolesickleMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolesickleMale_descriptor_;
  metadata.reflection = Sheet_rolesickleMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolesickleFemaleattributeDesc::kTypeFieldNumber;
const int rolesickleFemaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

rolesickleFemaleattributeDesc::rolesickleFemaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolesickleFemaleattributeDesc::InitAsDefaultInstance() {
}

rolesickleFemaleattributeDesc::rolesickleFemaleattributeDesc(const rolesickleFemaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolesickleFemaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolesickleFemaleattributeDesc::~rolesickleFemaleattributeDesc() {
  SharedDtor();
}

void rolesickleFemaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolesickleFemaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolesickleFemaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolesickleFemaleattributeDesc_descriptor_;
}

const rolesickleFemaleattributeDesc& rolesickleFemaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolesickleFemaleattributeDesc* rolesickleFemaleattributeDesc::default_instance_ = NULL;

rolesickleFemaleattributeDesc* rolesickleFemaleattributeDesc::New() const {
  return new rolesickleFemaleattributeDesc;
}

void rolesickleFemaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolesickleFemaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolesickleFemaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolesickleFemaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolesickleFemaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolesickleFemaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolesickleFemaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolesickleFemaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolesickleFemaleattributeDesc::MergeFrom(const rolesickleFemaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolesickleFemaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolesickleFemaleattributeDesc::CopyFrom(const rolesickleFemaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolesickleFemaleattributeDesc::IsInitialized() const {

  return true;
}

void rolesickleFemaleattributeDesc::Swap(rolesickleFemaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolesickleFemaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolesickleFemaleattributeDesc_descriptor_;
  metadata.reflection = rolesickleFemaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rolesickleFemale::kLvFieldNumber;
const int rolesickleFemale::kUpgradePointFieldNumber;
const int rolesickleFemale::kAttributeFieldNumber;
#endif  // !_MSC_VER

rolesickleFemale::rolesickleFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rolesickleFemale::InitAsDefaultInstance() {
}

rolesickleFemale::rolesickleFemale(const rolesickleFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rolesickleFemale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rolesickleFemale::~rolesickleFemale() {
  SharedDtor();
}

void rolesickleFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rolesickleFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rolesickleFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rolesickleFemale_descriptor_;
}

const rolesickleFemale& rolesickleFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

rolesickleFemale* rolesickleFemale::default_instance_ = NULL;

rolesickleFemale* rolesickleFemale::New() const {
  return new rolesickleFemale;
}

void rolesickleFemale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rolesickleFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.rolesickleFemaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rolesickleFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.rolesickleFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rolesickleFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.rolesickleFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rolesickleFemale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.rolesickleFemaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rolesickleFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rolesickleFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rolesickleFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rolesickleFemale::MergeFrom(const rolesickleFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rolesickleFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rolesickleFemale::CopyFrom(const rolesickleFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rolesickleFemale::IsInitialized() const {

  return true;
}

void rolesickleFemale::Swap(rolesickleFemale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rolesickleFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rolesickleFemale_descriptor_;
  metadata.reflection = rolesickleFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rolesickleFemale::kRolesickleFemaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_rolesickleFemale::Sheet_rolesickleFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rolesickleFemale::InitAsDefaultInstance() {
}

Sheet_rolesickleFemale::Sheet_rolesickleFemale(const Sheet_rolesickleFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rolesickleFemale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rolesickleFemale::~Sheet_rolesickleFemale() {
  SharedDtor();
}

void Sheet_rolesickleFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rolesickleFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rolesickleFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rolesickleFemale_descriptor_;
}

const Sheet_rolesickleFemale& Sheet_rolesickleFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_rolesickleFemale* Sheet_rolesickleFemale::default_instance_ = NULL;

Sheet_rolesickleFemale* Sheet_rolesickleFemale::New() const {
  return new Sheet_rolesickleFemale;
}

void Sheet_rolesickleFemale::Clear() {
  rolesicklefemale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rolesickleFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rolesickleFemale rolesickleFemale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolesickleFemale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolesicklefemale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rolesickleFemale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rolesickleFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rolesickleFemale rolesickleFemale_List = 1;
  for (int i = 0; i < this->rolesicklefemale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolesicklefemale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rolesickleFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rolesickleFemale rolesickleFemale_List = 1;
  for (int i = 0; i < this->rolesicklefemale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolesicklefemale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rolesickleFemale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rolesickleFemale rolesickleFemale_List = 1;
  total_size += 1 * this->rolesicklefemale_list_size();
  for (int i = 0; i < this->rolesicklefemale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolesicklefemale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rolesickleFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rolesickleFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rolesickleFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rolesickleFemale::MergeFrom(const Sheet_rolesickleFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolesicklefemale_list_.MergeFrom(from.rolesicklefemale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rolesickleFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rolesickleFemale::CopyFrom(const Sheet_rolesickleFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rolesickleFemale::IsInitialized() const {

  return true;
}

void Sheet_rolesickleFemale::Swap(Sheet_rolesickleFemale* other) {
  if (other != this) {
    rolesicklefemale_list_.Swap(&other->rolesicklefemale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rolesickleFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rolesickleFemale_descriptor_;
  metadata.reflection = Sheet_rolesickleFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleswordMaleattributeDesc::kTypeFieldNumber;
const int roleswordMaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roleswordMaleattributeDesc::roleswordMaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleswordMaleattributeDesc::InitAsDefaultInstance() {
}

roleswordMaleattributeDesc::roleswordMaleattributeDesc(const roleswordMaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleswordMaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleswordMaleattributeDesc::~roleswordMaleattributeDesc() {
  SharedDtor();
}

void roleswordMaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleswordMaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleswordMaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleswordMaleattributeDesc_descriptor_;
}

const roleswordMaleattributeDesc& roleswordMaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleswordMaleattributeDesc* roleswordMaleattributeDesc::default_instance_ = NULL;

roleswordMaleattributeDesc* roleswordMaleattributeDesc::New() const {
  return new roleswordMaleattributeDesc;
}

void roleswordMaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleswordMaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleswordMaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleswordMaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleswordMaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleswordMaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleswordMaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleswordMaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleswordMaleattributeDesc::MergeFrom(const roleswordMaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleswordMaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleswordMaleattributeDesc::CopyFrom(const roleswordMaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleswordMaleattributeDesc::IsInitialized() const {

  return true;
}

void roleswordMaleattributeDesc::Swap(roleswordMaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleswordMaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleswordMaleattributeDesc_descriptor_;
  metadata.reflection = roleswordMaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleswordMale::kLvFieldNumber;
const int roleswordMale::kUpgradePointFieldNumber;
const int roleswordMale::kAttributeFieldNumber;
#endif  // !_MSC_VER

roleswordMale::roleswordMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleswordMale::InitAsDefaultInstance() {
}

roleswordMale::roleswordMale(const roleswordMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleswordMale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleswordMale::~roleswordMale() {
  SharedDtor();
}

void roleswordMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleswordMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleswordMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleswordMale_descriptor_;
}

const roleswordMale& roleswordMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleswordMale* roleswordMale::default_instance_ = NULL;

roleswordMale* roleswordMale::New() const {
  return new roleswordMale;
}

void roleswordMale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleswordMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roleswordMaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleswordMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roleswordMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleswordMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roleswordMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleswordMale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roleswordMaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleswordMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleswordMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleswordMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleswordMale::MergeFrom(const roleswordMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleswordMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleswordMale::CopyFrom(const roleswordMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleswordMale::IsInitialized() const {

  return true;
}

void roleswordMale::Swap(roleswordMale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleswordMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleswordMale_descriptor_;
  metadata.reflection = roleswordMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleswordMale::kRoleswordMaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleswordMale::Sheet_roleswordMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleswordMale::InitAsDefaultInstance() {
}

Sheet_roleswordMale::Sheet_roleswordMale(const Sheet_roleswordMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleswordMale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleswordMale::~Sheet_roleswordMale() {
  SharedDtor();
}

void Sheet_roleswordMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleswordMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleswordMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleswordMale_descriptor_;
}

const Sheet_roleswordMale& Sheet_roleswordMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleswordMale* Sheet_roleswordMale::default_instance_ = NULL;

Sheet_roleswordMale* Sheet_roleswordMale::New() const {
  return new Sheet_roleswordMale;
}

void Sheet_roleswordMale::Clear() {
  roleswordmale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleswordMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleswordMale roleswordMale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleswordMale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleswordmale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleswordMale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleswordMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleswordMale roleswordMale_List = 1;
  for (int i = 0; i < this->roleswordmale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleswordmale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleswordMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleswordMale roleswordMale_List = 1;
  for (int i = 0; i < this->roleswordmale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleswordmale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleswordMale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleswordMale roleswordMale_List = 1;
  total_size += 1 * this->roleswordmale_list_size();
  for (int i = 0; i < this->roleswordmale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleswordmale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleswordMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleswordMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleswordMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleswordMale::MergeFrom(const Sheet_roleswordMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleswordmale_list_.MergeFrom(from.roleswordmale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleswordMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleswordMale::CopyFrom(const Sheet_roleswordMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleswordMale::IsInitialized() const {

  return true;
}

void Sheet_roleswordMale::Swap(Sheet_roleswordMale* other) {
  if (other != this) {
    roleswordmale_list_.Swap(&other->roleswordmale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleswordMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleswordMale_descriptor_;
  metadata.reflection = Sheet_roleswordMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleswordFemaleattributeDesc::kTypeFieldNumber;
const int roleswordFemaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roleswordFemaleattributeDesc::roleswordFemaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleswordFemaleattributeDesc::InitAsDefaultInstance() {
}

roleswordFemaleattributeDesc::roleswordFemaleattributeDesc(const roleswordFemaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleswordFemaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleswordFemaleattributeDesc::~roleswordFemaleattributeDesc() {
  SharedDtor();
}

void roleswordFemaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleswordFemaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleswordFemaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleswordFemaleattributeDesc_descriptor_;
}

const roleswordFemaleattributeDesc& roleswordFemaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleswordFemaleattributeDesc* roleswordFemaleattributeDesc::default_instance_ = NULL;

roleswordFemaleattributeDesc* roleswordFemaleattributeDesc::New() const {
  return new roleswordFemaleattributeDesc;
}

void roleswordFemaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleswordFemaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleswordFemaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleswordFemaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleswordFemaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleswordFemaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleswordFemaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleswordFemaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleswordFemaleattributeDesc::MergeFrom(const roleswordFemaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleswordFemaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleswordFemaleattributeDesc::CopyFrom(const roleswordFemaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleswordFemaleattributeDesc::IsInitialized() const {

  return true;
}

void roleswordFemaleattributeDesc::Swap(roleswordFemaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleswordFemaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleswordFemaleattributeDesc_descriptor_;
  metadata.reflection = roleswordFemaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleswordFemale::kLvFieldNumber;
const int roleswordFemale::kUpgradePointFieldNumber;
const int roleswordFemale::kAttributeFieldNumber;
#endif  // !_MSC_VER

roleswordFemale::roleswordFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleswordFemale::InitAsDefaultInstance() {
}

roleswordFemale::roleswordFemale(const roleswordFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleswordFemale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleswordFemale::~roleswordFemale() {
  SharedDtor();
}

void roleswordFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleswordFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleswordFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleswordFemale_descriptor_;
}

const roleswordFemale& roleswordFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleswordFemale* roleswordFemale::default_instance_ = NULL;

roleswordFemale* roleswordFemale::New() const {
  return new roleswordFemale;
}

void roleswordFemale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleswordFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roleswordFemaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleswordFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roleswordFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleswordFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roleswordFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleswordFemale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roleswordFemaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleswordFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleswordFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleswordFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleswordFemale::MergeFrom(const roleswordFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleswordFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleswordFemale::CopyFrom(const roleswordFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleswordFemale::IsInitialized() const {

  return true;
}

void roleswordFemale::Swap(roleswordFemale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleswordFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleswordFemale_descriptor_;
  metadata.reflection = roleswordFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleswordFemale::kRoleswordFemaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleswordFemale::Sheet_roleswordFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleswordFemale::InitAsDefaultInstance() {
}

Sheet_roleswordFemale::Sheet_roleswordFemale(const Sheet_roleswordFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleswordFemale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleswordFemale::~Sheet_roleswordFemale() {
  SharedDtor();
}

void Sheet_roleswordFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleswordFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleswordFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleswordFemale_descriptor_;
}

const Sheet_roleswordFemale& Sheet_roleswordFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleswordFemale* Sheet_roleswordFemale::default_instance_ = NULL;

Sheet_roleswordFemale* Sheet_roleswordFemale::New() const {
  return new Sheet_roleswordFemale;
}

void Sheet_roleswordFemale::Clear() {
  roleswordfemale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleswordFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleswordFemale roleswordFemale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleswordFemale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleswordfemale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleswordFemale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleswordFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleswordFemale roleswordFemale_List = 1;
  for (int i = 0; i < this->roleswordfemale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleswordfemale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleswordFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleswordFemale roleswordFemale_List = 1;
  for (int i = 0; i < this->roleswordfemale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleswordfemale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleswordFemale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleswordFemale roleswordFemale_List = 1;
  total_size += 1 * this->roleswordfemale_list_size();
  for (int i = 0; i < this->roleswordfemale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleswordfemale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleswordFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleswordFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleswordFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleswordFemale::MergeFrom(const Sheet_roleswordFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleswordfemale_list_.MergeFrom(from.roleswordfemale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleswordFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleswordFemale::CopyFrom(const Sheet_roleswordFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleswordFemale::IsInitialized() const {

  return true;
}

void Sheet_roleswordFemale::Swap(Sheet_roleswordFemale* other) {
  if (other != this) {
    roleswordfemale_list_.Swap(&other->roleswordfemale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleswordFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleswordFemale_descriptor_;
  metadata.reflection = Sheet_roleswordFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roletaidaoMaleattributeDesc::kTypeFieldNumber;
const int roletaidaoMaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roletaidaoMaleattributeDesc::roletaidaoMaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roletaidaoMaleattributeDesc::InitAsDefaultInstance() {
}

roletaidaoMaleattributeDesc::roletaidaoMaleattributeDesc(const roletaidaoMaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roletaidaoMaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roletaidaoMaleattributeDesc::~roletaidaoMaleattributeDesc() {
  SharedDtor();
}

void roletaidaoMaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roletaidaoMaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roletaidaoMaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roletaidaoMaleattributeDesc_descriptor_;
}

const roletaidaoMaleattributeDesc& roletaidaoMaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roletaidaoMaleattributeDesc* roletaidaoMaleattributeDesc::default_instance_ = NULL;

roletaidaoMaleattributeDesc* roletaidaoMaleattributeDesc::New() const {
  return new roletaidaoMaleattributeDesc;
}

void roletaidaoMaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roletaidaoMaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roletaidaoMaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roletaidaoMaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roletaidaoMaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roletaidaoMaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roletaidaoMaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roletaidaoMaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roletaidaoMaleattributeDesc::MergeFrom(const roletaidaoMaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roletaidaoMaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roletaidaoMaleattributeDesc::CopyFrom(const roletaidaoMaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roletaidaoMaleattributeDesc::IsInitialized() const {

  return true;
}

void roletaidaoMaleattributeDesc::Swap(roletaidaoMaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roletaidaoMaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roletaidaoMaleattributeDesc_descriptor_;
  metadata.reflection = roletaidaoMaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roletaidaoMale::kLvFieldNumber;
const int roletaidaoMale::kUpgradePointFieldNumber;
const int roletaidaoMale::kAttributeFieldNumber;
#endif  // !_MSC_VER

roletaidaoMale::roletaidaoMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roletaidaoMale::InitAsDefaultInstance() {
}

roletaidaoMale::roletaidaoMale(const roletaidaoMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roletaidaoMale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roletaidaoMale::~roletaidaoMale() {
  SharedDtor();
}

void roletaidaoMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roletaidaoMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roletaidaoMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roletaidaoMale_descriptor_;
}

const roletaidaoMale& roletaidaoMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roletaidaoMale* roletaidaoMale::default_instance_ = NULL;

roletaidaoMale* roletaidaoMale::New() const {
  return new roletaidaoMale;
}

void roletaidaoMale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roletaidaoMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roletaidaoMaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roletaidaoMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roletaidaoMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roletaidaoMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roletaidaoMaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roletaidaoMale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roletaidaoMaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roletaidaoMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roletaidaoMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roletaidaoMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roletaidaoMale::MergeFrom(const roletaidaoMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roletaidaoMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roletaidaoMale::CopyFrom(const roletaidaoMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roletaidaoMale::IsInitialized() const {

  return true;
}

void roletaidaoMale::Swap(roletaidaoMale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roletaidaoMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roletaidaoMale_descriptor_;
  metadata.reflection = roletaidaoMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roletaidaoMale::kRoletaidaoMaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_roletaidaoMale::Sheet_roletaidaoMale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roletaidaoMale::InitAsDefaultInstance() {
}

Sheet_roletaidaoMale::Sheet_roletaidaoMale(const Sheet_roletaidaoMale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roletaidaoMale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roletaidaoMale::~Sheet_roletaidaoMale() {
  SharedDtor();
}

void Sheet_roletaidaoMale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roletaidaoMale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roletaidaoMale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roletaidaoMale_descriptor_;
}

const Sheet_roletaidaoMale& Sheet_roletaidaoMale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roletaidaoMale* Sheet_roletaidaoMale::default_instance_ = NULL;

Sheet_roletaidaoMale* Sheet_roletaidaoMale::New() const {
  return new Sheet_roletaidaoMale;
}

void Sheet_roletaidaoMale::Clear() {
  roletaidaomale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roletaidaoMale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roletaidaoMale roletaidaoMale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roletaidaoMale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roletaidaomale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roletaidaoMale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roletaidaoMale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roletaidaoMale roletaidaoMale_List = 1;
  for (int i = 0; i < this->roletaidaomale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roletaidaomale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roletaidaoMale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roletaidaoMale roletaidaoMale_List = 1;
  for (int i = 0; i < this->roletaidaomale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roletaidaomale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roletaidaoMale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roletaidaoMale roletaidaoMale_List = 1;
  total_size += 1 * this->roletaidaomale_list_size();
  for (int i = 0; i < this->roletaidaomale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roletaidaomale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roletaidaoMale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roletaidaoMale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roletaidaoMale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roletaidaoMale::MergeFrom(const Sheet_roletaidaoMale& from) {
  GOOGLE_CHECK_NE(&from, this);
  roletaidaomale_list_.MergeFrom(from.roletaidaomale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roletaidaoMale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roletaidaoMale::CopyFrom(const Sheet_roletaidaoMale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roletaidaoMale::IsInitialized() const {

  return true;
}

void Sheet_roletaidaoMale::Swap(Sheet_roletaidaoMale* other) {
  if (other != this) {
    roletaidaomale_list_.Swap(&other->roletaidaomale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roletaidaoMale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roletaidaoMale_descriptor_;
  metadata.reflection = Sheet_roletaidaoMale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roletaidaoFemaleattributeDesc::kTypeFieldNumber;
const int roletaidaoFemaleattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

roletaidaoFemaleattributeDesc::roletaidaoFemaleattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roletaidaoFemaleattributeDesc::InitAsDefaultInstance() {
}

roletaidaoFemaleattributeDesc::roletaidaoFemaleattributeDesc(const roletaidaoFemaleattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roletaidaoFemaleattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roletaidaoFemaleattributeDesc::~roletaidaoFemaleattributeDesc() {
  SharedDtor();
}

void roletaidaoFemaleattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roletaidaoFemaleattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roletaidaoFemaleattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roletaidaoFemaleattributeDesc_descriptor_;
}

const roletaidaoFemaleattributeDesc& roletaidaoFemaleattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roletaidaoFemaleattributeDesc* roletaidaoFemaleattributeDesc::default_instance_ = NULL;

roletaidaoFemaleattributeDesc* roletaidaoFemaleattributeDesc::New() const {
  return new roletaidaoFemaleattributeDesc;
}

void roletaidaoFemaleattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roletaidaoFemaleattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roletaidaoFemaleattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roletaidaoFemaleattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roletaidaoFemaleattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roletaidaoFemaleattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roletaidaoFemaleattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roletaidaoFemaleattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roletaidaoFemaleattributeDesc::MergeFrom(const roletaidaoFemaleattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roletaidaoFemaleattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roletaidaoFemaleattributeDesc::CopyFrom(const roletaidaoFemaleattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roletaidaoFemaleattributeDesc::IsInitialized() const {

  return true;
}

void roletaidaoFemaleattributeDesc::Swap(roletaidaoFemaleattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roletaidaoFemaleattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roletaidaoFemaleattributeDesc_descriptor_;
  metadata.reflection = roletaidaoFemaleattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roletaidaoFemale::kLvFieldNumber;
const int roletaidaoFemale::kUpgradePointFieldNumber;
const int roletaidaoFemale::kAttributeFieldNumber;
#endif  // !_MSC_VER

roletaidaoFemale::roletaidaoFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roletaidaoFemale::InitAsDefaultInstance() {
}

roletaidaoFemale::roletaidaoFemale(const roletaidaoFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roletaidaoFemale::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  upgradepoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roletaidaoFemale::~roletaidaoFemale() {
  SharedDtor();
}

void roletaidaoFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roletaidaoFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roletaidaoFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roletaidaoFemale_descriptor_;
}

const roletaidaoFemale& roletaidaoFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roletaidaoFemale* roletaidaoFemale::default_instance_ = NULL;

roletaidaoFemale* roletaidaoFemale::New() const {
  return new roletaidaoFemale;
}

void roletaidaoFemale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    upgradepoint_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roletaidaoFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upgradePoint;
        break;
      }

      // optional int32 upgradePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradepoint_)));
          set_has_upgradepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.roletaidaoFemaleattributeDesc attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roletaidaoFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upgradepoint(), output);
  }

  // repeated .proto_ff.roletaidaoFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roletaidaoFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int32 upgradePoint = 2;
  if (has_upgradepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upgradepoint(), target);
  }

  // repeated .proto_ff.roletaidaoFemaleattributeDesc attribute = 3;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roletaidaoFemale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 upgradePoint = 2;
    if (has_upgradepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradepoint());
    }

  }
  // repeated .proto_ff.roletaidaoFemaleattributeDesc attribute = 3;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roletaidaoFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roletaidaoFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roletaidaoFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roletaidaoFemale::MergeFrom(const roletaidaoFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_upgradepoint()) {
      set_upgradepoint(from.upgradepoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roletaidaoFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roletaidaoFemale::CopyFrom(const roletaidaoFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roletaidaoFemale::IsInitialized() const {

  return true;
}

void roletaidaoFemale::Swap(roletaidaoFemale* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(upgradepoint_, other->upgradepoint_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roletaidaoFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roletaidaoFemale_descriptor_;
  metadata.reflection = roletaidaoFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roletaidaoFemale::kRoletaidaoFemaleListFieldNumber;
#endif  // !_MSC_VER

Sheet_roletaidaoFemale::Sheet_roletaidaoFemale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roletaidaoFemale::InitAsDefaultInstance() {
}

Sheet_roletaidaoFemale::Sheet_roletaidaoFemale(const Sheet_roletaidaoFemale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roletaidaoFemale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roletaidaoFemale::~Sheet_roletaidaoFemale() {
  SharedDtor();
}

void Sheet_roletaidaoFemale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roletaidaoFemale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roletaidaoFemale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roletaidaoFemale_descriptor_;
}

const Sheet_roletaidaoFemale& Sheet_roletaidaoFemale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roletaidaoFemale* Sheet_roletaidaoFemale::default_instance_ = NULL;

Sheet_roletaidaoFemale* Sheet_roletaidaoFemale::New() const {
  return new Sheet_roletaidaoFemale;
}

void Sheet_roletaidaoFemale::Clear() {
  roletaidaofemale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roletaidaoFemale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roletaidaoFemale roletaidaoFemale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roletaidaoFemale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roletaidaofemale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roletaidaoFemale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roletaidaoFemale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roletaidaoFemale roletaidaoFemale_List = 1;
  for (int i = 0; i < this->roletaidaofemale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roletaidaofemale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roletaidaoFemale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roletaidaoFemale roletaidaoFemale_List = 1;
  for (int i = 0; i < this->roletaidaofemale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roletaidaofemale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roletaidaoFemale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roletaidaoFemale roletaidaoFemale_List = 1;
  total_size += 1 * this->roletaidaofemale_list_size();
  for (int i = 0; i < this->roletaidaofemale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roletaidaofemale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roletaidaoFemale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roletaidaoFemale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roletaidaoFemale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roletaidaoFemale::MergeFrom(const Sheet_roletaidaoFemale& from) {
  GOOGLE_CHECK_NE(&from, this);
  roletaidaofemale_list_.MergeFrom(from.roletaidaofemale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roletaidaoFemale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roletaidaoFemale::CopyFrom(const Sheet_roletaidaoFemale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roletaidaoFemale::IsInitialized() const {

  return true;
}

void Sheet_roletaidaoFemale::Swap(Sheet_roletaidaoFemale* other) {
  if (other != this) {
    roletaidaofemale_list_.Swap(&other->roletaidaofemale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roletaidaoFemale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roletaidaoFemale_descriptor_;
  metadata.reflection = Sheet_roletaidaoFemale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleexp::kLvFieldNumber;
const int roleexp::kExpFieldNumber;
const int roleexp::kSkillPointFieldNumber;
#endif  // !_MSC_VER

roleexp::roleexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleexp::InitAsDefaultInstance() {
}

roleexp::roleexp(const roleexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  skillpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleexp::~roleexp() {
  SharedDtor();
}

void roleexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleexp_descriptor_;
}

const roleexp& roleexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleexp* roleexp::default_instance_ = NULL;

roleexp* roleexp::New() const {
  return new roleexp;
}

void roleexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    skillpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillPoint;
        break;
      }

      // optional int32 skillPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  // optional int32 skillPoint = 3;
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  // optional int32 skillPoint = 3;
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 skillPoint = 3;
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleexp::MergeFrom(const roleexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleexp::CopyFrom(const roleexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleexp::IsInitialized() const {

  return true;
}

void roleexp::Swap(roleexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleexp_descriptor_;
  metadata.reflection = roleexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleexp::kRoleexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleexp::Sheet_roleexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleexp::InitAsDefaultInstance() {
}

Sheet_roleexp::Sheet_roleexp(const Sheet_roleexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleexp::~Sheet_roleexp() {
  SharedDtor();
}

void Sheet_roleexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleexp_descriptor_;
}

const Sheet_roleexp& Sheet_roleexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleexp* Sheet_roleexp::default_instance_ = NULL;

Sheet_roleexp* Sheet_roleexp::New() const {
  return new Sheet_roleexp;
}

void Sheet_roleexp::Clear() {
  roleexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleexp roleexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleexp roleexp_List = 1;
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleexp roleexp_List = 1;
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleexp roleexp_List = 1;
  total_size += 1 * this->roleexp_list_size();
  for (int i = 0; i < this->roleexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleexp::MergeFrom(const Sheet_roleexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleexp_list_.MergeFrom(from.roleexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleexp::CopyFrom(const Sheet_roleexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleexp::IsInitialized() const {

  return true;
}

void Sheet_roleexp::Swap(Sheet_roleexp* other) {
  if (other != this) {
    roleexp_list_.Swap(&other->roleexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleexp_descriptor_;
  metadata.reflection = Sheet_roleexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleskillType::kSkillIdFieldNumber;
const int roleskillType::kSkillTypeFieldNumber;
#endif  // !_MSC_VER

roleskillType::roleskillType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleskillType::InitAsDefaultInstance() {
}

roleskillType::roleskillType(const roleskillType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleskillType::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  skilltype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleskillType::~roleskillType() {
  SharedDtor();
}

void roleskillType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleskillType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleskillType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleskillType_descriptor_;
}

const roleskillType& roleskillType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleskillType* roleskillType::default_instance_ = NULL;

roleskillType* roleskillType::New() const {
  return new roleskillType;
}

void roleskillType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = GOOGLE_LONGLONG(0);
    skilltype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleskillType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillType;
        break;
      }

      // optional int32 skillType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
          set_has_skilltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleskillType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skillid(), output);
  }

  // optional int32 skillType = 2;
  if (has_skilltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skilltype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleskillType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skillid(), target);
  }

  // optional int32 skillType = 2;
  if (has_skilltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skilltype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleskillType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int32 skillType = 2;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleskillType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleskillType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleskillType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleskillType::MergeFrom(const roleskillType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilltype()) {
      set_skilltype(from.skilltype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleskillType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleskillType::CopyFrom(const roleskillType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleskillType::IsInitialized() const {

  return true;
}

void roleskillType::Swap(roleskillType* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilltype_, other->skilltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleskillType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleskillType_descriptor_;
  metadata.reflection = roleskillType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleskillType::kRoleskillTypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleskillType::Sheet_roleskillType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleskillType::InitAsDefaultInstance() {
}

Sheet_roleskillType::Sheet_roleskillType(const Sheet_roleskillType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleskillType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleskillType::~Sheet_roleskillType() {
  SharedDtor();
}

void Sheet_roleskillType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleskillType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleskillType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleskillType_descriptor_;
}

const Sheet_roleskillType& Sheet_roleskillType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleskillType* Sheet_roleskillType::default_instance_ = NULL;

Sheet_roleskillType* Sheet_roleskillType::New() const {
  return new Sheet_roleskillType;
}

void Sheet_roleskillType::Clear() {
  roleskilltype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleskillType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleskillType roleskillType_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleskillType_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleskilltype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleskillType_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleskillType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleskilltype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleskillType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleskilltype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleskillType::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleskillType roleskillType_List = 1;
  total_size += 1 * this->roleskilltype_list_size();
  for (int i = 0; i < this->roleskilltype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleskilltype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleskillType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleskillType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleskillType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleskillType::MergeFrom(const Sheet_roleskillType& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleskilltype_list_.MergeFrom(from.roleskilltype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleskillType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleskillType::CopyFrom(const Sheet_roleskillType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleskillType::IsInitialized() const {

  return true;
}

void Sheet_roleskillType::Swap(Sheet_roleskillType* other) {
  if (other != this) {
    roleskilltype_list_.Swap(&other->roleskilltype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleskillType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleskillType_descriptor_;
  metadata.reflection = Sheet_roleskillType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleaddSkill::kIdFieldNumber;
const int roleaddSkill::kSkillIdFieldNumber;
#endif  // !_MSC_VER

roleaddSkill::roleaddSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleaddSkill::InitAsDefaultInstance() {
}

roleaddSkill::roleaddSkill(const roleaddSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleaddSkill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleaddSkill::~roleaddSkill() {
  SharedDtor();
}

void roleaddSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleaddSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleaddSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleaddSkill_descriptor_;
}

const roleaddSkill& roleaddSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleaddSkill* roleaddSkill::default_instance_ = NULL;

roleaddSkill* roleaddSkill::New() const {
  return new roleaddSkill;
}

void roleaddSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleaddSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int64 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleaddSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleaddSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleaddSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleaddSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleaddSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleaddSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleaddSkill::MergeFrom(const roleaddSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleaddSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleaddSkill::CopyFrom(const roleaddSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleaddSkill::IsInitialized() const {

  return true;
}

void roleaddSkill::Swap(roleaddSkill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleaddSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleaddSkill_descriptor_;
  metadata.reflection = roleaddSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleaddSkill::kRoleaddSkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleaddSkill::Sheet_roleaddSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleaddSkill::InitAsDefaultInstance() {
}

Sheet_roleaddSkill::Sheet_roleaddSkill(const Sheet_roleaddSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleaddSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleaddSkill::~Sheet_roleaddSkill() {
  SharedDtor();
}

void Sheet_roleaddSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleaddSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleaddSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleaddSkill_descriptor_;
}

const Sheet_roleaddSkill& Sheet_roleaddSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleaddSkill* Sheet_roleaddSkill::default_instance_ = NULL;

Sheet_roleaddSkill* Sheet_roleaddSkill::New() const {
  return new Sheet_roleaddSkill;
}

void Sheet_roleaddSkill::Clear() {
  roleaddskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleaddSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleaddSkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleaddskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleaddSkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleaddSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleaddskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleaddSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleaddskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleaddSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleaddSkill roleaddSkill_List = 1;
  total_size += 1 * this->roleaddskill_list_size();
  for (int i = 0; i < this->roleaddskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleaddskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleaddSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleaddSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleaddSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleaddSkill::MergeFrom(const Sheet_roleaddSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleaddskill_list_.MergeFrom(from.roleaddskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleaddSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleaddSkill::CopyFrom(const Sheet_roleaddSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleaddSkill::IsInitialized() const {

  return true;
}

void Sheet_roleaddSkill::Swap(Sheet_roleaddSkill* other) {
  if (other != this) {
    roleaddskill_list_.Swap(&other->roleaddskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleaddSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleaddSkill_descriptor_;
  metadata.reflection = Sheet_roleaddSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int roleworldexp::kLvFieldNumber;
const int roleworldexp::kWorldExpFieldNumber;
#endif  // !_MSC_VER

roleworldexp::roleworldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void roleworldexp::InitAsDefaultInstance() {
}

roleworldexp::roleworldexp(const roleworldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void roleworldexp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = GOOGLE_LONGLONG(0);
  worldexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

roleworldexp::~roleworldexp() {
  SharedDtor();
}

void roleworldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void roleworldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* roleworldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return roleworldexp_descriptor_;
}

const roleworldexp& roleworldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

roleworldexp* roleworldexp::default_instance_ = NULL;

roleworldexp* roleworldexp::New() const {
  return new roleworldexp;
}

void roleworldexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = GOOGLE_LONGLONG(0);
    worldexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool roleworldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_worldExp;
        break;
      }

      // optional int32 worldExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worldexp_)));
          set_has_worldexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void roleworldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lv(), output);
  }

  // optional int32 worldExp = 2;
  if (has_worldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worldexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* roleworldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lv(), target);
  }

  // optional int32 worldExp = 2;
  if (has_worldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worldexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int roleworldexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lv());
    }

    // optional int32 worldExp = 2;
    if (has_worldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worldexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void roleworldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const roleworldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const roleworldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void roleworldexp::MergeFrom(const roleworldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_worldexp()) {
      set_worldexp(from.worldexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void roleworldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void roleworldexp::CopyFrom(const roleworldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool roleworldexp::IsInitialized() const {

  return true;
}

void roleworldexp::Swap(roleworldexp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(worldexp_, other->worldexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata roleworldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = roleworldexp_descriptor_;
  metadata.reflection = roleworldexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_roleworldexp::kRoleworldexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_roleworldexp::Sheet_roleworldexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_roleworldexp::InitAsDefaultInstance() {
}

Sheet_roleworldexp::Sheet_roleworldexp(const Sheet_roleworldexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_roleworldexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_roleworldexp::~Sheet_roleworldexp() {
  SharedDtor();
}

void Sheet_roleworldexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_roleworldexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_roleworldexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_roleworldexp_descriptor_;
}

const Sheet_roleworldexp& Sheet_roleworldexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_role_2eproto();
  return *default_instance_;
}

Sheet_roleworldexp* Sheet_roleworldexp::default_instance_ = NULL;

Sheet_roleworldexp* Sheet_roleworldexp::New() const {
  return new Sheet_roleworldexp;
}

void Sheet_roleworldexp::Clear() {
  roleworldexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_roleworldexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleworldexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleworldexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roleworldexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_roleworldexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roleworldexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_roleworldexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roleworldexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_roleworldexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.roleworldexp roleworldexp_List = 1;
  total_size += 1 * this->roleworldexp_list_size();
  for (int i = 0; i < this->roleworldexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleworldexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_roleworldexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_roleworldexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_roleworldexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_roleworldexp::MergeFrom(const Sheet_roleworldexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleworldexp_list_.MergeFrom(from.roleworldexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_roleworldexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_roleworldexp::CopyFrom(const Sheet_roleworldexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_roleworldexp::IsInitialized() const {

  return true;
}

void Sheet_roleworldexp::Swap(Sheet_roleworldexp* other) {
  if (other != this) {
    roleworldexp_list_.Swap(&other->roleworldexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_roleworldexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_roleworldexp_descriptor_;
  metadata.reflection = Sheet_roleworldexp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
