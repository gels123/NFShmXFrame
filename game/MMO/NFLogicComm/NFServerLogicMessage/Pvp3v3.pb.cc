// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pvp3v3.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pvp3v3.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyClan3RoleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3RoleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3SeasonRankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3SeasonRankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3SeasonRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3SeasonRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Enter3v3ActReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Enter3v3ActReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Enter3v3ActRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Enter3v3ActRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaitDupMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaitDupMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyWaitDupSceneData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyWaitDupSceneData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3JoinMathchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3JoinMathchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3JoinMathchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3JoinMathchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3CancelMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3CancelMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyCancelMatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCancelMatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3MatchEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3MatchEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3MatchSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3MatchSuccess_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3DupRun_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3DupRun_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3RecvRoleRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3RecvRoleRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3RecvRoleRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3RecvRoleRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVP3DB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVP3DB_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyPvp3Season_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyPvp3Season_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SClan3RankReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SClan3RankReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SClan3JoinMathchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SClan3JoinMathchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3MatchRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3MatchRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3MatchRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3MatchRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Clan3MatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Clan3MatchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SClan3CancelMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SClan3CancelMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3ActionWaitDup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3ActionWaitDup_reflection_ = NULL;
const ::google::protobuf::Descriptor* L2SNotifyClan3DupResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  L2SNotifyClan3DupResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2SClan3SendReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2SClan3SendReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LClan3RecvRoleRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LClan3RecvRoleRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* S2CSynClan3ZeroUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  S2CSynClan3ZeroUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyClan3DupKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyClan3DupKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* C2LClan3RewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  C2LClan3RewardReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pvp3v3_2eproto() {
  protobuf_AddDesc_Pvp3v3_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pvp3v3.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyClan3RoleData_descriptor_ = file->message_type(0);
  static const int NotifyClan3RoleData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, role_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, role_win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, role_cw_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, ban_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, day_join_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, recv_id_),
  };
  NotifyClan3RoleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3RoleData_descriptor_,
      NotifyClan3RoleData::default_instance_,
      NotifyClan3RoleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3RoleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3RoleData));
  Clan3SeasonRankReq_descriptor_ = file->message_type(1);
  static const int Clan3SeasonRankReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankReq, type_),
  };
  Clan3SeasonRankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3SeasonRankReq_descriptor_,
      Clan3SeasonRankReq::default_instance_,
      Clan3SeasonRankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3SeasonRankReq));
  Clan3SeasonRankRsp_descriptor_ = file->message_type(2);
  static const int Clan3SeasonRankRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankRsp, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankRsp, my_),
  };
  Clan3SeasonRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3SeasonRankRsp_descriptor_,
      Clan3SeasonRankRsp::default_instance_,
      Clan3SeasonRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3SeasonRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3SeasonRankRsp));
  Enter3v3ActReq_descriptor_ = file->message_type(3);
  static const int Enter3v3ActReq_offsets_[1] = {
  };
  Enter3v3ActReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Enter3v3ActReq_descriptor_,
      Enter3v3ActReq::default_instance_,
      Enter3v3ActReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enter3v3ActReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enter3v3ActReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Enter3v3ActReq));
  Enter3v3ActRsp_descriptor_ = file->message_type(4);
  static const int Enter3v3ActRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enter3v3ActRsp, ret_),
  };
  Enter3v3ActRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Enter3v3ActRsp_descriptor_,
      Enter3v3ActRsp::default_instance_,
      Enter3v3ActRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enter3v3ActRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Enter3v3ActRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Enter3v3ActRsp));
  WaitDupMember_descriptor_ = file->message_type(5);
  static const int WaitDupMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitDupMember, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitDupMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitDupMember, state_),
  };
  WaitDupMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaitDupMember_descriptor_,
      WaitDupMember::default_instance_,
      WaitDupMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitDupMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaitDupMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaitDupMember));
  NotifyWaitDupSceneData_descriptor_ = file->message_type(6);
  static const int NotifyWaitDupSceneData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWaitDupSceneData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWaitDupSceneData, mems_),
  };
  NotifyWaitDupSceneData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyWaitDupSceneData_descriptor_,
      NotifyWaitDupSceneData::default_instance_,
      NotifyWaitDupSceneData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWaitDupSceneData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyWaitDupSceneData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyWaitDupSceneData));
  Clan3JoinMathchReq_descriptor_ = file->message_type(7);
  static const int Clan3JoinMathchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchReq, type_),
  };
  Clan3JoinMathchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3JoinMathchReq_descriptor_,
      Clan3JoinMathchReq::default_instance_,
      Clan3JoinMathchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3JoinMathchReq));
  Clan3JoinMathchRsp_descriptor_ = file->message_type(8);
  static const int Clan3JoinMathchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchRsp, join_time_),
  };
  Clan3JoinMathchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3JoinMathchRsp_descriptor_,
      Clan3JoinMathchRsp::default_instance_,
      Clan3JoinMathchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3JoinMathchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3JoinMathchRsp));
  Clan3CancelMatchReq_descriptor_ = file->message_type(9);
  static const int Clan3CancelMatchReq_offsets_[1] = {
  };
  Clan3CancelMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3CancelMatchReq_descriptor_,
      Clan3CancelMatchReq::default_instance_,
      Clan3CancelMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3CancelMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3CancelMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3CancelMatchReq));
  NotifyCancelMatchRsp_descriptor_ = file->message_type(10);
  static const int NotifyCancelMatchRsp_offsets_[1] = {
  };
  NotifyCancelMatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCancelMatchRsp_descriptor_,
      NotifyCancelMatchRsp::default_instance_,
      NotifyCancelMatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCancelMatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCancelMatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCancelMatchRsp));
  Clan3MatchEntry_descriptor_ = file->message_type(11);
  static const int Clan3MatchEntry_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, is_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, clan_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, mvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, mvp_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, day_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, match_type_),
  };
  Clan3MatchEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3MatchEntry_descriptor_,
      Clan3MatchEntry::default_instance_,
      Clan3MatchEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3MatchEntry));
  NotifyClan3MatchSuccess_descriptor_ = file->message_type(12);
  static const int NotifyClan3MatchSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3MatchSuccess, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3MatchSuccess, blue_),
  };
  NotifyClan3MatchSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3MatchSuccess_descriptor_,
      NotifyClan3MatchSuccess::default_instance_,
      NotifyClan3MatchSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3MatchSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3MatchSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3MatchSuccess));
  NotifyClan3DupRun_descriptor_ = file->message_type(13);
  static const int NotifyClan3DupRun_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupRun, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupRun, blue_),
  };
  NotifyClan3DupRun_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3DupRun_descriptor_,
      NotifyClan3DupRun::default_instance_,
      NotifyClan3DupRun_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupRun, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupRun, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3DupRun));
  NotifyClan3Result_descriptor_ = file->message_type(14);
  static const int NotifyClan3Result_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, clanscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, clanaddscore_),
  };
  NotifyClan3Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3Result_descriptor_,
      NotifyClan3Result::default_instance_,
      NotifyClan3Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3Result));
  Clan3RecvRoleRewardReq_descriptor_ = file->message_type(15);
  static const int Clan3RecvRoleRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardReq, id_),
  };
  Clan3RecvRoleRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3RecvRoleRewardReq_descriptor_,
      Clan3RecvRoleRewardReq::default_instance_,
      Clan3RecvRoleRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3RecvRoleRewardReq));
  Clan3RecvRoleRewardRsp_descriptor_ = file->message_type(16);
  static const int Clan3RecvRoleRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardRsp, id_),
  };
  Clan3RecvRoleRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3RecvRoleRewardRsp_descriptor_,
      Clan3RecvRoleRewardRsp::default_instance_,
      Clan3RecvRoleRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3RecvRoleRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3RecvRoleRewardRsp));
  PVP3DB_descriptor_ = file->message_type(17);
  static const int PVP3DB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, last_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, last_race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, send_season_),
  };
  PVP3DB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVP3DB_descriptor_,
      PVP3DB::default_instance_,
      PVP3DB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVP3DB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVP3DB));
  NotifyPvp3Season_descriptor_ = file->message_type(18);
  static const int NotifyPvp3Season_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPvp3Season, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPvp3Season, season_),
  };
  NotifyPvp3Season_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyPvp3Season_descriptor_,
      NotifyPvp3Season::default_instance_,
      NotifyPvp3Season_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPvp3Season, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyPvp3Season, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyPvp3Season));
  C2SClan3RankReq_descriptor_ = file->message_type(19);
  static const int C2SClan3RankReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3RankReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3RankReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3RankReq, clan_id_),
  };
  C2SClan3RankReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SClan3RankReq_descriptor_,
      C2SClan3RankReq::default_instance_,
      C2SClan3RankReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3RankReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3RankReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SClan3RankReq));
  L2SClan3JoinMathchReq_descriptor_ = file->message_type(20);
  static const int L2SClan3JoinMathchReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, cids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, clan_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, logic_id_),
  };
  L2SClan3JoinMathchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SClan3JoinMathchReq_descriptor_,
      L2SClan3JoinMathchReq::default_instance_,
      L2SClan3JoinMathchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3JoinMathchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SClan3JoinMathchReq));
  Clan3MatchRole_descriptor_ = file->message_type(21);
  static const int Clan3MatchRole_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, match_type_),
  };
  Clan3MatchRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3MatchRole_descriptor_,
      Clan3MatchRole::default_instance_,
      Clan3MatchRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3MatchRole));
  Clan3MatchRobot_descriptor_ = file->message_type(22);
  static const int Clan3MatchRobot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRobot, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRobot, zid_),
  };
  Clan3MatchRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3MatchRobot_descriptor_,
      Clan3MatchRobot::default_instance_,
      Clan3MatchRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3MatchRobot));
  Clan3MatchResult_descriptor_ = file->message_type(23);
  static const int Clan3MatchResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, red_robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, blue_robot_),
  };
  Clan3MatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Clan3MatchResult_descriptor_,
      Clan3MatchResult::default_instance_,
      Clan3MatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Clan3MatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Clan3MatchResult));
  L2SClan3CancelMatchReq_descriptor_ = file->message_type(24);
  static const int L2SClan3CancelMatchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3CancelMatchReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3CancelMatchReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3CancelMatchReq, clanid_),
  };
  L2SClan3CancelMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SClan3CancelMatchReq_descriptor_,
      L2SClan3CancelMatchReq::default_instance_,
      L2SClan3CancelMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3CancelMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SClan3CancelMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SClan3CancelMatchReq));
  NotifyClan3ActionWaitDup_descriptor_ = file->message_type(25);
  static const int NotifyClan3ActionWaitDup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3ActionWaitDup, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3ActionWaitDup, opt_),
  };
  NotifyClan3ActionWaitDup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3ActionWaitDup_descriptor_,
      NotifyClan3ActionWaitDup::default_instance_,
      NotifyClan3ActionWaitDup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3ActionWaitDup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3ActionWaitDup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3ActionWaitDup));
  L2SNotifyClan3DupResult_descriptor_ = file->message_type(26);
  static const int L2SNotifyClan3DupResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, mvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, deads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, cids_),
  };
  L2SNotifyClan3DupResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      L2SNotifyClan3DupResult_descriptor_,
      L2SNotifyClan3DupResult::default_instance_,
      L2SNotifyClan3DupResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(L2SNotifyClan3DupResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(L2SNotifyClan3DupResult));
  C2SClan3SendReward_descriptor_ = file->message_type(27);
  static const int C2SClan3SendReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3SendReward, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3SendReward, type_),
  };
  C2SClan3SendReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2SClan3SendReward_descriptor_,
      C2SClan3SendReward::default_instance_,
      C2SClan3SendReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3SendReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2SClan3SendReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2SClan3SendReward));
  C2LClan3RecvRoleRewardReq_descriptor_ = file->message_type(28);
  static const int C2LClan3RecvRoleRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RecvRoleRewardReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RecvRoleRewardReq, id_),
  };
  C2LClan3RecvRoleRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LClan3RecvRoleRewardReq_descriptor_,
      C2LClan3RecvRoleRewardReq::default_instance_,
      C2LClan3RecvRoleRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RecvRoleRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RecvRoleRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LClan3RecvRoleRewardReq));
  S2CSynClan3ZeroUpdate_descriptor_ = file->message_type(29);
  static const int S2CSynClan3ZeroUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CSynClan3ZeroUpdate, last_race_),
  };
  S2CSynClan3ZeroUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      S2CSynClan3ZeroUpdate_descriptor_,
      S2CSynClan3ZeroUpdate::default_instance_,
      S2CSynClan3ZeroUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CSynClan3ZeroUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2CSynClan3ZeroUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(S2CSynClan3ZeroUpdate));
  NotifyClan3DupKill_descriptor_ = file->message_type(30);
  static const int NotifyClan3DupKill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupKill, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupKill, bekiller_),
  };
  NotifyClan3DupKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyClan3DupKill_descriptor_,
      NotifyClan3DupKill::default_instance_,
      NotifyClan3DupKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyClan3DupKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyClan3DupKill));
  C2LClan3RewardReq_descriptor_ = file->message_type(31);
  static const int C2LClan3RewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RewardReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RewardReq, cid_),
  };
  C2LClan3RewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      C2LClan3RewardReq_descriptor_,
      C2LClan3RewardReq::default_instance_,
      C2LClan3RewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2LClan3RewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(C2LClan3RewardReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pvp3v3_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3RoleData_descriptor_, &NotifyClan3RoleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3SeasonRankReq_descriptor_, &Clan3SeasonRankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3SeasonRankRsp_descriptor_, &Clan3SeasonRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Enter3v3ActReq_descriptor_, &Enter3v3ActReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Enter3v3ActRsp_descriptor_, &Enter3v3ActRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaitDupMember_descriptor_, &WaitDupMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyWaitDupSceneData_descriptor_, &NotifyWaitDupSceneData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3JoinMathchReq_descriptor_, &Clan3JoinMathchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3JoinMathchRsp_descriptor_, &Clan3JoinMathchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3CancelMatchReq_descriptor_, &Clan3CancelMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCancelMatchRsp_descriptor_, &NotifyCancelMatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3MatchEntry_descriptor_, &Clan3MatchEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3MatchSuccess_descriptor_, &NotifyClan3MatchSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3DupRun_descriptor_, &NotifyClan3DupRun::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3Result_descriptor_, &NotifyClan3Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3RecvRoleRewardReq_descriptor_, &Clan3RecvRoleRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3RecvRoleRewardRsp_descriptor_, &Clan3RecvRoleRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVP3DB_descriptor_, &PVP3DB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyPvp3Season_descriptor_, &NotifyPvp3Season::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SClan3RankReq_descriptor_, &C2SClan3RankReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SClan3JoinMathchReq_descriptor_, &L2SClan3JoinMathchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3MatchRole_descriptor_, &Clan3MatchRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3MatchRobot_descriptor_, &Clan3MatchRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Clan3MatchResult_descriptor_, &Clan3MatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SClan3CancelMatchReq_descriptor_, &L2SClan3CancelMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3ActionWaitDup_descriptor_, &NotifyClan3ActionWaitDup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    L2SNotifyClan3DupResult_descriptor_, &L2SNotifyClan3DupResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2SClan3SendReward_descriptor_, &C2SClan3SendReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LClan3RecvRoleRewardReq_descriptor_, &C2LClan3RecvRoleRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    S2CSynClan3ZeroUpdate_descriptor_, &S2CSynClan3ZeroUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyClan3DupKill_descriptor_, &NotifyClan3DupKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    C2LClan3RewardReq_descriptor_, &C2LClan3RewardReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pvp3v3_2eproto() {
  delete NotifyClan3RoleData::default_instance_;
  delete NotifyClan3RoleData_reflection_;
  delete Clan3SeasonRankReq::default_instance_;
  delete Clan3SeasonRankReq_reflection_;
  delete Clan3SeasonRankRsp::default_instance_;
  delete Clan3SeasonRankRsp_reflection_;
  delete Enter3v3ActReq::default_instance_;
  delete Enter3v3ActReq_reflection_;
  delete Enter3v3ActRsp::default_instance_;
  delete Enter3v3ActRsp_reflection_;
  delete WaitDupMember::default_instance_;
  delete WaitDupMember_reflection_;
  delete NotifyWaitDupSceneData::default_instance_;
  delete NotifyWaitDupSceneData_reflection_;
  delete Clan3JoinMathchReq::default_instance_;
  delete Clan3JoinMathchReq_reflection_;
  delete Clan3JoinMathchRsp::default_instance_;
  delete Clan3JoinMathchRsp_reflection_;
  delete Clan3CancelMatchReq::default_instance_;
  delete Clan3CancelMatchReq_reflection_;
  delete NotifyCancelMatchRsp::default_instance_;
  delete NotifyCancelMatchRsp_reflection_;
  delete Clan3MatchEntry::default_instance_;
  delete Clan3MatchEntry_reflection_;
  delete NotifyClan3MatchSuccess::default_instance_;
  delete NotifyClan3MatchSuccess_reflection_;
  delete NotifyClan3DupRun::default_instance_;
  delete NotifyClan3DupRun_reflection_;
  delete NotifyClan3Result::default_instance_;
  delete NotifyClan3Result_reflection_;
  delete Clan3RecvRoleRewardReq::default_instance_;
  delete Clan3RecvRoleRewardReq_reflection_;
  delete Clan3RecvRoleRewardRsp::default_instance_;
  delete Clan3RecvRoleRewardRsp_reflection_;
  delete PVP3DB::default_instance_;
  delete PVP3DB_reflection_;
  delete NotifyPvp3Season::default_instance_;
  delete NotifyPvp3Season_reflection_;
  delete C2SClan3RankReq::default_instance_;
  delete C2SClan3RankReq_reflection_;
  delete L2SClan3JoinMathchReq::default_instance_;
  delete L2SClan3JoinMathchReq_reflection_;
  delete Clan3MatchRole::default_instance_;
  delete Clan3MatchRole_reflection_;
  delete Clan3MatchRobot::default_instance_;
  delete Clan3MatchRobot_reflection_;
  delete Clan3MatchResult::default_instance_;
  delete Clan3MatchResult_reflection_;
  delete L2SClan3CancelMatchReq::default_instance_;
  delete L2SClan3CancelMatchReq_reflection_;
  delete NotifyClan3ActionWaitDup::default_instance_;
  delete NotifyClan3ActionWaitDup_reflection_;
  delete L2SNotifyClan3DupResult::default_instance_;
  delete L2SNotifyClan3DupResult_reflection_;
  delete C2SClan3SendReward::default_instance_;
  delete C2SClan3SendReward_reflection_;
  delete C2LClan3RecvRoleRewardReq::default_instance_;
  delete C2LClan3RecvRoleRewardReq_reflection_;
  delete S2CSynClan3ZeroUpdate::default_instance_;
  delete S2CSynClan3ZeroUpdate_reflection_;
  delete NotifyClan3DupKill::default_instance_;
  delete NotifyClan3DupKill_reflection_;
  delete C2LClan3RewardReq::default_instance_;
  delete C2LClan3RewardReq_reflection_;
}

void protobuf_AddDesc_Pvp3v3_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::proto_ff::protobuf_AddDesc_Clan_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Pvp3v3.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\032\nClan.proto\"\241\001\n\023NotifyClan3"
    "RoleData\022\017\n\007clan_id\030\001 \001(\005\022\025\n\rrole_join_n"
    "um\030\002 \001(\005\022\024\n\014role_win_num\030\003 \001(\005\022\023\n\013role_c"
    "w_num\030\004 \001(\005\022\020\n\010ban_time\030\005 \001(\004\022\024\n\014day_joi"
    "n_num\030\006 \001(\005\022\017\n\007recv_id\030\007 \003(\005\"\"\n\022Clan3Sea"
    "sonRankReq\022\014\n\004type\030\001 \001(\005\"j\n\022Clan3SeasonR"
    "ankRsp\022\014\n\004type\030\001 \001(\005\022#\n\004rank\030\002 \003(\0132\025.pro"
    "to_ff.ClanComInfo\022!\n\002my\030\003 \001(\0132\025.proto_ff"
    ".ClanComInfo\"\020\n\016Enter3v3ActReq\"\035\n\016Enter3"
    "v3ActRsp\022\013\n\003ret\030\001 \001(\005\"9\n\rWaitDupMember\022\013"
    "\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005state\030\003 \001(\005"
    "\"d\n\026NotifyWaitDupSceneData\022#\n\004info\030\001 \001(\013"
    "2\025.proto_ff.ClanComInfo\022%\n\004mems\030\002 \003(\0132\027."
    "proto_ff.WaitDupMember\"\"\n\022Clan3JoinMathc"
    "hReq\022\014\n\004type\030\001 \001(\005\"4\n\022Clan3JoinMathchRsp"
    "\022\013\n\003ret\030\001 \001(\005\022\021\n\tjoin_time\030\002 \001(\005\"\025\n\023Clan"
    "3CancelMatchReq\"\026\n\024NotifyCancelMatchRsp\""
    "\257\002\n\017Clan3MatchEntry\022\013\n\003cid\030\001 \001(\004\022\020\n\010is_r"
    "obot\030\002 \001(\005\022\013\n\003zid\030\003 \001(\005\022\017\n\007clan_id\030\004 \001(\004"
    "\022\r\n\005score\030\005 \001(\005\022\021\n\tclan_name\030\006 \001(\014\022\014\n\004na"
    "me\030\007 \001(\014\022(\n\004head\030\010 \001(\0132\032.proto_ff.RoleHe"
    "adPicProto\022\r\n\005level\030\t \001(\005\022\r\n\005maxHP\030\n \001(\004"
    "\022\r\n\005curHp\030\013 \001(\004\022\017\n\007killNum\030\014 \001(\005\022\013\n\003mvp\030"
    "\r \001(\005\022\022\n\nmvp_reward\030\016 \001(\005\022\022\n\nday_reward\030"
    "\017 \001(\005\022\022\n\nmatch_type\030\020 \001(\005\"j\n\027NotifyClan3"
    "MatchSuccess\022&\n\003red\030\001 \003(\0132\031.proto_ff.Cla"
    "n3MatchEntry\022\'\n\004blue\030\002 \003(\0132\031.proto_ff.Cl"
    "an3MatchEntry\"d\n\021NotifyClan3DupRun\022&\n\003re"
    "d\030\001 \003(\0132\031.proto_ff.Clan3MatchEntry\022\'\n\004bl"
    "ue\030\002 \003(\0132\031.proto_ff.Clan3MatchEntry\"\235\001\n\021"
    "NotifyClan3Result\022&\n\003red\030\001 \003(\0132\031.proto_f"
    "f.Clan3MatchEntry\022\'\n\004blue\030\002 \003(\0132\031.proto_"
    "ff.Clan3MatchEntry\022\016\n\006result\030\003 \001(\005\022\021\n\tcl"
    "anScore\030\004 \001(\005\022\024\n\014clanAddScore\030\005 \001(\005\"$\n\026C"
    "lan3RecvRoleRewardReq\022\n\n\002id\030\001 \001(\005\"1\n\026Cla"
    "n3RecvRoleRewardRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030\002"
    " \001(\005\"\226\001\n\006PVP3DB\022\021\n\tlast_time\030\001 \001(\004\022\016\n\006se"
    "ason\030\002 \001(\005\022*\n\013last_season\030\003 \003(\0132\025.proto_"
    "ff.ClanComInfo\022(\n\tlast_race\030\004 \003(\0132\025.prot"
    "o_ff.ClanComInfo\022\023\n\013send_season\030\005 \001(\005\"/\n"
    "\020NotifyPvp3Season\022\013\n\003zid\030\001 \001(\005\022\016\n\006season"
    "\030\002 \001(\005\"<\n\017C2SClan3RankReq\022\013\n\003zid\030\001 \001(\005\022\013"
    "\n\003cid\030\002 \001(\004\022\017\n\007clan_id\030\003 \001(\004\"r\n\025L2SClan3"
    "JoinMathchReq\022\014\n\004type\030\001 \001(\005\022\014\n\004cids\030\002 \003("
    "\004\022\r\n\005fight\030\003 \001(\004\022\013\n\003zid\030\004 \001(\005\022\017\n\007clan_id"
    "\030\005 \001(\004\022\020\n\010logic_id\030\006 \001(\005\"N\n\016Clan3MatchRo"
    "le\022\013\n\003cid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\005\022\016\n\006clanid\030\003"
    " \001(\004\022\022\n\nmatch_type\030\004 \001(\005\"+\n\017Clan3MatchRo"
    "bot\022\013\n\003cid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\005\"\276\001\n\020Clan3M"
    "atchResult\022%\n\003red\030\001 \003(\0132\030.proto_ff.Clan3"
    "MatchRole\022,\n\tred_robot\030\002 \003(\0132\031.proto_ff."
    "Clan3MatchRobot\022&\n\004blue\030\003 \003(\0132\030.proto_ff"
    ".Clan3MatchRole\022-\n\nblue_robot\030\004 \003(\0132\031.pr"
    "oto_ff.Clan3MatchRobot\"B\n\026L2SClan3Cancel"
    "MatchReq\022\013\n\003cid\030\001 \001(\003\022\013\n\003zid\030\002 \001(\005\022\016\n\006cl"
    "anId\030\003 \001(\005\"4\n\030NotifyClan3ActionWaitDup\022\013"
    "\n\003cid\030\001 \001(\004\022\013\n\003opt\030\002 \001(\005\"\244\001\n\027L2SNotifyCl"
    "an3DupResult\022&\n\003red\030\001 \003(\0132\031.proto_ff.Cla"
    "n3MatchEntry\022\'\n\004blue\030\002 \003(\0132\031.proto_ff.Cl"
    "an3MatchEntry\022\016\n\006result\030\003 \001(\005\022\013\n\003mvp\030\004 \001"
    "(\004\022\r\n\005deads\030\005 \003(\004\022\014\n\004cids\030\006 \003(\004\"/\n\022C2SCl"
    "an3SendReward\022\013\n\003cid\030\001 \001(\004\022\014\n\004type\030\002 \001(\005"
    "\"4\n\031C2LClan3RecvRoleRewardReq\022\013\n\003cid\030\001 \001"
    "(\004\022\n\n\002id\030\002 \001(\005\"A\n\025S2CSynClan3ZeroUpdate\022"
    "(\n\tlast_race\030\001 \003(\0132\025.proto_ff.ClanComInf"
    "o\"l\n\022NotifyClan3DupKill\022)\n\006killer\030\001 \001(\0132"
    "\031.proto_ff.Clan3MatchEntry\022+\n\010beKiller\030\002"
    " \001(\0132\031.proto_ff.Clan3MatchEntry\".\n\021C2LCl"
    "an3RewardReq\022\014\n\004type\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004", 2799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pvp3v3.proto", &protobuf_RegisterTypes);
  NotifyClan3RoleData::default_instance_ = new NotifyClan3RoleData();
  Clan3SeasonRankReq::default_instance_ = new Clan3SeasonRankReq();
  Clan3SeasonRankRsp::default_instance_ = new Clan3SeasonRankRsp();
  Enter3v3ActReq::default_instance_ = new Enter3v3ActReq();
  Enter3v3ActRsp::default_instance_ = new Enter3v3ActRsp();
  WaitDupMember::default_instance_ = new WaitDupMember();
  NotifyWaitDupSceneData::default_instance_ = new NotifyWaitDupSceneData();
  Clan3JoinMathchReq::default_instance_ = new Clan3JoinMathchReq();
  Clan3JoinMathchRsp::default_instance_ = new Clan3JoinMathchRsp();
  Clan3CancelMatchReq::default_instance_ = new Clan3CancelMatchReq();
  NotifyCancelMatchRsp::default_instance_ = new NotifyCancelMatchRsp();
  Clan3MatchEntry::default_instance_ = new Clan3MatchEntry();
  NotifyClan3MatchSuccess::default_instance_ = new NotifyClan3MatchSuccess();
  NotifyClan3DupRun::default_instance_ = new NotifyClan3DupRun();
  NotifyClan3Result::default_instance_ = new NotifyClan3Result();
  Clan3RecvRoleRewardReq::default_instance_ = new Clan3RecvRoleRewardReq();
  Clan3RecvRoleRewardRsp::default_instance_ = new Clan3RecvRoleRewardRsp();
  PVP3DB::default_instance_ = new PVP3DB();
  NotifyPvp3Season::default_instance_ = new NotifyPvp3Season();
  C2SClan3RankReq::default_instance_ = new C2SClan3RankReq();
  L2SClan3JoinMathchReq::default_instance_ = new L2SClan3JoinMathchReq();
  Clan3MatchRole::default_instance_ = new Clan3MatchRole();
  Clan3MatchRobot::default_instance_ = new Clan3MatchRobot();
  Clan3MatchResult::default_instance_ = new Clan3MatchResult();
  L2SClan3CancelMatchReq::default_instance_ = new L2SClan3CancelMatchReq();
  NotifyClan3ActionWaitDup::default_instance_ = new NotifyClan3ActionWaitDup();
  L2SNotifyClan3DupResult::default_instance_ = new L2SNotifyClan3DupResult();
  C2SClan3SendReward::default_instance_ = new C2SClan3SendReward();
  C2LClan3RecvRoleRewardReq::default_instance_ = new C2LClan3RecvRoleRewardReq();
  S2CSynClan3ZeroUpdate::default_instance_ = new S2CSynClan3ZeroUpdate();
  NotifyClan3DupKill::default_instance_ = new NotifyClan3DupKill();
  C2LClan3RewardReq::default_instance_ = new C2LClan3RewardReq();
  NotifyClan3RoleData::default_instance_->InitAsDefaultInstance();
  Clan3SeasonRankReq::default_instance_->InitAsDefaultInstance();
  Clan3SeasonRankRsp::default_instance_->InitAsDefaultInstance();
  Enter3v3ActReq::default_instance_->InitAsDefaultInstance();
  Enter3v3ActRsp::default_instance_->InitAsDefaultInstance();
  WaitDupMember::default_instance_->InitAsDefaultInstance();
  NotifyWaitDupSceneData::default_instance_->InitAsDefaultInstance();
  Clan3JoinMathchReq::default_instance_->InitAsDefaultInstance();
  Clan3JoinMathchRsp::default_instance_->InitAsDefaultInstance();
  Clan3CancelMatchReq::default_instance_->InitAsDefaultInstance();
  NotifyCancelMatchRsp::default_instance_->InitAsDefaultInstance();
  Clan3MatchEntry::default_instance_->InitAsDefaultInstance();
  NotifyClan3MatchSuccess::default_instance_->InitAsDefaultInstance();
  NotifyClan3DupRun::default_instance_->InitAsDefaultInstance();
  NotifyClan3Result::default_instance_->InitAsDefaultInstance();
  Clan3RecvRoleRewardReq::default_instance_->InitAsDefaultInstance();
  Clan3RecvRoleRewardRsp::default_instance_->InitAsDefaultInstance();
  PVP3DB::default_instance_->InitAsDefaultInstance();
  NotifyPvp3Season::default_instance_->InitAsDefaultInstance();
  C2SClan3RankReq::default_instance_->InitAsDefaultInstance();
  L2SClan3JoinMathchReq::default_instance_->InitAsDefaultInstance();
  Clan3MatchRole::default_instance_->InitAsDefaultInstance();
  Clan3MatchRobot::default_instance_->InitAsDefaultInstance();
  Clan3MatchResult::default_instance_->InitAsDefaultInstance();
  L2SClan3CancelMatchReq::default_instance_->InitAsDefaultInstance();
  NotifyClan3ActionWaitDup::default_instance_->InitAsDefaultInstance();
  L2SNotifyClan3DupResult::default_instance_->InitAsDefaultInstance();
  C2SClan3SendReward::default_instance_->InitAsDefaultInstance();
  C2LClan3RecvRoleRewardReq::default_instance_->InitAsDefaultInstance();
  S2CSynClan3ZeroUpdate::default_instance_->InitAsDefaultInstance();
  NotifyClan3DupKill::default_instance_->InitAsDefaultInstance();
  C2LClan3RewardReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pvp3v3_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pvp3v3_2eproto {
  StaticDescriptorInitializer_Pvp3v3_2eproto() {
    protobuf_AddDesc_Pvp3v3_2eproto();
  }
} static_descriptor_initializer_Pvp3v3_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3RoleData::kClanIdFieldNumber;
const int NotifyClan3RoleData::kRoleJoinNumFieldNumber;
const int NotifyClan3RoleData::kRoleWinNumFieldNumber;
const int NotifyClan3RoleData::kRoleCwNumFieldNumber;
const int NotifyClan3RoleData::kBanTimeFieldNumber;
const int NotifyClan3RoleData::kDayJoinNumFieldNumber;
const int NotifyClan3RoleData::kRecvIdFieldNumber;
#endif  // !_MSC_VER

NotifyClan3RoleData::NotifyClan3RoleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3RoleData::InitAsDefaultInstance() {
}

NotifyClan3RoleData::NotifyClan3RoleData(const NotifyClan3RoleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3RoleData::SharedCtor() {
  _cached_size_ = 0;
  clan_id_ = 0;
  role_join_num_ = 0;
  role_win_num_ = 0;
  role_cw_num_ = 0;
  ban_time_ = GOOGLE_ULONGLONG(0);
  day_join_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3RoleData::~NotifyClan3RoleData() {
  SharedDtor();
}

void NotifyClan3RoleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClan3RoleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3RoleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3RoleData_descriptor_;
}

const NotifyClan3RoleData& NotifyClan3RoleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3RoleData* NotifyClan3RoleData::default_instance_ = NULL;

NotifyClan3RoleData* NotifyClan3RoleData::New() const {
  return new NotifyClan3RoleData;
}

void NotifyClan3RoleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clan_id_ = 0;
    role_join_num_ = 0;
    role_win_num_ = 0;
    role_cw_num_ = 0;
    ban_time_ = GOOGLE_ULONGLONG(0);
    day_join_num_ = 0;
  }
  recv_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3RoleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clan_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_role_join_num;
        break;
      }

      // optional int32 role_join_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_join_num_)));
          set_has_role_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_win_num;
        break;
      }

      // optional int32 role_win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_win_num_)));
          set_has_role_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_cw_num;
        break;
      }

      // optional int32 role_cw_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_cw_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_cw_num_)));
          set_has_role_cw_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ban_time;
        break;
      }

      // optional uint64 ban_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ban_time_)));
          set_has_ban_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_day_join_num;
        break;
      }

      // optional int32 day_join_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_join_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_join_num_)));
          set_has_day_join_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recv_id;
        break;
      }

      // repeated int32 recv_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_recv_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recv_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3RoleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clan_id = 1;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clan_id(), output);
  }

  // optional int32 role_join_num = 2;
  if (has_role_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->role_join_num(), output);
  }

  // optional int32 role_win_num = 3;
  if (has_role_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role_win_num(), output);
  }

  // optional int32 role_cw_num = 4;
  if (has_role_cw_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->role_cw_num(), output);
  }

  // optional uint64 ban_time = 5;
  if (has_ban_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ban_time(), output);
  }

  // optional int32 day_join_num = 6;
  if (has_day_join_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day_join_num(), output);
  }

  // repeated int32 recv_id = 7;
  for (int i = 0; i < this->recv_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->recv_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3RoleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clan_id = 1;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clan_id(), target);
  }

  // optional int32 role_join_num = 2;
  if (has_role_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->role_join_num(), target);
  }

  // optional int32 role_win_num = 3;
  if (has_role_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role_win_num(), target);
  }

  // optional int32 role_cw_num = 4;
  if (has_role_cw_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->role_cw_num(), target);
  }

  // optional uint64 ban_time = 5;
  if (has_ban_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ban_time(), target);
  }

  // optional int32 day_join_num = 6;
  if (has_day_join_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day_join_num(), target);
  }

  // repeated int32 recv_id = 7;
  for (int i = 0; i < this->recv_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->recv_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3RoleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clan_id = 1;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clan_id());
    }

    // optional int32 role_join_num = 2;
    if (has_role_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_join_num());
    }

    // optional int32 role_win_num = 3;
    if (has_role_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_win_num());
    }

    // optional int32 role_cw_num = 4;
    if (has_role_cw_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role_cw_num());
    }

    // optional uint64 ban_time = 5;
    if (has_ban_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ban_time());
    }

    // optional int32 day_join_num = 6;
    if (has_day_join_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_join_num());
    }

  }
  // repeated int32 recv_id = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_id(i));
    }
    total_size += 1 * this->recv_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3RoleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3RoleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3RoleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3RoleData::MergeFrom(const NotifyClan3RoleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_id_.MergeFrom(from.recv_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_role_join_num()) {
      set_role_join_num(from.role_join_num());
    }
    if (from.has_role_win_num()) {
      set_role_win_num(from.role_win_num());
    }
    if (from.has_role_cw_num()) {
      set_role_cw_num(from.role_cw_num());
    }
    if (from.has_ban_time()) {
      set_ban_time(from.ban_time());
    }
    if (from.has_day_join_num()) {
      set_day_join_num(from.day_join_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3RoleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3RoleData::CopyFrom(const NotifyClan3RoleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3RoleData::IsInitialized() const {

  return true;
}

void NotifyClan3RoleData::Swap(NotifyClan3RoleData* other) {
  if (other != this) {
    std::swap(clan_id_, other->clan_id_);
    std::swap(role_join_num_, other->role_join_num_);
    std::swap(role_win_num_, other->role_win_num_);
    std::swap(role_cw_num_, other->role_cw_num_);
    std::swap(ban_time_, other->ban_time_);
    std::swap(day_join_num_, other->day_join_num_);
    recv_id_.Swap(&other->recv_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3RoleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3RoleData_descriptor_;
  metadata.reflection = NotifyClan3RoleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3SeasonRankReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Clan3SeasonRankReq::Clan3SeasonRankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3SeasonRankReq::InitAsDefaultInstance() {
}

Clan3SeasonRankReq::Clan3SeasonRankReq(const Clan3SeasonRankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3SeasonRankReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3SeasonRankReq::~Clan3SeasonRankReq() {
  SharedDtor();
}

void Clan3SeasonRankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3SeasonRankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3SeasonRankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3SeasonRankReq_descriptor_;
}

const Clan3SeasonRankReq& Clan3SeasonRankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3SeasonRankReq* Clan3SeasonRankReq::default_instance_ = NULL;

Clan3SeasonRankReq* Clan3SeasonRankReq::New() const {
  return new Clan3SeasonRankReq;
}

void Clan3SeasonRankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3SeasonRankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3SeasonRankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3SeasonRankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3SeasonRankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3SeasonRankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3SeasonRankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3SeasonRankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3SeasonRankReq::MergeFrom(const Clan3SeasonRankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3SeasonRankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3SeasonRankReq::CopyFrom(const Clan3SeasonRankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3SeasonRankReq::IsInitialized() const {

  return true;
}

void Clan3SeasonRankReq::Swap(Clan3SeasonRankReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3SeasonRankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3SeasonRankReq_descriptor_;
  metadata.reflection = Clan3SeasonRankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3SeasonRankRsp::kTypeFieldNumber;
const int Clan3SeasonRankRsp::kRankFieldNumber;
const int Clan3SeasonRankRsp::kMyFieldNumber;
#endif  // !_MSC_VER

Clan3SeasonRankRsp::Clan3SeasonRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3SeasonRankRsp::InitAsDefaultInstance() {
  my_ = const_cast< ::proto_ff::ClanComInfo*>(&::proto_ff::ClanComInfo::default_instance());
}

Clan3SeasonRankRsp::Clan3SeasonRankRsp(const Clan3SeasonRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3SeasonRankRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  my_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3SeasonRankRsp::~Clan3SeasonRankRsp() {
  SharedDtor();
}

void Clan3SeasonRankRsp::SharedDtor() {
  if (this != default_instance_) {
    delete my_;
  }
}

void Clan3SeasonRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3SeasonRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3SeasonRankRsp_descriptor_;
}

const Clan3SeasonRankRsp& Clan3SeasonRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3SeasonRankRsp* Clan3SeasonRankRsp::default_instance_ = NULL;

Clan3SeasonRankRsp* Clan3SeasonRankRsp::New() const {
  return new Clan3SeasonRankRsp;
}

void Clan3SeasonRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_my()) {
      if (my_ != NULL) my_->::proto_ff::ClanComInfo::Clear();
    }
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3SeasonRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.ClanComInfo rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectTag(26)) goto parse_my;
        break;
      }

      // optional .proto_ff.ClanComInfo my = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_my:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_my()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3SeasonRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.ClanComInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  // optional .proto_ff.ClanComInfo my = 3;
  if (has_my()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->my(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3SeasonRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.ClanComInfo rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  // optional .proto_ff.ClanComInfo my = 3;
  if (has_my()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->my(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3SeasonRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .proto_ff.ClanComInfo my = 3;
    if (has_my()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->my());
    }

  }
  // repeated .proto_ff.ClanComInfo rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3SeasonRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3SeasonRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3SeasonRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3SeasonRankRsp::MergeFrom(const Clan3SeasonRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_my()) {
      mutable_my()->::proto_ff::ClanComInfo::MergeFrom(from.my());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3SeasonRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3SeasonRankRsp::CopyFrom(const Clan3SeasonRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3SeasonRankRsp::IsInitialized() const {

  return true;
}

void Clan3SeasonRankRsp::Swap(Clan3SeasonRankRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    rank_.Swap(&other->rank_);
    std::swap(my_, other->my_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3SeasonRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3SeasonRankRsp_descriptor_;
  metadata.reflection = Clan3SeasonRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Enter3v3ActReq::Enter3v3ActReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Enter3v3ActReq::InitAsDefaultInstance() {
}

Enter3v3ActReq::Enter3v3ActReq(const Enter3v3ActReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Enter3v3ActReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Enter3v3ActReq::~Enter3v3ActReq() {
  SharedDtor();
}

void Enter3v3ActReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Enter3v3ActReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enter3v3ActReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enter3v3ActReq_descriptor_;
}

const Enter3v3ActReq& Enter3v3ActReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Enter3v3ActReq* Enter3v3ActReq::default_instance_ = NULL;

Enter3v3ActReq* Enter3v3ActReq::New() const {
  return new Enter3v3ActReq;
}

void Enter3v3ActReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Enter3v3ActReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Enter3v3ActReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Enter3v3ActReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Enter3v3ActReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enter3v3ActReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Enter3v3ActReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Enter3v3ActReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Enter3v3ActReq::MergeFrom(const Enter3v3ActReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Enter3v3ActReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enter3v3ActReq::CopyFrom(const Enter3v3ActReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enter3v3ActReq::IsInitialized() const {

  return true;
}

void Enter3v3ActReq::Swap(Enter3v3ActReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Enter3v3ActReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Enter3v3ActReq_descriptor_;
  metadata.reflection = Enter3v3ActReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Enter3v3ActRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Enter3v3ActRsp::Enter3v3ActRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Enter3v3ActRsp::InitAsDefaultInstance() {
}

Enter3v3ActRsp::Enter3v3ActRsp(const Enter3v3ActRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Enter3v3ActRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Enter3v3ActRsp::~Enter3v3ActRsp() {
  SharedDtor();
}

void Enter3v3ActRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Enter3v3ActRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Enter3v3ActRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Enter3v3ActRsp_descriptor_;
}

const Enter3v3ActRsp& Enter3v3ActRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Enter3v3ActRsp* Enter3v3ActRsp::default_instance_ = NULL;

Enter3v3ActRsp* Enter3v3ActRsp::New() const {
  return new Enter3v3ActRsp;
}

void Enter3v3ActRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Enter3v3ActRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Enter3v3ActRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Enter3v3ActRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Enter3v3ActRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Enter3v3ActRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Enter3v3ActRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Enter3v3ActRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Enter3v3ActRsp::MergeFrom(const Enter3v3ActRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Enter3v3ActRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Enter3v3ActRsp::CopyFrom(const Enter3v3ActRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Enter3v3ActRsp::IsInitialized() const {

  return true;
}

void Enter3v3ActRsp::Swap(Enter3v3ActRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Enter3v3ActRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Enter3v3ActRsp_descriptor_;
  metadata.reflection = Enter3v3ActRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaitDupMember::kCidFieldNumber;
const int WaitDupMember::kNameFieldNumber;
const int WaitDupMember::kStateFieldNumber;
#endif  // !_MSC_VER

WaitDupMember::WaitDupMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WaitDupMember::InitAsDefaultInstance() {
}

WaitDupMember::WaitDupMember(const WaitDupMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WaitDupMember::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaitDupMember::~WaitDupMember() {
  SharedDtor();
}

void WaitDupMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WaitDupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaitDupMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitDupMember_descriptor_;
}

const WaitDupMember& WaitDupMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

WaitDupMember* WaitDupMember::default_instance_ = NULL;

WaitDupMember* WaitDupMember::New() const {
  return new WaitDupMember;
}

void WaitDupMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaitDupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WaitDupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WaitDupMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WaitDupMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaitDupMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaitDupMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaitDupMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaitDupMember::MergeFrom(const WaitDupMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaitDupMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaitDupMember::CopyFrom(const WaitDupMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitDupMember::IsInitialized() const {

  return true;
}

void WaitDupMember::Swap(WaitDupMember* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaitDupMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaitDupMember_descriptor_;
  metadata.reflection = WaitDupMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyWaitDupSceneData::kInfoFieldNumber;
const int NotifyWaitDupSceneData::kMemsFieldNumber;
#endif  // !_MSC_VER

NotifyWaitDupSceneData::NotifyWaitDupSceneData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyWaitDupSceneData::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::ClanComInfo*>(&::proto_ff::ClanComInfo::default_instance());
}

NotifyWaitDupSceneData::NotifyWaitDupSceneData(const NotifyWaitDupSceneData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyWaitDupSceneData::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyWaitDupSceneData::~NotifyWaitDupSceneData() {
  SharedDtor();
}

void NotifyWaitDupSceneData::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void NotifyWaitDupSceneData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyWaitDupSceneData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyWaitDupSceneData_descriptor_;
}

const NotifyWaitDupSceneData& NotifyWaitDupSceneData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyWaitDupSceneData* NotifyWaitDupSceneData::default_instance_ = NULL;

NotifyWaitDupSceneData* NotifyWaitDupSceneData::New() const {
  return new NotifyWaitDupSceneData;
}

void NotifyWaitDupSceneData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::ClanComInfo::Clear();
    }
  }
  mems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyWaitDupSceneData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanComInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mems;
        break;
      }

      // repeated .proto_ff.WaitDupMember mems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyWaitDupSceneData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanComInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .proto_ff.WaitDupMember mems = 2;
  for (int i = 0; i < this->mems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyWaitDupSceneData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanComInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .proto_ff.WaitDupMember mems = 2;
  for (int i = 0; i < this->mems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyWaitDupSceneData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanComInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .proto_ff.WaitDupMember mems = 2;
  total_size += 1 * this->mems_size();
  for (int i = 0; i < this->mems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyWaitDupSceneData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyWaitDupSceneData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyWaitDupSceneData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyWaitDupSceneData::MergeFrom(const NotifyWaitDupSceneData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mems_.MergeFrom(from.mems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::ClanComInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyWaitDupSceneData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyWaitDupSceneData::CopyFrom(const NotifyWaitDupSceneData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyWaitDupSceneData::IsInitialized() const {

  return true;
}

void NotifyWaitDupSceneData::Swap(NotifyWaitDupSceneData* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    mems_.Swap(&other->mems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyWaitDupSceneData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyWaitDupSceneData_descriptor_;
  metadata.reflection = NotifyWaitDupSceneData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3JoinMathchReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Clan3JoinMathchReq::Clan3JoinMathchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3JoinMathchReq::InitAsDefaultInstance() {
}

Clan3JoinMathchReq::Clan3JoinMathchReq(const Clan3JoinMathchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3JoinMathchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3JoinMathchReq::~Clan3JoinMathchReq() {
  SharedDtor();
}

void Clan3JoinMathchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3JoinMathchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3JoinMathchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3JoinMathchReq_descriptor_;
}

const Clan3JoinMathchReq& Clan3JoinMathchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3JoinMathchReq* Clan3JoinMathchReq::default_instance_ = NULL;

Clan3JoinMathchReq* Clan3JoinMathchReq::New() const {
  return new Clan3JoinMathchReq;
}

void Clan3JoinMathchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3JoinMathchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3JoinMathchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3JoinMathchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3JoinMathchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3JoinMathchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3JoinMathchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3JoinMathchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3JoinMathchReq::MergeFrom(const Clan3JoinMathchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3JoinMathchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3JoinMathchReq::CopyFrom(const Clan3JoinMathchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3JoinMathchReq::IsInitialized() const {

  return true;
}

void Clan3JoinMathchReq::Swap(Clan3JoinMathchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3JoinMathchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3JoinMathchReq_descriptor_;
  metadata.reflection = Clan3JoinMathchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3JoinMathchRsp::kRetFieldNumber;
const int Clan3JoinMathchRsp::kJoinTimeFieldNumber;
#endif  // !_MSC_VER

Clan3JoinMathchRsp::Clan3JoinMathchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3JoinMathchRsp::InitAsDefaultInstance() {
}

Clan3JoinMathchRsp::Clan3JoinMathchRsp(const Clan3JoinMathchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3JoinMathchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  join_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3JoinMathchRsp::~Clan3JoinMathchRsp() {
  SharedDtor();
}

void Clan3JoinMathchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3JoinMathchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3JoinMathchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3JoinMathchRsp_descriptor_;
}

const Clan3JoinMathchRsp& Clan3JoinMathchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3JoinMathchRsp* Clan3JoinMathchRsp::default_instance_ = NULL;

Clan3JoinMathchRsp* Clan3JoinMathchRsp::New() const {
  return new Clan3JoinMathchRsp;
}

void Clan3JoinMathchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    join_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3JoinMathchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_join_time;
        break;
      }

      // optional int32 join_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3JoinMathchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 join_time = 2;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->join_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3JoinMathchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 join_time = 2;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->join_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3JoinMathchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 join_time = 2;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->join_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3JoinMathchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3JoinMathchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3JoinMathchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3JoinMathchRsp::MergeFrom(const Clan3JoinMathchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3JoinMathchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3JoinMathchRsp::CopyFrom(const Clan3JoinMathchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3JoinMathchRsp::IsInitialized() const {

  return true;
}

void Clan3JoinMathchRsp::Swap(Clan3JoinMathchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(join_time_, other->join_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3JoinMathchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3JoinMathchRsp_descriptor_;
  metadata.reflection = Clan3JoinMathchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Clan3CancelMatchReq::Clan3CancelMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3CancelMatchReq::InitAsDefaultInstance() {
}

Clan3CancelMatchReq::Clan3CancelMatchReq(const Clan3CancelMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3CancelMatchReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3CancelMatchReq::~Clan3CancelMatchReq() {
  SharedDtor();
}

void Clan3CancelMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3CancelMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3CancelMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3CancelMatchReq_descriptor_;
}

const Clan3CancelMatchReq& Clan3CancelMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3CancelMatchReq* Clan3CancelMatchReq::default_instance_ = NULL;

Clan3CancelMatchReq* Clan3CancelMatchReq::New() const {
  return new Clan3CancelMatchReq;
}

void Clan3CancelMatchReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3CancelMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Clan3CancelMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3CancelMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3CancelMatchReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3CancelMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3CancelMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3CancelMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3CancelMatchReq::MergeFrom(const Clan3CancelMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3CancelMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3CancelMatchReq::CopyFrom(const Clan3CancelMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3CancelMatchReq::IsInitialized() const {

  return true;
}

void Clan3CancelMatchReq::Swap(Clan3CancelMatchReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3CancelMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3CancelMatchReq_descriptor_;
  metadata.reflection = Clan3CancelMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NotifyCancelMatchRsp::NotifyCancelMatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCancelMatchRsp::InitAsDefaultInstance() {
}

NotifyCancelMatchRsp::NotifyCancelMatchRsp(const NotifyCancelMatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCancelMatchRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCancelMatchRsp::~NotifyCancelMatchRsp() {
  SharedDtor();
}

void NotifyCancelMatchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCancelMatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCancelMatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCancelMatchRsp_descriptor_;
}

const NotifyCancelMatchRsp& NotifyCancelMatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyCancelMatchRsp* NotifyCancelMatchRsp::default_instance_ = NULL;

NotifyCancelMatchRsp* NotifyCancelMatchRsp::New() const {
  return new NotifyCancelMatchRsp;
}

void NotifyCancelMatchRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCancelMatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NotifyCancelMatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCancelMatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCancelMatchRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCancelMatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCancelMatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCancelMatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCancelMatchRsp::MergeFrom(const NotifyCancelMatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCancelMatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCancelMatchRsp::CopyFrom(const NotifyCancelMatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCancelMatchRsp::IsInitialized() const {

  return true;
}

void NotifyCancelMatchRsp::Swap(NotifyCancelMatchRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCancelMatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCancelMatchRsp_descriptor_;
  metadata.reflection = NotifyCancelMatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3MatchEntry::kCidFieldNumber;
const int Clan3MatchEntry::kIsRobotFieldNumber;
const int Clan3MatchEntry::kZidFieldNumber;
const int Clan3MatchEntry::kClanIdFieldNumber;
const int Clan3MatchEntry::kScoreFieldNumber;
const int Clan3MatchEntry::kClanNameFieldNumber;
const int Clan3MatchEntry::kNameFieldNumber;
const int Clan3MatchEntry::kHeadFieldNumber;
const int Clan3MatchEntry::kLevelFieldNumber;
const int Clan3MatchEntry::kMaxHPFieldNumber;
const int Clan3MatchEntry::kCurHpFieldNumber;
const int Clan3MatchEntry::kKillNumFieldNumber;
const int Clan3MatchEntry::kMvpFieldNumber;
const int Clan3MatchEntry::kMvpRewardFieldNumber;
const int Clan3MatchEntry::kDayRewardFieldNumber;
const int Clan3MatchEntry::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

Clan3MatchEntry::Clan3MatchEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3MatchEntry::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

Clan3MatchEntry::Clan3MatchEntry(const Clan3MatchEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3MatchEntry::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  is_robot_ = 0;
  zid_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  score_ = 0;
  clan_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  head_ = NULL;
  level_ = 0;
  maxhp_ = GOOGLE_ULONGLONG(0);
  curhp_ = GOOGLE_ULONGLONG(0);
  killnum_ = 0;
  mvp_ = 0;
  mvp_reward_ = 0;
  day_reward_ = 0;
  match_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3MatchEntry::~Clan3MatchEntry() {
  SharedDtor();
}

void Clan3MatchEntry::SharedDtor() {
  if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_name_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void Clan3MatchEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3MatchEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3MatchEntry_descriptor_;
}

const Clan3MatchEntry& Clan3MatchEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3MatchEntry* Clan3MatchEntry::default_instance_ = NULL;

Clan3MatchEntry* Clan3MatchEntry::New() const {
  return new Clan3MatchEntry;
}

void Clan3MatchEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    is_robot_ = 0;
    zid_ = 0;
    clan_id_ = GOOGLE_ULONGLONG(0);
    score_ = 0;
    if (has_clan_name()) {
      if (clan_name_ != &::google::protobuf::internal::kEmptyString) {
        clan_name_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    maxhp_ = GOOGLE_ULONGLONG(0);
    curhp_ = GOOGLE_ULONGLONG(0);
    killnum_ = 0;
    mvp_ = 0;
    mvp_reward_ = 0;
    day_reward_ = 0;
    match_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3MatchEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_robot;
        break;
      }

      // optional int32 is_robot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_robot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_robot_)));
          set_has_is_robot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score;
        break;
      }

      // optional int32 score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clan_name;
        break;
      }

      // optional bytes clan_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clan_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional bytes name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxHP;
        break;
      }

      // optional uint64 maxHP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_curHp;
        break;
      }

      // optional uint64 curHp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_killNum;
        break;
      }

      // optional int32 killNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mvp;
        break;
      }

      // optional int32 mvp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mvp_)));
          set_has_mvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mvp_reward;
        break;
      }

      // optional int32 mvp_reward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mvp_reward_)));
          set_has_mvp_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_day_reward;
        break;
      }

      // optional int32 day_reward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_reward_)));
          set_has_day_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_match_type;
        break;
      }

      // optional int32 match_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_type_)));
          set_has_match_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3MatchEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 is_robot = 2;
  if (has_is_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_robot(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // optional uint64 clan_id = 4;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clan_id(), output);
  }

  // optional int32 score = 5;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->score(), output);
  }

  // optional bytes clan_name = 6;
  if (has_clan_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->clan_name(), output);
  }

  // optional bytes name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->name(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 8;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->head(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint64 maxHP = 10;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->maxhp(), output);
  }

  // optional uint64 curHp = 11;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->curhp(), output);
  }

  // optional int32 killNum = 12;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->killnum(), output);
  }

  // optional int32 mvp = 13;
  if (has_mvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mvp(), output);
  }

  // optional int32 mvp_reward = 14;
  if (has_mvp_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->mvp_reward(), output);
  }

  // optional int32 day_reward = 15;
  if (has_day_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->day_reward(), output);
  }

  // optional int32 match_type = 16;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3MatchEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 is_robot = 2;
  if (has_is_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_robot(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 clan_id = 4;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clan_id(), target);
  }

  // optional int32 score = 5;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->score(), target);
  }

  // optional bytes clan_name = 6;
  if (has_clan_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->clan_name(), target);
  }

  // optional bytes name = 7;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->name(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 8;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->head(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint64 maxHP = 10;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->maxhp(), target);
  }

  // optional uint64 curHp = 11;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->curhp(), target);
  }

  // optional int32 killNum = 12;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->killnum(), target);
  }

  // optional int32 mvp = 13;
  if (has_mvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mvp(), target);
  }

  // optional int32 mvp_reward = 14;
  if (has_mvp_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->mvp_reward(), target);
  }

  // optional int32 day_reward = 15;
  if (has_day_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->day_reward(), target);
  }

  // optional int32 match_type = 16;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3MatchEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 is_robot = 2;
    if (has_is_robot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_robot());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 clan_id = 4;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 score = 5;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional bytes clan_name = 6;
    if (has_clan_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clan_name());
    }

    // optional bytes name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional .proto_ff.RoleHeadPicProto head = 8;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 maxHP = 10;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint64 curHp = 11;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional int32 killNum = 12;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killnum());
    }

    // optional int32 mvp = 13;
    if (has_mvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mvp());
    }

    // optional int32 mvp_reward = 14;
    if (has_mvp_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mvp_reward());
    }

    // optional int32 day_reward = 15;
    if (has_day_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day_reward());
    }

    // optional int32 match_type = 16;
    if (has_match_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3MatchEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3MatchEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3MatchEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3MatchEntry::MergeFrom(const Clan3MatchEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_is_robot()) {
      set_is_robot(from.is_robot());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_clan_name()) {
      set_clan_name(from.clan_name());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_mvp()) {
      set_mvp(from.mvp());
    }
    if (from.has_mvp_reward()) {
      set_mvp_reward(from.mvp_reward());
    }
    if (from.has_day_reward()) {
      set_day_reward(from.day_reward());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3MatchEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3MatchEntry::CopyFrom(const Clan3MatchEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3MatchEntry::IsInitialized() const {

  return true;
}

void Clan3MatchEntry::Swap(Clan3MatchEntry* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(is_robot_, other->is_robot_);
    std::swap(zid_, other->zid_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(score_, other->score_);
    std::swap(clan_name_, other->clan_name_);
    std::swap(name_, other->name_);
    std::swap(head_, other->head_);
    std::swap(level_, other->level_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(curhp_, other->curhp_);
    std::swap(killnum_, other->killnum_);
    std::swap(mvp_, other->mvp_);
    std::swap(mvp_reward_, other->mvp_reward_);
    std::swap(day_reward_, other->day_reward_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3MatchEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3MatchEntry_descriptor_;
  metadata.reflection = Clan3MatchEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3MatchSuccess::kRedFieldNumber;
const int NotifyClan3MatchSuccess::kBlueFieldNumber;
#endif  // !_MSC_VER

NotifyClan3MatchSuccess::NotifyClan3MatchSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3MatchSuccess::InitAsDefaultInstance() {
}

NotifyClan3MatchSuccess::NotifyClan3MatchSuccess(const NotifyClan3MatchSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3MatchSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3MatchSuccess::~NotifyClan3MatchSuccess() {
  SharedDtor();
}

void NotifyClan3MatchSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClan3MatchSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3MatchSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3MatchSuccess_descriptor_;
}

const NotifyClan3MatchSuccess& NotifyClan3MatchSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3MatchSuccess* NotifyClan3MatchSuccess::default_instance_ = NULL;

NotifyClan3MatchSuccess* NotifyClan3MatchSuccess::New() const {
  return new NotifyClan3MatchSuccess;
}

void NotifyClan3MatchSuccess::Clear() {
  red_.Clear();
  blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3MatchSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Clan3MatchEntry red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red;
        if (input->ExpectTag(18)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.Clan3MatchEntry blue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3MatchSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(i), output);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3MatchSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(i), target);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3MatchSuccess::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  total_size += 1 * this->red_size();
  for (int i = 0; i < this->red_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red(i));
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3MatchSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3MatchSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3MatchSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3MatchSuccess::MergeFrom(const NotifyClan3MatchSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_.MergeFrom(from.red_);
  blue_.MergeFrom(from.blue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3MatchSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3MatchSuccess::CopyFrom(const NotifyClan3MatchSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3MatchSuccess::IsInitialized() const {

  return true;
}

void NotifyClan3MatchSuccess::Swap(NotifyClan3MatchSuccess* other) {
  if (other != this) {
    red_.Swap(&other->red_);
    blue_.Swap(&other->blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3MatchSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3MatchSuccess_descriptor_;
  metadata.reflection = NotifyClan3MatchSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3DupRun::kRedFieldNumber;
const int NotifyClan3DupRun::kBlueFieldNumber;
#endif  // !_MSC_VER

NotifyClan3DupRun::NotifyClan3DupRun()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3DupRun::InitAsDefaultInstance() {
}

NotifyClan3DupRun::NotifyClan3DupRun(const NotifyClan3DupRun& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3DupRun::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3DupRun::~NotifyClan3DupRun() {
  SharedDtor();
}

void NotifyClan3DupRun::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClan3DupRun::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3DupRun::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3DupRun_descriptor_;
}

const NotifyClan3DupRun& NotifyClan3DupRun::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3DupRun* NotifyClan3DupRun::default_instance_ = NULL;

NotifyClan3DupRun* NotifyClan3DupRun::New() const {
  return new NotifyClan3DupRun;
}

void NotifyClan3DupRun::Clear() {
  red_.Clear();
  blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3DupRun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Clan3MatchEntry red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red;
        if (input->ExpectTag(18)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.Clan3MatchEntry blue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3DupRun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(i), output);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3DupRun::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(i), target);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3DupRun::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Clan3MatchEntry red = 1;
  total_size += 1 * this->red_size();
  for (int i = 0; i < this->red_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red(i));
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3DupRun::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3DupRun* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3DupRun*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3DupRun::MergeFrom(const NotifyClan3DupRun& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_.MergeFrom(from.red_);
  blue_.MergeFrom(from.blue_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3DupRun::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3DupRun::CopyFrom(const NotifyClan3DupRun& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3DupRun::IsInitialized() const {

  return true;
}

void NotifyClan3DupRun::Swap(NotifyClan3DupRun* other) {
  if (other != this) {
    red_.Swap(&other->red_);
    blue_.Swap(&other->blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3DupRun::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3DupRun_descriptor_;
  metadata.reflection = NotifyClan3DupRun_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3Result::kRedFieldNumber;
const int NotifyClan3Result::kBlueFieldNumber;
const int NotifyClan3Result::kResultFieldNumber;
const int NotifyClan3Result::kClanScoreFieldNumber;
const int NotifyClan3Result::kClanAddScoreFieldNumber;
#endif  // !_MSC_VER

NotifyClan3Result::NotifyClan3Result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3Result::InitAsDefaultInstance() {
}

NotifyClan3Result::NotifyClan3Result(const NotifyClan3Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3Result::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  clanscore_ = 0;
  clanaddscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3Result::~NotifyClan3Result() {
  SharedDtor();
}

void NotifyClan3Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClan3Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3Result_descriptor_;
}

const NotifyClan3Result& NotifyClan3Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3Result* NotifyClan3Result::default_instance_ = NULL;

NotifyClan3Result* NotifyClan3Result::New() const {
  return new NotifyClan3Result;
}

void NotifyClan3Result::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    result_ = 0;
    clanscore_ = 0;
    clanaddscore_ = 0;
  }
  red_.Clear();
  blue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Clan3MatchEntry red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red;
        if (input->ExpectTag(18)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.Clan3MatchEntry blue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clanScore;
        break;
      }

      // optional int32 clanScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanscore_)));
          set_has_clanscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clanAddScore;
        break;
      }

      // optional int32 clanAddScore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanAddScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanaddscore_)));
          set_has_clanaddscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(i), output);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue(i), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional int32 clanScore = 4;
  if (has_clanscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->clanscore(), output);
  }

  // optional int32 clanAddScore = 5;
  if (has_clanaddscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clanaddscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(i), target);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue(i), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional int32 clanScore = 4;
  if (has_clanscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->clanscore(), target);
  }

  // optional int32 clanAddScore = 5;
  if (has_clanaddscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clanaddscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3Result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional int32 clanScore = 4;
    if (has_clanscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanscore());
    }

    // optional int32 clanAddScore = 5;
    if (has_clanaddscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanaddscore());
    }

  }
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  total_size += 1 * this->red_size();
  for (int i = 0; i < this->red_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red(i));
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3Result::MergeFrom(const NotifyClan3Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_.MergeFrom(from.red_);
  blue_.MergeFrom(from.blue_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_clanscore()) {
      set_clanscore(from.clanscore());
    }
    if (from.has_clanaddscore()) {
      set_clanaddscore(from.clanaddscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3Result::CopyFrom(const NotifyClan3Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3Result::IsInitialized() const {

  return true;
}

void NotifyClan3Result::Swap(NotifyClan3Result* other) {
  if (other != this) {
    red_.Swap(&other->red_);
    blue_.Swap(&other->blue_);
    std::swap(result_, other->result_);
    std::swap(clanscore_, other->clanscore_);
    std::swap(clanaddscore_, other->clanaddscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3Result_descriptor_;
  metadata.reflection = NotifyClan3Result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3RecvRoleRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

Clan3RecvRoleRewardReq::Clan3RecvRoleRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3RecvRoleRewardReq::InitAsDefaultInstance() {
}

Clan3RecvRoleRewardReq::Clan3RecvRoleRewardReq(const Clan3RecvRoleRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3RecvRoleRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3RecvRoleRewardReq::~Clan3RecvRoleRewardReq() {
  SharedDtor();
}

void Clan3RecvRoleRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3RecvRoleRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3RecvRoleRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3RecvRoleRewardReq_descriptor_;
}

const Clan3RecvRoleRewardReq& Clan3RecvRoleRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3RecvRoleRewardReq* Clan3RecvRoleRewardReq::default_instance_ = NULL;

Clan3RecvRoleRewardReq* Clan3RecvRoleRewardReq::New() const {
  return new Clan3RecvRoleRewardReq;
}

void Clan3RecvRoleRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3RecvRoleRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3RecvRoleRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3RecvRoleRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3RecvRoleRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3RecvRoleRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3RecvRoleRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3RecvRoleRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3RecvRoleRewardReq::MergeFrom(const Clan3RecvRoleRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3RecvRoleRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3RecvRoleRewardReq::CopyFrom(const Clan3RecvRoleRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3RecvRoleRewardReq::IsInitialized() const {

  return true;
}

void Clan3RecvRoleRewardReq::Swap(Clan3RecvRoleRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3RecvRoleRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3RecvRoleRewardReq_descriptor_;
  metadata.reflection = Clan3RecvRoleRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3RecvRoleRewardRsp::kRetFieldNumber;
const int Clan3RecvRoleRewardRsp::kIdFieldNumber;
#endif  // !_MSC_VER

Clan3RecvRoleRewardRsp::Clan3RecvRoleRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3RecvRoleRewardRsp::InitAsDefaultInstance() {
}

Clan3RecvRoleRewardRsp::Clan3RecvRoleRewardRsp(const Clan3RecvRoleRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3RecvRoleRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3RecvRoleRewardRsp::~Clan3RecvRoleRewardRsp() {
  SharedDtor();
}

void Clan3RecvRoleRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3RecvRoleRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3RecvRoleRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3RecvRoleRewardRsp_descriptor_;
}

const Clan3RecvRoleRewardRsp& Clan3RecvRoleRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3RecvRoleRewardRsp* Clan3RecvRoleRewardRsp::default_instance_ = NULL;

Clan3RecvRoleRewardRsp* Clan3RecvRoleRewardRsp::New() const {
  return new Clan3RecvRoleRewardRsp;
}

void Clan3RecvRoleRewardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3RecvRoleRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3RecvRoleRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3RecvRoleRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3RecvRoleRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3RecvRoleRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3RecvRoleRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3RecvRoleRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3RecvRoleRewardRsp::MergeFrom(const Clan3RecvRoleRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3RecvRoleRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3RecvRoleRewardRsp::CopyFrom(const Clan3RecvRoleRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3RecvRoleRewardRsp::IsInitialized() const {

  return true;
}

void Clan3RecvRoleRewardRsp::Swap(Clan3RecvRoleRewardRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3RecvRoleRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3RecvRoleRewardRsp_descriptor_;
  metadata.reflection = Clan3RecvRoleRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVP3DB::kLastTimeFieldNumber;
const int PVP3DB::kSeasonFieldNumber;
const int PVP3DB::kLastSeasonFieldNumber;
const int PVP3DB::kLastRaceFieldNumber;
const int PVP3DB::kSendSeasonFieldNumber;
#endif  // !_MSC_VER

PVP3DB::PVP3DB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVP3DB::InitAsDefaultInstance() {
}

PVP3DB::PVP3DB(const PVP3DB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVP3DB::SharedCtor() {
  _cached_size_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  season_ = 0;
  send_season_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVP3DB::~PVP3DB() {
  SharedDtor();
}

void PVP3DB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVP3DB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVP3DB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVP3DB_descriptor_;
}

const PVP3DB& PVP3DB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

PVP3DB* PVP3DB::default_instance_ = NULL;

PVP3DB* PVP3DB::New() const {
  return new PVP3DB;
}

void PVP3DB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_time_ = GOOGLE_ULONGLONG(0);
    season_ = 0;
    send_season_ = 0;
  }
  last_season_.Clear();
  last_race_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVP3DB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 last_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_season;
        break;
      }

      // optional int32 season = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last_season;
        break;
      }

      // repeated .proto_ff.ClanComInfo last_season = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_season:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_season()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_last_season;
        if (input->ExpectTag(34)) goto parse_last_race;
        break;
      }

      // repeated .proto_ff.ClanComInfo last_race = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_race()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_last_race;
        if (input->ExpectTag(40)) goto parse_send_season;
        break;
      }

      // optional int32 send_season = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_season_)));
          set_has_send_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVP3DB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 last_time = 1;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->last_time(), output);
  }

  // optional int32 season = 2;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season(), output);
  }

  // repeated .proto_ff.ClanComInfo last_season = 3;
  for (int i = 0; i < this->last_season_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->last_season(i), output);
  }

  // repeated .proto_ff.ClanComInfo last_race = 4;
  for (int i = 0; i < this->last_race_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->last_race(i), output);
  }

  // optional int32 send_season = 5;
  if (has_send_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->send_season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVP3DB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 last_time = 1;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->last_time(), target);
  }

  // optional int32 season = 2;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season(), target);
  }

  // repeated .proto_ff.ClanComInfo last_season = 3;
  for (int i = 0; i < this->last_season_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->last_season(i), target);
  }

  // repeated .proto_ff.ClanComInfo last_race = 4;
  for (int i = 0; i < this->last_race_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->last_race(i), target);
  }

  // optional int32 send_season = 5;
  if (has_send_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->send_season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVP3DB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 last_time = 1;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 season = 2;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

    // optional int32 send_season = 5;
    if (has_send_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_season());
    }

  }
  // repeated .proto_ff.ClanComInfo last_season = 3;
  total_size += 1 * this->last_season_size();
  for (int i = 0; i < this->last_season_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_season(i));
  }

  // repeated .proto_ff.ClanComInfo last_race = 4;
  total_size += 1 * this->last_race_size();
  for (int i = 0; i < this->last_race_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_race(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVP3DB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVP3DB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVP3DB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVP3DB::MergeFrom(const PVP3DB& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_season_.MergeFrom(from.last_season_);
  last_race_.MergeFrom(from.last_race_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
    if (from.has_send_season()) {
      set_send_season(from.send_season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVP3DB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVP3DB::CopyFrom(const PVP3DB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVP3DB::IsInitialized() const {

  return true;
}

void PVP3DB::Swap(PVP3DB* other) {
  if (other != this) {
    std::swap(last_time_, other->last_time_);
    std::swap(season_, other->season_);
    last_season_.Swap(&other->last_season_);
    last_race_.Swap(&other->last_race_);
    std::swap(send_season_, other->send_season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVP3DB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVP3DB_descriptor_;
  metadata.reflection = PVP3DB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyPvp3Season::kZidFieldNumber;
const int NotifyPvp3Season::kSeasonFieldNumber;
#endif  // !_MSC_VER

NotifyPvp3Season::NotifyPvp3Season()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyPvp3Season::InitAsDefaultInstance() {
}

NotifyPvp3Season::NotifyPvp3Season(const NotifyPvp3Season& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyPvp3Season::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0;
  season_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyPvp3Season::~NotifyPvp3Season() {
  SharedDtor();
}

void NotifyPvp3Season::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyPvp3Season::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyPvp3Season::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyPvp3Season_descriptor_;
}

const NotifyPvp3Season& NotifyPvp3Season::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyPvp3Season* NotifyPvp3Season::default_instance_ = NULL;

NotifyPvp3Season* NotifyPvp3Season::New() const {
  return new NotifyPvp3Season;
}

void NotifyPvp3Season::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0;
    season_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyPvp3Season::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_season;
        break;
      }

      // optional int32 season = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyPvp3Season::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zid(), output);
  }

  // optional int32 season = 2;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->season(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyPvp3Season::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zid(), target);
  }

  // optional int32 season = 2;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->season(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyPvp3Season::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int32 season = 2;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->season());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyPvp3Season::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyPvp3Season* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyPvp3Season*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyPvp3Season::MergeFrom(const NotifyPvp3Season& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyPvp3Season::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyPvp3Season::CopyFrom(const NotifyPvp3Season& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyPvp3Season::IsInitialized() const {

  return true;
}

void NotifyPvp3Season::Swap(NotifyPvp3Season* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(season_, other->season_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyPvp3Season::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyPvp3Season_descriptor_;
  metadata.reflection = NotifyPvp3Season_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SClan3RankReq::kZidFieldNumber;
const int C2SClan3RankReq::kCidFieldNumber;
const int C2SClan3RankReq::kClanIdFieldNumber;
#endif  // !_MSC_VER

C2SClan3RankReq::C2SClan3RankReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SClan3RankReq::InitAsDefaultInstance() {
}

C2SClan3RankReq::C2SClan3RankReq(const C2SClan3RankReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SClan3RankReq::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  clan_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SClan3RankReq::~C2SClan3RankReq() {
  SharedDtor();
}

void C2SClan3RankReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2SClan3RankReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SClan3RankReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SClan3RankReq_descriptor_;
}

const C2SClan3RankReq& C2SClan3RankReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

C2SClan3RankReq* C2SClan3RankReq::default_instance_ = NULL;

C2SClan3RankReq* C2SClan3RankReq::New() const {
  return new C2SClan3RankReq;
}

void C2SClan3RankReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    clan_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SClan3RankReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SClan3RankReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint64 clan_id = 3;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clan_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SClan3RankReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->zid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint64 clan_id = 3;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clan_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SClan3RankReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 clan_id = 3;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SClan3RankReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SClan3RankReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SClan3RankReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SClan3RankReq::MergeFrom(const C2SClan3RankReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SClan3RankReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SClan3RankReq::CopyFrom(const C2SClan3RankReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SClan3RankReq::IsInitialized() const {

  return true;
}

void C2SClan3RankReq::Swap(C2SClan3RankReq* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(cid_, other->cid_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SClan3RankReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SClan3RankReq_descriptor_;
  metadata.reflection = C2SClan3RankReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SClan3JoinMathchReq::kTypeFieldNumber;
const int L2SClan3JoinMathchReq::kCidsFieldNumber;
const int L2SClan3JoinMathchReq::kFightFieldNumber;
const int L2SClan3JoinMathchReq::kZidFieldNumber;
const int L2SClan3JoinMathchReq::kClanIdFieldNumber;
const int L2SClan3JoinMathchReq::kLogicIdFieldNumber;
#endif  // !_MSC_VER

L2SClan3JoinMathchReq::L2SClan3JoinMathchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SClan3JoinMathchReq::InitAsDefaultInstance() {
}

L2SClan3JoinMathchReq::L2SClan3JoinMathchReq(const L2SClan3JoinMathchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SClan3JoinMathchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  clan_id_ = GOOGLE_ULONGLONG(0);
  logic_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SClan3JoinMathchReq::~L2SClan3JoinMathchReq() {
  SharedDtor();
}

void L2SClan3JoinMathchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2SClan3JoinMathchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SClan3JoinMathchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SClan3JoinMathchReq_descriptor_;
}

const L2SClan3JoinMathchReq& L2SClan3JoinMathchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

L2SClan3JoinMathchReq* L2SClan3JoinMathchReq::default_instance_ = NULL;

L2SClan3JoinMathchReq* L2SClan3JoinMathchReq::New() const {
  return new L2SClan3JoinMathchReq;
}

void L2SClan3JoinMathchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
    clan_id_ = GOOGLE_ULONGLONG(0);
    logic_id_ = 0;
  }
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SClan3JoinMathchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cids;
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional int32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clan_id;
        break;
      }

      // optional uint64 clan_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clan_id_)));
          set_has_clan_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_logic_id;
        break;
      }

      // optional int32 logic_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logic_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &logic_id_)));
          set_has_logic_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SClan3JoinMathchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated uint64 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->cids(i), output);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fight(), output);
  }

  // optional int32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->zid(), output);
  }

  // optional uint64 clan_id = 5;
  if (has_clan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->clan_id(), output);
  }

  // optional int32 logic_id = 6;
  if (has_logic_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->logic_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SClan3JoinMathchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated uint64 cids = 2;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->cids(i), target);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fight(), target);
  }

  // optional int32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->zid(), target);
  }

  // optional uint64 clan_id = 5;
  if (has_clan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->clan_id(), target);
  }

  // optional int32 logic_id = 6;
  if (has_logic_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->logic_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SClan3JoinMathchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional int32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 clan_id = 5;
    if (has_clan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clan_id());
    }

    // optional int32 logic_id = 6;
    if (has_logic_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->logic_id());
    }

  }
  // repeated uint64 cids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SClan3JoinMathchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SClan3JoinMathchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SClan3JoinMathchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SClan3JoinMathchReq::MergeFrom(const L2SClan3JoinMathchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_clan_id()) {
      set_clan_id(from.clan_id());
    }
    if (from.has_logic_id()) {
      set_logic_id(from.logic_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SClan3JoinMathchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SClan3JoinMathchReq::CopyFrom(const L2SClan3JoinMathchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SClan3JoinMathchReq::IsInitialized() const {

  return true;
}

void L2SClan3JoinMathchReq::Swap(L2SClan3JoinMathchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    cids_.Swap(&other->cids_);
    std::swap(fight_, other->fight_);
    std::swap(zid_, other->zid_);
    std::swap(clan_id_, other->clan_id_);
    std::swap(logic_id_, other->logic_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SClan3JoinMathchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SClan3JoinMathchReq_descriptor_;
  metadata.reflection = L2SClan3JoinMathchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3MatchRole::kCidFieldNumber;
const int Clan3MatchRole::kZidFieldNumber;
const int Clan3MatchRole::kClanidFieldNumber;
const int Clan3MatchRole::kMatchTypeFieldNumber;
#endif  // !_MSC_VER

Clan3MatchRole::Clan3MatchRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3MatchRole::InitAsDefaultInstance() {
}

Clan3MatchRole::Clan3MatchRole(const Clan3MatchRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3MatchRole::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  clanid_ = GOOGLE_ULONGLONG(0);
  match_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3MatchRole::~Clan3MatchRole() {
  SharedDtor();
}

void Clan3MatchRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3MatchRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3MatchRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3MatchRole_descriptor_;
}

const Clan3MatchRole& Clan3MatchRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3MatchRole* Clan3MatchRole::default_instance_ = NULL;

Clan3MatchRole* Clan3MatchRole::New() const {
  return new Clan3MatchRole;
}

void Clan3MatchRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
    clanid_ = GOOGLE_ULONGLONG(0);
    match_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3MatchRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clanid;
        break;
      }

      // optional uint64 clanid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_match_type;
        break;
      }

      // optional int32 match_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_type_)));
          set_has_match_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3MatchRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional uint64 clanid = 3;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clanid(), output);
  }

  // optional int32 match_type = 4;
  if (has_match_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->match_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3MatchRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 clanid = 3;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clanid(), target);
  }

  // optional int32 match_type = 4;
  if (has_match_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->match_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3MatchRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 clanid = 3;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clanid());
    }

    // optional int32 match_type = 4;
    if (has_match_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3MatchRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3MatchRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3MatchRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3MatchRole::MergeFrom(const Clan3MatchRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_match_type()) {
      set_match_type(from.match_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3MatchRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3MatchRole::CopyFrom(const Clan3MatchRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3MatchRole::IsInitialized() const {

  return true;
}

void Clan3MatchRole::Swap(Clan3MatchRole* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(clanid_, other->clanid_);
    std::swap(match_type_, other->match_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3MatchRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3MatchRole_descriptor_;
  metadata.reflection = Clan3MatchRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3MatchRobot::kCidFieldNumber;
const int Clan3MatchRobot::kZidFieldNumber;
#endif  // !_MSC_VER

Clan3MatchRobot::Clan3MatchRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3MatchRobot::InitAsDefaultInstance() {
}

Clan3MatchRobot::Clan3MatchRobot(const Clan3MatchRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3MatchRobot::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3MatchRobot::~Clan3MatchRobot() {
  SharedDtor();
}

void Clan3MatchRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3MatchRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3MatchRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3MatchRobot_descriptor_;
}

const Clan3MatchRobot& Clan3MatchRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3MatchRobot* Clan3MatchRobot::default_instance_ = NULL;

Clan3MatchRobot* Clan3MatchRobot::New() const {
  return new Clan3MatchRobot;
}

void Clan3MatchRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3MatchRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3MatchRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3MatchRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3MatchRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3MatchRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3MatchRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3MatchRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3MatchRobot::MergeFrom(const Clan3MatchRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3MatchRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3MatchRobot::CopyFrom(const Clan3MatchRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3MatchRobot::IsInitialized() const {

  return true;
}

void Clan3MatchRobot::Swap(Clan3MatchRobot* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3MatchRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3MatchRobot_descriptor_;
  metadata.reflection = Clan3MatchRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Clan3MatchResult::kRedFieldNumber;
const int Clan3MatchResult::kRedRobotFieldNumber;
const int Clan3MatchResult::kBlueFieldNumber;
const int Clan3MatchResult::kBlueRobotFieldNumber;
#endif  // !_MSC_VER

Clan3MatchResult::Clan3MatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Clan3MatchResult::InitAsDefaultInstance() {
}

Clan3MatchResult::Clan3MatchResult(const Clan3MatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Clan3MatchResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Clan3MatchResult::~Clan3MatchResult() {
  SharedDtor();
}

void Clan3MatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Clan3MatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Clan3MatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Clan3MatchResult_descriptor_;
}

const Clan3MatchResult& Clan3MatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

Clan3MatchResult* Clan3MatchResult::default_instance_ = NULL;

Clan3MatchResult* Clan3MatchResult::New() const {
  return new Clan3MatchResult;
}

void Clan3MatchResult::Clear() {
  red_.Clear();
  red_robot_.Clear();
  blue_.Clear();
  blue_robot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Clan3MatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Clan3MatchRole red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red;
        if (input->ExpectTag(18)) goto parse_red_robot;
        break;
      }

      // repeated .proto_ff.Clan3MatchRobot red_robot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red_robot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red_robot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_red_robot;
        if (input->ExpectTag(26)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.Clan3MatchRole blue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_blue;
        if (input->ExpectTag(34)) goto parse_blue_robot;
        break;
      }

      // repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue_robot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue_robot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_blue_robot;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Clan3MatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Clan3MatchRole red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(i), output);
  }

  // repeated .proto_ff.Clan3MatchRobot red_robot = 2;
  for (int i = 0; i < this->red_robot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->red_robot(i), output);
  }

  // repeated .proto_ff.Clan3MatchRole blue = 3;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->blue(i), output);
  }

  // repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
  for (int i = 0; i < this->blue_robot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->blue_robot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Clan3MatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Clan3MatchRole red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(i), target);
  }

  // repeated .proto_ff.Clan3MatchRobot red_robot = 2;
  for (int i = 0; i < this->red_robot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->red_robot(i), target);
  }

  // repeated .proto_ff.Clan3MatchRole blue = 3;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->blue(i), target);
  }

  // repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
  for (int i = 0; i < this->blue_robot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->blue_robot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Clan3MatchResult::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Clan3MatchRole red = 1;
  total_size += 1 * this->red_size();
  for (int i = 0; i < this->red_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red(i));
  }

  // repeated .proto_ff.Clan3MatchRobot red_robot = 2;
  total_size += 1 * this->red_robot_size();
  for (int i = 0; i < this->red_robot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red_robot(i));
  }

  // repeated .proto_ff.Clan3MatchRole blue = 3;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  // repeated .proto_ff.Clan3MatchRobot blue_robot = 4;
  total_size += 1 * this->blue_robot_size();
  for (int i = 0; i < this->blue_robot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue_robot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Clan3MatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Clan3MatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Clan3MatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Clan3MatchResult::MergeFrom(const Clan3MatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_.MergeFrom(from.red_);
  red_robot_.MergeFrom(from.red_robot_);
  blue_.MergeFrom(from.blue_);
  blue_robot_.MergeFrom(from.blue_robot_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Clan3MatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Clan3MatchResult::CopyFrom(const Clan3MatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Clan3MatchResult::IsInitialized() const {

  return true;
}

void Clan3MatchResult::Swap(Clan3MatchResult* other) {
  if (other != this) {
    red_.Swap(&other->red_);
    red_robot_.Swap(&other->red_robot_);
    blue_.Swap(&other->blue_);
    blue_robot_.Swap(&other->blue_robot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Clan3MatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Clan3MatchResult_descriptor_;
  metadata.reflection = Clan3MatchResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SClan3CancelMatchReq::kCidFieldNumber;
const int L2SClan3CancelMatchReq::kZidFieldNumber;
const int L2SClan3CancelMatchReq::kClanIdFieldNumber;
#endif  // !_MSC_VER

L2SClan3CancelMatchReq::L2SClan3CancelMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SClan3CancelMatchReq::InitAsDefaultInstance() {
}

L2SClan3CancelMatchReq::L2SClan3CancelMatchReq(const L2SClan3CancelMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SClan3CancelMatchReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  zid_ = 0;
  clanid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SClan3CancelMatchReq::~L2SClan3CancelMatchReq() {
  SharedDtor();
}

void L2SClan3CancelMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2SClan3CancelMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SClan3CancelMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SClan3CancelMatchReq_descriptor_;
}

const L2SClan3CancelMatchReq& L2SClan3CancelMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

L2SClan3CancelMatchReq* L2SClan3CancelMatchReq::default_instance_ = NULL;

L2SClan3CancelMatchReq* L2SClan3CancelMatchReq::New() const {
  return new L2SClan3CancelMatchReq;
}

void L2SClan3CancelMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    zid_ = 0;
    clanid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SClan3CancelMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional int32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clanId;
        break;
      }

      // optional int32 clanId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SClan3CancelMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->zid(), output);
  }

  // optional int32 clanId = 3;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clanid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SClan3CancelMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // optional int32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->zid(), target);
  }

  // optional int32 clanId = 3;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clanid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SClan3CancelMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional int32 clanId = 3;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SClan3CancelMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SClan3CancelMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SClan3CancelMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SClan3CancelMatchReq::MergeFrom(const L2SClan3CancelMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SClan3CancelMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SClan3CancelMatchReq::CopyFrom(const L2SClan3CancelMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SClan3CancelMatchReq::IsInitialized() const {

  return true;
}

void L2SClan3CancelMatchReq::Swap(L2SClan3CancelMatchReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(clanid_, other->clanid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SClan3CancelMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SClan3CancelMatchReq_descriptor_;
  metadata.reflection = L2SClan3CancelMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3ActionWaitDup::kCidFieldNumber;
const int NotifyClan3ActionWaitDup::kOptFieldNumber;
#endif  // !_MSC_VER

NotifyClan3ActionWaitDup::NotifyClan3ActionWaitDup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3ActionWaitDup::InitAsDefaultInstance() {
}

NotifyClan3ActionWaitDup::NotifyClan3ActionWaitDup(const NotifyClan3ActionWaitDup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3ActionWaitDup::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  opt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3ActionWaitDup::~NotifyClan3ActionWaitDup() {
  SharedDtor();
}

void NotifyClan3ActionWaitDup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyClan3ActionWaitDup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3ActionWaitDup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3ActionWaitDup_descriptor_;
}

const NotifyClan3ActionWaitDup& NotifyClan3ActionWaitDup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3ActionWaitDup* NotifyClan3ActionWaitDup::default_instance_ = NULL;

NotifyClan3ActionWaitDup* NotifyClan3ActionWaitDup::New() const {
  return new NotifyClan3ActionWaitDup;
}

void NotifyClan3ActionWaitDup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    opt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3ActionWaitDup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opt;
        break;
      }

      // optional int32 opt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt_)));
          set_has_opt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3ActionWaitDup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->opt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3ActionWaitDup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 opt = 2;
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->opt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3ActionWaitDup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 opt = 2;
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3ActionWaitDup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3ActionWaitDup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3ActionWaitDup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3ActionWaitDup::MergeFrom(const NotifyClan3ActionWaitDup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3ActionWaitDup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3ActionWaitDup::CopyFrom(const NotifyClan3ActionWaitDup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3ActionWaitDup::IsInitialized() const {

  return true;
}

void NotifyClan3ActionWaitDup::Swap(NotifyClan3ActionWaitDup* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(opt_, other->opt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3ActionWaitDup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3ActionWaitDup_descriptor_;
  metadata.reflection = NotifyClan3ActionWaitDup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int L2SNotifyClan3DupResult::kRedFieldNumber;
const int L2SNotifyClan3DupResult::kBlueFieldNumber;
const int L2SNotifyClan3DupResult::kResultFieldNumber;
const int L2SNotifyClan3DupResult::kMvpFieldNumber;
const int L2SNotifyClan3DupResult::kDeadsFieldNumber;
const int L2SNotifyClan3DupResult::kCidsFieldNumber;
#endif  // !_MSC_VER

L2SNotifyClan3DupResult::L2SNotifyClan3DupResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void L2SNotifyClan3DupResult::InitAsDefaultInstance() {
}

L2SNotifyClan3DupResult::L2SNotifyClan3DupResult(const L2SNotifyClan3DupResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void L2SNotifyClan3DupResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  mvp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

L2SNotifyClan3DupResult::~L2SNotifyClan3DupResult() {
  SharedDtor();
}

void L2SNotifyClan3DupResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void L2SNotifyClan3DupResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* L2SNotifyClan3DupResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return L2SNotifyClan3DupResult_descriptor_;
}

const L2SNotifyClan3DupResult& L2SNotifyClan3DupResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

L2SNotifyClan3DupResult* L2SNotifyClan3DupResult::default_instance_ = NULL;

L2SNotifyClan3DupResult* L2SNotifyClan3DupResult::New() const {
  return new L2SNotifyClan3DupResult;
}

void L2SNotifyClan3DupResult::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    result_ = 0;
    mvp_ = GOOGLE_ULONGLONG(0);
  }
  red_.Clear();
  blue_.Clear();
  deads_.Clear();
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool L2SNotifyClan3DupResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Clan3MatchEntry red = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_red()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_red;
        if (input->ExpectTag(18)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.Clan3MatchEntry blue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blue;
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mvp;
        break;
      }

      // optional uint64 mvp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mvp_)));
          set_has_mvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deads;
        break;
      }

      // repeated uint64 deads = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_deads())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deads())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_deads;
        if (input->ExpectTag(48)) goto parse_cids;
        break;
      }

      // repeated uint64 cids = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void L2SNotifyClan3DupResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->red(i), output);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blue(i), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // optional uint64 mvp = 4;
  if (has_mvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mvp(), output);
  }

  // repeated uint64 deads = 5;
  for (int i = 0; i < this->deads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->deads(i), output);
  }

  // repeated uint64 cids = 6;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* L2SNotifyClan3DupResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  for (int i = 0; i < this->red_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->red(i), target);
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blue(i), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // optional uint64 mvp = 4;
  if (has_mvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mvp(), target);
  }

  // repeated uint64 deads = 5;
  for (int i = 0; i < this->deads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->deads(i), target);
  }

  // repeated uint64 cids = 6;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(6, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int L2SNotifyClan3DupResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint64 mvp = 4;
    if (has_mvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mvp());
    }

  }
  // repeated .proto_ff.Clan3MatchEntry red = 1;
  total_size += 1 * this->red_size();
  for (int i = 0; i < this->red_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->red(i));
  }

  // repeated .proto_ff.Clan3MatchEntry blue = 2;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  // repeated uint64 deads = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->deads_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deads(i));
    }
    total_size += 1 * this->deads_size() + data_size;
  }

  // repeated uint64 cids = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void L2SNotifyClan3DupResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const L2SNotifyClan3DupResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const L2SNotifyClan3DupResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void L2SNotifyClan3DupResult::MergeFrom(const L2SNotifyClan3DupResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  red_.MergeFrom(from.red_);
  blue_.MergeFrom(from.blue_);
  deads_.MergeFrom(from.deads_);
  cids_.MergeFrom(from.cids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mvp()) {
      set_mvp(from.mvp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void L2SNotifyClan3DupResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void L2SNotifyClan3DupResult::CopyFrom(const L2SNotifyClan3DupResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2SNotifyClan3DupResult::IsInitialized() const {

  return true;
}

void L2SNotifyClan3DupResult::Swap(L2SNotifyClan3DupResult* other) {
  if (other != this) {
    red_.Swap(&other->red_);
    blue_.Swap(&other->blue_);
    std::swap(result_, other->result_);
    std::swap(mvp_, other->mvp_);
    deads_.Swap(&other->deads_);
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata L2SNotifyClan3DupResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = L2SNotifyClan3DupResult_descriptor_;
  metadata.reflection = L2SNotifyClan3DupResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2SClan3SendReward::kCidFieldNumber;
const int C2SClan3SendReward::kTypeFieldNumber;
#endif  // !_MSC_VER

C2SClan3SendReward::C2SClan3SendReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2SClan3SendReward::InitAsDefaultInstance() {
}

C2SClan3SendReward::C2SClan3SendReward(const C2SClan3SendReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2SClan3SendReward::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2SClan3SendReward::~C2SClan3SendReward() {
  SharedDtor();
}

void C2SClan3SendReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2SClan3SendReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2SClan3SendReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2SClan3SendReward_descriptor_;
}

const C2SClan3SendReward& C2SClan3SendReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

C2SClan3SendReward* C2SClan3SendReward::default_instance_ = NULL;

C2SClan3SendReward* C2SClan3SendReward::New() const {
  return new C2SClan3SendReward;
}

void C2SClan3SendReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2SClan3SendReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2SClan3SendReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2SClan3SendReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2SClan3SendReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2SClan3SendReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2SClan3SendReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2SClan3SendReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2SClan3SendReward::MergeFrom(const C2SClan3SendReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2SClan3SendReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2SClan3SendReward::CopyFrom(const C2SClan3SendReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2SClan3SendReward::IsInitialized() const {

  return true;
}

void C2SClan3SendReward::Swap(C2SClan3SendReward* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2SClan3SendReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2SClan3SendReward_descriptor_;
  metadata.reflection = C2SClan3SendReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LClan3RecvRoleRewardReq::kCidFieldNumber;
const int C2LClan3RecvRoleRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

C2LClan3RecvRoleRewardReq::C2LClan3RecvRoleRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LClan3RecvRoleRewardReq::InitAsDefaultInstance() {
}

C2LClan3RecvRoleRewardReq::C2LClan3RecvRoleRewardReq(const C2LClan3RecvRoleRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LClan3RecvRoleRewardReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LClan3RecvRoleRewardReq::~C2LClan3RecvRoleRewardReq() {
  SharedDtor();
}

void C2LClan3RecvRoleRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LClan3RecvRoleRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LClan3RecvRoleRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LClan3RecvRoleRewardReq_descriptor_;
}

const C2LClan3RecvRoleRewardReq& C2LClan3RecvRoleRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

C2LClan3RecvRoleRewardReq* C2LClan3RecvRoleRewardReq::default_instance_ = NULL;

C2LClan3RecvRoleRewardReq* C2LClan3RecvRoleRewardReq::New() const {
  return new C2LClan3RecvRoleRewardReq;
}

void C2LClan3RecvRoleRewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LClan3RecvRoleRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LClan3RecvRoleRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LClan3RecvRoleRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LClan3RecvRoleRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LClan3RecvRoleRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LClan3RecvRoleRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LClan3RecvRoleRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LClan3RecvRoleRewardReq::MergeFrom(const C2LClan3RecvRoleRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LClan3RecvRoleRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LClan3RecvRoleRewardReq::CopyFrom(const C2LClan3RecvRoleRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LClan3RecvRoleRewardReq::IsInitialized() const {

  return true;
}

void C2LClan3RecvRoleRewardReq::Swap(C2LClan3RecvRoleRewardReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LClan3RecvRoleRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LClan3RecvRoleRewardReq_descriptor_;
  metadata.reflection = C2LClan3RecvRoleRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int S2CSynClan3ZeroUpdate::kLastRaceFieldNumber;
#endif  // !_MSC_VER

S2CSynClan3ZeroUpdate::S2CSynClan3ZeroUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void S2CSynClan3ZeroUpdate::InitAsDefaultInstance() {
}

S2CSynClan3ZeroUpdate::S2CSynClan3ZeroUpdate(const S2CSynClan3ZeroUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void S2CSynClan3ZeroUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

S2CSynClan3ZeroUpdate::~S2CSynClan3ZeroUpdate() {
  SharedDtor();
}

void S2CSynClan3ZeroUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void S2CSynClan3ZeroUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2CSynClan3ZeroUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return S2CSynClan3ZeroUpdate_descriptor_;
}

const S2CSynClan3ZeroUpdate& S2CSynClan3ZeroUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

S2CSynClan3ZeroUpdate* S2CSynClan3ZeroUpdate::default_instance_ = NULL;

S2CSynClan3ZeroUpdate* S2CSynClan3ZeroUpdate::New() const {
  return new S2CSynClan3ZeroUpdate;
}

void S2CSynClan3ZeroUpdate::Clear() {
  last_race_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool S2CSynClan3ZeroUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ClanComInfo last_race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_race()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_last_race;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void S2CSynClan3ZeroUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ClanComInfo last_race = 1;
  for (int i = 0; i < this->last_race_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->last_race(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* S2CSynClan3ZeroUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ClanComInfo last_race = 1;
  for (int i = 0; i < this->last_race_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->last_race(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int S2CSynClan3ZeroUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ClanComInfo last_race = 1;
  total_size += 1 * this->last_race_size();
  for (int i = 0; i < this->last_race_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_race(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2CSynClan3ZeroUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const S2CSynClan3ZeroUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const S2CSynClan3ZeroUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void S2CSynClan3ZeroUpdate::MergeFrom(const S2CSynClan3ZeroUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  last_race_.MergeFrom(from.last_race_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void S2CSynClan3ZeroUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2CSynClan3ZeroUpdate::CopyFrom(const S2CSynClan3ZeroUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2CSynClan3ZeroUpdate::IsInitialized() const {

  return true;
}

void S2CSynClan3ZeroUpdate::Swap(S2CSynClan3ZeroUpdate* other) {
  if (other != this) {
    last_race_.Swap(&other->last_race_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata S2CSynClan3ZeroUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = S2CSynClan3ZeroUpdate_descriptor_;
  metadata.reflection = S2CSynClan3ZeroUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyClan3DupKill::kKillerFieldNumber;
const int NotifyClan3DupKill::kBeKillerFieldNumber;
#endif  // !_MSC_VER

NotifyClan3DupKill::NotifyClan3DupKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyClan3DupKill::InitAsDefaultInstance() {
  killer_ = const_cast< ::proto_ff::Clan3MatchEntry*>(&::proto_ff::Clan3MatchEntry::default_instance());
  bekiller_ = const_cast< ::proto_ff::Clan3MatchEntry*>(&::proto_ff::Clan3MatchEntry::default_instance());
}

NotifyClan3DupKill::NotifyClan3DupKill(const NotifyClan3DupKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyClan3DupKill::SharedCtor() {
  _cached_size_ = 0;
  killer_ = NULL;
  bekiller_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyClan3DupKill::~NotifyClan3DupKill() {
  SharedDtor();
}

void NotifyClan3DupKill::SharedDtor() {
  if (this != default_instance_) {
    delete killer_;
    delete bekiller_;
  }
}

void NotifyClan3DupKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyClan3DupKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyClan3DupKill_descriptor_;
}

const NotifyClan3DupKill& NotifyClan3DupKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

NotifyClan3DupKill* NotifyClan3DupKill::default_instance_ = NULL;

NotifyClan3DupKill* NotifyClan3DupKill::New() const {
  return new NotifyClan3DupKill;
}

void NotifyClan3DupKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_killer()) {
      if (killer_ != NULL) killer_->::proto_ff::Clan3MatchEntry::Clear();
    }
    if (has_bekiller()) {
      if (bekiller_ != NULL) bekiller_->::proto_ff::Clan3MatchEntry::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyClan3DupKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.Clan3MatchEntry killer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beKiller;
        break;
      }

      // optional .proto_ff.Clan3MatchEntry beKiller = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beKiller:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bekiller()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyClan3DupKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.Clan3MatchEntry killer = 1;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->killer(), output);
  }

  // optional .proto_ff.Clan3MatchEntry beKiller = 2;
  if (has_bekiller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bekiller(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyClan3DupKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.Clan3MatchEntry killer = 1;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->killer(), target);
  }

  // optional .proto_ff.Clan3MatchEntry beKiller = 2;
  if (has_bekiller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bekiller(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyClan3DupKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.Clan3MatchEntry killer = 1;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->killer());
    }

    // optional .proto_ff.Clan3MatchEntry beKiller = 2;
    if (has_bekiller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bekiller());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyClan3DupKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyClan3DupKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyClan3DupKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyClan3DupKill::MergeFrom(const NotifyClan3DupKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killer()) {
      mutable_killer()->::proto_ff::Clan3MatchEntry::MergeFrom(from.killer());
    }
    if (from.has_bekiller()) {
      mutable_bekiller()->::proto_ff::Clan3MatchEntry::MergeFrom(from.bekiller());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyClan3DupKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyClan3DupKill::CopyFrom(const NotifyClan3DupKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyClan3DupKill::IsInitialized() const {

  return true;
}

void NotifyClan3DupKill::Swap(NotifyClan3DupKill* other) {
  if (other != this) {
    std::swap(killer_, other->killer_);
    std::swap(bekiller_, other->bekiller_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyClan3DupKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyClan3DupKill_descriptor_;
  metadata.reflection = NotifyClan3DupKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int C2LClan3RewardReq::kTypeFieldNumber;
const int C2LClan3RewardReq::kCidFieldNumber;
#endif  // !_MSC_VER

C2LClan3RewardReq::C2LClan3RewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void C2LClan3RewardReq::InitAsDefaultInstance() {
}

C2LClan3RewardReq::C2LClan3RewardReq(const C2LClan3RewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void C2LClan3RewardReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

C2LClan3RewardReq::~C2LClan3RewardReq() {
  SharedDtor();
}

void C2LClan3RewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void C2LClan3RewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2LClan3RewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return C2LClan3RewardReq_descriptor_;
}

const C2LClan3RewardReq& C2LClan3RewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pvp3v3_2eproto();
  return *default_instance_;
}

C2LClan3RewardReq* C2LClan3RewardReq::default_instance_ = NULL;

C2LClan3RewardReq* C2LClan3RewardReq::New() const {
  return new C2LClan3RewardReq;
}

void C2LClan3RewardReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool C2LClan3RewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void C2LClan3RewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* C2LClan3RewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int C2LClan3RewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2LClan3RewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const C2LClan3RewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const C2LClan3RewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void C2LClan3RewardReq::MergeFrom(const C2LClan3RewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void C2LClan3RewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2LClan3RewardReq::CopyFrom(const C2LClan3RewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2LClan3RewardReq::IsInitialized() const {

  return true;
}

void C2LClan3RewardReq::Swap(C2LClan3RewardReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata C2LClan3RewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = C2LClan3RewardReq_descriptor_;
  metadata.reflection = C2LClan3RewardReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
