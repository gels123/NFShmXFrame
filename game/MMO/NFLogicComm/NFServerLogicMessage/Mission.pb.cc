// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Mission.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Mission.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionAttrProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionAttrProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissionAllAttrProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissionAllAttrProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DyMissionBountyParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DyMissionBountyParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* DyMissionCntProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DyMissionCntProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DyMissionCntAllProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DyMissionCntAllProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGQueryMissionListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGQueryMissionListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCQueryMissionListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCQueryMissionListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNpcAcceptMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNpcAcceptMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGNpcAcceptMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGNpcAcceptMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSubmitMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSubmitMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSubmitMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSubmitMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateMissionStatusNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateMissionStatusNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCDeleteMissionNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCDeleteMissionNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCUpdateDyAcceptCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCUpdateDyAcceptCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGTalkWithNpcReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGTalkWithNpcReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGSubmitMissionGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGSubmitMissionGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSubmitMissionGoodsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSubmitMissionGoodsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOnekeyMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOnekeyMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOnekeyMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOnekeyMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOnceMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOnceMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGOnceMissionRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGOnceMissionRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGMissionRecvSpecialReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGMissionRecvSpecialReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCMissionRecvSpecialReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCMissionRecvSpecialReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Mission_2eproto() {
  protobuf_AddDesc_Mission_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Mission.proto");
  GOOGLE_CHECK(file != NULL);
  CItemInfo_descriptor_ = file->message_type(0);
  static const int CItemInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, curvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, finvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, parma3_),
  };
  CItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CItemInfo_descriptor_,
      CItemInfo::default_instance_,
      CItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CItemInfo));
  MissionAttrProto_descriptor_ = file->message_type(1);
  static const int MissionAttrProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAttrProto, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAttrProto, attrval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAttrProto, ration_),
  };
  MissionAttrProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionAttrProto_descriptor_,
      MissionAttrProto::default_instance_,
      MissionAttrProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAttrProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAttrProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionAttrProto));
  MissionAllAttrProto_descriptor_ = file->message_type(2);
  static const int MissionAllAttrProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllAttrProto, attr_),
  };
  MissionAllAttrProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissionAllAttrProto_descriptor_,
      MissionAllAttrProto::default_instance_,
      MissionAllAttrProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllAttrProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissionAllAttrProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissionAllAttrProto));
  DyMissionBountyParam_descriptor_ = file->message_type(3);
  static const int DyMissionBountyParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionBountyParam, ten_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionBountyParam, twenty_state_),
  };
  DyMissionBountyParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DyMissionBountyParam_descriptor_,
      DyMissionBountyParam::default_instance_,
      DyMissionBountyParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionBountyParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionBountyParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DyMissionBountyParam));
  DyMissionCntProto_descriptor_ = file->message_type(4);
  static const int DyMissionCntProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntProto, missiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntProto, accept_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntProto, bounty_param_),
  };
  DyMissionCntProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DyMissionCntProto_descriptor_,
      DyMissionCntProto::default_instance_,
      DyMissionCntProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DyMissionCntProto));
  DyMissionCntAllProto_descriptor_ = file->message_type(5);
  static const int DyMissionCntAllProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntAllProto, count_),
  };
  DyMissionCntAllProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DyMissionCntAllProto_descriptor_,
      DyMissionCntAllProto::default_instance_,
      DyMissionCntAllProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntAllProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DyMissionCntAllProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DyMissionCntAllProto));
  CMissionTrack_descriptor_ = file->message_type(6);
  static const int CMissionTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, accepttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, textid_),
  };
  CMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CMissionTrack_descriptor_,
      CMissionTrack::default_instance_,
      CMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CMissionTrack));
  SubmitMissionInfo_descriptor_ = file->message_type(7);
  static const int SubmitMissionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMissionInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMissionInfo, goodsnum_),
  };
  SubmitMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitMissionInfo_descriptor_,
      SubmitMissionInfo::default_instance_,
      SubmitMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitMissionInfo));
  CGQueryMissionListReq_descriptor_ = file->message_type(8);
  static const int CGQueryMissionListReq_offsets_[1] = {
  };
  CGQueryMissionListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGQueryMissionListReq_descriptor_,
      CGQueryMissionListReq::default_instance_,
      CGQueryMissionListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQueryMissionListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGQueryMissionListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGQueryMissionListReq));
  GCQueryMissionListRsp_descriptor_ = file->message_type(9);
  static const int GCQueryMissionListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, acceptedlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, dy_count_),
  };
  GCQueryMissionListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCQueryMissionListRsp_descriptor_,
      GCQueryMissionListRsp::default_instance_,
      GCQueryMissionListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCQueryMissionListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCQueryMissionListRsp));
  CGNpcAcceptMissionReq_descriptor_ = file->message_type(10);
  static const int CGNpcAcceptMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionReq, missiontype_),
  };
  CGNpcAcceptMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNpcAcceptMissionReq_descriptor_,
      CGNpcAcceptMissionReq::default_instance_,
      CGNpcAcceptMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNpcAcceptMissionReq));
  CGNpcAcceptMissionRsp_descriptor_ = file->message_type(11);
  static const int CGNpcAcceptMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionRsp, missiontype_),
  };
  CGNpcAcceptMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGNpcAcceptMissionRsp_descriptor_,
      CGNpcAcceptMissionRsp::default_instance_,
      CGNpcAcceptMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGNpcAcceptMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGNpcAcceptMissionRsp));
  CGSubmitMissionReq_descriptor_ = file->message_type(12);
  static const int CGSubmitMissionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, index_),
  };
  CGSubmitMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSubmitMissionReq_descriptor_,
      CGSubmitMissionReq::default_instance_,
      CGSubmitMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSubmitMissionReq));
  GCSubmitMissionRsp_descriptor_ = file->message_type(13);
  static const int GCSubmitMissionRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, dynamicid_),
  };
  GCSubmitMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSubmitMissionRsp_descriptor_,
      GCSubmitMissionRsp::default_instance_,
      GCSubmitMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSubmitMissionRsp));
  GCUpdateMissionStatusNotify_descriptor_ = file->message_type(14);
  static const int GCUpdateMissionStatusNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, updatelist_),
  };
  GCUpdateMissionStatusNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateMissionStatusNotify_descriptor_,
      GCUpdateMissionStatusNotify::default_instance_,
      GCUpdateMissionStatusNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateMissionStatusNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateMissionStatusNotify));
  GCDeleteMissionNotify_descriptor_ = file->message_type(15);
  static const int GCDeleteMissionNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, dynamicid_),
  };
  GCDeleteMissionNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCDeleteMissionNotify_descriptor_,
      GCDeleteMissionNotify::default_instance_,
      GCDeleteMissionNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCDeleteMissionNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCDeleteMissionNotify));
  GCUpdateDyAcceptCount_descriptor_ = file->message_type(16);
  static const int GCUpdateDyAcceptCount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateDyAcceptCount, dy_count_),
  };
  GCUpdateDyAcceptCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCUpdateDyAcceptCount_descriptor_,
      GCUpdateDyAcceptCount::default_instance_,
      GCUpdateDyAcceptCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateDyAcceptCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCUpdateDyAcceptCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCUpdateDyAcceptCount));
  CGTalkWithNpcReq_descriptor_ = file->message_type(17);
  static const int CGTalkWithNpcReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, type_),
  };
  CGTalkWithNpcReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGTalkWithNpcReq_descriptor_,
      CGTalkWithNpcReq::default_instance_,
      CGTalkWithNpcReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGTalkWithNpcReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGTalkWithNpcReq));
  CGSubmitMissionGoodsReq_descriptor_ = file->message_type(18);
  static const int CGSubmitMissionGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionGoodsReq, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionGoodsReq, dynamicid_),
  };
  CGSubmitMissionGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGSubmitMissionGoodsReq_descriptor_,
      CGSubmitMissionGoodsReq::default_instance_,
      CGSubmitMissionGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGSubmitMissionGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGSubmitMissionGoodsReq));
  GCSubmitMissionGoodsRsp_descriptor_ = file->message_type(19);
  static const int GCSubmitMissionGoodsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionGoodsRsp, ret_),
  };
  GCSubmitMissionGoodsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSubmitMissionGoodsRsp_descriptor_,
      GCSubmitMissionGoodsRsp::default_instance_,
      GCSubmitMissionGoodsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionGoodsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSubmitMissionGoodsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSubmitMissionGoodsRsp));
  CGOnekeyMissionReq_descriptor_ = file->message_type(20);
  static const int CGOnekeyMissionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionReq, num_),
  };
  CGOnekeyMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOnekeyMissionReq_descriptor_,
      CGOnekeyMissionReq::default_instance_,
      CGOnekeyMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOnekeyMissionReq));
  CGOnekeyMissionRsp_descriptor_ = file->message_type(21);
  static const int CGOnekeyMissionRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, accept_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, gold_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, exp_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, type_),
  };
  CGOnekeyMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOnekeyMissionRsp_descriptor_,
      CGOnekeyMissionRsp::default_instance_,
      CGOnekeyMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnekeyMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOnekeyMissionRsp));
  CGOnceMissionReq_descriptor_ = file->message_type(22);
  static const int CGOnceMissionReq_offsets_[1] = {
  };
  CGOnceMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOnceMissionReq_descriptor_,
      CGOnceMissionReq::default_instance_,
      CGOnceMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnceMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnceMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOnceMissionReq));
  CGOnceMissionRsp_descriptor_ = file->message_type(23);
  static const int CGOnceMissionRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnceMissionRsp, retcode_),
  };
  CGOnceMissionRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGOnceMissionRsp_descriptor_,
      CGOnceMissionRsp::default_instance_,
      CGOnceMissionRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnceMissionRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGOnceMissionRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGOnceMissionRsp));
  CGMissionRecvSpecialReward_descriptor_ = file->message_type(24);
  static const int CGMissionRecvSpecialReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMissionRecvSpecialReward, type_),
  };
  CGMissionRecvSpecialReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGMissionRecvSpecialReward_descriptor_,
      CGMissionRecvSpecialReward::default_instance_,
      CGMissionRecvSpecialReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMissionRecvSpecialReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGMissionRecvSpecialReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGMissionRecvSpecialReward));
  GCMissionRecvSpecialReward_descriptor_ = file->message_type(25);
  static const int GCMissionRecvSpecialReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMissionRecvSpecialReward, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMissionRecvSpecialReward, type_),
  };
  GCMissionRecvSpecialReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCMissionRecvSpecialReward_descriptor_,
      GCMissionRecvSpecialReward::default_instance_,
      GCMissionRecvSpecialReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMissionRecvSpecialReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCMissionRecvSpecialReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCMissionRecvSpecialReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Mission_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CItemInfo_descriptor_, &CItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionAttrProto_descriptor_, &MissionAttrProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissionAllAttrProto_descriptor_, &MissionAllAttrProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DyMissionBountyParam_descriptor_, &DyMissionBountyParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DyMissionCntProto_descriptor_, &DyMissionCntProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DyMissionCntAllProto_descriptor_, &DyMissionCntAllProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CMissionTrack_descriptor_, &CMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitMissionInfo_descriptor_, &SubmitMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGQueryMissionListReq_descriptor_, &CGQueryMissionListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCQueryMissionListRsp_descriptor_, &GCQueryMissionListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNpcAcceptMissionReq_descriptor_, &CGNpcAcceptMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGNpcAcceptMissionRsp_descriptor_, &CGNpcAcceptMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSubmitMissionReq_descriptor_, &CGSubmitMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSubmitMissionRsp_descriptor_, &GCSubmitMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateMissionStatusNotify_descriptor_, &GCUpdateMissionStatusNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCDeleteMissionNotify_descriptor_, &GCDeleteMissionNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCUpdateDyAcceptCount_descriptor_, &GCUpdateDyAcceptCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGTalkWithNpcReq_descriptor_, &CGTalkWithNpcReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGSubmitMissionGoodsReq_descriptor_, &CGSubmitMissionGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSubmitMissionGoodsRsp_descriptor_, &GCSubmitMissionGoodsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOnekeyMissionReq_descriptor_, &CGOnekeyMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOnekeyMissionRsp_descriptor_, &CGOnekeyMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOnceMissionReq_descriptor_, &CGOnceMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGOnceMissionRsp_descriptor_, &CGOnceMissionRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGMissionRecvSpecialReward_descriptor_, &CGMissionRecvSpecialReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCMissionRecvSpecialReward_descriptor_, &GCMissionRecvSpecialReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Mission_2eproto() {
  delete CItemInfo::default_instance_;
  delete CItemInfo_reflection_;
  delete MissionAttrProto::default_instance_;
  delete MissionAttrProto_reflection_;
  delete MissionAllAttrProto::default_instance_;
  delete MissionAllAttrProto_reflection_;
  delete DyMissionBountyParam::default_instance_;
  delete DyMissionBountyParam_reflection_;
  delete DyMissionCntProto::default_instance_;
  delete DyMissionCntProto_reflection_;
  delete DyMissionCntAllProto::default_instance_;
  delete DyMissionCntAllProto_reflection_;
  delete CMissionTrack::default_instance_;
  delete CMissionTrack_reflection_;
  delete SubmitMissionInfo::default_instance_;
  delete SubmitMissionInfo_reflection_;
  delete CGQueryMissionListReq::default_instance_;
  delete CGQueryMissionListReq_reflection_;
  delete GCQueryMissionListRsp::default_instance_;
  delete GCQueryMissionListRsp_reflection_;
  delete CGNpcAcceptMissionReq::default_instance_;
  delete CGNpcAcceptMissionReq_reflection_;
  delete CGNpcAcceptMissionRsp::default_instance_;
  delete CGNpcAcceptMissionRsp_reflection_;
  delete CGSubmitMissionReq::default_instance_;
  delete CGSubmitMissionReq_reflection_;
  delete GCSubmitMissionRsp::default_instance_;
  delete GCSubmitMissionRsp_reflection_;
  delete GCUpdateMissionStatusNotify::default_instance_;
  delete GCUpdateMissionStatusNotify_reflection_;
  delete GCDeleteMissionNotify::default_instance_;
  delete GCDeleteMissionNotify_reflection_;
  delete GCUpdateDyAcceptCount::default_instance_;
  delete GCUpdateDyAcceptCount_reflection_;
  delete CGTalkWithNpcReq::default_instance_;
  delete CGTalkWithNpcReq_reflection_;
  delete CGSubmitMissionGoodsReq::default_instance_;
  delete CGSubmitMissionGoodsReq_reflection_;
  delete GCSubmitMissionGoodsRsp::default_instance_;
  delete GCSubmitMissionGoodsRsp_reflection_;
  delete CGOnekeyMissionReq::default_instance_;
  delete CGOnekeyMissionReq_reflection_;
  delete CGOnekeyMissionRsp::default_instance_;
  delete CGOnekeyMissionRsp_reflection_;
  delete CGOnceMissionReq::default_instance_;
  delete CGOnceMissionReq_reflection_;
  delete CGOnceMissionRsp::default_instance_;
  delete CGOnceMissionRsp_reflection_;
  delete CGMissionRecvSpecialReward::default_instance_;
  delete CGMissionRecvSpecialReward_reflection_;
  delete GCMissionRecvSpecialReward::default_instance_;
  delete GCMissionRecvSpecialReward_reflection_;
}

void protobuf_AddDesc_Mission_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rMission.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\022common_logic.proto\032\tCom.proto\""
    "y\n\tCItemInfo\022\014\n\004type\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\020"
    "\n\010curValue\030\003 \001(\r\022\020\n\010finValue\030\004 \001(\r\022\016\n\006pa"
    "rma1\030\005 \001(\004\022\016\n\006parma2\030\006 \001(\004\022\016\n\006parma3\030\007 \001"
    "(\004\"C\n\020MissionAttrProto\022\016\n\006attrid\030\001 \001(\005\022\017"
    "\n\007attrval\030\002 \001(\005\022\016\n\006ration\030\003 \001(\005\"\?\n\023Missi"
    "onAllAttrProto\022(\n\004attr\030\001 \003(\0132\032.proto_ff."
    "MissionAttrProto\"\?\n\024DyMissionBountyParam"
    "\022\021\n\tten_state\030\001 \001(\r\022\024\n\014twenty_state\030\002 \001("
    "\r\"r\n\021DyMissionCntProto\022\023\n\013missiontype\030\001 "
    "\001(\r\022\022\n\naccept_num\030\002 \001(\005\0224\n\014bounty_param\030"
    "\003 \001(\0132\036.proto_ff.DyMissionBountyParam\"B\n"
    "\024DyMissionCntAllProto\022*\n\005count\030\001 \003(\0132\033.p"
    "roto_ff.DyMissionCntProto\"\220\001\n\rCMissionTr"
    "ack\022%\n\010itemInfo\030\001 \003(\0132\023.proto_ff.CItemIn"
    "fo\022\021\n\tmissionId\030\002 \001(\004\022\021\n\tdynamicid\030\003 \001(\004"
    "\022\016\n\006status\030\004 \001(\r\022\022\n\naccepttime\030\005 \001(\004\022\016\n\006"
    "textid\030\006 \001(\004\"4\n\021SubmitMissionInfo\022\r\n\005ind"
    "ex\030\001 \001(\r\022\020\n\010goodsNum\030\002 \001(\r\"\027\n\025CGQueryMis"
    "sionListReq\"x\n\025GCQueryMissionListRsp\022-\n\014"
    "acceptedList\030\001 \003(\0132\027.proto_ff.CMissionTr"
    "ack\0220\n\010dy_count\030\002 \001(\0132\036.proto_ff.DyMissi"
    "onCntAllProto\",\n\025CGNpcAcceptMissionReq\022\023"
    "\n\013missiontype\030\001 \001(\005\"=\n\025CGNpcAcceptMissio"
    "nRsp\022\017\n\007retcode\030\001 \001(\r\022\023\n\013missiontype\030\003 \001"
    "(\005\"6\n\022CGSubmitMissionReq\022\021\n\tdynamicid\030\001 "
    "\001(\004\022\r\n\005index\030\002 \001(\r\"4\n\022GCSubmitMissionRsp"
    "\022\013\n\003ret\030\001 \001(\r\022\021\n\tdynamicid\030\002 \001(\004\"J\n\033GCUp"
    "dateMissionStatusNotify\022+\n\nupdateList\030\001 "
    "\003(\0132\027.proto_ff.CMissionTrack\"*\n\025GCDelete"
    "MissionNotify\022\021\n\tdynamicid\030\001 \003(\004\"I\n\025GCUp"
    "dateDyAcceptCount\0220\n\010dy_count\030\001 \001(\0132\036.pr"
    "oto_ff.DyMissionCntAllProto\"d\n\020CGTalkWit"
    "hNpcReq\022\r\n\005npcId\030\001 \001(\004\022\021\n\tdynamicid\030\002 \001("
    "\004\022 \n\003pos\030\003 \001(\0132\023.proto_ff.Vector3PB\022\014\n\004t"
    "ype\030\004 \001(\r\"[\n\027CGSubmitMissionGoodsReq\022-\n\010"
    "infoList\030\001 \003(\0132\033.proto_ff.SubmitMissionI"
    "nfo\022\021\n\tdynamicid\030\002 \001(\004\"&\n\027GCSubmitMissio"
    "nGoodsRsp\022\013\n\003ret\030\001 \001(\005\"/\n\022CGOnekeyMissio"
    "nReq\022\014\n\004type\030\001 \001(\005\022\013\n\003num\030\002 \001(\005\"j\n\022CGOne"
    "keyMissionRsp\022\017\n\007retcode\030\001 \002(\005\022\022\n\naccept"
    "_num\030\002 \001(\005\022\020\n\010gold_lst\030\003 \003(\003\022\017\n\007exp_lst\030"
    "\004 \003(\003\022\014\n\004type\030\005 \001(\005\"\022\n\020CGOnceMissionReq\""
    "#\n\020CGOnceMissionRsp\022\017\n\007retcode\030\001 \002(\005\"*\n\032"
    "CGMissionRecvSpecialReward\022\014\n\004type\030\001 \001(\005"
    "\";\n\032GCMissionRecvSpecialReward\022\017\n\007retcod"
    "e\030\001 \002(\005\022\014\n\004type\030\002 \001(\005", 1901);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Mission.proto", &protobuf_RegisterTypes);
  CItemInfo::default_instance_ = new CItemInfo();
  MissionAttrProto::default_instance_ = new MissionAttrProto();
  MissionAllAttrProto::default_instance_ = new MissionAllAttrProto();
  DyMissionBountyParam::default_instance_ = new DyMissionBountyParam();
  DyMissionCntProto::default_instance_ = new DyMissionCntProto();
  DyMissionCntAllProto::default_instance_ = new DyMissionCntAllProto();
  CMissionTrack::default_instance_ = new CMissionTrack();
  SubmitMissionInfo::default_instance_ = new SubmitMissionInfo();
  CGQueryMissionListReq::default_instance_ = new CGQueryMissionListReq();
  GCQueryMissionListRsp::default_instance_ = new GCQueryMissionListRsp();
  CGNpcAcceptMissionReq::default_instance_ = new CGNpcAcceptMissionReq();
  CGNpcAcceptMissionRsp::default_instance_ = new CGNpcAcceptMissionRsp();
  CGSubmitMissionReq::default_instance_ = new CGSubmitMissionReq();
  GCSubmitMissionRsp::default_instance_ = new GCSubmitMissionRsp();
  GCUpdateMissionStatusNotify::default_instance_ = new GCUpdateMissionStatusNotify();
  GCDeleteMissionNotify::default_instance_ = new GCDeleteMissionNotify();
  GCUpdateDyAcceptCount::default_instance_ = new GCUpdateDyAcceptCount();
  CGTalkWithNpcReq::default_instance_ = new CGTalkWithNpcReq();
  CGSubmitMissionGoodsReq::default_instance_ = new CGSubmitMissionGoodsReq();
  GCSubmitMissionGoodsRsp::default_instance_ = new GCSubmitMissionGoodsRsp();
  CGOnekeyMissionReq::default_instance_ = new CGOnekeyMissionReq();
  CGOnekeyMissionRsp::default_instance_ = new CGOnekeyMissionRsp();
  CGOnceMissionReq::default_instance_ = new CGOnceMissionReq();
  CGOnceMissionRsp::default_instance_ = new CGOnceMissionRsp();
  CGMissionRecvSpecialReward::default_instance_ = new CGMissionRecvSpecialReward();
  GCMissionRecvSpecialReward::default_instance_ = new GCMissionRecvSpecialReward();
  CItemInfo::default_instance_->InitAsDefaultInstance();
  MissionAttrProto::default_instance_->InitAsDefaultInstance();
  MissionAllAttrProto::default_instance_->InitAsDefaultInstance();
  DyMissionBountyParam::default_instance_->InitAsDefaultInstance();
  DyMissionCntProto::default_instance_->InitAsDefaultInstance();
  DyMissionCntAllProto::default_instance_->InitAsDefaultInstance();
  CMissionTrack::default_instance_->InitAsDefaultInstance();
  SubmitMissionInfo::default_instance_->InitAsDefaultInstance();
  CGQueryMissionListReq::default_instance_->InitAsDefaultInstance();
  GCQueryMissionListRsp::default_instance_->InitAsDefaultInstance();
  CGNpcAcceptMissionReq::default_instance_->InitAsDefaultInstance();
  CGNpcAcceptMissionRsp::default_instance_->InitAsDefaultInstance();
  CGSubmitMissionReq::default_instance_->InitAsDefaultInstance();
  GCSubmitMissionRsp::default_instance_->InitAsDefaultInstance();
  GCUpdateMissionStatusNotify::default_instance_->InitAsDefaultInstance();
  GCDeleteMissionNotify::default_instance_->InitAsDefaultInstance();
  GCUpdateDyAcceptCount::default_instance_->InitAsDefaultInstance();
  CGTalkWithNpcReq::default_instance_->InitAsDefaultInstance();
  CGSubmitMissionGoodsReq::default_instance_->InitAsDefaultInstance();
  GCSubmitMissionGoodsRsp::default_instance_->InitAsDefaultInstance();
  CGOnekeyMissionReq::default_instance_->InitAsDefaultInstance();
  CGOnekeyMissionRsp::default_instance_->InitAsDefaultInstance();
  CGOnceMissionReq::default_instance_->InitAsDefaultInstance();
  CGOnceMissionRsp::default_instance_->InitAsDefaultInstance();
  CGMissionRecvSpecialReward::default_instance_->InitAsDefaultInstance();
  GCMissionRecvSpecialReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Mission_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Mission_2eproto {
  StaticDescriptorInitializer_Mission_2eproto() {
    protobuf_AddDesc_Mission_2eproto();
  }
} static_descriptor_initializer_Mission_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CItemInfo::kTypeFieldNumber;
const int CItemInfo::kIdFieldNumber;
const int CItemInfo::kCurValueFieldNumber;
const int CItemInfo::kFinValueFieldNumber;
const int CItemInfo::kParma1FieldNumber;
const int CItemInfo::kParma2FieldNumber;
const int CItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CItemInfo::CItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CItemInfo::InitAsDefaultInstance() {
}

CItemInfo::CItemInfo(const CItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  curvalue_ = 0u;
  finvalue_ = 0u;
  parma1_ = GOOGLE_ULONGLONG(0);
  parma2_ = GOOGLE_ULONGLONG(0);
  parma3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CItemInfo::~CItemInfo() {
  SharedDtor();
}

void CItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CItemInfo_descriptor_;
}

const CItemInfo& CItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CItemInfo* CItemInfo::default_instance_ = NULL;

CItemInfo* CItemInfo::New() const {
  return new CItemInfo;
}

void CItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    curvalue_ = 0u;
    finvalue_ = 0u;
    parma1_ = GOOGLE_ULONGLONG(0);
    parma2_ = GOOGLE_ULONGLONG(0);
    parma3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curValue;
        break;
      }

      // optional uint32 curValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finValue;
        break;
      }

      // optional uint32 finValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finvalue_)));
          set_has_finvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parma1;
        break;
      }

      // optional uint64 parma1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma2;
        break;
      }

      // optional uint64 parma2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma3;
        break;
      }

      // optional uint64 parma3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 curValue = 3;
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curvalue(), output);
  }

  // optional uint32 finValue = 4;
  if (has_finvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finvalue(), output);
  }

  // optional uint64 parma1 = 5;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->parma1(), output);
  }

  // optional uint64 parma2 = 6;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->parma2(), output);
  }

  // optional uint64 parma3 = 7;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 curValue = 3;
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curvalue(), target);
  }

  // optional uint32 finValue = 4;
  if (has_finvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finvalue(), target);
  }

  // optional uint64 parma1 = 5;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->parma1(), target);
  }

  // optional uint64 parma2 = 6;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->parma2(), target);
  }

  // optional uint64 parma3 = 7;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 curValue = 3;
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curvalue());
    }

    // optional uint32 finValue = 4;
    if (has_finvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finvalue());
    }

    // optional uint64 parma1 = 5;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma1());
    }

    // optional uint64 parma2 = 6;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma2());
    }

    // optional uint64 parma3 = 7;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CItemInfo::MergeFrom(const CItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
    if (from.has_finvalue()) {
      set_finvalue(from.finvalue());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CItemInfo::CopyFrom(const CItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CItemInfo::IsInitialized() const {

  return true;
}

void CItemInfo::Swap(CItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(finvalue_, other->finvalue_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CItemInfo_descriptor_;
  metadata.reflection = CItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionAttrProto::kAttridFieldNumber;
const int MissionAttrProto::kAttrvalFieldNumber;
const int MissionAttrProto::kRationFieldNumber;
#endif  // !_MSC_VER

MissionAttrProto::MissionAttrProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionAttrProto::InitAsDefaultInstance() {
}

MissionAttrProto::MissionAttrProto(const MissionAttrProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionAttrProto::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0;
  attrval_ = 0;
  ration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionAttrProto::~MissionAttrProto() {
  SharedDtor();
}

void MissionAttrProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionAttrProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionAttrProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAttrProto_descriptor_;
}

const MissionAttrProto& MissionAttrProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

MissionAttrProto* MissionAttrProto::default_instance_ = NULL;

MissionAttrProto* MissionAttrProto::New() const {
  return new MissionAttrProto;
}

void MissionAttrProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrid_ = 0;
    attrval_ = 0;
    ration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionAttrProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attrid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attrval;
        break;
      }

      // optional int32 attrval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrval_)));
          set_has_attrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ration;
        break;
      }

      // optional int32 ration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ration_)));
          set_has_ration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionAttrProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 attrid = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attrid(), output);
  }

  // optional int32 attrval = 2;
  if (has_attrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attrval(), output);
  }

  // optional int32 ration = 3;
  if (has_ration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionAttrProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 attrid = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attrid(), target);
  }

  // optional int32 attrval = 2;
  if (has_attrval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attrval(), target);
  }

  // optional int32 ration = 3;
  if (has_ration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionAttrProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 attrid = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrid());
    }

    // optional int32 attrval = 2;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrval());
    }

    // optional int32 ration = 3;
    if (has_ration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionAttrProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionAttrProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionAttrProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionAttrProto::MergeFrom(const MissionAttrProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_attrval()) {
      set_attrval(from.attrval());
    }
    if (from.has_ration()) {
      set_ration(from.ration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionAttrProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionAttrProto::CopyFrom(const MissionAttrProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionAttrProto::IsInitialized() const {

  return true;
}

void MissionAttrProto::Swap(MissionAttrProto* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(attrval_, other->attrval_);
    std::swap(ration_, other->ration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionAttrProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionAttrProto_descriptor_;
  metadata.reflection = MissionAttrProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissionAllAttrProto::kAttrFieldNumber;
#endif  // !_MSC_VER

MissionAllAttrProto::MissionAllAttrProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MissionAllAttrProto::InitAsDefaultInstance() {
}

MissionAllAttrProto::MissionAllAttrProto(const MissionAllAttrProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MissionAllAttrProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissionAllAttrProto::~MissionAllAttrProto() {
  SharedDtor();
}

void MissionAllAttrProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MissionAllAttrProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissionAllAttrProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissionAllAttrProto_descriptor_;
}

const MissionAllAttrProto& MissionAllAttrProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

MissionAllAttrProto* MissionAllAttrProto::default_instance_ = NULL;

MissionAllAttrProto* MissionAllAttrProto::New() const {
  return new MissionAllAttrProto;
}

void MissionAllAttrProto::Clear() {
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissionAllAttrProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MissionAttrProto attr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MissionAllAttrProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MissionAttrProto attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MissionAllAttrProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MissionAttrProto attr = 1;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MissionAllAttrProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MissionAttrProto attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissionAllAttrProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissionAllAttrProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissionAllAttrProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissionAllAttrProto::MergeFrom(const MissionAllAttrProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissionAllAttrProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissionAllAttrProto::CopyFrom(const MissionAllAttrProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissionAllAttrProto::IsInitialized() const {

  return true;
}

void MissionAllAttrProto::Swap(MissionAllAttrProto* other) {
  if (other != this) {
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissionAllAttrProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissionAllAttrProto_descriptor_;
  metadata.reflection = MissionAllAttrProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DyMissionBountyParam::kTenStateFieldNumber;
const int DyMissionBountyParam::kTwentyStateFieldNumber;
#endif  // !_MSC_VER

DyMissionBountyParam::DyMissionBountyParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DyMissionBountyParam::InitAsDefaultInstance() {
}

DyMissionBountyParam::DyMissionBountyParam(const DyMissionBountyParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DyMissionBountyParam::SharedCtor() {
  _cached_size_ = 0;
  ten_state_ = 0u;
  twenty_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DyMissionBountyParam::~DyMissionBountyParam() {
  SharedDtor();
}

void DyMissionBountyParam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DyMissionBountyParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DyMissionBountyParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DyMissionBountyParam_descriptor_;
}

const DyMissionBountyParam& DyMissionBountyParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

DyMissionBountyParam* DyMissionBountyParam::default_instance_ = NULL;

DyMissionBountyParam* DyMissionBountyParam::New() const {
  return new DyMissionBountyParam;
}

void DyMissionBountyParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ten_state_ = 0u;
    twenty_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DyMissionBountyParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ten_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ten_state_)));
          set_has_ten_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_twenty_state;
        break;
      }

      // optional uint32 twenty_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_twenty_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &twenty_state_)));
          set_has_twenty_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DyMissionBountyParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ten_state = 1;
  if (has_ten_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ten_state(), output);
  }

  // optional uint32 twenty_state = 2;
  if (has_twenty_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->twenty_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DyMissionBountyParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ten_state = 1;
  if (has_ten_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ten_state(), target);
  }

  // optional uint32 twenty_state = 2;
  if (has_twenty_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->twenty_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DyMissionBountyParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ten_state = 1;
    if (has_ten_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ten_state());
    }

    // optional uint32 twenty_state = 2;
    if (has_twenty_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->twenty_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DyMissionBountyParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DyMissionBountyParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DyMissionBountyParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DyMissionBountyParam::MergeFrom(const DyMissionBountyParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ten_state()) {
      set_ten_state(from.ten_state());
    }
    if (from.has_twenty_state()) {
      set_twenty_state(from.twenty_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DyMissionBountyParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DyMissionBountyParam::CopyFrom(const DyMissionBountyParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DyMissionBountyParam::IsInitialized() const {

  return true;
}

void DyMissionBountyParam::Swap(DyMissionBountyParam* other) {
  if (other != this) {
    std::swap(ten_state_, other->ten_state_);
    std::swap(twenty_state_, other->twenty_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DyMissionBountyParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DyMissionBountyParam_descriptor_;
  metadata.reflection = DyMissionBountyParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DyMissionCntProto::kMissiontypeFieldNumber;
const int DyMissionCntProto::kAcceptNumFieldNumber;
const int DyMissionCntProto::kBountyParamFieldNumber;
#endif  // !_MSC_VER

DyMissionCntProto::DyMissionCntProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DyMissionCntProto::InitAsDefaultInstance() {
  bounty_param_ = const_cast< ::proto_ff::DyMissionBountyParam*>(&::proto_ff::DyMissionBountyParam::default_instance());
}

DyMissionCntProto::DyMissionCntProto(const DyMissionCntProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DyMissionCntProto::SharedCtor() {
  _cached_size_ = 0;
  missiontype_ = 0u;
  accept_num_ = 0;
  bounty_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DyMissionCntProto::~DyMissionCntProto() {
  SharedDtor();
}

void DyMissionCntProto::SharedDtor() {
  if (this != default_instance_) {
    delete bounty_param_;
  }
}

void DyMissionCntProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DyMissionCntProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DyMissionCntProto_descriptor_;
}

const DyMissionCntProto& DyMissionCntProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

DyMissionCntProto* DyMissionCntProto::default_instance_ = NULL;

DyMissionCntProto* DyMissionCntProto::New() const {
  return new DyMissionCntProto;
}

void DyMissionCntProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missiontype_ = 0u;
    accept_num_ = 0;
    if (has_bounty_param()) {
      if (bounty_param_ != NULL) bounty_param_->::proto_ff::DyMissionBountyParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DyMissionCntProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 missiontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bounty_param;
        break;
      }

      // optional .proto_ff.DyMissionBountyParam bounty_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bounty_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounty_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DyMissionCntProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 missiontype = 1;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missiontype(), output);
  }

  // optional int32 accept_num = 2;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accept_num(), output);
  }

  // optional .proto_ff.DyMissionBountyParam bounty_param = 3;
  if (has_bounty_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bounty_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DyMissionCntProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 missiontype = 1;
  if (has_missiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missiontype(), target);
  }

  // optional int32 accept_num = 2;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accept_num(), target);
  }

  // optional .proto_ff.DyMissionBountyParam bounty_param = 3;
  if (has_bounty_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bounty_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DyMissionCntProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 missiontype = 1;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontype());
    }

    // optional int32 accept_num = 2;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

    // optional .proto_ff.DyMissionBountyParam bounty_param = 3;
    if (has_bounty_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bounty_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DyMissionCntProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DyMissionCntProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DyMissionCntProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DyMissionCntProto::MergeFrom(const DyMissionCntProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
    if (from.has_bounty_param()) {
      mutable_bounty_param()->::proto_ff::DyMissionBountyParam::MergeFrom(from.bounty_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DyMissionCntProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DyMissionCntProto::CopyFrom(const DyMissionCntProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DyMissionCntProto::IsInitialized() const {

  return true;
}

void DyMissionCntProto::Swap(DyMissionCntProto* other) {
  if (other != this) {
    std::swap(missiontype_, other->missiontype_);
    std::swap(accept_num_, other->accept_num_);
    std::swap(bounty_param_, other->bounty_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DyMissionCntProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DyMissionCntProto_descriptor_;
  metadata.reflection = DyMissionCntProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DyMissionCntAllProto::kCountFieldNumber;
#endif  // !_MSC_VER

DyMissionCntAllProto::DyMissionCntAllProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DyMissionCntAllProto::InitAsDefaultInstance() {
}

DyMissionCntAllProto::DyMissionCntAllProto(const DyMissionCntAllProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DyMissionCntAllProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DyMissionCntAllProto::~DyMissionCntAllProto() {
  SharedDtor();
}

void DyMissionCntAllProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DyMissionCntAllProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DyMissionCntAllProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DyMissionCntAllProto_descriptor_;
}

const DyMissionCntAllProto& DyMissionCntAllProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

DyMissionCntAllProto* DyMissionCntAllProto::default_instance_ = NULL;

DyMissionCntAllProto* DyMissionCntAllProto::New() const {
  return new DyMissionCntAllProto;
}

void DyMissionCntAllProto::Clear() {
  count_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DyMissionCntAllProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DyMissionCntProto count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_count;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DyMissionCntAllProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DyMissionCntProto count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->count(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DyMissionCntAllProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DyMissionCntProto count = 1;
  for (int i = 0; i < this->count_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->count(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DyMissionCntAllProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DyMissionCntProto count = 1;
  total_size += 1 * this->count_size();
  for (int i = 0; i < this->count_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->count(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DyMissionCntAllProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DyMissionCntAllProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DyMissionCntAllProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DyMissionCntAllProto::MergeFrom(const DyMissionCntAllProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  count_.MergeFrom(from.count_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DyMissionCntAllProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DyMissionCntAllProto::CopyFrom(const DyMissionCntAllProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DyMissionCntAllProto::IsInitialized() const {

  return true;
}

void DyMissionCntAllProto::Swap(DyMissionCntAllProto* other) {
  if (other != this) {
    count_.Swap(&other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DyMissionCntAllProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DyMissionCntAllProto_descriptor_;
  metadata.reflection = DyMissionCntAllProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CMissionTrack::kItemInfoFieldNumber;
const int CMissionTrack::kMissionIdFieldNumber;
const int CMissionTrack::kDynamicidFieldNumber;
const int CMissionTrack::kStatusFieldNumber;
const int CMissionTrack::kAccepttimeFieldNumber;
const int CMissionTrack::kTextidFieldNumber;
#endif  // !_MSC_VER

CMissionTrack::CMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CMissionTrack::InitAsDefaultInstance() {
}

CMissionTrack::CMissionTrack(const CMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = GOOGLE_ULONGLONG(0);
  dynamicid_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  accepttime_ = GOOGLE_ULONGLONG(0);
  textid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMissionTrack::~CMissionTrack() {
  SharedDtor();
}

void CMissionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CMissionTrack_descriptor_;
}

const CMissionTrack& CMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CMissionTrack* CMissionTrack::default_instance_ = NULL;

CMissionTrack* CMissionTrack::New() const {
  return new CMissionTrack;
}

void CMissionTrack::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    missionid_ = GOOGLE_ULONGLONG(0);
    dynamicid_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    accepttime_ = GOOGLE_ULONGLONG(0);
    textid_ = GOOGLE_ULONGLONG(0);
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CItemInfo itemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfo;
        if (input->ExpectTag(16)) goto parse_missionId;
        break;
      }

      // optional uint64 missionId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accepttime;
        break;
      }

      // optional uint64 accepttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accepttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accepttime_)));
          set_has_accepttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_textid;
        break;
      }

      // optional uint64 textid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CItemInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  // optional uint64 missionId = 2;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->missionid(), output);
  }

  // optional uint64 dynamicid = 3;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dynamicid(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint64 accepttime = 5;
  if (has_accepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->accepttime(), output);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->textid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CItemInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  // optional uint64 missionId = 2;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->missionid(), target);
  }

  // optional uint64 dynamicid = 3;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dynamicid(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint64 accepttime = 5;
  if (has_accepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->accepttime(), target);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->textid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 missionId = 2;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missionid());
    }

    // optional uint64 dynamicid = 3;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 accepttime = 5;
    if (has_accepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accepttime());
    }

    // optional uint64 textid = 6;
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->textid());
    }

  }
  // repeated .proto_ff.CItemInfo itemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CMissionTrack::MergeFrom(const CMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_accepttime()) {
      set_accepttime(from.accepttime());
    }
    if (from.has_textid()) {
      set_textid(from.textid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMissionTrack::CopyFrom(const CMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMissionTrack::IsInitialized() const {

  return true;
}

void CMissionTrack::Swap(CMissionTrack* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(missionid_, other->missionid_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(status_, other->status_);
    std::swap(accepttime_, other->accepttime_);
    std::swap(textid_, other->textid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CMissionTrack_descriptor_;
  metadata.reflection = CMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitMissionInfo::kIndexFieldNumber;
const int SubmitMissionInfo::kGoodsNumFieldNumber;
#endif  // !_MSC_VER

SubmitMissionInfo::SubmitMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SubmitMissionInfo::InitAsDefaultInstance() {
}

SubmitMissionInfo::SubmitMissionInfo(const SubmitMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SubmitMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  goodsnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitMissionInfo::~SubmitMissionInfo() {
  SharedDtor();
}

void SubmitMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmitMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitMissionInfo_descriptor_;
}

const SubmitMissionInfo& SubmitMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

SubmitMissionInfo* SubmitMissionInfo::default_instance_ = NULL;

SubmitMissionInfo* SubmitMissionInfo::New() const {
  return new SubmitMissionInfo;
}

void SubmitMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    goodsnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goodsNum;
        break;
      }

      // optional uint32 goodsNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsnum_)));
          set_has_goodsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SubmitMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional uint32 goodsNum = 2;
  if (has_goodsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goodsnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SubmitMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional uint32 goodsNum = 2;
  if (has_goodsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goodsnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SubmitMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 goodsNum = 2;
    if (has_goodsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitMissionInfo::MergeFrom(const SubmitMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_goodsnum()) {
      set_goodsnum(from.goodsnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMissionInfo::CopyFrom(const SubmitMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitMissionInfo::IsInitialized() const {

  return true;
}

void SubmitMissionInfo::Swap(SubmitMissionInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(goodsnum_, other->goodsnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitMissionInfo_descriptor_;
  metadata.reflection = SubmitMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGQueryMissionListReq::CGQueryMissionListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGQueryMissionListReq::InitAsDefaultInstance() {
}

CGQueryMissionListReq::CGQueryMissionListReq(const CGQueryMissionListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGQueryMissionListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGQueryMissionListReq::~CGQueryMissionListReq() {
  SharedDtor();
}

void CGQueryMissionListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGQueryMissionListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGQueryMissionListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGQueryMissionListReq_descriptor_;
}

const CGQueryMissionListReq& CGQueryMissionListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGQueryMissionListReq* CGQueryMissionListReq::default_instance_ = NULL;

CGQueryMissionListReq* CGQueryMissionListReq::New() const {
  return new CGQueryMissionListReq;
}

void CGQueryMissionListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGQueryMissionListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGQueryMissionListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGQueryMissionListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGQueryMissionListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGQueryMissionListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGQueryMissionListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGQueryMissionListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGQueryMissionListReq::MergeFrom(const CGQueryMissionListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGQueryMissionListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGQueryMissionListReq::CopyFrom(const CGQueryMissionListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGQueryMissionListReq::IsInitialized() const {

  return true;
}

void CGQueryMissionListReq::Swap(CGQueryMissionListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGQueryMissionListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGQueryMissionListReq_descriptor_;
  metadata.reflection = CGQueryMissionListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCQueryMissionListRsp::kAcceptedListFieldNumber;
const int GCQueryMissionListRsp::kDyCountFieldNumber;
#endif  // !_MSC_VER

GCQueryMissionListRsp::GCQueryMissionListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCQueryMissionListRsp::InitAsDefaultInstance() {
  dy_count_ = const_cast< ::proto_ff::DyMissionCntAllProto*>(&::proto_ff::DyMissionCntAllProto::default_instance());
}

GCQueryMissionListRsp::GCQueryMissionListRsp(const GCQueryMissionListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCQueryMissionListRsp::SharedCtor() {
  _cached_size_ = 0;
  dy_count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCQueryMissionListRsp::~GCQueryMissionListRsp() {
  SharedDtor();
}

void GCQueryMissionListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete dy_count_;
  }
}

void GCQueryMissionListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCQueryMissionListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCQueryMissionListRsp_descriptor_;
}

const GCQueryMissionListRsp& GCQueryMissionListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCQueryMissionListRsp* GCQueryMissionListRsp::default_instance_ = NULL;

GCQueryMissionListRsp* GCQueryMissionListRsp::New() const {
  return new GCQueryMissionListRsp;
}

void GCQueryMissionListRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_dy_count()) {
      if (dy_count_ != NULL) dy_count_->::proto_ff::DyMissionCntAllProto::Clear();
    }
  }
  acceptedlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCQueryMissionListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CMissionTrack acceptedList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acceptedList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptedlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_acceptedList;
        if (input->ExpectTag(18)) goto parse_dy_count;
        break;
      }

      // optional .proto_ff.DyMissionCntAllProto dy_count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dy_count:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dy_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCQueryMissionListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CMissionTrack acceptedList = 1;
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->acceptedlist(i), output);
  }

  // optional .proto_ff.DyMissionCntAllProto dy_count = 2;
  if (has_dy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCQueryMissionListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CMissionTrack acceptedList = 1;
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->acceptedlist(i), target);
  }

  // optional .proto_ff.DyMissionCntAllProto dy_count = 2;
  if (has_dy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCQueryMissionListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.DyMissionCntAllProto dy_count = 2;
    if (has_dy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dy_count());
    }

  }
  // repeated .proto_ff.CMissionTrack acceptedList = 1;
  total_size += 1 * this->acceptedlist_size();
  for (int i = 0; i < this->acceptedlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptedlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCQueryMissionListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCQueryMissionListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCQueryMissionListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCQueryMissionListRsp::MergeFrom(const GCQueryMissionListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptedlist_.MergeFrom(from.acceptedlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dy_count()) {
      mutable_dy_count()->::proto_ff::DyMissionCntAllProto::MergeFrom(from.dy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCQueryMissionListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCQueryMissionListRsp::CopyFrom(const GCQueryMissionListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCQueryMissionListRsp::IsInitialized() const {

  return true;
}

void GCQueryMissionListRsp::Swap(GCQueryMissionListRsp* other) {
  if (other != this) {
    acceptedlist_.Swap(&other->acceptedlist_);
    std::swap(dy_count_, other->dy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCQueryMissionListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCQueryMissionListRsp_descriptor_;
  metadata.reflection = GCQueryMissionListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNpcAcceptMissionReq::kMissiontypeFieldNumber;
#endif  // !_MSC_VER

CGNpcAcceptMissionReq::CGNpcAcceptMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGNpcAcceptMissionReq::InitAsDefaultInstance() {
}

CGNpcAcceptMissionReq::CGNpcAcceptMissionReq(const CGNpcAcceptMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGNpcAcceptMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNpcAcceptMissionReq::~CGNpcAcceptMissionReq() {
  SharedDtor();
}

void CGNpcAcceptMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNpcAcceptMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNpcAcceptMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNpcAcceptMissionReq_descriptor_;
}

const CGNpcAcceptMissionReq& CGNpcAcceptMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGNpcAcceptMissionReq* CGNpcAcceptMissionReq::default_instance_ = NULL;

CGNpcAcceptMissionReq* CGNpcAcceptMissionReq::New() const {
  return new CGNpcAcceptMissionReq;
}

void CGNpcAcceptMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNpcAcceptMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 missiontype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGNpcAcceptMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 missiontype = 1;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->missiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGNpcAcceptMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 missiontype = 1;
  if (has_missiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->missiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGNpcAcceptMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 missiontype = 1;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNpcAcceptMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNpcAcceptMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNpcAcceptMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNpcAcceptMissionReq::MergeFrom(const CGNpcAcceptMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNpcAcceptMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNpcAcceptMissionReq::CopyFrom(const CGNpcAcceptMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNpcAcceptMissionReq::IsInitialized() const {

  return true;
}

void CGNpcAcceptMissionReq::Swap(CGNpcAcceptMissionReq* other) {
  if (other != this) {
    std::swap(missiontype_, other->missiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNpcAcceptMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNpcAcceptMissionReq_descriptor_;
  metadata.reflection = CGNpcAcceptMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGNpcAcceptMissionRsp::kRetcodeFieldNumber;
const int CGNpcAcceptMissionRsp::kMissiontypeFieldNumber;
#endif  // !_MSC_VER

CGNpcAcceptMissionRsp::CGNpcAcceptMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGNpcAcceptMissionRsp::InitAsDefaultInstance() {
}

CGNpcAcceptMissionRsp::CGNpcAcceptMissionRsp(const CGNpcAcceptMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGNpcAcceptMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  missiontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGNpcAcceptMissionRsp::~CGNpcAcceptMissionRsp() {
  SharedDtor();
}

void CGNpcAcceptMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGNpcAcceptMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGNpcAcceptMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGNpcAcceptMissionRsp_descriptor_;
}

const CGNpcAcceptMissionRsp& CGNpcAcceptMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGNpcAcceptMissionRsp* CGNpcAcceptMissionRsp::default_instance_ = NULL;

CGNpcAcceptMissionRsp* CGNpcAcceptMissionRsp::New() const {
  return new CGNpcAcceptMissionRsp;
}

void CGNpcAcceptMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    missiontype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGNpcAcceptMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_missiontype;
        break;
      }

      // optional int32 missiontype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_missiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missiontype_)));
          set_has_missiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGNpcAcceptMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional int32 missiontype = 3;
  if (has_missiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->missiontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGNpcAcceptMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 missiontype = 3;
  if (has_missiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->missiontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGNpcAcceptMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional int32 missiontype = 3;
    if (has_missiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missiontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGNpcAcceptMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGNpcAcceptMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGNpcAcceptMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGNpcAcceptMissionRsp::MergeFrom(const CGNpcAcceptMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_missiontype()) {
      set_missiontype(from.missiontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGNpcAcceptMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGNpcAcceptMissionRsp::CopyFrom(const CGNpcAcceptMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGNpcAcceptMissionRsp::IsInitialized() const {

  return true;
}

void CGNpcAcceptMissionRsp::Swap(CGNpcAcceptMissionRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(missiontype_, other->missiontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGNpcAcceptMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGNpcAcceptMissionRsp_descriptor_;
  metadata.reflection = CGNpcAcceptMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSubmitMissionReq::kDynamicidFieldNumber;
const int CGSubmitMissionReq::kIndexFieldNumber;
#endif  // !_MSC_VER

CGSubmitMissionReq::CGSubmitMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGSubmitMissionReq::InitAsDefaultInstance() {
}

CGSubmitMissionReq::CGSubmitMissionReq(const CGSubmitMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGSubmitMissionReq::SharedCtor() {
  _cached_size_ = 0;
  dynamicid_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSubmitMissionReq::~CGSubmitMissionReq() {
  SharedDtor();
}

void CGSubmitMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSubmitMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSubmitMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSubmitMissionReq_descriptor_;
}

const CGSubmitMissionReq& CGSubmitMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGSubmitMissionReq* CGSubmitMissionReq::default_instance_ = NULL;

CGSubmitMissionReq* CGSubmitMissionReq::New() const {
  return new CGSubmitMissionReq;
}

void CGSubmitMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dynamicid_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSubmitMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dynamicid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGSubmitMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dynamicid = 1;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dynamicid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGSubmitMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dynamicid = 1;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dynamicid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGSubmitMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dynamicid = 1;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSubmitMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSubmitMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSubmitMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSubmitMissionReq::MergeFrom(const CGSubmitMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSubmitMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSubmitMissionReq::CopyFrom(const CGSubmitMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSubmitMissionReq::IsInitialized() const {

  return true;
}

void CGSubmitMissionReq::Swap(CGSubmitMissionReq* other) {
  if (other != this) {
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSubmitMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSubmitMissionReq_descriptor_;
  metadata.reflection = CGSubmitMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSubmitMissionRsp::kRetFieldNumber;
const int GCSubmitMissionRsp::kDynamicidFieldNumber;
#endif  // !_MSC_VER

GCSubmitMissionRsp::GCSubmitMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCSubmitMissionRsp::InitAsDefaultInstance() {
}

GCSubmitMissionRsp::GCSubmitMissionRsp(const GCSubmitMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCSubmitMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0u;
  dynamicid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSubmitMissionRsp::~GCSubmitMissionRsp() {
  SharedDtor();
}

void GCSubmitMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSubmitMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSubmitMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSubmitMissionRsp_descriptor_;
}

const GCSubmitMissionRsp& GCSubmitMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCSubmitMissionRsp* GCSubmitMissionRsp::default_instance_ = NULL;

GCSubmitMissionRsp* GCSubmitMissionRsp::New() const {
  return new GCSubmitMissionRsp;
}

void GCSubmitMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0u;
    dynamicid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSubmitMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCSubmitMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ret(), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCSubmitMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ret(), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCSubmitMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSubmitMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSubmitMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSubmitMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSubmitMissionRsp::MergeFrom(const GCSubmitMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSubmitMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSubmitMissionRsp::CopyFrom(const GCSubmitMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSubmitMissionRsp::IsInitialized() const {

  return true;
}

void GCSubmitMissionRsp::Swap(GCSubmitMissionRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSubmitMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSubmitMissionRsp_descriptor_;
  metadata.reflection = GCSubmitMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateMissionStatusNotify::kUpdateListFieldNumber;
#endif  // !_MSC_VER

GCUpdateMissionStatusNotify::GCUpdateMissionStatusNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCUpdateMissionStatusNotify::InitAsDefaultInstance() {
}

GCUpdateMissionStatusNotify::GCUpdateMissionStatusNotify(const GCUpdateMissionStatusNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCUpdateMissionStatusNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateMissionStatusNotify::~GCUpdateMissionStatusNotify() {
  SharedDtor();
}

void GCUpdateMissionStatusNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCUpdateMissionStatusNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateMissionStatusNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateMissionStatusNotify_descriptor_;
}

const GCUpdateMissionStatusNotify& GCUpdateMissionStatusNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCUpdateMissionStatusNotify* GCUpdateMissionStatusNotify::default_instance_ = NULL;

GCUpdateMissionStatusNotify* GCUpdateMissionStatusNotify::New() const {
  return new GCUpdateMissionStatusNotify;
}

void GCUpdateMissionStatusNotify::Clear() {
  updatelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateMissionStatusNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CMissionTrack updateList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_updateList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCUpdateMissionStatusNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CMissionTrack updateList = 1;
  for (int i = 0; i < this->updatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->updatelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCUpdateMissionStatusNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CMissionTrack updateList = 1;
  for (int i = 0; i < this->updatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->updatelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCUpdateMissionStatusNotify::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CMissionTrack updateList = 1;
  total_size += 1 * this->updatelist_size();
  for (int i = 0; i < this->updatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateMissionStatusNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateMissionStatusNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateMissionStatusNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateMissionStatusNotify::MergeFrom(const GCUpdateMissionStatusNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  updatelist_.MergeFrom(from.updatelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateMissionStatusNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateMissionStatusNotify::CopyFrom(const GCUpdateMissionStatusNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateMissionStatusNotify::IsInitialized() const {

  return true;
}

void GCUpdateMissionStatusNotify::Swap(GCUpdateMissionStatusNotify* other) {
  if (other != this) {
    updatelist_.Swap(&other->updatelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateMissionStatusNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateMissionStatusNotify_descriptor_;
  metadata.reflection = GCUpdateMissionStatusNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCDeleteMissionNotify::kDynamicidFieldNumber;
#endif  // !_MSC_VER

GCDeleteMissionNotify::GCDeleteMissionNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCDeleteMissionNotify::InitAsDefaultInstance() {
}

GCDeleteMissionNotify::GCDeleteMissionNotify(const GCDeleteMissionNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCDeleteMissionNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCDeleteMissionNotify::~GCDeleteMissionNotify() {
  SharedDtor();
}

void GCDeleteMissionNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCDeleteMissionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCDeleteMissionNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCDeleteMissionNotify_descriptor_;
}

const GCDeleteMissionNotify& GCDeleteMissionNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCDeleteMissionNotify* GCDeleteMissionNotify::default_instance_ = NULL;

GCDeleteMissionNotify* GCDeleteMissionNotify::New() const {
  return new GCDeleteMissionNotify;
}

void GCDeleteMissionNotify::Clear() {
  dynamicid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCDeleteMissionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 dynamicid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_dynamicid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dynamicid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dynamicid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCDeleteMissionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 dynamicid = 1;
  for (int i = 0; i < this->dynamicid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->dynamicid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCDeleteMissionNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 dynamicid = 1;
  for (int i = 0; i < this->dynamicid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->dynamicid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCDeleteMissionNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint64 dynamicid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dynamicid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dynamicid(i));
    }
    total_size += 1 * this->dynamicid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCDeleteMissionNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCDeleteMissionNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCDeleteMissionNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCDeleteMissionNotify::MergeFrom(const GCDeleteMissionNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  dynamicid_.MergeFrom(from.dynamicid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCDeleteMissionNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCDeleteMissionNotify::CopyFrom(const GCDeleteMissionNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCDeleteMissionNotify::IsInitialized() const {

  return true;
}

void GCDeleteMissionNotify::Swap(GCDeleteMissionNotify* other) {
  if (other != this) {
    dynamicid_.Swap(&other->dynamicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCDeleteMissionNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCDeleteMissionNotify_descriptor_;
  metadata.reflection = GCDeleteMissionNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCUpdateDyAcceptCount::kDyCountFieldNumber;
#endif  // !_MSC_VER

GCUpdateDyAcceptCount::GCUpdateDyAcceptCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCUpdateDyAcceptCount::InitAsDefaultInstance() {
  dy_count_ = const_cast< ::proto_ff::DyMissionCntAllProto*>(&::proto_ff::DyMissionCntAllProto::default_instance());
}

GCUpdateDyAcceptCount::GCUpdateDyAcceptCount(const GCUpdateDyAcceptCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCUpdateDyAcceptCount::SharedCtor() {
  _cached_size_ = 0;
  dy_count_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCUpdateDyAcceptCount::~GCUpdateDyAcceptCount() {
  SharedDtor();
}

void GCUpdateDyAcceptCount::SharedDtor() {
  if (this != default_instance_) {
    delete dy_count_;
  }
}

void GCUpdateDyAcceptCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCUpdateDyAcceptCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCUpdateDyAcceptCount_descriptor_;
}

const GCUpdateDyAcceptCount& GCUpdateDyAcceptCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCUpdateDyAcceptCount* GCUpdateDyAcceptCount::default_instance_ = NULL;

GCUpdateDyAcceptCount* GCUpdateDyAcceptCount::New() const {
  return new GCUpdateDyAcceptCount;
}

void GCUpdateDyAcceptCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dy_count()) {
      if (dy_count_ != NULL) dy_count_->::proto_ff::DyMissionCntAllProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCUpdateDyAcceptCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.DyMissionCntAllProto dy_count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dy_count()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCUpdateDyAcceptCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.DyMissionCntAllProto dy_count = 1;
  if (has_dy_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dy_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCUpdateDyAcceptCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.DyMissionCntAllProto dy_count = 1;
  if (has_dy_count()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dy_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCUpdateDyAcceptCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.DyMissionCntAllProto dy_count = 1;
    if (has_dy_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dy_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCUpdateDyAcceptCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCUpdateDyAcceptCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCUpdateDyAcceptCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCUpdateDyAcceptCount::MergeFrom(const GCUpdateDyAcceptCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dy_count()) {
      mutable_dy_count()->::proto_ff::DyMissionCntAllProto::MergeFrom(from.dy_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCUpdateDyAcceptCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCUpdateDyAcceptCount::CopyFrom(const GCUpdateDyAcceptCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCUpdateDyAcceptCount::IsInitialized() const {

  return true;
}

void GCUpdateDyAcceptCount::Swap(GCUpdateDyAcceptCount* other) {
  if (other != this) {
    std::swap(dy_count_, other->dy_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCUpdateDyAcceptCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCUpdateDyAcceptCount_descriptor_;
  metadata.reflection = GCUpdateDyAcceptCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGTalkWithNpcReq::kNpcIdFieldNumber;
const int CGTalkWithNpcReq::kDynamicidFieldNumber;
const int CGTalkWithNpcReq::kPosFieldNumber;
const int CGTalkWithNpcReq::kTypeFieldNumber;
#endif  // !_MSC_VER

CGTalkWithNpcReq::CGTalkWithNpcReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGTalkWithNpcReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

CGTalkWithNpcReq::CGTalkWithNpcReq(const CGTalkWithNpcReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGTalkWithNpcReq::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = GOOGLE_ULONGLONG(0);
  dynamicid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGTalkWithNpcReq::~CGTalkWithNpcReq() {
  SharedDtor();
}

void CGTalkWithNpcReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CGTalkWithNpcReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGTalkWithNpcReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGTalkWithNpcReq_descriptor_;
}

const CGTalkWithNpcReq& CGTalkWithNpcReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGTalkWithNpcReq* CGTalkWithNpcReq::default_instance_ = NULL;

CGTalkWithNpcReq* CGTalkWithNpcReq::New() const {
  return new CGTalkWithNpcReq;
}

void CGTalkWithNpcReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = GOOGLE_ULONGLONG(0);
    dynamicid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGTalkWithNpcReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 npcId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGTalkWithNpcReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 npcId = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->npcid(), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGTalkWithNpcReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 npcId = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->npcid(), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGTalkWithNpcReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 npcId = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional .proto_ff.Vector3PB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGTalkWithNpcReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGTalkWithNpcReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGTalkWithNpcReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGTalkWithNpcReq::MergeFrom(const CGTalkWithNpcReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGTalkWithNpcReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGTalkWithNpcReq::CopyFrom(const CGTalkWithNpcReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGTalkWithNpcReq::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CGTalkWithNpcReq::Swap(CGTalkWithNpcReq* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGTalkWithNpcReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGTalkWithNpcReq_descriptor_;
  metadata.reflection = CGTalkWithNpcReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGSubmitMissionGoodsReq::kInfoListFieldNumber;
const int CGSubmitMissionGoodsReq::kDynamicidFieldNumber;
#endif  // !_MSC_VER

CGSubmitMissionGoodsReq::CGSubmitMissionGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGSubmitMissionGoodsReq::InitAsDefaultInstance() {
}

CGSubmitMissionGoodsReq::CGSubmitMissionGoodsReq(const CGSubmitMissionGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGSubmitMissionGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  dynamicid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGSubmitMissionGoodsReq::~CGSubmitMissionGoodsReq() {
  SharedDtor();
}

void CGSubmitMissionGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGSubmitMissionGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGSubmitMissionGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGSubmitMissionGoodsReq_descriptor_;
}

const CGSubmitMissionGoodsReq& CGSubmitMissionGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGSubmitMissionGoodsReq* CGSubmitMissionGoodsReq::default_instance_ = NULL;

CGSubmitMissionGoodsReq* CGSubmitMissionGoodsReq::New() const {
  return new CGSubmitMissionGoodsReq;
}

void CGSubmitMissionGoodsReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    dynamicid_ = GOOGLE_ULONGLONG(0);
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGSubmitMissionGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SubmitMissionInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGSubmitMissionGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SubmitMissionInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGSubmitMissionGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SubmitMissionInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGSubmitMissionGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

  }
  // repeated .proto_ff.SubmitMissionInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGSubmitMissionGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGSubmitMissionGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGSubmitMissionGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGSubmitMissionGoodsReq::MergeFrom(const CGSubmitMissionGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGSubmitMissionGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGSubmitMissionGoodsReq::CopyFrom(const CGSubmitMissionGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGSubmitMissionGoodsReq::IsInitialized() const {

  return true;
}

void CGSubmitMissionGoodsReq::Swap(CGSubmitMissionGoodsReq* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGSubmitMissionGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGSubmitMissionGoodsReq_descriptor_;
  metadata.reflection = CGSubmitMissionGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSubmitMissionGoodsRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GCSubmitMissionGoodsRsp::GCSubmitMissionGoodsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCSubmitMissionGoodsRsp::InitAsDefaultInstance() {
}

GCSubmitMissionGoodsRsp::GCSubmitMissionGoodsRsp(const GCSubmitMissionGoodsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCSubmitMissionGoodsRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSubmitMissionGoodsRsp::~GCSubmitMissionGoodsRsp() {
  SharedDtor();
}

void GCSubmitMissionGoodsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCSubmitMissionGoodsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSubmitMissionGoodsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSubmitMissionGoodsRsp_descriptor_;
}

const GCSubmitMissionGoodsRsp& GCSubmitMissionGoodsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCSubmitMissionGoodsRsp* GCSubmitMissionGoodsRsp::default_instance_ = NULL;

GCSubmitMissionGoodsRsp* GCSubmitMissionGoodsRsp::New() const {
  return new GCSubmitMissionGoodsRsp;
}

void GCSubmitMissionGoodsRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSubmitMissionGoodsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCSubmitMissionGoodsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCSubmitMissionGoodsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCSubmitMissionGoodsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSubmitMissionGoodsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSubmitMissionGoodsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSubmitMissionGoodsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSubmitMissionGoodsRsp::MergeFrom(const GCSubmitMissionGoodsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSubmitMissionGoodsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSubmitMissionGoodsRsp::CopyFrom(const GCSubmitMissionGoodsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSubmitMissionGoodsRsp::IsInitialized() const {

  return true;
}

void GCSubmitMissionGoodsRsp::Swap(GCSubmitMissionGoodsRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSubmitMissionGoodsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSubmitMissionGoodsRsp_descriptor_;
  metadata.reflection = GCSubmitMissionGoodsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOnekeyMissionReq::kTypeFieldNumber;
const int CGOnekeyMissionReq::kNumFieldNumber;
#endif  // !_MSC_VER

CGOnekeyMissionReq::CGOnekeyMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGOnekeyMissionReq::InitAsDefaultInstance() {
}

CGOnekeyMissionReq::CGOnekeyMissionReq(const CGOnekeyMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGOnekeyMissionReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOnekeyMissionReq::~CGOnekeyMissionReq() {
  SharedDtor();
}

void CGOnekeyMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOnekeyMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOnekeyMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOnekeyMissionReq_descriptor_;
}

const CGOnekeyMissionReq& CGOnekeyMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGOnekeyMissionReq* CGOnekeyMissionReq::default_instance_ = NULL;

CGOnekeyMissionReq* CGOnekeyMissionReq::New() const {
  return new CGOnekeyMissionReq;
}

void CGOnekeyMissionReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOnekeyMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGOnekeyMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGOnekeyMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGOnekeyMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOnekeyMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOnekeyMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOnekeyMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOnekeyMissionReq::MergeFrom(const CGOnekeyMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOnekeyMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOnekeyMissionReq::CopyFrom(const CGOnekeyMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnekeyMissionReq::IsInitialized() const {

  return true;
}

void CGOnekeyMissionReq::Swap(CGOnekeyMissionReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOnekeyMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOnekeyMissionReq_descriptor_;
  metadata.reflection = CGOnekeyMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOnekeyMissionRsp::kRetcodeFieldNumber;
const int CGOnekeyMissionRsp::kAcceptNumFieldNumber;
const int CGOnekeyMissionRsp::kGoldLstFieldNumber;
const int CGOnekeyMissionRsp::kExpLstFieldNumber;
const int CGOnekeyMissionRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

CGOnekeyMissionRsp::CGOnekeyMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGOnekeyMissionRsp::InitAsDefaultInstance() {
}

CGOnekeyMissionRsp::CGOnekeyMissionRsp(const CGOnekeyMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGOnekeyMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  accept_num_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOnekeyMissionRsp::~CGOnekeyMissionRsp() {
  SharedDtor();
}

void CGOnekeyMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOnekeyMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOnekeyMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOnekeyMissionRsp_descriptor_;
}

const CGOnekeyMissionRsp& CGOnekeyMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGOnekeyMissionRsp* CGOnekeyMissionRsp::default_instance_ = NULL;

CGOnekeyMissionRsp* CGOnekeyMissionRsp::New() const {
  return new CGOnekeyMissionRsp;
}

void CGOnekeyMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    accept_num_ = 0;
    type_ = 0;
  }
  gold_lst_.Clear();
  exp_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOnekeyMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold_lst;
        break;
      }

      // repeated int64 gold_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_gold_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_gold_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold_lst;
        if (input->ExpectTag(32)) goto parse_exp_lst;
        break;
      }

      // repeated int64 exp_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_exp_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_exp_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp_lst;
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGOnekeyMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 accept_num = 2;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accept_num(), output);
  }

  // repeated int64 gold_lst = 3;
  for (int i = 0; i < this->gold_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->gold_lst(i), output);
  }

  // repeated int64 exp_lst = 4;
  for (int i = 0; i < this->exp_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->exp_lst(i), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGOnekeyMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 accept_num = 2;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accept_num(), target);
  }

  // repeated int64 gold_lst = 3;
  for (int i = 0; i < this->gold_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->gold_lst(i), target);
  }

  // repeated int64 exp_lst = 4;
  for (int i = 0; i < this->exp_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->exp_lst(i), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGOnekeyMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 accept_num = 2;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int64 gold_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gold_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->gold_lst(i));
    }
    total_size += 1 * this->gold_lst_size() + data_size;
  }

  // repeated int64 exp_lst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->exp_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->exp_lst(i));
    }
    total_size += 1 * this->exp_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOnekeyMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOnekeyMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOnekeyMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOnekeyMissionRsp::MergeFrom(const CGOnekeyMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gold_lst_.MergeFrom(from.gold_lst_);
  exp_lst_.MergeFrom(from.exp_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOnekeyMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOnekeyMissionRsp::CopyFrom(const CGOnekeyMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnekeyMissionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CGOnekeyMissionRsp::Swap(CGOnekeyMissionRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(accept_num_, other->accept_num_);
    gold_lst_.Swap(&other->gold_lst_);
    exp_lst_.Swap(&other->exp_lst_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOnekeyMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOnekeyMissionRsp_descriptor_;
  metadata.reflection = CGOnekeyMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CGOnceMissionReq::CGOnceMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGOnceMissionReq::InitAsDefaultInstance() {
}

CGOnceMissionReq::CGOnceMissionReq(const CGOnceMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGOnceMissionReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOnceMissionReq::~CGOnceMissionReq() {
  SharedDtor();
}

void CGOnceMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOnceMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOnceMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOnceMissionReq_descriptor_;
}

const CGOnceMissionReq& CGOnceMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGOnceMissionReq* CGOnceMissionReq::default_instance_ = NULL;

CGOnceMissionReq* CGOnceMissionReq::New() const {
  return new CGOnceMissionReq;
}

void CGOnceMissionReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOnceMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CGOnceMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGOnceMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGOnceMissionReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOnceMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOnceMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOnceMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOnceMissionReq::MergeFrom(const CGOnceMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOnceMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOnceMissionReq::CopyFrom(const CGOnceMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnceMissionReq::IsInitialized() const {

  return true;
}

void CGOnceMissionReq::Swap(CGOnceMissionReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOnceMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOnceMissionReq_descriptor_;
  metadata.reflection = CGOnceMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGOnceMissionRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

CGOnceMissionRsp::CGOnceMissionRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGOnceMissionRsp::InitAsDefaultInstance() {
}

CGOnceMissionRsp::CGOnceMissionRsp(const CGOnceMissionRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGOnceMissionRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGOnceMissionRsp::~CGOnceMissionRsp() {
  SharedDtor();
}

void CGOnceMissionRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGOnceMissionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGOnceMissionRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGOnceMissionRsp_descriptor_;
}

const CGOnceMissionRsp& CGOnceMissionRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGOnceMissionRsp* CGOnceMissionRsp::default_instance_ = NULL;

CGOnceMissionRsp* CGOnceMissionRsp::New() const {
  return new CGOnceMissionRsp;
}

void CGOnceMissionRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGOnceMissionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGOnceMissionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGOnceMissionRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGOnceMissionRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGOnceMissionRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGOnceMissionRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGOnceMissionRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGOnceMissionRsp::MergeFrom(const CGOnceMissionRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGOnceMissionRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGOnceMissionRsp::CopyFrom(const CGOnceMissionRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGOnceMissionRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CGOnceMissionRsp::Swap(CGOnceMissionRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGOnceMissionRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGOnceMissionRsp_descriptor_;
  metadata.reflection = CGOnceMissionRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGMissionRecvSpecialReward::kTypeFieldNumber;
#endif  // !_MSC_VER

CGMissionRecvSpecialReward::CGMissionRecvSpecialReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGMissionRecvSpecialReward::InitAsDefaultInstance() {
}

CGMissionRecvSpecialReward::CGMissionRecvSpecialReward(const CGMissionRecvSpecialReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGMissionRecvSpecialReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGMissionRecvSpecialReward::~CGMissionRecvSpecialReward() {
  SharedDtor();
}

void CGMissionRecvSpecialReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGMissionRecvSpecialReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGMissionRecvSpecialReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGMissionRecvSpecialReward_descriptor_;
}

const CGMissionRecvSpecialReward& CGMissionRecvSpecialReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

CGMissionRecvSpecialReward* CGMissionRecvSpecialReward::default_instance_ = NULL;

CGMissionRecvSpecialReward* CGMissionRecvSpecialReward::New() const {
  return new CGMissionRecvSpecialReward;
}

void CGMissionRecvSpecialReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGMissionRecvSpecialReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGMissionRecvSpecialReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGMissionRecvSpecialReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGMissionRecvSpecialReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGMissionRecvSpecialReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGMissionRecvSpecialReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGMissionRecvSpecialReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGMissionRecvSpecialReward::MergeFrom(const CGMissionRecvSpecialReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGMissionRecvSpecialReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGMissionRecvSpecialReward::CopyFrom(const CGMissionRecvSpecialReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGMissionRecvSpecialReward::IsInitialized() const {

  return true;
}

void CGMissionRecvSpecialReward::Swap(CGMissionRecvSpecialReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGMissionRecvSpecialReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGMissionRecvSpecialReward_descriptor_;
  metadata.reflection = CGMissionRecvSpecialReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCMissionRecvSpecialReward::kRetcodeFieldNumber;
const int GCMissionRecvSpecialReward::kTypeFieldNumber;
#endif  // !_MSC_VER

GCMissionRecvSpecialReward::GCMissionRecvSpecialReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCMissionRecvSpecialReward::InitAsDefaultInstance() {
}

GCMissionRecvSpecialReward::GCMissionRecvSpecialReward(const GCMissionRecvSpecialReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCMissionRecvSpecialReward::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCMissionRecvSpecialReward::~GCMissionRecvSpecialReward() {
  SharedDtor();
}

void GCMissionRecvSpecialReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCMissionRecvSpecialReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCMissionRecvSpecialReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCMissionRecvSpecialReward_descriptor_;
}

const GCMissionRecvSpecialReward& GCMissionRecvSpecialReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Mission_2eproto();
  return *default_instance_;
}

GCMissionRecvSpecialReward* GCMissionRecvSpecialReward::default_instance_ = NULL;

GCMissionRecvSpecialReward* GCMissionRecvSpecialReward::New() const {
  return new GCMissionRecvSpecialReward;
}

void GCMissionRecvSpecialReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCMissionRecvSpecialReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCMissionRecvSpecialReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCMissionRecvSpecialReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCMissionRecvSpecialReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCMissionRecvSpecialReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCMissionRecvSpecialReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCMissionRecvSpecialReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCMissionRecvSpecialReward::MergeFrom(const GCMissionRecvSpecialReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCMissionRecvSpecialReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCMissionRecvSpecialReward::CopyFrom(const GCMissionRecvSpecialReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCMissionRecvSpecialReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GCMissionRecvSpecialReward::Swap(GCMissionRecvSpecialReward* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCMissionRecvSpecialReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCMissionRecvSpecialReward_descriptor_;
  metadata.reflection = GCMissionRecvSpecialReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
