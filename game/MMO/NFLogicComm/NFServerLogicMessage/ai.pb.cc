// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ai.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_AiAiHpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AiAiHpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_AiAi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_AiAi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_AiAi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_AiAi_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ai_2eproto() {
  protobuf_AddDesc_ai_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ai.proto");
  GOOGLE_CHECK(file != NULL);
  E_AiAiHpDesc_descriptor_ = file->message_type(0);
  static const int E_AiAiHpDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAiHpDesc, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAiHpDesc, m_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAiHpDesc, m_chat_),
  };
  E_AiAiHpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AiAiHpDesc_descriptor_,
      E_AiAiHpDesc::default_instance_,
      E_AiAiHpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAiHpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAiHpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AiAiHpDesc));
  E_AiAi_descriptor_ = file->message_type(1);
  static const int E_AiAi_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_deadhateremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_invisibleremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_returntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_isattackedshowoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_pursuerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_actionrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_wakeupradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_isaiworkwhennobody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_borneffectaidelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_initskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, m_hp_),
  };
  E_AiAi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_AiAi_descriptor_,
      E_AiAi::default_instance_,
      E_AiAi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_AiAi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_AiAi));
  Sheet_AiAi_descriptor_ = file->message_type(2);
  static const int Sheet_AiAi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AiAi, e_aiai_list_),
  };
  Sheet_AiAi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_AiAi_descriptor_,
      Sheet_AiAi::default_instance_,
      Sheet_AiAi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AiAi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_AiAi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_AiAi));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ai_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AiAiHpDesc_descriptor_, &E_AiAiHpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_AiAi_descriptor_, &E_AiAi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_AiAi_descriptor_, &Sheet_AiAi::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ai_2eproto() {
  delete E_AiAiHpDesc::default_instance_;
  delete E_AiAiHpDesc_reflection_;
  delete E_AiAi::default_instance_;
  delete E_AiAi_reflection_;
  delete Sheet_AiAi::default_instance_;
  delete Sheet_AiAi_reflection_;
}

void protobuf_AddDesc_ai_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ai.proto\022\010proto_ff\032\025yd_fieldoptions.pr"
    "oto\"o\n\014E_AiAiHpDesc\022\033\n\007m_skill\030\001 \001(\003B\n\302\377"
    "\024\006\346\212\200\350\203\275\022 \n\tm_percent\030\002 \001(\005B\r\302\377\024\t\347\231\276\345\210\206\346"
    "\257\224\022 \n\006m_chat\030\003 \001(\003B\020\302\377\024\014\345\234\272\346\231\257\345\271\277\346\222\255\"\271\005\n"
    "\006E_AiAi\022\027\n\004m_id\030\001 \001(\003B\t\302\377\024\005\350\241\250ID\022\034\n\006m_ty"
    "pe\030\002 \001(\005B\014\302\377\024\010ai\347\261\273\345\236\213\0224\n\020m_deadhaterema"
    "in\030\003 \001(\tB\032\302\377\024\022\346\255\273\344\272\241\344\273\207\346\201\250\344\277\235\347\225\231\220\301\024<\0225\n\021"
    "m_invisibleremain\030\004 \001(\tB\032\302\377\024\022\351\232\220\350\272\253\344\273\207\346\201"
    "\250\344\277\235\347\225\231\220\301\024<\022*\n\nm_isactive\030\005 \001(\005B\026\302\377\024\022\346\230\257"
    "\345\220\246\344\270\272\344\270\273\345\212\250\346\200\252\022&\n\014m_returntype\030\006 \001(\005B\020\302"
    "\377\024\014\345\233\236\345\275\222\347\261\273\345\236\213\022\032\n\006m_view\030\007 \001(\005B\n\302\377\024\006\350\247\206"
    "\351\207\216\0229\n\023m_isattackedshowoff\030\010 \001(\005B\034\302\377\024\030\346\230"
    "\257\345\220\246\345\205\263\351\227\255\345\217\227\345\207\273\350\241\250\347\216\260\022\'\n\rm_pursuerange\030"
    "\t \001(\005B\020\302\377\024\014\350\277\275\345\207\273\350\214\203\345\233\264\022-\n\rm_actionrange"
    "\030\n \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\264\273\345\212\250\350\214\203\345\233\264\022(\n\016m_wake"
    "upradius\030\013 \001(\005B\020\302\377\024\014\345\224\244\351\206\222\345\215\212\345\276\204\0229\n\024m_is"
    "aiworkwhennobody\030\014 \001(\005B\033\302\377\024\027\346\230\257\345\220\246\346\227\240\344\272\272"
    "\346\227\266\345\220\257\347\224\250AI\022/\n\023m_borneffectaidelay\030\r \001(\005"
    "B\022\302\377\024\016\345\207\272\347\224\237AI\345\273\266\346\227\266\0226\n\014m_initskills\030\016 \001"
    "(\tB \302\377\024\030\346\212\200\350\203\275\346\261\240\345\210\235\345\247\213\346\212\200\350\203\275\347\273\204\220\301\024d\022:\n\004"
    "m_hp\030\017 \003(\0132\026.proto_ff.E_AiAiHpDescB\024\302\377\024\014"
    "\350\247\246\345\217\221\350\241\200\351\207\217\210\301\024\002\"9\n\nSheet_AiAi\022+\n\013E_AiAi"
    "_List\030\001 \003(\0132\020.proto_ff.E_AiAiB\004\210\301\024\024", 915);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ai.proto", &protobuf_RegisterTypes);
  E_AiAiHpDesc::default_instance_ = new E_AiAiHpDesc();
  E_AiAi::default_instance_ = new E_AiAi();
  Sheet_AiAi::default_instance_ = new Sheet_AiAi();
  E_AiAiHpDesc::default_instance_->InitAsDefaultInstance();
  E_AiAi::default_instance_->InitAsDefaultInstance();
  Sheet_AiAi::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ai_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ai_2eproto {
  StaticDescriptorInitializer_ai_2eproto() {
    protobuf_AddDesc_ai_2eproto();
  }
} static_descriptor_initializer_ai_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_AiAiHpDesc::kMSkillFieldNumber;
const int E_AiAiHpDesc::kMPercentFieldNumber;
const int E_AiAiHpDesc::kMChatFieldNumber;
#endif  // !_MSC_VER

E_AiAiHpDesc::E_AiAiHpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AiAiHpDesc::InitAsDefaultInstance() {
}

E_AiAiHpDesc::E_AiAiHpDesc(const E_AiAiHpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AiAiHpDesc::SharedCtor() {
  _cached_size_ = 0;
  m_skill_ = GOOGLE_LONGLONG(0);
  m_percent_ = 0;
  m_chat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AiAiHpDesc::~E_AiAiHpDesc() {
  SharedDtor();
}

void E_AiAiHpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_AiAiHpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AiAiHpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AiAiHpDesc_descriptor_;
}

const E_AiAiHpDesc& E_AiAiHpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

E_AiAiHpDesc* E_AiAiHpDesc::default_instance_ = NULL;

E_AiAiHpDesc* E_AiAiHpDesc::New() const {
  return new E_AiAiHpDesc;
}

void E_AiAiHpDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_skill_ = GOOGLE_LONGLONG(0);
    m_percent_ = 0;
    m_chat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AiAiHpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_skill_)));
          set_has_m_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_percent;
        break;
      }

      // optional int32 m_percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_percent_)));
          set_has_m_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_chat;
        break;
      }

      // optional int64 m_chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_chat_)));
          set_has_m_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AiAiHpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_skill = 1;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_skill(), output);
  }

  // optional int32 m_percent = 2;
  if (has_m_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_percent(), output);
  }

  // optional int64 m_chat = 3;
  if (has_m_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AiAiHpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_skill = 1;
  if (has_m_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_skill(), target);
  }

  // optional int32 m_percent = 2;
  if (has_m_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_percent(), target);
  }

  // optional int64 m_chat = 3;
  if (has_m_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AiAiHpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_skill = 1;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_skill());
    }

    // optional int32 m_percent = 2;
    if (has_m_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_percent());
    }

    // optional int64 m_chat = 3;
    if (has_m_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AiAiHpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AiAiHpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AiAiHpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AiAiHpDesc::MergeFrom(const E_AiAiHpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
    if (from.has_m_percent()) {
      set_m_percent(from.m_percent());
    }
    if (from.has_m_chat()) {
      set_m_chat(from.m_chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AiAiHpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AiAiHpDesc::CopyFrom(const E_AiAiHpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AiAiHpDesc::IsInitialized() const {

  return true;
}

void E_AiAiHpDesc::Swap(E_AiAiHpDesc* other) {
  if (other != this) {
    std::swap(m_skill_, other->m_skill_);
    std::swap(m_percent_, other->m_percent_);
    std::swap(m_chat_, other->m_chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AiAiHpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AiAiHpDesc_descriptor_;
  metadata.reflection = E_AiAiHpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_AiAi::kMIdFieldNumber;
const int E_AiAi::kMTypeFieldNumber;
const int E_AiAi::kMDeadhateremainFieldNumber;
const int E_AiAi::kMInvisibleremainFieldNumber;
const int E_AiAi::kMIsactiveFieldNumber;
const int E_AiAi::kMReturntypeFieldNumber;
const int E_AiAi::kMViewFieldNumber;
const int E_AiAi::kMIsattackedshowoffFieldNumber;
const int E_AiAi::kMPursuerangeFieldNumber;
const int E_AiAi::kMActionrangeFieldNumber;
const int E_AiAi::kMWakeupradiusFieldNumber;
const int E_AiAi::kMIsaiworkwhennobodyFieldNumber;
const int E_AiAi::kMBorneffectaidelayFieldNumber;
const int E_AiAi::kMInitskillsFieldNumber;
const int E_AiAi::kMHpFieldNumber;
#endif  // !_MSC_VER

E_AiAi::E_AiAi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_AiAi::InitAsDefaultInstance() {
}

E_AiAi::E_AiAi(const E_AiAi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_AiAi::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_deadhateremain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_invisibleremain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_isactive_ = 0;
  m_returntype_ = 0;
  m_view_ = 0;
  m_isattackedshowoff_ = 0;
  m_pursuerange_ = 0;
  m_actionrange_ = 0;
  m_wakeupradius_ = 0;
  m_isaiworkwhennobody_ = 0;
  m_borneffectaidelay_ = 0;
  m_initskills_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_AiAi::~E_AiAi() {
  SharedDtor();
}

void E_AiAi::SharedDtor() {
  if (m_deadhateremain_ != &::google::protobuf::internal::kEmptyString) {
    delete m_deadhateremain_;
  }
  if (m_invisibleremain_ != &::google::protobuf::internal::kEmptyString) {
    delete m_invisibleremain_;
  }
  if (m_initskills_ != &::google::protobuf::internal::kEmptyString) {
    delete m_initskills_;
  }
  if (this != default_instance_) {
  }
}

void E_AiAi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_AiAi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_AiAi_descriptor_;
}

const E_AiAi& E_AiAi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

E_AiAi* E_AiAi::default_instance_ = NULL;

E_AiAi* E_AiAi::New() const {
  return new E_AiAi;
}

void E_AiAi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    if (has_m_deadhateremain()) {
      if (m_deadhateremain_ != &::google::protobuf::internal::kEmptyString) {
        m_deadhateremain_->clear();
      }
    }
    if (has_m_invisibleremain()) {
      if (m_invisibleremain_ != &::google::protobuf::internal::kEmptyString) {
        m_invisibleremain_->clear();
      }
    }
    m_isactive_ = 0;
    m_returntype_ = 0;
    m_view_ = 0;
    m_isattackedshowoff_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_pursuerange_ = 0;
    m_actionrange_ = 0;
    m_wakeupradius_ = 0;
    m_isaiworkwhennobody_ = 0;
    m_borneffectaidelay_ = 0;
    if (has_m_initskills()) {
      if (m_initskills_ != &::google::protobuf::internal::kEmptyString) {
        m_initskills_->clear();
      }
    }
  }
  m_hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_AiAi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_deadhateremain;
        break;
      }

      // optional string m_deadhateremain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_deadhateremain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_deadhateremain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_deadhateremain().data(), this->m_deadhateremain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_invisibleremain;
        break;
      }

      // optional string m_invisibleremain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_invisibleremain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_invisibleremain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_invisibleremain().data(), this->m_invisibleremain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_isactive;
        break;
      }

      // optional int32 m_isactive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isactive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isactive_)));
          set_has_m_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_returntype;
        break;
      }

      // optional int32 m_returntype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_returntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_returntype_)));
          set_has_m_returntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_view;
        break;
      }

      // optional int32 m_view = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_view_)));
          set_has_m_view();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_isattackedshowoff;
        break;
      }

      // optional int32 m_isattackedshowoff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isattackedshowoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isattackedshowoff_)));
          set_has_m_isattackedshowoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_pursuerange;
        break;
      }

      // optional int32 m_pursuerange = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pursuerange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pursuerange_)));
          set_has_m_pursuerange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_actionrange;
        break;
      }

      // optional int32 m_actionrange = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_actionrange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_actionrange_)));
          set_has_m_actionrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_wakeupradius;
        break;
      }

      // optional int32 m_wakeupradius = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wakeupradius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wakeupradius_)));
          set_has_m_wakeupradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_isaiworkwhennobody;
        break;
      }

      // optional int32 m_isaiworkwhennobody = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isaiworkwhennobody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isaiworkwhennobody_)));
          set_has_m_isaiworkwhennobody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_borneffectaidelay;
        break;
      }

      // optional int32 m_borneffectaidelay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_borneffectaidelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_borneffectaidelay_)));
          set_has_m_borneffectaidelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_m_initskills;
        break;
      }

      // optional string m_initskills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_initskills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_initskills()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_initskills().data(), this->m_initskills().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_hp;
        break;
      }

      // repeated .proto_ff.E_AiAiHpDesc m_hp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_hp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_AiAi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_deadhateremain = 3;
  if (has_m_deadhateremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_deadhateremain().data(), this->m_deadhateremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_deadhateremain(), output);
  }

  // optional string m_invisibleremain = 4;
  if (has_m_invisibleremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_invisibleremain().data(), this->m_invisibleremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_invisibleremain(), output);
  }

  // optional int32 m_isactive = 5;
  if (has_m_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_isactive(), output);
  }

  // optional int32 m_returntype = 6;
  if (has_m_returntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_returntype(), output);
  }

  // optional int32 m_view = 7;
  if (has_m_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_view(), output);
  }

  // optional int32 m_isattackedshowoff = 8;
  if (has_m_isattackedshowoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_isattackedshowoff(), output);
  }

  // optional int32 m_pursuerange = 9;
  if (has_m_pursuerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_pursuerange(), output);
  }

  // optional int32 m_actionrange = 10;
  if (has_m_actionrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_actionrange(), output);
  }

  // optional int32 m_wakeupradius = 11;
  if (has_m_wakeupradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_wakeupradius(), output);
  }

  // optional int32 m_isaiworkwhennobody = 12;
  if (has_m_isaiworkwhennobody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_isaiworkwhennobody(), output);
  }

  // optional int32 m_borneffectaidelay = 13;
  if (has_m_borneffectaidelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_borneffectaidelay(), output);
  }

  // optional string m_initskills = 14;
  if (has_m_initskills()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initskills().data(), this->m_initskills().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->m_initskills(), output);
  }

  // repeated .proto_ff.E_AiAiHpDesc m_hp = 15;
  for (int i = 0; i < this->m_hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->m_hp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_AiAi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_deadhateremain = 3;
  if (has_m_deadhateremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_deadhateremain().data(), this->m_deadhateremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_deadhateremain(), target);
  }

  // optional string m_invisibleremain = 4;
  if (has_m_invisibleremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_invisibleremain().data(), this->m_invisibleremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_invisibleremain(), target);
  }

  // optional int32 m_isactive = 5;
  if (has_m_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_isactive(), target);
  }

  // optional int32 m_returntype = 6;
  if (has_m_returntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_returntype(), target);
  }

  // optional int32 m_view = 7;
  if (has_m_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_view(), target);
  }

  // optional int32 m_isattackedshowoff = 8;
  if (has_m_isattackedshowoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_isattackedshowoff(), target);
  }

  // optional int32 m_pursuerange = 9;
  if (has_m_pursuerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_pursuerange(), target);
  }

  // optional int32 m_actionrange = 10;
  if (has_m_actionrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_actionrange(), target);
  }

  // optional int32 m_wakeupradius = 11;
  if (has_m_wakeupradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_wakeupradius(), target);
  }

  // optional int32 m_isaiworkwhennobody = 12;
  if (has_m_isaiworkwhennobody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_isaiworkwhennobody(), target);
  }

  // optional int32 m_borneffectaidelay = 13;
  if (has_m_borneffectaidelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_borneffectaidelay(), target);
  }

  // optional string m_initskills = 14;
  if (has_m_initskills()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_initskills().data(), this->m_initskills().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->m_initskills(), target);
  }

  // repeated .proto_ff.E_AiAiHpDesc m_hp = 15;
  for (int i = 0; i < this->m_hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->m_hp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_AiAi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_deadhateremain = 3;
    if (has_m_deadhateremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_deadhateremain());
    }

    // optional string m_invisibleremain = 4;
    if (has_m_invisibleremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_invisibleremain());
    }

    // optional int32 m_isactive = 5;
    if (has_m_isactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isactive());
    }

    // optional int32 m_returntype = 6;
    if (has_m_returntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_returntype());
    }

    // optional int32 m_view = 7;
    if (has_m_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_view());
    }

    // optional int32 m_isattackedshowoff = 8;
    if (has_m_isattackedshowoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isattackedshowoff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_pursuerange = 9;
    if (has_m_pursuerange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pursuerange());
    }

    // optional int32 m_actionrange = 10;
    if (has_m_actionrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_actionrange());
    }

    // optional int32 m_wakeupradius = 11;
    if (has_m_wakeupradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wakeupradius());
    }

    // optional int32 m_isaiworkwhennobody = 12;
    if (has_m_isaiworkwhennobody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isaiworkwhennobody());
    }

    // optional int32 m_borneffectaidelay = 13;
    if (has_m_borneffectaidelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_borneffectaidelay());
    }

    // optional string m_initskills = 14;
    if (has_m_initskills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_initskills());
    }

  }
  // repeated .proto_ff.E_AiAiHpDesc m_hp = 15;
  total_size += 1 * this->m_hp_size();
  for (int i = 0; i < this->m_hp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_hp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_AiAi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_AiAi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_AiAi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_AiAi::MergeFrom(const E_AiAi& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_hp_.MergeFrom(from.m_hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_deadhateremain()) {
      set_m_deadhateremain(from.m_deadhateremain());
    }
    if (from.has_m_invisibleremain()) {
      set_m_invisibleremain(from.m_invisibleremain());
    }
    if (from.has_m_isactive()) {
      set_m_isactive(from.m_isactive());
    }
    if (from.has_m_returntype()) {
      set_m_returntype(from.m_returntype());
    }
    if (from.has_m_view()) {
      set_m_view(from.m_view());
    }
    if (from.has_m_isattackedshowoff()) {
      set_m_isattackedshowoff(from.m_isattackedshowoff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_pursuerange()) {
      set_m_pursuerange(from.m_pursuerange());
    }
    if (from.has_m_actionrange()) {
      set_m_actionrange(from.m_actionrange());
    }
    if (from.has_m_wakeupradius()) {
      set_m_wakeupradius(from.m_wakeupradius());
    }
    if (from.has_m_isaiworkwhennobody()) {
      set_m_isaiworkwhennobody(from.m_isaiworkwhennobody());
    }
    if (from.has_m_borneffectaidelay()) {
      set_m_borneffectaidelay(from.m_borneffectaidelay());
    }
    if (from.has_m_initskills()) {
      set_m_initskills(from.m_initskills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_AiAi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_AiAi::CopyFrom(const E_AiAi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_AiAi::IsInitialized() const {

  return true;
}

void E_AiAi::Swap(E_AiAi* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_deadhateremain_, other->m_deadhateremain_);
    std::swap(m_invisibleremain_, other->m_invisibleremain_);
    std::swap(m_isactive_, other->m_isactive_);
    std::swap(m_returntype_, other->m_returntype_);
    std::swap(m_view_, other->m_view_);
    std::swap(m_isattackedshowoff_, other->m_isattackedshowoff_);
    std::swap(m_pursuerange_, other->m_pursuerange_);
    std::swap(m_actionrange_, other->m_actionrange_);
    std::swap(m_wakeupradius_, other->m_wakeupradius_);
    std::swap(m_isaiworkwhennobody_, other->m_isaiworkwhennobody_);
    std::swap(m_borneffectaidelay_, other->m_borneffectaidelay_);
    std::swap(m_initskills_, other->m_initskills_);
    m_hp_.Swap(&other->m_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_AiAi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_AiAi_descriptor_;
  metadata.reflection = E_AiAi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_AiAi::kEAiAiListFieldNumber;
#endif  // !_MSC_VER

Sheet_AiAi::Sheet_AiAi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_AiAi::InitAsDefaultInstance() {
}

Sheet_AiAi::Sheet_AiAi(const Sheet_AiAi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_AiAi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_AiAi::~Sheet_AiAi() {
  SharedDtor();
}

void Sheet_AiAi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_AiAi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_AiAi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_AiAi_descriptor_;
}

const Sheet_AiAi& Sheet_AiAi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

Sheet_AiAi* Sheet_AiAi::default_instance_ = NULL;

Sheet_AiAi* Sheet_AiAi::New() const {
  return new Sheet_AiAi;
}

void Sheet_AiAi::Clear() {
  e_aiai_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_AiAi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_AiAi E_AiAi_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_AiAi_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_aiai_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_AiAi_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_AiAi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_AiAi E_AiAi_List = 1;
  for (int i = 0; i < this->e_aiai_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_aiai_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_AiAi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_AiAi E_AiAi_List = 1;
  for (int i = 0; i < this->e_aiai_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_aiai_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_AiAi::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_AiAi E_AiAi_List = 1;
  total_size += 1 * this->e_aiai_list_size();
  for (int i = 0; i < this->e_aiai_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_aiai_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_AiAi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_AiAi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_AiAi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_AiAi::MergeFrom(const Sheet_AiAi& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_aiai_list_.MergeFrom(from.e_aiai_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_AiAi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_AiAi::CopyFrom(const Sheet_AiAi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_AiAi::IsInitialized() const {

  return true;
}

void Sheet_AiAi::Swap(Sheet_AiAi* other) {
  if (other != this) {
    e_aiai_list_.Swap(&other->e_aiai_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_AiAi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_AiAi_descriptor_;
  metadata.reflection = Sheet_AiAi_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
