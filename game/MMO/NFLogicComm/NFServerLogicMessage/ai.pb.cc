// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ai.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* aiaihpDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  aiaihpDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* aiai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  aiai_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_aiai_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_aiai_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ai_2eproto() {
  protobuf_AddDesc_ai_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ai.proto");
  GOOGLE_CHECK(file != NULL);
  aiaihpDesc_descriptor_ = file->message_type(0);
  static const int aiaihpDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiaihpDesc, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiaihpDesc, percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiaihpDesc, chat_),
  };
  aiaihpDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      aiaihpDesc_descriptor_,
      aiaihpDesc::default_instance_,
      aiaihpDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiaihpDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiaihpDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(aiaihpDesc));
  aiai_descriptor_ = file->message_type(1);
  static const int aiai_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, deadhateremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, invisibleremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, returntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, view_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, isattackedshowoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, pursuerange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, actionrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, wakeupradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, isaiworkwhennobody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, borneffectaidelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, initskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, hp_),
  };
  aiai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      aiai_descriptor_,
      aiai::default_instance_,
      aiai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(aiai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(aiai));
  Sheet_aiai_descriptor_ = file->message_type(2);
  static const int Sheet_aiai_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_aiai, aiai_list_),
  };
  Sheet_aiai_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_aiai_descriptor_,
      Sheet_aiai::default_instance_,
      Sheet_aiai_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_aiai, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_aiai, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_aiai));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ai_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    aiaihpDesc_descriptor_, &aiaihpDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    aiai_descriptor_, &aiai::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_aiai_descriptor_, &Sheet_aiai::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ai_2eproto() {
  delete aiaihpDesc::default_instance_;
  delete aiaihpDesc_reflection_;
  delete aiai::default_instance_;
  delete aiai_reflection_;
  delete Sheet_aiai::default_instance_;
  delete Sheet_aiai_reflection_;
}

void protobuf_AddDesc_ai_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\010ai.proto\022\010proto_ff\032\025yd_fieldoptions.pr"
    "oto\"g\n\naiaihpDesc\022\031\n\005skill\030\001 \001(\003B\n\302\377\024\006\346\212"
    "\200\350\203\275\022\036\n\007percent\030\002 \001(\005B\r\302\377\024\t\347\231\276\345\210\206\346\257\224\022\036\n\004"
    "chat\030\003 \001(\003B\020\302\377\024\014\345\234\272\346\231\257\345\271\277\346\222\255\"\227\005\n\004aiai\022\025\n"
    "\002id\030\001 \001(\003B\t\302\377\024\005\350\241\250ID\022\032\n\004type\030\002 \001(\005B\014\302\377\024\010"
    "ai\347\261\273\345\236\213\0222\n\016deadHateRemain\030\003 \001(\tB\032\302\377\024\022\346\255"
    "\273\344\272\241\344\273\207\346\201\250\344\277\235\347\225\231\220\301\024 \0223\n\017invisibleRemain\030"
    "\004 \001(\tB\032\302\377\024\022\351\232\220\350\272\253\344\273\207\346\201\250\344\277\235\347\225\231\220\301\024 \022(\n\010isA"
    "ctive\030\005 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\344\270\272\344\270\273\345\212\250\346\200\252\022$\n\nr"
    "eturnType\030\006 \001(\005B\020\302\377\024\014\345\233\236\345\275\222\347\261\273\345\236\213\022\030\n\004vie"
    "w\030\007 \001(\005B\n\302\377\024\006\350\247\206\351\207\216\0227\n\021isAttackedShowOff"
    "\030\010 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\345\205\263\351\227\255\345\217\227\345\207\273\350\241\250\347\216\260\022%\n\013"
    "pursueRange\030\t \001(\005B\020\302\377\024\014\350\277\275\345\207\273\350\214\203\345\233\264\022+\n\013a"
    "ctionRange\030\n \001(\005B\026\302\377\024\022\346\200\252\347\211\251\346\264\273\345\212\250\350\214\203\345\233\264"
    "\022&\n\014wakeupRadius\030\013 \001(\005B\020\302\377\024\014\345\224\244\351\206\222\345\215\212\345\276\204"
    "\0227\n\022isAIWorkWhenNobody\030\014 \001(\005B\033\302\377\024\027\346\230\257\345\220\246"
    "\346\227\240\344\272\272\346\227\266\345\220\257\347\224\250AI\022-\n\021bornEffectAIDelay\030\r"
    " \001(\005B\022\302\377\024\016\345\207\272\347\224\237AI\345\273\266\346\227\266\0224\n\ninitSkills\030\016"
    " \001(\tB \302\377\024\030\346\212\200\350\203\275\346\261\240\345\210\235\345\247\213\346\212\200\350\203\275\347\273\204\220\301\024J\0226"
    "\n\002hp\030\017 \003(\0132\024.proto_ff.aiaihpDescB\024\302\377\024\014\350\247"
    "\246\345\217\221\350\241\200\351\207\217\210\301\024\002\"6\n\nSheet_aiai\022(\n\taiai_Lis"
    "t\030\001 \003(\0132\016.proto_ff.aiaiB\005\210\301\024\246\001", 870);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ai.proto", &protobuf_RegisterTypes);
  aiaihpDesc::default_instance_ = new aiaihpDesc();
  aiai::default_instance_ = new aiai();
  Sheet_aiai::default_instance_ = new Sheet_aiai();
  aiaihpDesc::default_instance_->InitAsDefaultInstance();
  aiai::default_instance_->InitAsDefaultInstance();
  Sheet_aiai::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ai_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ai_2eproto {
  StaticDescriptorInitializer_ai_2eproto() {
    protobuf_AddDesc_ai_2eproto();
  }
} static_descriptor_initializer_ai_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int aiaihpDesc::kSkillFieldNumber;
const int aiaihpDesc::kPercentFieldNumber;
const int aiaihpDesc::kChatFieldNumber;
#endif  // !_MSC_VER

aiaihpDesc::aiaihpDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void aiaihpDesc::InitAsDefaultInstance() {
}

aiaihpDesc::aiaihpDesc(const aiaihpDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void aiaihpDesc::SharedCtor() {
  _cached_size_ = 0;
  skill_ = GOOGLE_LONGLONG(0);
  percent_ = 0;
  chat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

aiaihpDesc::~aiaihpDesc() {
  SharedDtor();
}

void aiaihpDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void aiaihpDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* aiaihpDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return aiaihpDesc_descriptor_;
}

const aiaihpDesc& aiaihpDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

aiaihpDesc* aiaihpDesc::default_instance_ = NULL;

aiaihpDesc* aiaihpDesc::New() const {
  return new aiaihpDesc;
}

void aiaihpDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_ = GOOGLE_LONGLONG(0);
    percent_ = 0;
    chat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool aiaihpDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 skill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skill_)));
          set_has_skill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_percent;
        break;
      }

      // optional int32 percent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }

      // optional int64 chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void aiaihpDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 skill = 1;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->skill(), output);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percent(), output);
  }

  // optional int64 chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* aiaihpDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 skill = 1;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->skill(), target);
  }

  // optional int32 percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percent(), target);
  }

  // optional int64 chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int aiaihpDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 skill = 1;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skill());
    }

    // optional int32 percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional int64 chat = 3;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void aiaihpDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const aiaihpDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const aiaihpDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void aiaihpDesc::MergeFrom(const aiaihpDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void aiaihpDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void aiaihpDesc::CopyFrom(const aiaihpDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool aiaihpDesc::IsInitialized() const {

  return true;
}

void aiaihpDesc::Swap(aiaihpDesc* other) {
  if (other != this) {
    std::swap(skill_, other->skill_);
    std::swap(percent_, other->percent_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata aiaihpDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = aiaihpDesc_descriptor_;
  metadata.reflection = aiaihpDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int aiai::kIdFieldNumber;
const int aiai::kTypeFieldNumber;
const int aiai::kDeadHateRemainFieldNumber;
const int aiai::kInvisibleRemainFieldNumber;
const int aiai::kIsActiveFieldNumber;
const int aiai::kReturnTypeFieldNumber;
const int aiai::kViewFieldNumber;
const int aiai::kIsAttackedShowOffFieldNumber;
const int aiai::kPursueRangeFieldNumber;
const int aiai::kActionRangeFieldNumber;
const int aiai::kWakeupRadiusFieldNumber;
const int aiai::kIsAIWorkWhenNobodyFieldNumber;
const int aiai::kBornEffectAIDelayFieldNumber;
const int aiai::kInitSkillsFieldNumber;
const int aiai::kHpFieldNumber;
#endif  // !_MSC_VER

aiai::aiai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void aiai::InitAsDefaultInstance() {
}

aiai::aiai(const aiai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void aiai::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  deadhateremain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  invisibleremain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isactive_ = 0;
  returntype_ = 0;
  view_ = 0;
  isattackedshowoff_ = 0;
  pursuerange_ = 0;
  actionrange_ = 0;
  wakeupradius_ = 0;
  isaiworkwhennobody_ = 0;
  borneffectaidelay_ = 0;
  initskills_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

aiai::~aiai() {
  SharedDtor();
}

void aiai::SharedDtor() {
  if (deadhateremain_ != &::google::protobuf::internal::kEmptyString) {
    delete deadhateremain_;
  }
  if (invisibleremain_ != &::google::protobuf::internal::kEmptyString) {
    delete invisibleremain_;
  }
  if (initskills_ != &::google::protobuf::internal::kEmptyString) {
    delete initskills_;
  }
  if (this != default_instance_) {
  }
}

void aiai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* aiai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return aiai_descriptor_;
}

const aiai& aiai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

aiai* aiai::default_instance_ = NULL;

aiai* aiai::New() const {
  return new aiai;
}

void aiai::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_deadhateremain()) {
      if (deadhateremain_ != &::google::protobuf::internal::kEmptyString) {
        deadhateremain_->clear();
      }
    }
    if (has_invisibleremain()) {
      if (invisibleremain_ != &::google::protobuf::internal::kEmptyString) {
        invisibleremain_->clear();
      }
    }
    isactive_ = 0;
    returntype_ = 0;
    view_ = 0;
    isattackedshowoff_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pursuerange_ = 0;
    actionrange_ = 0;
    wakeupradius_ = 0;
    isaiworkwhennobody_ = 0;
    borneffectaidelay_ = 0;
    if (has_initskills()) {
      if (initskills_ != &::google::protobuf::internal::kEmptyString) {
        initskills_->clear();
      }
    }
  }
  hp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool aiai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deadHateRemain;
        break;
      }

      // optional string deadHateRemain = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deadHateRemain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deadhateremain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deadhateremain().data(), this->deadhateremain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_invisibleRemain;
        break;
      }

      // optional string invisibleRemain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invisibleRemain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invisibleremain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invisibleremain().data(), this->invisibleremain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isActive;
        break;
      }

      // optional int32 isActive = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_returnType;
        break;
      }

      // optional int32 returnType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returntype_)));
          set_has_returntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_view;
        break;
      }

      // optional int32 view = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_view:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &view_)));
          set_has_view();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isAttackedShowOff;
        break;
      }

      // optional int32 isAttackedShowOff = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAttackedShowOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isattackedshowoff_)));
          set_has_isattackedshowoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pursueRange;
        break;
      }

      // optional int32 pursueRange = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pursueRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pursuerange_)));
          set_has_pursuerange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_actionRange;
        break;
      }

      // optional int32 actionRange = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionrange_)));
          set_has_actionrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wakeupRadius;
        break;
      }

      // optional int32 wakeupRadius = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wakeupRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeupradius_)));
          set_has_wakeupradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isAIWorkWhenNobody;
        break;
      }

      // optional int32 isAIWorkWhenNobody = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAIWorkWhenNobody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isaiworkwhennobody_)));
          set_has_isaiworkwhennobody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bornEffectAIDelay;
        break;
      }

      // optional int32 bornEffectAIDelay = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bornEffectAIDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &borneffectaidelay_)));
          set_has_borneffectaidelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_initSkills;
        break;
      }

      // optional string initSkills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initSkills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_initskills()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initskills().data(), this->initskills().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hp;
        break;
      }

      // repeated .proto_ff.aiaihpDesc hp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_hp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void aiai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string deadHateRemain = 3;
  if (has_deadhateremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadhateremain().data(), this->deadhateremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deadhateremain(), output);
  }

  // optional string invisibleRemain = 4;
  if (has_invisibleremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invisibleremain().data(), this->invisibleremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->invisibleremain(), output);
  }

  // optional int32 isActive = 5;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isactive(), output);
  }

  // optional int32 returnType = 6;
  if (has_returntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->returntype(), output);
  }

  // optional int32 view = 7;
  if (has_view()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->view(), output);
  }

  // optional int32 isAttackedShowOff = 8;
  if (has_isattackedshowoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isattackedshowoff(), output);
  }

  // optional int32 pursueRange = 9;
  if (has_pursuerange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pursuerange(), output);
  }

  // optional int32 actionRange = 10;
  if (has_actionrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->actionrange(), output);
  }

  // optional int32 wakeupRadius = 11;
  if (has_wakeupradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->wakeupradius(), output);
  }

  // optional int32 isAIWorkWhenNobody = 12;
  if (has_isaiworkwhennobody()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->isaiworkwhennobody(), output);
  }

  // optional int32 bornEffectAIDelay = 13;
  if (has_borneffectaidelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->borneffectaidelay(), output);
  }

  // optional string initSkills = 14;
  if (has_initskills()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initskills().data(), this->initskills().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->initskills(), output);
  }

  // repeated .proto_ff.aiaihpDesc hp = 15;
  for (int i = 0; i < this->hp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->hp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* aiai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string deadHateRemain = 3;
  if (has_deadhateremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deadhateremain().data(), this->deadhateremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deadhateremain(), target);
  }

  // optional string invisibleRemain = 4;
  if (has_invisibleremain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invisibleremain().data(), this->invisibleremain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invisibleremain(), target);
  }

  // optional int32 isActive = 5;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isactive(), target);
  }

  // optional int32 returnType = 6;
  if (has_returntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->returntype(), target);
  }

  // optional int32 view = 7;
  if (has_view()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->view(), target);
  }

  // optional int32 isAttackedShowOff = 8;
  if (has_isattackedshowoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isattackedshowoff(), target);
  }

  // optional int32 pursueRange = 9;
  if (has_pursuerange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pursuerange(), target);
  }

  // optional int32 actionRange = 10;
  if (has_actionrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->actionrange(), target);
  }

  // optional int32 wakeupRadius = 11;
  if (has_wakeupradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->wakeupradius(), target);
  }

  // optional int32 isAIWorkWhenNobody = 12;
  if (has_isaiworkwhennobody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->isaiworkwhennobody(), target);
  }

  // optional int32 bornEffectAIDelay = 13;
  if (has_borneffectaidelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->borneffectaidelay(), target);
  }

  // optional string initSkills = 14;
  if (has_initskills()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initskills().data(), this->initskills().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->initskills(), target);
  }

  // repeated .proto_ff.aiaihpDesc hp = 15;
  for (int i = 0; i < this->hp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->hp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int aiai::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string deadHateRemain = 3;
    if (has_deadhateremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deadhateremain());
    }

    // optional string invisibleRemain = 4;
    if (has_invisibleremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invisibleremain());
    }

    // optional int32 isActive = 5;
    if (has_isactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isactive());
    }

    // optional int32 returnType = 6;
    if (has_returntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returntype());
    }

    // optional int32 view = 7;
    if (has_view()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->view());
    }

    // optional int32 isAttackedShowOff = 8;
    if (has_isattackedshowoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isattackedshowoff());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pursueRange = 9;
    if (has_pursuerange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pursuerange());
    }

    // optional int32 actionRange = 10;
    if (has_actionrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionrange());
    }

    // optional int32 wakeupRadius = 11;
    if (has_wakeupradius()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wakeupradius());
    }

    // optional int32 isAIWorkWhenNobody = 12;
    if (has_isaiworkwhennobody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isaiworkwhennobody());
    }

    // optional int32 bornEffectAIDelay = 13;
    if (has_borneffectaidelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->borneffectaidelay());
    }

    // optional string initSkills = 14;
    if (has_initskills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->initskills());
    }

  }
  // repeated .proto_ff.aiaihpDesc hp = 15;
  total_size += 1 * this->hp_size();
  for (int i = 0; i < this->hp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void aiai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const aiai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const aiai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void aiai::MergeFrom(const aiai& from) {
  GOOGLE_CHECK_NE(&from, this);
  hp_.MergeFrom(from.hp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_deadhateremain()) {
      set_deadhateremain(from.deadhateremain());
    }
    if (from.has_invisibleremain()) {
      set_invisibleremain(from.invisibleremain());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_returntype()) {
      set_returntype(from.returntype());
    }
    if (from.has_view()) {
      set_view(from.view());
    }
    if (from.has_isattackedshowoff()) {
      set_isattackedshowoff(from.isattackedshowoff());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pursuerange()) {
      set_pursuerange(from.pursuerange());
    }
    if (from.has_actionrange()) {
      set_actionrange(from.actionrange());
    }
    if (from.has_wakeupradius()) {
      set_wakeupradius(from.wakeupradius());
    }
    if (from.has_isaiworkwhennobody()) {
      set_isaiworkwhennobody(from.isaiworkwhennobody());
    }
    if (from.has_borneffectaidelay()) {
      set_borneffectaidelay(from.borneffectaidelay());
    }
    if (from.has_initskills()) {
      set_initskills(from.initskills());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void aiai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void aiai::CopyFrom(const aiai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool aiai::IsInitialized() const {

  return true;
}

void aiai::Swap(aiai* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(deadhateremain_, other->deadhateremain_);
    std::swap(invisibleremain_, other->invisibleremain_);
    std::swap(isactive_, other->isactive_);
    std::swap(returntype_, other->returntype_);
    std::swap(view_, other->view_);
    std::swap(isattackedshowoff_, other->isattackedshowoff_);
    std::swap(pursuerange_, other->pursuerange_);
    std::swap(actionrange_, other->actionrange_);
    std::swap(wakeupradius_, other->wakeupradius_);
    std::swap(isaiworkwhennobody_, other->isaiworkwhennobody_);
    std::swap(borneffectaidelay_, other->borneffectaidelay_);
    std::swap(initskills_, other->initskills_);
    hp_.Swap(&other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata aiai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = aiai_descriptor_;
  metadata.reflection = aiai_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_aiai::kAiaiListFieldNumber;
#endif  // !_MSC_VER

Sheet_aiai::Sheet_aiai()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_aiai::InitAsDefaultInstance() {
}

Sheet_aiai::Sheet_aiai(const Sheet_aiai& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_aiai::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_aiai::~Sheet_aiai() {
  SharedDtor();
}

void Sheet_aiai::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_aiai::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_aiai::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_aiai_descriptor_;
}

const Sheet_aiai& Sheet_aiai::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ai_2eproto();
  return *default_instance_;
}

Sheet_aiai* Sheet_aiai::default_instance_ = NULL;

Sheet_aiai* Sheet_aiai::New() const {
  return new Sheet_aiai;
}

void Sheet_aiai::Clear() {
  aiai_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_aiai::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.aiai aiai_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aiai_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aiai_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aiai_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_aiai::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.aiai aiai_List = 1;
  for (int i = 0; i < this->aiai_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aiai_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_aiai::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.aiai aiai_List = 1;
  for (int i = 0; i < this->aiai_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aiai_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_aiai::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.aiai aiai_List = 1;
  total_size += 1 * this->aiai_list_size();
  for (int i = 0; i < this->aiai_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aiai_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_aiai::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_aiai* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_aiai*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_aiai::MergeFrom(const Sheet_aiai& from) {
  GOOGLE_CHECK_NE(&from, this);
  aiai_list_.MergeFrom(from.aiai_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_aiai::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_aiai::CopyFrom(const Sheet_aiai& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_aiai::IsInitialized() const {

  return true;
}

void Sheet_aiai::Swap(Sheet_aiai* other) {
  if (other != this) {
    aiai_list_.Swap(&other->aiai_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_aiai::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_aiai_descriptor_;
  metadata.reflection = Sheet_aiai_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
