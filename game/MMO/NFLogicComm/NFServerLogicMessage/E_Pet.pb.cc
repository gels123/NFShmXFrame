// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Pet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Pet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_PetDisplayMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDisplayMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAttributetpyeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAttributetpyeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetAttributetpye_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetAttributetpye_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetLvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetLvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetLvexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetLvexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAdvancelvAdvanceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAdvancelvAdvanceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarupUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarupUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEggPetDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEggPetDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetEgg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetEgg_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDecomposeDecomposeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDecomposeDecomposeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetDecompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetDecompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetDecompose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetDecompose_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetFettersAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetFettersAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetFetters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetFetters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetFetters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetFetters_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetPetequipActDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetPetequipActDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetPetequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetPetequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetPetequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetPetequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEquipvalueAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEquipvalueAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEquipvalueExtraDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEquipvalueExtraDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetEquipvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetEquipvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetEquipvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetEquipvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarvalueAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarvalueAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarvalueEquipDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarvalueEquipDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStarvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStarvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetStarvalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetStarvalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetWraithsAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetWraithsAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetWraithsAttributebctDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetWraithsAttributebctDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetWraiths_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetWraiths_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetWraiths_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetWraiths_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetWraithslvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetWraithslvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetWraithslv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetWraithslv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetWraithslv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetWraithslv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetSmeltItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetSmeltItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetSmelt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetSmelt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetSmelt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetSmelt_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetRefineconversion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetRefineconversion_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetRefineconversion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetRefineconversion_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStoveStoveDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStoveStoveDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetStove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetStove_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetStove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetStove_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetSuitAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetSuitAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetSuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetSuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetConstMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetConstMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetConst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetConst_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetTopAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetTopAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetTop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetTop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetTopitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetTopitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetTopitem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetTopitem_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetPrivilegePrivilegeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetPrivilegePrivilegeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_PetPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_PetPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_PetPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_PetPrivilege_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fPet_2eproto() {
  protobuf_AddDesc_E_5fPet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Pet.proto");
  GOOGLE_CHECK(file != NULL);
  E_PetDisplayMaterialDesc_descriptor_ = file->message_type(0);
  static const int E_PetDisplayMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, m_id_),
  };
  E_PetDisplayMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDisplayMaterialDesc_descriptor_,
      E_PetDisplayMaterialDesc::default_instance_,
      E_PetDisplayMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplayMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDisplayMaterialDesc));
  E_PetDisplay_descriptor_ = file->message_type(1);
  static const int E_PetDisplay_offsets_[35] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_isstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_exclusiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_passiveskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growatt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_activeparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growattparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandarda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandardb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstandard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_growstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_advanceattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_advancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_pettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_pettagskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starllimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_staritem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_starpetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_fettersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_suit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, m_material_),
  };
  E_PetDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDisplay_descriptor_,
      E_PetDisplay::default_instance_,
      E_PetDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDisplay));
  Sheet_PetDisplay_descriptor_ = file->message_type(2);
  static const int Sheet_PetDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, e_petdisplay_list_),
  };
  Sheet_PetDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetDisplay_descriptor_,
      Sheet_PetDisplay::default_instance_,
      Sheet_PetDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetDisplay));
  E_PetAttributetpyeAttributeDesc_descriptor_ = file->message_type(3);
  static const int E_PetAttributetpyeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, m_type_),
  };
  E_PetAttributetpyeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAttributetpyeAttributeDesc_descriptor_,
      E_PetAttributetpyeAttributeDesc::default_instance_,
      E_PetAttributetpyeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpyeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAttributetpyeAttributeDesc));
  E_PetAttributetpye_descriptor_ = file->message_type(4);
  static const int E_PetAttributetpye_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_tpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, m_attribute_),
  };
  E_PetAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAttributetpye_descriptor_,
      E_PetAttributetpye::default_instance_,
      E_PetAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAttributetpye));
  Sheet_PetAttributetpye_descriptor_ = file->message_type(5);
  static const int Sheet_PetAttributetpye_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, e_petattributetpye_list_),
  };
  Sheet_PetAttributetpye_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetAttributetpye_descriptor_,
      Sheet_PetAttributetpye::default_instance_,
      Sheet_PetAttributetpye_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAttributetpye, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetAttributetpye));
  E_PetLvexp_descriptor_ = file->message_type(6);
  static const int E_PetLvexp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, m_exp_),
  };
  E_PetLvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetLvexp_descriptor_,
      E_PetLvexp::default_instance_,
      E_PetLvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetLvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetLvexp));
  Sheet_PetLvexp_descriptor_ = file->message_type(7);
  static const int Sheet_PetLvexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, e_petlvexp_list_),
  };
  Sheet_PetLvexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetLvexp_descriptor_,
      Sheet_PetLvexp::default_instance_,
      Sheet_PetLvexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetLvexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetLvexp));
  E_PetAdvancelvAdvanceDesc_descriptor_ = file->message_type(8);
  static const int E_PetAdvancelvAdvanceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, m_type_),
  };
  E_PetAdvancelvAdvanceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAdvancelvAdvanceDesc_descriptor_,
      E_PetAdvancelvAdvanceDesc::default_instance_,
      E_PetAdvancelvAdvanceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelvAdvanceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAdvancelvAdvanceDesc));
  E_PetAdvancelv_descriptor_ = file->message_type(9);
  static const int E_PetAdvancelv_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advanceitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advancenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, m_advance_),
  };
  E_PetAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetAdvancelv_descriptor_,
      E_PetAdvancelv::default_instance_,
      E_PetAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetAdvancelv));
  Sheet_PetAdvancelv_descriptor_ = file->message_type(10);
  static const int Sheet_PetAdvancelv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, e_petadvancelv_list_),
  };
  Sheet_PetAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetAdvancelv_descriptor_,
      Sheet_PetAdvancelv::default_instance_,
      Sheet_PetAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetAdvancelv));
  E_PetStarupUpattributeDesc_descriptor_ = file->message_type(11);
  static const int E_PetStarupUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, m_type_),
  };
  E_PetStarupUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarupUpattributeDesc_descriptor_,
      E_PetStarupUpattributeDesc::default_instance_,
      E_PetStarupUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarupUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarupUpattributeDesc));
  E_PetStarup_descriptor_ = file->message_type(12);
  static const int E_PetStarup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_activeskillidlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, m_upattribute_),
  };
  E_PetStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarup_descriptor_,
      E_PetStarup::default_instance_,
      E_PetStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarup));
  Sheet_PetStarup_descriptor_ = file->message_type(13);
  static const int Sheet_PetStarup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, e_petstarup_list_),
  };
  Sheet_PetStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetStarup_descriptor_,
      Sheet_PetStarup::default_instance_,
      Sheet_PetStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetStarup));
  E_PetEggPetDesc_descriptor_ = file->message_type(14);
  static const int E_PetEggPetDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, m_rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, m_id_),
  };
  E_PetEggPetDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEggPetDesc_descriptor_,
      E_PetEggPetDesc::default_instance_,
      E_PetEggPetDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEggPetDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEggPetDesc));
  E_PetEgg_descriptor_ = file->message_type(15);
  static const int E_PetEgg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, m_pet_),
  };
  E_PetEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEgg_descriptor_,
      E_PetEgg::default_instance_,
      E_PetEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEgg));
  Sheet_PetEgg_descriptor_ = file->message_type(16);
  static const int Sheet_PetEgg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, e_petegg_list_),
  };
  Sheet_PetEgg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetEgg_descriptor_,
      Sheet_PetEgg::default_instance_,
      Sheet_PetEgg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEgg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetEgg));
  E_PetDecomposeDecomposeDesc_descriptor_ = file->message_type(17);
  static const int E_PetDecomposeDecomposeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, m_boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, m_type_),
  };
  E_PetDecomposeDecomposeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDecomposeDecomposeDesc_descriptor_,
      E_PetDecomposeDecomposeDesc::default_instance_,
      E_PetDecomposeDecomposeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecomposeDecomposeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDecomposeDecomposeDesc));
  E_PetDecompose_descriptor_ = file->message_type(18);
  static const int E_PetDecompose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, m_decompose_),
  };
  E_PetDecompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetDecompose_descriptor_,
      E_PetDecompose::default_instance_,
      E_PetDecompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetDecompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetDecompose));
  Sheet_PetDecompose_descriptor_ = file->message_type(19);
  static const int Sheet_PetDecompose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, e_petdecompose_list_),
  };
  Sheet_PetDecompose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetDecompose_descriptor_,
      Sheet_PetDecompose::default_instance_,
      Sheet_PetDecompose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetDecompose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetDecompose));
  E_PetFettersAttributeDesc_descriptor_ = file->message_type(20);
  static const int E_PetFettersAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, m_type_),
  };
  E_PetFettersAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetFettersAttributeDesc_descriptor_,
      E_PetFettersAttributeDesc::default_instance_,
      E_PetFettersAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFettersAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetFettersAttributeDesc));
  E_PetFetters_descriptor_ = file->message_type(21);
  static const int E_PetFetters_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_petid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, m_atctive_skillid_),
  };
  E_PetFetters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetFetters_descriptor_,
      E_PetFetters::default_instance_,
      E_PetFetters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetFetters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetFetters));
  Sheet_PetFetters_descriptor_ = file->message_type(22);
  static const int Sheet_PetFetters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, e_petfetters_list_),
  };
  Sheet_PetFetters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetFetters_descriptor_,
      Sheet_PetFetters::default_instance_,
      Sheet_PetFetters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetFetters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetFetters));
  E_PetPetequipActDesc_descriptor_ = file->message_type(23);
  static const int E_PetPetequipActDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequipActDesc, m_mun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequipActDesc, m_time_),
  };
  E_PetPetequipActDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetPetequipActDesc_descriptor_,
      E_PetPetequipActDesc::default_instance_,
      E_PetPetequipActDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequipActDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequipActDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetPetequipActDesc));
  E_PetPetequip_descriptor_ = file->message_type(24);
  static const int E_PetPetequip_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_qeuiditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_equipqualitymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_equipmodelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_forging_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, m_act_),
  };
  E_PetPetequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetPetequip_descriptor_,
      E_PetPetequip::default_instance_,
      E_PetPetequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPetequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetPetequip));
  Sheet_PetPetequip_descriptor_ = file->message_type(25);
  static const int Sheet_PetPetequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPetequip, e_petpetequip_list_),
  };
  Sheet_PetPetequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetPetequip_descriptor_,
      Sheet_PetPetequip::default_instance_,
      Sheet_PetPetequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPetequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPetequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetPetequip));
  E_PetEquipvalueAttributeDesc_descriptor_ = file->message_type(26);
  static const int E_PetEquipvalueAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueAttributeDesc, m_type_),
  };
  E_PetEquipvalueAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEquipvalueAttributeDesc_descriptor_,
      E_PetEquipvalueAttributeDesc::default_instance_,
      E_PetEquipvalueAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEquipvalueAttributeDesc));
  E_PetEquipvalueExtraDesc_descriptor_ = file->message_type(27);
  static const int E_PetEquipvalueExtraDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueExtraDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueExtraDesc, m_type_),
  };
  E_PetEquipvalueExtraDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEquipvalueExtraDesc_descriptor_,
      E_PetEquipvalueExtraDesc::default_instance_,
      E_PetEquipvalueExtraDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueExtraDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalueExtraDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEquipvalueExtraDesc));
  E_PetEquipvalue_descriptor_ = file->message_type(28);
  static const int E_PetEquipvalue_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_equipvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_equiplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_winprob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_equipitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_equipmun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_failmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, m_extra_),
  };
  E_PetEquipvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetEquipvalue_descriptor_,
      E_PetEquipvalue::default_instance_,
      E_PetEquipvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetEquipvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetEquipvalue));
  Sheet_PetEquipvalue_descriptor_ = file->message_type(29);
  static const int Sheet_PetEquipvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEquipvalue, e_petequipvalue_list_),
  };
  Sheet_PetEquipvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetEquipvalue_descriptor_,
      Sheet_PetEquipvalue::default_instance_,
      Sheet_PetEquipvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEquipvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetEquipvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetEquipvalue));
  E_PetStarvalueAttributeDesc_descriptor_ = file->message_type(30);
  static const int E_PetStarvalueAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueAttributeDesc, m_type_),
  };
  E_PetStarvalueAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarvalueAttributeDesc_descriptor_,
      E_PetStarvalueAttributeDesc::default_instance_,
      E_PetStarvalueAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarvalueAttributeDesc));
  E_PetStarvalueEquipDesc_descriptor_ = file->message_type(31);
  static const int E_PetStarvalueEquipDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueEquipDesc, m_mun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueEquipDesc, m_item_),
  };
  E_PetStarvalueEquipDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarvalueEquipDesc_descriptor_,
      E_PetStarvalueEquipDesc::default_instance_,
      E_PetStarvalueEquipDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueEquipDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalueEquipDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarvalueEquipDesc));
  E_PetStarvalue_descriptor_ = file->message_type(32);
  static const int E_PetStarvalue_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_starvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_advance_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, m_equip_),
  };
  E_PetStarvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStarvalue_descriptor_,
      E_PetStarvalue::default_instance_,
      E_PetStarvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStarvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStarvalue));
  Sheet_PetStarvalue_descriptor_ = file->message_type(33);
  static const int Sheet_PetStarvalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarvalue, e_petstarvalue_list_),
  };
  Sheet_PetStarvalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetStarvalue_descriptor_,
      Sheet_PetStarvalue::default_instance_,
      Sheet_PetStarvalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarvalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStarvalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetStarvalue));
  E_PetWraithsAttributeDesc_descriptor_ = file->message_type(34);
  static const int E_PetWraithsAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributeDesc, m_type_),
  };
  E_PetWraithsAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetWraithsAttributeDesc_descriptor_,
      E_PetWraithsAttributeDesc::default_instance_,
      E_PetWraithsAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetWraithsAttributeDesc));
  E_PetWraithsAttributebctDesc_descriptor_ = file->message_type(35);
  static const int E_PetWraithsAttributebctDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributebctDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributebctDesc, m_value_),
  };
  E_PetWraithsAttributebctDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetWraithsAttributebctDesc_descriptor_,
      E_PetWraithsAttributebctDesc::default_instance_,
      E_PetWraithsAttributebctDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributebctDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithsAttributebctDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetWraithsAttributebctDesc));
  E_PetWraiths_descriptor_ = file->message_type(36);
  static const int E_PetWraiths_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_affix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_propertylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_propertytop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, m_attributebct_),
  };
  E_PetWraiths_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetWraiths_descriptor_,
      E_PetWraiths::default_instance_,
      E_PetWraiths_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraiths, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetWraiths));
  Sheet_PetWraiths_descriptor_ = file->message_type(37);
  static const int Sheet_PetWraiths_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraiths, e_petwraiths_list_),
  };
  Sheet_PetWraiths_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetWraiths_descriptor_,
      Sheet_PetWraiths::default_instance_,
      Sheet_PetWraiths_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraiths, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraiths, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetWraiths));
  E_PetWraithslvAttributeDesc_descriptor_ = file->message_type(38);
  static const int E_PetWraithslvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslvAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslvAttributeDesc, m_type_),
  };
  E_PetWraithslvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetWraithslvAttributeDesc_descriptor_,
      E_PetWraithslvAttributeDesc::default_instance_,
      E_PetWraithslvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetWraithslvAttributeDesc));
  E_PetWraithslv_descriptor_ = file->message_type(39);
  static const int E_PetWraithslv_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_advancelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_wraithsitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_wraithsmun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_lvexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, m_attribute_),
  };
  E_PetWraithslv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetWraithslv_descriptor_,
      E_PetWraithslv::default_instance_,
      E_PetWraithslv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetWraithslv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetWraithslv));
  Sheet_PetWraithslv_descriptor_ = file->message_type(40);
  static const int Sheet_PetWraithslv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraithslv, e_petwraithslv_list_),
  };
  Sheet_PetWraithslv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetWraithslv_descriptor_,
      Sheet_PetWraithslv::default_instance_,
      Sheet_PetWraithslv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraithslv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetWraithslv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetWraithslv));
  E_PetSmeltItemDesc_descriptor_ = file->message_type(41);
  static const int E_PetSmeltItemDesc_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, m_maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, m_minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, m_rarerand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, m_id_),
  };
  E_PetSmeltItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetSmeltItemDesc_descriptor_,
      E_PetSmeltItemDesc::default_instance_,
      E_PetSmeltItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmeltItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetSmeltItemDesc));
  E_PetSmelt_descriptor_ = file->message_type(42);
  static const int E_PetSmelt_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_putmun_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_smeltexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_monsternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, m_item_),
  };
  E_PetSmelt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetSmelt_descriptor_,
      E_PetSmelt::default_instance_,
      E_PetSmelt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSmelt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetSmelt));
  Sheet_PetSmelt_descriptor_ = file->message_type(43);
  static const int Sheet_PetSmelt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSmelt, e_petsmelt_list_),
  };
  Sheet_PetSmelt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetSmelt_descriptor_,
      Sheet_PetSmelt::default_instance_,
      Sheet_PetSmelt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSmelt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSmelt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetSmelt));
  E_PetRefineconversion_descriptor_ = file->message_type(44);
  static const int E_PetRefineconversion_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, m_condition_),
  };
  E_PetRefineconversion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetRefineconversion_descriptor_,
      E_PetRefineconversion::default_instance_,
      E_PetRefineconversion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetRefineconversion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetRefineconversion));
  Sheet_PetRefineconversion_descriptor_ = file->message_type(45);
  static const int Sheet_PetRefineconversion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetRefineconversion, e_petrefineconversion_list_),
  };
  Sheet_PetRefineconversion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetRefineconversion_descriptor_,
      Sheet_PetRefineconversion::default_instance_,
      Sheet_PetRefineconversion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetRefineconversion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetRefineconversion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetRefineconversion));
  E_PetStoveStoveDesc_descriptor_ = file->message_type(46);
  static const int E_PetStoveStoveDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStoveStoveDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStoveStoveDesc, m_value_),
  };
  E_PetStoveStoveDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStoveStoveDesc_descriptor_,
      E_PetStoveStoveDesc::default_instance_,
      E_PetStoveStoveDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStoveStoveDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStoveStoveDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStoveStoveDesc));
  E_PetStove_descriptor_ = file->message_type(47);
  static const int E_PetStove_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, m_stove_),
  };
  E_PetStove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetStove_descriptor_,
      E_PetStove::default_instance_,
      E_PetStove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetStove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetStove));
  Sheet_PetStove_descriptor_ = file->message_type(48);
  static const int Sheet_PetStove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStove, e_petstove_list_),
  };
  Sheet_PetStove_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetStove_descriptor_,
      Sheet_PetStove::default_instance_,
      Sheet_PetStove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStove, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetStove, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetStove));
  E_PetSuitAttributeDesc_descriptor_ = file->message_type(49);
  static const int E_PetSuitAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuitAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuitAttributeDesc, m_type_),
  };
  E_PetSuitAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetSuitAttributeDesc_descriptor_,
      E_PetSuitAttributeDesc::default_instance_,
      E_PetSuitAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuitAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuitAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetSuitAttributeDesc));
  E_PetSuit_descriptor_ = file->message_type(50);
  static const int E_PetSuit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_wraithsquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_piece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_resonancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_resonancevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, m_attribute_),
  };
  E_PetSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetSuit_descriptor_,
      E_PetSuit::default_instance_,
      E_PetSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetSuit));
  Sheet_PetSuit_descriptor_ = file->message_type(51);
  static const int Sheet_PetSuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSuit, e_petsuit_list_),
  };
  Sheet_PetSuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetSuit_descriptor_,
      Sheet_PetSuit::default_instance_,
      Sheet_PetSuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetSuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetSuit));
  E_PetConstMaterialDesc_descriptor_ = file->message_type(52);
  static const int E_PetConstMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConstMaterialDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConstMaterialDesc, m_item_),
  };
  E_PetConstMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetConstMaterialDesc_descriptor_,
      E_PetConstMaterialDesc::default_instance_,
      E_PetConstMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConstMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConstMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetConstMaterialDesc));
  E_PetConst_descriptor_ = file->message_type(53);
  static const int E_PetConst_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_solt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, m_material_),
  };
  E_PetConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetConst_descriptor_,
      E_PetConst::default_instance_,
      E_PetConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetConst));
  Sheet_PetConst_descriptor_ = file->message_type(54);
  static const int Sheet_PetConst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetConst, e_petconst_list_),
  };
  Sheet_PetConst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetConst_descriptor_,
      Sheet_PetConst::default_instance_,
      Sheet_PetConst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetConst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetConst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetConst));
  E_PetTopAttributeDesc_descriptor_ = file->message_type(55);
  static const int E_PetTopAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopAttributeDesc, m_type_),
  };
  E_PetTopAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetTopAttributeDesc_descriptor_,
      E_PetTopAttributeDesc::default_instance_,
      E_PetTopAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetTopAttributeDesc));
  E_PetTop_descriptor_ = file->message_type(56);
  static const int E_PetTop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTop, m_toptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTop, m_attribute_),
  };
  E_PetTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetTop_descriptor_,
      E_PetTop::default_instance_,
      E_PetTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetTop));
  Sheet_PetTop_descriptor_ = file->message_type(57);
  static const int Sheet_PetTop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTop, e_pettop_list_),
  };
  Sheet_PetTop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetTop_descriptor_,
      Sheet_PetTop::default_instance_,
      Sheet_PetTop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetTop));
  E_PetTopitem_descriptor_ = file->message_type(58);
  static const int E_PetTopitem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopitem, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopitem, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopitem, m_num_),
  };
  E_PetTopitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetTopitem_descriptor_,
      E_PetTopitem::default_instance_,
      E_PetTopitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetTopitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetTopitem));
  Sheet_PetTopitem_descriptor_ = file->message_type(59);
  static const int Sheet_PetTopitem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTopitem, e_pettopitem_list_),
  };
  Sheet_PetTopitem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetTopitem_descriptor_,
      Sheet_PetTopitem::default_instance_,
      Sheet_PetTopitem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTopitem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetTopitem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetTopitem));
  E_PetPrivilegePrivilegeDesc_descriptor_ = file->message_type(60);
  static const int E_PetPrivilegePrivilegeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilegePrivilegeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilegePrivilegeDesc, m_att_),
  };
  E_PetPrivilegePrivilegeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetPrivilegePrivilegeDesc_descriptor_,
      E_PetPrivilegePrivilegeDesc::default_instance_,
      E_PetPrivilegePrivilegeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilegePrivilegeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilegePrivilegeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetPrivilegePrivilegeDesc));
  E_PetPrivilege_descriptor_ = file->message_type(61);
  static const int E_PetPrivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, m_activate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, m_doubleitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, m_experienceexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, m_privilege_),
  };
  E_PetPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_PetPrivilege_descriptor_,
      E_PetPrivilege::default_instance_,
      E_PetPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_PetPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_PetPrivilege));
  Sheet_PetPrivilege_descriptor_ = file->message_type(62);
  static const int Sheet_PetPrivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPrivilege, e_petprivilege_list_),
  };
  Sheet_PetPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_PetPrivilege_descriptor_,
      Sheet_PetPrivilege::default_instance_,
      Sheet_PetPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_PetPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_PetPrivilege));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fPet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDisplayMaterialDesc_descriptor_, &E_PetDisplayMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDisplay_descriptor_, &E_PetDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetDisplay_descriptor_, &Sheet_PetDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAttributetpyeAttributeDesc_descriptor_, &E_PetAttributetpyeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAttributetpye_descriptor_, &E_PetAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetAttributetpye_descriptor_, &Sheet_PetAttributetpye::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetLvexp_descriptor_, &E_PetLvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetLvexp_descriptor_, &Sheet_PetLvexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAdvancelvAdvanceDesc_descriptor_, &E_PetAdvancelvAdvanceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetAdvancelv_descriptor_, &E_PetAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetAdvancelv_descriptor_, &Sheet_PetAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarupUpattributeDesc_descriptor_, &E_PetStarupUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarup_descriptor_, &E_PetStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetStarup_descriptor_, &Sheet_PetStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEggPetDesc_descriptor_, &E_PetEggPetDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEgg_descriptor_, &E_PetEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetEgg_descriptor_, &Sheet_PetEgg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDecomposeDecomposeDesc_descriptor_, &E_PetDecomposeDecomposeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetDecompose_descriptor_, &E_PetDecompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetDecompose_descriptor_, &Sheet_PetDecompose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetFettersAttributeDesc_descriptor_, &E_PetFettersAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetFetters_descriptor_, &E_PetFetters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetFetters_descriptor_, &Sheet_PetFetters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetPetequipActDesc_descriptor_, &E_PetPetequipActDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetPetequip_descriptor_, &E_PetPetequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetPetequip_descriptor_, &Sheet_PetPetequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEquipvalueAttributeDesc_descriptor_, &E_PetEquipvalueAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEquipvalueExtraDesc_descriptor_, &E_PetEquipvalueExtraDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetEquipvalue_descriptor_, &E_PetEquipvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetEquipvalue_descriptor_, &Sheet_PetEquipvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarvalueAttributeDesc_descriptor_, &E_PetStarvalueAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarvalueEquipDesc_descriptor_, &E_PetStarvalueEquipDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStarvalue_descriptor_, &E_PetStarvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetStarvalue_descriptor_, &Sheet_PetStarvalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetWraithsAttributeDesc_descriptor_, &E_PetWraithsAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetWraithsAttributebctDesc_descriptor_, &E_PetWraithsAttributebctDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetWraiths_descriptor_, &E_PetWraiths::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetWraiths_descriptor_, &Sheet_PetWraiths::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetWraithslvAttributeDesc_descriptor_, &E_PetWraithslvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetWraithslv_descriptor_, &E_PetWraithslv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetWraithslv_descriptor_, &Sheet_PetWraithslv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetSmeltItemDesc_descriptor_, &E_PetSmeltItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetSmelt_descriptor_, &E_PetSmelt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetSmelt_descriptor_, &Sheet_PetSmelt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetRefineconversion_descriptor_, &E_PetRefineconversion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetRefineconversion_descriptor_, &Sheet_PetRefineconversion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStoveStoveDesc_descriptor_, &E_PetStoveStoveDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetStove_descriptor_, &E_PetStove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetStove_descriptor_, &Sheet_PetStove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetSuitAttributeDesc_descriptor_, &E_PetSuitAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetSuit_descriptor_, &E_PetSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetSuit_descriptor_, &Sheet_PetSuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetConstMaterialDesc_descriptor_, &E_PetConstMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetConst_descriptor_, &E_PetConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetConst_descriptor_, &Sheet_PetConst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetTopAttributeDesc_descriptor_, &E_PetTopAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetTop_descriptor_, &E_PetTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetTop_descriptor_, &Sheet_PetTop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetTopitem_descriptor_, &E_PetTopitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetTopitem_descriptor_, &Sheet_PetTopitem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetPrivilegePrivilegeDesc_descriptor_, &E_PetPrivilegePrivilegeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_PetPrivilege_descriptor_, &E_PetPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_PetPrivilege_descriptor_, &Sheet_PetPrivilege::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fPet_2eproto() {
  delete E_PetDisplayMaterialDesc::default_instance_;
  delete E_PetDisplayMaterialDesc_reflection_;
  delete E_PetDisplay::default_instance_;
  delete E_PetDisplay_reflection_;
  delete Sheet_PetDisplay::default_instance_;
  delete Sheet_PetDisplay_reflection_;
  delete E_PetAttributetpyeAttributeDesc::default_instance_;
  delete E_PetAttributetpyeAttributeDesc_reflection_;
  delete E_PetAttributetpye::default_instance_;
  delete E_PetAttributetpye_reflection_;
  delete Sheet_PetAttributetpye::default_instance_;
  delete Sheet_PetAttributetpye_reflection_;
  delete E_PetLvexp::default_instance_;
  delete E_PetLvexp_reflection_;
  delete Sheet_PetLvexp::default_instance_;
  delete Sheet_PetLvexp_reflection_;
  delete E_PetAdvancelvAdvanceDesc::default_instance_;
  delete E_PetAdvancelvAdvanceDesc_reflection_;
  delete E_PetAdvancelv::default_instance_;
  delete E_PetAdvancelv_reflection_;
  delete Sheet_PetAdvancelv::default_instance_;
  delete Sheet_PetAdvancelv_reflection_;
  delete E_PetStarupUpattributeDesc::default_instance_;
  delete E_PetStarupUpattributeDesc_reflection_;
  delete E_PetStarup::default_instance_;
  delete E_PetStarup_reflection_;
  delete Sheet_PetStarup::default_instance_;
  delete Sheet_PetStarup_reflection_;
  delete E_PetEggPetDesc::default_instance_;
  delete E_PetEggPetDesc_reflection_;
  delete E_PetEgg::default_instance_;
  delete E_PetEgg_reflection_;
  delete Sheet_PetEgg::default_instance_;
  delete Sheet_PetEgg_reflection_;
  delete E_PetDecomposeDecomposeDesc::default_instance_;
  delete E_PetDecomposeDecomposeDesc_reflection_;
  delete E_PetDecompose::default_instance_;
  delete E_PetDecompose_reflection_;
  delete Sheet_PetDecompose::default_instance_;
  delete Sheet_PetDecompose_reflection_;
  delete E_PetFettersAttributeDesc::default_instance_;
  delete E_PetFettersAttributeDesc_reflection_;
  delete E_PetFetters::default_instance_;
  delete E_PetFetters_reflection_;
  delete Sheet_PetFetters::default_instance_;
  delete Sheet_PetFetters_reflection_;
  delete E_PetPetequipActDesc::default_instance_;
  delete E_PetPetequipActDesc_reflection_;
  delete E_PetPetequip::default_instance_;
  delete E_PetPetequip_reflection_;
  delete Sheet_PetPetequip::default_instance_;
  delete Sheet_PetPetequip_reflection_;
  delete E_PetEquipvalueAttributeDesc::default_instance_;
  delete E_PetEquipvalueAttributeDesc_reflection_;
  delete E_PetEquipvalueExtraDesc::default_instance_;
  delete E_PetEquipvalueExtraDesc_reflection_;
  delete E_PetEquipvalue::default_instance_;
  delete E_PetEquipvalue_reflection_;
  delete Sheet_PetEquipvalue::default_instance_;
  delete Sheet_PetEquipvalue_reflection_;
  delete E_PetStarvalueAttributeDesc::default_instance_;
  delete E_PetStarvalueAttributeDesc_reflection_;
  delete E_PetStarvalueEquipDesc::default_instance_;
  delete E_PetStarvalueEquipDesc_reflection_;
  delete E_PetStarvalue::default_instance_;
  delete E_PetStarvalue_reflection_;
  delete Sheet_PetStarvalue::default_instance_;
  delete Sheet_PetStarvalue_reflection_;
  delete E_PetWraithsAttributeDesc::default_instance_;
  delete E_PetWraithsAttributeDesc_reflection_;
  delete E_PetWraithsAttributebctDesc::default_instance_;
  delete E_PetWraithsAttributebctDesc_reflection_;
  delete E_PetWraiths::default_instance_;
  delete E_PetWraiths_reflection_;
  delete Sheet_PetWraiths::default_instance_;
  delete Sheet_PetWraiths_reflection_;
  delete E_PetWraithslvAttributeDesc::default_instance_;
  delete E_PetWraithslvAttributeDesc_reflection_;
  delete E_PetWraithslv::default_instance_;
  delete E_PetWraithslv_reflection_;
  delete Sheet_PetWraithslv::default_instance_;
  delete Sheet_PetWraithslv_reflection_;
  delete E_PetSmeltItemDesc::default_instance_;
  delete E_PetSmeltItemDesc_reflection_;
  delete E_PetSmelt::default_instance_;
  delete E_PetSmelt_reflection_;
  delete Sheet_PetSmelt::default_instance_;
  delete Sheet_PetSmelt_reflection_;
  delete E_PetRefineconversion::default_instance_;
  delete E_PetRefineconversion_reflection_;
  delete Sheet_PetRefineconversion::default_instance_;
  delete Sheet_PetRefineconversion_reflection_;
  delete E_PetStoveStoveDesc::default_instance_;
  delete E_PetStoveStoveDesc_reflection_;
  delete E_PetStove::default_instance_;
  delete E_PetStove_reflection_;
  delete Sheet_PetStove::default_instance_;
  delete Sheet_PetStove_reflection_;
  delete E_PetSuitAttributeDesc::default_instance_;
  delete E_PetSuitAttributeDesc_reflection_;
  delete E_PetSuit::default_instance_;
  delete E_PetSuit_reflection_;
  delete Sheet_PetSuit::default_instance_;
  delete Sheet_PetSuit_reflection_;
  delete E_PetConstMaterialDesc::default_instance_;
  delete E_PetConstMaterialDesc_reflection_;
  delete E_PetConst::default_instance_;
  delete E_PetConst_reflection_;
  delete Sheet_PetConst::default_instance_;
  delete Sheet_PetConst_reflection_;
  delete E_PetTopAttributeDesc::default_instance_;
  delete E_PetTopAttributeDesc_reflection_;
  delete E_PetTop::default_instance_;
  delete E_PetTop_reflection_;
  delete Sheet_PetTop::default_instance_;
  delete Sheet_PetTop_reflection_;
  delete E_PetTopitem::default_instance_;
  delete E_PetTopitem_reflection_;
  delete Sheet_PetTopitem::default_instance_;
  delete Sheet_PetTopitem_reflection_;
  delete E_PetPrivilegePrivilegeDesc::default_instance_;
  delete E_PetPrivilegePrivilegeDesc_reflection_;
  delete E_PetPrivilege::default_instance_;
  delete E_PetPrivilege_reflection_;
  delete Sheet_PetPrivilege::default_instance_;
  delete Sheet_PetPrivilege_reflection_;
}

void protobuf_AddDesc_E_5fPet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013E_Pet.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"N\n\030E_PetDisplayMaterialDesc\022\034\n\005m_"
    "exp\030\001 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022\024\n\004m_id\030\002 \001(\003B\006"
    "\302\377\024\002ID\"\207\014\n\014E_PetDisplay\022\032\n\004m_id\030\001 \001(\003B\014\302"
    "\377\024\010\345\244\226\350\247\202ID\022\036\n\006m_name\030\002 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220"
    "\301\024@\022#\n\tm_quality\030\003 \001(\005B\020\302\377\024\014\345\256\240\347\211\251\345\223\201\350\264\250"
    "\022%\n\010m_isStar\030\004 \001(\005B\023\302\377\024\017\346\230\257\345\220\246\345\217\257\345\215\207\346\230\237\022"
    "\037\n\007m_grade\030\005 \001(\tB\016\302\377\024\006\350\257\204\347\272\247\220\301\024@\022$\n\013m_mo"
    "nsterId\030\006 \001(\003B\017\302\377\024\013\346\200\252\347\211\251\350\241\250ID\022)\n\017m_acti"
    "veSkillID\030\007 \001(\005B\020\302\377\024\014\344\270\273\345\212\250\346\212\200\350\203\275\0220\n\022m_e"
    "xclusiveSkillID\030\010 \001(\tB\024\302\377\024\014\344\270\223\345\261\236\346\212\200\350\203\275\220"
    "\301\024@\022.\n\020m_passiveSkillID\030\t \001(\tB\024\302\377\024\014\350\242\253\345\212"
    "\250\346\212\200\350\203\275\220\301\024@\0227\n\021m_activeAttribute\030\n \001(\005B\034"
    "\302\377\024\030\345\210\235\345\247\213\350\216\267\345\276\227\345\261\236\346\200\247\346\250\241\346\235\277\022)\n\tm_growAt"
    "t\030\013 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247\346\250\241\346\235\277\022+\n\016m_act"
    "iveParama\030\014 \001(\002B\023\302\377\024\017\345\210\235\345\200\274\345\200\274\347\263\273\346\225\260\022/\n\017"
    "m_growAttParama\030\r \001(\002B\026\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247\347"
    "\263\273\346\225\260\022-\n\017m_growStandardA\030\016 \001(\002B\024\302\377\024\020\346\240\207\345"
    "\207\206\345\200\274\347\263\273\346\225\260A\022-\n\017m_growStandardB\030\017 \001(\002B\024\302"
    "\377\024\020\346\240\207\345\207\206\345\200\274\347\263\273\346\225\260B\022+\n\016m_growStandard\030\020 "
    "\001(\002B\023\302\377\024\017\350\265\204\350\264\250\346\240\207\345\207\206\345\200\274\022)\n\tm_growMin\030\021 "
    "\001(\002B\026\302\377\024\022\345\210\235\345\247\213\350\265\204\350\264\250\344\270\213\351\231\220\022)\n\tm_growMax"
    "\030\022 \001(\002B\026\302\377\024\022\345\210\235\345\247\213\350\265\204\350\264\250\344\270\212\351\231\220\0220\n\nm_grow"
    "Star\030\023 \001(\002B\034\302\377\024\030\345\215\207\346\230\237\350\265\204\350\264\250\346\217\220\345\215\207\347\263\273\346\225\260"
    "\022/\n\022m_advanceAttribute\030\024 \001(\005B\023\302\377\024\017\350\277\233\351\230\266"
    "\345\200\274\346\250\241\346\235\277\022\'\n\rm_advanceType\030\025 \001(\005B\020\302\377\024\014\350\277"
    "\233\351\230\266\347\261\273\345\236\213\022\"\n\010m_petTag\030\026 \001(\005B\020\302\377\024\014\346\230\257\345\220\246"
    "\347\245\236\345\256\240\022+\n\rm_petTagSkill\030\027 \001(\tB\024\302\377\024\014\347\245\236\345\256"
    "\240\346\212\200\350\203\275\220\301\024@\022/\n\017m_starAttribute\030\030 \001(\005B\026\302\377"
    "\024\022\345\215\207\346\230\237\345\261\236\346\200\247\346\250\241\346\235\277\022-\n\rm_starPercent\030\031 "
    "\001(\005B\026\302\377\024\022\345\215\207\346\230\237\345\261\236\346\200\247\345\212\240\346\210\220\022&\n\014m_starLli"
    "mit\030\032 \001(\005B\020\302\377\024\014\345\215\207\346\230\237\344\270\212\351\231\220\022$\n\nm_starIte"
    "m\030\033 \001(\003B\020\302\377\024\014\345\215\207\346\230\237\351\201\223\345\205\267\022-\n\tm_starNum\030\034"
    " \001(\tB\032\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024@\022\'\n\013m_st"
    "arPetID\030\035 \001(\003B\022\302\377\024\016\345\215\207\346\230\237\345\256\240\347\211\251ID\0220\n\014m_s"
    "tarPetNum\030\036 \001(\tB\032\302\377\024\022\345\215\207\346\230\237\345\256\240\347\211\251\346\225\260\351\207\217\220"
    "\301\024@\022\"\n\010m_weapon\030\037 \001(\005B\020\302\377\024\014\344\270\223\345\261\236\346\255\246\345\231\250\022"
    ".\n\017m_upAttributeId\030  \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346"
    "\200\247\347\273\204ID\022!\n\013m_fettersID\030! \001(\005B\014\302\377\024\010\347\276\201\347\273\212"
    "ID\022\036\n\006m_suit\030\" \001(\tB\016\302\377\024\006\345\245\227\350\243\205\220\301\024@\022L\n\nm_"
    "material\030# \003(\0132\".proto_ff.E_PetDisplayMa"
    "terialDescB\024\302\377\024\014\345\215\207\347\272\247\346\235\220\346\226\231\210\301\024\003\"K\n\020Shee"
    "t_PetDisplay\0227\n\021E_PetDisplay_List\030\001 \003(\0132"
    "\026.proto_ff.E_PetDisplayB\004\210\301\024@\"S\n\037E_PetAt"
    "tributetpyeAttributeDesc\022\030\n\007m_value\030\001 \001("
    "\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002ID\"\242\001\n\022E"
    "_PetAttributetpye\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002id\022"
    " \n\006m_tpye\030\002 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022T\n\013m_a"
    "ttribute\030\003 \003(\0132).proto_ff.E_PetAttribute"
    "tpyeAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\""
    "^\n\026Sheet_PetAttributetpye\022D\n\027E_PetAttrib"
    "utetpye_List\030\001 \003(\0132\034.proto_ff.E_PetAttri"
    "butetpyeB\005\210\301\024\200\001\"G\n\nE_PetLvexp\022\030\n\004m_id\030\001 "
    "\001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\037\n\005m_exp\030\002 \001(\003B\020\302\377\024\014\345\215\207\347"
    "\272\247\347\273\217\351\252\214\"F\n\016Sheet_PetLvexp\0224\n\017E_PetLvexp"
    "_List\030\001 \003(\0132\024.proto_ff.E_PetLvexpB\005\210\301\024\200\004"
    "\"T\n\031E_PetAdvancelvAdvanceDesc\022\033\n\007m_param"
    "\030\001 \001(\002B\n\302\377\024\006\347\263\273\346\225\260\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006"
    "\347\261\273\345\236\213\"\311\001\n\016E_PetAdvancelv\022\030\n\004m_id\030\001 \001(\005B"
    "\n\302\377\024\006\347\255\211\347\272\247\022-\n\rm_advanceItem\030\002 \001(\005B\026\302\377\024\022"
    "\350\277\233\351\230\266\346\266\210\350\200\227\351\201\223\345\205\267\022&\n\014m_advanceNum\030\003 \001(\005"
    "B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022F\n\tm_advance\030\004 \003(\0132#."
    "proto_ff.E_PetAdvancelvAdvanceDescB\016\302\377\024\006"
    "\350\277\233\351\230\266\210\301\024\002\"R\n\022Sheet_PetAdvancelv\022<\n\023E_Pe"
    "tAdvancelv_List\030\001 \003(\0132\030.proto_ff.E_PetAd"
    "vancelvB\005\210\301\024\200\001\"N\n\032E_PetStarupUpattribute"
    "Desc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type"
    "\030\002 \001(\005B\006\302\377\024\002ID\"\236\002\n\013E_PetStarup\022\032\n\004m_ID\030\001"
    " \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022.\n\017m_upAttributeId\030\002 "
    "\001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022\034\n\010m_starID\030\003"
    " \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\037\n\tm_skillID\030\004 \001(\005B\014\302\377\024"
    "\010\346\212\200\350\203\275id\0221\n\021m_activeSkillIDLv\030\005 \001(\005B\026\302\377"
    "\024\022\344\270\273\345\212\250\346\212\200\350\203\275\347\255\211\347\272\247\022Q\n\rm_upAttribute\030\006 "
    "\003(\0132$.proto_ff.E_PetStarupUpattributeDes"
    "cB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\006\"H\n\017Sheet_PetStar"
    "up\0225\n\020E_PetStarup_List\030\001 \003(\0132\025.proto_ff."
    "E_PetStarupB\004\210\301\024@\"C\n\017E_PetEggPetDesc\022\032\n\006"
    "m_rand\030\001 \001(\005B\n\302\377\024\006\346\246\202\347\216\207\022\024\n\004m_id\030\002 \001(\005B\006"
    "\302\377\024\002ID\"\213\001\n\010E_PetEgg\022#\n\004m_id\030\001 \001(\005B\025\302\377\024\021\345"
    "\256\240\347\211\251\350\233\213\351\201\223\345\205\267ID\022 \n\006m_time\030\002 \001(\005B\020\302\377\024\014\345\255"
    "\265\345\214\226\346\227\266\351\227\264\0228\n\005m_pet\030\003 \003(\0132\031.proto_ff.E_P"
    "etEggPetDescB\016\302\377\024\006\345\256\240\347\211\251\210\301\024\r\"\?\n\014Sheet_Pe"
    "tEgg\022/\n\rE_PetEgg_List\030\001 \003(\0132\022.proto_ff.E"
    "_PetEggB\004\210\301\024@\"S\n\033E_PetDecomposeDecompose"
    "Desc\022\032\n\007m_boxID\030\001 \001(\005B\t\302\377\024\005boxID\022\030\n\006m_ty"
    "pe\030\002 \001(\005B\010\302\377\024\004type\"\235\001\n\016E_PetDecompose\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_quality\030\002 \001(\005B\020"
    "\302\377\024\014\345\256\240\347\211\251\345\223\201\350\264\250\022P\n\013m_decompose\030\003 \003(\0132%."
    "proto_ff.E_PetDecomposeDecomposeDescB\024\302\377"
    "\024\014\345\210\206\350\247\243\347\261\273\345\236\213\210\301\024\004\"Q\n\022Sheet_PetDecompose"
    "\022;\n\023E_PetDecompose_List\030\001 \003(\0132\030.proto_ff"
    ".E_PetDecomposeB\004\210\301\024\010\"M\n\031E_PetFettersAtt"
    "ributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006"
    "m_type\030\002 \001(\005B\006\302\377\024\002ID\"\363\001\n\014E_PetFetters\022\024\n"
    "\004m_id\030\001 \001(\005B\006\302\377\024\002id\022#\n\tm_quality\030\002 \001(\005B\020"
    "\302\377\024\014\347\276\201\347\273\212\345\223\201\350\264\250\022\'\n\007m_petID\030\003 \003(\005B\026\302\377\024\016\347"
    "\276\201\347\273\212\345\256\240\347\211\251ID\210\301\024\003\022N\n\013m_attribute\030\004 \003(\0132#"
    ".proto_ff.E_PetFettersAttributeDescB\024\302\377\024"
    "\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\007\022/\n\021m_atctive_skillID\030\005"
    " \003(\005B\024\302\377\024\014\346\277\200\346\264\273\346\212\200\350\203\275\210\301\024\004\"K\n\020Sheet_PetF"
    "etters\0227\n\021E_PetFetters_List\030\001 \003(\0132\026.prot"
    "o_ff.E_PetFettersB\004\210\301\024\010\"M\n\024E_PetPetequip"
    "ActDesc\022\031\n\005m_Mun\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\032\n\006m_"
    "Time\030\002 \001(\005B\n\302\377\024\006\346\235\220\346\226\231\"\236\003\n\rE_PetPetequip"
    "\022\037\n\005m_pet\030\001 \001(\005B\020\302\377\024\014\345\257\271\345\272\224\345\256\240\347\211\251\022\037\n\tm_o"
    "rderId\030\002 \001(\005B\014\302\377\024\010\346\216\222\345\272\217Id\022\036\n\006m_name\030\003 \001"
    "(\tB\016\302\377\024\006\345\244\207\346\263\250\220\301\024@\022%\n\013m_qeuidItem\030\004 \001(\005B"
    "\020\302\377\024\014\344\270\223\345\261\236\347\211\251\345\223\201\022+\n\021m_equipQualityMin\030\005"
    " \001(\005B\020\302\377\024\014\345\210\235\345\247\213\345\223\201\350\264\250\022*\n\016m_equipModelId"
    "\030\006 \001(\005B\022\302\377\024\016\346\250\241\345\236\213\350\265\204\346\272\220Id\022#\n\tm_forging\030"
    "\007 \001(\005B\020\302\377\024\014\351\224\273\351\200\240\347\261\273\345\236\213\022 \n\006m_star\030\010 \001(\005B"
    "\020\302\377\024\014\345\215\207\346\230\237\347\261\273\345\236\213\022%\n\007m_skill\030\t \001(\tB\024\302\377\024\014"
    "\345\244\251\350\265\213\346\212\200\350\203\275\220\301\024@\022=\n\005m_act\030\n \003(\0132\036.proto_"
    "ff.E_PetPetequipActDescB\016\302\377\024\006\346\277\200\346\264\273\210\301\024\002\""
    "N\n\021Sheet_PetPetequip\0229\n\022E_PetPetequip_Li"
    "st\030\001 \003(\0132\027.proto_ff.E_PetPetequipB\004\210\301\024 \""
    "N\n\034E_PetEquipvalueAttributeDesc\022\030\n\007m_val"
    "ue\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\""
    "J\n\030E_PetEquipvalueExtraDesc\022\030\n\007m_value\030\001"
    " \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"\313\003\n\017"
    "E_PetEquipvalue\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022&\n"
    "\014m_equipValue\030\002 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022\035\n"
    "\tm_equipLv\030\003 \001(\005B\n\302\377\024\006\351\230\266\346\225\260\022 \n\006m_item\030\004"
    " \001(\005B\020\302\377\024\014\351\230\266\346\225\260\347\211\251\345\223\201\022)\n\tm_winProb\030\005 \001("
    "\005B\026\302\377\024\022\351\224\273\351\200\240\346\210\220\345\212\237\346\246\202\347\216\207\022%\n\013m_equipItem"
    "\030\006 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\022$\n\nm_equipMun\030\007"
    " \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022)\n\tm_failMax\030\010 \001("
    "\005B\026\302\377\024\022\351\224\273\351\200\240\344\277\235\345\272\225\346\254\241\346\225\260\022K\n\013m_Attribute"
    "\030\t \003(\0132&.proto_ff.E_PetEquipvalueAttribu"
    "teDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\005\022I\n\007m_extra\030\n \003(\0132"
    "\".proto_ff.E_PetEquipvalueExtraDescB\024\302\377\024"
    "\014\351\242\235\345\244\226\345\261\236\346\200\247\210\301\024\005\"U\n\023Sheet_PetEquipvalue"
    "\022>\n\024E_PetEquipvalue_List\030\001 \003(\0132\031.proto_f"
    "f.E_PetEquipvalueB\005\210\301\024\200\010\"M\n\033E_PetStarval"
    "ueAttributeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200"
    "\274\022\024\n\006m_type\030\002 \001(\005B\004\302\377\024\000\"P\n\027E_PetStarvalu"
    "eEquipDesc\022\031\n\005m_Mun\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\032\n"
    "\006m_Item\030\002 \001(\005B\n\302\377\024\006\346\266\210\350\200\227\"\255\002\n\016E_PetStarv"
    "alue\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022%\n\013m_starValu"
    "e\030\002 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022\034\n\010m_starLv\030\003 "
    "\001(\005B\n\302\377\024\006\346\230\237\347\272\247\022J\n\013m_Attribute\030\004 \003(\0132%.p"
    "roto_ff.E_PetStarvalueAttributeDescB\016\302\377\024"
    "\006\345\261\236\346\200\247\210\301\024\004\0220\n\016m_advance_Type\030\005 \003(\tB\030\302\377\024"
    "\014\351\242\235\345\244\226\345\261\236\346\200\247\210\301\024\003\220\301\024@\022B\n\007m_equip\030\006 \003(\0132!"
    ".proto_ff.E_PetStarvalueEquipDescB\016\302\377\024\006\351"
    "\201\223\345\205\267\210\301\024\002\"R\n\022Sheet_PetStarvalue\022<\n\023E_Pet"
    "Starvalue_List\030\001 \003(\0132\030.proto_ff.E_PetSta"
    "rvalueB\005\210\301\024\200\002\"M\n\031E_PetWraithsAttributeDe"
    "sc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002"
    " \001(\005B\006\302\377\024\002ID\"P\n\034E_PetWraithsAttributebct"
    "Desc\022\027\n\006m_type\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\027\n\007m_value"
    "\030\002 \001(\005B\006\302\377\024\002ID\"\321\003\n\014E_PetWraiths\022\032\n\004m_id\030"
    "\001 \001(\005B\014\302\377\024\010\350\243\205\345\244\207id\022$\n\006m_name\030\002 \001(\tB\024\302\377\024"
    "\014\345\246\226\351\255\202\345\220\215\347\247\260\220\301\024@\022!\n\007m_affix\030\003 \001(\005B\020\302\377\024\014"
    "\350\257\215\347\274\200\347\261\273\345\236\213\022$\n\nm_position\030\004 \001(\005B\020\302\377\024\014\345\246"
    "\226\351\255\202\351\203\250\344\275\215\022#\n\tm_quality\030\005 \001(\005B\020\302\377\024\014\345\246\226\351\255"
    "\202\345\223\201\350\264\250\022 \n\006m_star\030\006 \001(\005B\020\302\377\024\014\345\246\226\351\255\202\346\230\237\347\272"
    "\247\022&\n\014m_propertyLv\030\007 \001(\005B\020\302\377\024\014\345\215\207\347\272\247\347\261\273\345\236"
    "\213\022\'\n\rm_propertyTop\030\010 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\347\261\273\345"
    "\236\213\022H\n\013m_attribute\030\t \003(\0132#.proto_ff.E_Pet"
    "WraithsAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\003\022T\n\016"
    "m_attributeBct\030\n \003(\0132&.proto_ff.E_PetWra"
    "ithsAttributebctDescB\024\302\377\024\014\351\242\235\345\244\226\345\261\236\346\200\247\210\301"
    "\024\002\"L\n\020Sheet_PetWraiths\0228\n\021E_PetWraiths_L"
    "ist\030\001 \003(\0132\026.proto_ff.E_PetWraithsB\005\210\301\024\200\002"
    "\"O\n\033E_PetWraithslvAttributeDesc\022\030\n\007m_val"
    "ue\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377\024\002I"
    "D\"\320\002\n\016E_PetWraithslv\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002"
    "id\022!\n\007m_value\030\002 \001(\005B\020\302\377\024\014\345\261\236\346\200\247\347\261\273\345\236\213\022%\n"
    "\013m_advanceLv\030\003 \001(\005B\020\302\377\024\014\350\277\233\351\230\266\347\255\211\347\272\247\022\030\n\004"
    "m_lv\030\004 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\'\n\rm_wraithsItem\030"
    "\005 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\266\210\350\200\227\022&\n\014m_wraithsMun\030"
    "\006 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022\'\n\007m_lvExp\030\007 \001(\005"
    "B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\022J\n\013m_attribute\030"
    "\010 \003(\0132%.proto_ff.E_PetWraithslvAttribute"
    "DescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006\"R\n\022Sheet_PetWraiths"
    "lv\022<\n\023E_PetWraithslv_List\030\001 \003(\0132\030.proto_"
    "ff.E_PetWraithslvB\005\210\301\024\200\002\"\226\001\n\022E_PetSmeltI"
    "temDesc\022\"\n\010m_maxNum\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\225\260"
    "\351\207\217\022\"\n\010m_minNum\030\002 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\351\207\217\022"
    "\036\n\nm_rarerand\030\003 \001(\005B\n\302\377\024\006\346\246\202\347\216\207\022\030\n\004m_id\030"
    "\004 \001(\005B\n\302\377\024\006\351\201\223\345\205\267\"\226\002\n\nE_PetSmelt\022\024\n\004m_id"
    "\030\001 \001(\005B\006\302\377\024\002id\022\035\n\tm_quality\030\002 \001(\005B\n\302\377\024\006\345"
    "\223\201\350\264\250\022\032\n\006m_star\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022%\n\010m_p"
    "utMun\030\004 \001(\005B\023\302\377\024\017\346\224\276\345\205\245\345\246\226\351\255\202\346\225\260\022$\n\nm_sm"
    "eltExp\030\005 \001(\005B\020\302\377\024\014\350\216\267\345\276\227\347\273\217\351\252\214\022,\n\014m_mons"
    "terNum\030\006 \001(\005B\026\302\377\024\022\345\246\226\346\260\224\350\216\267\345\276\227\346\225\260\351\207\217\022<\n\006"
    "m_item\030\007 \003(\0132\034.proto_ff.E_PetSmeltItemDe"
    "scB\016\302\377\024\006\350\216\267\345\276\227\210\301\024\003\"E\n\016Sheet_PetSmelt\0223\n\017"
    "E_PetSmelt_List\030\001 \003(\0132\024.proto_ff.E_PetSm"
    "eltB\004\210\301\024@\"\235\001\n\025E_PetRefineconversion\022\"\n\010m"
    "_itemid\030\001 \001(\005B\020\302\377\024\014\345\205\221\346\215\242\351\201\223\345\205\267\022\030\n\007m_gro"
    "up\030\002 \001(\005B\007\302\377\024\003\347\273\204\022\037\n\005m_num\030\003 \001(\005B\020\302\377\024\014\345\205"
    "\221\346\215\242\346\225\260\351\207\217\022%\n\013m_condition\030\004 \001(\005B\020\302\377\024\014\345\205\221"
    "\346\215\242\346\235\241\344\273\266\"f\n\031Sheet_PetRefineconversion\022I"
    "\n\032E_PetRefineconversion_List\030\001 \003(\0132\037.pro"
    "to_ff.E_PetRefineconversionB\004\210\301\024 \"J\n\023E_P"
    "etStoveStoveDesc\022\026\n\005m_num\030\001 \001(\005B\007\302\377\024\003\345\200\274"
    "\022\033\n\007m_value\030\002 \001(\005B\n\302\377\024\006\345\261\236\346\200\247\"\354\001\n\nE_PetS"
    "tove\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022%\n\005m_exp\030"
    "\002 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\022/\n\tm_quali"
    "ty\030\003 \001(\005B\034\302\377\024\030\347\202\274\345\246\226\345\274\200\346\224\276\344\270\212\351\231\220\345\223\201\350\264\250\022,"
    "\n\006m_star\030\004 \001(\005B\034\302\377\024\030\347\202\274\345\246\226\345\274\200\346\224\276\344\270\212\351\231\220\346\230"
    "\237\346\225\260\022>\n\007m_stove\030\005 \003(\0132\035.proto_ff.E_PetSt"
    "oveStoveDescB\016\302\377\024\006\345\246\226\347\202\211\210\301\024\004\"F\n\016Sheet_Pe"
    "tStove\0224\n\017E_PetStove_List\030\001 \003(\0132\024.proto_"
    "ff.E_PetStoveB\005\210\301\024\200\004\"H\n\026E_PetSuitAttribu"
    "teDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\024\n\006m_ty"
    "pe\030\002 \001(\005B\004\302\377\024\000\"\330\002\n\tE_PetSuit\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022#\n\tm_quality\030\002 \001(\005B\020\302\377\024\014\345\246\226\351\255"
    "\202\345\223\201\350\264\250\022 \n\006m_star\030\003 \001(\005B\020\302\377\024\014\345\246\226\351\255\202\346\230\237\347\272"
    "\247\022*\n\020m_wraithsQuality\030\004 \001(\005B\020\302\377\024\014\345\246\226\351\255\202\351"
    "\234\200\346\261\202\022!\n\007m_piece\030\005 \001(\005B\020\302\377\024\014\345\245\227\350\243\205\344\273\266\346\225\260"
    "\022)\n\017m_resonanceType\030\006 \001(\005B\020\302\377\024\014\345\205\261\351\270\243\345\261\236"
    "\346\200\247\022-\n\020m_resonanceValue\030\007 \001(\005B\023\302\377\024\017\345\205\261\351\270"
    "\243\345\261\236\346\200\247\345\200\274\022E\n\013m_Attribute\030\010 \003(\0132 .proto_"
    "ff.E_PetSuitAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024"
    "\005\"B\n\rSheet_PetSuit\0221\n\016E_PetSuit_List\030\001 \003"
    "(\0132\023.proto_ff.E_PetSuitB\004\210\301\024 \"R\n\026E_PetCo"
    "nstMaterialDesc\022\034\n\005m_exp\030\001 \001(\005B\r\302\377\024\t\347\273\217\351"
    "\252\214\345\200\274\022\032\n\006m_item\030\002 \001(\005B\n\302\377\024\006\351\201\223\345\205\267\"\343\001\n\nE_"
    "PetConst\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022 \n\006m_open"
    "\030\002 \001(\005B\020\302\377\024\014\345\274\200\345\220\257\346\235\241\344\273\266\022 \n\006m_solt\030\003 \001(\005"
    "B\020\302\377\024\014\346\247\275\344\275\215\350\247\243\351\224\201\022\032\n\006m_item\030\004 \001(\005B\n\302\377\024\006"
    "\346\266\210\350\200\227\022\031\n\005m_num\030\005 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022D\n\nm_m"
    "aterial\030\006 \003(\0132 .proto_ff.E_PetConstMater"
    "ialDescB\016\302\377\024\006\345\215\207\347\272\247\210\301\024\003\"E\n\016Sheet_PetCons"
    "t\0223\n\017E_PetConst_List\030\001 \003(\0132\024.proto_ff.E_"
    "PetConstB\004\210\301\024\002\"I\n\025E_PetTopAttributeDesc\022"
    "\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001("
    "\005B\006\302\377\024\002ID\"u\n\010E_PetTop\022#\n\tm_topType\030\001 \001(\005"
    "B\020\302\377\024\014\347\252\201\347\240\264\347\261\273\345\236\213\022D\n\013m_attribute\030\002 \003(\0132"
    "\037.proto_ff.E_PetTopAttributeDescB\016\302\377\024\006\345\261"
    "\236\346\200\247\210\301\024\020\"@\n\014Sheet_PetTop\0220\n\rE_PetTop_Lis"
    "t\030\001 \003(\0132\022.proto_ff.E_PetTopB\005\210\301\024\200\002\"q\n\014E_"
    "PetTopitem\022\036\n\004m_lv\030\001 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\347\255\211\347"
    "\272\247\022 \n\006m_item\030\002 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\346\266\210\350\200\227\022\037\n\005"
    "m_num\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\"K\n\020Sheet_P"
    "etTopitem\0227\n\021E_PetTopitem_List\030\001 \003(\0132\026.p"
    "roto_ff.E_PetTopitemB\004\210\301\024 \"N\n\033E_PetPrivi"
    "legePrivilegeDesc\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003"
    "\345\200\274\022\025\n\005m_att\030\002 \001(\005B\006\302\377\024\002ID\"\365\001\n\016E_PetPriv"
    "ilege\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022(\n\nm_activat"
    "e\030\002 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\235\241\344\273\266\220\301\024@\022&\n\014m_doubl"
    "eItem\030\003 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\347\277\273\345\200\215\022)\n\017m_exper"
    "ienceExp\030\004 \001(\005B\020\302\377\024\014\347\273\217\351\252\214\345\212\240\346\210\220\022P\n\013m_pr"
    "ivilege\030\005 \003(\0132%.proto_ff.E_PetPrivilegeP"
    "rivilegeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"Q\n\022Sh"
    "eet_PetPrivilege\022;\n\023E_PetPrivilege_List\030"
    "\001 \003(\0132\030.proto_ff.E_PetPrivilegeB\004\210\301\024\002", 9997);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Pet.proto", &protobuf_RegisterTypes);
  E_PetDisplayMaterialDesc::default_instance_ = new E_PetDisplayMaterialDesc();
  E_PetDisplay::default_instance_ = new E_PetDisplay();
  Sheet_PetDisplay::default_instance_ = new Sheet_PetDisplay();
  E_PetAttributetpyeAttributeDesc::default_instance_ = new E_PetAttributetpyeAttributeDesc();
  E_PetAttributetpye::default_instance_ = new E_PetAttributetpye();
  Sheet_PetAttributetpye::default_instance_ = new Sheet_PetAttributetpye();
  E_PetLvexp::default_instance_ = new E_PetLvexp();
  Sheet_PetLvexp::default_instance_ = new Sheet_PetLvexp();
  E_PetAdvancelvAdvanceDesc::default_instance_ = new E_PetAdvancelvAdvanceDesc();
  E_PetAdvancelv::default_instance_ = new E_PetAdvancelv();
  Sheet_PetAdvancelv::default_instance_ = new Sheet_PetAdvancelv();
  E_PetStarupUpattributeDesc::default_instance_ = new E_PetStarupUpattributeDesc();
  E_PetStarup::default_instance_ = new E_PetStarup();
  Sheet_PetStarup::default_instance_ = new Sheet_PetStarup();
  E_PetEggPetDesc::default_instance_ = new E_PetEggPetDesc();
  E_PetEgg::default_instance_ = new E_PetEgg();
  Sheet_PetEgg::default_instance_ = new Sheet_PetEgg();
  E_PetDecomposeDecomposeDesc::default_instance_ = new E_PetDecomposeDecomposeDesc();
  E_PetDecompose::default_instance_ = new E_PetDecompose();
  Sheet_PetDecompose::default_instance_ = new Sheet_PetDecompose();
  E_PetFettersAttributeDesc::default_instance_ = new E_PetFettersAttributeDesc();
  E_PetFetters::default_instance_ = new E_PetFetters();
  Sheet_PetFetters::default_instance_ = new Sheet_PetFetters();
  E_PetPetequipActDesc::default_instance_ = new E_PetPetequipActDesc();
  E_PetPetequip::default_instance_ = new E_PetPetequip();
  Sheet_PetPetequip::default_instance_ = new Sheet_PetPetequip();
  E_PetEquipvalueAttributeDesc::default_instance_ = new E_PetEquipvalueAttributeDesc();
  E_PetEquipvalueExtraDesc::default_instance_ = new E_PetEquipvalueExtraDesc();
  E_PetEquipvalue::default_instance_ = new E_PetEquipvalue();
  Sheet_PetEquipvalue::default_instance_ = new Sheet_PetEquipvalue();
  E_PetStarvalueAttributeDesc::default_instance_ = new E_PetStarvalueAttributeDesc();
  E_PetStarvalueEquipDesc::default_instance_ = new E_PetStarvalueEquipDesc();
  E_PetStarvalue::default_instance_ = new E_PetStarvalue();
  Sheet_PetStarvalue::default_instance_ = new Sheet_PetStarvalue();
  E_PetWraithsAttributeDesc::default_instance_ = new E_PetWraithsAttributeDesc();
  E_PetWraithsAttributebctDesc::default_instance_ = new E_PetWraithsAttributebctDesc();
  E_PetWraiths::default_instance_ = new E_PetWraiths();
  Sheet_PetWraiths::default_instance_ = new Sheet_PetWraiths();
  E_PetWraithslvAttributeDesc::default_instance_ = new E_PetWraithslvAttributeDesc();
  E_PetWraithslv::default_instance_ = new E_PetWraithslv();
  Sheet_PetWraithslv::default_instance_ = new Sheet_PetWraithslv();
  E_PetSmeltItemDesc::default_instance_ = new E_PetSmeltItemDesc();
  E_PetSmelt::default_instance_ = new E_PetSmelt();
  Sheet_PetSmelt::default_instance_ = new Sheet_PetSmelt();
  E_PetRefineconversion::default_instance_ = new E_PetRefineconversion();
  Sheet_PetRefineconversion::default_instance_ = new Sheet_PetRefineconversion();
  E_PetStoveStoveDesc::default_instance_ = new E_PetStoveStoveDesc();
  E_PetStove::default_instance_ = new E_PetStove();
  Sheet_PetStove::default_instance_ = new Sheet_PetStove();
  E_PetSuitAttributeDesc::default_instance_ = new E_PetSuitAttributeDesc();
  E_PetSuit::default_instance_ = new E_PetSuit();
  Sheet_PetSuit::default_instance_ = new Sheet_PetSuit();
  E_PetConstMaterialDesc::default_instance_ = new E_PetConstMaterialDesc();
  E_PetConst::default_instance_ = new E_PetConst();
  Sheet_PetConst::default_instance_ = new Sheet_PetConst();
  E_PetTopAttributeDesc::default_instance_ = new E_PetTopAttributeDesc();
  E_PetTop::default_instance_ = new E_PetTop();
  Sheet_PetTop::default_instance_ = new Sheet_PetTop();
  E_PetTopitem::default_instance_ = new E_PetTopitem();
  Sheet_PetTopitem::default_instance_ = new Sheet_PetTopitem();
  E_PetPrivilegePrivilegeDesc::default_instance_ = new E_PetPrivilegePrivilegeDesc();
  E_PetPrivilege::default_instance_ = new E_PetPrivilege();
  Sheet_PetPrivilege::default_instance_ = new Sheet_PetPrivilege();
  E_PetDisplayMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_PetDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_PetDisplay::default_instance_->InitAsDefaultInstance();
  E_PetAttributetpyeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetAttributetpye::default_instance_->InitAsDefaultInstance();
  Sheet_PetAttributetpye::default_instance_->InitAsDefaultInstance();
  E_PetLvexp::default_instance_->InitAsDefaultInstance();
  Sheet_PetLvexp::default_instance_->InitAsDefaultInstance();
  E_PetAdvancelvAdvanceDesc::default_instance_->InitAsDefaultInstance();
  E_PetAdvancelv::default_instance_->InitAsDefaultInstance();
  Sheet_PetAdvancelv::default_instance_->InitAsDefaultInstance();
  E_PetStarupUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetStarup::default_instance_->InitAsDefaultInstance();
  Sheet_PetStarup::default_instance_->InitAsDefaultInstance();
  E_PetEggPetDesc::default_instance_->InitAsDefaultInstance();
  E_PetEgg::default_instance_->InitAsDefaultInstance();
  Sheet_PetEgg::default_instance_->InitAsDefaultInstance();
  E_PetDecomposeDecomposeDesc::default_instance_->InitAsDefaultInstance();
  E_PetDecompose::default_instance_->InitAsDefaultInstance();
  Sheet_PetDecompose::default_instance_->InitAsDefaultInstance();
  E_PetFettersAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetFetters::default_instance_->InitAsDefaultInstance();
  Sheet_PetFetters::default_instance_->InitAsDefaultInstance();
  E_PetPetequipActDesc::default_instance_->InitAsDefaultInstance();
  E_PetPetequip::default_instance_->InitAsDefaultInstance();
  Sheet_PetPetequip::default_instance_->InitAsDefaultInstance();
  E_PetEquipvalueAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetEquipvalueExtraDesc::default_instance_->InitAsDefaultInstance();
  E_PetEquipvalue::default_instance_->InitAsDefaultInstance();
  Sheet_PetEquipvalue::default_instance_->InitAsDefaultInstance();
  E_PetStarvalueAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetStarvalueEquipDesc::default_instance_->InitAsDefaultInstance();
  E_PetStarvalue::default_instance_->InitAsDefaultInstance();
  Sheet_PetStarvalue::default_instance_->InitAsDefaultInstance();
  E_PetWraithsAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetWraithsAttributebctDesc::default_instance_->InitAsDefaultInstance();
  E_PetWraiths::default_instance_->InitAsDefaultInstance();
  Sheet_PetWraiths::default_instance_->InitAsDefaultInstance();
  E_PetWraithslvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetWraithslv::default_instance_->InitAsDefaultInstance();
  Sheet_PetWraithslv::default_instance_->InitAsDefaultInstance();
  E_PetSmeltItemDesc::default_instance_->InitAsDefaultInstance();
  E_PetSmelt::default_instance_->InitAsDefaultInstance();
  Sheet_PetSmelt::default_instance_->InitAsDefaultInstance();
  E_PetRefineconversion::default_instance_->InitAsDefaultInstance();
  Sheet_PetRefineconversion::default_instance_->InitAsDefaultInstance();
  E_PetStoveStoveDesc::default_instance_->InitAsDefaultInstance();
  E_PetStove::default_instance_->InitAsDefaultInstance();
  Sheet_PetStove::default_instance_->InitAsDefaultInstance();
  E_PetSuitAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetSuit::default_instance_->InitAsDefaultInstance();
  Sheet_PetSuit::default_instance_->InitAsDefaultInstance();
  E_PetConstMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_PetConst::default_instance_->InitAsDefaultInstance();
  Sheet_PetConst::default_instance_->InitAsDefaultInstance();
  E_PetTopAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_PetTop::default_instance_->InitAsDefaultInstance();
  Sheet_PetTop::default_instance_->InitAsDefaultInstance();
  E_PetTopitem::default_instance_->InitAsDefaultInstance();
  Sheet_PetTopitem::default_instance_->InitAsDefaultInstance();
  E_PetPrivilegePrivilegeDesc::default_instance_->InitAsDefaultInstance();
  E_PetPrivilege::default_instance_->InitAsDefaultInstance();
  Sheet_PetPrivilege::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fPet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fPet_2eproto {
  StaticDescriptorInitializer_E_5fPet_2eproto() {
    protobuf_AddDesc_E_5fPet_2eproto();
  }
} static_descriptor_initializer_E_5fPet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_PetDisplayMaterialDesc::kMExpFieldNumber;
const int E_PetDisplayMaterialDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_PetDisplayMaterialDesc::E_PetDisplayMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDisplayMaterialDesc::InitAsDefaultInstance() {
}

E_PetDisplayMaterialDesc::E_PetDisplayMaterialDesc(const E_PetDisplayMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDisplayMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDisplayMaterialDesc::~E_PetDisplayMaterialDesc() {
  SharedDtor();
}

void E_PetDisplayMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDisplayMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDisplayMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDisplayMaterialDesc_descriptor_;
}

const E_PetDisplayMaterialDesc& E_PetDisplayMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetDisplayMaterialDesc* E_PetDisplayMaterialDesc::default_instance_ = NULL;

E_PetDisplayMaterialDesc* E_PetDisplayMaterialDesc::New() const {
  return new E_PetDisplayMaterialDesc;
}

void E_PetDisplayMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDisplayMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int64 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDisplayMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDisplayMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int64 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDisplayMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int64 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDisplayMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDisplayMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDisplayMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDisplayMaterialDesc::MergeFrom(const E_PetDisplayMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDisplayMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDisplayMaterialDesc::CopyFrom(const E_PetDisplayMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDisplayMaterialDesc::IsInitialized() const {

  return true;
}

void E_PetDisplayMaterialDesc::Swap(E_PetDisplayMaterialDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDisplayMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDisplayMaterialDesc_descriptor_;
  metadata.reflection = E_PetDisplayMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDisplay::kMIdFieldNumber;
const int E_PetDisplay::kMNameFieldNumber;
const int E_PetDisplay::kMQualityFieldNumber;
const int E_PetDisplay::kMIsStarFieldNumber;
const int E_PetDisplay::kMGradeFieldNumber;
const int E_PetDisplay::kMMonsterIdFieldNumber;
const int E_PetDisplay::kMActiveSkillIDFieldNumber;
const int E_PetDisplay::kMExclusiveSkillIDFieldNumber;
const int E_PetDisplay::kMPassiveSkillIDFieldNumber;
const int E_PetDisplay::kMActiveAttributeFieldNumber;
const int E_PetDisplay::kMGrowAttFieldNumber;
const int E_PetDisplay::kMActiveParamaFieldNumber;
const int E_PetDisplay::kMGrowAttParamaFieldNumber;
const int E_PetDisplay::kMGrowStandardAFieldNumber;
const int E_PetDisplay::kMGrowStandardBFieldNumber;
const int E_PetDisplay::kMGrowStandardFieldNumber;
const int E_PetDisplay::kMGrowMinFieldNumber;
const int E_PetDisplay::kMGrowMaxFieldNumber;
const int E_PetDisplay::kMGrowStarFieldNumber;
const int E_PetDisplay::kMAdvanceAttributeFieldNumber;
const int E_PetDisplay::kMAdvanceTypeFieldNumber;
const int E_PetDisplay::kMPetTagFieldNumber;
const int E_PetDisplay::kMPetTagSkillFieldNumber;
const int E_PetDisplay::kMStarAttributeFieldNumber;
const int E_PetDisplay::kMStarPercentFieldNumber;
const int E_PetDisplay::kMStarLlimitFieldNumber;
const int E_PetDisplay::kMStarItemFieldNumber;
const int E_PetDisplay::kMStarNumFieldNumber;
const int E_PetDisplay::kMStarPetIDFieldNumber;
const int E_PetDisplay::kMStarPetNumFieldNumber;
const int E_PetDisplay::kMWeaponFieldNumber;
const int E_PetDisplay::kMUpAttributeIdFieldNumber;
const int E_PetDisplay::kMFettersIDFieldNumber;
const int E_PetDisplay::kMSuitFieldNumber;
const int E_PetDisplay::kMMaterialFieldNumber;
#endif  // !_MSC_VER

E_PetDisplay::E_PetDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDisplay::InitAsDefaultInstance() {
}

E_PetDisplay::E_PetDisplay(const E_PetDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_quality_ = 0;
  m_isstar_ = 0;
  m_grade_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_monsterid_ = GOOGLE_LONGLONG(0);
  m_activeskillid_ = 0;
  m_exclusiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_passiveskillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activeattribute_ = 0;
  m_growatt_ = 0;
  m_activeparama_ = 0;
  m_growattparama_ = 0;
  m_growstandarda_ = 0;
  m_growstandardb_ = 0;
  m_growstandard_ = 0;
  m_growmin_ = 0;
  m_growmax_ = 0;
  m_growstar_ = 0;
  m_advanceattribute_ = 0;
  m_advancetype_ = 0;
  m_pettag_ = 0;
  m_pettagskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starattribute_ = 0;
  m_starpercent_ = 0;
  m_starllimit_ = 0;
  m_staritem_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starpetid_ = GOOGLE_LONGLONG(0);
  m_starpetnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_weapon_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_fettersid_ = 0;
  m_suit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDisplay::~E_PetDisplay() {
  SharedDtor();
}

void E_PetDisplay::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_grade_ != &::google::protobuf::internal::kEmptyString) {
    delete m_grade_;
  }
  if (m_exclusiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_exclusiveskillid_;
  }
  if (m_passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_passiveskillid_;
  }
  if (m_pettagskill_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pettagskill_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (m_starpetnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starpetnum_;
  }
  if (m_suit_ != &::google::protobuf::internal::kEmptyString) {
    delete m_suit_;
  }
  if (this != default_instance_) {
  }
}

void E_PetDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDisplay_descriptor_;
}

const E_PetDisplay& E_PetDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetDisplay* E_PetDisplay::default_instance_ = NULL;

E_PetDisplay* E_PetDisplay::New() const {
  return new E_PetDisplay;
}

void E_PetDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_quality_ = 0;
    m_isstar_ = 0;
    if (has_m_grade()) {
      if (m_grade_ != &::google::protobuf::internal::kEmptyString) {
        m_grade_->clear();
      }
    }
    m_monsterid_ = GOOGLE_LONGLONG(0);
    m_activeskillid_ = 0;
    if (has_m_exclusiveskillid()) {
      if (m_exclusiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        m_exclusiveskillid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_passiveskillid()) {
      if (m_passiveskillid_ != &::google::protobuf::internal::kEmptyString) {
        m_passiveskillid_->clear();
      }
    }
    m_activeattribute_ = 0;
    m_growatt_ = 0;
    m_activeparama_ = 0;
    m_growattparama_ = 0;
    m_growstandarda_ = 0;
    m_growstandardb_ = 0;
    m_growstandard_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_growmin_ = 0;
    m_growmax_ = 0;
    m_growstar_ = 0;
    m_advanceattribute_ = 0;
    m_advancetype_ = 0;
    m_pettag_ = 0;
    if (has_m_pettagskill()) {
      if (m_pettagskill_ != &::google::protobuf::internal::kEmptyString) {
        m_pettagskill_->clear();
      }
    }
    m_starattribute_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_starpercent_ = 0;
    m_starllimit_ = 0;
    m_staritem_ = GOOGLE_LONGLONG(0);
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starpetid_ = GOOGLE_LONGLONG(0);
    if (has_m_starpetnum()) {
      if (m_starpetnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starpetnum_->clear();
      }
    }
    m_weapon_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_fettersid_ = 0;
    if (has_m_suit()) {
      if (m_suit_ != &::google::protobuf::internal::kEmptyString) {
        m_suit_->clear();
      }
    }
  }
  m_material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_isStar;
        break;
      }

      // optional int32 m_isStar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_isStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isstar_)));
          set_has_m_isstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_grade;
        break;
      }

      // optional string m_grade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_grade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_grade()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_grade().data(), this->m_grade().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_monsterId;
        break;
      }

      // optional int64 m_monsterId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_activeSkillID;
        break;
      }

      // optional int32 m_activeSkillID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskillid_)));
          set_has_m_activeskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_exclusiveSkillID;
        break;
      }

      // optional string m_exclusiveSkillID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_exclusiveSkillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_exclusiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_passiveSkillID;
        break;
      }

      // optional string m_passiveSkillID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_passiveSkillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_passiveskillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_passiveskillid().data(), this->m_passiveskillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_activeAttribute;
        break;
      }

      // optional int32 m_activeAttribute = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeAttribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeattribute_)));
          set_has_m_activeattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_growAtt;
        break;
      }

      // optional int32 m_growAtt = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_growAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_growatt_)));
          set_has_m_growatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_m_activeParama;
        break;
      }

      // optional float m_activeParama = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_activeParama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_activeparama_)));
          set_has_m_activeparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_m_growAttParama;
        break;
      }

      // optional float m_growAttParama = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growAttParama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growattparama_)));
          set_has_m_growattparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_m_growStandardA;
        break;
      }

      // optional float m_growStandardA = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growStandardA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandarda_)));
          set_has_m_growstandarda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_m_growStandardB;
        break;
      }

      // optional float m_growStandardB = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growStandardB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandardb_)));
          set_has_m_growstandardb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_m_growStandard;
        break;
      }

      // optional float m_growStandard = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growStandard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstandard_)));
          set_has_m_growstandard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_m_growMin;
        break;
      }

      // optional float m_growMin = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growmin_)));
          set_has_m_growmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_m_growMax;
        break;
      }

      // optional float m_growMax = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growmax_)));
          set_has_m_growmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_m_growStar;
        break;
      }

      // optional float m_growStar = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_growStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_growstar_)));
          set_has_m_growstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_advanceAttribute;
        break;
      }

      // optional int32 m_advanceAttribute = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceAttribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advanceattribute_)));
          set_has_m_advanceattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_advanceType;
        break;
      }

      // optional int32 m_advanceType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancetype_)));
          set_has_m_advancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_petTag;
        break;
      }

      // optional int32 m_petTag = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_petTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pettag_)));
          set_has_m_pettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_m_petTagSkill;
        break;
      }

      // optional string m_petTagSkill = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_petTagSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pettagskill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pettagskill().data(), this->m_pettagskill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_starAttribute;
        break;
      }

      // optional int32 m_starAttribute = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starAttribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starattribute_)));
          set_has_m_starattribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_starPercent;
        break;
      }

      // optional int32 m_starPercent = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starPercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starpercent_)));
          set_has_m_starpercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_starLlimit;
        break;
      }

      // optional int32 m_starLlimit = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starLlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starllimit_)));
          set_has_m_starllimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_starItem;
        break;
      }

      // optional int64 m_starItem = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_staritem_)));
          set_has_m_staritem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_m_starNum;
        break;
      }

      // optional string m_starNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_starPetID;
        break;
      }

      // optional int64 m_starPetID = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starPetID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starpetid_)));
          set_has_m_starpetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_m_starPetNum;
        break;
      }

      // optional string m_starPetNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starPetNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starpetnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starpetnum().data(), this->m_starpetnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_weapon;
        break;
      }

      // optional int32 m_weapon = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weapon_)));
          set_has_m_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_upAttributeId;
        break;
      }

      // optional int64 m_upAttributeId = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_fettersID;
        break;
      }

      // optional int32 m_fettersID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fettersID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fettersid_)));
          set_has_m_fettersid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_m_suit;
        break;
      }

      // optional string m_suit = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_suit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_suit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_suit().data(), this->m_suit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_m_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // optional int32 m_isStar = 4;
  if (has_m_isstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_isstar(), output);
  }

  // optional string m_grade = 5;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_grade().data(), this->m_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_grade(), output);
  }

  // optional int64 m_monsterId = 6;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_monsterid(), output);
  }

  // optional int32 m_activeSkillID = 7;
  if (has_m_activeskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_activeskillid(), output);
  }

  // optional string m_exclusiveSkillID = 8;
  if (has_m_exclusiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_exclusiveskillid(), output);
  }

  // optional string m_passiveSkillID = 9;
  if (has_m_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_passiveskillid().data(), this->m_passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_passiveskillid(), output);
  }

  // optional int32 m_activeAttribute = 10;
  if (has_m_activeattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_activeattribute(), output);
  }

  // optional int32 m_growAtt = 11;
  if (has_m_growatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_growatt(), output);
  }

  // optional float m_activeParama = 12;
  if (has_m_activeparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->m_activeparama(), output);
  }

  // optional float m_growAttParama = 13;
  if (has_m_growattparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->m_growattparama(), output);
  }

  // optional float m_growStandardA = 14;
  if (has_m_growstandarda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->m_growstandarda(), output);
  }

  // optional float m_growStandardB = 15;
  if (has_m_growstandardb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->m_growstandardb(), output);
  }

  // optional float m_growStandard = 16;
  if (has_m_growstandard()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->m_growstandard(), output);
  }

  // optional float m_growMin = 17;
  if (has_m_growmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->m_growmin(), output);
  }

  // optional float m_growMax = 18;
  if (has_m_growmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->m_growmax(), output);
  }

  // optional float m_growStar = 19;
  if (has_m_growstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->m_growstar(), output);
  }

  // optional int32 m_advanceAttribute = 20;
  if (has_m_advanceattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_advanceattribute(), output);
  }

  // optional int32 m_advanceType = 21;
  if (has_m_advancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_advancetype(), output);
  }

  // optional int32 m_petTag = 22;
  if (has_m_pettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_pettag(), output);
  }

  // optional string m_petTagSkill = 23;
  if (has_m_pettagskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pettagskill().data(), this->m_pettagskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->m_pettagskill(), output);
  }

  // optional int32 m_starAttribute = 24;
  if (has_m_starattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_starattribute(), output);
  }

  // optional int32 m_starPercent = 25;
  if (has_m_starpercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_starpercent(), output);
  }

  // optional int32 m_starLlimit = 26;
  if (has_m_starllimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_starllimit(), output);
  }

  // optional int64 m_starItem = 27;
  if (has_m_staritem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->m_staritem(), output);
  }

  // optional string m_starNum = 28;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->m_starnum(), output);
  }

  // optional int64 m_starPetID = 29;
  if (has_m_starpetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->m_starpetid(), output);
  }

  // optional string m_starPetNum = 30;
  if (has_m_starpetnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starpetnum().data(), this->m_starpetnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->m_starpetnum(), output);
  }

  // optional int32 m_weapon = 31;
  if (has_m_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->m_weapon(), output);
  }

  // optional int64 m_upAttributeId = 32;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->m_upattributeid(), output);
  }

  // optional int32 m_fettersID = 33;
  if (has_m_fettersid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_fettersid(), output);
  }

  // optional string m_suit = 34;
  if (has_m_suit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suit().data(), this->m_suit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->m_suit(), output);
  }

  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 35;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->m_material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // optional int32 m_isStar = 4;
  if (has_m_isstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_isstar(), target);
  }

  // optional string m_grade = 5;
  if (has_m_grade()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_grade().data(), this->m_grade().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_grade(), target);
  }

  // optional int64 m_monsterId = 6;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_monsterid(), target);
  }

  // optional int32 m_activeSkillID = 7;
  if (has_m_activeskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_activeskillid(), target);
  }

  // optional string m_exclusiveSkillID = 8;
  if (has_m_exclusiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_exclusiveskillid().data(), this->m_exclusiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m_exclusiveskillid(), target);
  }

  // optional string m_passiveSkillID = 9;
  if (has_m_passiveskillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_passiveskillid().data(), this->m_passiveskillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_passiveskillid(), target);
  }

  // optional int32 m_activeAttribute = 10;
  if (has_m_activeattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_activeattribute(), target);
  }

  // optional int32 m_growAtt = 11;
  if (has_m_growatt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_growatt(), target);
  }

  // optional float m_activeParama = 12;
  if (has_m_activeparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->m_activeparama(), target);
  }

  // optional float m_growAttParama = 13;
  if (has_m_growattparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->m_growattparama(), target);
  }

  // optional float m_growStandardA = 14;
  if (has_m_growstandarda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->m_growstandarda(), target);
  }

  // optional float m_growStandardB = 15;
  if (has_m_growstandardb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->m_growstandardb(), target);
  }

  // optional float m_growStandard = 16;
  if (has_m_growstandard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->m_growstandard(), target);
  }

  // optional float m_growMin = 17;
  if (has_m_growmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->m_growmin(), target);
  }

  // optional float m_growMax = 18;
  if (has_m_growmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->m_growmax(), target);
  }

  // optional float m_growStar = 19;
  if (has_m_growstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->m_growstar(), target);
  }

  // optional int32 m_advanceAttribute = 20;
  if (has_m_advanceattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_advanceattribute(), target);
  }

  // optional int32 m_advanceType = 21;
  if (has_m_advancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_advancetype(), target);
  }

  // optional int32 m_petTag = 22;
  if (has_m_pettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_pettag(), target);
  }

  // optional string m_petTagSkill = 23;
  if (has_m_pettagskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pettagskill().data(), this->m_pettagskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->m_pettagskill(), target);
  }

  // optional int32 m_starAttribute = 24;
  if (has_m_starattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_starattribute(), target);
  }

  // optional int32 m_starPercent = 25;
  if (has_m_starpercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_starpercent(), target);
  }

  // optional int32 m_starLlimit = 26;
  if (has_m_starllimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_starllimit(), target);
  }

  // optional int64 m_starItem = 27;
  if (has_m_staritem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->m_staritem(), target);
  }

  // optional string m_starNum = 28;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->m_starnum(), target);
  }

  // optional int64 m_starPetID = 29;
  if (has_m_starpetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->m_starpetid(), target);
  }

  // optional string m_starPetNum = 30;
  if (has_m_starpetnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starpetnum().data(), this->m_starpetnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->m_starpetnum(), target);
  }

  // optional int32 m_weapon = 31;
  if (has_m_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->m_weapon(), target);
  }

  // optional int64 m_upAttributeId = 32;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->m_upattributeid(), target);
  }

  // optional int32 m_fettersID = 33;
  if (has_m_fettersid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_fettersid(), target);
  }

  // optional string m_suit = 34;
  if (has_m_suit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_suit().data(), this->m_suit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->m_suit(), target);
  }

  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 35;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->m_material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_isStar = 4;
    if (has_m_isstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isstar());
    }

    // optional string m_grade = 5;
    if (has_m_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_grade());
    }

    // optional int64 m_monsterId = 6;
    if (has_m_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_monsterid());
    }

    // optional int32 m_activeSkillID = 7;
    if (has_m_activeskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskillid());
    }

    // optional string m_exclusiveSkillID = 8;
    if (has_m_exclusiveskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_exclusiveskillid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_passiveSkillID = 9;
    if (has_m_passiveskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_passiveskillid());
    }

    // optional int32 m_activeAttribute = 10;
    if (has_m_activeattribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeattribute());
    }

    // optional int32 m_growAtt = 11;
    if (has_m_growatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_growatt());
    }

    // optional float m_activeParama = 12;
    if (has_m_activeparama()) {
      total_size += 1 + 4;
    }

    // optional float m_growAttParama = 13;
    if (has_m_growattparama()) {
      total_size += 1 + 4;
    }

    // optional float m_growStandardA = 14;
    if (has_m_growstandarda()) {
      total_size += 1 + 4;
    }

    // optional float m_growStandardB = 15;
    if (has_m_growstandardb()) {
      total_size += 1 + 4;
    }

    // optional float m_growStandard = 16;
    if (has_m_growstandard()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float m_growMin = 17;
    if (has_m_growmin()) {
      total_size += 2 + 4;
    }

    // optional float m_growMax = 18;
    if (has_m_growmax()) {
      total_size += 2 + 4;
    }

    // optional float m_growStar = 19;
    if (has_m_growstar()) {
      total_size += 2 + 4;
    }

    // optional int32 m_advanceAttribute = 20;
    if (has_m_advanceattribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advanceattribute());
    }

    // optional int32 m_advanceType = 21;
    if (has_m_advancetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancetype());
    }

    // optional int32 m_petTag = 22;
    if (has_m_pettag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pettag());
    }

    // optional string m_petTagSkill = 23;
    if (has_m_pettagskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pettagskill());
    }

    // optional int32 m_starAttribute = 24;
    if (has_m_starattribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starattribute());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_starPercent = 25;
    if (has_m_starpercent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starpercent());
    }

    // optional int32 m_starLlimit = 26;
    if (has_m_starllimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starllimit());
    }

    // optional int64 m_starItem = 27;
    if (has_m_staritem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_staritem());
    }

    // optional string m_starNum = 28;
    if (has_m_starnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int64 m_starPetID = 29;
    if (has_m_starpetid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starpetid());
    }

    // optional string m_starPetNum = 30;
    if (has_m_starpetnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starpetnum());
    }

    // optional int32 m_weapon = 31;
    if (has_m_weapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weapon());
    }

    // optional int64 m_upAttributeId = 32;
    if (has_m_upattributeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 m_fettersID = 33;
    if (has_m_fettersid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fettersid());
    }

    // optional string m_suit = 34;
    if (has_m_suit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_suit());
    }

  }
  // repeated .proto_ff.E_PetDisplayMaterialDesc m_material = 35;
  total_size += 2 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDisplay::MergeFrom(const E_PetDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_isstar()) {
      set_m_isstar(from.m_isstar());
    }
    if (from.has_m_grade()) {
      set_m_grade(from.m_grade());
    }
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
    if (from.has_m_activeskillid()) {
      set_m_activeskillid(from.m_activeskillid());
    }
    if (from.has_m_exclusiveskillid()) {
      set_m_exclusiveskillid(from.m_exclusiveskillid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_passiveskillid()) {
      set_m_passiveskillid(from.m_passiveskillid());
    }
    if (from.has_m_activeattribute()) {
      set_m_activeattribute(from.m_activeattribute());
    }
    if (from.has_m_growatt()) {
      set_m_growatt(from.m_growatt());
    }
    if (from.has_m_activeparama()) {
      set_m_activeparama(from.m_activeparama());
    }
    if (from.has_m_growattparama()) {
      set_m_growattparama(from.m_growattparama());
    }
    if (from.has_m_growstandarda()) {
      set_m_growstandarda(from.m_growstandarda());
    }
    if (from.has_m_growstandardb()) {
      set_m_growstandardb(from.m_growstandardb());
    }
    if (from.has_m_growstandard()) {
      set_m_growstandard(from.m_growstandard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_growmin()) {
      set_m_growmin(from.m_growmin());
    }
    if (from.has_m_growmax()) {
      set_m_growmax(from.m_growmax());
    }
    if (from.has_m_growstar()) {
      set_m_growstar(from.m_growstar());
    }
    if (from.has_m_advanceattribute()) {
      set_m_advanceattribute(from.m_advanceattribute());
    }
    if (from.has_m_advancetype()) {
      set_m_advancetype(from.m_advancetype());
    }
    if (from.has_m_pettag()) {
      set_m_pettag(from.m_pettag());
    }
    if (from.has_m_pettagskill()) {
      set_m_pettagskill(from.m_pettagskill());
    }
    if (from.has_m_starattribute()) {
      set_m_starattribute(from.m_starattribute());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_starpercent()) {
      set_m_starpercent(from.m_starpercent());
    }
    if (from.has_m_starllimit()) {
      set_m_starllimit(from.m_starllimit());
    }
    if (from.has_m_staritem()) {
      set_m_staritem(from.m_staritem());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starpetid()) {
      set_m_starpetid(from.m_starpetid());
    }
    if (from.has_m_starpetnum()) {
      set_m_starpetnum(from.m_starpetnum());
    }
    if (from.has_m_weapon()) {
      set_m_weapon(from.m_weapon());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_fettersid()) {
      set_m_fettersid(from.m_fettersid());
    }
    if (from.has_m_suit()) {
      set_m_suit(from.m_suit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDisplay::CopyFrom(const E_PetDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDisplay::IsInitialized() const {

  return true;
}

void E_PetDisplay::Swap(E_PetDisplay* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_isstar_, other->m_isstar_);
    std::swap(m_grade_, other->m_grade_);
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(m_activeskillid_, other->m_activeskillid_);
    std::swap(m_exclusiveskillid_, other->m_exclusiveskillid_);
    std::swap(m_passiveskillid_, other->m_passiveskillid_);
    std::swap(m_activeattribute_, other->m_activeattribute_);
    std::swap(m_growatt_, other->m_growatt_);
    std::swap(m_activeparama_, other->m_activeparama_);
    std::swap(m_growattparama_, other->m_growattparama_);
    std::swap(m_growstandarda_, other->m_growstandarda_);
    std::swap(m_growstandardb_, other->m_growstandardb_);
    std::swap(m_growstandard_, other->m_growstandard_);
    std::swap(m_growmin_, other->m_growmin_);
    std::swap(m_growmax_, other->m_growmax_);
    std::swap(m_growstar_, other->m_growstar_);
    std::swap(m_advanceattribute_, other->m_advanceattribute_);
    std::swap(m_advancetype_, other->m_advancetype_);
    std::swap(m_pettag_, other->m_pettag_);
    std::swap(m_pettagskill_, other->m_pettagskill_);
    std::swap(m_starattribute_, other->m_starattribute_);
    std::swap(m_starpercent_, other->m_starpercent_);
    std::swap(m_starllimit_, other->m_starllimit_);
    std::swap(m_staritem_, other->m_staritem_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starpetid_, other->m_starpetid_);
    std::swap(m_starpetnum_, other->m_starpetnum_);
    std::swap(m_weapon_, other->m_weapon_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_fettersid_, other->m_fettersid_);
    std::swap(m_suit_, other->m_suit_);
    m_material_.Swap(&other->m_material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDisplay_descriptor_;
  metadata.reflection = E_PetDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetDisplay::kEPetDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetDisplay::Sheet_PetDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetDisplay::InitAsDefaultInstance() {
}

Sheet_PetDisplay::Sheet_PetDisplay(const Sheet_PetDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetDisplay::~Sheet_PetDisplay() {
  SharedDtor();
}

void Sheet_PetDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetDisplay_descriptor_;
}

const Sheet_PetDisplay& Sheet_PetDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetDisplay* Sheet_PetDisplay::default_instance_ = NULL;

Sheet_PetDisplay* Sheet_PetDisplay::New() const {
  return new Sheet_PetDisplay;
}

void Sheet_PetDisplay::Clear() {
  e_petdisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petdisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petdisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petdisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetDisplay E_PetDisplay_List = 1;
  total_size += 1 * this->e_petdisplay_list_size();
  for (int i = 0; i < this->e_petdisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petdisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetDisplay::MergeFrom(const Sheet_PetDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petdisplay_list_.MergeFrom(from.e_petdisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetDisplay::CopyFrom(const Sheet_PetDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetDisplay::IsInitialized() const {

  return true;
}

void Sheet_PetDisplay::Swap(Sheet_PetDisplay* other) {
  if (other != this) {
    e_petdisplay_list_.Swap(&other->e_petdisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetDisplay_descriptor_;
  metadata.reflection = Sheet_PetDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAttributetpyeAttributeDesc::kMValueFieldNumber;
const int E_PetAttributetpyeAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetAttributetpyeAttributeDesc::E_PetAttributetpyeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAttributetpyeAttributeDesc::InitAsDefaultInstance() {
}

E_PetAttributetpyeAttributeDesc::E_PetAttributetpyeAttributeDesc(const E_PetAttributetpyeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAttributetpyeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAttributetpyeAttributeDesc::~E_PetAttributetpyeAttributeDesc() {
  SharedDtor();
}

void E_PetAttributetpyeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAttributetpyeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAttributetpyeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAttributetpyeAttributeDesc_descriptor_;
}

const E_PetAttributetpyeAttributeDesc& E_PetAttributetpyeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetAttributetpyeAttributeDesc* E_PetAttributetpyeAttributeDesc::default_instance_ = NULL;

E_PetAttributetpyeAttributeDesc* E_PetAttributetpyeAttributeDesc::New() const {
  return new E_PetAttributetpyeAttributeDesc;
}

void E_PetAttributetpyeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAttributetpyeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAttributetpyeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAttributetpyeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAttributetpyeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAttributetpyeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAttributetpyeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAttributetpyeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAttributetpyeAttributeDesc::MergeFrom(const E_PetAttributetpyeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAttributetpyeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAttributetpyeAttributeDesc::CopyFrom(const E_PetAttributetpyeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAttributetpyeAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetAttributetpyeAttributeDesc::Swap(E_PetAttributetpyeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAttributetpyeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAttributetpyeAttributeDesc_descriptor_;
  metadata.reflection = E_PetAttributetpyeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAttributetpye::kMIdFieldNumber;
const int E_PetAttributetpye::kMTpyeFieldNumber;
const int E_PetAttributetpye::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetAttributetpye::E_PetAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAttributetpye::InitAsDefaultInstance() {
}

E_PetAttributetpye::E_PetAttributetpye(const E_PetAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_tpye_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAttributetpye::~E_PetAttributetpye() {
  SharedDtor();
}

void E_PetAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAttributetpye_descriptor_;
}

const E_PetAttributetpye& E_PetAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetAttributetpye* E_PetAttributetpye::default_instance_ = NULL;

E_PetAttributetpye* E_PetAttributetpye::New() const {
  return new E_PetAttributetpye;
}

void E_PetAttributetpye::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_tpye_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tpye;
        break;
      }

      // optional int32 m_tpye = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tpye_)));
          set_has_m_tpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_tpye = 2;
  if (has_m_tpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_tpye(), output);
  }

  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_tpye = 2;
  if (has_m_tpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_tpye(), target);
  }

  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAttributetpye::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_tpye = 2;
    if (has_m_tpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tpye());
    }

  }
  // repeated .proto_ff.E_PetAttributetpyeAttributeDesc m_attribute = 3;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAttributetpye::MergeFrom(const E_PetAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_tpye()) {
      set_m_tpye(from.m_tpye());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAttributetpye::CopyFrom(const E_PetAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAttributetpye::IsInitialized() const {

  return true;
}

void E_PetAttributetpye::Swap(E_PetAttributetpye* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_tpye_, other->m_tpye_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAttributetpye_descriptor_;
  metadata.reflection = E_PetAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetAttributetpye::kEPetAttributetpyeListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetAttributetpye::Sheet_PetAttributetpye()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetAttributetpye::InitAsDefaultInstance() {
}

Sheet_PetAttributetpye::Sheet_PetAttributetpye(const Sheet_PetAttributetpye& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetAttributetpye::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetAttributetpye::~Sheet_PetAttributetpye() {
  SharedDtor();
}

void Sheet_PetAttributetpye::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetAttributetpye::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetAttributetpye::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetAttributetpye_descriptor_;
}

const Sheet_PetAttributetpye& Sheet_PetAttributetpye::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetAttributetpye* Sheet_PetAttributetpye::default_instance_ = NULL;

Sheet_PetAttributetpye* Sheet_PetAttributetpye::New() const {
  return new Sheet_PetAttributetpye;
}

void Sheet_PetAttributetpye::Clear() {
  e_petattributetpye_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetAttributetpye::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetAttributetpye_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petattributetpye_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetAttributetpye_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetAttributetpye::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petattributetpye_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetAttributetpye::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petattributetpye_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetAttributetpye::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetAttributetpye E_PetAttributetpye_List = 1;
  total_size += 1 * this->e_petattributetpye_list_size();
  for (int i = 0; i < this->e_petattributetpye_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petattributetpye_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetAttributetpye::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetAttributetpye* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetAttributetpye*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetAttributetpye::MergeFrom(const Sheet_PetAttributetpye& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petattributetpye_list_.MergeFrom(from.e_petattributetpye_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetAttributetpye::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetAttributetpye::CopyFrom(const Sheet_PetAttributetpye& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetAttributetpye::IsInitialized() const {

  return true;
}

void Sheet_PetAttributetpye::Swap(Sheet_PetAttributetpye* other) {
  if (other != this) {
    e_petattributetpye_list_.Swap(&other->e_petattributetpye_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetAttributetpye::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetAttributetpye_descriptor_;
  metadata.reflection = Sheet_PetAttributetpye_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetLvexp::kMIdFieldNumber;
const int E_PetLvexp::kMExpFieldNumber;
#endif  // !_MSC_VER

E_PetLvexp::E_PetLvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetLvexp::InitAsDefaultInstance() {
}

E_PetLvexp::E_PetLvexp(const E_PetLvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetLvexp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetLvexp::~E_PetLvexp() {
  SharedDtor();
}

void E_PetLvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetLvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetLvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetLvexp_descriptor_;
}

const E_PetLvexp& E_PetLvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetLvexp* E_PetLvexp::default_instance_ = NULL;

E_PetLvexp* E_PetLvexp::New() const {
  return new E_PetLvexp;
}

void E_PetLvexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetLvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetLvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetLvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetLvexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetLvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetLvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetLvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetLvexp::MergeFrom(const E_PetLvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetLvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetLvexp::CopyFrom(const E_PetLvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetLvexp::IsInitialized() const {

  return true;
}

void E_PetLvexp::Swap(E_PetLvexp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetLvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetLvexp_descriptor_;
  metadata.reflection = E_PetLvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetLvexp::kEPetLvexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetLvexp::Sheet_PetLvexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetLvexp::InitAsDefaultInstance() {
}

Sheet_PetLvexp::Sheet_PetLvexp(const Sheet_PetLvexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetLvexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetLvexp::~Sheet_PetLvexp() {
  SharedDtor();
}

void Sheet_PetLvexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetLvexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetLvexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetLvexp_descriptor_;
}

const Sheet_PetLvexp& Sheet_PetLvexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetLvexp* Sheet_PetLvexp::default_instance_ = NULL;

Sheet_PetLvexp* Sheet_PetLvexp::New() const {
  return new Sheet_PetLvexp;
}

void Sheet_PetLvexp::Clear() {
  e_petlvexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetLvexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetLvexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petlvexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetLvexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetLvexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petlvexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetLvexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petlvexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetLvexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetLvexp E_PetLvexp_List = 1;
  total_size += 1 * this->e_petlvexp_list_size();
  for (int i = 0; i < this->e_petlvexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petlvexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetLvexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetLvexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetLvexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetLvexp::MergeFrom(const Sheet_PetLvexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petlvexp_list_.MergeFrom(from.e_petlvexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetLvexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetLvexp::CopyFrom(const Sheet_PetLvexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetLvexp::IsInitialized() const {

  return true;
}

void Sheet_PetLvexp::Swap(Sheet_PetLvexp* other) {
  if (other != this) {
    e_petlvexp_list_.Swap(&other->e_petlvexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetLvexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetLvexp_descriptor_;
  metadata.reflection = Sheet_PetLvexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAdvancelvAdvanceDesc::kMParamFieldNumber;
const int E_PetAdvancelvAdvanceDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetAdvancelvAdvanceDesc::E_PetAdvancelvAdvanceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAdvancelvAdvanceDesc::InitAsDefaultInstance() {
}

E_PetAdvancelvAdvanceDesc::E_PetAdvancelvAdvanceDesc(const E_PetAdvancelvAdvanceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAdvancelvAdvanceDesc::SharedCtor() {
  _cached_size_ = 0;
  m_param_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAdvancelvAdvanceDesc::~E_PetAdvancelvAdvanceDesc() {
  SharedDtor();
}

void E_PetAdvancelvAdvanceDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAdvancelvAdvanceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAdvancelvAdvanceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAdvancelvAdvanceDesc_descriptor_;
}

const E_PetAdvancelvAdvanceDesc& E_PetAdvancelvAdvanceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetAdvancelvAdvanceDesc* E_PetAdvancelvAdvanceDesc::default_instance_ = NULL;

E_PetAdvancelvAdvanceDesc* E_PetAdvancelvAdvanceDesc::New() const {
  return new E_PetAdvancelvAdvanceDesc;
}

void E_PetAdvancelvAdvanceDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_param_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAdvancelvAdvanceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float m_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAdvancelvAdvanceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float m_param = 1;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->m_param(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAdvancelvAdvanceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float m_param = 1;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->m_param(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAdvancelvAdvanceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float m_param = 1;
    if (has_m_param()) {
      total_size += 1 + 4;
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAdvancelvAdvanceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAdvancelvAdvanceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAdvancelvAdvanceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAdvancelvAdvanceDesc::MergeFrom(const E_PetAdvancelvAdvanceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAdvancelvAdvanceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAdvancelvAdvanceDesc::CopyFrom(const E_PetAdvancelvAdvanceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAdvancelvAdvanceDesc::IsInitialized() const {

  return true;
}

void E_PetAdvancelvAdvanceDesc::Swap(E_PetAdvancelvAdvanceDesc* other) {
  if (other != this) {
    std::swap(m_param_, other->m_param_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAdvancelvAdvanceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAdvancelvAdvanceDesc_descriptor_;
  metadata.reflection = E_PetAdvancelvAdvanceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetAdvancelv::kMIdFieldNumber;
const int E_PetAdvancelv::kMAdvanceItemFieldNumber;
const int E_PetAdvancelv::kMAdvanceNumFieldNumber;
const int E_PetAdvancelv::kMAdvanceFieldNumber;
#endif  // !_MSC_VER

E_PetAdvancelv::E_PetAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetAdvancelv::InitAsDefaultInstance() {
}

E_PetAdvancelv::E_PetAdvancelv(const E_PetAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_advanceitem_ = 0;
  m_advancenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetAdvancelv::~E_PetAdvancelv() {
  SharedDtor();
}

void E_PetAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetAdvancelv_descriptor_;
}

const E_PetAdvancelv& E_PetAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetAdvancelv* E_PetAdvancelv::default_instance_ = NULL;

E_PetAdvancelv* E_PetAdvancelv::New() const {
  return new E_PetAdvancelv;
}

void E_PetAdvancelv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_advanceitem_ = 0;
    m_advancenum_ = 0;
  }
  m_advance_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_advanceItem;
        break;
      }

      // optional int32 m_advanceItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advanceitem_)));
          set_has_m_advanceitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_advanceNum;
        break;
      }

      // optional int32 m_advanceNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancenum_)));
          set_has_m_advancenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_advance;
        break;
      }

      // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_advance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_advance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_advance;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_advanceItem = 2;
  if (has_m_advanceitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_advanceitem(), output);
  }

  // optional int32 m_advanceNum = 3;
  if (has_m_advancenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_advancenum(), output);
  }

  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  for (int i = 0; i < this->m_advance_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_advance(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_advanceItem = 2;
  if (has_m_advanceitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_advanceitem(), target);
  }

  // optional int32 m_advanceNum = 3;
  if (has_m_advancenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_advancenum(), target);
  }

  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  for (int i = 0; i < this->m_advance_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_advance(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetAdvancelv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_advanceItem = 2;
    if (has_m_advanceitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advanceitem());
    }

    // optional int32 m_advanceNum = 3;
    if (has_m_advancenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancenum());
    }

  }
  // repeated .proto_ff.E_PetAdvancelvAdvanceDesc m_advance = 4;
  total_size += 1 * this->m_advance_size();
  for (int i = 0; i < this->m_advance_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_advance(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetAdvancelv::MergeFrom(const E_PetAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_advance_.MergeFrom(from.m_advance_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_advanceitem()) {
      set_m_advanceitem(from.m_advanceitem());
    }
    if (from.has_m_advancenum()) {
      set_m_advancenum(from.m_advancenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetAdvancelv::CopyFrom(const E_PetAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetAdvancelv::IsInitialized() const {

  return true;
}

void E_PetAdvancelv::Swap(E_PetAdvancelv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_advanceitem_, other->m_advanceitem_);
    std::swap(m_advancenum_, other->m_advancenum_);
    m_advance_.Swap(&other->m_advance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetAdvancelv_descriptor_;
  metadata.reflection = E_PetAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetAdvancelv::kEPetAdvancelvListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetAdvancelv::Sheet_PetAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetAdvancelv::InitAsDefaultInstance() {
}

Sheet_PetAdvancelv::Sheet_PetAdvancelv(const Sheet_PetAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetAdvancelv::~Sheet_PetAdvancelv() {
  SharedDtor();
}

void Sheet_PetAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetAdvancelv_descriptor_;
}

const Sheet_PetAdvancelv& Sheet_PetAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetAdvancelv* Sheet_PetAdvancelv::default_instance_ = NULL;

Sheet_PetAdvancelv* Sheet_PetAdvancelv::New() const {
  return new Sheet_PetAdvancelv;
}

void Sheet_PetAdvancelv::Clear() {
  e_petadvancelv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetAdvancelv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petadvancelv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetAdvancelv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petadvancelv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petadvancelv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetAdvancelv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetAdvancelv E_PetAdvancelv_List = 1;
  total_size += 1 * this->e_petadvancelv_list_size();
  for (int i = 0; i < this->e_petadvancelv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petadvancelv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetAdvancelv::MergeFrom(const Sheet_PetAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petadvancelv_list_.MergeFrom(from.e_petadvancelv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetAdvancelv::CopyFrom(const Sheet_PetAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetAdvancelv::IsInitialized() const {

  return true;
}

void Sheet_PetAdvancelv::Swap(Sheet_PetAdvancelv* other) {
  if (other != this) {
    e_petadvancelv_list_.Swap(&other->e_petadvancelv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetAdvancelv_descriptor_;
  metadata.reflection = Sheet_PetAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarupUpattributeDesc::kMValueFieldNumber;
const int E_PetStarupUpattributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetStarupUpattributeDesc::E_PetStarupUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarupUpattributeDesc::InitAsDefaultInstance() {
}

E_PetStarupUpattributeDesc::E_PetStarupUpattributeDesc(const E_PetStarupUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarupUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarupUpattributeDesc::~E_PetStarupUpattributeDesc() {
  SharedDtor();
}

void E_PetStarupUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarupUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarupUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarupUpattributeDesc_descriptor_;
}

const E_PetStarupUpattributeDesc& E_PetStarupUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStarupUpattributeDesc* E_PetStarupUpattributeDesc::default_instance_ = NULL;

E_PetStarupUpattributeDesc* E_PetStarupUpattributeDesc::New() const {
  return new E_PetStarupUpattributeDesc;
}

void E_PetStarupUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarupUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarupUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarupUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarupUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarupUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarupUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarupUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarupUpattributeDesc::MergeFrom(const E_PetStarupUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarupUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarupUpattributeDesc::CopyFrom(const E_PetStarupUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarupUpattributeDesc::IsInitialized() const {

  return true;
}

void E_PetStarupUpattributeDesc::Swap(E_PetStarupUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarupUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarupUpattributeDesc_descriptor_;
  metadata.reflection = E_PetStarupUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarup::kMIDFieldNumber;
const int E_PetStarup::kMUpAttributeIdFieldNumber;
const int E_PetStarup::kMStarIDFieldNumber;
const int E_PetStarup::kMSkillIDFieldNumber;
const int E_PetStarup::kMActiveSkillIDLvFieldNumber;
const int E_PetStarup::kMUpAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetStarup::E_PetStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarup::InitAsDefaultInstance() {
}

E_PetStarup::E_PetStarup(const E_PetStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_starid_ = 0;
  m_skillid_ = 0;
  m_activeskillidlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarup::~E_PetStarup() {
  SharedDtor();
}

void E_PetStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarup_descriptor_;
}

const E_PetStarup& E_PetStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStarup* E_PetStarup::default_instance_ = NULL;

E_PetStarup* E_PetStarup::New() const {
  return new E_PetStarup;
}

void E_PetStarup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_starid_ = 0;
    m_skillid_ = 0;
    m_activeskillidlv_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upAttributeId;
        break;
      }

      // optional int64 m_upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starID;
        break;
      }

      // optional int32 m_starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillID;
        break;
      }

      // optional int32 m_skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activeSkillIDLv;
        break;
      }

      // optional int32 m_activeSkillIDLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeSkillIDLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskillidlv_)));
          set_has_m_activeskillidlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_upAttribute;
        break;
      }

      // repeated .proto_ff.E_PetStarupUpattributeDesc m_upAttribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_upattributeid(), output);
  }

  // optional int32 m_starID = 3;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starid(), output);
  }

  // optional int32 m_skillID = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // optional int32 m_activeSkillIDLv = 5;
  if (has_m_activeskillidlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_activeskillidlv(), output);
  }

  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upAttribute = 6;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_upAttributeId = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_starID = 3;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starid(), target);
  }

  // optional int32 m_skillID = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // optional int32 m_activeSkillIDLv = 5;
  if (has_m_activeskillidlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_activeskillidlv(), target);
  }

  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upAttribute = 6;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_upAttributeId = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_starID = 3;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillID = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_activeSkillIDLv = 5;
    if (has_m_activeskillidlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskillidlv());
    }

  }
  // repeated .proto_ff.E_PetStarupUpattributeDesc m_upAttribute = 6;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarup::MergeFrom(const E_PetStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_activeskillidlv()) {
      set_m_activeskillidlv(from.m_activeskillidlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarup::CopyFrom(const E_PetStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarup::IsInitialized() const {

  return true;
}

void E_PetStarup::Swap(E_PetStarup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_activeskillidlv_, other->m_activeskillidlv_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarup_descriptor_;
  metadata.reflection = E_PetStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetStarup::kEPetStarupListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetStarup::Sheet_PetStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetStarup::InitAsDefaultInstance() {
}

Sheet_PetStarup::Sheet_PetStarup(const Sheet_PetStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetStarup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetStarup::~Sheet_PetStarup() {
  SharedDtor();
}

void Sheet_PetStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetStarup_descriptor_;
}

const Sheet_PetStarup& Sheet_PetStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetStarup* Sheet_PetStarup::default_instance_ = NULL;

Sheet_PetStarup* Sheet_PetStarup::New() const {
  return new Sheet_PetStarup;
}

void Sheet_PetStarup::Clear() {
  e_petstarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetStarup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petstarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetStarup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petstarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petstarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetStarup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetStarup E_PetStarup_List = 1;
  total_size += 1 * this->e_petstarup_list_size();
  for (int i = 0; i < this->e_petstarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petstarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetStarup::MergeFrom(const Sheet_PetStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petstarup_list_.MergeFrom(from.e_petstarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetStarup::CopyFrom(const Sheet_PetStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetStarup::IsInitialized() const {

  return true;
}

void Sheet_PetStarup::Swap(Sheet_PetStarup* other) {
  if (other != this) {
    e_petstarup_list_.Swap(&other->e_petstarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetStarup_descriptor_;
  metadata.reflection = Sheet_PetStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEggPetDesc::kMRandFieldNumber;
const int E_PetEggPetDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_PetEggPetDesc::E_PetEggPetDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEggPetDesc::InitAsDefaultInstance() {
}

E_PetEggPetDesc::E_PetEggPetDesc(const E_PetEggPetDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEggPetDesc::SharedCtor() {
  _cached_size_ = 0;
  m_rand_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEggPetDesc::~E_PetEggPetDesc() {
  SharedDtor();
}

void E_PetEggPetDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEggPetDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEggPetDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEggPetDesc_descriptor_;
}

const E_PetEggPetDesc& E_PetEggPetDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetEggPetDesc* E_PetEggPetDesc::default_instance_ = NULL;

E_PetEggPetDesc* E_PetEggPetDesc::New() const {
  return new E_PetEggPetDesc;
}

void E_PetEggPetDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_rand_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEggPetDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rand_)));
          set_has_m_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEggPetDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_rand = 1;
  if (has_m_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_rand(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEggPetDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_rand = 1;
  if (has_m_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_rand(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEggPetDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_rand = 1;
    if (has_m_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rand());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEggPetDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEggPetDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEggPetDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEggPetDesc::MergeFrom(const E_PetEggPetDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_rand()) {
      set_m_rand(from.m_rand());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEggPetDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEggPetDesc::CopyFrom(const E_PetEggPetDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEggPetDesc::IsInitialized() const {

  return true;
}

void E_PetEggPetDesc::Swap(E_PetEggPetDesc* other) {
  if (other != this) {
    std::swap(m_rand_, other->m_rand_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEggPetDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEggPetDesc_descriptor_;
  metadata.reflection = E_PetEggPetDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEgg::kMIdFieldNumber;
const int E_PetEgg::kMTimeFieldNumber;
const int E_PetEgg::kMPetFieldNumber;
#endif  // !_MSC_VER

E_PetEgg::E_PetEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEgg::InitAsDefaultInstance() {
}

E_PetEgg::E_PetEgg(const E_PetEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEgg::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEgg::~E_PetEgg() {
  SharedDtor();
}

void E_PetEgg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEgg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEgg_descriptor_;
}

const E_PetEgg& E_PetEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetEgg* E_PetEgg::default_instance_ = NULL;

E_PetEgg* E_PetEgg::New() const {
  return new E_PetEgg;
}

void E_PetEgg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_time_ = 0;
  }
  m_pet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_time;
        break;
      }

      // optional int32 m_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_pet;
        break;
      }

      // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_pet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  for (int i = 0; i < this->m_pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_pet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  for (int i = 0; i < this->m_pet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_pet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEgg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  // repeated .proto_ff.E_PetEggPetDesc m_pet = 3;
  total_size += 1 * this->m_pet_size();
  for (int i = 0; i < this->m_pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_pet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEgg::MergeFrom(const E_PetEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_pet_.MergeFrom(from.m_pet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEgg::CopyFrom(const E_PetEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEgg::IsInitialized() const {

  return true;
}

void E_PetEgg::Swap(E_PetEgg* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_time_, other->m_time_);
    m_pet_.Swap(&other->m_pet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEgg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEgg_descriptor_;
  metadata.reflection = E_PetEgg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetEgg::kEPetEggListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetEgg::Sheet_PetEgg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetEgg::InitAsDefaultInstance() {
}

Sheet_PetEgg::Sheet_PetEgg(const Sheet_PetEgg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetEgg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetEgg::~Sheet_PetEgg() {
  SharedDtor();
}

void Sheet_PetEgg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetEgg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetEgg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetEgg_descriptor_;
}

const Sheet_PetEgg& Sheet_PetEgg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetEgg* Sheet_PetEgg::default_instance_ = NULL;

Sheet_PetEgg* Sheet_PetEgg::New() const {
  return new Sheet_PetEgg;
}

void Sheet_PetEgg::Clear() {
  e_petegg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetEgg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetEgg_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petegg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetEgg_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetEgg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petegg_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetEgg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petegg_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetEgg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetEgg E_PetEgg_List = 1;
  total_size += 1 * this->e_petegg_list_size();
  for (int i = 0; i < this->e_petegg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petegg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetEgg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetEgg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetEgg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetEgg::MergeFrom(const Sheet_PetEgg& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petegg_list_.MergeFrom(from.e_petegg_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetEgg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetEgg::CopyFrom(const Sheet_PetEgg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetEgg::IsInitialized() const {

  return true;
}

void Sheet_PetEgg::Swap(Sheet_PetEgg* other) {
  if (other != this) {
    e_petegg_list_.Swap(&other->e_petegg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetEgg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetEgg_descriptor_;
  metadata.reflection = Sheet_PetEgg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDecomposeDecomposeDesc::kMBoxIDFieldNumber;
const int E_PetDecomposeDecomposeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetDecomposeDecomposeDesc::E_PetDecomposeDecomposeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDecomposeDecomposeDesc::InitAsDefaultInstance() {
}

E_PetDecomposeDecomposeDesc::E_PetDecomposeDecomposeDesc(const E_PetDecomposeDecomposeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDecomposeDecomposeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_boxid_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDecomposeDecomposeDesc::~E_PetDecomposeDecomposeDesc() {
  SharedDtor();
}

void E_PetDecomposeDecomposeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDecomposeDecomposeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDecomposeDecomposeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDecomposeDecomposeDesc_descriptor_;
}

const E_PetDecomposeDecomposeDesc& E_PetDecomposeDecomposeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetDecomposeDecomposeDesc* E_PetDecomposeDecomposeDesc::default_instance_ = NULL;

E_PetDecomposeDecomposeDesc* E_PetDecomposeDecomposeDesc::New() const {
  return new E_PetDecomposeDecomposeDesc;
}

void E_PetDecomposeDecomposeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_boxid_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDecomposeDecomposeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_boxID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDecomposeDecomposeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_boxID = 1;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_boxid(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDecomposeDecomposeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_boxID = 1;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_boxid(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDecomposeDecomposeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_boxID = 1;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDecomposeDecomposeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDecomposeDecomposeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDecomposeDecomposeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDecomposeDecomposeDesc::MergeFrom(const E_PetDecomposeDecomposeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDecomposeDecomposeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDecomposeDecomposeDesc::CopyFrom(const E_PetDecomposeDecomposeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDecomposeDecomposeDesc::IsInitialized() const {

  return true;
}

void E_PetDecomposeDecomposeDesc::Swap(E_PetDecomposeDecomposeDesc* other) {
  if (other != this) {
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDecomposeDecomposeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDecomposeDecomposeDesc_descriptor_;
  metadata.reflection = E_PetDecomposeDecomposeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetDecompose::kMIdFieldNumber;
const int E_PetDecompose::kMQualityFieldNumber;
const int E_PetDecompose::kMDecomposeFieldNumber;
#endif  // !_MSC_VER

E_PetDecompose::E_PetDecompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetDecompose::InitAsDefaultInstance() {
}

E_PetDecompose::E_PetDecompose(const E_PetDecompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetDecompose::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetDecompose::~E_PetDecompose() {
  SharedDtor();
}

void E_PetDecompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetDecompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetDecompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetDecompose_descriptor_;
}

const E_PetDecompose& E_PetDecompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetDecompose* E_PetDecompose::default_instance_ = NULL;

E_PetDecompose* E_PetDecompose::New() const {
  return new E_PetDecompose;
}

void E_PetDecompose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
  }
  m_decompose_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_decompose;
        break;
      }

      // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_decompose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_decompose()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_decompose;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  for (int i = 0; i < this->m_decompose_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_decompose(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetDecompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  for (int i = 0; i < this->m_decompose_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_decompose(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetDecompose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated .proto_ff.E_PetDecomposeDecomposeDesc m_decompose = 3;
  total_size += 1 * this->m_decompose_size();
  for (int i = 0; i < this->m_decompose_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_decompose(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetDecompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetDecompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetDecompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetDecompose::MergeFrom(const E_PetDecompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_decompose_.MergeFrom(from.m_decompose_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetDecompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetDecompose::CopyFrom(const E_PetDecompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetDecompose::IsInitialized() const {

  return true;
}

void E_PetDecompose::Swap(E_PetDecompose* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    m_decompose_.Swap(&other->m_decompose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetDecompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetDecompose_descriptor_;
  metadata.reflection = E_PetDecompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetDecompose::kEPetDecomposeListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetDecompose::Sheet_PetDecompose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetDecompose::InitAsDefaultInstance() {
}

Sheet_PetDecompose::Sheet_PetDecompose(const Sheet_PetDecompose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetDecompose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetDecompose::~Sheet_PetDecompose() {
  SharedDtor();
}

void Sheet_PetDecompose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetDecompose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetDecompose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetDecompose_descriptor_;
}

const Sheet_PetDecompose& Sheet_PetDecompose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetDecompose* Sheet_PetDecompose::default_instance_ = NULL;

Sheet_PetDecompose* Sheet_PetDecompose::New() const {
  return new Sheet_PetDecompose;
}

void Sheet_PetDecompose::Clear() {
  e_petdecompose_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetDecompose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetDecompose_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petdecompose_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetDecompose_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetDecompose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petdecompose_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetDecompose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petdecompose_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetDecompose::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetDecompose E_PetDecompose_List = 1;
  total_size += 1 * this->e_petdecompose_list_size();
  for (int i = 0; i < this->e_petdecompose_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petdecompose_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetDecompose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetDecompose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetDecompose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetDecompose::MergeFrom(const Sheet_PetDecompose& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petdecompose_list_.MergeFrom(from.e_petdecompose_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetDecompose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetDecompose::CopyFrom(const Sheet_PetDecompose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetDecompose::IsInitialized() const {

  return true;
}

void Sheet_PetDecompose::Swap(Sheet_PetDecompose* other) {
  if (other != this) {
    e_petdecompose_list_.Swap(&other->e_petdecompose_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetDecompose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetDecompose_descriptor_;
  metadata.reflection = Sheet_PetDecompose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetFettersAttributeDesc::kMValueFieldNumber;
const int E_PetFettersAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetFettersAttributeDesc::E_PetFettersAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetFettersAttributeDesc::InitAsDefaultInstance() {
}

E_PetFettersAttributeDesc::E_PetFettersAttributeDesc(const E_PetFettersAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetFettersAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetFettersAttributeDesc::~E_PetFettersAttributeDesc() {
  SharedDtor();
}

void E_PetFettersAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetFettersAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetFettersAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetFettersAttributeDesc_descriptor_;
}

const E_PetFettersAttributeDesc& E_PetFettersAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetFettersAttributeDesc* E_PetFettersAttributeDesc::default_instance_ = NULL;

E_PetFettersAttributeDesc* E_PetFettersAttributeDesc::New() const {
  return new E_PetFettersAttributeDesc;
}

void E_PetFettersAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetFettersAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetFettersAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetFettersAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetFettersAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetFettersAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetFettersAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetFettersAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetFettersAttributeDesc::MergeFrom(const E_PetFettersAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetFettersAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetFettersAttributeDesc::CopyFrom(const E_PetFettersAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetFettersAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetFettersAttributeDesc::Swap(E_PetFettersAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetFettersAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetFettersAttributeDesc_descriptor_;
  metadata.reflection = E_PetFettersAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetFetters::kMIdFieldNumber;
const int E_PetFetters::kMQualityFieldNumber;
const int E_PetFetters::kMPetIDFieldNumber;
const int E_PetFetters::kMAttributeFieldNumber;
const int E_PetFetters::kMAtctiveSkillIDFieldNumber;
#endif  // !_MSC_VER

E_PetFetters::E_PetFetters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetFetters::InitAsDefaultInstance() {
}

E_PetFetters::E_PetFetters(const E_PetFetters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetFetters::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetFetters::~E_PetFetters() {
  SharedDtor();
}

void E_PetFetters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetFetters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetFetters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetFetters_descriptor_;
}

const E_PetFetters& E_PetFetters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetFetters* E_PetFetters::default_instance_ = NULL;

E_PetFetters* E_PetFetters::New() const {
  return new E_PetFetters;
}

void E_PetFetters::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
  }
  m_petid_.Clear();
  m_attribute_.Clear();
  m_atctive_skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetFetters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_petID;
        break;
      }

      // repeated int32 m_petID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_petID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_petid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_petid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_petID;
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectTag(40)) goto parse_m_atctive_skillID;
        break;
      }

      // repeated int32 m_atctive_skillID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_atctive_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_atctive_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_atctive_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_atctive_skillID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetFetters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // repeated int32 m_petID = 3;
  for (int i = 0; i < this->m_petid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_petid(i), output);
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  // repeated int32 m_atctive_skillID = 5;
  for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_atctive_skillid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetFetters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // repeated int32 m_petID = 3;
  for (int i = 0; i < this->m_petid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_petid(i), target);
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  // repeated int32 m_atctive_skillID = 5;
  for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_atctive_skillid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetFetters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

  }
  // repeated int32 m_petID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_petid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_petid(i));
    }
    total_size += 1 * this->m_petid_size() + data_size;
  }

  // repeated .proto_ff.E_PetFettersAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated int32 m_atctive_skillID = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_atctive_skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_atctive_skillid(i));
    }
    total_size += 1 * this->m_atctive_skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetFetters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetFetters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetFetters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetFetters::MergeFrom(const E_PetFetters& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_petid_.MergeFrom(from.m_petid_);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_atctive_skillid_.MergeFrom(from.m_atctive_skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetFetters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetFetters::CopyFrom(const E_PetFetters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetFetters::IsInitialized() const {

  return true;
}

void E_PetFetters::Swap(E_PetFetters* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    m_petid_.Swap(&other->m_petid_);
    m_attribute_.Swap(&other->m_attribute_);
    m_atctive_skillid_.Swap(&other->m_atctive_skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetFetters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetFetters_descriptor_;
  metadata.reflection = E_PetFetters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetFetters::kEPetFettersListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetFetters::Sheet_PetFetters()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetFetters::InitAsDefaultInstance() {
}

Sheet_PetFetters::Sheet_PetFetters(const Sheet_PetFetters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetFetters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetFetters::~Sheet_PetFetters() {
  SharedDtor();
}

void Sheet_PetFetters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetFetters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetFetters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetFetters_descriptor_;
}

const Sheet_PetFetters& Sheet_PetFetters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetFetters* Sheet_PetFetters::default_instance_ = NULL;

Sheet_PetFetters* Sheet_PetFetters::New() const {
  return new Sheet_PetFetters;
}

void Sheet_PetFetters::Clear() {
  e_petfetters_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetFetters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetFetters_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petfetters_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetFetters_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetFetters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petfetters_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetFetters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petfetters_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetFetters::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetFetters E_PetFetters_List = 1;
  total_size += 1 * this->e_petfetters_list_size();
  for (int i = 0; i < this->e_petfetters_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petfetters_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetFetters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetFetters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetFetters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetFetters::MergeFrom(const Sheet_PetFetters& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petfetters_list_.MergeFrom(from.e_petfetters_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetFetters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetFetters::CopyFrom(const Sheet_PetFetters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetFetters::IsInitialized() const {

  return true;
}

void Sheet_PetFetters::Swap(Sheet_PetFetters* other) {
  if (other != this) {
    e_petfetters_list_.Swap(&other->e_petfetters_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetFetters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetFetters_descriptor_;
  metadata.reflection = Sheet_PetFetters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetPetequipActDesc::kMMunFieldNumber;
const int E_PetPetequipActDesc::kMTimeFieldNumber;
#endif  // !_MSC_VER

E_PetPetequipActDesc::E_PetPetequipActDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetPetequipActDesc::InitAsDefaultInstance() {
}

E_PetPetequipActDesc::E_PetPetequipActDesc(const E_PetPetequipActDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetPetequipActDesc::SharedCtor() {
  _cached_size_ = 0;
  m_mun_ = 0;
  m_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetPetequipActDesc::~E_PetPetequipActDesc() {
  SharedDtor();
}

void E_PetPetequipActDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetPetequipActDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetPetequipActDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetPetequipActDesc_descriptor_;
}

const E_PetPetequipActDesc& E_PetPetequipActDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetPetequipActDesc* E_PetPetequipActDesc::default_instance_ = NULL;

E_PetPetequipActDesc* E_PetPetequipActDesc::New() const {
  return new E_PetPetequipActDesc;
}

void E_PetPetequipActDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mun_ = 0;
    m_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetPetequipActDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Mun = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mun_)));
          set_has_m_mun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Time;
        break;
      }

      // optional int32 m_Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_time_)));
          set_has_m_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetPetequipActDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Mun = 1;
  if (has_m_mun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mun(), output);
  }

  // optional int32 m_Time = 2;
  if (has_m_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetPetequipActDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Mun = 1;
  if (has_m_mun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mun(), target);
  }

  // optional int32 m_Time = 2;
  if (has_m_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetPetequipActDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Mun = 1;
    if (has_m_mun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mun());
    }

    // optional int32 m_Time = 2;
    if (has_m_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetPetequipActDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetPetequipActDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetPetequipActDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetPetequipActDesc::MergeFrom(const E_PetPetequipActDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mun()) {
      set_m_mun(from.m_mun());
    }
    if (from.has_m_time()) {
      set_m_time(from.m_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetPetequipActDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetPetequipActDesc::CopyFrom(const E_PetPetequipActDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetPetequipActDesc::IsInitialized() const {

  return true;
}

void E_PetPetequipActDesc::Swap(E_PetPetequipActDesc* other) {
  if (other != this) {
    std::swap(m_mun_, other->m_mun_);
    std::swap(m_time_, other->m_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetPetequipActDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetPetequipActDesc_descriptor_;
  metadata.reflection = E_PetPetequipActDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetPetequip::kMPetFieldNumber;
const int E_PetPetequip::kMOrderIdFieldNumber;
const int E_PetPetequip::kMNameFieldNumber;
const int E_PetPetequip::kMQeuidItemFieldNumber;
const int E_PetPetequip::kMEquipQualityMinFieldNumber;
const int E_PetPetequip::kMEquipModelIdFieldNumber;
const int E_PetPetequip::kMForgingFieldNumber;
const int E_PetPetequip::kMStarFieldNumber;
const int E_PetPetequip::kMSkillFieldNumber;
const int E_PetPetequip::kMActFieldNumber;
#endif  // !_MSC_VER

E_PetPetequip::E_PetPetequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetPetequip::InitAsDefaultInstance() {
}

E_PetPetequip::E_PetPetequip(const E_PetPetequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetPetequip::SharedCtor() {
  _cached_size_ = 0;
  m_pet_ = 0;
  m_orderid_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_qeuiditem_ = 0;
  m_equipqualitymin_ = 0;
  m_equipmodelid_ = 0;
  m_forging_ = 0;
  m_star_ = 0;
  m_skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetPetequip::~E_PetPetequip() {
  SharedDtor();
}

void E_PetPetequip::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_skill_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skill_;
  }
  if (this != default_instance_) {
  }
}

void E_PetPetequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetPetequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetPetequip_descriptor_;
}

const E_PetPetequip& E_PetPetequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetPetequip* E_PetPetequip::default_instance_ = NULL;

E_PetPetequip* E_PetPetequip::New() const {
  return new E_PetPetequip;
}

void E_PetPetequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_pet_ = 0;
    m_orderid_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_qeuiditem_ = 0;
    m_equipqualitymin_ = 0;
    m_equipmodelid_ = 0;
    m_forging_ = 0;
    m_star_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_skill()) {
      if (m_skill_ != &::google::protobuf::internal::kEmptyString) {
        m_skill_->clear();
      }
    }
  }
  m_act_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetPetequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_pet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pet_)));
          set_has_m_pet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_orderId;
        break;
      }

      // optional int32 m_orderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_orderId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_orderid_)));
          set_has_m_orderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_name;
        break;
      }

      // optional string m_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_qeuidItem;
        break;
      }

      // optional int32 m_qeuidItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_qeuidItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_qeuiditem_)));
          set_has_m_qeuiditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_equipQualityMin;
        break;
      }

      // optional int32 m_equipQualityMin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipQualityMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipqualitymin_)));
          set_has_m_equipqualitymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_equipModelId;
        break;
      }

      // optional int32 m_equipModelId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipModelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipmodelid_)));
          set_has_m_equipmodelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_forging;
        break;
      }

      // optional int32 m_forging = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_forging:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_forging_)));
          set_has_m_forging();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_skill;
        break;
      }

      // optional string m_skill = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skill().data(), this->m_skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_act;
        break;
      }

      // repeated .proto_ff.E_PetPetequipActDesc m_act = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_act:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_act()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_act;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetPetequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_pet = 1;
  if (has_m_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_pet(), output);
  }

  // optional int32 m_orderId = 2;
  if (has_m_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_orderid(), output);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_name(), output);
  }

  // optional int32 m_qeuidItem = 4;
  if (has_m_qeuiditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_qeuiditem(), output);
  }

  // optional int32 m_equipQualityMin = 5;
  if (has_m_equipqualitymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_equipqualitymin(), output);
  }

  // optional int32 m_equipModelId = 6;
  if (has_m_equipmodelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_equipmodelid(), output);
  }

  // optional int32 m_forging = 7;
  if (has_m_forging()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_forging(), output);
  }

  // optional int32 m_star = 8;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_star(), output);
  }

  // optional string m_skill = 9;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill().data(), this->m_skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_skill(), output);
  }

  // repeated .proto_ff.E_PetPetequipActDesc m_act = 10;
  for (int i = 0; i < this->m_act_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_act(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetPetequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_pet = 1;
  if (has_m_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_pet(), target);
  }

  // optional int32 m_orderId = 2;
  if (has_m_orderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_orderid(), target);
  }

  // optional string m_name = 3;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_name(), target);
  }

  // optional int32 m_qeuidItem = 4;
  if (has_m_qeuiditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_qeuiditem(), target);
  }

  // optional int32 m_equipQualityMin = 5;
  if (has_m_equipqualitymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_equipqualitymin(), target);
  }

  // optional int32 m_equipModelId = 6;
  if (has_m_equipmodelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_equipmodelid(), target);
  }

  // optional int32 m_forging = 7;
  if (has_m_forging()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_forging(), target);
  }

  // optional int32 m_star = 8;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_star(), target);
  }

  // optional string m_skill = 9;
  if (has_m_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skill().data(), this->m_skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_skill(), target);
  }

  // repeated .proto_ff.E_PetPetequipActDesc m_act = 10;
  for (int i = 0; i < this->m_act_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_act(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetPetequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_pet = 1;
    if (has_m_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pet());
    }

    // optional int32 m_orderId = 2;
    if (has_m_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_orderid());
    }

    // optional string m_name = 3;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_qeuidItem = 4;
    if (has_m_qeuiditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_qeuiditem());
    }

    // optional int32 m_equipQualityMin = 5;
    if (has_m_equipqualitymin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipqualitymin());
    }

    // optional int32 m_equipModelId = 6;
    if (has_m_equipmodelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipmodelid());
    }

    // optional int32 m_forging = 7;
    if (has_m_forging()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_forging());
    }

    // optional int32 m_star = 8;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_skill = 9;
    if (has_m_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skill());
    }

  }
  // repeated .proto_ff.E_PetPetequipActDesc m_act = 10;
  total_size += 1 * this->m_act_size();
  for (int i = 0; i < this->m_act_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_act(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetPetequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetPetequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetPetequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetPetequip::MergeFrom(const E_PetPetequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_act_.MergeFrom(from.m_act_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_pet()) {
      set_m_pet(from.m_pet());
    }
    if (from.has_m_orderid()) {
      set_m_orderid(from.m_orderid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_qeuiditem()) {
      set_m_qeuiditem(from.m_qeuiditem());
    }
    if (from.has_m_equipqualitymin()) {
      set_m_equipqualitymin(from.m_equipqualitymin());
    }
    if (from.has_m_equipmodelid()) {
      set_m_equipmodelid(from.m_equipmodelid());
    }
    if (from.has_m_forging()) {
      set_m_forging(from.m_forging());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_skill()) {
      set_m_skill(from.m_skill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetPetequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetPetequip::CopyFrom(const E_PetPetequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetPetequip::IsInitialized() const {

  return true;
}

void E_PetPetequip::Swap(E_PetPetequip* other) {
  if (other != this) {
    std::swap(m_pet_, other->m_pet_);
    std::swap(m_orderid_, other->m_orderid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_qeuiditem_, other->m_qeuiditem_);
    std::swap(m_equipqualitymin_, other->m_equipqualitymin_);
    std::swap(m_equipmodelid_, other->m_equipmodelid_);
    std::swap(m_forging_, other->m_forging_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_skill_, other->m_skill_);
    m_act_.Swap(&other->m_act_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetPetequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetPetequip_descriptor_;
  metadata.reflection = E_PetPetequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetPetequip::kEPetPetequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetPetequip::Sheet_PetPetequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetPetequip::InitAsDefaultInstance() {
}

Sheet_PetPetequip::Sheet_PetPetequip(const Sheet_PetPetequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetPetequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetPetequip::~Sheet_PetPetequip() {
  SharedDtor();
}

void Sheet_PetPetequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetPetequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetPetequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetPetequip_descriptor_;
}

const Sheet_PetPetequip& Sheet_PetPetequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetPetequip* Sheet_PetPetequip::default_instance_ = NULL;

Sheet_PetPetequip* Sheet_PetPetequip::New() const {
  return new Sheet_PetPetequip;
}

void Sheet_PetPetequip::Clear() {
  e_petpetequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetPetequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetPetequip E_PetPetequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetPetequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petpetequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetPetequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetPetequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetPetequip E_PetPetequip_List = 1;
  for (int i = 0; i < this->e_petpetequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petpetequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetPetequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetPetequip E_PetPetequip_List = 1;
  for (int i = 0; i < this->e_petpetequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petpetequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetPetequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetPetequip E_PetPetequip_List = 1;
  total_size += 1 * this->e_petpetequip_list_size();
  for (int i = 0; i < this->e_petpetequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petpetequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetPetequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetPetequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetPetequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetPetequip::MergeFrom(const Sheet_PetPetequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petpetequip_list_.MergeFrom(from.e_petpetequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetPetequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetPetequip::CopyFrom(const Sheet_PetPetequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetPetequip::IsInitialized() const {

  return true;
}

void Sheet_PetPetequip::Swap(Sheet_PetPetequip* other) {
  if (other != this) {
    e_petpetequip_list_.Swap(&other->e_petpetequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetPetequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetPetequip_descriptor_;
  metadata.reflection = Sheet_PetPetequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEquipvalueAttributeDesc::kMValueFieldNumber;
const int E_PetEquipvalueAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetEquipvalueAttributeDesc::E_PetEquipvalueAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEquipvalueAttributeDesc::InitAsDefaultInstance() {
}

E_PetEquipvalueAttributeDesc::E_PetEquipvalueAttributeDesc(const E_PetEquipvalueAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEquipvalueAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEquipvalueAttributeDesc::~E_PetEquipvalueAttributeDesc() {
  SharedDtor();
}

void E_PetEquipvalueAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEquipvalueAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEquipvalueAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEquipvalueAttributeDesc_descriptor_;
}

const E_PetEquipvalueAttributeDesc& E_PetEquipvalueAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetEquipvalueAttributeDesc* E_PetEquipvalueAttributeDesc::default_instance_ = NULL;

E_PetEquipvalueAttributeDesc* E_PetEquipvalueAttributeDesc::New() const {
  return new E_PetEquipvalueAttributeDesc;
}

void E_PetEquipvalueAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEquipvalueAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEquipvalueAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEquipvalueAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEquipvalueAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEquipvalueAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEquipvalueAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEquipvalueAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEquipvalueAttributeDesc::MergeFrom(const E_PetEquipvalueAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEquipvalueAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEquipvalueAttributeDesc::CopyFrom(const E_PetEquipvalueAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEquipvalueAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetEquipvalueAttributeDesc::Swap(E_PetEquipvalueAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEquipvalueAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEquipvalueAttributeDesc_descriptor_;
  metadata.reflection = E_PetEquipvalueAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEquipvalueExtraDesc::kMValueFieldNumber;
const int E_PetEquipvalueExtraDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetEquipvalueExtraDesc::E_PetEquipvalueExtraDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEquipvalueExtraDesc::InitAsDefaultInstance() {
}

E_PetEquipvalueExtraDesc::E_PetEquipvalueExtraDesc(const E_PetEquipvalueExtraDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEquipvalueExtraDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEquipvalueExtraDesc::~E_PetEquipvalueExtraDesc() {
  SharedDtor();
}

void E_PetEquipvalueExtraDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEquipvalueExtraDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEquipvalueExtraDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEquipvalueExtraDesc_descriptor_;
}

const E_PetEquipvalueExtraDesc& E_PetEquipvalueExtraDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetEquipvalueExtraDesc* E_PetEquipvalueExtraDesc::default_instance_ = NULL;

E_PetEquipvalueExtraDesc* E_PetEquipvalueExtraDesc::New() const {
  return new E_PetEquipvalueExtraDesc;
}

void E_PetEquipvalueExtraDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEquipvalueExtraDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEquipvalueExtraDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEquipvalueExtraDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEquipvalueExtraDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEquipvalueExtraDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEquipvalueExtraDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEquipvalueExtraDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEquipvalueExtraDesc::MergeFrom(const E_PetEquipvalueExtraDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEquipvalueExtraDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEquipvalueExtraDesc::CopyFrom(const E_PetEquipvalueExtraDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEquipvalueExtraDesc::IsInitialized() const {

  return true;
}

void E_PetEquipvalueExtraDesc::Swap(E_PetEquipvalueExtraDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEquipvalueExtraDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEquipvalueExtraDesc_descriptor_;
  metadata.reflection = E_PetEquipvalueExtraDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetEquipvalue::kMIdFieldNumber;
const int E_PetEquipvalue::kMEquipValueFieldNumber;
const int E_PetEquipvalue::kMEquipLvFieldNumber;
const int E_PetEquipvalue::kMItemFieldNumber;
const int E_PetEquipvalue::kMWinProbFieldNumber;
const int E_PetEquipvalue::kMEquipItemFieldNumber;
const int E_PetEquipvalue::kMEquipMunFieldNumber;
const int E_PetEquipvalue::kMFailMaxFieldNumber;
const int E_PetEquipvalue::kMAttributeFieldNumber;
const int E_PetEquipvalue::kMExtraFieldNumber;
#endif  // !_MSC_VER

E_PetEquipvalue::E_PetEquipvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetEquipvalue::InitAsDefaultInstance() {
}

E_PetEquipvalue::E_PetEquipvalue(const E_PetEquipvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetEquipvalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_equipvalue_ = 0;
  m_equiplv_ = 0;
  m_item_ = 0;
  m_winprob_ = 0;
  m_equipitem_ = 0;
  m_equipmun_ = 0;
  m_failmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetEquipvalue::~E_PetEquipvalue() {
  SharedDtor();
}

void E_PetEquipvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetEquipvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetEquipvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetEquipvalue_descriptor_;
}

const E_PetEquipvalue& E_PetEquipvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetEquipvalue* E_PetEquipvalue::default_instance_ = NULL;

E_PetEquipvalue* E_PetEquipvalue::New() const {
  return new E_PetEquipvalue;
}

void E_PetEquipvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_equipvalue_ = 0;
    m_equiplv_ = 0;
    m_item_ = 0;
    m_winprob_ = 0;
    m_equipitem_ = 0;
    m_equipmun_ = 0;
    m_failmax_ = 0;
  }
  m_attribute_.Clear();
  m_extra_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetEquipvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_equipValue;
        break;
      }

      // optional int32 m_equipValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipvalue_)));
          set_has_m_equipvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_equipLv;
        break;
      }

      // optional int32 m_equipLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equiplv_)));
          set_has_m_equiplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_winProb;
        break;
      }

      // optional int32 m_winProb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winprob_)));
          set_has_m_winprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_equipItem;
        break;
      }

      // optional int32 m_equipItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipitem_)));
          set_has_m_equipitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_equipMun;
        break;
      }

      // optional int32 m_equipMun = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipMun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipmun_)));
          set_has_m_equipmun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_failMax;
        break;
      }

      // optional int32 m_failMax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_failMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_failmax_)));
          set_has_m_failmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_PetEquipvalueAttributeDesc m_Attribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_Attribute;
        if (input->ExpectTag(82)) goto parse_m_extra;
        break;
      }

      // repeated .proto_ff.E_PetEquipvalueExtraDesc m_extra = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_extra:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_extra()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_extra;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetEquipvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_equipValue = 2;
  if (has_m_equipvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_equipvalue(), output);
  }

  // optional int32 m_equipLv = 3;
  if (has_m_equiplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_equiplv(), output);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_item(), output);
  }

  // optional int32 m_winProb = 5;
  if (has_m_winprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_winprob(), output);
  }

  // optional int32 m_equipItem = 6;
  if (has_m_equipitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_equipitem(), output);
  }

  // optional int32 m_equipMun = 7;
  if (has_m_equipmun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_equipmun(), output);
  }

  // optional int32 m_failMax = 8;
  if (has_m_failmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_failmax(), output);
  }

  // repeated .proto_ff.E_PetEquipvalueAttributeDesc m_Attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_PetEquipvalueExtraDesc m_extra = 10;
  for (int i = 0; i < this->m_extra_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_extra(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetEquipvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_equipValue = 2;
  if (has_m_equipvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_equipvalue(), target);
  }

  // optional int32 m_equipLv = 3;
  if (has_m_equiplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_equiplv(), target);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_item(), target);
  }

  // optional int32 m_winProb = 5;
  if (has_m_winprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_winprob(), target);
  }

  // optional int32 m_equipItem = 6;
  if (has_m_equipitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_equipitem(), target);
  }

  // optional int32 m_equipMun = 7;
  if (has_m_equipmun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_equipmun(), target);
  }

  // optional int32 m_failMax = 8;
  if (has_m_failmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_failmax(), target);
  }

  // repeated .proto_ff.E_PetEquipvalueAttributeDesc m_Attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_PetEquipvalueExtraDesc m_extra = 10;
  for (int i = 0; i < this->m_extra_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_extra(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetEquipvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_equipValue = 2;
    if (has_m_equipvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipvalue());
    }

    // optional int32 m_equipLv = 3;
    if (has_m_equiplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equiplv());
    }

    // optional int32 m_item = 4;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_winProb = 5;
    if (has_m_winprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winprob());
    }

    // optional int32 m_equipItem = 6;
    if (has_m_equipitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipitem());
    }

    // optional int32 m_equipMun = 7;
    if (has_m_equipmun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipmun());
    }

    // optional int32 m_failMax = 8;
    if (has_m_failmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_failmax());
    }

  }
  // repeated .proto_ff.E_PetEquipvalueAttributeDesc m_Attribute = 9;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_PetEquipvalueExtraDesc m_extra = 10;
  total_size += 1 * this->m_extra_size();
  for (int i = 0; i < this->m_extra_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_extra(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetEquipvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetEquipvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetEquipvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetEquipvalue::MergeFrom(const E_PetEquipvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_extra_.MergeFrom(from.m_extra_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_equipvalue()) {
      set_m_equipvalue(from.m_equipvalue());
    }
    if (from.has_m_equiplv()) {
      set_m_equiplv(from.m_equiplv());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_winprob()) {
      set_m_winprob(from.m_winprob());
    }
    if (from.has_m_equipitem()) {
      set_m_equipitem(from.m_equipitem());
    }
    if (from.has_m_equipmun()) {
      set_m_equipmun(from.m_equipmun());
    }
    if (from.has_m_failmax()) {
      set_m_failmax(from.m_failmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetEquipvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetEquipvalue::CopyFrom(const E_PetEquipvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetEquipvalue::IsInitialized() const {

  return true;
}

void E_PetEquipvalue::Swap(E_PetEquipvalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_equipvalue_, other->m_equipvalue_);
    std::swap(m_equiplv_, other->m_equiplv_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_winprob_, other->m_winprob_);
    std::swap(m_equipitem_, other->m_equipitem_);
    std::swap(m_equipmun_, other->m_equipmun_);
    std::swap(m_failmax_, other->m_failmax_);
    m_attribute_.Swap(&other->m_attribute_);
    m_extra_.Swap(&other->m_extra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetEquipvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetEquipvalue_descriptor_;
  metadata.reflection = E_PetEquipvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetEquipvalue::kEPetEquipvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetEquipvalue::Sheet_PetEquipvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetEquipvalue::InitAsDefaultInstance() {
}

Sheet_PetEquipvalue::Sheet_PetEquipvalue(const Sheet_PetEquipvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetEquipvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetEquipvalue::~Sheet_PetEquipvalue() {
  SharedDtor();
}

void Sheet_PetEquipvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetEquipvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetEquipvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetEquipvalue_descriptor_;
}

const Sheet_PetEquipvalue& Sheet_PetEquipvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetEquipvalue* Sheet_PetEquipvalue::default_instance_ = NULL;

Sheet_PetEquipvalue* Sheet_PetEquipvalue::New() const {
  return new Sheet_PetEquipvalue;
}

void Sheet_PetEquipvalue::Clear() {
  e_petequipvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetEquipvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetEquipvalue E_PetEquipvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetEquipvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petequipvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetEquipvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetEquipvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetEquipvalue E_PetEquipvalue_List = 1;
  for (int i = 0; i < this->e_petequipvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petequipvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetEquipvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetEquipvalue E_PetEquipvalue_List = 1;
  for (int i = 0; i < this->e_petequipvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petequipvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetEquipvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetEquipvalue E_PetEquipvalue_List = 1;
  total_size += 1 * this->e_petequipvalue_list_size();
  for (int i = 0; i < this->e_petequipvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petequipvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetEquipvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetEquipvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetEquipvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetEquipvalue::MergeFrom(const Sheet_PetEquipvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petequipvalue_list_.MergeFrom(from.e_petequipvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetEquipvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetEquipvalue::CopyFrom(const Sheet_PetEquipvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetEquipvalue::IsInitialized() const {

  return true;
}

void Sheet_PetEquipvalue::Swap(Sheet_PetEquipvalue* other) {
  if (other != this) {
    e_petequipvalue_list_.Swap(&other->e_petequipvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetEquipvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetEquipvalue_descriptor_;
  metadata.reflection = Sheet_PetEquipvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarvalueAttributeDesc::kMValueFieldNumber;
const int E_PetStarvalueAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetStarvalueAttributeDesc::E_PetStarvalueAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarvalueAttributeDesc::InitAsDefaultInstance() {
}

E_PetStarvalueAttributeDesc::E_PetStarvalueAttributeDesc(const E_PetStarvalueAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarvalueAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarvalueAttributeDesc::~E_PetStarvalueAttributeDesc() {
  SharedDtor();
}

void E_PetStarvalueAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarvalueAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarvalueAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarvalueAttributeDesc_descriptor_;
}

const E_PetStarvalueAttributeDesc& E_PetStarvalueAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStarvalueAttributeDesc* E_PetStarvalueAttributeDesc::default_instance_ = NULL;

E_PetStarvalueAttributeDesc* E_PetStarvalueAttributeDesc::New() const {
  return new E_PetStarvalueAttributeDesc;
}

void E_PetStarvalueAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarvalueAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarvalueAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarvalueAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarvalueAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarvalueAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarvalueAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarvalueAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarvalueAttributeDesc::MergeFrom(const E_PetStarvalueAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarvalueAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarvalueAttributeDesc::CopyFrom(const E_PetStarvalueAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarvalueAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetStarvalueAttributeDesc::Swap(E_PetStarvalueAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarvalueAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarvalueAttributeDesc_descriptor_;
  metadata.reflection = E_PetStarvalueAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarvalueEquipDesc::kMMunFieldNumber;
const int E_PetStarvalueEquipDesc::kMItemFieldNumber;
#endif  // !_MSC_VER

E_PetStarvalueEquipDesc::E_PetStarvalueEquipDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarvalueEquipDesc::InitAsDefaultInstance() {
}

E_PetStarvalueEquipDesc::E_PetStarvalueEquipDesc(const E_PetStarvalueEquipDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarvalueEquipDesc::SharedCtor() {
  _cached_size_ = 0;
  m_mun_ = 0;
  m_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarvalueEquipDesc::~E_PetStarvalueEquipDesc() {
  SharedDtor();
}

void E_PetStarvalueEquipDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarvalueEquipDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarvalueEquipDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarvalueEquipDesc_descriptor_;
}

const E_PetStarvalueEquipDesc& E_PetStarvalueEquipDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStarvalueEquipDesc* E_PetStarvalueEquipDesc::default_instance_ = NULL;

E_PetStarvalueEquipDesc* E_PetStarvalueEquipDesc::New() const {
  return new E_PetStarvalueEquipDesc;
}

void E_PetStarvalueEquipDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_mun_ = 0;
    m_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarvalueEquipDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Mun = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mun_)));
          set_has_m_mun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Item;
        break;
      }

      // optional int32 m_Item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarvalueEquipDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Mun = 1;
  if (has_m_mun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_mun(), output);
  }

  // optional int32 m_Item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarvalueEquipDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Mun = 1;
  if (has_m_mun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_mun(), target);
  }

  // optional int32 m_Item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarvalueEquipDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Mun = 1;
    if (has_m_mun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mun());
    }

    // optional int32 m_Item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarvalueEquipDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarvalueEquipDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarvalueEquipDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarvalueEquipDesc::MergeFrom(const E_PetStarvalueEquipDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_mun()) {
      set_m_mun(from.m_mun());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarvalueEquipDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarvalueEquipDesc::CopyFrom(const E_PetStarvalueEquipDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarvalueEquipDesc::IsInitialized() const {

  return true;
}

void E_PetStarvalueEquipDesc::Swap(E_PetStarvalueEquipDesc* other) {
  if (other != this) {
    std::swap(m_mun_, other->m_mun_);
    std::swap(m_item_, other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarvalueEquipDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarvalueEquipDesc_descriptor_;
  metadata.reflection = E_PetStarvalueEquipDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStarvalue::kMIdFieldNumber;
const int E_PetStarvalue::kMStarValueFieldNumber;
const int E_PetStarvalue::kMStarLvFieldNumber;
const int E_PetStarvalue::kMAttributeFieldNumber;
const int E_PetStarvalue::kMAdvanceTypeFieldNumber;
const int E_PetStarvalue::kMEquipFieldNumber;
#endif  // !_MSC_VER

E_PetStarvalue::E_PetStarvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStarvalue::InitAsDefaultInstance() {
}

E_PetStarvalue::E_PetStarvalue(const E_PetStarvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStarvalue::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_starvalue_ = 0;
  m_starlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStarvalue::~E_PetStarvalue() {
  SharedDtor();
}

void E_PetStarvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStarvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStarvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStarvalue_descriptor_;
}

const E_PetStarvalue& E_PetStarvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStarvalue* E_PetStarvalue::default_instance_ = NULL;

E_PetStarvalue* E_PetStarvalue::New() const {
  return new E_PetStarvalue;
}

void E_PetStarvalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_starvalue_ = 0;
    m_starlv_ = 0;
  }
  m_attribute_.Clear();
  m_advance_type_.Clear();
  m_equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStarvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_starValue;
        break;
      }

      // optional int32 m_starValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starvalue_)));
          set_has_m_starvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starLv;
        break;
      }

      // optional int32 m_starLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starlv_)));
          set_has_m_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_PetStarvalueAttributeDesc m_Attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Attribute;
        if (input->ExpectTag(42)) goto parse_m_advance_Type;
        break;
      }

      // repeated string m_advance_Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_advance_Type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_advance_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_advance_type(this->m_advance_type_size() - 1).data(),
            this->m_advance_type(this->m_advance_type_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_advance_Type;
        if (input->ExpectTag(50)) goto parse_m_equip;
        break;
      }

      // repeated .proto_ff.E_PetStarvalueEquipDesc m_equip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_equip;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStarvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_starValue = 2;
  if (has_m_starvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_starvalue(), output);
  }

  // optional int32 m_starLv = 3;
  if (has_m_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starlv(), output);
  }

  // repeated .proto_ff.E_PetStarvalueAttributeDesc m_Attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  // repeated string m_advance_Type = 5;
  for (int i = 0; i < this->m_advance_type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_advance_type(i).data(), this->m_advance_type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_advance_type(i), output);
  }

  // repeated .proto_ff.E_PetStarvalueEquipDesc m_equip = 6;
  for (int i = 0; i < this->m_equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_equip(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStarvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_starValue = 2;
  if (has_m_starvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_starvalue(), target);
  }

  // optional int32 m_starLv = 3;
  if (has_m_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starlv(), target);
  }

  // repeated .proto_ff.E_PetStarvalueAttributeDesc m_Attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  // repeated string m_advance_Type = 5;
  for (int i = 0; i < this->m_advance_type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_advance_type(i).data(), this->m_advance_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->m_advance_type(i), target);
  }

  // repeated .proto_ff.E_PetStarvalueEquipDesc m_equip = 6;
  for (int i = 0; i < this->m_equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_equip(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStarvalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_starValue = 2;
    if (has_m_starvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starvalue());
    }

    // optional int32 m_starLv = 3;
    if (has_m_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starlv());
    }

  }
  // repeated .proto_ff.E_PetStarvalueAttributeDesc m_Attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated string m_advance_Type = 5;
  total_size += 1 * this->m_advance_type_size();
  for (int i = 0; i < this->m_advance_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_advance_type(i));
  }

  // repeated .proto_ff.E_PetStarvalueEquipDesc m_equip = 6;
  total_size += 1 * this->m_equip_size();
  for (int i = 0; i < this->m_equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStarvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStarvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStarvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStarvalue::MergeFrom(const E_PetStarvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_advance_type_.MergeFrom(from.m_advance_type_);
  m_equip_.MergeFrom(from.m_equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_starvalue()) {
      set_m_starvalue(from.m_starvalue());
    }
    if (from.has_m_starlv()) {
      set_m_starlv(from.m_starlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStarvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStarvalue::CopyFrom(const E_PetStarvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStarvalue::IsInitialized() const {

  return true;
}

void E_PetStarvalue::Swap(E_PetStarvalue* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_starvalue_, other->m_starvalue_);
    std::swap(m_starlv_, other->m_starlv_);
    m_attribute_.Swap(&other->m_attribute_);
    m_advance_type_.Swap(&other->m_advance_type_);
    m_equip_.Swap(&other->m_equip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStarvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStarvalue_descriptor_;
  metadata.reflection = E_PetStarvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetStarvalue::kEPetStarvalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetStarvalue::Sheet_PetStarvalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetStarvalue::InitAsDefaultInstance() {
}

Sheet_PetStarvalue::Sheet_PetStarvalue(const Sheet_PetStarvalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetStarvalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetStarvalue::~Sheet_PetStarvalue() {
  SharedDtor();
}

void Sheet_PetStarvalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetStarvalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetStarvalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetStarvalue_descriptor_;
}

const Sheet_PetStarvalue& Sheet_PetStarvalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetStarvalue* Sheet_PetStarvalue::default_instance_ = NULL;

Sheet_PetStarvalue* Sheet_PetStarvalue::New() const {
  return new Sheet_PetStarvalue;
}

void Sheet_PetStarvalue::Clear() {
  e_petstarvalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetStarvalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetStarvalue E_PetStarvalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetStarvalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petstarvalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetStarvalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetStarvalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetStarvalue E_PetStarvalue_List = 1;
  for (int i = 0; i < this->e_petstarvalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petstarvalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetStarvalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetStarvalue E_PetStarvalue_List = 1;
  for (int i = 0; i < this->e_petstarvalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petstarvalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetStarvalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetStarvalue E_PetStarvalue_List = 1;
  total_size += 1 * this->e_petstarvalue_list_size();
  for (int i = 0; i < this->e_petstarvalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petstarvalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetStarvalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetStarvalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetStarvalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetStarvalue::MergeFrom(const Sheet_PetStarvalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petstarvalue_list_.MergeFrom(from.e_petstarvalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetStarvalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetStarvalue::CopyFrom(const Sheet_PetStarvalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetStarvalue::IsInitialized() const {

  return true;
}

void Sheet_PetStarvalue::Swap(Sheet_PetStarvalue* other) {
  if (other != this) {
    e_petstarvalue_list_.Swap(&other->e_petstarvalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetStarvalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetStarvalue_descriptor_;
  metadata.reflection = Sheet_PetStarvalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetWraithsAttributeDesc::kMValueFieldNumber;
const int E_PetWraithsAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetWraithsAttributeDesc::E_PetWraithsAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetWraithsAttributeDesc::InitAsDefaultInstance() {
}

E_PetWraithsAttributeDesc::E_PetWraithsAttributeDesc(const E_PetWraithsAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetWraithsAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetWraithsAttributeDesc::~E_PetWraithsAttributeDesc() {
  SharedDtor();
}

void E_PetWraithsAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetWraithsAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetWraithsAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetWraithsAttributeDesc_descriptor_;
}

const E_PetWraithsAttributeDesc& E_PetWraithsAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetWraithsAttributeDesc* E_PetWraithsAttributeDesc::default_instance_ = NULL;

E_PetWraithsAttributeDesc* E_PetWraithsAttributeDesc::New() const {
  return new E_PetWraithsAttributeDesc;
}

void E_PetWraithsAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetWraithsAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetWraithsAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetWraithsAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetWraithsAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetWraithsAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetWraithsAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetWraithsAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetWraithsAttributeDesc::MergeFrom(const E_PetWraithsAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetWraithsAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetWraithsAttributeDesc::CopyFrom(const E_PetWraithsAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetWraithsAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetWraithsAttributeDesc::Swap(E_PetWraithsAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetWraithsAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetWraithsAttributeDesc_descriptor_;
  metadata.reflection = E_PetWraithsAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetWraithsAttributebctDesc::kMTypeFieldNumber;
const int E_PetWraithsAttributebctDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_PetWraithsAttributebctDesc::E_PetWraithsAttributebctDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetWraithsAttributebctDesc::InitAsDefaultInstance() {
}

E_PetWraithsAttributebctDesc::E_PetWraithsAttributebctDesc(const E_PetWraithsAttributebctDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetWraithsAttributebctDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetWraithsAttributebctDesc::~E_PetWraithsAttributebctDesc() {
  SharedDtor();
}

void E_PetWraithsAttributebctDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetWraithsAttributebctDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetWraithsAttributebctDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetWraithsAttributebctDesc_descriptor_;
}

const E_PetWraithsAttributebctDesc& E_PetWraithsAttributebctDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetWraithsAttributebctDesc* E_PetWraithsAttributebctDesc::default_instance_ = NULL;

E_PetWraithsAttributebctDesc* E_PetWraithsAttributebctDesc::New() const {
  return new E_PetWraithsAttributebctDesc;
}

void E_PetWraithsAttributebctDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetWraithsAttributebctDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetWraithsAttributebctDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetWraithsAttributebctDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetWraithsAttributebctDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetWraithsAttributebctDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetWraithsAttributebctDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetWraithsAttributebctDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetWraithsAttributebctDesc::MergeFrom(const E_PetWraithsAttributebctDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetWraithsAttributebctDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetWraithsAttributebctDesc::CopyFrom(const E_PetWraithsAttributebctDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetWraithsAttributebctDesc::IsInitialized() const {

  return true;
}

void E_PetWraithsAttributebctDesc::Swap(E_PetWraithsAttributebctDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetWraithsAttributebctDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetWraithsAttributebctDesc_descriptor_;
  metadata.reflection = E_PetWraithsAttributebctDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetWraiths::kMIdFieldNumber;
const int E_PetWraiths::kMNameFieldNumber;
const int E_PetWraiths::kMAffixFieldNumber;
const int E_PetWraiths::kMPositionFieldNumber;
const int E_PetWraiths::kMQualityFieldNumber;
const int E_PetWraiths::kMStarFieldNumber;
const int E_PetWraiths::kMPropertyLvFieldNumber;
const int E_PetWraiths::kMPropertyTopFieldNumber;
const int E_PetWraiths::kMAttributeFieldNumber;
const int E_PetWraiths::kMAttributeBctFieldNumber;
#endif  // !_MSC_VER

E_PetWraiths::E_PetWraiths()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetWraiths::InitAsDefaultInstance() {
}

E_PetWraiths::E_PetWraiths(const E_PetWraiths& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetWraiths::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_affix_ = 0;
  m_position_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_propertylv_ = 0;
  m_propertytop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetWraiths::~E_PetWraiths() {
  SharedDtor();
}

void E_PetWraiths::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_PetWraiths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetWraiths::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetWraiths_descriptor_;
}

const E_PetWraiths& E_PetWraiths::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetWraiths* E_PetWraiths::default_instance_ = NULL;

E_PetWraiths* E_PetWraiths::New() const {
  return new E_PetWraiths;
}

void E_PetWraiths::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_affix_ = 0;
    m_position_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_propertylv_ = 0;
    m_propertytop_ = 0;
  }
  m_attribute_.Clear();
  m_attributebct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetWraiths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_affix;
        break;
      }

      // optional int32 m_affix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_affix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_affix_)));
          set_has_m_affix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_propertyLv;
        break;
      }

      // optional int32 m_propertyLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_propertyLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertylv_)));
          set_has_m_propertylv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_propertyTop;
        break;
      }

      // optional int32 m_propertyTop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_propertyTop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_propertytop_)));
          set_has_m_propertytop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetWraithsAttributeDesc m_attribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_attribute;
        if (input->ExpectTag(82)) goto parse_m_attributeBct;
        break;
      }

      // repeated .proto_ff.E_PetWraithsAttributebctDesc m_attributeBct = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attributeBct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attributebct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_m_attributeBct;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetWraiths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_affix = 3;
  if (has_m_affix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_affix(), output);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_position(), output);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_quality(), output);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_star(), output);
  }

  // optional int32 m_propertyLv = 7;
  if (has_m_propertylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_propertylv(), output);
  }

  // optional int32 m_propertyTop = 8;
  if (has_m_propertytop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_propertytop(), output);
  }

  // repeated .proto_ff.E_PetWraithsAttributeDesc m_attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_PetWraithsAttributebctDesc m_attributeBct = 10;
  for (int i = 0; i < this->m_attributebct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->m_attributebct(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetWraiths::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_affix = 3;
  if (has_m_affix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_affix(), target);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_position(), target);
  }

  // optional int32 m_quality = 5;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_quality(), target);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_star(), target);
  }

  // optional int32 m_propertyLv = 7;
  if (has_m_propertylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_propertylv(), target);
  }

  // optional int32 m_propertyTop = 8;
  if (has_m_propertytop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_propertytop(), target);
  }

  // repeated .proto_ff.E_PetWraithsAttributeDesc m_attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_PetWraithsAttributebctDesc m_attributeBct = 10;
  for (int i = 0; i < this->m_attributebct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->m_attributebct(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetWraiths::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_affix = 3;
    if (has_m_affix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_affix());
    }

    // optional int32 m_position = 4;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_quality = 5;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 6;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_propertyLv = 7;
    if (has_m_propertylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertylv());
    }

    // optional int32 m_propertyTop = 8;
    if (has_m_propertytop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_propertytop());
    }

  }
  // repeated .proto_ff.E_PetWraithsAttributeDesc m_attribute = 9;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_PetWraithsAttributebctDesc m_attributeBct = 10;
  total_size += 1 * this->m_attributebct_size();
  for (int i = 0; i < this->m_attributebct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attributebct(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetWraiths::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetWraiths* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetWraiths*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetWraiths::MergeFrom(const E_PetWraiths& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_attributebct_.MergeFrom(from.m_attributebct_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_affix()) {
      set_m_affix(from.m_affix());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_propertylv()) {
      set_m_propertylv(from.m_propertylv());
    }
    if (from.has_m_propertytop()) {
      set_m_propertytop(from.m_propertytop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetWraiths::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetWraiths::CopyFrom(const E_PetWraiths& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetWraiths::IsInitialized() const {

  return true;
}

void E_PetWraiths::Swap(E_PetWraiths* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_affix_, other->m_affix_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_propertylv_, other->m_propertylv_);
    std::swap(m_propertytop_, other->m_propertytop_);
    m_attribute_.Swap(&other->m_attribute_);
    m_attributebct_.Swap(&other->m_attributebct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetWraiths::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetWraiths_descriptor_;
  metadata.reflection = E_PetWraiths_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetWraiths::kEPetWraithsListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetWraiths::Sheet_PetWraiths()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetWraiths::InitAsDefaultInstance() {
}

Sheet_PetWraiths::Sheet_PetWraiths(const Sheet_PetWraiths& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetWraiths::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetWraiths::~Sheet_PetWraiths() {
  SharedDtor();
}

void Sheet_PetWraiths::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetWraiths::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetWraiths::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetWraiths_descriptor_;
}

const Sheet_PetWraiths& Sheet_PetWraiths::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetWraiths* Sheet_PetWraiths::default_instance_ = NULL;

Sheet_PetWraiths* Sheet_PetWraiths::New() const {
  return new Sheet_PetWraiths;
}

void Sheet_PetWraiths::Clear() {
  e_petwraiths_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetWraiths::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetWraiths E_PetWraiths_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetWraiths_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petwraiths_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetWraiths_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetWraiths::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetWraiths E_PetWraiths_List = 1;
  for (int i = 0; i < this->e_petwraiths_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petwraiths_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetWraiths::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetWraiths E_PetWraiths_List = 1;
  for (int i = 0; i < this->e_petwraiths_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petwraiths_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetWraiths::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetWraiths E_PetWraiths_List = 1;
  total_size += 1 * this->e_petwraiths_list_size();
  for (int i = 0; i < this->e_petwraiths_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petwraiths_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetWraiths::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetWraiths* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetWraiths*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetWraiths::MergeFrom(const Sheet_PetWraiths& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petwraiths_list_.MergeFrom(from.e_petwraiths_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetWraiths::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetWraiths::CopyFrom(const Sheet_PetWraiths& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetWraiths::IsInitialized() const {

  return true;
}

void Sheet_PetWraiths::Swap(Sheet_PetWraiths* other) {
  if (other != this) {
    e_petwraiths_list_.Swap(&other->e_petwraiths_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetWraiths::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetWraiths_descriptor_;
  metadata.reflection = Sheet_PetWraiths_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetWraithslvAttributeDesc::kMValueFieldNumber;
const int E_PetWraithslvAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetWraithslvAttributeDesc::E_PetWraithslvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetWraithslvAttributeDesc::InitAsDefaultInstance() {
}

E_PetWraithslvAttributeDesc::E_PetWraithslvAttributeDesc(const E_PetWraithslvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetWraithslvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetWraithslvAttributeDesc::~E_PetWraithslvAttributeDesc() {
  SharedDtor();
}

void E_PetWraithslvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetWraithslvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetWraithslvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetWraithslvAttributeDesc_descriptor_;
}

const E_PetWraithslvAttributeDesc& E_PetWraithslvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetWraithslvAttributeDesc* E_PetWraithslvAttributeDesc::default_instance_ = NULL;

E_PetWraithslvAttributeDesc* E_PetWraithslvAttributeDesc::New() const {
  return new E_PetWraithslvAttributeDesc;
}

void E_PetWraithslvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetWraithslvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetWraithslvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetWraithslvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetWraithslvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetWraithslvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetWraithslvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetWraithslvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetWraithslvAttributeDesc::MergeFrom(const E_PetWraithslvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetWraithslvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetWraithslvAttributeDesc::CopyFrom(const E_PetWraithslvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetWraithslvAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetWraithslvAttributeDesc::Swap(E_PetWraithslvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetWraithslvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetWraithslvAttributeDesc_descriptor_;
  metadata.reflection = E_PetWraithslvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetWraithslv::kMIdFieldNumber;
const int E_PetWraithslv::kMValueFieldNumber;
const int E_PetWraithslv::kMAdvanceLvFieldNumber;
const int E_PetWraithslv::kMLvFieldNumber;
const int E_PetWraithslv::kMWraithsItemFieldNumber;
const int E_PetWraithslv::kMWraithsMunFieldNumber;
const int E_PetWraithslv::kMLvExpFieldNumber;
const int E_PetWraithslv::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetWraithslv::E_PetWraithslv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetWraithslv::InitAsDefaultInstance() {
}

E_PetWraithslv::E_PetWraithslv(const E_PetWraithslv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetWraithslv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  m_advancelv_ = 0;
  m_lv_ = 0;
  m_wraithsitem_ = 0;
  m_wraithsmun_ = 0;
  m_lvexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetWraithslv::~E_PetWraithslv() {
  SharedDtor();
}

void E_PetWraithslv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetWraithslv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetWraithslv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetWraithslv_descriptor_;
}

const E_PetWraithslv& E_PetWraithslv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetWraithslv* E_PetWraithslv::default_instance_ = NULL;

E_PetWraithslv* E_PetWraithslv::New() const {
  return new E_PetWraithslv;
}

void E_PetWraithslv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
    m_advancelv_ = 0;
    m_lv_ = 0;
    m_wraithsitem_ = 0;
    m_wraithsmun_ = 0;
    m_lvexp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetWraithslv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_advanceLv;
        break;
      }

      // optional int32 m_advanceLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_advanceLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_advancelv_)));
          set_has_m_advancelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_wraithsItem;
        break;
      }

      // optional int32 m_wraithsItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsitem_)));
          set_has_m_wraithsitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_wraithsMun;
        break;
      }

      // optional int32 m_wraithsMun = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsMun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsmun_)));
          set_has_m_wraithsmun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_lvExp;
        break;
      }

      // optional int32 m_lvExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvexp_)));
          set_has_m_lvexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetWraithslvAttributeDesc m_attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetWraithslv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  // optional int32 m_advanceLv = 3;
  if (has_m_advancelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_advancelv(), output);
  }

  // optional int32 m_lv = 4;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lv(), output);
  }

  // optional int32 m_wraithsItem = 5;
  if (has_m_wraithsitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_wraithsitem(), output);
  }

  // optional int32 m_wraithsMun = 6;
  if (has_m_wraithsmun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_wraithsmun(), output);
  }

  // optional int32 m_lvExp = 7;
  if (has_m_lvexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_lvexp(), output);
  }

  // repeated .proto_ff.E_PetWraithslvAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetWraithslv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  // optional int32 m_advanceLv = 3;
  if (has_m_advancelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_advancelv(), target);
  }

  // optional int32 m_lv = 4;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lv(), target);
  }

  // optional int32 m_wraithsItem = 5;
  if (has_m_wraithsitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_wraithsitem(), target);
  }

  // optional int32 m_wraithsMun = 6;
  if (has_m_wraithsmun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_wraithsmun(), target);
  }

  // optional int32 m_lvExp = 7;
  if (has_m_lvexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_lvexp(), target);
  }

  // repeated .proto_ff.E_PetWraithslvAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetWraithslv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_advanceLv = 3;
    if (has_m_advancelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_advancelv());
    }

    // optional int32 m_lv = 4;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_wraithsItem = 5;
    if (has_m_wraithsitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsitem());
    }

    // optional int32 m_wraithsMun = 6;
    if (has_m_wraithsmun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsmun());
    }

    // optional int32 m_lvExp = 7;
    if (has_m_lvexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvexp());
    }

  }
  // repeated .proto_ff.E_PetWraithslvAttributeDesc m_attribute = 8;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetWraithslv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetWraithslv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetWraithslv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetWraithslv::MergeFrom(const E_PetWraithslv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_advancelv()) {
      set_m_advancelv(from.m_advancelv());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_wraithsitem()) {
      set_m_wraithsitem(from.m_wraithsitem());
    }
    if (from.has_m_wraithsmun()) {
      set_m_wraithsmun(from.m_wraithsmun());
    }
    if (from.has_m_lvexp()) {
      set_m_lvexp(from.m_lvexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetWraithslv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetWraithslv::CopyFrom(const E_PetWraithslv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetWraithslv::IsInitialized() const {

  return true;
}

void E_PetWraithslv::Swap(E_PetWraithslv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_advancelv_, other->m_advancelv_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_wraithsitem_, other->m_wraithsitem_);
    std::swap(m_wraithsmun_, other->m_wraithsmun_);
    std::swap(m_lvexp_, other->m_lvexp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetWraithslv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetWraithslv_descriptor_;
  metadata.reflection = E_PetWraithslv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetWraithslv::kEPetWraithslvListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetWraithslv::Sheet_PetWraithslv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetWraithslv::InitAsDefaultInstance() {
}

Sheet_PetWraithslv::Sheet_PetWraithslv(const Sheet_PetWraithslv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetWraithslv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetWraithslv::~Sheet_PetWraithslv() {
  SharedDtor();
}

void Sheet_PetWraithslv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetWraithslv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetWraithslv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetWraithslv_descriptor_;
}

const Sheet_PetWraithslv& Sheet_PetWraithslv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetWraithslv* Sheet_PetWraithslv::default_instance_ = NULL;

Sheet_PetWraithslv* Sheet_PetWraithslv::New() const {
  return new Sheet_PetWraithslv;
}

void Sheet_PetWraithslv::Clear() {
  e_petwraithslv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetWraithslv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetWraithslv E_PetWraithslv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetWraithslv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petwraithslv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetWraithslv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetWraithslv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetWraithslv E_PetWraithslv_List = 1;
  for (int i = 0; i < this->e_petwraithslv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petwraithslv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetWraithslv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetWraithslv E_PetWraithslv_List = 1;
  for (int i = 0; i < this->e_petwraithslv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petwraithslv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetWraithslv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetWraithslv E_PetWraithslv_List = 1;
  total_size += 1 * this->e_petwraithslv_list_size();
  for (int i = 0; i < this->e_petwraithslv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petwraithslv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetWraithslv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetWraithslv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetWraithslv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetWraithslv::MergeFrom(const Sheet_PetWraithslv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petwraithslv_list_.MergeFrom(from.e_petwraithslv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetWraithslv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetWraithslv::CopyFrom(const Sheet_PetWraithslv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetWraithslv::IsInitialized() const {

  return true;
}

void Sheet_PetWraithslv::Swap(Sheet_PetWraithslv* other) {
  if (other != this) {
    e_petwraithslv_list_.Swap(&other->e_petwraithslv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetWraithslv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetWraithslv_descriptor_;
  metadata.reflection = Sheet_PetWraithslv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetSmeltItemDesc::kMMaxNumFieldNumber;
const int E_PetSmeltItemDesc::kMMinNumFieldNumber;
const int E_PetSmeltItemDesc::kMRarerandFieldNumber;
const int E_PetSmeltItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_PetSmeltItemDesc::E_PetSmeltItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetSmeltItemDesc::InitAsDefaultInstance() {
}

E_PetSmeltItemDesc::E_PetSmeltItemDesc(const E_PetSmeltItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetSmeltItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_maxnum_ = 0;
  m_minnum_ = 0;
  m_rarerand_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetSmeltItemDesc::~E_PetSmeltItemDesc() {
  SharedDtor();
}

void E_PetSmeltItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetSmeltItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetSmeltItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetSmeltItemDesc_descriptor_;
}

const E_PetSmeltItemDesc& E_PetSmeltItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetSmeltItemDesc* E_PetSmeltItemDesc::default_instance_ = NULL;

E_PetSmeltItemDesc* E_PetSmeltItemDesc::New() const {
  return new E_PetSmeltItemDesc;
}

void E_PetSmeltItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_maxnum_ = 0;
    m_minnum_ = 0;
    m_rarerand_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetSmeltItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_maxNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxnum_)));
          set_has_m_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_minNum;
        break;
      }

      // optional int32 m_minNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minnum_)));
          set_has_m_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rarerand;
        break;
      }

      // optional int32 m_rarerand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rarerand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rarerand_)));
          set_has_m_rarerand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetSmeltItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_maxNum = 1;
  if (has_m_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_maxnum(), output);
  }

  // optional int32 m_minNum = 2;
  if (has_m_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_minnum(), output);
  }

  // optional int32 m_rarerand = 3;
  if (has_m_rarerand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rarerand(), output);
  }

  // optional int32 m_id = 4;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetSmeltItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_maxNum = 1;
  if (has_m_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_maxnum(), target);
  }

  // optional int32 m_minNum = 2;
  if (has_m_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_minnum(), target);
  }

  // optional int32 m_rarerand = 3;
  if (has_m_rarerand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rarerand(), target);
  }

  // optional int32 m_id = 4;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetSmeltItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_maxNum = 1;
    if (has_m_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxnum());
    }

    // optional int32 m_minNum = 2;
    if (has_m_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minnum());
    }

    // optional int32 m_rarerand = 3;
    if (has_m_rarerand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rarerand());
    }

    // optional int32 m_id = 4;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetSmeltItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetSmeltItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetSmeltItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetSmeltItemDesc::MergeFrom(const E_PetSmeltItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_maxnum()) {
      set_m_maxnum(from.m_maxnum());
    }
    if (from.has_m_minnum()) {
      set_m_minnum(from.m_minnum());
    }
    if (from.has_m_rarerand()) {
      set_m_rarerand(from.m_rarerand());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetSmeltItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetSmeltItemDesc::CopyFrom(const E_PetSmeltItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetSmeltItemDesc::IsInitialized() const {

  return true;
}

void E_PetSmeltItemDesc::Swap(E_PetSmeltItemDesc* other) {
  if (other != this) {
    std::swap(m_maxnum_, other->m_maxnum_);
    std::swap(m_minnum_, other->m_minnum_);
    std::swap(m_rarerand_, other->m_rarerand_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetSmeltItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetSmeltItemDesc_descriptor_;
  metadata.reflection = E_PetSmeltItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetSmelt::kMIdFieldNumber;
const int E_PetSmelt::kMQualityFieldNumber;
const int E_PetSmelt::kMStarFieldNumber;
const int E_PetSmelt::kMPutMunFieldNumber;
const int E_PetSmelt::kMSmeltExpFieldNumber;
const int E_PetSmelt::kMMonsterNumFieldNumber;
const int E_PetSmelt::kMItemFieldNumber;
#endif  // !_MSC_VER

E_PetSmelt::E_PetSmelt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetSmelt::InitAsDefaultInstance() {
}

E_PetSmelt::E_PetSmelt(const E_PetSmelt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetSmelt::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_putmun_ = 0;
  m_smeltexp_ = 0;
  m_monsternum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetSmelt::~E_PetSmelt() {
  SharedDtor();
}

void E_PetSmelt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetSmelt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetSmelt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetSmelt_descriptor_;
}

const E_PetSmelt& E_PetSmelt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetSmelt* E_PetSmelt::default_instance_ = NULL;

E_PetSmelt* E_PetSmelt::New() const {
  return new E_PetSmelt;
}

void E_PetSmelt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_putmun_ = 0;
    m_smeltexp_ = 0;
    m_monsternum_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetSmelt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_putMun;
        break;
      }

      // optional int32 m_putMun = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_putMun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_putmun_)));
          set_has_m_putmun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_smeltExp;
        break;
      }

      // optional int32 m_smeltExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_smeltExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_smeltexp_)));
          set_has_m_smeltexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_monsterNum;
        break;
      }

      // optional int32 m_monsterNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsternum_)));
          set_has_m_monsternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_PetSmeltItemDesc m_item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetSmelt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_star(), output);
  }

  // optional int32 m_putMun = 4;
  if (has_m_putmun()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_putmun(), output);
  }

  // optional int32 m_smeltExp = 5;
  if (has_m_smeltexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_smeltexp(), output);
  }

  // optional int32 m_monsterNum = 6;
  if (has_m_monsternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_monsternum(), output);
  }

  // repeated .proto_ff.E_PetSmeltItemDesc m_item = 7;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetSmelt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_star(), target);
  }

  // optional int32 m_putMun = 4;
  if (has_m_putmun()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_putmun(), target);
  }

  // optional int32 m_smeltExp = 5;
  if (has_m_smeltexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_smeltexp(), target);
  }

  // optional int32 m_monsterNum = 6;
  if (has_m_monsternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_monsternum(), target);
  }

  // repeated .proto_ff.E_PetSmeltItemDesc m_item = 7;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetSmelt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 3;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_putMun = 4;
    if (has_m_putmun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_putmun());
    }

    // optional int32 m_smeltExp = 5;
    if (has_m_smeltexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_smeltexp());
    }

    // optional int32 m_monsterNum = 6;
    if (has_m_monsternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsternum());
    }

  }
  // repeated .proto_ff.E_PetSmeltItemDesc m_item = 7;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetSmelt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetSmelt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetSmelt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetSmelt::MergeFrom(const E_PetSmelt& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_putmun()) {
      set_m_putmun(from.m_putmun());
    }
    if (from.has_m_smeltexp()) {
      set_m_smeltexp(from.m_smeltexp());
    }
    if (from.has_m_monsternum()) {
      set_m_monsternum(from.m_monsternum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetSmelt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetSmelt::CopyFrom(const E_PetSmelt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetSmelt::IsInitialized() const {

  return true;
}

void E_PetSmelt::Swap(E_PetSmelt* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_putmun_, other->m_putmun_);
    std::swap(m_smeltexp_, other->m_smeltexp_);
    std::swap(m_monsternum_, other->m_monsternum_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetSmelt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetSmelt_descriptor_;
  metadata.reflection = E_PetSmelt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetSmelt::kEPetSmeltListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetSmelt::Sheet_PetSmelt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetSmelt::InitAsDefaultInstance() {
}

Sheet_PetSmelt::Sheet_PetSmelt(const Sheet_PetSmelt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetSmelt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetSmelt::~Sheet_PetSmelt() {
  SharedDtor();
}

void Sheet_PetSmelt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetSmelt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetSmelt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetSmelt_descriptor_;
}

const Sheet_PetSmelt& Sheet_PetSmelt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetSmelt* Sheet_PetSmelt::default_instance_ = NULL;

Sheet_PetSmelt* Sheet_PetSmelt::New() const {
  return new Sheet_PetSmelt;
}

void Sheet_PetSmelt::Clear() {
  e_petsmelt_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetSmelt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetSmelt E_PetSmelt_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetSmelt_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petsmelt_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetSmelt_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetSmelt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetSmelt E_PetSmelt_List = 1;
  for (int i = 0; i < this->e_petsmelt_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petsmelt_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetSmelt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetSmelt E_PetSmelt_List = 1;
  for (int i = 0; i < this->e_petsmelt_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petsmelt_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetSmelt::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetSmelt E_PetSmelt_List = 1;
  total_size += 1 * this->e_petsmelt_list_size();
  for (int i = 0; i < this->e_petsmelt_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petsmelt_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetSmelt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetSmelt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetSmelt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetSmelt::MergeFrom(const Sheet_PetSmelt& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petsmelt_list_.MergeFrom(from.e_petsmelt_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetSmelt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetSmelt::CopyFrom(const Sheet_PetSmelt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetSmelt::IsInitialized() const {

  return true;
}

void Sheet_PetSmelt::Swap(Sheet_PetSmelt* other) {
  if (other != this) {
    e_petsmelt_list_.Swap(&other->e_petsmelt_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetSmelt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetSmelt_descriptor_;
  metadata.reflection = Sheet_PetSmelt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetRefineconversion::kMItemidFieldNumber;
const int E_PetRefineconversion::kMGroupFieldNumber;
const int E_PetRefineconversion::kMNumFieldNumber;
const int E_PetRefineconversion::kMConditionFieldNumber;
#endif  // !_MSC_VER

E_PetRefineconversion::E_PetRefineconversion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetRefineconversion::InitAsDefaultInstance() {
}

E_PetRefineconversion::E_PetRefineconversion(const E_PetRefineconversion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetRefineconversion::SharedCtor() {
  _cached_size_ = 0;
  m_itemid_ = 0;
  m_group_ = 0;
  m_num_ = 0;
  m_condition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetRefineconversion::~E_PetRefineconversion() {
  SharedDtor();
}

void E_PetRefineconversion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetRefineconversion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetRefineconversion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetRefineconversion_descriptor_;
}

const E_PetRefineconversion& E_PetRefineconversion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetRefineconversion* E_PetRefineconversion::default_instance_ = NULL;

E_PetRefineconversion* E_PetRefineconversion::New() const {
  return new E_PetRefineconversion;
}

void E_PetRefineconversion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_itemid_ = 0;
    m_group_ = 0;
    m_num_ = 0;
    m_condition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetRefineconversion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetRefineconversion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_itemid = 1;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_itemid(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  // optional int32 m_condition = 4;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetRefineconversion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_itemid = 1;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_itemid(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  // optional int32 m_condition = 4;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetRefineconversion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_itemid = 1;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_condition = 4;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetRefineconversion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetRefineconversion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetRefineconversion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetRefineconversion::MergeFrom(const E_PetRefineconversion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetRefineconversion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetRefineconversion::CopyFrom(const E_PetRefineconversion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetRefineconversion::IsInitialized() const {

  return true;
}

void E_PetRefineconversion::Swap(E_PetRefineconversion* other) {
  if (other != this) {
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetRefineconversion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetRefineconversion_descriptor_;
  metadata.reflection = E_PetRefineconversion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetRefineconversion::kEPetRefineconversionListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetRefineconversion::Sheet_PetRefineconversion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetRefineconversion::InitAsDefaultInstance() {
}

Sheet_PetRefineconversion::Sheet_PetRefineconversion(const Sheet_PetRefineconversion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetRefineconversion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetRefineconversion::~Sheet_PetRefineconversion() {
  SharedDtor();
}

void Sheet_PetRefineconversion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetRefineconversion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetRefineconversion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetRefineconversion_descriptor_;
}

const Sheet_PetRefineconversion& Sheet_PetRefineconversion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetRefineconversion* Sheet_PetRefineconversion::default_instance_ = NULL;

Sheet_PetRefineconversion* Sheet_PetRefineconversion::New() const {
  return new Sheet_PetRefineconversion;
}

void Sheet_PetRefineconversion::Clear() {
  e_petrefineconversion_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetRefineconversion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetRefineconversion E_PetRefineconversion_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetRefineconversion_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petrefineconversion_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetRefineconversion_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetRefineconversion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetRefineconversion E_PetRefineconversion_List = 1;
  for (int i = 0; i < this->e_petrefineconversion_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petrefineconversion_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetRefineconversion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetRefineconversion E_PetRefineconversion_List = 1;
  for (int i = 0; i < this->e_petrefineconversion_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petrefineconversion_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetRefineconversion::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetRefineconversion E_PetRefineconversion_List = 1;
  total_size += 1 * this->e_petrefineconversion_list_size();
  for (int i = 0; i < this->e_petrefineconversion_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petrefineconversion_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetRefineconversion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetRefineconversion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetRefineconversion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetRefineconversion::MergeFrom(const Sheet_PetRefineconversion& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petrefineconversion_list_.MergeFrom(from.e_petrefineconversion_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetRefineconversion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetRefineconversion::CopyFrom(const Sheet_PetRefineconversion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetRefineconversion::IsInitialized() const {

  return true;
}

void Sheet_PetRefineconversion::Swap(Sheet_PetRefineconversion* other) {
  if (other != this) {
    e_petrefineconversion_list_.Swap(&other->e_petrefineconversion_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetRefineconversion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetRefineconversion_descriptor_;
  metadata.reflection = Sheet_PetRefineconversion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStoveStoveDesc::kMNumFieldNumber;
const int E_PetStoveStoveDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_PetStoveStoveDesc::E_PetStoveStoveDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStoveStoveDesc::InitAsDefaultInstance() {
}

E_PetStoveStoveDesc::E_PetStoveStoveDesc(const E_PetStoveStoveDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStoveStoveDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStoveStoveDesc::~E_PetStoveStoveDesc() {
  SharedDtor();
}

void E_PetStoveStoveDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStoveStoveDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStoveStoveDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStoveStoveDesc_descriptor_;
}

const E_PetStoveStoveDesc& E_PetStoveStoveDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStoveStoveDesc* E_PetStoveStoveDesc::default_instance_ = NULL;

E_PetStoveStoveDesc* E_PetStoveStoveDesc::New() const {
  return new E_PetStoveStoveDesc;
}

void E_PetStoveStoveDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStoveStoveDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStoveStoveDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStoveStoveDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStoveStoveDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStoveStoveDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStoveStoveDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStoveStoveDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStoveStoveDesc::MergeFrom(const E_PetStoveStoveDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStoveStoveDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStoveStoveDesc::CopyFrom(const E_PetStoveStoveDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStoveStoveDesc::IsInitialized() const {

  return true;
}

void E_PetStoveStoveDesc::Swap(E_PetStoveStoveDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStoveStoveDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStoveStoveDesc_descriptor_;
  metadata.reflection = E_PetStoveStoveDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetStove::kMLvFieldNumber;
const int E_PetStove::kMExpFieldNumber;
const int E_PetStove::kMQualityFieldNumber;
const int E_PetStove::kMStarFieldNumber;
const int E_PetStove::kMStoveFieldNumber;
#endif  // !_MSC_VER

E_PetStove::E_PetStove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetStove::InitAsDefaultInstance() {
}

E_PetStove::E_PetStove(const E_PetStove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetStove::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetStove::~E_PetStove() {
  SharedDtor();
}

void E_PetStove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetStove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetStove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetStove_descriptor_;
}

const E_PetStove& E_PetStove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetStove* E_PetStove::default_instance_ = NULL;

E_PetStove* E_PetStove::New() const {
  return new E_PetStove;
}

void E_PetStove::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
  }
  m_stove_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetStove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_stove;
        break;
      }

      // repeated .proto_ff.E_PetStoveStoveDesc m_stove = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_stove:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_stove()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_stove;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetStove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_quality(), output);
  }

  // optional int32 m_star = 4;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_star(), output);
  }

  // repeated .proto_ff.E_PetStoveStoveDesc m_stove = 5;
  for (int i = 0; i < this->m_stove_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_stove(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetStove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // optional int32 m_quality = 3;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_quality(), target);
  }

  // optional int32 m_star = 4;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_star(), target);
  }

  // repeated .proto_ff.E_PetStoveStoveDesc m_stove = 5;
  for (int i = 0; i < this->m_stove_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_stove(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetStove::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_quality = 3;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 4;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

  }
  // repeated .proto_ff.E_PetStoveStoveDesc m_stove = 5;
  total_size += 1 * this->m_stove_size();
  for (int i = 0; i < this->m_stove_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_stove(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetStove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetStove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetStove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetStove::MergeFrom(const E_PetStove& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_stove_.MergeFrom(from.m_stove_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetStove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetStove::CopyFrom(const E_PetStove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetStove::IsInitialized() const {

  return true;
}

void E_PetStove::Swap(E_PetStove* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    m_stove_.Swap(&other->m_stove_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetStove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetStove_descriptor_;
  metadata.reflection = E_PetStove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetStove::kEPetStoveListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetStove::Sheet_PetStove()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetStove::InitAsDefaultInstance() {
}

Sheet_PetStove::Sheet_PetStove(const Sheet_PetStove& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetStove::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetStove::~Sheet_PetStove() {
  SharedDtor();
}

void Sheet_PetStove::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetStove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetStove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetStove_descriptor_;
}

const Sheet_PetStove& Sheet_PetStove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetStove* Sheet_PetStove::default_instance_ = NULL;

Sheet_PetStove* Sheet_PetStove::New() const {
  return new Sheet_PetStove;
}

void Sheet_PetStove::Clear() {
  e_petstove_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetStove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetStove E_PetStove_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetStove_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petstove_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetStove_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetStove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetStove E_PetStove_List = 1;
  for (int i = 0; i < this->e_petstove_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petstove_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetStove::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetStove E_PetStove_List = 1;
  for (int i = 0; i < this->e_petstove_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petstove_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetStove::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetStove E_PetStove_List = 1;
  total_size += 1 * this->e_petstove_list_size();
  for (int i = 0; i < this->e_petstove_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petstove_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetStove::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetStove* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetStove*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetStove::MergeFrom(const Sheet_PetStove& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petstove_list_.MergeFrom(from.e_petstove_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetStove::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetStove::CopyFrom(const Sheet_PetStove& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetStove::IsInitialized() const {

  return true;
}

void Sheet_PetStove::Swap(Sheet_PetStove* other) {
  if (other != this) {
    e_petstove_list_.Swap(&other->e_petstove_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetStove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetStove_descriptor_;
  metadata.reflection = Sheet_PetStove_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetSuitAttributeDesc::kMValueFieldNumber;
const int E_PetSuitAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetSuitAttributeDesc::E_PetSuitAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetSuitAttributeDesc::InitAsDefaultInstance() {
}

E_PetSuitAttributeDesc::E_PetSuitAttributeDesc(const E_PetSuitAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetSuitAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetSuitAttributeDesc::~E_PetSuitAttributeDesc() {
  SharedDtor();
}

void E_PetSuitAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetSuitAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetSuitAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetSuitAttributeDesc_descriptor_;
}

const E_PetSuitAttributeDesc& E_PetSuitAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetSuitAttributeDesc* E_PetSuitAttributeDesc::default_instance_ = NULL;

E_PetSuitAttributeDesc* E_PetSuitAttributeDesc::New() const {
  return new E_PetSuitAttributeDesc;
}

void E_PetSuitAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetSuitAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetSuitAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetSuitAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetSuitAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetSuitAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetSuitAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetSuitAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetSuitAttributeDesc::MergeFrom(const E_PetSuitAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetSuitAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetSuitAttributeDesc::CopyFrom(const E_PetSuitAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetSuitAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetSuitAttributeDesc::Swap(E_PetSuitAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetSuitAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetSuitAttributeDesc_descriptor_;
  metadata.reflection = E_PetSuitAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetSuit::kMIdFieldNumber;
const int E_PetSuit::kMQualityFieldNumber;
const int E_PetSuit::kMStarFieldNumber;
const int E_PetSuit::kMWraithsQualityFieldNumber;
const int E_PetSuit::kMPieceFieldNumber;
const int E_PetSuit::kMResonanceTypeFieldNumber;
const int E_PetSuit::kMResonanceValueFieldNumber;
const int E_PetSuit::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetSuit::E_PetSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetSuit::InitAsDefaultInstance() {
}

E_PetSuit::E_PetSuit(const E_PetSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetSuit::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_wraithsquality_ = 0;
  m_piece_ = 0;
  m_resonancetype_ = 0;
  m_resonancevalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetSuit::~E_PetSuit() {
  SharedDtor();
}

void E_PetSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetSuit_descriptor_;
}

const E_PetSuit& E_PetSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetSuit* E_PetSuit::default_instance_ = NULL;

E_PetSuit* E_PetSuit::New() const {
  return new E_PetSuit;
}

void E_PetSuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_wraithsquality_ = 0;
    m_piece_ = 0;
    m_resonancetype_ = 0;
    m_resonancevalue_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_wraithsQuality;
        break;
      }

      // optional int32 m_wraithsQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wraithsQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wraithsquality_)));
          set_has_m_wraithsquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_piece;
        break;
      }

      // optional int32 m_piece = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_piece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_piece_)));
          set_has_m_piece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_resonanceType;
        break;
      }

      // optional int32 m_resonanceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resonanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resonancetype_)));
          set_has_m_resonancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_resonanceValue;
        break;
      }

      // optional int32 m_resonanceValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_resonanceValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_resonancevalue_)));
          set_has_m_resonancevalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_Attribute;
        break;
      }

      // repeated .proto_ff.E_PetSuitAttributeDesc m_Attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_Attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_star(), output);
  }

  // optional int32 m_wraithsQuality = 4;
  if (has_m_wraithsquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_wraithsquality(), output);
  }

  // optional int32 m_piece = 5;
  if (has_m_piece()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_piece(), output);
  }

  // optional int32 m_resonanceType = 6;
  if (has_m_resonancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_resonancetype(), output);
  }

  // optional int32 m_resonanceValue = 7;
  if (has_m_resonancevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_resonancevalue(), output);
  }

  // repeated .proto_ff.E_PetSuitAttributeDesc m_Attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_star = 3;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_star(), target);
  }

  // optional int32 m_wraithsQuality = 4;
  if (has_m_wraithsquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_wraithsquality(), target);
  }

  // optional int32 m_piece = 5;
  if (has_m_piece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_piece(), target);
  }

  // optional int32 m_resonanceType = 6;
  if (has_m_resonancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_resonancetype(), target);
  }

  // optional int32 m_resonanceValue = 7;
  if (has_m_resonancevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_resonancevalue(), target);
  }

  // repeated .proto_ff.E_PetSuitAttributeDesc m_Attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetSuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 3;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_wraithsQuality = 4;
    if (has_m_wraithsquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wraithsquality());
    }

    // optional int32 m_piece = 5;
    if (has_m_piece()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_piece());
    }

    // optional int32 m_resonanceType = 6;
    if (has_m_resonancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resonancetype());
    }

    // optional int32 m_resonanceValue = 7;
    if (has_m_resonancevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_resonancevalue());
    }

  }
  // repeated .proto_ff.E_PetSuitAttributeDesc m_Attribute = 8;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetSuit::MergeFrom(const E_PetSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_wraithsquality()) {
      set_m_wraithsquality(from.m_wraithsquality());
    }
    if (from.has_m_piece()) {
      set_m_piece(from.m_piece());
    }
    if (from.has_m_resonancetype()) {
      set_m_resonancetype(from.m_resonancetype());
    }
    if (from.has_m_resonancevalue()) {
      set_m_resonancevalue(from.m_resonancevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetSuit::CopyFrom(const E_PetSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetSuit::IsInitialized() const {

  return true;
}

void E_PetSuit::Swap(E_PetSuit* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_wraithsquality_, other->m_wraithsquality_);
    std::swap(m_piece_, other->m_piece_);
    std::swap(m_resonancetype_, other->m_resonancetype_);
    std::swap(m_resonancevalue_, other->m_resonancevalue_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetSuit_descriptor_;
  metadata.reflection = E_PetSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetSuit::kEPetSuitListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetSuit::Sheet_PetSuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetSuit::InitAsDefaultInstance() {
}

Sheet_PetSuit::Sheet_PetSuit(const Sheet_PetSuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetSuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetSuit::~Sheet_PetSuit() {
  SharedDtor();
}

void Sheet_PetSuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetSuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetSuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetSuit_descriptor_;
}

const Sheet_PetSuit& Sheet_PetSuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetSuit* Sheet_PetSuit::default_instance_ = NULL;

Sheet_PetSuit* Sheet_PetSuit::New() const {
  return new Sheet_PetSuit;
}

void Sheet_PetSuit::Clear() {
  e_petsuit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetSuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetSuit E_PetSuit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetSuit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petsuit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetSuit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetSuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetSuit E_PetSuit_List = 1;
  for (int i = 0; i < this->e_petsuit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petsuit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetSuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetSuit E_PetSuit_List = 1;
  for (int i = 0; i < this->e_petsuit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petsuit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetSuit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetSuit E_PetSuit_List = 1;
  total_size += 1 * this->e_petsuit_list_size();
  for (int i = 0; i < this->e_petsuit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petsuit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetSuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetSuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetSuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetSuit::MergeFrom(const Sheet_PetSuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petsuit_list_.MergeFrom(from.e_petsuit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetSuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetSuit::CopyFrom(const Sheet_PetSuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetSuit::IsInitialized() const {

  return true;
}

void Sheet_PetSuit::Swap(Sheet_PetSuit* other) {
  if (other != this) {
    e_petsuit_list_.Swap(&other->e_petsuit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetSuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetSuit_descriptor_;
  metadata.reflection = Sheet_PetSuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetConstMaterialDesc::kMExpFieldNumber;
const int E_PetConstMaterialDesc::kMItemFieldNumber;
#endif  // !_MSC_VER

E_PetConstMaterialDesc::E_PetConstMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetConstMaterialDesc::InitAsDefaultInstance() {
}

E_PetConstMaterialDesc::E_PetConstMaterialDesc(const E_PetConstMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetConstMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_exp_ = 0;
  m_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetConstMaterialDesc::~E_PetConstMaterialDesc() {
  SharedDtor();
}

void E_PetConstMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetConstMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetConstMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetConstMaterialDesc_descriptor_;
}

const E_PetConstMaterialDesc& E_PetConstMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetConstMaterialDesc* E_PetConstMaterialDesc::default_instance_ = NULL;

E_PetConstMaterialDesc* E_PetConstMaterialDesc::New() const {
  return new E_PetConstMaterialDesc;
}

void E_PetConstMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_exp_ = 0;
    m_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetConstMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetConstMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_exp(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetConstMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_exp = 1;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_exp(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetConstMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_exp = 1;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetConstMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetConstMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetConstMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetConstMaterialDesc::MergeFrom(const E_PetConstMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetConstMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetConstMaterialDesc::CopyFrom(const E_PetConstMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetConstMaterialDesc::IsInitialized() const {

  return true;
}

void E_PetConstMaterialDesc::Swap(E_PetConstMaterialDesc* other) {
  if (other != this) {
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_item_, other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetConstMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetConstMaterialDesc_descriptor_;
  metadata.reflection = E_PetConstMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetConst::kMIdFieldNumber;
const int E_PetConst::kMOpenFieldNumber;
const int E_PetConst::kMSoltFieldNumber;
const int E_PetConst::kMItemFieldNumber;
const int E_PetConst::kMNumFieldNumber;
const int E_PetConst::kMMaterialFieldNumber;
#endif  // !_MSC_VER

E_PetConst::E_PetConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetConst::InitAsDefaultInstance() {
}

E_PetConst::E_PetConst(const E_PetConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetConst::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_open_ = 0;
  m_solt_ = 0;
  m_item_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetConst::~E_PetConst() {
  SharedDtor();
}

void E_PetConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetConst_descriptor_;
}

const E_PetConst& E_PetConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetConst* E_PetConst::default_instance_ = NULL;

E_PetConst* E_PetConst::New() const {
  return new E_PetConst;
}

void E_PetConst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_open_ = 0;
    m_solt_ = 0;
    m_item_ = 0;
    m_num_ = 0;
  }
  m_material_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_open;
        break;
      }

      // optional int32 m_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_open_)));
          set_has_m_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_solt;
        break;
      }

      // optional int32 m_solt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_solt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_solt_)));
          set_has_m_solt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_PetConstMaterialDesc m_material = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_material;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_open = 2;
  if (has_m_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_open(), output);
  }

  // optional int32 m_solt = 3;
  if (has_m_solt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_solt(), output);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_item(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // repeated .proto_ff.E_PetConstMaterialDesc m_material = 6;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_material(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_open = 2;
  if (has_m_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_open(), target);
  }

  // optional int32 m_solt = 3;
  if (has_m_solt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_solt(), target);
  }

  // optional int32 m_item = 4;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_item(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // repeated .proto_ff.E_PetConstMaterialDesc m_material = 6;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_material(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetConst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_open = 2;
    if (has_m_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_open());
    }

    // optional int32 m_solt = 3;
    if (has_m_solt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_solt());
    }

    // optional int32 m_item = 4;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_PetConstMaterialDesc m_material = 6;
  total_size += 1 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetConst::MergeFrom(const E_PetConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_open()) {
      set_m_open(from.m_open());
    }
    if (from.has_m_solt()) {
      set_m_solt(from.m_solt());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetConst::CopyFrom(const E_PetConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetConst::IsInitialized() const {

  return true;
}

void E_PetConst::Swap(E_PetConst* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_open_, other->m_open_);
    std::swap(m_solt_, other->m_solt_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_num_, other->m_num_);
    m_material_.Swap(&other->m_material_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetConst_descriptor_;
  metadata.reflection = E_PetConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetConst::kEPetConstListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetConst::Sheet_PetConst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetConst::InitAsDefaultInstance() {
}

Sheet_PetConst::Sheet_PetConst(const Sheet_PetConst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetConst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetConst::~Sheet_PetConst() {
  SharedDtor();
}

void Sheet_PetConst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetConst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetConst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetConst_descriptor_;
}

const Sheet_PetConst& Sheet_PetConst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetConst* Sheet_PetConst::default_instance_ = NULL;

Sheet_PetConst* Sheet_PetConst::New() const {
  return new Sheet_PetConst;
}

void Sheet_PetConst::Clear() {
  e_petconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetConst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetConst E_PetConst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetConst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetConst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetConst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetConst E_PetConst_List = 1;
  for (int i = 0; i < this->e_petconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetConst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetConst E_PetConst_List = 1;
  for (int i = 0; i < this->e_petconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetConst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetConst E_PetConst_List = 1;
  total_size += 1 * this->e_petconst_list_size();
  for (int i = 0; i < this->e_petconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetConst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetConst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetConst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetConst::MergeFrom(const Sheet_PetConst& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petconst_list_.MergeFrom(from.e_petconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetConst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetConst::CopyFrom(const Sheet_PetConst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetConst::IsInitialized() const {

  return true;
}

void Sheet_PetConst::Swap(Sheet_PetConst* other) {
  if (other != this) {
    e_petconst_list_.Swap(&other->e_petconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetConst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetConst_descriptor_;
  metadata.reflection = Sheet_PetConst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetTopAttributeDesc::kMValueFieldNumber;
const int E_PetTopAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_PetTopAttributeDesc::E_PetTopAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetTopAttributeDesc::InitAsDefaultInstance() {
}

E_PetTopAttributeDesc::E_PetTopAttributeDesc(const E_PetTopAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetTopAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetTopAttributeDesc::~E_PetTopAttributeDesc() {
  SharedDtor();
}

void E_PetTopAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetTopAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetTopAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetTopAttributeDesc_descriptor_;
}

const E_PetTopAttributeDesc& E_PetTopAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetTopAttributeDesc* E_PetTopAttributeDesc::default_instance_ = NULL;

E_PetTopAttributeDesc* E_PetTopAttributeDesc::New() const {
  return new E_PetTopAttributeDesc;
}

void E_PetTopAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetTopAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetTopAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetTopAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetTopAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetTopAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetTopAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetTopAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetTopAttributeDesc::MergeFrom(const E_PetTopAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetTopAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetTopAttributeDesc::CopyFrom(const E_PetTopAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetTopAttributeDesc::IsInitialized() const {

  return true;
}

void E_PetTopAttributeDesc::Swap(E_PetTopAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetTopAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetTopAttributeDesc_descriptor_;
  metadata.reflection = E_PetTopAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetTop::kMTopTypeFieldNumber;
const int E_PetTop::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_PetTop::E_PetTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetTop::InitAsDefaultInstance() {
}

E_PetTop::E_PetTop(const E_PetTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetTop::SharedCtor() {
  _cached_size_ = 0;
  m_toptype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetTop::~E_PetTop() {
  SharedDtor();
}

void E_PetTop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetTop_descriptor_;
}

const E_PetTop& E_PetTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetTop* E_PetTop::default_instance_ = NULL;

E_PetTop* E_PetTop::New() const {
  return new E_PetTop;
}

void E_PetTop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_toptype_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_topType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_toptype_)));
          set_has_m_toptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_PetTopAttributeDesc m_attribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_topType = 1;
  if (has_m_toptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_toptype(), output);
  }

  // repeated .proto_ff.E_PetTopAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_topType = 1;
  if (has_m_toptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_toptype(), target);
  }

  // repeated .proto_ff.E_PetTopAttributeDesc m_attribute = 2;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetTop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_topType = 1;
    if (has_m_toptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_toptype());
    }

  }
  // repeated .proto_ff.E_PetTopAttributeDesc m_attribute = 2;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetTop::MergeFrom(const E_PetTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_toptype()) {
      set_m_toptype(from.m_toptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetTop::CopyFrom(const E_PetTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetTop::IsInitialized() const {

  return true;
}

void E_PetTop::Swap(E_PetTop* other) {
  if (other != this) {
    std::swap(m_toptype_, other->m_toptype_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetTop_descriptor_;
  metadata.reflection = E_PetTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetTop::kEPetTopListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetTop::Sheet_PetTop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetTop::InitAsDefaultInstance() {
}

Sheet_PetTop::Sheet_PetTop(const Sheet_PetTop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetTop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetTop::~Sheet_PetTop() {
  SharedDtor();
}

void Sheet_PetTop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetTop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetTop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetTop_descriptor_;
}

const Sheet_PetTop& Sheet_PetTop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetTop* Sheet_PetTop::default_instance_ = NULL;

Sheet_PetTop* Sheet_PetTop::New() const {
  return new Sheet_PetTop;
}

void Sheet_PetTop::Clear() {
  e_pettop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetTop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetTop E_PetTop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetTop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pettop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetTop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetTop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetTop E_PetTop_List = 1;
  for (int i = 0; i < this->e_pettop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pettop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetTop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetTop E_PetTop_List = 1;
  for (int i = 0; i < this->e_pettop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pettop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetTop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetTop E_PetTop_List = 1;
  total_size += 1 * this->e_pettop_list_size();
  for (int i = 0; i < this->e_pettop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pettop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetTop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetTop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetTop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetTop::MergeFrom(const Sheet_PetTop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pettop_list_.MergeFrom(from.e_pettop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetTop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetTop::CopyFrom(const Sheet_PetTop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetTop::IsInitialized() const {

  return true;
}

void Sheet_PetTop::Swap(Sheet_PetTop* other) {
  if (other != this) {
    e_pettop_list_.Swap(&other->e_pettop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetTop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetTop_descriptor_;
  metadata.reflection = Sheet_PetTop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetTopitem::kMLvFieldNumber;
const int E_PetTopitem::kMItemFieldNumber;
const int E_PetTopitem::kMNumFieldNumber;
#endif  // !_MSC_VER

E_PetTopitem::E_PetTopitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetTopitem::InitAsDefaultInstance() {
}

E_PetTopitem::E_PetTopitem(const E_PetTopitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetTopitem::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_item_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetTopitem::~E_PetTopitem() {
  SharedDtor();
}

void E_PetTopitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetTopitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetTopitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetTopitem_descriptor_;
}

const E_PetTopitem& E_PetTopitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetTopitem* E_PetTopitem::default_instance_ = NULL;

E_PetTopitem* E_PetTopitem::New() const {
  return new E_PetTopitem;
}

void E_PetTopitem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_item_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetTopitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetTopitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetTopitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  // optional int32 m_num = 3;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetTopitem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

    // optional int32 m_num = 3;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetTopitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetTopitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetTopitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetTopitem::MergeFrom(const E_PetTopitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetTopitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetTopitem::CopyFrom(const E_PetTopitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetTopitem::IsInitialized() const {

  return true;
}

void E_PetTopitem::Swap(E_PetTopitem* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetTopitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetTopitem_descriptor_;
  metadata.reflection = E_PetTopitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetTopitem::kEPetTopitemListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetTopitem::Sheet_PetTopitem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetTopitem::InitAsDefaultInstance() {
}

Sheet_PetTopitem::Sheet_PetTopitem(const Sheet_PetTopitem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetTopitem::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetTopitem::~Sheet_PetTopitem() {
  SharedDtor();
}

void Sheet_PetTopitem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetTopitem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetTopitem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetTopitem_descriptor_;
}

const Sheet_PetTopitem& Sheet_PetTopitem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetTopitem* Sheet_PetTopitem::default_instance_ = NULL;

Sheet_PetTopitem* Sheet_PetTopitem::New() const {
  return new Sheet_PetTopitem;
}

void Sheet_PetTopitem::Clear() {
  e_pettopitem_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetTopitem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetTopitem E_PetTopitem_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetTopitem_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_pettopitem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetTopitem_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetTopitem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetTopitem E_PetTopitem_List = 1;
  for (int i = 0; i < this->e_pettopitem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_pettopitem_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetTopitem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetTopitem E_PetTopitem_List = 1;
  for (int i = 0; i < this->e_pettopitem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_pettopitem_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetTopitem::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetTopitem E_PetTopitem_List = 1;
  total_size += 1 * this->e_pettopitem_list_size();
  for (int i = 0; i < this->e_pettopitem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_pettopitem_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetTopitem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetTopitem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetTopitem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetTopitem::MergeFrom(const Sheet_PetTopitem& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_pettopitem_list_.MergeFrom(from.e_pettopitem_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetTopitem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetTopitem::CopyFrom(const Sheet_PetTopitem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetTopitem::IsInitialized() const {

  return true;
}

void Sheet_PetTopitem::Swap(Sheet_PetTopitem* other) {
  if (other != this) {
    e_pettopitem_list_.Swap(&other->e_pettopitem_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetTopitem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetTopitem_descriptor_;
  metadata.reflection = Sheet_PetTopitem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetPrivilegePrivilegeDesc::kMValueFieldNumber;
const int E_PetPrivilegePrivilegeDesc::kMAttFieldNumber;
#endif  // !_MSC_VER

E_PetPrivilegePrivilegeDesc::E_PetPrivilegePrivilegeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetPrivilegePrivilegeDesc::InitAsDefaultInstance() {
}

E_PetPrivilegePrivilegeDesc::E_PetPrivilegePrivilegeDesc(const E_PetPrivilegePrivilegeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetPrivilegePrivilegeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_att_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetPrivilegePrivilegeDesc::~E_PetPrivilegePrivilegeDesc() {
  SharedDtor();
}

void E_PetPrivilegePrivilegeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_PetPrivilegePrivilegeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetPrivilegePrivilegeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetPrivilegePrivilegeDesc_descriptor_;
}

const E_PetPrivilegePrivilegeDesc& E_PetPrivilegePrivilegeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetPrivilegePrivilegeDesc* E_PetPrivilegePrivilegeDesc::default_instance_ = NULL;

E_PetPrivilegePrivilegeDesc* E_PetPrivilegePrivilegeDesc::New() const {
  return new E_PetPrivilegePrivilegeDesc;
}

void E_PetPrivilegePrivilegeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_att_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetPrivilegePrivilegeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_att;
        break;
      }

      // optional int32 m_att = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_att:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_att_)));
          set_has_m_att();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetPrivilegePrivilegeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_att(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetPrivilegePrivilegeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_att = 2;
  if (has_m_att()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_att(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetPrivilegePrivilegeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_att = 2;
    if (has_m_att()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_att());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetPrivilegePrivilegeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetPrivilegePrivilegeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetPrivilegePrivilegeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetPrivilegePrivilegeDesc::MergeFrom(const E_PetPrivilegePrivilegeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_att()) {
      set_m_att(from.m_att());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetPrivilegePrivilegeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetPrivilegePrivilegeDesc::CopyFrom(const E_PetPrivilegePrivilegeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetPrivilegePrivilegeDesc::IsInitialized() const {

  return true;
}

void E_PetPrivilegePrivilegeDesc::Swap(E_PetPrivilegePrivilegeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_att_, other->m_att_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetPrivilegePrivilegeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetPrivilegePrivilegeDesc_descriptor_;
  metadata.reflection = E_PetPrivilegePrivilegeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_PetPrivilege::kMIdFieldNumber;
const int E_PetPrivilege::kMActivateFieldNumber;
const int E_PetPrivilege::kMDoubleItemFieldNumber;
const int E_PetPrivilege::kMExperienceExpFieldNumber;
const int E_PetPrivilege::kMPrivilegeFieldNumber;
#endif  // !_MSC_VER

E_PetPrivilege::E_PetPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_PetPrivilege::InitAsDefaultInstance() {
}

E_PetPrivilege::E_PetPrivilege(const E_PetPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_PetPrivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_activate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_doubleitem_ = 0;
  m_experienceexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_PetPrivilege::~E_PetPrivilege() {
  SharedDtor();
}

void E_PetPrivilege::SharedDtor() {
  if (m_activate_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activate_;
  }
  if (this != default_instance_) {
  }
}

void E_PetPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_PetPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_PetPrivilege_descriptor_;
}

const E_PetPrivilege& E_PetPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

E_PetPrivilege* E_PetPrivilege::default_instance_ = NULL;

E_PetPrivilege* E_PetPrivilege::New() const {
  return new E_PetPrivilege;
}

void E_PetPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_activate()) {
      if (m_activate_ != &::google::protobuf::internal::kEmptyString) {
        m_activate_->clear();
      }
    }
    m_doubleitem_ = 0;
    m_experienceexp_ = 0;
  }
  m_privilege_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_PetPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_activate;
        break;
      }

      // optional string m_activate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activate().data(), this->m_activate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_doubleItem;
        break;
      }

      // optional int32 m_doubleItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_doubleItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_doubleitem_)));
          set_has_m_doubleitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_experienceExp;
        break;
      }

      // optional int32 m_experienceExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_experienceExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_experienceexp_)));
          set_has_m_experienceexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_privilege;
        break;
      }

      // repeated .proto_ff.E_PetPrivilegePrivilegeDesc m_privilege = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_privilege:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_privilege()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_privilege;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_PetPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_activate = 2;
  if (has_m_activate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activate().data(), this->m_activate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_activate(), output);
  }

  // optional int32 m_doubleItem = 3;
  if (has_m_doubleitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_doubleitem(), output);
  }

  // optional int32 m_experienceExp = 4;
  if (has_m_experienceexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_experienceexp(), output);
  }

  // repeated .proto_ff.E_PetPrivilegePrivilegeDesc m_privilege = 5;
  for (int i = 0; i < this->m_privilege_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_privilege(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_PetPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_activate = 2;
  if (has_m_activate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activate().data(), this->m_activate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_activate(), target);
  }

  // optional int32 m_doubleItem = 3;
  if (has_m_doubleitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_doubleitem(), target);
  }

  // optional int32 m_experienceExp = 4;
  if (has_m_experienceexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_experienceexp(), target);
  }

  // repeated .proto_ff.E_PetPrivilegePrivilegeDesc m_privilege = 5;
  for (int i = 0; i < this->m_privilege_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_privilege(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_PetPrivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_activate = 2;
    if (has_m_activate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activate());
    }

    // optional int32 m_doubleItem = 3;
    if (has_m_doubleitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_doubleitem());
    }

    // optional int32 m_experienceExp = 4;
    if (has_m_experienceexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_experienceexp());
    }

  }
  // repeated .proto_ff.E_PetPrivilegePrivilegeDesc m_privilege = 5;
  total_size += 1 * this->m_privilege_size();
  for (int i = 0; i < this->m_privilege_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_privilege(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_PetPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_PetPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_PetPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_PetPrivilege::MergeFrom(const E_PetPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_privilege_.MergeFrom(from.m_privilege_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_activate()) {
      set_m_activate(from.m_activate());
    }
    if (from.has_m_doubleitem()) {
      set_m_doubleitem(from.m_doubleitem());
    }
    if (from.has_m_experienceexp()) {
      set_m_experienceexp(from.m_experienceexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_PetPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_PetPrivilege::CopyFrom(const E_PetPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_PetPrivilege::IsInitialized() const {

  return true;
}

void E_PetPrivilege::Swap(E_PetPrivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_activate_, other->m_activate_);
    std::swap(m_doubleitem_, other->m_doubleitem_);
    std::swap(m_experienceexp_, other->m_experienceexp_);
    m_privilege_.Swap(&other->m_privilege_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_PetPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_PetPrivilege_descriptor_;
  metadata.reflection = E_PetPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_PetPrivilege::kEPetPrivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_PetPrivilege::Sheet_PetPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_PetPrivilege::InitAsDefaultInstance() {
}

Sheet_PetPrivilege::Sheet_PetPrivilege(const Sheet_PetPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_PetPrivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_PetPrivilege::~Sheet_PetPrivilege() {
  SharedDtor();
}

void Sheet_PetPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_PetPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_PetPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_PetPrivilege_descriptor_;
}

const Sheet_PetPrivilege& Sheet_PetPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fPet_2eproto();
  return *default_instance_;
}

Sheet_PetPrivilege* Sheet_PetPrivilege::default_instance_ = NULL;

Sheet_PetPrivilege* Sheet_PetPrivilege::New() const {
  return new Sheet_PetPrivilege;
}

void Sheet_PetPrivilege::Clear() {
  e_petprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_PetPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_PetPrivilege E_PetPrivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_PetPrivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_petprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_PetPrivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_PetPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_PetPrivilege E_PetPrivilege_List = 1;
  for (int i = 0; i < this->e_petprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_petprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_PetPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_PetPrivilege E_PetPrivilege_List = 1;
  for (int i = 0; i < this->e_petprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_petprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_PetPrivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_PetPrivilege E_PetPrivilege_List = 1;
  total_size += 1 * this->e_petprivilege_list_size();
  for (int i = 0; i < this->e_petprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_petprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_PetPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_PetPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_PetPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_PetPrivilege::MergeFrom(const Sheet_PetPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_petprivilege_list_.MergeFrom(from.e_petprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_PetPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_PetPrivilege::CopyFrom(const Sheet_PetPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_PetPrivilege::IsInitialized() const {

  return true;
}

void Sheet_PetPrivilege::Swap(Sheet_PetPrivilege* other) {
  if (other != this) {
    e_petprivilege_list_.Swap(&other->e_petprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_PetPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_PetPrivilege_descriptor_;
  metadata.reflection = Sheet_PetPrivilege_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
