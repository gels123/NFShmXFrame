// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Conflate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Conflate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_ConflateEquipElemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateEquipElemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateGrouptype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateGrouptype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateGrouptype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateGrouptype_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateSubtype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateSubtype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateSubtype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateSubtype_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflatePropReplaceDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflatePropReplaceDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflatePropElemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflatePropElemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_spElemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_spElemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_sp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_sp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_sp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateJewelry_sp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_zlElemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_zlElemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_zl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_zl_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_zl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateJewelry_zl_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_sjElemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_sjElemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConflateJewelry_sj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConflateJewelry_sj_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_sj_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConflateJewelry_sj_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fConflate_2eproto() {
  protobuf_AddDesc_E_5fConflate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Conflate.proto");
  GOOGLE_CHECK(file != NULL);
  E_ConflateEquipElemDesc_descriptor_ = file->message_type(0);
  static const int E_ConflateEquipElemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquipElemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquipElemDesc, m_id_),
  };
  E_ConflateEquipElemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateEquipElemDesc_descriptor_,
      E_ConflateEquipElemDesc::default_instance_,
      E_ConflateEquipElemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquipElemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquipElemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateEquipElemDesc));
  E_ConflateEquip_descriptor_ = file->message_type(1);
  static const int E_ConflateEquip_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_openlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_needsameposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_elemstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_elemquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_elemwearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_minimum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_minisuccessrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_maxmum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_maxsuccessrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_muststar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_mustquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_mustwearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_mustnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_usemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, m_elem_),
  };
  E_ConflateEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateEquip_descriptor_,
      E_ConflateEquip::default_instance_,
      E_ConflateEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateEquip));
  Sheet_ConflateEquip_descriptor_ = file->message_type(2);
  static const int Sheet_ConflateEquip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateEquip, e_conflateequip_list_),
  };
  Sheet_ConflateEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateEquip_descriptor_,
      Sheet_ConflateEquip::default_instance_,
      Sheet_ConflateEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateEquip));
  E_ConflateGrouptype_descriptor_ = file->message_type(3);
  static const int E_ConflateGrouptype_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_typename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_unlockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, m_rule_),
  };
  E_ConflateGrouptype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateGrouptype_descriptor_,
      E_ConflateGrouptype::default_instance_,
      E_ConflateGrouptype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateGrouptype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateGrouptype));
  Sheet_ConflateGrouptype_descriptor_ = file->message_type(4);
  static const int Sheet_ConflateGrouptype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateGrouptype, e_conflategrouptype_list_),
  };
  Sheet_ConflateGrouptype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateGrouptype_descriptor_,
      Sheet_ConflateGrouptype::default_instance_,
      Sheet_ConflateGrouptype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateGrouptype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateGrouptype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateGrouptype));
  E_ConflateSubtype_descriptor_ = file->message_type(5);
  static const int E_ConflateSubtype_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, m_subname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, m_openlv_),
  };
  E_ConflateSubtype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateSubtype_descriptor_,
      E_ConflateSubtype::default_instance_,
      E_ConflateSubtype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateSubtype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateSubtype));
  Sheet_ConflateSubtype_descriptor_ = file->message_type(6);
  static const int Sheet_ConflateSubtype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateSubtype, e_conflatesubtype_list_),
  };
  Sheet_ConflateSubtype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateSubtype_descriptor_,
      Sheet_ConflateSubtype::default_instance_,
      Sheet_ConflateSubtype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateSubtype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateSubtype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateSubtype));
  E_ConflatePropReplaceDesc_descriptor_ = file->message_type(7);
  static const int E_ConflatePropReplaceDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropReplaceDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropReplaceDesc, m_id_),
  };
  E_ConflatePropReplaceDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflatePropReplaceDesc_descriptor_,
      E_ConflatePropReplaceDesc::default_instance_,
      E_ConflatePropReplaceDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropReplaceDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropReplaceDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflatePropReplaceDesc));
  E_ConflatePropElemDesc_descriptor_ = file->message_type(8);
  static const int E_ConflatePropElemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropElemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropElemDesc, m_id_),
  };
  E_ConflatePropElemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflatePropElemDesc_descriptor_,
      E_ConflatePropElemDesc::default_instance_,
      E_ConflatePropElemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropElemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflatePropElemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflatePropElemDesc));
  E_ConflateProp_descriptor_ = file->message_type(9);
  static const int E_ConflateProp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_openlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_activate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_replacetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_culture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_usemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, m_elem_),
  };
  E_ConflateProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateProp_descriptor_,
      E_ConflateProp::default_instance_,
      E_ConflateProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateProp));
  Sheet_ConflateProp_descriptor_ = file->message_type(10);
  static const int Sheet_ConflateProp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateProp, e_conflateprop_list_),
  };
  Sheet_ConflateProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateProp_descriptor_,
      Sheet_ConflateProp::default_instance_,
      Sheet_ConflateProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateProp));
  E_ConflateJewelry_spElemDesc_descriptor_ = file->message_type(11);
  static const int E_ConflateJewelry_spElemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_spElemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_spElemDesc, m_id_),
  };
  E_ConflateJewelry_spElemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_spElemDesc_descriptor_,
      E_ConflateJewelry_spElemDesc::default_instance_,
      E_ConflateJewelry_spElemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_spElemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_spElemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_spElemDesc));
  E_ConflateJewelry_sp_descriptor_ = file->message_type(12);
  static const int E_ConflateJewelry_sp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_openwearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_openspecial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, m_elem_),
  };
  E_ConflateJewelry_sp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_sp_descriptor_,
      E_ConflateJewelry_sp::default_instance_,
      E_ConflateJewelry_sp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_sp));
  Sheet_ConflateJewelry_sp_descriptor_ = file->message_type(13);
  static const int Sheet_ConflateJewelry_sp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sp, e_conflatejewelry_sp_list_),
  };
  Sheet_ConflateJewelry_sp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateJewelry_sp_descriptor_,
      Sheet_ConflateJewelry_sp::default_instance_,
      Sheet_ConflateJewelry_sp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateJewelry_sp));
  E_ConflateJewelry_zlElemDesc_descriptor_ = file->message_type(14);
  static const int E_ConflateJewelry_zlElemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zlElemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zlElemDesc, m_id_),
  };
  E_ConflateJewelry_zlElemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_zlElemDesc_descriptor_,
      E_ConflateJewelry_zlElemDesc::default_instance_,
      E_ConflateJewelry_zlElemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zlElemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zlElemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_zlElemDesc));
  E_ConflateJewelry_zl_descriptor_ = file->message_type(15);
  static const int E_ConflateJewelry_zl_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_openquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_zllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_zlname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, m_elem_),
  };
  E_ConflateJewelry_zl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_zl_descriptor_,
      E_ConflateJewelry_zl::default_instance_,
      E_ConflateJewelry_zl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_zl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_zl));
  Sheet_ConflateJewelry_zl_descriptor_ = file->message_type(16);
  static const int Sheet_ConflateJewelry_zl_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_zl, e_conflatejewelry_zl_list_),
  };
  Sheet_ConflateJewelry_zl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateJewelry_zl_descriptor_,
      Sheet_ConflateJewelry_zl::default_instance_,
      Sheet_ConflateJewelry_zl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_zl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_zl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateJewelry_zl));
  E_ConflateJewelry_sjElemDesc_descriptor_ = file->message_type(17);
  static const int E_ConflateJewelry_sjElemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sjElemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sjElemDesc, m_id_),
  };
  E_ConflateJewelry_sjElemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_sjElemDesc_descriptor_,
      E_ConflateJewelry_sjElemDesc::default_instance_,
      E_ConflateJewelry_sjElemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sjElemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sjElemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_sjElemDesc));
  E_ConflateJewelry_sj_descriptor_ = file->message_type(18);
  static const int E_ConflateJewelry_sj_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_openlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, m_elem_),
  };
  E_ConflateJewelry_sj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConflateJewelry_sj_descriptor_,
      E_ConflateJewelry_sj::default_instance_,
      E_ConflateJewelry_sj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConflateJewelry_sj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConflateJewelry_sj));
  Sheet_ConflateJewelry_sj_descriptor_ = file->message_type(19);
  static const int Sheet_ConflateJewelry_sj_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sj, e_conflatejewelry_sj_list_),
  };
  Sheet_ConflateJewelry_sj_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConflateJewelry_sj_descriptor_,
      Sheet_ConflateJewelry_sj::default_instance_,
      Sheet_ConflateJewelry_sj_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sj, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConflateJewelry_sj, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConflateJewelry_sj));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fConflate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateEquipElemDesc_descriptor_, &E_ConflateEquipElemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateEquip_descriptor_, &E_ConflateEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateEquip_descriptor_, &Sheet_ConflateEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateGrouptype_descriptor_, &E_ConflateGrouptype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateGrouptype_descriptor_, &Sheet_ConflateGrouptype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateSubtype_descriptor_, &E_ConflateSubtype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateSubtype_descriptor_, &Sheet_ConflateSubtype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflatePropReplaceDesc_descriptor_, &E_ConflatePropReplaceDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflatePropElemDesc_descriptor_, &E_ConflatePropElemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateProp_descriptor_, &E_ConflateProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateProp_descriptor_, &Sheet_ConflateProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_spElemDesc_descriptor_, &E_ConflateJewelry_spElemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_sp_descriptor_, &E_ConflateJewelry_sp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateJewelry_sp_descriptor_, &Sheet_ConflateJewelry_sp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_zlElemDesc_descriptor_, &E_ConflateJewelry_zlElemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_zl_descriptor_, &E_ConflateJewelry_zl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateJewelry_zl_descriptor_, &Sheet_ConflateJewelry_zl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_sjElemDesc_descriptor_, &E_ConflateJewelry_sjElemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConflateJewelry_sj_descriptor_, &E_ConflateJewelry_sj::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConflateJewelry_sj_descriptor_, &Sheet_ConflateJewelry_sj::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fConflate_2eproto() {
  delete E_ConflateEquipElemDesc::default_instance_;
  delete E_ConflateEquipElemDesc_reflection_;
  delete E_ConflateEquip::default_instance_;
  delete E_ConflateEquip_reflection_;
  delete Sheet_ConflateEquip::default_instance_;
  delete Sheet_ConflateEquip_reflection_;
  delete E_ConflateGrouptype::default_instance_;
  delete E_ConflateGrouptype_reflection_;
  delete Sheet_ConflateGrouptype::default_instance_;
  delete Sheet_ConflateGrouptype_reflection_;
  delete E_ConflateSubtype::default_instance_;
  delete E_ConflateSubtype_reflection_;
  delete Sheet_ConflateSubtype::default_instance_;
  delete Sheet_ConflateSubtype_reflection_;
  delete E_ConflatePropReplaceDesc::default_instance_;
  delete E_ConflatePropReplaceDesc_reflection_;
  delete E_ConflatePropElemDesc::default_instance_;
  delete E_ConflatePropElemDesc_reflection_;
  delete E_ConflateProp::default_instance_;
  delete E_ConflateProp_reflection_;
  delete Sheet_ConflateProp::default_instance_;
  delete Sheet_ConflateProp_reflection_;
  delete E_ConflateJewelry_spElemDesc::default_instance_;
  delete E_ConflateJewelry_spElemDesc_reflection_;
  delete E_ConflateJewelry_sp::default_instance_;
  delete E_ConflateJewelry_sp_reflection_;
  delete Sheet_ConflateJewelry_sp::default_instance_;
  delete Sheet_ConflateJewelry_sp_reflection_;
  delete E_ConflateJewelry_zlElemDesc::default_instance_;
  delete E_ConflateJewelry_zlElemDesc_reflection_;
  delete E_ConflateJewelry_zl::default_instance_;
  delete E_ConflateJewelry_zl_reflection_;
  delete Sheet_ConflateJewelry_zl::default_instance_;
  delete Sheet_ConflateJewelry_zl_reflection_;
  delete E_ConflateJewelry_sjElemDesc::default_instance_;
  delete E_ConflateJewelry_sjElemDesc_reflection_;
  delete E_ConflateJewelry_sj::default_instance_;
  delete E_ConflateJewelry_sj_reflection_;
  delete Sheet_ConflateJewelry_sj::default_instance_;
  delete Sheet_ConflateJewelry_sj_reflection_;
}

void protobuf_AddDesc_E_5fConflate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020E_Conflate.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"J\n\027E_ConflateEquipElemDesc\022\031"
    "\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B"
    "\006\302\377\024\002id\"\261\007\n\017E_ConflateEquip\022\032\n\004m_id\030\001 \001("
    "\005B\014\302\377\024\010\345\220\210\346\210\220id\022\"\n\010m_openLv\030\002 \001(\005B\020\302\377\024\014\346"
    "\230\276\347\244\272\347\255\211\347\272\247\022%\n\013m_groupType\030\003 \001(\005B\020\302\377\024\014\350\243"
    "\205\345\244\207\347\261\273\345\236\213\022\"\n\tm_subType\030\004 \001(\005B\017\302\377\024\013\350\243\205\345\244"
    "\207\347\273\204id\022/\n\022m_needsameposition\030\005 \001(\005B\023\302\377\024\017"
    "\346\230\257\345\220\246\345\220\214\351\203\250\344\275\215\022 \n\006m_star\030\006 \001(\005B\020\302\377\024\014\350\243\205"
    "\345\244\207\346\230\237\347\272\247\022#\n\tm_quality\030\007 \001(\005B\020\302\377\024\014\350\243\205\345\244\207"
    "\345\223\201\350\264\250\022\'\n\rm_wearQuality\030\010 \001(\005B\020\302\377\024\014\350\243\205\345\244"
    "\207\345\223\201\351\230\266\022$\n\nm_elemStar\030\t \001(\005B\020\302\377\024\014\347\264\240\346\235\220\346"
    "\230\237\347\272\247\022\'\n\rm_elemQuality\030\n \001(\005B\020\302\377\024\014\347\264\240\346\235\220"
    "\345\223\201\350\264\250\022+\n\021m_elemWearQuality\030\013 \001(\005B\020\302\377\024\014\347"
    "\264\240\346\235\220\345\223\201\351\230\266\022)\n\tm_minimum\030\014 \001(\005B\026\302\377\024\022\346\234\200\345"
    "\260\217\350\243\205\345\244\207\346\225\260\351\207\217\0224\n\021m_minisuccessrate\030\r \001("
    "\005B\031\302\377\024\025\346\234\200\345\260\221\350\243\205\345\244\207\346\210\220\345\212\237\347\216\207\022(\n\010m_maxmum"
    "\030\016 \001(\005B\026\302\377\024\022\346\234\200\345\244\247\350\243\205\345\244\207\346\225\260\351\207\217\0223\n\020m_maxs"
    "uccessrate\030\017 \001(\005B\031\302\377\024\025\346\234\200\345\244\247\350\243\205\345\244\207\346\210\220\345\212\237"
    "\347\216\207\022$\n\nm_mustStar\030\020 \001(\005B\020\302\377\024\014\345\220\214\351\230\266\346\230\237\347\272"
    "\247\022\'\n\rm_mustQuality\030\021 \001(\005B\020\302\377\024\014\345\220\214\351\230\266\345\223\201\350"
    "\264\250\022+\n\021m_mustWearQuality\030\022 \001(\005B\020\302\377\024\014\345\220\214\351\230"
    "\266\345\223\201\351\230\266\022)\n\tm_mustNum\030\023 \001(\005B\026\302\377\024\022\345\220\214\351\230\266\350\243"
    "\205\345\244\207\346\225\260\351\207\217\022*\n\nm_usemoney\030\024 \001(\005B\026\302\377\024\022\345\220\210\346"
    "\210\220\346\266\210\350\200\227\350\264\247\345\270\201\022 \n\006m_cost\030\025 \001(\005B\020\302\377\024\014\350\264\247\345"
    "\270\201\346\225\260\351\207\217\022A\n\006m_elem\030\026 \003(\0132!.proto_ff.E_Co"
    "nflateEquipElemDescB\016\302\377\024\006\347\264\240\346\235\220\210\301\024\003\"U\n\023S"
    "heet_ConflateEquip\022>\n\024E_ConflateEquip_Li"
    "st\030\001 \003(\0132\031.proto_ff.E_ConflateEquipB\005\210\301\024"
    "\200\020\"\222\002\n\023E_ConflateGrouptype\022\032\n\004m_id\030\001 \001(\005"
    "B\014\302\377\024\010\345\220\210\346\210\220id\022(\n\nm_position\030\002 \001(\tB\024\302\377\024\014"
    "\350\243\205\345\244\207\351\203\250\344\275\215\220\301\024@\022*\n\014m_profession\030\003 \001(\tB\024"
    "\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024@\022(\n\nm_typeName\030\004 \001(\t"
    "B\024\302\377\024\014\347\261\273\345\236\213\345\220\215\347\247\260\220\301\024@\022$\n\nm_unlockId\030\005 \001"
    "(\005B\020\302\377\024\014\345\274\200\345\220\257\346\235\241\344\273\266\022\035\n\007m_entry\030\006 \001(\005B\014\302"
    "\377\024\010\345\205\245\345\217\243id\022\032\n\006m_rule\030\007 \001(\005B\n\302\377\024\006\350\247\204\345\210\231\""
    "`\n\027Sheet_ConflateGrouptype\022E\n\030E_Conflate"
    "Grouptype_List\030\001 \003(\0132\035.proto_ff.E_Confla"
    "teGrouptypeB\004\210\301\024@\"\241\001\n\021E_ConflateSubtype\022"
    "\035\n\004m_id\030\001 \001(\005B\017\302\377\024\013\350\243\205\345\244\207\347\273\204id\022$\n\tm_subN"
    "ame\030\002 \001(\tB\021\302\377\024\t\347\273\204\345\220\215\347\247\260\220\301\024@\022#\n\tm_groupi"
    "d\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\347\261\273\345\236\213\022\"\n\010m_openLv\030\004 "
    "\001(\005B\020\302\377\024\014\346\230\276\347\244\272\347\255\211\347\272\247\"[\n\025Sheet_ConflateS"
    "ubtype\022B\n\026E_ConflateSubtype_List\030\001 \003(\0132\033"
    ".proto_ff.E_ConflateSubtypeB\005\210\301\024\200\001\"V\n\031E_"
    "ConflatePropReplaceDesc\022\037\n\005m_Num\030\001 \001(\005B\020"
    "\302\377\024\014\347\264\240\346\235\220\346\225\260\351\207\217\022\030\n\004m_id\030\002 \001(\005B\n\302\377\024\006\347\264\240\346"
    "\235\220\"I\n\026E_ConflatePropElemDesc\022\031\n\005m_num\030\001 "
    "\001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"\243\004"
    "\n\016E_ConflateProp\022\"\n\010m_target\030\001 \001(\005B\020\302\377\024\014"
    "\345\220\210\346\210\220\347\233\256\346\240\207\022\"\n\010m_openLv\030\002 \001(\005B\020\302\377\024\014\346\230\276\347"
    "\244\272\347\255\211\347\272\247\022\035\n\tm_subType\030\003 \001(\005B\n\302\377\024\006\346\235\241\347\233\256\022"
    "\033\n\007m_order\030\004 \001(\005B\n\302\377\024\006\346\216\222\345\272\217\0223\n\nm_activa"
    "te\030\005 \001(\005B\037\302\377\024\033\346\230\257\345\220\246\346\277\200\346\264\273\345\220\216\344\270\215\345\217\257\345\220\210\346\210"
    "\220\022/\n\tm_display\030\006 \001(\005B\034\302\377\024\030\346\230\257\345\220\246\346\230\276\347\244\272\345\220"
    "\210\346\210\220\346\225\260\351\207\217\022*\n\rm_replaceType\030\007 \001(\005B\023\302\377\024\017\346"
    "\230\257\345\220\246\345\217\257\346\233\277\344\273\243\022#\n\tm_culture\030\010 \001(\005B\020\302\377\024\014\346"
    "\230\257\345\220\246\345\205\273\346\210\220\022*\n\nm_usemoney\030\t \001(\005B\026\302\377\024\022\345\220\210"
    "\346\210\220\346\266\210\350\200\227\350\264\247\345\270\201\022 \n\006m_cost\030\n \001(\005B\020\302\377\024\014\350\264\247"
    "\345\270\201\346\225\260\351\207\217\022F\n\tm_replace\030\013 \003(\0132#.proto_ff."
    "E_ConflatePropReplaceDescB\016\302\377\024\006\346\233\277\346\215\242\210\301\024"
    "\002\022@\n\006m_elem\030\014 \003(\0132 .proto_ff.E_ConflateP"
    "ropElemDescB\016\302\377\024\006\347\264\240\346\235\220\210\301\024\004\"R\n\022Sheet_Con"
    "flateProp\022<\n\023E_ConflateProp_List\030\001 \003(\0132\030"
    ".proto_ff.E_ConflatePropB\005\210\301\024\200\004\"O\n\034E_Con"
    "flateJewelry_spElemDesc\022\031\n\005m_num\030\001 \001(\005B\n"
    "\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"\214\003\n\024E_C"
    "onflateJewelry_sp\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\220\210"
    "\346\210\220id\022\"\n\013m_groupType\030\002 \001(\005B\r\302\377\024\t\347\273\204\347\261\273\345\236"
    "\213\0221\n\021m_openwearQuality\030\003 \001(\005B\026\302\377\024\022\350\243\205\345\244\207"
    "\345\223\201\351\230\266\350\246\201\346\261\202\022\'\n\rm_openspecial\030\004 \001(\005B\020\302\377\024"
    "\014\347\234\237\347\202\274\350\246\201\346\261\202\022$\n\nm_position\030\005 \001(\005B\020\302\377\024\014\350"
    "\243\205\345\244\207\344\275\215\347\275\256\022)\n\tm_quality\030\006 \001(\005B\026\302\377\024\022\350\243\205\345"
    "\244\207\345\223\201\350\264\250\350\246\201\346\261\202\022 \n\006m_star\030\007 \001(\005B\020\302\377\024\014\350\243\205\345"
    "\244\207\346\230\237\347\272\247\022\035\n\006m_next\030\010 \001(\005B\r\302\377\024\t\344\270\213\344\270\200\347\272\247\022"
    "F\n\006m_elem\030\t \003(\0132&.proto_ff.E_ConflateJew"
    "elry_spElemDescB\016\302\377\024\006\347\264\240\346\235\220\210\301\024\004\"c\n\030Sheet"
    "_ConflateJewelry_sp\022G\n\031E_ConflateJewelry"
    "_sp_List\030\001 \003(\0132\036.proto_ff.E_ConflateJewe"
    "lry_spB\004\210\301\024 \"O\n\034E_ConflateJewelry_zlElem"
    "Desc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030"
    "\002 \001(\005B\006\302\377\024\002id\"\326\002\n\024E_ConflateJewelry_zl\022\032"
    "\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\220\210\346\210\220id\022\'\n\rm_openqual"
    "ity\030\002 \001(\005B\020\302\377\024\014\345\223\201\350\264\250\350\246\201\346\261\202\022\"\n\013m_groupTy"
    "pe\030\003 \001(\005B\r\302\377\024\t\347\273\204\347\261\273\345\236\213\022$\n\nm_position\030\004 "
    "\001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022 \n\006m_Zllv\030\005 \001(\005B\020\302"
    "\377\024\014\347\234\237\347\202\274\347\255\211\347\272\247\022\035\n\006m_next\030\006 \001(\005B\r\302\377\024\t\344\270\213"
    "\344\270\200\347\272\247\022&\n\010m_Zlname\030\007 \001(\tB\024\302\377\024\014\347\255\211\347\272\247\346\217\217\350"
    "\277\260\220\301\024@\022F\n\006m_elem\030\010 \003(\0132&.proto_ff.E_Conf"
    "lateJewelry_zlElemDescB\016\302\377\024\006\347\264\240\346\235\220\210\301\024\004\"c"
    "\n\030Sheet_ConflateJewelry_zl\022G\n\031E_Conflate"
    "Jewelry_zl_List\030\001 \003(\0132\036.proto_ff.E_Confl"
    "ateJewelry_zlB\004\210\301\024@\"O\n\034E_ConflateJewelry"
    "_sjElemDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024"
    "\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"\260\002\n\024E_ConflateJewel"
    "ry_sj\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\220\210\346\210\220id\022\"\n\013m_g"
    "roupType\030\002 \001(\005B\r\302\377\024\t\347\273\204\347\261\273\345\236\213\022$\n\nm_posit"
    "ion\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\022\'\n\rm_wearQua"
    "lity\030\004 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022\035\n\006m_next\030\005"
    " \001(\005B\r\302\377\024\t\344\270\213\344\270\200\347\272\247\022\"\n\010m_openLv\030\006 \001(\005B\020\302"
    "\377\024\014\345\215\207\351\230\266\347\255\211\347\272\247\022F\n\006m_elem\030\007 \003(\0132&.proto_"
    "ff.E_ConflateJewelry_sjElemDescB\016\302\377\024\006\347\264\240"
    "\346\235\220\210\301\024\004\"c\n\030Sheet_ConflateJewelry_sj\022G\n\031E"
    "_ConflateJewelry_sj_List\030\001 \003(\0132\036.proto_f"
    "f.E_ConflateJewelry_sjB\004\210\301\024@", 4188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Conflate.proto", &protobuf_RegisterTypes);
  E_ConflateEquipElemDesc::default_instance_ = new E_ConflateEquipElemDesc();
  E_ConflateEquip::default_instance_ = new E_ConflateEquip();
  Sheet_ConflateEquip::default_instance_ = new Sheet_ConflateEquip();
  E_ConflateGrouptype::default_instance_ = new E_ConflateGrouptype();
  Sheet_ConflateGrouptype::default_instance_ = new Sheet_ConflateGrouptype();
  E_ConflateSubtype::default_instance_ = new E_ConflateSubtype();
  Sheet_ConflateSubtype::default_instance_ = new Sheet_ConflateSubtype();
  E_ConflatePropReplaceDesc::default_instance_ = new E_ConflatePropReplaceDesc();
  E_ConflatePropElemDesc::default_instance_ = new E_ConflatePropElemDesc();
  E_ConflateProp::default_instance_ = new E_ConflateProp();
  Sheet_ConflateProp::default_instance_ = new Sheet_ConflateProp();
  E_ConflateJewelry_spElemDesc::default_instance_ = new E_ConflateJewelry_spElemDesc();
  E_ConflateJewelry_sp::default_instance_ = new E_ConflateJewelry_sp();
  Sheet_ConflateJewelry_sp::default_instance_ = new Sheet_ConflateJewelry_sp();
  E_ConflateJewelry_zlElemDesc::default_instance_ = new E_ConflateJewelry_zlElemDesc();
  E_ConflateJewelry_zl::default_instance_ = new E_ConflateJewelry_zl();
  Sheet_ConflateJewelry_zl::default_instance_ = new Sheet_ConflateJewelry_zl();
  E_ConflateJewelry_sjElemDesc::default_instance_ = new E_ConflateJewelry_sjElemDesc();
  E_ConflateJewelry_sj::default_instance_ = new E_ConflateJewelry_sj();
  Sheet_ConflateJewelry_sj::default_instance_ = new Sheet_ConflateJewelry_sj();
  E_ConflateEquipElemDesc::default_instance_->InitAsDefaultInstance();
  E_ConflateEquip::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateEquip::default_instance_->InitAsDefaultInstance();
  E_ConflateGrouptype::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateGrouptype::default_instance_->InitAsDefaultInstance();
  E_ConflateSubtype::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateSubtype::default_instance_->InitAsDefaultInstance();
  E_ConflatePropReplaceDesc::default_instance_->InitAsDefaultInstance();
  E_ConflatePropElemDesc::default_instance_->InitAsDefaultInstance();
  E_ConflateProp::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateProp::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_spElemDesc::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_sp::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateJewelry_sp::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_zlElemDesc::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_zl::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateJewelry_zl::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_sjElemDesc::default_instance_->InitAsDefaultInstance();
  E_ConflateJewelry_sj::default_instance_->InitAsDefaultInstance();
  Sheet_ConflateJewelry_sj::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fConflate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fConflate_2eproto {
  StaticDescriptorInitializer_E_5fConflate_2eproto() {
    protobuf_AddDesc_E_5fConflate_2eproto();
  }
} static_descriptor_initializer_E_5fConflate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_ConflateEquipElemDesc::kMNumFieldNumber;
const int E_ConflateEquipElemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflateEquipElemDesc::E_ConflateEquipElemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateEquipElemDesc::InitAsDefaultInstance() {
}

E_ConflateEquipElemDesc::E_ConflateEquipElemDesc(const E_ConflateEquipElemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateEquipElemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateEquipElemDesc::~E_ConflateEquipElemDesc() {
  SharedDtor();
}

void E_ConflateEquipElemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateEquipElemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateEquipElemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateEquipElemDesc_descriptor_;
}

const E_ConflateEquipElemDesc& E_ConflateEquipElemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateEquipElemDesc* E_ConflateEquipElemDesc::default_instance_ = NULL;

E_ConflateEquipElemDesc* E_ConflateEquipElemDesc::New() const {
  return new E_ConflateEquipElemDesc;
}

void E_ConflateEquipElemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateEquipElemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateEquipElemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateEquipElemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateEquipElemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateEquipElemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateEquipElemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateEquipElemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateEquipElemDesc::MergeFrom(const E_ConflateEquipElemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateEquipElemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateEquipElemDesc::CopyFrom(const E_ConflateEquipElemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateEquipElemDesc::IsInitialized() const {

  return true;
}

void E_ConflateEquipElemDesc::Swap(E_ConflateEquipElemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateEquipElemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateEquipElemDesc_descriptor_;
  metadata.reflection = E_ConflateEquipElemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateEquip::kMIdFieldNumber;
const int E_ConflateEquip::kMOpenLvFieldNumber;
const int E_ConflateEquip::kMGroupTypeFieldNumber;
const int E_ConflateEquip::kMSubTypeFieldNumber;
const int E_ConflateEquip::kMNeedsamepositionFieldNumber;
const int E_ConflateEquip::kMStarFieldNumber;
const int E_ConflateEquip::kMQualityFieldNumber;
const int E_ConflateEquip::kMWearQualityFieldNumber;
const int E_ConflateEquip::kMElemStarFieldNumber;
const int E_ConflateEquip::kMElemQualityFieldNumber;
const int E_ConflateEquip::kMElemWearQualityFieldNumber;
const int E_ConflateEquip::kMMinimumFieldNumber;
const int E_ConflateEquip::kMMinisuccessrateFieldNumber;
const int E_ConflateEquip::kMMaxmumFieldNumber;
const int E_ConflateEquip::kMMaxsuccessrateFieldNumber;
const int E_ConflateEquip::kMMustStarFieldNumber;
const int E_ConflateEquip::kMMustQualityFieldNumber;
const int E_ConflateEquip::kMMustWearQualityFieldNumber;
const int E_ConflateEquip::kMMustNumFieldNumber;
const int E_ConflateEquip::kMUsemoneyFieldNumber;
const int E_ConflateEquip::kMCostFieldNumber;
const int E_ConflateEquip::kMElemFieldNumber;
#endif  // !_MSC_VER

E_ConflateEquip::E_ConflateEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateEquip::InitAsDefaultInstance() {
}

E_ConflateEquip::E_ConflateEquip(const E_ConflateEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateEquip::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_openlv_ = 0;
  m_grouptype_ = 0;
  m_subtype_ = 0;
  m_needsameposition_ = 0;
  m_star_ = 0;
  m_quality_ = 0;
  m_wearquality_ = 0;
  m_elemstar_ = 0;
  m_elemquality_ = 0;
  m_elemwearquality_ = 0;
  m_minimum_ = 0;
  m_minisuccessrate_ = 0;
  m_maxmum_ = 0;
  m_maxsuccessrate_ = 0;
  m_muststar_ = 0;
  m_mustquality_ = 0;
  m_mustwearquality_ = 0;
  m_mustnum_ = 0;
  m_usemoney_ = 0;
  m_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateEquip::~E_ConflateEquip() {
  SharedDtor();
}

void E_ConflateEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateEquip_descriptor_;
}

const E_ConflateEquip& E_ConflateEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateEquip* E_ConflateEquip::default_instance_ = NULL;

E_ConflateEquip* E_ConflateEquip::New() const {
  return new E_ConflateEquip;
}

void E_ConflateEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_openlv_ = 0;
    m_grouptype_ = 0;
    m_subtype_ = 0;
    m_needsameposition_ = 0;
    m_star_ = 0;
    m_quality_ = 0;
    m_wearquality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_elemstar_ = 0;
    m_elemquality_ = 0;
    m_elemwearquality_ = 0;
    m_minimum_ = 0;
    m_minisuccessrate_ = 0;
    m_maxmum_ = 0;
    m_maxsuccessrate_ = 0;
    m_muststar_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_mustquality_ = 0;
    m_mustwearquality_ = 0;
    m_mustnum_ = 0;
    m_usemoney_ = 0;
    m_cost_ = 0;
  }
  m_elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_openLv;
        break;
      }

      // optional int32 m_openLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_groupType;
        break;
      }

      // optional int32 m_groupType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptype_)));
          set_has_m_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_subType;
        break;
      }

      // optional int32 m_subType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_needsameposition;
        break;
      }

      // optional int32 m_needsameposition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_needsameposition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_needsameposition_)));
          set_has_m_needsameposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_wearQuality;
        break;
      }

      // optional int32 m_wearQuality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearquality_)));
          set_has_m_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_elemStar;
        break;
      }

      // optional int32 m_elemStar = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_elemStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_elemstar_)));
          set_has_m_elemstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_elemQuality;
        break;
      }

      // optional int32 m_elemQuality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_elemQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_elemquality_)));
          set_has_m_elemquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_elemWearQuality;
        break;
      }

      // optional int32 m_elemWearQuality = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_elemWearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_elemwearquality_)));
          set_has_m_elemwearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_minimum;
        break;
      }

      // optional int32 m_minimum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minimum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minimum_)));
          set_has_m_minimum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_minisuccessrate;
        break;
      }

      // optional int32 m_minisuccessrate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minisuccessrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minisuccessrate_)));
          set_has_m_minisuccessrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_maxmum;
        break;
      }

      // optional int32 m_maxmum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxmum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxmum_)));
          set_has_m_maxmum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_maxsuccessrate;
        break;
      }

      // optional int32 m_maxsuccessrate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxsuccessrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxsuccessrate_)));
          set_has_m_maxsuccessrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_mustStar;
        break;
      }

      // optional int32 m_mustStar = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mustStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_muststar_)));
          set_has_m_muststar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_mustQuality;
        break;
      }

      // optional int32 m_mustQuality = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mustQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mustquality_)));
          set_has_m_mustquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_mustWearQuality;
        break;
      }

      // optional int32 m_mustWearQuality = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mustWearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mustwearquality_)));
          set_has_m_mustwearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_mustNum;
        break;
      }

      // optional int32 m_mustNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mustNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mustnum_)));
          set_has_m_mustnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_usemoney;
        break;
      }

      // optional int32 m_usemoney = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_usemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_usemoney_)));
          set_has_m_usemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_elem;
        break;
      }

      // repeated .proto_ff.E_ConflateEquipElemDesc m_elem = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_m_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_openLv = 2;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_openlv(), output);
  }

  // optional int32 m_groupType = 3;
  if (has_m_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_grouptype(), output);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_subtype(), output);
  }

  // optional int32 m_needsameposition = 5;
  if (has_m_needsameposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_needsameposition(), output);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_star(), output);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_quality(), output);
  }

  // optional int32 m_wearQuality = 8;
  if (has_m_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_wearquality(), output);
  }

  // optional int32 m_elemStar = 9;
  if (has_m_elemstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_elemstar(), output);
  }

  // optional int32 m_elemQuality = 10;
  if (has_m_elemquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_elemquality(), output);
  }

  // optional int32 m_elemWearQuality = 11;
  if (has_m_elemwearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_elemwearquality(), output);
  }

  // optional int32 m_minimum = 12;
  if (has_m_minimum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_minimum(), output);
  }

  // optional int32 m_minisuccessrate = 13;
  if (has_m_minisuccessrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_minisuccessrate(), output);
  }

  // optional int32 m_maxmum = 14;
  if (has_m_maxmum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_maxmum(), output);
  }

  // optional int32 m_maxsuccessrate = 15;
  if (has_m_maxsuccessrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_maxsuccessrate(), output);
  }

  // optional int32 m_mustStar = 16;
  if (has_m_muststar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_muststar(), output);
  }

  // optional int32 m_mustQuality = 17;
  if (has_m_mustquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_mustquality(), output);
  }

  // optional int32 m_mustWearQuality = 18;
  if (has_m_mustwearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_mustwearquality(), output);
  }

  // optional int32 m_mustNum = 19;
  if (has_m_mustnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_mustnum(), output);
  }

  // optional int32 m_usemoney = 20;
  if (has_m_usemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_usemoney(), output);
  }

  // optional int32 m_cost = 21;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_cost(), output);
  }

  // repeated .proto_ff.E_ConflateEquipElemDesc m_elem = 22;
  for (int i = 0; i < this->m_elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->m_elem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_openLv = 2;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_openlv(), target);
  }

  // optional int32 m_groupType = 3;
  if (has_m_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_grouptype(), target);
  }

  // optional int32 m_subType = 4;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_subtype(), target);
  }

  // optional int32 m_needsameposition = 5;
  if (has_m_needsameposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_needsameposition(), target);
  }

  // optional int32 m_star = 6;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_star(), target);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_quality(), target);
  }

  // optional int32 m_wearQuality = 8;
  if (has_m_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_wearquality(), target);
  }

  // optional int32 m_elemStar = 9;
  if (has_m_elemstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_elemstar(), target);
  }

  // optional int32 m_elemQuality = 10;
  if (has_m_elemquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_elemquality(), target);
  }

  // optional int32 m_elemWearQuality = 11;
  if (has_m_elemwearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_elemwearquality(), target);
  }

  // optional int32 m_minimum = 12;
  if (has_m_minimum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_minimum(), target);
  }

  // optional int32 m_minisuccessrate = 13;
  if (has_m_minisuccessrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_minisuccessrate(), target);
  }

  // optional int32 m_maxmum = 14;
  if (has_m_maxmum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_maxmum(), target);
  }

  // optional int32 m_maxsuccessrate = 15;
  if (has_m_maxsuccessrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_maxsuccessrate(), target);
  }

  // optional int32 m_mustStar = 16;
  if (has_m_muststar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_muststar(), target);
  }

  // optional int32 m_mustQuality = 17;
  if (has_m_mustquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_mustquality(), target);
  }

  // optional int32 m_mustWearQuality = 18;
  if (has_m_mustwearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_mustwearquality(), target);
  }

  // optional int32 m_mustNum = 19;
  if (has_m_mustnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_mustnum(), target);
  }

  // optional int32 m_usemoney = 20;
  if (has_m_usemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_usemoney(), target);
  }

  // optional int32 m_cost = 21;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_cost(), target);
  }

  // repeated .proto_ff.E_ConflateEquipElemDesc m_elem = 22;
  for (int i = 0; i < this->m_elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->m_elem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_openLv = 2;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

    // optional int32 m_groupType = 3;
    if (has_m_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptype());
    }

    // optional int32 m_subType = 4;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional int32 m_needsameposition = 5;
    if (has_m_needsameposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_needsameposition());
    }

    // optional int32 m_star = 6;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_quality = 7;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_wearQuality = 8;
    if (has_m_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearquality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_elemStar = 9;
    if (has_m_elemstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_elemstar());
    }

    // optional int32 m_elemQuality = 10;
    if (has_m_elemquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_elemquality());
    }

    // optional int32 m_elemWearQuality = 11;
    if (has_m_elemwearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_elemwearquality());
    }

    // optional int32 m_minimum = 12;
    if (has_m_minimum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minimum());
    }

    // optional int32 m_minisuccessrate = 13;
    if (has_m_minisuccessrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minisuccessrate());
    }

    // optional int32 m_maxmum = 14;
    if (has_m_maxmum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxmum());
    }

    // optional int32 m_maxsuccessrate = 15;
    if (has_m_maxsuccessrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxsuccessrate());
    }

    // optional int32 m_mustStar = 16;
    if (has_m_muststar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_muststar());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_mustQuality = 17;
    if (has_m_mustquality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mustquality());
    }

    // optional int32 m_mustWearQuality = 18;
    if (has_m_mustwearquality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mustwearquality());
    }

    // optional int32 m_mustNum = 19;
    if (has_m_mustnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mustnum());
    }

    // optional int32 m_usemoney = 20;
    if (has_m_usemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_usemoney());
    }

    // optional int32 m_cost = 21;
    if (has_m_cost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

  }
  // repeated .proto_ff.E_ConflateEquipElemDesc m_elem = 22;
  total_size += 2 * this->m_elem_size();
  for (int i = 0; i < this->m_elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_elem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateEquip::MergeFrom(const E_ConflateEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_elem_.MergeFrom(from.m_elem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
    if (from.has_m_grouptype()) {
      set_m_grouptype(from.m_grouptype());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_needsameposition()) {
      set_m_needsameposition(from.m_needsameposition());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_wearquality()) {
      set_m_wearquality(from.m_wearquality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_elemstar()) {
      set_m_elemstar(from.m_elemstar());
    }
    if (from.has_m_elemquality()) {
      set_m_elemquality(from.m_elemquality());
    }
    if (from.has_m_elemwearquality()) {
      set_m_elemwearquality(from.m_elemwearquality());
    }
    if (from.has_m_minimum()) {
      set_m_minimum(from.m_minimum());
    }
    if (from.has_m_minisuccessrate()) {
      set_m_minisuccessrate(from.m_minisuccessrate());
    }
    if (from.has_m_maxmum()) {
      set_m_maxmum(from.m_maxmum());
    }
    if (from.has_m_maxsuccessrate()) {
      set_m_maxsuccessrate(from.m_maxsuccessrate());
    }
    if (from.has_m_muststar()) {
      set_m_muststar(from.m_muststar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_mustquality()) {
      set_m_mustquality(from.m_mustquality());
    }
    if (from.has_m_mustwearquality()) {
      set_m_mustwearquality(from.m_mustwearquality());
    }
    if (from.has_m_mustnum()) {
      set_m_mustnum(from.m_mustnum());
    }
    if (from.has_m_usemoney()) {
      set_m_usemoney(from.m_usemoney());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateEquip::CopyFrom(const E_ConflateEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateEquip::IsInitialized() const {

  return true;
}

void E_ConflateEquip::Swap(E_ConflateEquip* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_openlv_, other->m_openlv_);
    std::swap(m_grouptype_, other->m_grouptype_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_needsameposition_, other->m_needsameposition_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_wearquality_, other->m_wearquality_);
    std::swap(m_elemstar_, other->m_elemstar_);
    std::swap(m_elemquality_, other->m_elemquality_);
    std::swap(m_elemwearquality_, other->m_elemwearquality_);
    std::swap(m_minimum_, other->m_minimum_);
    std::swap(m_minisuccessrate_, other->m_minisuccessrate_);
    std::swap(m_maxmum_, other->m_maxmum_);
    std::swap(m_maxsuccessrate_, other->m_maxsuccessrate_);
    std::swap(m_muststar_, other->m_muststar_);
    std::swap(m_mustquality_, other->m_mustquality_);
    std::swap(m_mustwearquality_, other->m_mustwearquality_);
    std::swap(m_mustnum_, other->m_mustnum_);
    std::swap(m_usemoney_, other->m_usemoney_);
    std::swap(m_cost_, other->m_cost_);
    m_elem_.Swap(&other->m_elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateEquip_descriptor_;
  metadata.reflection = E_ConflateEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateEquip::kEConflateEquipListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateEquip::Sheet_ConflateEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateEquip::InitAsDefaultInstance() {
}

Sheet_ConflateEquip::Sheet_ConflateEquip(const Sheet_ConflateEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateEquip::~Sheet_ConflateEquip() {
  SharedDtor();
}

void Sheet_ConflateEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateEquip_descriptor_;
}

const Sheet_ConflateEquip& Sheet_ConflateEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateEquip* Sheet_ConflateEquip::default_instance_ = NULL;

Sheet_ConflateEquip* Sheet_ConflateEquip::New() const {
  return new Sheet_ConflateEquip;
}

void Sheet_ConflateEquip::Clear() {
  e_conflateequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateEquip E_ConflateEquip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateEquip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflateequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateEquip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateEquip E_ConflateEquip_List = 1;
  for (int i = 0; i < this->e_conflateequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflateequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateEquip E_ConflateEquip_List = 1;
  for (int i = 0; i < this->e_conflateequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflateequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateEquip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateEquip E_ConflateEquip_List = 1;
  total_size += 1 * this->e_conflateequip_list_size();
  for (int i = 0; i < this->e_conflateequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflateequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateEquip::MergeFrom(const Sheet_ConflateEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflateequip_list_.MergeFrom(from.e_conflateequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateEquip::CopyFrom(const Sheet_ConflateEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateEquip::IsInitialized() const {

  return true;
}

void Sheet_ConflateEquip::Swap(Sheet_ConflateEquip* other) {
  if (other != this) {
    e_conflateequip_list_.Swap(&other->e_conflateequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateEquip_descriptor_;
  metadata.reflection = Sheet_ConflateEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateGrouptype::kMIdFieldNumber;
const int E_ConflateGrouptype::kMPositionFieldNumber;
const int E_ConflateGrouptype::kMProfessionFieldNumber;
const int E_ConflateGrouptype::kMTypeNameFieldNumber;
const int E_ConflateGrouptype::kMUnlockIdFieldNumber;
const int E_ConflateGrouptype::kMEntryFieldNumber;
const int E_ConflateGrouptype::kMRuleFieldNumber;
#endif  // !_MSC_VER

E_ConflateGrouptype::E_ConflateGrouptype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateGrouptype::InitAsDefaultInstance() {
}

E_ConflateGrouptype::E_ConflateGrouptype(const E_ConflateGrouptype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateGrouptype::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_typename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_unlockid_ = 0;
  m_entry_ = 0;
  m_rule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateGrouptype::~E_ConflateGrouptype() {
  SharedDtor();
}

void E_ConflateGrouptype::SharedDtor() {
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete m_profession_;
  }
  if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typename_;
  }
  if (this != default_instance_) {
  }
}

void E_ConflateGrouptype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateGrouptype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateGrouptype_descriptor_;
}

const E_ConflateGrouptype& E_ConflateGrouptype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateGrouptype* E_ConflateGrouptype::default_instance_ = NULL;

E_ConflateGrouptype* E_ConflateGrouptype::New() const {
  return new E_ConflateGrouptype;
}

void E_ConflateGrouptype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
    if (has_m_profession()) {
      if (m_profession_ != &::google::protobuf::internal::kEmptyString) {
        m_profession_->clear();
      }
    }
    if (has_m_typename()) {
      if (m_typename_ != &::google::protobuf::internal::kEmptyString) {
        m_typename_->clear();
      }
    }
    m_unlockid_ = 0;
    m_entry_ = 0;
    m_rule_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateGrouptype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_position;
        break;
      }

      // optional string m_position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_profession;
        break;
      }

      // optional string m_profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_profession().data(), this->m_profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_typeName;
        break;
      }

      // optional string m_typeName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_typeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typename().data(), this->m_typename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_unlockId;
        break;
      }

      // optional int32 m_unlockId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_unlockId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_unlockid_)));
          set_has_m_unlockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_entry;
        break;
      }

      // optional int32 m_entry = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_entry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_entry_)));
          set_has_m_entry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rule;
        break;
      }

      // optional int32 m_rule = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rule_)));
          set_has_m_rule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateGrouptype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_position(), output);
  }

  // optional string m_profession = 3;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_profession().data(), this->m_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_profession(), output);
  }

  // optional string m_typeName = 4;
  if (has_m_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typename().data(), this->m_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_typename(), output);
  }

  // optional int32 m_unlockId = 5;
  if (has_m_unlockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_unlockid(), output);
  }

  // optional int32 m_entry = 6;
  if (has_m_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_entry(), output);
  }

  // optional int32 m_rule = 7;
  if (has_m_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rule(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateGrouptype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_position = 2;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_position(), target);
  }

  // optional string m_profession = 3;
  if (has_m_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_profession().data(), this->m_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_profession(), target);
  }

  // optional string m_typeName = 4;
  if (has_m_typename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typename().data(), this->m_typename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_typename(), target);
  }

  // optional int32 m_unlockId = 5;
  if (has_m_unlockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_unlockid(), target);
  }

  // optional int32 m_entry = 6;
  if (has_m_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_entry(), target);
  }

  // optional int32 m_rule = 7;
  if (has_m_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rule(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateGrouptype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_position = 2;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

    // optional string m_profession = 3;
    if (has_m_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_profession());
    }

    // optional string m_typeName = 4;
    if (has_m_typename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typename());
    }

    // optional int32 m_unlockId = 5;
    if (has_m_unlockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_unlockid());
    }

    // optional int32 m_entry = 6;
    if (has_m_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_entry());
    }

    // optional int32 m_rule = 7;
    if (has_m_rule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rule());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateGrouptype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateGrouptype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateGrouptype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateGrouptype::MergeFrom(const E_ConflateGrouptype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_profession()) {
      set_m_profession(from.m_profession());
    }
    if (from.has_m_typename()) {
      set_m_typename(from.m_typename());
    }
    if (from.has_m_unlockid()) {
      set_m_unlockid(from.m_unlockid());
    }
    if (from.has_m_entry()) {
      set_m_entry(from.m_entry());
    }
    if (from.has_m_rule()) {
      set_m_rule(from.m_rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateGrouptype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateGrouptype::CopyFrom(const E_ConflateGrouptype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateGrouptype::IsInitialized() const {

  return true;
}

void E_ConflateGrouptype::Swap(E_ConflateGrouptype* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_profession_, other->m_profession_);
    std::swap(m_typename_, other->m_typename_);
    std::swap(m_unlockid_, other->m_unlockid_);
    std::swap(m_entry_, other->m_entry_);
    std::swap(m_rule_, other->m_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateGrouptype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateGrouptype_descriptor_;
  metadata.reflection = E_ConflateGrouptype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateGrouptype::kEConflateGrouptypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateGrouptype::Sheet_ConflateGrouptype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateGrouptype::InitAsDefaultInstance() {
}

Sheet_ConflateGrouptype::Sheet_ConflateGrouptype(const Sheet_ConflateGrouptype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateGrouptype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateGrouptype::~Sheet_ConflateGrouptype() {
  SharedDtor();
}

void Sheet_ConflateGrouptype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateGrouptype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateGrouptype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateGrouptype_descriptor_;
}

const Sheet_ConflateGrouptype& Sheet_ConflateGrouptype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateGrouptype* Sheet_ConflateGrouptype::default_instance_ = NULL;

Sheet_ConflateGrouptype* Sheet_ConflateGrouptype::New() const {
  return new Sheet_ConflateGrouptype;
}

void Sheet_ConflateGrouptype::Clear() {
  e_conflategrouptype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateGrouptype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateGrouptype E_ConflateGrouptype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateGrouptype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflategrouptype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateGrouptype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateGrouptype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateGrouptype E_ConflateGrouptype_List = 1;
  for (int i = 0; i < this->e_conflategrouptype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflategrouptype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateGrouptype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateGrouptype E_ConflateGrouptype_List = 1;
  for (int i = 0; i < this->e_conflategrouptype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflategrouptype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateGrouptype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateGrouptype E_ConflateGrouptype_List = 1;
  total_size += 1 * this->e_conflategrouptype_list_size();
  for (int i = 0; i < this->e_conflategrouptype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflategrouptype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateGrouptype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateGrouptype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateGrouptype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateGrouptype::MergeFrom(const Sheet_ConflateGrouptype& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflategrouptype_list_.MergeFrom(from.e_conflategrouptype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateGrouptype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateGrouptype::CopyFrom(const Sheet_ConflateGrouptype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateGrouptype::IsInitialized() const {

  return true;
}

void Sheet_ConflateGrouptype::Swap(Sheet_ConflateGrouptype* other) {
  if (other != this) {
    e_conflategrouptype_list_.Swap(&other->e_conflategrouptype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateGrouptype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateGrouptype_descriptor_;
  metadata.reflection = Sheet_ConflateGrouptype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateSubtype::kMIdFieldNumber;
const int E_ConflateSubtype::kMSubNameFieldNumber;
const int E_ConflateSubtype::kMGroupidFieldNumber;
const int E_ConflateSubtype::kMOpenLvFieldNumber;
#endif  // !_MSC_VER

E_ConflateSubtype::E_ConflateSubtype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateSubtype::InitAsDefaultInstance() {
}

E_ConflateSubtype::E_ConflateSubtype(const E_ConflateSubtype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateSubtype::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_subname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_groupid_ = 0;
  m_openlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateSubtype::~E_ConflateSubtype() {
  SharedDtor();
}

void E_ConflateSubtype::SharedDtor() {
  if (m_subname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_subname_;
  }
  if (this != default_instance_) {
  }
}

void E_ConflateSubtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateSubtype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateSubtype_descriptor_;
}

const E_ConflateSubtype& E_ConflateSubtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateSubtype* E_ConflateSubtype::default_instance_ = NULL;

E_ConflateSubtype* E_ConflateSubtype::New() const {
  return new E_ConflateSubtype;
}

void E_ConflateSubtype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_subname()) {
      if (m_subname_ != &::google::protobuf::internal::kEmptyString) {
        m_subname_->clear();
      }
    }
    m_groupid_ = 0;
    m_openlv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateSubtype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_subName;
        break;
      }

      // optional string m_subName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_subName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_subname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_subname().data(), this->m_subname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_openLv;
        break;
      }

      // optional int32 m_openLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateSubtype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_subName = 2;
  if (has_m_subname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subname().data(), this->m_subname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_subname(), output);
  }

  // optional int32 m_groupid = 3;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_groupid(), output);
  }

  // optional int32 m_openLv = 4;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_openlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateSubtype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_subName = 2;
  if (has_m_subname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_subname().data(), this->m_subname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_subname(), target);
  }

  // optional int32 m_groupid = 3;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_groupid(), target);
  }

  // optional int32 m_openLv = 4;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_openlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateSubtype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_subName = 2;
    if (has_m_subname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_subname());
    }

    // optional int32 m_groupid = 3;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_openLv = 4;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateSubtype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateSubtype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateSubtype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateSubtype::MergeFrom(const E_ConflateSubtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_subname()) {
      set_m_subname(from.m_subname());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateSubtype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateSubtype::CopyFrom(const E_ConflateSubtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateSubtype::IsInitialized() const {

  return true;
}

void E_ConflateSubtype::Swap(E_ConflateSubtype* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_subname_, other->m_subname_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_openlv_, other->m_openlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateSubtype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateSubtype_descriptor_;
  metadata.reflection = E_ConflateSubtype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateSubtype::kEConflateSubtypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateSubtype::Sheet_ConflateSubtype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateSubtype::InitAsDefaultInstance() {
}

Sheet_ConflateSubtype::Sheet_ConflateSubtype(const Sheet_ConflateSubtype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateSubtype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateSubtype::~Sheet_ConflateSubtype() {
  SharedDtor();
}

void Sheet_ConflateSubtype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateSubtype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateSubtype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateSubtype_descriptor_;
}

const Sheet_ConflateSubtype& Sheet_ConflateSubtype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateSubtype* Sheet_ConflateSubtype::default_instance_ = NULL;

Sheet_ConflateSubtype* Sheet_ConflateSubtype::New() const {
  return new Sheet_ConflateSubtype;
}

void Sheet_ConflateSubtype::Clear() {
  e_conflatesubtype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateSubtype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateSubtype E_ConflateSubtype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateSubtype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflatesubtype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateSubtype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateSubtype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateSubtype E_ConflateSubtype_List = 1;
  for (int i = 0; i < this->e_conflatesubtype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflatesubtype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateSubtype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateSubtype E_ConflateSubtype_List = 1;
  for (int i = 0; i < this->e_conflatesubtype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflatesubtype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateSubtype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateSubtype E_ConflateSubtype_List = 1;
  total_size += 1 * this->e_conflatesubtype_list_size();
  for (int i = 0; i < this->e_conflatesubtype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflatesubtype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateSubtype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateSubtype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateSubtype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateSubtype::MergeFrom(const Sheet_ConflateSubtype& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflatesubtype_list_.MergeFrom(from.e_conflatesubtype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateSubtype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateSubtype::CopyFrom(const Sheet_ConflateSubtype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateSubtype::IsInitialized() const {

  return true;
}

void Sheet_ConflateSubtype::Swap(Sheet_ConflateSubtype* other) {
  if (other != this) {
    e_conflatesubtype_list_.Swap(&other->e_conflatesubtype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateSubtype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateSubtype_descriptor_;
  metadata.reflection = Sheet_ConflateSubtype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflatePropReplaceDesc::kMNumFieldNumber;
const int E_ConflatePropReplaceDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflatePropReplaceDesc::E_ConflatePropReplaceDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflatePropReplaceDesc::InitAsDefaultInstance() {
}

E_ConflatePropReplaceDesc::E_ConflatePropReplaceDesc(const E_ConflatePropReplaceDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflatePropReplaceDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflatePropReplaceDesc::~E_ConflatePropReplaceDesc() {
  SharedDtor();
}

void E_ConflatePropReplaceDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflatePropReplaceDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflatePropReplaceDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflatePropReplaceDesc_descriptor_;
}

const E_ConflatePropReplaceDesc& E_ConflatePropReplaceDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflatePropReplaceDesc* E_ConflatePropReplaceDesc::default_instance_ = NULL;

E_ConflatePropReplaceDesc* E_ConflatePropReplaceDesc::New() const {
  return new E_ConflatePropReplaceDesc;
}

void E_ConflatePropReplaceDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflatePropReplaceDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflatePropReplaceDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflatePropReplaceDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflatePropReplaceDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflatePropReplaceDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflatePropReplaceDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflatePropReplaceDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflatePropReplaceDesc::MergeFrom(const E_ConflatePropReplaceDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflatePropReplaceDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflatePropReplaceDesc::CopyFrom(const E_ConflatePropReplaceDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflatePropReplaceDesc::IsInitialized() const {

  return true;
}

void E_ConflatePropReplaceDesc::Swap(E_ConflatePropReplaceDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflatePropReplaceDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflatePropReplaceDesc_descriptor_;
  metadata.reflection = E_ConflatePropReplaceDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflatePropElemDesc::kMNumFieldNumber;
const int E_ConflatePropElemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflatePropElemDesc::E_ConflatePropElemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflatePropElemDesc::InitAsDefaultInstance() {
}

E_ConflatePropElemDesc::E_ConflatePropElemDesc(const E_ConflatePropElemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflatePropElemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflatePropElemDesc::~E_ConflatePropElemDesc() {
  SharedDtor();
}

void E_ConflatePropElemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflatePropElemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflatePropElemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflatePropElemDesc_descriptor_;
}

const E_ConflatePropElemDesc& E_ConflatePropElemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflatePropElemDesc* E_ConflatePropElemDesc::default_instance_ = NULL;

E_ConflatePropElemDesc* E_ConflatePropElemDesc::New() const {
  return new E_ConflatePropElemDesc;
}

void E_ConflatePropElemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflatePropElemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflatePropElemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflatePropElemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflatePropElemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflatePropElemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflatePropElemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflatePropElemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflatePropElemDesc::MergeFrom(const E_ConflatePropElemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflatePropElemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflatePropElemDesc::CopyFrom(const E_ConflatePropElemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflatePropElemDesc::IsInitialized() const {

  return true;
}

void E_ConflatePropElemDesc::Swap(E_ConflatePropElemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflatePropElemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflatePropElemDesc_descriptor_;
  metadata.reflection = E_ConflatePropElemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateProp::kMTargetFieldNumber;
const int E_ConflateProp::kMOpenLvFieldNumber;
const int E_ConflateProp::kMSubTypeFieldNumber;
const int E_ConflateProp::kMOrderFieldNumber;
const int E_ConflateProp::kMActivateFieldNumber;
const int E_ConflateProp::kMDisplayFieldNumber;
const int E_ConflateProp::kMReplaceTypeFieldNumber;
const int E_ConflateProp::kMCultureFieldNumber;
const int E_ConflateProp::kMUsemoneyFieldNumber;
const int E_ConflateProp::kMCostFieldNumber;
const int E_ConflateProp::kMReplaceFieldNumber;
const int E_ConflateProp::kMElemFieldNumber;
#endif  // !_MSC_VER

E_ConflateProp::E_ConflateProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateProp::InitAsDefaultInstance() {
}

E_ConflateProp::E_ConflateProp(const E_ConflateProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateProp::SharedCtor() {
  _cached_size_ = 0;
  m_target_ = 0;
  m_openlv_ = 0;
  m_subtype_ = 0;
  m_order_ = 0;
  m_activate_ = 0;
  m_display_ = 0;
  m_replacetype_ = 0;
  m_culture_ = 0;
  m_usemoney_ = 0;
  m_cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateProp::~E_ConflateProp() {
  SharedDtor();
}

void E_ConflateProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateProp_descriptor_;
}

const E_ConflateProp& E_ConflateProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateProp* E_ConflateProp::default_instance_ = NULL;

E_ConflateProp* E_ConflateProp::New() const {
  return new E_ConflateProp;
}

void E_ConflateProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_target_ = 0;
    m_openlv_ = 0;
    m_subtype_ = 0;
    m_order_ = 0;
    m_activate_ = 0;
    m_display_ = 0;
    m_replacetype_ = 0;
    m_culture_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_usemoney_ = 0;
    m_cost_ = 0;
  }
  m_replace_.Clear();
  m_elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_target = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_target_)));
          set_has_m_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_openLv;
        break;
      }

      // optional int32 m_openLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_subType;
        break;
      }

      // optional int32 m_subType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_subtype_)));
          set_has_m_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_order;
        break;
      }

      // optional int32 m_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_order_)));
          set_has_m_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_activate;
        break;
      }

      // optional int32 m_activate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activate_)));
          set_has_m_activate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_display;
        break;
      }

      // optional int32 m_display = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_display:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_display_)));
          set_has_m_display();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_replaceType;
        break;
      }

      // optional int32 m_replaceType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_replaceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_replacetype_)));
          set_has_m_replacetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_culture;
        break;
      }

      // optional int32 m_culture = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_culture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_culture_)));
          set_has_m_culture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_usemoney;
        break;
      }

      // optional int32 m_usemoney = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_usemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_usemoney_)));
          set_has_m_usemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_cost;
        break;
      }

      // optional int32 m_cost = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cost_)));
          set_has_m_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_replace;
        break;
      }

      // repeated .proto_ff.E_ConflatePropReplaceDesc m_replace = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_replace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_replace()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_replace;
        if (input->ExpectTag(98)) goto parse_m_elem;
        break;
      }

      // repeated .proto_ff.E_ConflatePropElemDesc m_elem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_target = 1;
  if (has_m_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_target(), output);
  }

  // optional int32 m_openLv = 2;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_openlv(), output);
  }

  // optional int32 m_subType = 3;
  if (has_m_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_subtype(), output);
  }

  // optional int32 m_order = 4;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_order(), output);
  }

  // optional int32 m_activate = 5;
  if (has_m_activate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_activate(), output);
  }

  // optional int32 m_display = 6;
  if (has_m_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_display(), output);
  }

  // optional int32 m_replaceType = 7;
  if (has_m_replacetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_replacetype(), output);
  }

  // optional int32 m_culture = 8;
  if (has_m_culture()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_culture(), output);
  }

  // optional int32 m_usemoney = 9;
  if (has_m_usemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_usemoney(), output);
  }

  // optional int32 m_cost = 10;
  if (has_m_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_cost(), output);
  }

  // repeated .proto_ff.E_ConflatePropReplaceDesc m_replace = 11;
  for (int i = 0; i < this->m_replace_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->m_replace(i), output);
  }

  // repeated .proto_ff.E_ConflatePropElemDesc m_elem = 12;
  for (int i = 0; i < this->m_elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->m_elem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_target = 1;
  if (has_m_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_target(), target);
  }

  // optional int32 m_openLv = 2;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_openlv(), target);
  }

  // optional int32 m_subType = 3;
  if (has_m_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_subtype(), target);
  }

  // optional int32 m_order = 4;
  if (has_m_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_order(), target);
  }

  // optional int32 m_activate = 5;
  if (has_m_activate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_activate(), target);
  }

  // optional int32 m_display = 6;
  if (has_m_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_display(), target);
  }

  // optional int32 m_replaceType = 7;
  if (has_m_replacetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_replacetype(), target);
  }

  // optional int32 m_culture = 8;
  if (has_m_culture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_culture(), target);
  }

  // optional int32 m_usemoney = 9;
  if (has_m_usemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_usemoney(), target);
  }

  // optional int32 m_cost = 10;
  if (has_m_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_cost(), target);
  }

  // repeated .proto_ff.E_ConflatePropReplaceDesc m_replace = 11;
  for (int i = 0; i < this->m_replace_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->m_replace(i), target);
  }

  // repeated .proto_ff.E_ConflatePropElemDesc m_elem = 12;
  for (int i = 0; i < this->m_elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->m_elem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_target = 1;
    if (has_m_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_target());
    }

    // optional int32 m_openLv = 2;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

    // optional int32 m_subType = 3;
    if (has_m_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_subtype());
    }

    // optional int32 m_order = 4;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_order());
    }

    // optional int32 m_activate = 5;
    if (has_m_activate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activate());
    }

    // optional int32 m_display = 6;
    if (has_m_display()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_display());
    }

    // optional int32 m_replaceType = 7;
    if (has_m_replacetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_replacetype());
    }

    // optional int32 m_culture = 8;
    if (has_m_culture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_culture());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_usemoney = 9;
    if (has_m_usemoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_usemoney());
    }

    // optional int32 m_cost = 10;
    if (has_m_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cost());
    }

  }
  // repeated .proto_ff.E_ConflatePropReplaceDesc m_replace = 11;
  total_size += 1 * this->m_replace_size();
  for (int i = 0; i < this->m_replace_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_replace(i));
  }

  // repeated .proto_ff.E_ConflatePropElemDesc m_elem = 12;
  total_size += 1 * this->m_elem_size();
  for (int i = 0; i < this->m_elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_elem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateProp::MergeFrom(const E_ConflateProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_replace_.MergeFrom(from.m_replace_);
  m_elem_.MergeFrom(from.m_elem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_target()) {
      set_m_target(from.m_target());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
    if (from.has_m_subtype()) {
      set_m_subtype(from.m_subtype());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_activate()) {
      set_m_activate(from.m_activate());
    }
    if (from.has_m_display()) {
      set_m_display(from.m_display());
    }
    if (from.has_m_replacetype()) {
      set_m_replacetype(from.m_replacetype());
    }
    if (from.has_m_culture()) {
      set_m_culture(from.m_culture());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_usemoney()) {
      set_m_usemoney(from.m_usemoney());
    }
    if (from.has_m_cost()) {
      set_m_cost(from.m_cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateProp::CopyFrom(const E_ConflateProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateProp::IsInitialized() const {

  return true;
}

void E_ConflateProp::Swap(E_ConflateProp* other) {
  if (other != this) {
    std::swap(m_target_, other->m_target_);
    std::swap(m_openlv_, other->m_openlv_);
    std::swap(m_subtype_, other->m_subtype_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_activate_, other->m_activate_);
    std::swap(m_display_, other->m_display_);
    std::swap(m_replacetype_, other->m_replacetype_);
    std::swap(m_culture_, other->m_culture_);
    std::swap(m_usemoney_, other->m_usemoney_);
    std::swap(m_cost_, other->m_cost_);
    m_replace_.Swap(&other->m_replace_);
    m_elem_.Swap(&other->m_elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateProp_descriptor_;
  metadata.reflection = E_ConflateProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateProp::kEConflatePropListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateProp::Sheet_ConflateProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateProp::InitAsDefaultInstance() {
}

Sheet_ConflateProp::Sheet_ConflateProp(const Sheet_ConflateProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateProp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateProp::~Sheet_ConflateProp() {
  SharedDtor();
}

void Sheet_ConflateProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateProp_descriptor_;
}

const Sheet_ConflateProp& Sheet_ConflateProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateProp* Sheet_ConflateProp::default_instance_ = NULL;

Sheet_ConflateProp* Sheet_ConflateProp::New() const {
  return new Sheet_ConflateProp;
}

void Sheet_ConflateProp::Clear() {
  e_conflateprop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateProp E_ConflateProp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateProp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflateprop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateProp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateProp E_ConflateProp_List = 1;
  for (int i = 0; i < this->e_conflateprop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflateprop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateProp E_ConflateProp_List = 1;
  for (int i = 0; i < this->e_conflateprop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflateprop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateProp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateProp E_ConflateProp_List = 1;
  total_size += 1 * this->e_conflateprop_list_size();
  for (int i = 0; i < this->e_conflateprop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflateprop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateProp::MergeFrom(const Sheet_ConflateProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflateprop_list_.MergeFrom(from.e_conflateprop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateProp::CopyFrom(const Sheet_ConflateProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateProp::IsInitialized() const {

  return true;
}

void Sheet_ConflateProp::Swap(Sheet_ConflateProp* other) {
  if (other != this) {
    e_conflateprop_list_.Swap(&other->e_conflateprop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateProp_descriptor_;
  metadata.reflection = Sheet_ConflateProp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_spElemDesc::kMNumFieldNumber;
const int E_ConflateJewelry_spElemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_spElemDesc::E_ConflateJewelry_spElemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_spElemDesc::InitAsDefaultInstance() {
}

E_ConflateJewelry_spElemDesc::E_ConflateJewelry_spElemDesc(const E_ConflateJewelry_spElemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_spElemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_spElemDesc::~E_ConflateJewelry_spElemDesc() {
  SharedDtor();
}

void E_ConflateJewelry_spElemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_spElemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_spElemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_spElemDesc_descriptor_;
}

const E_ConflateJewelry_spElemDesc& E_ConflateJewelry_spElemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_spElemDesc* E_ConflateJewelry_spElemDesc::default_instance_ = NULL;

E_ConflateJewelry_spElemDesc* E_ConflateJewelry_spElemDesc::New() const {
  return new E_ConflateJewelry_spElemDesc;
}

void E_ConflateJewelry_spElemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_spElemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_spElemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_spElemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_spElemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_spElemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_spElemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_spElemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_spElemDesc::MergeFrom(const E_ConflateJewelry_spElemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_spElemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_spElemDesc::CopyFrom(const E_ConflateJewelry_spElemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_spElemDesc::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_spElemDesc::Swap(E_ConflateJewelry_spElemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_spElemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_spElemDesc_descriptor_;
  metadata.reflection = E_ConflateJewelry_spElemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_sp::kMIdFieldNumber;
const int E_ConflateJewelry_sp::kMGroupTypeFieldNumber;
const int E_ConflateJewelry_sp::kMOpenwearQualityFieldNumber;
const int E_ConflateJewelry_sp::kMOpenspecialFieldNumber;
const int E_ConflateJewelry_sp::kMPositionFieldNumber;
const int E_ConflateJewelry_sp::kMQualityFieldNumber;
const int E_ConflateJewelry_sp::kMStarFieldNumber;
const int E_ConflateJewelry_sp::kMNextFieldNumber;
const int E_ConflateJewelry_sp::kMElemFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_sp::E_ConflateJewelry_sp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_sp::InitAsDefaultInstance() {
}

E_ConflateJewelry_sp::E_ConflateJewelry_sp(const E_ConflateJewelry_sp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_sp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_grouptype_ = 0;
  m_openwearquality_ = 0;
  m_openspecial_ = 0;
  m_position_ = 0;
  m_quality_ = 0;
  m_star_ = 0;
  m_next_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_sp::~E_ConflateJewelry_sp() {
  SharedDtor();
}

void E_ConflateJewelry_sp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_sp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_sp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_sp_descriptor_;
}

const E_ConflateJewelry_sp& E_ConflateJewelry_sp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_sp* E_ConflateJewelry_sp::default_instance_ = NULL;

E_ConflateJewelry_sp* E_ConflateJewelry_sp::New() const {
  return new E_ConflateJewelry_sp;
}

void E_ConflateJewelry_sp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_grouptype_ = 0;
    m_openwearquality_ = 0;
    m_openspecial_ = 0;
    m_position_ = 0;
    m_quality_ = 0;
    m_star_ = 0;
    m_next_ = 0;
  }
  m_elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_sp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupType;
        break;
      }

      // optional int32 m_groupType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptype_)));
          set_has_m_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_openwearQuality;
        break;
      }

      // optional int32 m_openwearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openwearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openwearquality_)));
          set_has_m_openwearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_openspecial;
        break;
      }

      // optional int32 m_openspecial = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openspecial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openspecial_)));
          set_has_m_openspecial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_star;
        break;
      }

      // optional int32 m_star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_star_)));
          set_has_m_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_next;
        break;
      }

      // optional int32 m_next = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_next_)));
          set_has_m_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_elem;
        break;
      }

      // repeated .proto_ff.E_ConflateJewelry_spElemDesc m_elem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_sp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupType = 2;
  if (has_m_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_grouptype(), output);
  }

  // optional int32 m_openwearQuality = 3;
  if (has_m_openwearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_openwearquality(), output);
  }

  // optional int32 m_openspecial = 4;
  if (has_m_openspecial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_openspecial(), output);
  }

  // optional int32 m_position = 5;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_position(), output);
  }

  // optional int32 m_quality = 6;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_quality(), output);
  }

  // optional int32 m_star = 7;
  if (has_m_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_star(), output);
  }

  // optional int32 m_next = 8;
  if (has_m_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_next(), output);
  }

  // repeated .proto_ff.E_ConflateJewelry_spElemDesc m_elem = 9;
  for (int i = 0; i < this->m_elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_elem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_sp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupType = 2;
  if (has_m_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_grouptype(), target);
  }

  // optional int32 m_openwearQuality = 3;
  if (has_m_openwearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_openwearquality(), target);
  }

  // optional int32 m_openspecial = 4;
  if (has_m_openspecial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_openspecial(), target);
  }

  // optional int32 m_position = 5;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_position(), target);
  }

  // optional int32 m_quality = 6;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_quality(), target);
  }

  // optional int32 m_star = 7;
  if (has_m_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_star(), target);
  }

  // optional int32 m_next = 8;
  if (has_m_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_next(), target);
  }

  // repeated .proto_ff.E_ConflateJewelry_spElemDesc m_elem = 9;
  for (int i = 0; i < this->m_elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_elem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_sp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupType = 2;
    if (has_m_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptype());
    }

    // optional int32 m_openwearQuality = 3;
    if (has_m_openwearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openwearquality());
    }

    // optional int32 m_openspecial = 4;
    if (has_m_openspecial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openspecial());
    }

    // optional int32 m_position = 5;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_quality = 6;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_star = 7;
    if (has_m_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_star());
    }

    // optional int32 m_next = 8;
    if (has_m_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_next());
    }

  }
  // repeated .proto_ff.E_ConflateJewelry_spElemDesc m_elem = 9;
  total_size += 1 * this->m_elem_size();
  for (int i = 0; i < this->m_elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_elem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_sp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_sp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_sp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_sp::MergeFrom(const E_ConflateJewelry_sp& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_elem_.MergeFrom(from.m_elem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_grouptype()) {
      set_m_grouptype(from.m_grouptype());
    }
    if (from.has_m_openwearquality()) {
      set_m_openwearquality(from.m_openwearquality());
    }
    if (from.has_m_openspecial()) {
      set_m_openspecial(from.m_openspecial());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_star()) {
      set_m_star(from.m_star());
    }
    if (from.has_m_next()) {
      set_m_next(from.m_next());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_sp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_sp::CopyFrom(const E_ConflateJewelry_sp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_sp::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_sp::Swap(E_ConflateJewelry_sp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_grouptype_, other->m_grouptype_);
    std::swap(m_openwearquality_, other->m_openwearquality_);
    std::swap(m_openspecial_, other->m_openspecial_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_star_, other->m_star_);
    std::swap(m_next_, other->m_next_);
    m_elem_.Swap(&other->m_elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_sp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_sp_descriptor_;
  metadata.reflection = E_ConflateJewelry_sp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateJewelry_sp::kEConflateJewelrySpListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateJewelry_sp::Sheet_ConflateJewelry_sp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateJewelry_sp::InitAsDefaultInstance() {
}

Sheet_ConflateJewelry_sp::Sheet_ConflateJewelry_sp(const Sheet_ConflateJewelry_sp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_sp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateJewelry_sp::~Sheet_ConflateJewelry_sp() {
  SharedDtor();
}

void Sheet_ConflateJewelry_sp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateJewelry_sp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_sp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateJewelry_sp_descriptor_;
}

const Sheet_ConflateJewelry_sp& Sheet_ConflateJewelry_sp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateJewelry_sp* Sheet_ConflateJewelry_sp::default_instance_ = NULL;

Sheet_ConflateJewelry_sp* Sheet_ConflateJewelry_sp::New() const {
  return new Sheet_ConflateJewelry_sp;
}

void Sheet_ConflateJewelry_sp::Clear() {
  e_conflatejewelry_sp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateJewelry_sp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateJewelry_sp E_ConflateJewelry_sp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateJewelry_sp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflatejewelry_sp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateJewelry_sp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateJewelry_sp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateJewelry_sp E_ConflateJewelry_sp_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_sp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflatejewelry_sp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateJewelry_sp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateJewelry_sp E_ConflateJewelry_sp_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_sp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflatejewelry_sp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateJewelry_sp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateJewelry_sp E_ConflateJewelry_sp_List = 1;
  total_size += 1 * this->e_conflatejewelry_sp_list_size();
  for (int i = 0; i < this->e_conflatejewelry_sp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflatejewelry_sp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateJewelry_sp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateJewelry_sp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateJewelry_sp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateJewelry_sp::MergeFrom(const Sheet_ConflateJewelry_sp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflatejewelry_sp_list_.MergeFrom(from.e_conflatejewelry_sp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateJewelry_sp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_sp::CopyFrom(const Sheet_ConflateJewelry_sp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateJewelry_sp::IsInitialized() const {

  return true;
}

void Sheet_ConflateJewelry_sp::Swap(Sheet_ConflateJewelry_sp* other) {
  if (other != this) {
    e_conflatejewelry_sp_list_.Swap(&other->e_conflatejewelry_sp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateJewelry_sp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateJewelry_sp_descriptor_;
  metadata.reflection = Sheet_ConflateJewelry_sp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_zlElemDesc::kMNumFieldNumber;
const int E_ConflateJewelry_zlElemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_zlElemDesc::E_ConflateJewelry_zlElemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_zlElemDesc::InitAsDefaultInstance() {
}

E_ConflateJewelry_zlElemDesc::E_ConflateJewelry_zlElemDesc(const E_ConflateJewelry_zlElemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_zlElemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_zlElemDesc::~E_ConflateJewelry_zlElemDesc() {
  SharedDtor();
}

void E_ConflateJewelry_zlElemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_zlElemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_zlElemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_zlElemDesc_descriptor_;
}

const E_ConflateJewelry_zlElemDesc& E_ConflateJewelry_zlElemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_zlElemDesc* E_ConflateJewelry_zlElemDesc::default_instance_ = NULL;

E_ConflateJewelry_zlElemDesc* E_ConflateJewelry_zlElemDesc::New() const {
  return new E_ConflateJewelry_zlElemDesc;
}

void E_ConflateJewelry_zlElemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_zlElemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_zlElemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_zlElemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_zlElemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_zlElemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_zlElemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_zlElemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_zlElemDesc::MergeFrom(const E_ConflateJewelry_zlElemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_zlElemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_zlElemDesc::CopyFrom(const E_ConflateJewelry_zlElemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_zlElemDesc::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_zlElemDesc::Swap(E_ConflateJewelry_zlElemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_zlElemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_zlElemDesc_descriptor_;
  metadata.reflection = E_ConflateJewelry_zlElemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_zl::kMIdFieldNumber;
const int E_ConflateJewelry_zl::kMOpenqualityFieldNumber;
const int E_ConflateJewelry_zl::kMGroupTypeFieldNumber;
const int E_ConflateJewelry_zl::kMPositionFieldNumber;
const int E_ConflateJewelry_zl::kMZllvFieldNumber;
const int E_ConflateJewelry_zl::kMNextFieldNumber;
const int E_ConflateJewelry_zl::kMZlnameFieldNumber;
const int E_ConflateJewelry_zl::kMElemFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_zl::E_ConflateJewelry_zl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_zl::InitAsDefaultInstance() {
}

E_ConflateJewelry_zl::E_ConflateJewelry_zl(const E_ConflateJewelry_zl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_zl::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_openquality_ = 0;
  m_grouptype_ = 0;
  m_position_ = 0;
  m_zllv_ = 0;
  m_next_ = 0;
  m_zlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_zl::~E_ConflateJewelry_zl() {
  SharedDtor();
}

void E_ConflateJewelry_zl::SharedDtor() {
  if (m_zlname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_zlname_;
  }
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_zl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_zl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_zl_descriptor_;
}

const E_ConflateJewelry_zl& E_ConflateJewelry_zl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_zl* E_ConflateJewelry_zl::default_instance_ = NULL;

E_ConflateJewelry_zl* E_ConflateJewelry_zl::New() const {
  return new E_ConflateJewelry_zl;
}

void E_ConflateJewelry_zl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_openquality_ = 0;
    m_grouptype_ = 0;
    m_position_ = 0;
    m_zllv_ = 0;
    m_next_ = 0;
    if (has_m_zlname()) {
      if (m_zlname_ != &::google::protobuf::internal::kEmptyString) {
        m_zlname_->clear();
      }
    }
  }
  m_elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_zl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_openquality;
        break;
      }

      // optional int32 m_openquality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openquality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openquality_)));
          set_has_m_openquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_groupType;
        break;
      }

      // optional int32 m_groupType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptype_)));
          set_has_m_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_Zllv;
        break;
      }

      // optional int32 m_Zllv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Zllv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_zllv_)));
          set_has_m_zllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_next;
        break;
      }

      // optional int32 m_next = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_next_)));
          set_has_m_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_Zlname;
        break;
      }

      // optional string m_Zlname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Zlname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_zlname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_zlname().data(), this->m_zlname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_elem;
        break;
      }

      // repeated .proto_ff.E_ConflateJewelry_zlElemDesc m_elem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_zl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_openquality = 2;
  if (has_m_openquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_openquality(), output);
  }

  // optional int32 m_groupType = 3;
  if (has_m_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_grouptype(), output);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_position(), output);
  }

  // optional int32 m_Zllv = 5;
  if (has_m_zllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_zllv(), output);
  }

  // optional int32 m_next = 6;
  if (has_m_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_next(), output);
  }

  // optional string m_Zlname = 7;
  if (has_m_zlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_zlname().data(), this->m_zlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_zlname(), output);
  }

  // repeated .proto_ff.E_ConflateJewelry_zlElemDesc m_elem = 8;
  for (int i = 0; i < this->m_elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_elem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_zl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_openquality = 2;
  if (has_m_openquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_openquality(), target);
  }

  // optional int32 m_groupType = 3;
  if (has_m_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_grouptype(), target);
  }

  // optional int32 m_position = 4;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_position(), target);
  }

  // optional int32 m_Zllv = 5;
  if (has_m_zllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_zllv(), target);
  }

  // optional int32 m_next = 6;
  if (has_m_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_next(), target);
  }

  // optional string m_Zlname = 7;
  if (has_m_zlname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_zlname().data(), this->m_zlname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_zlname(), target);
  }

  // repeated .proto_ff.E_ConflateJewelry_zlElemDesc m_elem = 8;
  for (int i = 0; i < this->m_elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_elem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_zl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_openquality = 2;
    if (has_m_openquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openquality());
    }

    // optional int32 m_groupType = 3;
    if (has_m_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptype());
    }

    // optional int32 m_position = 4;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_Zllv = 5;
    if (has_m_zllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_zllv());
    }

    // optional int32 m_next = 6;
    if (has_m_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_next());
    }

    // optional string m_Zlname = 7;
    if (has_m_zlname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_zlname());
    }

  }
  // repeated .proto_ff.E_ConflateJewelry_zlElemDesc m_elem = 8;
  total_size += 1 * this->m_elem_size();
  for (int i = 0; i < this->m_elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_elem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_zl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_zl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_zl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_zl::MergeFrom(const E_ConflateJewelry_zl& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_elem_.MergeFrom(from.m_elem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_openquality()) {
      set_m_openquality(from.m_openquality());
    }
    if (from.has_m_grouptype()) {
      set_m_grouptype(from.m_grouptype());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_zllv()) {
      set_m_zllv(from.m_zllv());
    }
    if (from.has_m_next()) {
      set_m_next(from.m_next());
    }
    if (from.has_m_zlname()) {
      set_m_zlname(from.m_zlname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_zl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_zl::CopyFrom(const E_ConflateJewelry_zl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_zl::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_zl::Swap(E_ConflateJewelry_zl* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_openquality_, other->m_openquality_);
    std::swap(m_grouptype_, other->m_grouptype_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_zllv_, other->m_zllv_);
    std::swap(m_next_, other->m_next_);
    std::swap(m_zlname_, other->m_zlname_);
    m_elem_.Swap(&other->m_elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_zl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_zl_descriptor_;
  metadata.reflection = E_ConflateJewelry_zl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateJewelry_zl::kEConflateJewelryZlListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateJewelry_zl::Sheet_ConflateJewelry_zl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateJewelry_zl::InitAsDefaultInstance() {
}

Sheet_ConflateJewelry_zl::Sheet_ConflateJewelry_zl(const Sheet_ConflateJewelry_zl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_zl::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateJewelry_zl::~Sheet_ConflateJewelry_zl() {
  SharedDtor();
}

void Sheet_ConflateJewelry_zl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateJewelry_zl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_zl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateJewelry_zl_descriptor_;
}

const Sheet_ConflateJewelry_zl& Sheet_ConflateJewelry_zl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateJewelry_zl* Sheet_ConflateJewelry_zl::default_instance_ = NULL;

Sheet_ConflateJewelry_zl* Sheet_ConflateJewelry_zl::New() const {
  return new Sheet_ConflateJewelry_zl;
}

void Sheet_ConflateJewelry_zl::Clear() {
  e_conflatejewelry_zl_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateJewelry_zl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateJewelry_zl E_ConflateJewelry_zl_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateJewelry_zl_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflatejewelry_zl_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateJewelry_zl_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateJewelry_zl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateJewelry_zl E_ConflateJewelry_zl_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_zl_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflatejewelry_zl_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateJewelry_zl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateJewelry_zl E_ConflateJewelry_zl_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_zl_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflatejewelry_zl_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateJewelry_zl::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateJewelry_zl E_ConflateJewelry_zl_List = 1;
  total_size += 1 * this->e_conflatejewelry_zl_list_size();
  for (int i = 0; i < this->e_conflatejewelry_zl_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflatejewelry_zl_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateJewelry_zl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateJewelry_zl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateJewelry_zl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateJewelry_zl::MergeFrom(const Sheet_ConflateJewelry_zl& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflatejewelry_zl_list_.MergeFrom(from.e_conflatejewelry_zl_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateJewelry_zl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_zl::CopyFrom(const Sheet_ConflateJewelry_zl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateJewelry_zl::IsInitialized() const {

  return true;
}

void Sheet_ConflateJewelry_zl::Swap(Sheet_ConflateJewelry_zl* other) {
  if (other != this) {
    e_conflatejewelry_zl_list_.Swap(&other->e_conflatejewelry_zl_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateJewelry_zl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateJewelry_zl_descriptor_;
  metadata.reflection = Sheet_ConflateJewelry_zl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_sjElemDesc::kMNumFieldNumber;
const int E_ConflateJewelry_sjElemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_sjElemDesc::E_ConflateJewelry_sjElemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_sjElemDesc::InitAsDefaultInstance() {
}

E_ConflateJewelry_sjElemDesc::E_ConflateJewelry_sjElemDesc(const E_ConflateJewelry_sjElemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_sjElemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_sjElemDesc::~E_ConflateJewelry_sjElemDesc() {
  SharedDtor();
}

void E_ConflateJewelry_sjElemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_sjElemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_sjElemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_sjElemDesc_descriptor_;
}

const E_ConflateJewelry_sjElemDesc& E_ConflateJewelry_sjElemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_sjElemDesc* E_ConflateJewelry_sjElemDesc::default_instance_ = NULL;

E_ConflateJewelry_sjElemDesc* E_ConflateJewelry_sjElemDesc::New() const {
  return new E_ConflateJewelry_sjElemDesc;
}

void E_ConflateJewelry_sjElemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_sjElemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_sjElemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_sjElemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_sjElemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_sjElemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_sjElemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_sjElemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_sjElemDesc::MergeFrom(const E_ConflateJewelry_sjElemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_sjElemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_sjElemDesc::CopyFrom(const E_ConflateJewelry_sjElemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_sjElemDesc::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_sjElemDesc::Swap(E_ConflateJewelry_sjElemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_sjElemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_sjElemDesc_descriptor_;
  metadata.reflection = E_ConflateJewelry_sjElemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConflateJewelry_sj::kMIdFieldNumber;
const int E_ConflateJewelry_sj::kMGroupTypeFieldNumber;
const int E_ConflateJewelry_sj::kMPositionFieldNumber;
const int E_ConflateJewelry_sj::kMWearQualityFieldNumber;
const int E_ConflateJewelry_sj::kMNextFieldNumber;
const int E_ConflateJewelry_sj::kMOpenLvFieldNumber;
const int E_ConflateJewelry_sj::kMElemFieldNumber;
#endif  // !_MSC_VER

E_ConflateJewelry_sj::E_ConflateJewelry_sj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConflateJewelry_sj::InitAsDefaultInstance() {
}

E_ConflateJewelry_sj::E_ConflateJewelry_sj(const E_ConflateJewelry_sj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConflateJewelry_sj::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_grouptype_ = 0;
  m_position_ = 0;
  m_wearquality_ = 0;
  m_next_ = 0;
  m_openlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConflateJewelry_sj::~E_ConflateJewelry_sj() {
  SharedDtor();
}

void E_ConflateJewelry_sj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConflateJewelry_sj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConflateJewelry_sj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConflateJewelry_sj_descriptor_;
}

const E_ConflateJewelry_sj& E_ConflateJewelry_sj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

E_ConflateJewelry_sj* E_ConflateJewelry_sj::default_instance_ = NULL;

E_ConflateJewelry_sj* E_ConflateJewelry_sj::New() const {
  return new E_ConflateJewelry_sj;
}

void E_ConflateJewelry_sj::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_grouptype_ = 0;
    m_position_ = 0;
    m_wearquality_ = 0;
    m_next_ = 0;
    m_openlv_ = 0;
  }
  m_elem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConflateJewelry_sj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupType;
        break;
      }

      // optional int32 m_groupType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_grouptype_)));
          set_has_m_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_wearQuality;
        break;
      }

      // optional int32 m_wearQuality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearquality_)));
          set_has_m_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_next;
        break;
      }

      // optional int32 m_next = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_next_)));
          set_has_m_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_openLv;
        break;
      }

      // optional int32 m_openLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openlv_)));
          set_has_m_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_elem;
        break;
      }

      // repeated .proto_ff.E_ConflateJewelry_sjElemDesc m_elem = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_elem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_elem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_elem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConflateJewelry_sj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupType = 2;
  if (has_m_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_grouptype(), output);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  // optional int32 m_wearQuality = 4;
  if (has_m_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_wearquality(), output);
  }

  // optional int32 m_next = 5;
  if (has_m_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_next(), output);
  }

  // optional int32 m_openLv = 6;
  if (has_m_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_openlv(), output);
  }

  // repeated .proto_ff.E_ConflateJewelry_sjElemDesc m_elem = 7;
  for (int i = 0; i < this->m_elem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_elem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConflateJewelry_sj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupType = 2;
  if (has_m_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_grouptype(), target);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  // optional int32 m_wearQuality = 4;
  if (has_m_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_wearquality(), target);
  }

  // optional int32 m_next = 5;
  if (has_m_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_next(), target);
  }

  // optional int32 m_openLv = 6;
  if (has_m_openlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_openlv(), target);
  }

  // repeated .proto_ff.E_ConflateJewelry_sjElemDesc m_elem = 7;
  for (int i = 0; i < this->m_elem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_elem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConflateJewelry_sj::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupType = 2;
    if (has_m_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_grouptype());
    }

    // optional int32 m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_wearQuality = 4;
    if (has_m_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearquality());
    }

    // optional int32 m_next = 5;
    if (has_m_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_next());
    }

    // optional int32 m_openLv = 6;
    if (has_m_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openlv());
    }

  }
  // repeated .proto_ff.E_ConflateJewelry_sjElemDesc m_elem = 7;
  total_size += 1 * this->m_elem_size();
  for (int i = 0; i < this->m_elem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_elem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConflateJewelry_sj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConflateJewelry_sj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConflateJewelry_sj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConflateJewelry_sj::MergeFrom(const E_ConflateJewelry_sj& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_elem_.MergeFrom(from.m_elem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_grouptype()) {
      set_m_grouptype(from.m_grouptype());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_wearquality()) {
      set_m_wearquality(from.m_wearquality());
    }
    if (from.has_m_next()) {
      set_m_next(from.m_next());
    }
    if (from.has_m_openlv()) {
      set_m_openlv(from.m_openlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConflateJewelry_sj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConflateJewelry_sj::CopyFrom(const E_ConflateJewelry_sj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConflateJewelry_sj::IsInitialized() const {

  return true;
}

void E_ConflateJewelry_sj::Swap(E_ConflateJewelry_sj* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_grouptype_, other->m_grouptype_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_wearquality_, other->m_wearquality_);
    std::swap(m_next_, other->m_next_);
    std::swap(m_openlv_, other->m_openlv_);
    m_elem_.Swap(&other->m_elem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConflateJewelry_sj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConflateJewelry_sj_descriptor_;
  metadata.reflection = E_ConflateJewelry_sj_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConflateJewelry_sj::kEConflateJewelrySjListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConflateJewelry_sj::Sheet_ConflateJewelry_sj()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConflateJewelry_sj::InitAsDefaultInstance() {
}

Sheet_ConflateJewelry_sj::Sheet_ConflateJewelry_sj(const Sheet_ConflateJewelry_sj& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_sj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConflateJewelry_sj::~Sheet_ConflateJewelry_sj() {
  SharedDtor();
}

void Sheet_ConflateJewelry_sj::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConflateJewelry_sj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConflateJewelry_sj::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConflateJewelry_sj_descriptor_;
}

const Sheet_ConflateJewelry_sj& Sheet_ConflateJewelry_sj::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fConflate_2eproto();
  return *default_instance_;
}

Sheet_ConflateJewelry_sj* Sheet_ConflateJewelry_sj::default_instance_ = NULL;

Sheet_ConflateJewelry_sj* Sheet_ConflateJewelry_sj::New() const {
  return new Sheet_ConflateJewelry_sj;
}

void Sheet_ConflateJewelry_sj::Clear() {
  e_conflatejewelry_sj_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConflateJewelry_sj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConflateJewelry_sj E_ConflateJewelry_sj_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConflateJewelry_sj_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conflatejewelry_sj_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConflateJewelry_sj_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConflateJewelry_sj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConflateJewelry_sj E_ConflateJewelry_sj_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_sj_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conflatejewelry_sj_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConflateJewelry_sj::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConflateJewelry_sj E_ConflateJewelry_sj_List = 1;
  for (int i = 0; i < this->e_conflatejewelry_sj_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conflatejewelry_sj_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConflateJewelry_sj::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConflateJewelry_sj E_ConflateJewelry_sj_List = 1;
  total_size += 1 * this->e_conflatejewelry_sj_list_size();
  for (int i = 0; i < this->e_conflatejewelry_sj_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conflatejewelry_sj_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConflateJewelry_sj::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConflateJewelry_sj* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConflateJewelry_sj*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConflateJewelry_sj::MergeFrom(const Sheet_ConflateJewelry_sj& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conflatejewelry_sj_list_.MergeFrom(from.e_conflatejewelry_sj_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConflateJewelry_sj::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConflateJewelry_sj::CopyFrom(const Sheet_ConflateJewelry_sj& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConflateJewelry_sj::IsInitialized() const {

  return true;
}

void Sheet_ConflateJewelry_sj::Swap(Sheet_ConflateJewelry_sj* other) {
  if (other != this) {
    e_conflatejewelry_sj_list_.Swap(&other->e_conflatejewelry_sj_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConflateJewelry_sj::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConflateJewelry_sj_descriptor_;
  metadata.reflection = Sheet_ConflateJewelry_sj_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
