// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* teamteam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  teamteam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_teamteam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_teamteam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_team_2eproto() {
  protobuf_AddDesc_team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "team.proto");
  GOOGLE_CHECK(file != NULL);
  teamteam_descriptor_ = file->message_type(0);
  static const int teamteam_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, teamobjectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, fobjectnameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, sobjectnameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, duplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, lowlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, uplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, isautomatch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, speakchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, teamnumber_),
  };
  teamteam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      teamteam_descriptor_,
      teamteam::default_instance_,
      teamteam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teamteam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(teamteam));
  Sheet_teamteam_descriptor_ = file->message_type(1);
  static const int Sheet_teamteam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teamteam, teamteam_list_),
  };
  Sheet_teamteam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_teamteam_descriptor_,
      Sheet_teamteam::default_instance_,
      Sheet_teamteam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teamteam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teamteam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_teamteam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    teamteam_descriptor_, &teamteam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_teamteam_descriptor_, &Sheet_teamteam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_team_2eproto() {
  delete teamteam::default_instance_;
  delete teamteam_reflection_;
  delete Sheet_teamteam::default_instance_;
  delete Sheet_teamteam_reflection_;
}

void protobuf_AddDesc_team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nteam.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\213\003\n\010teamteam\022(\n\014TeamObjectID\030\001 \001(\005"
    "B\022\302\377\024\016\347\273\204\351\230\237\347\233\256\346\240\207ID\022,\n\rFObjectNameID\030\002 "
    "\001(\005B\025\302\377\024\021\347\210\266\347\233\256\346\240\207\345\220\215\347\247\260ID\022,\n\rSObjectNam"
    "eID\030\003 \001(\005B\025\302\377\024\021\345\255\220\347\233\256\346\240\207\345\220\215\347\247\260ID\022!\n\013dupl"
    "icateId\030\004 \001(\003B\014\302\377\024\010\345\211\257\346\234\254ID\022 \n\nactivityI"
    "d\030\005 \001(\003B\014\302\377\024\010\346\264\273\345\212\250ID\022\037\n\005LowLV\030\006 \001(\005B\020\302\377"
    "\024\014\344\270\213\351\231\220\347\255\211\347\272\247\022\036\n\004UpLV\030\007 \001(\005B\020\302\377\024\014\344\270\212\351\231\220"
    "\347\255\211\347\272\247\022+\n\013isAutoMatch\030\010 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\350"
    "\207\252\345\212\250\345\214\271\351\205\215\022&\n\014speakChannel\030\t \001(\005B\020\302\377\024\014\345"
    "\226\212\350\257\235\351\242\221\351\201\223\022\036\n\nteamnumber\030\n \001(\005B\n\302\377\024\006\345\272\217"
    "\345\210\227\"B\n\016Sheet_teamteam\0220\n\rteamteam_List\030\001"
    " \003(\0132\022.proto_ff.teamteamB\005\210\301\024\200\001", 511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "team.proto", &protobuf_RegisterTypes);
  teamteam::default_instance_ = new teamteam();
  Sheet_teamteam::default_instance_ = new Sheet_teamteam();
  teamteam::default_instance_->InitAsDefaultInstance();
  Sheet_teamteam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_team_2eproto {
  StaticDescriptorInitializer_team_2eproto() {
    protobuf_AddDesc_team_2eproto();
  }
} static_descriptor_initializer_team_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int teamteam::kTeamObjectIDFieldNumber;
const int teamteam::kFObjectNameIDFieldNumber;
const int teamteam::kSObjectNameIDFieldNumber;
const int teamteam::kDuplicateIdFieldNumber;
const int teamteam::kActivityIdFieldNumber;
const int teamteam::kLowLVFieldNumber;
const int teamteam::kUpLVFieldNumber;
const int teamteam::kIsAutoMatchFieldNumber;
const int teamteam::kSpeakChannelFieldNumber;
const int teamteam::kTeamnumberFieldNumber;
#endif  // !_MSC_VER

teamteam::teamteam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void teamteam::InitAsDefaultInstance() {
}

teamteam::teamteam(const teamteam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void teamteam::SharedCtor() {
  _cached_size_ = 0;
  teamobjectid_ = 0;
  fobjectnameid_ = 0;
  sobjectnameid_ = 0;
  duplicateid_ = GOOGLE_LONGLONG(0);
  activityid_ = GOOGLE_LONGLONG(0);
  lowlv_ = 0;
  uplv_ = 0;
  isautomatch_ = 0;
  speakchannel_ = 0;
  teamnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

teamteam::~teamteam() {
  SharedDtor();
}

void teamteam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void teamteam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* teamteam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return teamteam_descriptor_;
}

const teamteam& teamteam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

teamteam* teamteam::default_instance_ = NULL;

teamteam* teamteam::New() const {
  return new teamteam;
}

void teamteam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamobjectid_ = 0;
    fobjectnameid_ = 0;
    sobjectnameid_ = 0;
    duplicateid_ = GOOGLE_LONGLONG(0);
    activityid_ = GOOGLE_LONGLONG(0);
    lowlv_ = 0;
    uplv_ = 0;
    isautomatch_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    speakchannel_ = 0;
    teamnumber_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool teamteam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 TeamObjectID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamobjectid_)));
          set_has_teamobjectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FObjectNameID;
        break;
      }

      // optional int32 FObjectNameID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FObjectNameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fobjectnameid_)));
          set_has_fobjectnameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SObjectNameID;
        break;
      }

      // optional int32 SObjectNameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SObjectNameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sobjectnameid_)));
          set_has_sobjectnameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duplicateId;
        break;
      }

      // optional int64 duplicateId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duplicateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &duplicateid_)));
          set_has_duplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_activityId;
        break;
      }

      // optional int64 activityId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LowLV;
        break;
      }

      // optional int32 LowLV = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LowLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowlv_)));
          set_has_lowlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_UpLV;
        break;
      }

      // optional int32 UpLV = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uplv_)));
          set_has_uplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isAutoMatch;
        break;
      }

      // optional int32 isAutoMatch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoMatch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isautomatch_)));
          set_has_isautomatch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_speakChannel;
        break;
      }

      // optional int32 speakChannel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speakChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speakchannel_)));
          set_has_speakchannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamnumber;
        break;
      }

      // optional int32 teamnumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamnumber_)));
          set_has_teamnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void teamteam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 TeamObjectID = 1;
  if (has_teamobjectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamobjectid(), output);
  }

  // optional int32 FObjectNameID = 2;
  if (has_fobjectnameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fobjectnameid(), output);
  }

  // optional int32 SObjectNameID = 3;
  if (has_sobjectnameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sobjectnameid(), output);
  }

  // optional int64 duplicateId = 4;
  if (has_duplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->duplicateid(), output);
  }

  // optional int64 activityId = 5;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->activityid(), output);
  }

  // optional int32 LowLV = 6;
  if (has_lowlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lowlv(), output);
  }

  // optional int32 UpLV = 7;
  if (has_uplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->uplv(), output);
  }

  // optional int32 isAutoMatch = 8;
  if (has_isautomatch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isautomatch(), output);
  }

  // optional int32 speakChannel = 9;
  if (has_speakchannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->speakchannel(), output);
  }

  // optional int32 teamnumber = 10;
  if (has_teamnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->teamnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* teamteam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 TeamObjectID = 1;
  if (has_teamobjectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamobjectid(), target);
  }

  // optional int32 FObjectNameID = 2;
  if (has_fobjectnameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fobjectnameid(), target);
  }

  // optional int32 SObjectNameID = 3;
  if (has_sobjectnameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sobjectnameid(), target);
  }

  // optional int64 duplicateId = 4;
  if (has_duplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->duplicateid(), target);
  }

  // optional int64 activityId = 5;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->activityid(), target);
  }

  // optional int32 LowLV = 6;
  if (has_lowlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lowlv(), target);
  }

  // optional int32 UpLV = 7;
  if (has_uplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->uplv(), target);
  }

  // optional int32 isAutoMatch = 8;
  if (has_isautomatch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isautomatch(), target);
  }

  // optional int32 speakChannel = 9;
  if (has_speakchannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->speakchannel(), target);
  }

  // optional int32 teamnumber = 10;
  if (has_teamnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->teamnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int teamteam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 TeamObjectID = 1;
    if (has_teamobjectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamobjectid());
    }

    // optional int32 FObjectNameID = 2;
    if (has_fobjectnameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fobjectnameid());
    }

    // optional int32 SObjectNameID = 3;
    if (has_sobjectnameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sobjectnameid());
    }

    // optional int64 duplicateId = 4;
    if (has_duplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->duplicateid());
    }

    // optional int64 activityId = 5;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activityid());
    }

    // optional int32 LowLV = 6;
    if (has_lowlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowlv());
    }

    // optional int32 UpLV = 7;
    if (has_uplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uplv());
    }

    // optional int32 isAutoMatch = 8;
    if (has_isautomatch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isautomatch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 speakChannel = 9;
    if (has_speakchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speakchannel());
    }

    // optional int32 teamnumber = 10;
    if (has_teamnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamnumber());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void teamteam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const teamteam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const teamteam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void teamteam::MergeFrom(const teamteam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamobjectid()) {
      set_teamobjectid(from.teamobjectid());
    }
    if (from.has_fobjectnameid()) {
      set_fobjectnameid(from.fobjectnameid());
    }
    if (from.has_sobjectnameid()) {
      set_sobjectnameid(from.sobjectnameid());
    }
    if (from.has_duplicateid()) {
      set_duplicateid(from.duplicateid());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_lowlv()) {
      set_lowlv(from.lowlv());
    }
    if (from.has_uplv()) {
      set_uplv(from.uplv());
    }
    if (from.has_isautomatch()) {
      set_isautomatch(from.isautomatch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speakchannel()) {
      set_speakchannel(from.speakchannel());
    }
    if (from.has_teamnumber()) {
      set_teamnumber(from.teamnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void teamteam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void teamteam::CopyFrom(const teamteam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool teamteam::IsInitialized() const {

  return true;
}

void teamteam::Swap(teamteam* other) {
  if (other != this) {
    std::swap(teamobjectid_, other->teamobjectid_);
    std::swap(fobjectnameid_, other->fobjectnameid_);
    std::swap(sobjectnameid_, other->sobjectnameid_);
    std::swap(duplicateid_, other->duplicateid_);
    std::swap(activityid_, other->activityid_);
    std::swap(lowlv_, other->lowlv_);
    std::swap(uplv_, other->uplv_);
    std::swap(isautomatch_, other->isautomatch_);
    std::swap(speakchannel_, other->speakchannel_);
    std::swap(teamnumber_, other->teamnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata teamteam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = teamteam_descriptor_;
  metadata.reflection = teamteam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_teamteam::kTeamteamListFieldNumber;
#endif  // !_MSC_VER

Sheet_teamteam::Sheet_teamteam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_teamteam::InitAsDefaultInstance() {
}

Sheet_teamteam::Sheet_teamteam(const Sheet_teamteam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_teamteam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_teamteam::~Sheet_teamteam() {
  SharedDtor();
}

void Sheet_teamteam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_teamteam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_teamteam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_teamteam_descriptor_;
}

const Sheet_teamteam& Sheet_teamteam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_team_2eproto();
  return *default_instance_;
}

Sheet_teamteam* Sheet_teamteam::default_instance_ = NULL;

Sheet_teamteam* Sheet_teamteam::New() const {
  return new Sheet_teamteam;
}

void Sheet_teamteam::Clear() {
  teamteam_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_teamteam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.teamteam teamteam_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamteam_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamteam_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teamteam_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_teamteam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.teamteam teamteam_List = 1;
  for (int i = 0; i < this->teamteam_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamteam_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_teamteam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.teamteam teamteam_List = 1;
  for (int i = 0; i < this->teamteam_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamteam_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_teamteam::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.teamteam teamteam_List = 1;
  total_size += 1 * this->teamteam_list_size();
  for (int i = 0; i < this->teamteam_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamteam_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_teamteam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_teamteam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_teamteam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_teamteam::MergeFrom(const Sheet_teamteam& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamteam_list_.MergeFrom(from.teamteam_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_teamteam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_teamteam::CopyFrom(const Sheet_teamteam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_teamteam::IsInitialized() const {

  return true;
}

void Sheet_teamteam::Swap(Sheet_teamteam* other) {
  if (other != this) {
    teamteam_list_.Swap(&other->teamteam_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_teamteam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_teamteam_descriptor_;
  metadata.reflection = Sheet_teamteam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
