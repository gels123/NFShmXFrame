// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Move.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Move.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* MoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveBroadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveBroadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveTeleportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveTeleportRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MoveTeleportRsp_Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Move_2eproto() {
  protobuf_AddDesc_Move_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Move.proto");
  GOOGLE_CHECK(file != NULL);
  MoveReq_descriptor_ = file->message_type(0);
  static const int MoveReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, move_type_),
  };
  MoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveReq_descriptor_,
      MoveReq::default_instance_,
      MoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveReq));
  MoveBroadRsp_descriptor_ = file->message_type(1);
  static const int MoveBroadRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, dir_),
  };
  MoveBroadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveBroadRsp_descriptor_,
      MoveBroadRsp::default_instance_,
      MoveBroadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveBroadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveBroadRsp));
  MoveTeleportRsp_descriptor_ = file->message_type(2);
  static const int MoveTeleportRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTeleportRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTeleportRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTeleportRsp, pos_),
  };
  MoveTeleportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveTeleportRsp_descriptor_,
      MoveTeleportRsp::default_instance_,
      MoveTeleportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTeleportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveTeleportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveTeleportRsp));
  MoveTeleportRsp_Type_descriptor_ = MoveTeleportRsp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Move_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveReq_descriptor_, &MoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveBroadRsp_descriptor_, &MoveBroadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveTeleportRsp_descriptor_, &MoveTeleportRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Move_2eproto() {
  delete MoveReq::default_instance_;
  delete MoveReq_reflection_;
  delete MoveBroadRsp::default_instance_;
  delete MoveBroadRsp_reflection_;
  delete MoveTeleportRsp::default_instance_;
  delete MoveTeleportRsp_reflection_;
}

void protobuf_AddDesc_Move_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMove.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\032\022common_logic.proto\032\tCom.proto\"\204\001\n"
    "\007MoveReq\022 \n\003pos\030\001 \002(\0132\023.proto_ff.Vector3"
    "PB\022\"\n\005speed\030\002 \002(\0132\023.proto_ff.Vector2PB\022 "
    "\n\003dir\030\003 \002(\0132\023.proto_ff.Vector2PB\022\021\n\tmove"
    "_type\030\004 \001(\005\"\203\001\n\014MoveBroadRsp\022\013\n\003cid\030\001 \002("
    "\004\022 \n\003pos\030\002 \002(\0132\023.proto_ff.Vector3PB\022\"\n\005s"
    "peed\030\003 \002(\0132\023.proto_ff.Vector2PB\022 \n\003dir\030\004"
    " \002(\0132\023.proto_ff.Vector2PB\"\202\001\n\017MoveTelepo"
    "rtRsp\022\014\n\004type\030\001 \002(\005\022\013\n\003cid\030\002 \002(\004\022 \n\003pos\030"
    "\003 \002(\0132\023.proto_ff.Vector3PB\"2\n\004Type\022\n\n\006co"
    "mmon\020\001\022\t\n\005skill\020\002\022\007\n\003dup\020\003\022\n\n\006relive\020\004", 478);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Move.proto", &protobuf_RegisterTypes);
  MoveReq::default_instance_ = new MoveReq();
  MoveBroadRsp::default_instance_ = new MoveBroadRsp();
  MoveTeleportRsp::default_instance_ = new MoveTeleportRsp();
  MoveReq::default_instance_->InitAsDefaultInstance();
  MoveBroadRsp::default_instance_->InitAsDefaultInstance();
  MoveTeleportRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Move_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Move_2eproto {
  StaticDescriptorInitializer_Move_2eproto() {
    protobuf_AddDesc_Move_2eproto();
  }
} static_descriptor_initializer_Move_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MoveReq::kPosFieldNumber;
const int MoveReq::kSpeedFieldNumber;
const int MoveReq::kDirFieldNumber;
const int MoveReq::kMoveTypeFieldNumber;
#endif  // !_MSC_VER

MoveReq::MoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveReq::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  speed_ = const_cast< ::proto_ff::Vector2PB*>(&::proto_ff::Vector2PB::default_instance());
  dir_ = const_cast< ::proto_ff::Vector2PB*>(&::proto_ff::Vector2PB::default_instance());
}

MoveReq::MoveReq(const MoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveReq::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  speed_ = NULL;
  dir_ = NULL;
  move_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveReq::~MoveReq() {
  SharedDtor();
}

void MoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete speed_;
    delete dir_;
  }
}

void MoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveReq_descriptor_;
}

const MoveReq& MoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Move_2eproto();
  return *default_instance_;
}

MoveReq* MoveReq::default_instance_ = NULL;

MoveReq* MoveReq::New() const {
  return new MoveReq;
}

void MoveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_speed()) {
      if (speed_ != NULL) speed_->::proto_ff::Vector2PB::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
    }
    move_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.Vector3PB pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_speed;
        break;
      }

      // required .proto_ff.Vector2PB speed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_dir;
        break;
      }

      // required .proto_ff.Vector2PB dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_move_type;
        break;
      }

      // optional int32 move_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_move_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &move_type_)));
          set_has_move_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.Vector3PB pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }

  // required .proto_ff.Vector2PB speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->speed(), output);
  }

  // required .proto_ff.Vector2PB dir = 3;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dir(), output);
  }

  // optional int32 move_type = 4;
  if (has_move_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->move_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.Vector3PB pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }

  // required .proto_ff.Vector2PB speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->speed(), target);
  }

  // required .proto_ff.Vector2PB dir = 3;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dir(), target);
  }

  // optional int32 move_type = 4;
  if (has_move_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->move_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.Vector3PB pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .proto_ff.Vector2PB speed = 2;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }

    // required .proto_ff.Vector2PB dir = 3;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

    // optional int32 move_type = 4;
    if (has_move_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->move_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveReq::MergeFrom(const MoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_speed()) {
      mutable_speed()->::proto_ff::Vector2PB::MergeFrom(from.speed());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector2PB::MergeFrom(from.dir());
    }
    if (from.has_move_type()) {
      set_move_type(from.move_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveReq::CopyFrom(const MoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed().IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  return true;
}

void MoveReq::Swap(MoveReq* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(speed_, other->speed_);
    std::swap(dir_, other->dir_);
    std::swap(move_type_, other->move_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveReq_descriptor_;
  metadata.reflection = MoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveBroadRsp::kCidFieldNumber;
const int MoveBroadRsp::kPosFieldNumber;
const int MoveBroadRsp::kSpeedFieldNumber;
const int MoveBroadRsp::kDirFieldNumber;
#endif  // !_MSC_VER

MoveBroadRsp::MoveBroadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveBroadRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  speed_ = const_cast< ::proto_ff::Vector2PB*>(&::proto_ff::Vector2PB::default_instance());
  dir_ = const_cast< ::proto_ff::Vector2PB*>(&::proto_ff::Vector2PB::default_instance());
}

MoveBroadRsp::MoveBroadRsp(const MoveBroadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveBroadRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  speed_ = NULL;
  dir_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveBroadRsp::~MoveBroadRsp() {
  SharedDtor();
}

void MoveBroadRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete speed_;
    delete dir_;
  }
}

void MoveBroadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveBroadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveBroadRsp_descriptor_;
}

const MoveBroadRsp& MoveBroadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Move_2eproto();
  return *default_instance_;
}

MoveBroadRsp* MoveBroadRsp::default_instance_ = NULL;

MoveBroadRsp* MoveBroadRsp::New() const {
  return new MoveBroadRsp;
}

void MoveBroadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    if (has_speed()) {
      if (speed_ != NULL) speed_->::proto_ff::Vector2PB::Clear();
    }
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveBroadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_speed;
        break;
      }

      // required .proto_ff.Vector2PB speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dir;
        break;
      }

      // required .proto_ff.Vector2PB dir = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveBroadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // required .proto_ff.Vector2PB speed = 3;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speed(), output);
  }

  // required .proto_ff.Vector2PB dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveBroadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // required .proto_ff.Vector2PB speed = 3;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->speed(), target);
  }

  // required .proto_ff.Vector2PB dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveBroadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required .proto_ff.Vector3PB pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required .proto_ff.Vector2PB speed = 3;
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speed());
    }

    // required .proto_ff.Vector2PB dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveBroadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveBroadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveBroadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveBroadRsp::MergeFrom(const MoveBroadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_speed()) {
      mutable_speed()->::proto_ff::Vector2PB::MergeFrom(from.speed());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector2PB::MergeFrom(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveBroadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveBroadRsp::CopyFrom(const MoveBroadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveBroadRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed().IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  return true;
}

void MoveBroadRsp::Swap(MoveBroadRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(pos_, other->pos_);
    std::swap(speed_, other->speed_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveBroadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveBroadRsp_descriptor_;
  metadata.reflection = MoveBroadRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MoveTeleportRsp_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveTeleportRsp_Type_descriptor_;
}
bool MoveTeleportRsp_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MoveTeleportRsp_Type MoveTeleportRsp::common;
const MoveTeleportRsp_Type MoveTeleportRsp::skill;
const MoveTeleportRsp_Type MoveTeleportRsp::dup;
const MoveTeleportRsp_Type MoveTeleportRsp::relive;
const MoveTeleportRsp_Type MoveTeleportRsp::Type_MIN;
const MoveTeleportRsp_Type MoveTeleportRsp::Type_MAX;
const int MoveTeleportRsp::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MoveTeleportRsp::kTypeFieldNumber;
const int MoveTeleportRsp::kCidFieldNumber;
const int MoveTeleportRsp::kPosFieldNumber;
#endif  // !_MSC_VER

MoveTeleportRsp::MoveTeleportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoveTeleportRsp::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

MoveTeleportRsp::MoveTeleportRsp(const MoveTeleportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoveTeleportRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveTeleportRsp::~MoveTeleportRsp() {
  SharedDtor();
}

void MoveTeleportRsp::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void MoveTeleportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveTeleportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveTeleportRsp_descriptor_;
}

const MoveTeleportRsp& MoveTeleportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Move_2eproto();
  return *default_instance_;
}

MoveTeleportRsp* MoveTeleportRsp::default_instance_ = NULL;

MoveTeleportRsp* MoveTeleportRsp::New() const {
  return new MoveTeleportRsp;
}

void MoveTeleportRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveTeleportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoveTeleportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoveTeleportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoveTeleportRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required .proto_ff.Vector3PB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveTeleportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveTeleportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveTeleportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveTeleportRsp::MergeFrom(const MoveTeleportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveTeleportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveTeleportRsp::CopyFrom(const MoveTeleportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveTeleportRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void MoveTeleportRsp::Swap(MoveTeleportRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cid_, other->cid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveTeleportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveTeleportRsp_descriptor_;
  metadata.reflection = MoveTeleportRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
