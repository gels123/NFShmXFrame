// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "facade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* facadedisplaymaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadedisplaymaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadedisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadedisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadedisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadedisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadevaluetreasureAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadevaluetreasureAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadevalueArtifactAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadevalueArtifactAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadevalueBladeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadevalueBladeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadevaluewingAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadevaluewingAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadevalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadevalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadevalue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadevalue_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadetype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadetype_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadetype_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadetype_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadefragmentattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadefragmentattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadefragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadefragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadefragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadefragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadechangeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadechangeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadechangeActiveAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadechangeActiveAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadestarUpupAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadestarUpupAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadestarUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadestarUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoulattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoulattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadesoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadesoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoulActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoulActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadesoulActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadesoulActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoulLvattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoulLvattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoulLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoulLv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadesoulLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadesoulLv_reflection_ = NULL;
const ::google::protobuf::Descriptor* facadesoulAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  facadesoulAchievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_facadesoulAchievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_facadesoulAchievement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_facade_2eproto() {
  protobuf_AddDesc_facade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "facade.proto");
  GOOGLE_CHECK(file != NULL);
  facadedisplaymaterialDesc_descriptor_ = file->message_type(0);
  static const int facadedisplaymaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplaymaterialDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplaymaterialDesc, exp_),
  };
  facadedisplaymaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadedisplaymaterialDesc_descriptor_,
      facadedisplaymaterialDesc::default_instance_,
      facadedisplaymaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplaymaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplaymaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadedisplaymaterialDesc));
  facadedisplay_descriptor_ = file->message_type(1);
  static const int facadedisplay_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, soulitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, fragmentid_),
  };
  facadedisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadedisplay_descriptor_,
      facadedisplay::default_instance_,
      facadedisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadedisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadedisplay));
  Sheet_facadedisplay_descriptor_ = file->message_type(2);
  static const int Sheet_facadedisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadedisplay, facadedisplay_list_),
  };
  Sheet_facadedisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadedisplay_descriptor_,
      Sheet_facadedisplay::default_instance_,
      Sheet_facadedisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadedisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadedisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadedisplay));
  facadevaluetreasureAttributeDesc_descriptor_ = file->message_type(3);
  static const int facadevaluetreasureAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluetreasureAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluetreasureAttributeDesc, value_),
  };
  facadevaluetreasureAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadevaluetreasureAttributeDesc_descriptor_,
      facadevaluetreasureAttributeDesc::default_instance_,
      facadevaluetreasureAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluetreasureAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluetreasureAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadevaluetreasureAttributeDesc));
  facadevalueArtifactAttributeDesc_descriptor_ = file->message_type(4);
  static const int facadevalueArtifactAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueArtifactAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueArtifactAttributeDesc, value_),
  };
  facadevalueArtifactAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadevalueArtifactAttributeDesc_descriptor_,
      facadevalueArtifactAttributeDesc::default_instance_,
      facadevalueArtifactAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueArtifactAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueArtifactAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadevalueArtifactAttributeDesc));
  facadevalueBladeAttributeDesc_descriptor_ = file->message_type(5);
  static const int facadevalueBladeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueBladeAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueBladeAttributeDesc, value_),
  };
  facadevalueBladeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadevalueBladeAttributeDesc_descriptor_,
      facadevalueBladeAttributeDesc::default_instance_,
      facadevalueBladeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueBladeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalueBladeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadevalueBladeAttributeDesc));
  facadevaluewingAttributeDesc_descriptor_ = file->message_type(6);
  static const int facadevaluewingAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluewingAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluewingAttributeDesc, value_),
  };
  facadevaluewingAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadevaluewingAttributeDesc_descriptor_,
      facadevaluewingAttributeDesc::default_instance_,
      facadevaluewingAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluewingAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevaluewingAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadevaluewingAttributeDesc));
  facadevalue_descriptor_ = file->message_type(7);
  static const int facadevalue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, wingexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, treasureexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, artifactexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, bladeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, treasureattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, artifactattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, bladeattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, wingattribute_),
  };
  facadevalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadevalue_descriptor_,
      facadevalue::default_instance_,
      facadevalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadevalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadevalue));
  Sheet_facadevalue_descriptor_ = file->message_type(8);
  static const int Sheet_facadevalue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadevalue, facadevalue_list_),
  };
  Sheet_facadevalue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadevalue_descriptor_,
      Sheet_facadevalue::default_instance_,
      Sheet_facadevalue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadevalue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadevalue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadevalue));
  facadetype_descriptor_ = file->message_type(9);
  static const int facadetype_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadetype, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadetype, soucename_),
  };
  facadetype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadetype_descriptor_,
      facadetype::default_instance_,
      facadetype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadetype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadetype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadetype));
  Sheet_facadetype_descriptor_ = file->message_type(10);
  static const int Sheet_facadetype_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadetype, facadetype_list_),
  };
  Sheet_facadetype_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadetype_descriptor_,
      Sheet_facadetype::default_instance_,
      Sheet_facadetype_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadetype, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadetype, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadetype));
  facadefragmentattributeDesc_descriptor_ = file->message_type(11);
  static const int facadefragmentattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragmentattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragmentattributeDesc, value_),
  };
  facadefragmentattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadefragmentattributeDesc_descriptor_,
      facadefragmentattributeDesc::default_instance_,
      facadefragmentattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragmentattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragmentattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadefragmentattributeDesc));
  facadefragment_descriptor_ = file->message_type(12);
  static const int facadefragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, attribute_),
  };
  facadefragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadefragment_descriptor_,
      facadefragment::default_instance_,
      facadefragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadefragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadefragment));
  Sheet_facadefragment_descriptor_ = file->message_type(13);
  static const int Sheet_facadefragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadefragment, facadefragment_list_),
  };
  Sheet_facadefragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadefragment_descriptor_,
      Sheet_facadefragment::default_instance_,
      Sheet_facadefragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadefragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadefragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadefragment));
  facadechangeattributeDesc_descriptor_ = file->message_type(14);
  static const int facadechangeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeattributeDesc, value_),
  };
  facadechangeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadechangeattributeDesc_descriptor_,
      facadechangeattributeDesc::default_instance_,
      facadechangeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadechangeattributeDesc));
  facadechangeActiveAttributeDesc_descriptor_ = file->message_type(15);
  static const int facadechangeActiveAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeActiveAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeActiveAttributeDesc, value_),
  };
  facadechangeActiveAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadechangeActiveAttributeDesc_descriptor_,
      facadechangeActiveAttributeDesc::default_instance_,
      facadechangeActiveAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeActiveAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechangeActiveAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadechangeActiveAttributeDesc));
  facadechange_descriptor_ = file->message_type(16);
  static const int facadechange_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, activeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, activeattribute_),
  };
  facadechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadechange_descriptor_,
      facadechange::default_instance_,
      facadechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadechange));
  Sheet_facadechange_descriptor_ = file->message_type(17);
  static const int Sheet_facadechange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadechange, facadechange_list_),
  };
  Sheet_facadechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadechange_descriptor_,
      Sheet_facadechange::default_instance_,
      Sheet_facadechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadechange));
  facadestarUpupAttributeDesc_descriptor_ = file->message_type(18);
  static const int facadestarUpupAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUpupAttributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUpupAttributeDesc, value_),
  };
  facadestarUpupAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadestarUpupAttributeDesc_descriptor_,
      facadestarUpupAttributeDesc::default_instance_,
      facadestarUpupAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUpupAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUpupAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadestarUpupAttributeDesc));
  facadestarUp_descriptor_ = file->message_type(19);
  static const int facadestarUp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, upattribute_),
  };
  facadestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadestarUp_descriptor_,
      facadestarUp::default_instance_,
      facadestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadestarUp));
  Sheet_facadestarUp_descriptor_ = file->message_type(20);
  static const int Sheet_facadestarUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadestarUp, facadestarup_list_),
  };
  Sheet_facadestarUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadestarUp_descriptor_,
      Sheet_facadestarUp::default_instance_,
      Sheet_facadestarUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadestarUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadestarUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadestarUp));
  facadesoulattributeDesc_descriptor_ = file->message_type(21);
  static const int facadesoulattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulattributeDesc, value_),
  };
  facadesoulattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoulattributeDesc_descriptor_,
      facadesoulattributeDesc::default_instance_,
      facadesoulattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoulattributeDesc));
  facadesoul_descriptor_ = file->message_type(22);
  static const int facadesoul_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, mainskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, minorskill_),
  };
  facadesoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoul_descriptor_,
      facadesoul::default_instance_,
      facadesoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoul));
  Sheet_facadesoul_descriptor_ = file->message_type(23);
  static const int Sheet_facadesoul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoul, facadesoul_list_),
  };
  Sheet_facadesoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadesoul_descriptor_,
      Sheet_facadesoul::default_instance_,
      Sheet_facadesoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadesoul));
  facadesoulActive_descriptor_ = file->message_type(24);
  static const int facadesoulActive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulActive, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulActive, parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulActive, condition_),
  };
  facadesoulActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoulActive_descriptor_,
      facadesoulActive::default_instance_,
      facadesoulActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoulActive));
  Sheet_facadesoulActive_descriptor_ = file->message_type(25);
  static const int Sheet_facadesoulActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulActive, facadesoulactive_list_),
  };
  Sheet_facadesoulActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadesoulActive_descriptor_,
      Sheet_facadesoulActive::default_instance_,
      Sheet_facadesoulActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadesoulActive));
  facadesoulLvattributeDesc_descriptor_ = file->message_type(26);
  static const int facadesoulLvattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLvattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLvattributeDesc, value_),
  };
  facadesoulLvattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoulLvattributeDesc_descriptor_,
      facadesoulLvattributeDesc::default_instance_,
      facadesoulLvattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLvattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLvattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoulLvattributeDesc));
  facadesoulLv_descriptor_ = file->message_type(27);
  static const int facadesoulLv_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, successrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, downlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, attribute_),
  };
  facadesoulLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoulLv_descriptor_,
      facadesoulLv::default_instance_,
      facadesoulLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoulLv));
  Sheet_facadesoulLv_descriptor_ = file->message_type(28);
  static const int Sheet_facadesoulLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulLv, facadesoullv_list_),
  };
  Sheet_facadesoulLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadesoulLv_descriptor_,
      Sheet_facadesoulLv::default_instance_,
      Sheet_facadesoulLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadesoulLv));
  facadesoulAchievement_descriptor_ = file->message_type(29);
  static const int facadesoulAchievement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, num_),
  };
  facadesoulAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      facadesoulAchievement_descriptor_,
      facadesoulAchievement::default_instance_,
      facadesoulAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(facadesoulAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(facadesoulAchievement));
  Sheet_facadesoulAchievement_descriptor_ = file->message_type(30);
  static const int Sheet_facadesoulAchievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulAchievement, facadesoulachievement_list_),
  };
  Sheet_facadesoulAchievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_facadesoulAchievement_descriptor_,
      Sheet_facadesoulAchievement::default_instance_,
      Sheet_facadesoulAchievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulAchievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_facadesoulAchievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_facadesoulAchievement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_facade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadedisplaymaterialDesc_descriptor_, &facadedisplaymaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadedisplay_descriptor_, &facadedisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadedisplay_descriptor_, &Sheet_facadedisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadevaluetreasureAttributeDesc_descriptor_, &facadevaluetreasureAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadevalueArtifactAttributeDesc_descriptor_, &facadevalueArtifactAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadevalueBladeAttributeDesc_descriptor_, &facadevalueBladeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadevaluewingAttributeDesc_descriptor_, &facadevaluewingAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadevalue_descriptor_, &facadevalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadevalue_descriptor_, &Sheet_facadevalue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadetype_descriptor_, &facadetype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadetype_descriptor_, &Sheet_facadetype::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadefragmentattributeDesc_descriptor_, &facadefragmentattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadefragment_descriptor_, &facadefragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadefragment_descriptor_, &Sheet_facadefragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadechangeattributeDesc_descriptor_, &facadechangeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadechangeActiveAttributeDesc_descriptor_, &facadechangeActiveAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadechange_descriptor_, &facadechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadechange_descriptor_, &Sheet_facadechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadestarUpupAttributeDesc_descriptor_, &facadestarUpupAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadestarUp_descriptor_, &facadestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadestarUp_descriptor_, &Sheet_facadestarUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoulattributeDesc_descriptor_, &facadesoulattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoul_descriptor_, &facadesoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadesoul_descriptor_, &Sheet_facadesoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoulActive_descriptor_, &facadesoulActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadesoulActive_descriptor_, &Sheet_facadesoulActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoulLvattributeDesc_descriptor_, &facadesoulLvattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoulLv_descriptor_, &facadesoulLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadesoulLv_descriptor_, &Sheet_facadesoulLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    facadesoulAchievement_descriptor_, &facadesoulAchievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_facadesoulAchievement_descriptor_, &Sheet_facadesoulAchievement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_facade_2eproto() {
  delete facadedisplaymaterialDesc::default_instance_;
  delete facadedisplaymaterialDesc_reflection_;
  delete facadedisplay::default_instance_;
  delete facadedisplay_reflection_;
  delete Sheet_facadedisplay::default_instance_;
  delete Sheet_facadedisplay_reflection_;
  delete facadevaluetreasureAttributeDesc::default_instance_;
  delete facadevaluetreasureAttributeDesc_reflection_;
  delete facadevalueArtifactAttributeDesc::default_instance_;
  delete facadevalueArtifactAttributeDesc_reflection_;
  delete facadevalueBladeAttributeDesc::default_instance_;
  delete facadevalueBladeAttributeDesc_reflection_;
  delete facadevaluewingAttributeDesc::default_instance_;
  delete facadevaluewingAttributeDesc_reflection_;
  delete facadevalue::default_instance_;
  delete facadevalue_reflection_;
  delete Sheet_facadevalue::default_instance_;
  delete Sheet_facadevalue_reflection_;
  delete facadetype::default_instance_;
  delete facadetype_reflection_;
  delete Sheet_facadetype::default_instance_;
  delete Sheet_facadetype_reflection_;
  delete facadefragmentattributeDesc::default_instance_;
  delete facadefragmentattributeDesc_reflection_;
  delete facadefragment::default_instance_;
  delete facadefragment_reflection_;
  delete Sheet_facadefragment::default_instance_;
  delete Sheet_facadefragment_reflection_;
  delete facadechangeattributeDesc::default_instance_;
  delete facadechangeattributeDesc_reflection_;
  delete facadechangeActiveAttributeDesc::default_instance_;
  delete facadechangeActiveAttributeDesc_reflection_;
  delete facadechange::default_instance_;
  delete facadechange_reflection_;
  delete Sheet_facadechange::default_instance_;
  delete Sheet_facadechange_reflection_;
  delete facadestarUpupAttributeDesc::default_instance_;
  delete facadestarUpupAttributeDesc_reflection_;
  delete facadestarUp::default_instance_;
  delete facadestarUp_reflection_;
  delete Sheet_facadestarUp::default_instance_;
  delete Sheet_facadestarUp_reflection_;
  delete facadesoulattributeDesc::default_instance_;
  delete facadesoulattributeDesc_reflection_;
  delete facadesoul::default_instance_;
  delete facadesoul_reflection_;
  delete Sheet_facadesoul::default_instance_;
  delete Sheet_facadesoul_reflection_;
  delete facadesoulActive::default_instance_;
  delete facadesoulActive_reflection_;
  delete Sheet_facadesoulActive::default_instance_;
  delete Sheet_facadesoulActive_reflection_;
  delete facadesoulLvattributeDesc::default_instance_;
  delete facadesoulLvattributeDesc_reflection_;
  delete facadesoulLv::default_instance_;
  delete facadesoulLv_reflection_;
  delete Sheet_facadesoulLv::default_instance_;
  delete Sheet_facadesoulLv_reflection_;
  delete facadesoulAchievement::default_instance_;
  delete facadesoulAchievement_reflection_;
  delete Sheet_facadesoulAchievement::default_instance_;
  delete Sheet_facadesoulAchievement_reflection_;
}

void protobuf_AddDesc_facade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014facade.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"K\n\031facadedisplaymaterialDesc\022\022\n\002"
    "id\030\001 \001(\003B\006\302\377\024\002ID\022\032\n\003exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252"
    "\214\345\200\274\"\245\003\n\rfacadedisplay\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010"
    "\345\244\226\350\247\202ID\022\030\n\004type\030\002 \001(\005B\n\302\377\024\006\345\244\247\347\261\273\022&\n\010re"
    "source\030\003 \001(\tB\024\302\377\024\014\350\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022\034\n\004na"
    "me\030\004 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<\022(\n\nactiveDesc\030\005"
    " \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301\024d\022&\n\014profession"
    "ID\030\006 \001(\tB\020\302\377\024\010\350\201\214\344\270\232ID\220\301\024<\022\'\n\007skillID\030\007 "
    "\001(\tB\026\302\377\024\016\350\247\243\351\224\201\346\212\200\350\203\275ID\220\301\024P\022&\n\nsoulItemI"
    "D\030\010 \001(\005B\022\302\377\024\016\345\231\250\351\255\202\351\201\223\345\205\267ID\022K\n\010material\030"
    "\t \003(\0132#.proto_ff.facadedisplaymaterialDe"
    "scB\024\302\377\024\014\350\277\233\351\230\266\346\235\220\346\226\231\210\301\024\003\022*\n\nfragmentID\030\n"
    " \003(\003B\026\302\377\024\016\345\205\263\350\201\224\347\242\216\347\211\207ID\210\301\024\003\"P\n\023Sheet_fa"
    "cadedisplay\0229\n\022facadedisplay_List\030\001 \003(\0132"
    "\027.proto_ff.facadedisplayB\004\210\301\024\024\"P\n facade"
    "valuetreasureAttributeDesc\022\024\n\004type\030\001 \001(\005"
    "B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"P\n faca"
    "devalueArtifactAttributeDesc\022\024\n\004type\030\001 \001"
    "(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"M\n\035fa"
    "cadevalueBladeAttributeDesc\022\024\n\004type\030\001 \001("
    "\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"L\n\034fac"
    "adevaluewingAttributeDesc\022\024\n\004type\030\001 \001(\005B"
    "\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\320\004\n\013faca"
    "devalue\022\026\n\002lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\'\n\007wingE"
    "xp\030\002 \001(\003B\026\302\377\024\022\347\277\205\350\206\200\345\215\207\347\272\247\347\273\217\351\252\214\022+\n\013trea"
    "sureExp\030\003 \001(\003B\026\302\377\024\022\345\256\235\347\211\251\345\215\207\347\272\247\347\273\217\351\252\214\022+\n"
    "\013ArtifactExp\030\004 \001(\003B\026\302\377\024\022\347\245\236\345\231\250\345\215\207\347\272\247\347\273\217\351"
    "\252\214\022(\n\010BladeExp\030\005 \001(\003B\026\302\377\024\022\345\211\221\347\201\265\345\215\207\347\272\247\347\273"
    "\217\351\252\214\022a\n\021treasureAttribute\030\006 \003(\0132*.proto_"
    "ff.facadevaluetreasureAttributeDescB\032\302\377\024"
    "\022\345\256\235\345\205\267\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\022a\n\021ArtifactAttri"
    "bute\030\007 \003(\0132*.proto_ff.facadevalueArtifac"
    "tAttributeDescB\032\302\377\024\022\347\245\236\345\231\250\345\237\272\347\241\200\345\261\236\346\200\247\210\301"
    "\024\006\022[\n\016BladeAttribute\030\010 \003(\0132\'.proto_ff.fa"
    "cadevalueBladeAttributeDescB\032\302\377\024\022\347\245\236\345\231\250\345"
    "\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\022Y\n\rwingAttribute\030\t \003(\0132&"
    ".proto_ff.facadevaluewingAttributeDescB\032"
    "\302\377\024\022\347\277\205\350\206\200\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"K\n\021Sheet_faca"
    "devalue\0226\n\020facadevalue_List\030\001 \003(\0132\025.prot"
    "o_ff.facadevalueB\005\210\301\024\364\003\"O\n\nfacadetype\022\030\n"
    "\002id\030\001 \001(\005B\014\302\377\024\010\347\261\273\345\236\213id\022\'\n\tsouceName\030\002 \001"
    "(\tB\024\302\377\024\014\350\265\204\346\272\220\345\220\215\347\247\260\220\301\024<\"G\n\020Sheet_facade"
    "type\0223\n\017facadetype_List\030\001 \003(\0132\024.proto_ff"
    ".facadetypeB\004\210\301\024\024\"K\n\033facadefragmentattri"
    "buteDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005value\030"
    "\002 \001(\005B\007\302\377\024\003\345\200\274\"\307\001\n\016facadefragment\022 \n\nfra"
    "gmentID\030\001 \001(\003B\014\302\377\024\010\347\242\216\347\211\207ID\022\032\n\004item\030\002 \001("
    "\003B\014\302\377\024\010\347\211\251\345\223\201ID\022\'\n\007itemNum\030\003 \001(\005B\026\302\377\024\022\347\242"
    "\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231\220\022N\n\tattribute\030\004 \003(\0132%.pr"
    "oto_ff.facadefragmentattributeDescB\024\302\377\024\014"
    "\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\003\"S\n\024Sheet_facadefragment"
    "\022;\n\023facadefragment_List\030\001 \003(\0132\030.proto_ff"
    ".facadefragmentB\004\210\301\024\024\"I\n\031facadechangeatt"
    "ributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005valu"
    "e\030\002 \001(\005B\007\302\377\024\003\345\200\274\"S\n\037facadechangeActiveAt"
    "tributeDesc\022\030\n\004type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\026\n"
    "\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\210\006\n\014facadechange\022\030"
    "\n\002id\030\001 \001(\003B\014\302\377\024\010\345\244\226\350\247\202ID\022\030\n\004type\030\002 \001(\005B\n"
    "\302\377\024\006\345\244\247\347\261\273\022&\n\010resource\030\003 \001(\tB\024\302\377\024\014\350\265\204\346\272\220"
    "\345\275\242\350\261\241\220\301\024<\022&\n\014professionID\030\004 \001(\tB\020\302\377\024\010\350\201"
    "\214\344\270\232ID\220\301\024<\022\034\n\004name\030\005 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<"
    "\022)\n\nactiveDesc\030\006 \001(\tB\025\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301"
    "\024\240\001\022\033\n\007quality\030\007 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022*\n\016acti"
    "vationItem\030\010 \001(\003B\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022-\n\r"
    "activationNum\030\t \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260"
    "\351\207\217\022\"\n\006starId\030\n \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022"
    ",\n\007starNum\030\013 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217"
    "\220\301\024\254\002\022&\n\006starUp\030\014 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344"
    "\270\212\351\231\220\022<\n\007starBer\030\r \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237"
    "\345\261\236\346\200\247\345\242\236\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022,\n\rupAttribu"
    "teId\030\016 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022+\n\013act"
    "iveSkill\030\017 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\350\216\267\345\276\227\346\212\200\350\203\275\022L"
    "\n\tattribute\030\020 \003(\0132#.proto_ff.facadechang"
    "eattributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\022R\n\017"
    "ActiveAttribute\030\021 \003(\0132).proto_ff.facadec"
    "hangeActiveAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\006"
    "\"M\n\022Sheet_facadechange\0227\n\021facadechange_L"
    "ist\030\001 \003(\0132\026.proto_ff.facadechangeB\004\210\301\024<\""
    "K\n\033facadestarUpupAttributeDesc\022\024\n\004type\030\001"
    " \001(\005B\006\302\377\024\002ID\022\026\n\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\343\001\n"
    "\014facadestarUp\022\030\n\002ID\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022"
    ",\n\rupAttributeId\030\002 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247"
    "\347\273\204ID\022\032\n\006starID\030\003 \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\035\n\007ski"
    "llID\030\004 \001(\005B\014\302\377\024\010\346\212\200\350\203\275id\022P\n\013upAttribute\030"
    "\005 \003(\0132%.proto_ff.facadestarUpupAttribute"
    "DescB\024\302\377\024\014\346\277\200\346\264\273\345\261\236\346\200\247\210\301\024\003\"M\n\022Sheet_faca"
    "destarUp\0227\n\021facadestarUp_List\030\001 \003(\0132\026.pr"
    "oto_ff.facadestarUpB\004\210\301\024(\"G\n\027facadesoula"
    "ttributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n\005va"
    "lue\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\356\001\n\nfacadesoul\022\030\n\002id\030"
    "\001 \001(\003B\014\302\377\024\010\345\231\250\351\255\202ID\022\'\n\nrechargeID\030\002 \001(\005B"
    "\023\302\377\024\017\344\273\267\346\240\274\350\256\241\350\264\271\347\202\271\022\"\n\tmainSkill\030\003 \001(\005B"
    "\017\302\377\024\013\344\270\273\346\212\200\350\203\275ID\022P\n\tattribute\030\004 \003(\0132!.pr"
    "oto_ff.facadesoulattributeDescB\032\302\377\024\022\346\277\200\346"
    "\264\273\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\022\'\n\nminorSkill\030\005 \003(\005B\023"
    "\302\377\024\013\345\211\257\346\212\200\350\203\275ID\210\301\024\010\"G\n\020Sheet_facadesoul\022"
    "3\n\017facadesoul_List\030\001 \003(\0132\024.proto_ff.faca"
    "desoulB\004\210\301\024\024\"y\n\020facadesoulActive\022\030\n\002id\030\001"
    " \001(\003B\014\302\377\024\010\346\212\200\350\203\275ID\022\"\n\006parama\030\002 \003(\tB\022\302\377\024\006"
    "\345\217\202\346\225\260\210\301\024\002\220\301\024<\022\'\n\tcondition\030\003 \003(\005B\024\302\377\024\014\350"
    "\247\243\351\224\201\346\235\241\344\273\266\210\301\024\002\"Y\n\026Sheet_facadesoulActiv"
    "e\022\?\n\025facadesoulActive_List\030\001 \003(\0132\032.proto"
    "_ff.facadesoulActiveB\004\210\301\024(\"I\n\031facadesoul"
    "LvattributeDesc\022\024\n\004type\030\001 \001(\005B\006\302\377\024\002ID\022\026\n"
    "\005value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\237\002\n\014facadesoulLv\022\026"
    "\n\002id\030\001 \001(\003B\n\302\377\024\006\347\255\211\347\272\247\022\034\n\006soulID\030\002 \001(\005B\014"
    "\302\377\024\010\345\231\250\351\255\202ID\022 \n\006itemID\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227"
    "\351\201\223\345\205\267\022\035\n\003num\030\004 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022(\n"
    "\013successRate\030\005 \001(\005B\023\302\377\024\017\345\215\207\347\272\247\346\210\220\345\212\237\347\216\207\022"
    " \n\006downLv\030\006 \001(\005B\020\302\377\024\014\346\230\257\345\220\246\346\216\211\347\272\247\022L\n\tatt"
    "ribute\030\007 \003(\0132#.proto_ff.facadesoulLvattr"
    "ibuteDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\007\"N\n\022Sheet"
    "_facadesoulLv\0228\n\021facadesoulLv_List\030\001 \003(\013"
    "2\026.proto_ff.facadesoulLvB\005\210\301\024\214\001\"\311\001\n\025faca"
    "desoulAchievement\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346\210\220\345\260"
    "\261id\022\034\n\006soulID\030\002 \001(\005B\014\302\377\024\010\345\231\250\351\255\202ID\022\030\n\004typ"
    "e\030\003 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\035\n\006parama\030\004 \001(\005B\r\302\377\024"
    "\t\345\275\261\345\223\215\345\200\274\022 \n\006itemID\030\005 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\351\201"
    "\223\345\205\267\022\035\n\003num\030\006 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\346\225\260\351\207\217\"i\n\033S"
    "heet_facadesoulAchievement\022J\n\032facadesoul"
    "Achievement_List\030\001 \003(\0132\037.proto_ff.facade"
    "soulAchievementB\005\210\301\024\240\001", 4902);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "facade.proto", &protobuf_RegisterTypes);
  facadedisplaymaterialDesc::default_instance_ = new facadedisplaymaterialDesc();
  facadedisplay::default_instance_ = new facadedisplay();
  Sheet_facadedisplay::default_instance_ = new Sheet_facadedisplay();
  facadevaluetreasureAttributeDesc::default_instance_ = new facadevaluetreasureAttributeDesc();
  facadevalueArtifactAttributeDesc::default_instance_ = new facadevalueArtifactAttributeDesc();
  facadevalueBladeAttributeDesc::default_instance_ = new facadevalueBladeAttributeDesc();
  facadevaluewingAttributeDesc::default_instance_ = new facadevaluewingAttributeDesc();
  facadevalue::default_instance_ = new facadevalue();
  Sheet_facadevalue::default_instance_ = new Sheet_facadevalue();
  facadetype::default_instance_ = new facadetype();
  Sheet_facadetype::default_instance_ = new Sheet_facadetype();
  facadefragmentattributeDesc::default_instance_ = new facadefragmentattributeDesc();
  facadefragment::default_instance_ = new facadefragment();
  Sheet_facadefragment::default_instance_ = new Sheet_facadefragment();
  facadechangeattributeDesc::default_instance_ = new facadechangeattributeDesc();
  facadechangeActiveAttributeDesc::default_instance_ = new facadechangeActiveAttributeDesc();
  facadechange::default_instance_ = new facadechange();
  Sheet_facadechange::default_instance_ = new Sheet_facadechange();
  facadestarUpupAttributeDesc::default_instance_ = new facadestarUpupAttributeDesc();
  facadestarUp::default_instance_ = new facadestarUp();
  Sheet_facadestarUp::default_instance_ = new Sheet_facadestarUp();
  facadesoulattributeDesc::default_instance_ = new facadesoulattributeDesc();
  facadesoul::default_instance_ = new facadesoul();
  Sheet_facadesoul::default_instance_ = new Sheet_facadesoul();
  facadesoulActive::default_instance_ = new facadesoulActive();
  Sheet_facadesoulActive::default_instance_ = new Sheet_facadesoulActive();
  facadesoulLvattributeDesc::default_instance_ = new facadesoulLvattributeDesc();
  facadesoulLv::default_instance_ = new facadesoulLv();
  Sheet_facadesoulLv::default_instance_ = new Sheet_facadesoulLv();
  facadesoulAchievement::default_instance_ = new facadesoulAchievement();
  Sheet_facadesoulAchievement::default_instance_ = new Sheet_facadesoulAchievement();
  facadedisplaymaterialDesc::default_instance_->InitAsDefaultInstance();
  facadedisplay::default_instance_->InitAsDefaultInstance();
  Sheet_facadedisplay::default_instance_->InitAsDefaultInstance();
  facadevaluetreasureAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadevalueArtifactAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadevalueBladeAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadevaluewingAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadevalue::default_instance_->InitAsDefaultInstance();
  Sheet_facadevalue::default_instance_->InitAsDefaultInstance();
  facadetype::default_instance_->InitAsDefaultInstance();
  Sheet_facadetype::default_instance_->InitAsDefaultInstance();
  facadefragmentattributeDesc::default_instance_->InitAsDefaultInstance();
  facadefragment::default_instance_->InitAsDefaultInstance();
  Sheet_facadefragment::default_instance_->InitAsDefaultInstance();
  facadechangeattributeDesc::default_instance_->InitAsDefaultInstance();
  facadechangeActiveAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadechange::default_instance_->InitAsDefaultInstance();
  Sheet_facadechange::default_instance_->InitAsDefaultInstance();
  facadestarUpupAttributeDesc::default_instance_->InitAsDefaultInstance();
  facadestarUp::default_instance_->InitAsDefaultInstance();
  Sheet_facadestarUp::default_instance_->InitAsDefaultInstance();
  facadesoulattributeDesc::default_instance_->InitAsDefaultInstance();
  facadesoul::default_instance_->InitAsDefaultInstance();
  Sheet_facadesoul::default_instance_->InitAsDefaultInstance();
  facadesoulActive::default_instance_->InitAsDefaultInstance();
  Sheet_facadesoulActive::default_instance_->InitAsDefaultInstance();
  facadesoulLvattributeDesc::default_instance_->InitAsDefaultInstance();
  facadesoulLv::default_instance_->InitAsDefaultInstance();
  Sheet_facadesoulLv::default_instance_->InitAsDefaultInstance();
  facadesoulAchievement::default_instance_->InitAsDefaultInstance();
  Sheet_facadesoulAchievement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_facade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_facade_2eproto {
  StaticDescriptorInitializer_facade_2eproto() {
    protobuf_AddDesc_facade_2eproto();
  }
} static_descriptor_initializer_facade_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int facadedisplaymaterialDesc::kIdFieldNumber;
const int facadedisplaymaterialDesc::kExpFieldNumber;
#endif  // !_MSC_VER

facadedisplaymaterialDesc::facadedisplaymaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadedisplaymaterialDesc::InitAsDefaultInstance() {
}

facadedisplaymaterialDesc::facadedisplaymaterialDesc(const facadedisplaymaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadedisplaymaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadedisplaymaterialDesc::~facadedisplaymaterialDesc() {
  SharedDtor();
}

void facadedisplaymaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadedisplaymaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadedisplaymaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadedisplaymaterialDesc_descriptor_;
}

const facadedisplaymaterialDesc& facadedisplaymaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadedisplaymaterialDesc* facadedisplaymaterialDesc::default_instance_ = NULL;

facadedisplaymaterialDesc* facadedisplaymaterialDesc::New() const {
  return new facadedisplaymaterialDesc;
}

void facadedisplaymaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadedisplaymaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadedisplaymaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadedisplaymaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadedisplaymaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadedisplaymaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadedisplaymaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadedisplaymaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadedisplaymaterialDesc::MergeFrom(const facadedisplaymaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadedisplaymaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadedisplaymaterialDesc::CopyFrom(const facadedisplaymaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadedisplaymaterialDesc::IsInitialized() const {

  return true;
}

void facadedisplaymaterialDesc::Swap(facadedisplaymaterialDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadedisplaymaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadedisplaymaterialDesc_descriptor_;
  metadata.reflection = facadedisplaymaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadedisplay::kIdFieldNumber;
const int facadedisplay::kTypeFieldNumber;
const int facadedisplay::kResourceFieldNumber;
const int facadedisplay::kNameFieldNumber;
const int facadedisplay::kActiveDescFieldNumber;
const int facadedisplay::kProfessionIDFieldNumber;
const int facadedisplay::kSkillIDFieldNumber;
const int facadedisplay::kSoulItemIDFieldNumber;
const int facadedisplay::kMaterialFieldNumber;
const int facadedisplay::kFragmentIDFieldNumber;
#endif  // !_MSC_VER

facadedisplay::facadedisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadedisplay::InitAsDefaultInstance() {
}

facadedisplay::facadedisplay(const facadedisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadedisplay::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soulitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadedisplay::~facadedisplay() {
  SharedDtor();
}

void facadedisplay::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (professionid_ != &::google::protobuf::internal::kEmptyString) {
    delete professionid_;
  }
  if (skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete skillid_;
  }
  if (this != default_instance_) {
  }
}

void facadedisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadedisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadedisplay_descriptor_;
}

const facadedisplay& facadedisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadedisplay* facadedisplay::default_instance_ = NULL;

facadedisplay* facadedisplay::New() const {
  return new facadedisplay;
}

void facadedisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    if (has_professionid()) {
      if (professionid_ != &::google::protobuf::internal::kEmptyString) {
        professionid_->clear();
      }
    }
    if (has_skillid()) {
      if (skillid_ != &::google::protobuf::internal::kEmptyString) {
        skillid_->clear();
      }
    }
    soulitemid_ = 0;
  }
  material_.Clear();
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadedisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_professionID;
        break;
      }

      // optional string professionID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionid().data(), this->professionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skillID;
        break;
      }

      // optional string skillID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skillid().data(), this->skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_soulItemID;
        break;
      }

      // optional int32 soulItemID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulitemid_)));
          set_has_soulitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_material;
        break;
      }

      // repeated .proto_ff.facadedisplaymaterialDesc material = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_material;
        if (input->ExpectTag(80)) goto parse_fragmentID;
        break;
      }

      // repeated int64 fragmentID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fragmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fragmentID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadedisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string activeDesc = 5;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->activedesc(), output);
  }

  // optional string professionID = 6;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionid().data(), this->professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->professionid(), output);
  }

  // optional string skillID = 7;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillid().data(), this->skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->skillid(), output);
  }

  // optional int32 soulItemID = 8;
  if (has_soulitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->soulitemid(), output);
  }

  // repeated .proto_ff.facadedisplaymaterialDesc material = 9;
  for (int i = 0; i < this->material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->material(i), output);
  }

  // repeated int64 fragmentID = 10;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadedisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string activeDesc = 5;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->activedesc(), target);
  }

  // optional string professionID = 6;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionid().data(), this->professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->professionid(), target);
  }

  // optional string skillID = 7;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skillid().data(), this->skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->skillid(), target);
  }

  // optional int32 soulItemID = 8;
  if (has_soulitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->soulitemid(), target);
  }

  // repeated .proto_ff.facadedisplaymaterialDesc material = 9;
  for (int i = 0; i < this->material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->material(i), target);
  }

  // repeated int64 fragmentID = 10;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadedisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 5;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional string professionID = 6;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionid());
    }

    // optional string skillID = 7;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillid());
    }

    // optional int32 soulItemID = 8;
    if (has_soulitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulitemid());
    }

  }
  // repeated .proto_ff.facadedisplaymaterialDesc material = 9;
  total_size += 1 * this->material_size();
  for (int i = 0; i < this->material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->material(i));
  }

  // repeated int64 fragmentID = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadedisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadedisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadedisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadedisplay::MergeFrom(const facadedisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  material_.MergeFrom(from.material_);
  fragmentid_.MergeFrom(from.fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_soulitemid()) {
      set_soulitemid(from.soulitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadedisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadedisplay::CopyFrom(const facadedisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadedisplay::IsInitialized() const {

  return true;
}

void facadedisplay::Swap(facadedisplay* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(resource_, other->resource_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(professionid_, other->professionid_);
    std::swap(skillid_, other->skillid_);
    std::swap(soulitemid_, other->soulitemid_);
    material_.Swap(&other->material_);
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadedisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadedisplay_descriptor_;
  metadata.reflection = facadedisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadedisplay::kFacadedisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadedisplay::Sheet_facadedisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadedisplay::InitAsDefaultInstance() {
}

Sheet_facadedisplay::Sheet_facadedisplay(const Sheet_facadedisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadedisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadedisplay::~Sheet_facadedisplay() {
  SharedDtor();
}

void Sheet_facadedisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadedisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadedisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadedisplay_descriptor_;
}

const Sheet_facadedisplay& Sheet_facadedisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadedisplay* Sheet_facadedisplay::default_instance_ = NULL;

Sheet_facadedisplay* Sheet_facadedisplay::New() const {
  return new Sheet_facadedisplay;
}

void Sheet_facadedisplay::Clear() {
  facadedisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadedisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadedisplay facadedisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadedisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadedisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadedisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadedisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadedisplay facadedisplay_List = 1;
  for (int i = 0; i < this->facadedisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadedisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadedisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadedisplay facadedisplay_List = 1;
  for (int i = 0; i < this->facadedisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadedisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadedisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadedisplay facadedisplay_List = 1;
  total_size += 1 * this->facadedisplay_list_size();
  for (int i = 0; i < this->facadedisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadedisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadedisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadedisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadedisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadedisplay::MergeFrom(const Sheet_facadedisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadedisplay_list_.MergeFrom(from.facadedisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadedisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadedisplay::CopyFrom(const Sheet_facadedisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadedisplay::IsInitialized() const {

  return true;
}

void Sheet_facadedisplay::Swap(Sheet_facadedisplay* other) {
  if (other != this) {
    facadedisplay_list_.Swap(&other->facadedisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadedisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadedisplay_descriptor_;
  metadata.reflection = Sheet_facadedisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadevaluetreasureAttributeDesc::kTypeFieldNumber;
const int facadevaluetreasureAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadevaluetreasureAttributeDesc::facadevaluetreasureAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadevaluetreasureAttributeDesc::InitAsDefaultInstance() {
}

facadevaluetreasureAttributeDesc::facadevaluetreasureAttributeDesc(const facadevaluetreasureAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadevaluetreasureAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadevaluetreasureAttributeDesc::~facadevaluetreasureAttributeDesc() {
  SharedDtor();
}

void facadevaluetreasureAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadevaluetreasureAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadevaluetreasureAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadevaluetreasureAttributeDesc_descriptor_;
}

const facadevaluetreasureAttributeDesc& facadevaluetreasureAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadevaluetreasureAttributeDesc* facadevaluetreasureAttributeDesc::default_instance_ = NULL;

facadevaluetreasureAttributeDesc* facadevaluetreasureAttributeDesc::New() const {
  return new facadevaluetreasureAttributeDesc;
}

void facadevaluetreasureAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadevaluetreasureAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadevaluetreasureAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadevaluetreasureAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadevaluetreasureAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadevaluetreasureAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadevaluetreasureAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadevaluetreasureAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadevaluetreasureAttributeDesc::MergeFrom(const facadevaluetreasureAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadevaluetreasureAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadevaluetreasureAttributeDesc::CopyFrom(const facadevaluetreasureAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadevaluetreasureAttributeDesc::IsInitialized() const {

  return true;
}

void facadevaluetreasureAttributeDesc::Swap(facadevaluetreasureAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadevaluetreasureAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadevaluetreasureAttributeDesc_descriptor_;
  metadata.reflection = facadevaluetreasureAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadevalueArtifactAttributeDesc::kTypeFieldNumber;
const int facadevalueArtifactAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadevalueArtifactAttributeDesc::facadevalueArtifactAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadevalueArtifactAttributeDesc::InitAsDefaultInstance() {
}

facadevalueArtifactAttributeDesc::facadevalueArtifactAttributeDesc(const facadevalueArtifactAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadevalueArtifactAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadevalueArtifactAttributeDesc::~facadevalueArtifactAttributeDesc() {
  SharedDtor();
}

void facadevalueArtifactAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadevalueArtifactAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadevalueArtifactAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadevalueArtifactAttributeDesc_descriptor_;
}

const facadevalueArtifactAttributeDesc& facadevalueArtifactAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadevalueArtifactAttributeDesc* facadevalueArtifactAttributeDesc::default_instance_ = NULL;

facadevalueArtifactAttributeDesc* facadevalueArtifactAttributeDesc::New() const {
  return new facadevalueArtifactAttributeDesc;
}

void facadevalueArtifactAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadevalueArtifactAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadevalueArtifactAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadevalueArtifactAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadevalueArtifactAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadevalueArtifactAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadevalueArtifactAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadevalueArtifactAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadevalueArtifactAttributeDesc::MergeFrom(const facadevalueArtifactAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadevalueArtifactAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadevalueArtifactAttributeDesc::CopyFrom(const facadevalueArtifactAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadevalueArtifactAttributeDesc::IsInitialized() const {

  return true;
}

void facadevalueArtifactAttributeDesc::Swap(facadevalueArtifactAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadevalueArtifactAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadevalueArtifactAttributeDesc_descriptor_;
  metadata.reflection = facadevalueArtifactAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadevalueBladeAttributeDesc::kTypeFieldNumber;
const int facadevalueBladeAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadevalueBladeAttributeDesc::facadevalueBladeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadevalueBladeAttributeDesc::InitAsDefaultInstance() {
}

facadevalueBladeAttributeDesc::facadevalueBladeAttributeDesc(const facadevalueBladeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadevalueBladeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadevalueBladeAttributeDesc::~facadevalueBladeAttributeDesc() {
  SharedDtor();
}

void facadevalueBladeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadevalueBladeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadevalueBladeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadevalueBladeAttributeDesc_descriptor_;
}

const facadevalueBladeAttributeDesc& facadevalueBladeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadevalueBladeAttributeDesc* facadevalueBladeAttributeDesc::default_instance_ = NULL;

facadevalueBladeAttributeDesc* facadevalueBladeAttributeDesc::New() const {
  return new facadevalueBladeAttributeDesc;
}

void facadevalueBladeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadevalueBladeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadevalueBladeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadevalueBladeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadevalueBladeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadevalueBladeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadevalueBladeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadevalueBladeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadevalueBladeAttributeDesc::MergeFrom(const facadevalueBladeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadevalueBladeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadevalueBladeAttributeDesc::CopyFrom(const facadevalueBladeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadevalueBladeAttributeDesc::IsInitialized() const {

  return true;
}

void facadevalueBladeAttributeDesc::Swap(facadevalueBladeAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadevalueBladeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadevalueBladeAttributeDesc_descriptor_;
  metadata.reflection = facadevalueBladeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadevaluewingAttributeDesc::kTypeFieldNumber;
const int facadevaluewingAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadevaluewingAttributeDesc::facadevaluewingAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadevaluewingAttributeDesc::InitAsDefaultInstance() {
}

facadevaluewingAttributeDesc::facadevaluewingAttributeDesc(const facadevaluewingAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadevaluewingAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadevaluewingAttributeDesc::~facadevaluewingAttributeDesc() {
  SharedDtor();
}

void facadevaluewingAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadevaluewingAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadevaluewingAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadevaluewingAttributeDesc_descriptor_;
}

const facadevaluewingAttributeDesc& facadevaluewingAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadevaluewingAttributeDesc* facadevaluewingAttributeDesc::default_instance_ = NULL;

facadevaluewingAttributeDesc* facadevaluewingAttributeDesc::New() const {
  return new facadevaluewingAttributeDesc;
}

void facadevaluewingAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadevaluewingAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadevaluewingAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadevaluewingAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadevaluewingAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadevaluewingAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadevaluewingAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadevaluewingAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadevaluewingAttributeDesc::MergeFrom(const facadevaluewingAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadevaluewingAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadevaluewingAttributeDesc::CopyFrom(const facadevaluewingAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadevaluewingAttributeDesc::IsInitialized() const {

  return true;
}

void facadevaluewingAttributeDesc::Swap(facadevaluewingAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadevaluewingAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadevaluewingAttributeDesc_descriptor_;
  metadata.reflection = facadevaluewingAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadevalue::kLvFieldNumber;
const int facadevalue::kWingExpFieldNumber;
const int facadevalue::kTreasureExpFieldNumber;
const int facadevalue::kArtifactExpFieldNumber;
const int facadevalue::kBladeExpFieldNumber;
const int facadevalue::kTreasureAttributeFieldNumber;
const int facadevalue::kArtifactAttributeFieldNumber;
const int facadevalue::kBladeAttributeFieldNumber;
const int facadevalue::kWingAttributeFieldNumber;
#endif  // !_MSC_VER

facadevalue::facadevalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadevalue::InitAsDefaultInstance() {
}

facadevalue::facadevalue(const facadevalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadevalue::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  wingexp_ = GOOGLE_LONGLONG(0);
  treasureexp_ = GOOGLE_LONGLONG(0);
  artifactexp_ = GOOGLE_LONGLONG(0);
  bladeexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadevalue::~facadevalue() {
  SharedDtor();
}

void facadevalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadevalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadevalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadevalue_descriptor_;
}

const facadevalue& facadevalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadevalue* facadevalue::default_instance_ = NULL;

facadevalue* facadevalue::New() const {
  return new facadevalue;
}

void facadevalue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
    wingexp_ = GOOGLE_LONGLONG(0);
    treasureexp_ = GOOGLE_LONGLONG(0);
    artifactexp_ = GOOGLE_LONGLONG(0);
    bladeexp_ = GOOGLE_LONGLONG(0);
  }
  treasureattribute_.Clear();
  artifactattribute_.Clear();
  bladeattribute_.Clear();
  wingattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadevalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wingExp;
        break;
      }

      // optional int64 wingExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wingexp_)));
          set_has_wingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasureExp;
        break;
      }

      // optional int64 treasureExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasureExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &treasureexp_)));
          set_has_treasureexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ArtifactExp;
        break;
      }

      // optional int64 ArtifactExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArtifactExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &artifactexp_)));
          set_has_artifactexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BladeExp;
        break;
      }

      // optional int64 BladeExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BladeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bladeexp_)));
          set_has_bladeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_treasureAttribute;
        break;
      }

      // repeated .proto_ff.facadevaluetreasureAttributeDesc treasureAttribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasureAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasureattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_treasureAttribute;
        if (input->ExpectTag(58)) goto parse_ArtifactAttribute;
        break;
      }

      // repeated .proto_ff.facadevalueArtifactAttributeDesc ArtifactAttribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ArtifactAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artifactattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ArtifactAttribute;
        if (input->ExpectTag(66)) goto parse_BladeAttribute;
        break;
      }

      // repeated .proto_ff.facadevalueBladeAttributeDesc BladeAttribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BladeAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bladeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_BladeAttribute;
        if (input->ExpectTag(74)) goto parse_wingAttribute;
        break;
      }

      // repeated .proto_ff.facadevaluewingAttributeDesc wingAttribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wingattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wingAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadevalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // optional int64 wingExp = 2;
  if (has_wingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->wingexp(), output);
  }

  // optional int64 treasureExp = 3;
  if (has_treasureexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->treasureexp(), output);
  }

  // optional int64 ArtifactExp = 4;
  if (has_artifactexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->artifactexp(), output);
  }

  // optional int64 BladeExp = 5;
  if (has_bladeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bladeexp(), output);
  }

  // repeated .proto_ff.facadevaluetreasureAttributeDesc treasureAttribute = 6;
  for (int i = 0; i < this->treasureattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->treasureattribute(i), output);
  }

  // repeated .proto_ff.facadevalueArtifactAttributeDesc ArtifactAttribute = 7;
  for (int i = 0; i < this->artifactattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->artifactattribute(i), output);
  }

  // repeated .proto_ff.facadevalueBladeAttributeDesc BladeAttribute = 8;
  for (int i = 0; i < this->bladeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bladeattribute(i), output);
  }

  // repeated .proto_ff.facadevaluewingAttributeDesc wingAttribute = 9;
  for (int i = 0; i < this->wingattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->wingattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadevalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // optional int64 wingExp = 2;
  if (has_wingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->wingexp(), target);
  }

  // optional int64 treasureExp = 3;
  if (has_treasureexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->treasureexp(), target);
  }

  // optional int64 ArtifactExp = 4;
  if (has_artifactexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->artifactexp(), target);
  }

  // optional int64 BladeExp = 5;
  if (has_bladeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bladeexp(), target);
  }

  // repeated .proto_ff.facadevaluetreasureAttributeDesc treasureAttribute = 6;
  for (int i = 0; i < this->treasureattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->treasureattribute(i), target);
  }

  // repeated .proto_ff.facadevalueArtifactAttributeDesc ArtifactAttribute = 7;
  for (int i = 0; i < this->artifactattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->artifactattribute(i), target);
  }

  // repeated .proto_ff.facadevalueBladeAttributeDesc BladeAttribute = 8;
  for (int i = 0; i < this->bladeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bladeattribute(i), target);
  }

  // repeated .proto_ff.facadevaluewingAttributeDesc wingAttribute = 9;
  for (int i = 0; i < this->wingattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->wingattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadevalue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 wingExp = 2;
    if (has_wingexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wingexp());
    }

    // optional int64 treasureExp = 3;
    if (has_treasureexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->treasureexp());
    }

    // optional int64 ArtifactExp = 4;
    if (has_artifactexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->artifactexp());
    }

    // optional int64 BladeExp = 5;
    if (has_bladeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bladeexp());
    }

  }
  // repeated .proto_ff.facadevaluetreasureAttributeDesc treasureAttribute = 6;
  total_size += 1 * this->treasureattribute_size();
  for (int i = 0; i < this->treasureattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasureattribute(i));
  }

  // repeated .proto_ff.facadevalueArtifactAttributeDesc ArtifactAttribute = 7;
  total_size += 1 * this->artifactattribute_size();
  for (int i = 0; i < this->artifactattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artifactattribute(i));
  }

  // repeated .proto_ff.facadevalueBladeAttributeDesc BladeAttribute = 8;
  total_size += 1 * this->bladeattribute_size();
  for (int i = 0; i < this->bladeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bladeattribute(i));
  }

  // repeated .proto_ff.facadevaluewingAttributeDesc wingAttribute = 9;
  total_size += 1 * this->wingattribute_size();
  for (int i = 0; i < this->wingattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wingattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadevalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadevalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadevalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadevalue::MergeFrom(const facadevalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasureattribute_.MergeFrom(from.treasureattribute_);
  artifactattribute_.MergeFrom(from.artifactattribute_);
  bladeattribute_.MergeFrom(from.bladeattribute_);
  wingattribute_.MergeFrom(from.wingattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_wingexp()) {
      set_wingexp(from.wingexp());
    }
    if (from.has_treasureexp()) {
      set_treasureexp(from.treasureexp());
    }
    if (from.has_artifactexp()) {
      set_artifactexp(from.artifactexp());
    }
    if (from.has_bladeexp()) {
      set_bladeexp(from.bladeexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadevalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadevalue::CopyFrom(const facadevalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadevalue::IsInitialized() const {

  return true;
}

void facadevalue::Swap(facadevalue* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(wingexp_, other->wingexp_);
    std::swap(treasureexp_, other->treasureexp_);
    std::swap(artifactexp_, other->artifactexp_);
    std::swap(bladeexp_, other->bladeexp_);
    treasureattribute_.Swap(&other->treasureattribute_);
    artifactattribute_.Swap(&other->artifactattribute_);
    bladeattribute_.Swap(&other->bladeattribute_);
    wingattribute_.Swap(&other->wingattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadevalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadevalue_descriptor_;
  metadata.reflection = facadevalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadevalue::kFacadevalueListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadevalue::Sheet_facadevalue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadevalue::InitAsDefaultInstance() {
}

Sheet_facadevalue::Sheet_facadevalue(const Sheet_facadevalue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadevalue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadevalue::~Sheet_facadevalue() {
  SharedDtor();
}

void Sheet_facadevalue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadevalue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadevalue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadevalue_descriptor_;
}

const Sheet_facadevalue& Sheet_facadevalue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadevalue* Sheet_facadevalue::default_instance_ = NULL;

Sheet_facadevalue* Sheet_facadevalue::New() const {
  return new Sheet_facadevalue;
}

void Sheet_facadevalue::Clear() {
  facadevalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadevalue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadevalue facadevalue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadevalue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadevalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadevalue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadevalue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadevalue facadevalue_List = 1;
  for (int i = 0; i < this->facadevalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadevalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadevalue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadevalue facadevalue_List = 1;
  for (int i = 0; i < this->facadevalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadevalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadevalue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadevalue facadevalue_List = 1;
  total_size += 1 * this->facadevalue_list_size();
  for (int i = 0; i < this->facadevalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadevalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadevalue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadevalue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadevalue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadevalue::MergeFrom(const Sheet_facadevalue& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadevalue_list_.MergeFrom(from.facadevalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadevalue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadevalue::CopyFrom(const Sheet_facadevalue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadevalue::IsInitialized() const {

  return true;
}

void Sheet_facadevalue::Swap(Sheet_facadevalue* other) {
  if (other != this) {
    facadevalue_list_.Swap(&other->facadevalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadevalue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadevalue_descriptor_;
  metadata.reflection = Sheet_facadevalue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadetype::kIdFieldNumber;
const int facadetype::kSouceNameFieldNumber;
#endif  // !_MSC_VER

facadetype::facadetype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadetype::InitAsDefaultInstance() {
}

facadetype::facadetype(const facadetype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadetype::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  soucename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadetype::~facadetype() {
  SharedDtor();
}

void facadetype::SharedDtor() {
  if (soucename_ != &::google::protobuf::internal::kEmptyString) {
    delete soucename_;
  }
  if (this != default_instance_) {
  }
}

void facadetype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadetype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadetype_descriptor_;
}

const facadetype& facadetype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadetype* facadetype::default_instance_ = NULL;

facadetype* facadetype::New() const {
  return new facadetype;
}

void facadetype::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_soucename()) {
      if (soucename_ != &::google::protobuf::internal::kEmptyString) {
        soucename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadetype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_souceName;
        break;
      }

      // optional string souceName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_souceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soucename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soucename().data(), this->soucename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadetype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string souceName = 2;
  if (has_soucename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soucename().data(), this->soucename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->soucename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadetype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string souceName = 2;
  if (has_soucename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soucename().data(), this->soucename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->soucename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadetype::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string souceName = 2;
    if (has_soucename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soucename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadetype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadetype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadetype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadetype::MergeFrom(const facadetype& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_soucename()) {
      set_soucename(from.soucename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadetype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadetype::CopyFrom(const facadetype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadetype::IsInitialized() const {

  return true;
}

void facadetype::Swap(facadetype* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(soucename_, other->soucename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadetype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadetype_descriptor_;
  metadata.reflection = facadetype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadetype::kFacadetypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadetype::Sheet_facadetype()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadetype::InitAsDefaultInstance() {
}

Sheet_facadetype::Sheet_facadetype(const Sheet_facadetype& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadetype::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadetype::~Sheet_facadetype() {
  SharedDtor();
}

void Sheet_facadetype::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadetype::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadetype::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadetype_descriptor_;
}

const Sheet_facadetype& Sheet_facadetype::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadetype* Sheet_facadetype::default_instance_ = NULL;

Sheet_facadetype* Sheet_facadetype::New() const {
  return new Sheet_facadetype;
}

void Sheet_facadetype::Clear() {
  facadetype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadetype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadetype facadetype_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadetype_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadetype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadetype_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadetype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadetype facadetype_List = 1;
  for (int i = 0; i < this->facadetype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadetype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadetype::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadetype facadetype_List = 1;
  for (int i = 0; i < this->facadetype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadetype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadetype::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadetype facadetype_List = 1;
  total_size += 1 * this->facadetype_list_size();
  for (int i = 0; i < this->facadetype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadetype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadetype::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadetype* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadetype*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadetype::MergeFrom(const Sheet_facadetype& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadetype_list_.MergeFrom(from.facadetype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadetype::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadetype::CopyFrom(const Sheet_facadetype& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadetype::IsInitialized() const {

  return true;
}

void Sheet_facadetype::Swap(Sheet_facadetype* other) {
  if (other != this) {
    facadetype_list_.Swap(&other->facadetype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadetype::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadetype_descriptor_;
  metadata.reflection = Sheet_facadetype_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadefragmentattributeDesc::kTypeFieldNumber;
const int facadefragmentattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadefragmentattributeDesc::facadefragmentattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadefragmentattributeDesc::InitAsDefaultInstance() {
}

facadefragmentattributeDesc::facadefragmentattributeDesc(const facadefragmentattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadefragmentattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadefragmentattributeDesc::~facadefragmentattributeDesc() {
  SharedDtor();
}

void facadefragmentattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadefragmentattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadefragmentattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadefragmentattributeDesc_descriptor_;
}

const facadefragmentattributeDesc& facadefragmentattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadefragmentattributeDesc* facadefragmentattributeDesc::default_instance_ = NULL;

facadefragmentattributeDesc* facadefragmentattributeDesc::New() const {
  return new facadefragmentattributeDesc;
}

void facadefragmentattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadefragmentattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadefragmentattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadefragmentattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadefragmentattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadefragmentattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadefragmentattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadefragmentattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadefragmentattributeDesc::MergeFrom(const facadefragmentattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadefragmentattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadefragmentattributeDesc::CopyFrom(const facadefragmentattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadefragmentattributeDesc::IsInitialized() const {

  return true;
}

void facadefragmentattributeDesc::Swap(facadefragmentattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadefragmentattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadefragmentattributeDesc_descriptor_;
  metadata.reflection = facadefragmentattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadefragment::kFragmentIDFieldNumber;
const int facadefragment::kItemFieldNumber;
const int facadefragment::kItemNumFieldNumber;
const int facadefragment::kAttributeFieldNumber;
#endif  // !_MSC_VER

facadefragment::facadefragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadefragment::InitAsDefaultInstance() {
}

facadefragment::facadefragment(const facadefragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadefragment::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = GOOGLE_LONGLONG(0);
  item_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadefragment::~facadefragment() {
  SharedDtor();
}

void facadefragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadefragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadefragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadefragment_descriptor_;
}

const facadefragment& facadefragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadefragment* facadefragment::default_instance_ = NULL;

facadefragment* facadefragment::New() const {
  return new facadefragment;
}

void facadefragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragmentid_ = GOOGLE_LONGLONG(0);
    item_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadefragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fragmentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional int64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.facadefragmentattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadefragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fragmentid(), output);
  }

  // optional int64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->item(), output);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  // repeated .proto_ff.facadefragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadefragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fragmentID = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fragmentid(), target);
  }

  // optional int64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->item(), target);
  }

  // optional int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  // repeated .proto_ff.facadefragmentattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadefragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fragmentID = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragmentid());
    }

    // optional int64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  // repeated .proto_ff.facadefragmentattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadefragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadefragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadefragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadefragment::MergeFrom(const facadefragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadefragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadefragment::CopyFrom(const facadefragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadefragment::IsInitialized() const {

  return true;
}

void facadefragment::Swap(facadefragment* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(item_, other->item_);
    std::swap(itemnum_, other->itemnum_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadefragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadefragment_descriptor_;
  metadata.reflection = facadefragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadefragment::kFacadefragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadefragment::Sheet_facadefragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadefragment::InitAsDefaultInstance() {
}

Sheet_facadefragment::Sheet_facadefragment(const Sheet_facadefragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadefragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadefragment::~Sheet_facadefragment() {
  SharedDtor();
}

void Sheet_facadefragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadefragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadefragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadefragment_descriptor_;
}

const Sheet_facadefragment& Sheet_facadefragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadefragment* Sheet_facadefragment::default_instance_ = NULL;

Sheet_facadefragment* Sheet_facadefragment::New() const {
  return new Sheet_facadefragment;
}

void Sheet_facadefragment::Clear() {
  facadefragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadefragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadefragment facadefragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadefragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadefragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadefragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadefragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadefragment facadefragment_List = 1;
  for (int i = 0; i < this->facadefragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadefragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadefragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadefragment facadefragment_List = 1;
  for (int i = 0; i < this->facadefragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadefragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadefragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadefragment facadefragment_List = 1;
  total_size += 1 * this->facadefragment_list_size();
  for (int i = 0; i < this->facadefragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadefragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadefragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadefragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadefragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadefragment::MergeFrom(const Sheet_facadefragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadefragment_list_.MergeFrom(from.facadefragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadefragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadefragment::CopyFrom(const Sheet_facadefragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadefragment::IsInitialized() const {

  return true;
}

void Sheet_facadefragment::Swap(Sheet_facadefragment* other) {
  if (other != this) {
    facadefragment_list_.Swap(&other->facadefragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadefragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadefragment_descriptor_;
  metadata.reflection = Sheet_facadefragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadechangeattributeDesc::kTypeFieldNumber;
const int facadechangeattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadechangeattributeDesc::facadechangeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadechangeattributeDesc::InitAsDefaultInstance() {
}

facadechangeattributeDesc::facadechangeattributeDesc(const facadechangeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadechangeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadechangeattributeDesc::~facadechangeattributeDesc() {
  SharedDtor();
}

void facadechangeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadechangeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadechangeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadechangeattributeDesc_descriptor_;
}

const facadechangeattributeDesc& facadechangeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadechangeattributeDesc* facadechangeattributeDesc::default_instance_ = NULL;

facadechangeattributeDesc* facadechangeattributeDesc::New() const {
  return new facadechangeattributeDesc;
}

void facadechangeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadechangeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadechangeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadechangeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadechangeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadechangeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadechangeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadechangeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadechangeattributeDesc::MergeFrom(const facadechangeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadechangeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadechangeattributeDesc::CopyFrom(const facadechangeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadechangeattributeDesc::IsInitialized() const {

  return true;
}

void facadechangeattributeDesc::Swap(facadechangeattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadechangeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadechangeattributeDesc_descriptor_;
  metadata.reflection = facadechangeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadechangeActiveAttributeDesc::kTypeFieldNumber;
const int facadechangeActiveAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadechangeActiveAttributeDesc::facadechangeActiveAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadechangeActiveAttributeDesc::InitAsDefaultInstance() {
}

facadechangeActiveAttributeDesc::facadechangeActiveAttributeDesc(const facadechangeActiveAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadechangeActiveAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadechangeActiveAttributeDesc::~facadechangeActiveAttributeDesc() {
  SharedDtor();
}

void facadechangeActiveAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadechangeActiveAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadechangeActiveAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadechangeActiveAttributeDesc_descriptor_;
}

const facadechangeActiveAttributeDesc& facadechangeActiveAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadechangeActiveAttributeDesc* facadechangeActiveAttributeDesc::default_instance_ = NULL;

facadechangeActiveAttributeDesc* facadechangeActiveAttributeDesc::New() const {
  return new facadechangeActiveAttributeDesc;
}

void facadechangeActiveAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadechangeActiveAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadechangeActiveAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadechangeActiveAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadechangeActiveAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadechangeActiveAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadechangeActiveAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadechangeActiveAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadechangeActiveAttributeDesc::MergeFrom(const facadechangeActiveAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadechangeActiveAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadechangeActiveAttributeDesc::CopyFrom(const facadechangeActiveAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadechangeActiveAttributeDesc::IsInitialized() const {

  return true;
}

void facadechangeActiveAttributeDesc::Swap(facadechangeActiveAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadechangeActiveAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadechangeActiveAttributeDesc_descriptor_;
  metadata.reflection = facadechangeActiveAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadechange::kIdFieldNumber;
const int facadechange::kTypeFieldNumber;
const int facadechange::kResourceFieldNumber;
const int facadechange::kProfessionIDFieldNumber;
const int facadechange::kNameFieldNumber;
const int facadechange::kActiveDescFieldNumber;
const int facadechange::kQualityFieldNumber;
const int facadechange::kActivationItemFieldNumber;
const int facadechange::kActivationNumFieldNumber;
const int facadechange::kStarIdFieldNumber;
const int facadechange::kStarNumFieldNumber;
const int facadechange::kStarUpFieldNumber;
const int facadechange::kStarBerFieldNumber;
const int facadechange::kUpAttributeIdFieldNumber;
const int facadechange::kActiveSkillFieldNumber;
const int facadechange::kAttributeFieldNumber;
const int facadechange::kActiveAttributeFieldNumber;
#endif  // !_MSC_VER

facadechange::facadechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadechange::InitAsDefaultInstance() {
}

facadechange::facadechange(const facadechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadechange::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0;
  activationitem_ = GOOGLE_LONGLONG(0);
  activationnum_ = 0;
  starid_ = GOOGLE_LONGLONG(0);
  starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  starup_ = 0;
  starber_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  activeskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadechange::~facadechange() {
  SharedDtor();
}

void facadechange::SharedDtor() {
  if (resource_ != &::google::protobuf::internal::kEmptyString) {
    delete resource_;
  }
  if (professionid_ != &::google::protobuf::internal::kEmptyString) {
    delete professionid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete activedesc_;
  }
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (this != default_instance_) {
  }
}

void facadechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadechange_descriptor_;
}

const facadechange& facadechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadechange* facadechange::default_instance_ = NULL;

facadechange* facadechange::New() const {
  return new facadechange;
}

void facadechange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_resource()) {
      if (resource_ != &::google::protobuf::internal::kEmptyString) {
        resource_->clear();
      }
    }
    if (has_professionid()) {
      if (professionid_ != &::google::protobuf::internal::kEmptyString) {
        professionid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_activedesc()) {
      if (activedesc_ != &::google::protobuf::internal::kEmptyString) {
        activedesc_->clear();
      }
    }
    quality_ = 0;
    activationitem_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    activationnum_ = 0;
    starid_ = GOOGLE_LONGLONG(0);
    if (has_starnum()) {
      if (starnum_ != &::google::protobuf::internal::kEmptyString) {
        starnum_->clear();
      }
    }
    starup_ = 0;
    starber_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    activeskill_ = 0;
  }
  attribute_.Clear();
  activeattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resource;
        break;
      }

      // optional string resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resource().data(), this->resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_professionID;
        break;
      }

      // optional string professionID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_professionID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_professionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->professionid().data(), this->professionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_activeDesc;
        break;
      }

      // optional string activeDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activedesc().data(), this->activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // optional int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_activationItem;
        break;
      }

      // optional int64 activationItem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &activationitem_)));
          set_has_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_activationNum;
        break;
      }

      // optional int32 activationNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activationNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activationnum_)));
          set_has_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_starId;
        break;
      }

      // optional int64 starId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_starNum;
        break;
      }

      // optional string starNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->starnum().data(), this->starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_starUp;
        break;
      }

      // optional int32 starUp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starup_)));
          set_has_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_starBer;
        break;
      }

      // optional int32 starBer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starBer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starber_)));
          set_has_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_activeSkill;
        break;
      }

      // optional int32 activeSkill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeskill_)));
          set_has_activeskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.facadechangeattributeDesc attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_attribute;
        if (input->ExpectTag(138)) goto parse_ActiveAttribute;
        break;
      }

      // repeated .proto_ff.facadechangeActiveAttributeDesc ActiveAttribute = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_ActiveAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resource(), output);
  }

  // optional string professionID = 4;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionid().data(), this->professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->professionid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // optional string activeDesc = 6;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->activedesc(), output);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // optional int64 activationItem = 8;
  if (has_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->activationitem(), output);
  }

  // optional int32 activationNum = 9;
  if (has_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->activationnum(), output);
  }

  // optional int64 starId = 10;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->starid(), output);
  }

  // optional string starNum = 11;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->starnum(), output);
  }

  // optional int32 starUp = 12;
  if (has_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->starup(), output);
  }

  // optional int32 starBer = 13;
  if (has_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->starber(), output);
  }

  // optional int64 upAttributeId = 14;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->upattributeid(), output);
  }

  // optional int32 activeSkill = 15;
  if (has_activeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->activeskill(), output);
  }

  // repeated .proto_ff.facadechangeattributeDesc attribute = 16;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->attribute(i), output);
  }

  // repeated .proto_ff.facadechangeActiveAttributeDesc ActiveAttribute = 17;
  for (int i = 0; i < this->activeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->activeattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string resource = 3;
  if (has_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resource().data(), this->resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resource(), target);
  }

  // optional string professionID = 4;
  if (has_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->professionid().data(), this->professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->professionid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional string activeDesc = 6;
  if (has_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activedesc().data(), this->activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->activedesc(), target);
  }

  // optional int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // optional int64 activationItem = 8;
  if (has_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->activationitem(), target);
  }

  // optional int32 activationNum = 9;
  if (has_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->activationnum(), target);
  }

  // optional int64 starId = 10;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->starid(), target);
  }

  // optional string starNum = 11;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->starnum().data(), this->starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->starnum(), target);
  }

  // optional int32 starUp = 12;
  if (has_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->starup(), target);
  }

  // optional int32 starBer = 13;
  if (has_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->starber(), target);
  }

  // optional int64 upAttributeId = 14;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->upattributeid(), target);
  }

  // optional int32 activeSkill = 15;
  if (has_activeskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->activeskill(), target);
  }

  // repeated .proto_ff.facadechangeattributeDesc attribute = 16;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->attribute(i), target);
  }

  // repeated .proto_ff.facadechangeActiveAttributeDesc ActiveAttribute = 17;
  for (int i = 0; i < this->activeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->activeattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadechange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string resource = 3;
    if (has_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resource());
    }

    // optional string professionID = 4;
    if (has_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->professionid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string activeDesc = 6;
    if (has_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activedesc());
    }

    // optional int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int64 activationItem = 8;
    if (has_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->activationitem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 activationNum = 9;
    if (has_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activationnum());
    }

    // optional int64 starId = 10;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starid());
    }

    // optional string starNum = 11;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starnum());
    }

    // optional int32 starUp = 12;
    if (has_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starup());
    }

    // optional int32 starBer = 13;
    if (has_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starber());
    }

    // optional int64 upAttributeId = 14;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 activeSkill = 15;
    if (has_activeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activeskill());
    }

  }
  // repeated .proto_ff.facadechangeattributeDesc attribute = 16;
  total_size += 2 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated .proto_ff.facadechangeActiveAttributeDesc ActiveAttribute = 17;
  total_size += 2 * this->activeattribute_size();
  for (int i = 0; i < this->activeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activeattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadechange::MergeFrom(const facadechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  activeattribute_.MergeFrom(from.activeattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_resource()) {
      set_resource(from.resource());
    }
    if (from.has_professionid()) {
      set_professionid(from.professionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_activedesc()) {
      set_activedesc(from.activedesc());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_activationitem()) {
      set_activationitem(from.activationitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_activationnum()) {
      set_activationnum(from.activationnum());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
    if (from.has_starup()) {
      set_starup(from.starup());
    }
    if (from.has_starber()) {
      set_starber(from.starber());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_activeskill()) {
      set_activeskill(from.activeskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadechange::CopyFrom(const facadechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadechange::IsInitialized() const {

  return true;
}

void facadechange::Swap(facadechange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(resource_, other->resource_);
    std::swap(professionid_, other->professionid_);
    std::swap(name_, other->name_);
    std::swap(activedesc_, other->activedesc_);
    std::swap(quality_, other->quality_);
    std::swap(activationitem_, other->activationitem_);
    std::swap(activationnum_, other->activationnum_);
    std::swap(starid_, other->starid_);
    std::swap(starnum_, other->starnum_);
    std::swap(starup_, other->starup_);
    std::swap(starber_, other->starber_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(activeskill_, other->activeskill_);
    attribute_.Swap(&other->attribute_);
    activeattribute_.Swap(&other->activeattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadechange_descriptor_;
  metadata.reflection = facadechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadechange::kFacadechangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadechange::Sheet_facadechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadechange::InitAsDefaultInstance() {
}

Sheet_facadechange::Sheet_facadechange(const Sheet_facadechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadechange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadechange::~Sheet_facadechange() {
  SharedDtor();
}

void Sheet_facadechange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadechange_descriptor_;
}

const Sheet_facadechange& Sheet_facadechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadechange* Sheet_facadechange::default_instance_ = NULL;

Sheet_facadechange* Sheet_facadechange::New() const {
  return new Sheet_facadechange;
}

void Sheet_facadechange::Clear() {
  facadechange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadechange facadechange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadechange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadechange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadechange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadechange facadechange_List = 1;
  for (int i = 0; i < this->facadechange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadechange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadechange facadechange_List = 1;
  for (int i = 0; i < this->facadechange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadechange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadechange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadechange facadechange_List = 1;
  total_size += 1 * this->facadechange_list_size();
  for (int i = 0; i < this->facadechange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadechange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadechange::MergeFrom(const Sheet_facadechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadechange_list_.MergeFrom(from.facadechange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadechange::CopyFrom(const Sheet_facadechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadechange::IsInitialized() const {

  return true;
}

void Sheet_facadechange::Swap(Sheet_facadechange* other) {
  if (other != this) {
    facadechange_list_.Swap(&other->facadechange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadechange_descriptor_;
  metadata.reflection = Sheet_facadechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadestarUpupAttributeDesc::kTypeFieldNumber;
const int facadestarUpupAttributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadestarUpupAttributeDesc::facadestarUpupAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadestarUpupAttributeDesc::InitAsDefaultInstance() {
}

facadestarUpupAttributeDesc::facadestarUpupAttributeDesc(const facadestarUpupAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadestarUpupAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadestarUpupAttributeDesc::~facadestarUpupAttributeDesc() {
  SharedDtor();
}

void facadestarUpupAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadestarUpupAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadestarUpupAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadestarUpupAttributeDesc_descriptor_;
}

const facadestarUpupAttributeDesc& facadestarUpupAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadestarUpupAttributeDesc* facadestarUpupAttributeDesc::default_instance_ = NULL;

facadestarUpupAttributeDesc* facadestarUpupAttributeDesc::New() const {
  return new facadestarUpupAttributeDesc;
}

void facadestarUpupAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadestarUpupAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadestarUpupAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadestarUpupAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadestarUpupAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadestarUpupAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadestarUpupAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadestarUpupAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadestarUpupAttributeDesc::MergeFrom(const facadestarUpupAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadestarUpupAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadestarUpupAttributeDesc::CopyFrom(const facadestarUpupAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadestarUpupAttributeDesc::IsInitialized() const {

  return true;
}

void facadestarUpupAttributeDesc::Swap(facadestarUpupAttributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadestarUpupAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadestarUpupAttributeDesc_descriptor_;
  metadata.reflection = facadestarUpupAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadestarUp::kIDFieldNumber;
const int facadestarUp::kUpAttributeIdFieldNumber;
const int facadestarUp::kStarIDFieldNumber;
const int facadestarUp::kSkillIDFieldNumber;
const int facadestarUp::kUpAttributeFieldNumber;
#endif  // !_MSC_VER

facadestarUp::facadestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadestarUp::InitAsDefaultInstance() {
}

facadestarUp::facadestarUp(const facadestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadestarUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upattributeid_ = GOOGLE_LONGLONG(0);
  starid_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadestarUp::~facadestarUp() {
  SharedDtor();
}

void facadestarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadestarUp_descriptor_;
}

const facadestarUp& facadestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadestarUp* facadestarUp::default_instance_ = NULL;

facadestarUp* facadestarUp::New() const {
  return new facadestarUp;
}

void facadestarUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upattributeid_ = GOOGLE_LONGLONG(0);
    starid_ = 0;
    skillid_ = 0;
  }
  upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upAttributeId;
        break;
      }

      // optional int64 upAttributeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upAttributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upattributeid_)));
          set_has_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starID;
        break;
      }

      // optional int32 starID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starid_)));
          set_has_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillID;
        break;
      }

      // optional int32 skillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_upAttribute;
        break;
      }

      // repeated .proto_ff.facadestarUpupAttributeDesc upAttribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upAttribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_upAttribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->upattributeid(), output);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starid(), output);
  }

  // optional int32 skillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillid(), output);
  }

  // repeated .proto_ff.facadestarUpupAttributeDesc upAttribute = 5;
  for (int i = 0; i < this->upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 upAttributeId = 2;
  if (has_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->upattributeid(), target);
  }

  // optional int32 starID = 3;
  if (has_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starid(), target);
  }

  // optional int32 skillID = 4;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillid(), target);
  }

  // repeated .proto_ff.facadestarUpupAttributeDesc upAttribute = 5;
  for (int i = 0; i < this->upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadestarUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 upAttributeId = 2;
    if (has_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upattributeid());
    }

    // optional int32 starID = 3;
    if (has_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starid());
    }

    // optional int32 skillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  // repeated .proto_ff.facadestarUpupAttributeDesc upAttribute = 5;
  total_size += 1 * this->upattribute_size();
  for (int i = 0; i < this->upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadestarUp::MergeFrom(const facadestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  upattribute_.MergeFrom(from.upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upattributeid()) {
      set_upattributeid(from.upattributeid());
    }
    if (from.has_starid()) {
      set_starid(from.starid());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadestarUp::CopyFrom(const facadestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadestarUp::IsInitialized() const {

  return true;
}

void facadestarUp::Swap(facadestarUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upattributeid_, other->upattributeid_);
    std::swap(starid_, other->starid_);
    std::swap(skillid_, other->skillid_);
    upattribute_.Swap(&other->upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadestarUp_descriptor_;
  metadata.reflection = facadestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadestarUp::kFacadestarUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadestarUp::Sheet_facadestarUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadestarUp::InitAsDefaultInstance() {
}

Sheet_facadestarUp::Sheet_facadestarUp(const Sheet_facadestarUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadestarUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadestarUp::~Sheet_facadestarUp() {
  SharedDtor();
}

void Sheet_facadestarUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadestarUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadestarUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadestarUp_descriptor_;
}

const Sheet_facadestarUp& Sheet_facadestarUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadestarUp* Sheet_facadestarUp::default_instance_ = NULL;

Sheet_facadestarUp* Sheet_facadestarUp::New() const {
  return new Sheet_facadestarUp;
}

void Sheet_facadestarUp::Clear() {
  facadestarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadestarUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadestarUp facadestarUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadestarUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadestarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadestarUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadestarUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadestarUp facadestarUp_List = 1;
  for (int i = 0; i < this->facadestarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadestarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadestarUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadestarUp facadestarUp_List = 1;
  for (int i = 0; i < this->facadestarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadestarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadestarUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadestarUp facadestarUp_List = 1;
  total_size += 1 * this->facadestarup_list_size();
  for (int i = 0; i < this->facadestarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadestarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadestarUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadestarUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadestarUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadestarUp::MergeFrom(const Sheet_facadestarUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadestarup_list_.MergeFrom(from.facadestarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadestarUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadestarUp::CopyFrom(const Sheet_facadestarUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadestarUp::IsInitialized() const {

  return true;
}

void Sheet_facadestarUp::Swap(Sheet_facadestarUp* other) {
  if (other != this) {
    facadestarup_list_.Swap(&other->facadestarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadestarUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadestarUp_descriptor_;
  metadata.reflection = Sheet_facadestarUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoulattributeDesc::kTypeFieldNumber;
const int facadesoulattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadesoulattributeDesc::facadesoulattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoulattributeDesc::InitAsDefaultInstance() {
}

facadesoulattributeDesc::facadesoulattributeDesc(const facadesoulattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoulattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoulattributeDesc::~facadesoulattributeDesc() {
  SharedDtor();
}

void facadesoulattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoulattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoulattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoulattributeDesc_descriptor_;
}

const facadesoulattributeDesc& facadesoulattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoulattributeDesc* facadesoulattributeDesc::default_instance_ = NULL;

facadesoulattributeDesc* facadesoulattributeDesc::New() const {
  return new facadesoulattributeDesc;
}

void facadesoulattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoulattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoulattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoulattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoulattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoulattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoulattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoulattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoulattributeDesc::MergeFrom(const facadesoulattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoulattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoulattributeDesc::CopyFrom(const facadesoulattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoulattributeDesc::IsInitialized() const {

  return true;
}

void facadesoulattributeDesc::Swap(facadesoulattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoulattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoulattributeDesc_descriptor_;
  metadata.reflection = facadesoulattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoul::kIdFieldNumber;
const int facadesoul::kRechargeIDFieldNumber;
const int facadesoul::kMainSkillFieldNumber;
const int facadesoul::kAttributeFieldNumber;
const int facadesoul::kMinorSkillFieldNumber;
#endif  // !_MSC_VER

facadesoul::facadesoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoul::InitAsDefaultInstance() {
}

facadesoul::facadesoul(const facadesoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoul::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  rechargeid_ = 0;
  mainskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoul::~facadesoul() {
  SharedDtor();
}

void facadesoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoul_descriptor_;
}

const facadesoul& facadesoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoul* facadesoul::default_instance_ = NULL;

facadesoul* facadesoul::New() const {
  return new facadesoul;
}

void facadesoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    rechargeid_ = 0;
    mainskill_ = 0;
  }
  attribute_.Clear();
  minorskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeID;
        break;
      }

      // optional int32 rechargeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mainSkill;
        break;
      }

      // optional int32 mainSkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mainskill_)));
          set_has_mainskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.facadesoulattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectTag(40)) goto parse_minorSkill;
        break;
      }

      // repeated int32 minorSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minorSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_minorskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_minorskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_minorSkill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 rechargeID = 2;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rechargeid(), output);
  }

  // optional int32 mainSkill = 3;
  if (has_mainskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mainskill(), output);
  }

  // repeated .proto_ff.facadesoulattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  // repeated int32 minorSkill = 5;
  for (int i = 0; i < this->minorskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->minorskill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 rechargeID = 2;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rechargeid(), target);
  }

  // optional int32 mainSkill = 3;
  if (has_mainskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mainskill(), target);
  }

  // repeated .proto_ff.facadesoulattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  // repeated int32 minorSkill = 5;
  for (int i = 0; i < this->minorskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->minorskill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 rechargeID = 2;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeid());
    }

    // optional int32 mainSkill = 3;
    if (has_mainskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mainskill());
    }

  }
  // repeated .proto_ff.facadesoulattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  // repeated int32 minorSkill = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->minorskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->minorskill(i));
    }
    total_size += 1 * this->minorskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoul::MergeFrom(const facadesoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  minorskill_.MergeFrom(from.minorskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_mainskill()) {
      set_mainskill(from.mainskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoul::CopyFrom(const facadesoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoul::IsInitialized() const {

  return true;
}

void facadesoul::Swap(facadesoul* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(mainskill_, other->mainskill_);
    attribute_.Swap(&other->attribute_);
    minorskill_.Swap(&other->minorskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoul_descriptor_;
  metadata.reflection = facadesoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadesoul::kFacadesoulListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadesoul::Sheet_facadesoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadesoul::InitAsDefaultInstance() {
}

Sheet_facadesoul::Sheet_facadesoul(const Sheet_facadesoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadesoul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadesoul::~Sheet_facadesoul() {
  SharedDtor();
}

void Sheet_facadesoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadesoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadesoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadesoul_descriptor_;
}

const Sheet_facadesoul& Sheet_facadesoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadesoul* Sheet_facadesoul::default_instance_ = NULL;

Sheet_facadesoul* Sheet_facadesoul::New() const {
  return new Sheet_facadesoul;
}

void Sheet_facadesoul::Clear() {
  facadesoul_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadesoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadesoul facadesoul_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadesoul_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadesoul_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadesoul_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadesoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadesoul facadesoul_List = 1;
  for (int i = 0; i < this->facadesoul_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadesoul_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadesoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadesoul facadesoul_List = 1;
  for (int i = 0; i < this->facadesoul_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadesoul_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadesoul::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadesoul facadesoul_List = 1;
  total_size += 1 * this->facadesoul_list_size();
  for (int i = 0; i < this->facadesoul_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadesoul_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadesoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadesoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadesoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadesoul::MergeFrom(const Sheet_facadesoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadesoul_list_.MergeFrom(from.facadesoul_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadesoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadesoul::CopyFrom(const Sheet_facadesoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadesoul::IsInitialized() const {

  return true;
}

void Sheet_facadesoul::Swap(Sheet_facadesoul* other) {
  if (other != this) {
    facadesoul_list_.Swap(&other->facadesoul_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadesoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadesoul_descriptor_;
  metadata.reflection = Sheet_facadesoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoulActive::kIdFieldNumber;
const int facadesoulActive::kParamaFieldNumber;
const int facadesoulActive::kConditionFieldNumber;
#endif  // !_MSC_VER

facadesoulActive::facadesoulActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoulActive::InitAsDefaultInstance() {
}

facadesoulActive::facadesoulActive(const facadesoulActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoulActive::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoulActive::~facadesoulActive() {
  SharedDtor();
}

void facadesoulActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoulActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoulActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoulActive_descriptor_;
}

const facadesoulActive& facadesoulActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoulActive* facadesoulActive::default_instance_ = NULL;

facadesoulActive* facadesoulActive::New() const {
  return new facadesoulActive;
}

void facadesoulActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  parama_.Clear();
  condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoulActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parama;
        break;
      }

      // repeated string parama = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parama:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parama(this->parama_size() - 1).data(),
            this->parama(this->parama_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parama;
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // repeated int32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_condition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_condition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoulActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated string parama = 2;
  for (int i = 0; i < this->parama_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->parama(i).data(), this->parama(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parama(i), output);
  }

  // repeated int32 condition = 3;
  for (int i = 0; i < this->condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->condition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoulActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated string parama = 2;
  for (int i = 0; i < this->parama_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parama(i).data(), this->parama(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->parama(i), target);
  }

  // repeated int32 condition = 3;
  for (int i = 0; i < this->condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->condition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoulActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated string parama = 2;
  total_size += 1 * this->parama_size();
  for (int i = 0; i < this->parama_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parama(i));
  }

  // repeated int32 condition = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->condition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->condition(i));
    }
    total_size += 1 * this->condition_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoulActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoulActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoulActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoulActive::MergeFrom(const facadesoulActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  parama_.MergeFrom(from.parama_);
  condition_.MergeFrom(from.condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoulActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoulActive::CopyFrom(const facadesoulActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoulActive::IsInitialized() const {

  return true;
}

void facadesoulActive::Swap(facadesoulActive* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    parama_.Swap(&other->parama_);
    condition_.Swap(&other->condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoulActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoulActive_descriptor_;
  metadata.reflection = facadesoulActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadesoulActive::kFacadesoulActiveListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadesoulActive::Sheet_facadesoulActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadesoulActive::InitAsDefaultInstance() {
}

Sheet_facadesoulActive::Sheet_facadesoulActive(const Sheet_facadesoulActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadesoulActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadesoulActive::~Sheet_facadesoulActive() {
  SharedDtor();
}

void Sheet_facadesoulActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadesoulActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadesoulActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadesoulActive_descriptor_;
}

const Sheet_facadesoulActive& Sheet_facadesoulActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadesoulActive* Sheet_facadesoulActive::default_instance_ = NULL;

Sheet_facadesoulActive* Sheet_facadesoulActive::New() const {
  return new Sheet_facadesoulActive;
}

void Sheet_facadesoulActive::Clear() {
  facadesoulactive_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadesoulActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadesoulActive facadesoulActive_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadesoulActive_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadesoulactive_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadesoulActive_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadesoulActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadesoulActive facadesoulActive_List = 1;
  for (int i = 0; i < this->facadesoulactive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadesoulactive_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadesoulActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadesoulActive facadesoulActive_List = 1;
  for (int i = 0; i < this->facadesoulactive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadesoulactive_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadesoulActive::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadesoulActive facadesoulActive_List = 1;
  total_size += 1 * this->facadesoulactive_list_size();
  for (int i = 0; i < this->facadesoulactive_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadesoulactive_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadesoulActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadesoulActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadesoulActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadesoulActive::MergeFrom(const Sheet_facadesoulActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadesoulactive_list_.MergeFrom(from.facadesoulactive_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadesoulActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadesoulActive::CopyFrom(const Sheet_facadesoulActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadesoulActive::IsInitialized() const {

  return true;
}

void Sheet_facadesoulActive::Swap(Sheet_facadesoulActive* other) {
  if (other != this) {
    facadesoulactive_list_.Swap(&other->facadesoulactive_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadesoulActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadesoulActive_descriptor_;
  metadata.reflection = Sheet_facadesoulActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoulLvattributeDesc::kTypeFieldNumber;
const int facadesoulLvattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

facadesoulLvattributeDesc::facadesoulLvattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoulLvattributeDesc::InitAsDefaultInstance() {
}

facadesoulLvattributeDesc::facadesoulLvattributeDesc(const facadesoulLvattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoulLvattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoulLvattributeDesc::~facadesoulLvattributeDesc() {
  SharedDtor();
}

void facadesoulLvattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoulLvattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoulLvattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoulLvattributeDesc_descriptor_;
}

const facadesoulLvattributeDesc& facadesoulLvattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoulLvattributeDesc* facadesoulLvattributeDesc::default_instance_ = NULL;

facadesoulLvattributeDesc* facadesoulLvattributeDesc::New() const {
  return new facadesoulLvattributeDesc;
}

void facadesoulLvattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoulLvattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoulLvattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoulLvattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoulLvattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoulLvattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoulLvattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoulLvattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoulLvattributeDesc::MergeFrom(const facadesoulLvattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoulLvattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoulLvattributeDesc::CopyFrom(const facadesoulLvattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoulLvattributeDesc::IsInitialized() const {

  return true;
}

void facadesoulLvattributeDesc::Swap(facadesoulLvattributeDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoulLvattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoulLvattributeDesc_descriptor_;
  metadata.reflection = facadesoulLvattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoulLv::kIdFieldNumber;
const int facadesoulLv::kSoulIDFieldNumber;
const int facadesoulLv::kItemIDFieldNumber;
const int facadesoulLv::kNumFieldNumber;
const int facadesoulLv::kSuccessRateFieldNumber;
const int facadesoulLv::kDownLvFieldNumber;
const int facadesoulLv::kAttributeFieldNumber;
#endif  // !_MSC_VER

facadesoulLv::facadesoulLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoulLv::InitAsDefaultInstance() {
}

facadesoulLv::facadesoulLv(const facadesoulLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoulLv::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  soulid_ = 0;
  itemid_ = 0;
  num_ = 0;
  successrate_ = 0;
  downlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoulLv::~facadesoulLv() {
  SharedDtor();
}

void facadesoulLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoulLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoulLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoulLv_descriptor_;
}

const facadesoulLv& facadesoulLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoulLv* facadesoulLv::default_instance_ = NULL;

facadesoulLv* facadesoulLv::New() const {
  return new facadesoulLv;
}

void facadesoulLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    soulid_ = 0;
    itemid_ = 0;
    num_ = 0;
    successrate_ = 0;
    downlv_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoulLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soulID;
        break;
      }

      // optional int32 soulID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulid_)));
          set_has_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_successRate;
        break;
      }

      // optional int32 successRate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_successRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &successrate_)));
          set_has_successrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_downLv;
        break;
      }

      // optional int32 downLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downlv_)));
          set_has_downlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.facadesoulLvattributeDesc attribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoulLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 soulID = 2;
  if (has_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soulid(), output);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int32 successRate = 5;
  if (has_successrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->successrate(), output);
  }

  // optional int32 downLv = 6;
  if (has_downlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->downlv(), output);
  }

  // repeated .proto_ff.facadesoulLvattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoulLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 soulID = 2;
  if (has_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soulid(), target);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int32 successRate = 5;
  if (has_successrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->successrate(), target);
  }

  // optional int32 downLv = 6;
  if (has_downlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->downlv(), target);
  }

  // repeated .proto_ff.facadesoulLvattributeDesc attribute = 7;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoulLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 soulID = 2;
    if (has_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulid());
    }

    // optional int32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 successRate = 5;
    if (has_successrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->successrate());
    }

    // optional int32 downLv = 6;
    if (has_downlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downlv());
    }

  }
  // repeated .proto_ff.facadesoulLvattributeDesc attribute = 7;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoulLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoulLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoulLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoulLv::MergeFrom(const facadesoulLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_soulid()) {
      set_soulid(from.soulid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_successrate()) {
      set_successrate(from.successrate());
    }
    if (from.has_downlv()) {
      set_downlv(from.downlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoulLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoulLv::CopyFrom(const facadesoulLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoulLv::IsInitialized() const {

  return true;
}

void facadesoulLv::Swap(facadesoulLv* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(soulid_, other->soulid_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(successrate_, other->successrate_);
    std::swap(downlv_, other->downlv_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoulLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoulLv_descriptor_;
  metadata.reflection = facadesoulLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadesoulLv::kFacadesoulLvListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadesoulLv::Sheet_facadesoulLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadesoulLv::InitAsDefaultInstance() {
}

Sheet_facadesoulLv::Sheet_facadesoulLv(const Sheet_facadesoulLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadesoulLv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadesoulLv::~Sheet_facadesoulLv() {
  SharedDtor();
}

void Sheet_facadesoulLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadesoulLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadesoulLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadesoulLv_descriptor_;
}

const Sheet_facadesoulLv& Sheet_facadesoulLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadesoulLv* Sheet_facadesoulLv::default_instance_ = NULL;

Sheet_facadesoulLv* Sheet_facadesoulLv::New() const {
  return new Sheet_facadesoulLv;
}

void Sheet_facadesoulLv::Clear() {
  facadesoullv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadesoulLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadesoulLv facadesoulLv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadesoulLv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadesoullv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadesoulLv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadesoulLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadesoulLv facadesoulLv_List = 1;
  for (int i = 0; i < this->facadesoullv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadesoullv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadesoulLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadesoulLv facadesoulLv_List = 1;
  for (int i = 0; i < this->facadesoullv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadesoullv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadesoulLv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadesoulLv facadesoulLv_List = 1;
  total_size += 1 * this->facadesoullv_list_size();
  for (int i = 0; i < this->facadesoullv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadesoullv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadesoulLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadesoulLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadesoulLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadesoulLv::MergeFrom(const Sheet_facadesoulLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadesoullv_list_.MergeFrom(from.facadesoullv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadesoulLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadesoulLv::CopyFrom(const Sheet_facadesoulLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadesoulLv::IsInitialized() const {

  return true;
}

void Sheet_facadesoulLv::Swap(Sheet_facadesoulLv* other) {
  if (other != this) {
    facadesoullv_list_.Swap(&other->facadesoullv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadesoulLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadesoulLv_descriptor_;
  metadata.reflection = Sheet_facadesoulLv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int facadesoulAchievement::kIdFieldNumber;
const int facadesoulAchievement::kSoulIDFieldNumber;
const int facadesoulAchievement::kTypeFieldNumber;
const int facadesoulAchievement::kParamaFieldNumber;
const int facadesoulAchievement::kItemIDFieldNumber;
const int facadesoulAchievement::kNumFieldNumber;
#endif  // !_MSC_VER

facadesoulAchievement::facadesoulAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void facadesoulAchievement::InitAsDefaultInstance() {
}

facadesoulAchievement::facadesoulAchievement(const facadesoulAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void facadesoulAchievement::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  soulid_ = 0;
  type_ = 0;
  parama_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

facadesoulAchievement::~facadesoulAchievement() {
  SharedDtor();
}

void facadesoulAchievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void facadesoulAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* facadesoulAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return facadesoulAchievement_descriptor_;
}

const facadesoulAchievement& facadesoulAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

facadesoulAchievement* facadesoulAchievement::default_instance_ = NULL;

facadesoulAchievement* facadesoulAchievement::New() const {
  return new facadesoulAchievement;
}

void facadesoulAchievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    soulid_ = 0;
    type_ = 0;
    parama_ = 0;
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool facadesoulAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_soulID;
        break;
      }

      // optional int32 soulID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soulID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soulid_)));
          set_has_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_parama;
        break;
      }

      // optional int32 parama = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parama_)));
          set_has_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void facadesoulAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 soulID = 2;
  if (has_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->soulid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 parama = 4;
  if (has_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->parama(), output);
  }

  // optional int32 itemID = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemid(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* facadesoulAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 soulID = 2;
  if (has_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->soulid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 parama = 4;
  if (has_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->parama(), target);
  }

  // optional int32 itemID = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemid(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int facadesoulAchievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 soulID = 2;
    if (has_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soulid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 parama = 4;
    if (has_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parama());
    }

    // optional int32 itemID = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void facadesoulAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const facadesoulAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const facadesoulAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void facadesoulAchievement::MergeFrom(const facadesoulAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_soulid()) {
      set_soulid(from.soulid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_parama()) {
      set_parama(from.parama());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void facadesoulAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void facadesoulAchievement::CopyFrom(const facadesoulAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool facadesoulAchievement::IsInitialized() const {

  return true;
}

void facadesoulAchievement::Swap(facadesoulAchievement* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(soulid_, other->soulid_);
    std::swap(type_, other->type_);
    std::swap(parama_, other->parama_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata facadesoulAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = facadesoulAchievement_descriptor_;
  metadata.reflection = facadesoulAchievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_facadesoulAchievement::kFacadesoulAchievementListFieldNumber;
#endif  // !_MSC_VER

Sheet_facadesoulAchievement::Sheet_facadesoulAchievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_facadesoulAchievement::InitAsDefaultInstance() {
}

Sheet_facadesoulAchievement::Sheet_facadesoulAchievement(const Sheet_facadesoulAchievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_facadesoulAchievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_facadesoulAchievement::~Sheet_facadesoulAchievement() {
  SharedDtor();
}

void Sheet_facadesoulAchievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_facadesoulAchievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_facadesoulAchievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_facadesoulAchievement_descriptor_;
}

const Sheet_facadesoulAchievement& Sheet_facadesoulAchievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_facadesoulAchievement* Sheet_facadesoulAchievement::default_instance_ = NULL;

Sheet_facadesoulAchievement* Sheet_facadesoulAchievement::New() const {
  return new Sheet_facadesoulAchievement;
}

void Sheet_facadesoulAchievement::Clear() {
  facadesoulachievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_facadesoulAchievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.facadesoulAchievement facadesoulAchievement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facadesoulAchievement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facadesoulachievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facadesoulAchievement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_facadesoulAchievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.facadesoulAchievement facadesoulAchievement_List = 1;
  for (int i = 0; i < this->facadesoulachievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facadesoulachievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_facadesoulAchievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.facadesoulAchievement facadesoulAchievement_List = 1;
  for (int i = 0; i < this->facadesoulachievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facadesoulachievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_facadesoulAchievement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.facadesoulAchievement facadesoulAchievement_List = 1;
  total_size += 1 * this->facadesoulachievement_list_size();
  for (int i = 0; i < this->facadesoulachievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facadesoulachievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_facadesoulAchievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_facadesoulAchievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_facadesoulAchievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_facadesoulAchievement::MergeFrom(const Sheet_facadesoulAchievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  facadesoulachievement_list_.MergeFrom(from.facadesoulachievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_facadesoulAchievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_facadesoulAchievement::CopyFrom(const Sheet_facadesoulAchievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_facadesoulAchievement::IsInitialized() const {

  return true;
}

void Sheet_facadesoulAchievement::Swap(Sheet_facadesoulAchievement* other) {
  if (other != this) {
    facadesoulachievement_list_.Swap(&other->facadesoulachievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_facadesoulAchievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_facadesoulAchievement_descriptor_;
  metadata.reflection = Sheet_facadesoulAchievement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
