// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: facade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "facade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FacadeDisplayMaterialDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeDisplayMaterialDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeDisplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeDisplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeValueTreasureattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeValueTreasureattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeValueArtifactattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeValueArtifactattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeValueBladeattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeValueBladeattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeValueWingattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeValueWingattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeType_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeFragmentAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeFragmentAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeFragment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeFragment_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeChangeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeChangeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeChangeActiveattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeChangeActiveattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeStarupUpattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeStarupUpattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeStarup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeStarup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoulAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoulAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeSoul_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeSoul_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoulactiveUnlockDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoulactiveUnlockDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoulactive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoulactive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeSoulactive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeSoulactive_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoullvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoullvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoullv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoullv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeSoullv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeSoullv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FacadeSoulachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FacadeSoulachievement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FacadeSoulachievement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FacadeSoulachievement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_facade_2eproto() {
  protobuf_AddDesc_facade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "facade.proto");
  GOOGLE_CHECK(file != NULL);
  E_FacadeDisplayMaterialDesc_descriptor_ = file->message_type(0);
  static const int E_FacadeDisplayMaterialDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplayMaterialDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplayMaterialDesc, m_exp_),
  };
  E_FacadeDisplayMaterialDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeDisplayMaterialDesc_descriptor_,
      E_FacadeDisplayMaterialDesc::default_instance_,
      E_FacadeDisplayMaterialDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplayMaterialDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplayMaterialDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeDisplayMaterialDesc));
  E_FacadeDisplay_descriptor_ = file->message_type(1);
  static const int E_FacadeDisplay_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_souliid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, m_fragmentid_),
  };
  E_FacadeDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeDisplay_descriptor_,
      E_FacadeDisplay::default_instance_,
      E_FacadeDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeDisplay));
  Sheet_FacadeDisplay_descriptor_ = file->message_type(2);
  static const int Sheet_FacadeDisplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeDisplay, e_facadedisplay_list_),
  };
  Sheet_FacadeDisplay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeDisplay_descriptor_,
      Sheet_FacadeDisplay::default_instance_,
      Sheet_FacadeDisplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeDisplay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeDisplay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeDisplay));
  E_FacadeValueTreasureattributeDesc_descriptor_ = file->message_type(3);
  static const int E_FacadeValueTreasureattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueTreasureattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueTreasureattributeDesc, m_value_),
  };
  E_FacadeValueTreasureattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeValueTreasureattributeDesc_descriptor_,
      E_FacadeValueTreasureattributeDesc::default_instance_,
      E_FacadeValueTreasureattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueTreasureattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueTreasureattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeValueTreasureattributeDesc));
  E_FacadeValueArtifactattributeDesc_descriptor_ = file->message_type(4);
  static const int E_FacadeValueArtifactattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueArtifactattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueArtifactattributeDesc, m_value_),
  };
  E_FacadeValueArtifactattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeValueArtifactattributeDesc_descriptor_,
      E_FacadeValueArtifactattributeDesc::default_instance_,
      E_FacadeValueArtifactattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueArtifactattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueArtifactattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeValueArtifactattributeDesc));
  E_FacadeValueBladeattributeDesc_descriptor_ = file->message_type(5);
  static const int E_FacadeValueBladeattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueBladeattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueBladeattributeDesc, m_value_),
  };
  E_FacadeValueBladeattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeValueBladeattributeDesc_descriptor_,
      E_FacadeValueBladeattributeDesc::default_instance_,
      E_FacadeValueBladeattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueBladeattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueBladeattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeValueBladeattributeDesc));
  E_FacadeValueWingattributeDesc_descriptor_ = file->message_type(6);
  static const int E_FacadeValueWingattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueWingattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueWingattributeDesc, m_value_),
  };
  E_FacadeValueWingattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeValueWingattributeDesc_descriptor_,
      E_FacadeValueWingattributeDesc::default_instance_,
      E_FacadeValueWingattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueWingattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValueWingattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeValueWingattributeDesc));
  E_FacadeValue_descriptor_ = file->message_type(7);
  static const int E_FacadeValue_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_wingexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_treasureexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_artifactexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_bladeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_treasureattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_artifactattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_bladeattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, m_wingattribute_),
  };
  E_FacadeValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeValue_descriptor_,
      E_FacadeValue::default_instance_,
      E_FacadeValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeValue));
  Sheet_FacadeValue_descriptor_ = file->message_type(8);
  static const int Sheet_FacadeValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeValue, e_facadevalue_list_),
  };
  Sheet_FacadeValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeValue_descriptor_,
      Sheet_FacadeValue::default_instance_,
      Sheet_FacadeValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeValue));
  E_FacadeType_descriptor_ = file->message_type(9);
  static const int E_FacadeType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeType, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeType, m_soucename_),
  };
  E_FacadeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeType_descriptor_,
      E_FacadeType::default_instance_,
      E_FacadeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeType));
  Sheet_FacadeType_descriptor_ = file->message_type(10);
  static const int Sheet_FacadeType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeType, e_facadetype_list_),
  };
  Sheet_FacadeType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeType_descriptor_,
      Sheet_FacadeType::default_instance_,
      Sheet_FacadeType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeType));
  E_FacadeFragmentAttributeDesc_descriptor_ = file->message_type(11);
  static const int E_FacadeFragmentAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragmentAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragmentAttributeDesc, m_value_),
  };
  E_FacadeFragmentAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeFragmentAttributeDesc_descriptor_,
      E_FacadeFragmentAttributeDesc::default_instance_,
      E_FacadeFragmentAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragmentAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragmentAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeFragmentAttributeDesc));
  E_FacadeFragment_descriptor_ = file->message_type(12);
  static const int E_FacadeFragment_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, m_fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, m_attribute_),
  };
  E_FacadeFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeFragment_descriptor_,
      E_FacadeFragment::default_instance_,
      E_FacadeFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeFragment));
  Sheet_FacadeFragment_descriptor_ = file->message_type(13);
  static const int Sheet_FacadeFragment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeFragment, e_facadefragment_list_),
  };
  Sheet_FacadeFragment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeFragment_descriptor_,
      Sheet_FacadeFragment::default_instance_,
      Sheet_FacadeFragment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeFragment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeFragment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeFragment));
  E_FacadeChangeAttributeDesc_descriptor_ = file->message_type(14);
  static const int E_FacadeChangeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeAttributeDesc, m_value_),
  };
  E_FacadeChangeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeChangeAttributeDesc_descriptor_,
      E_FacadeChangeAttributeDesc::default_instance_,
      E_FacadeChangeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeChangeAttributeDesc));
  E_FacadeChangeActiveattributeDesc_descriptor_ = file->message_type(15);
  static const int E_FacadeChangeActiveattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeActiveattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeActiveattributeDesc, m_value_),
  };
  E_FacadeChangeActiveattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeChangeActiveattributeDesc_descriptor_,
      E_FacadeChangeActiveattributeDesc::default_instance_,
      E_FacadeChangeActiveattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeActiveattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChangeActiveattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeChangeActiveattributeDesc));
  E_FacadeChange_descriptor_ = file->message_type(16);
  static const int E_FacadeChange_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_professionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_activedesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_activationitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_activationnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_starnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_starup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_starber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_activeskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, m_activeattribute_),
  };
  E_FacadeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeChange_descriptor_,
      E_FacadeChange::default_instance_,
      E_FacadeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeChange));
  Sheet_FacadeChange_descriptor_ = file->message_type(17);
  static const int Sheet_FacadeChange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeChange, e_facadechange_list_),
  };
  Sheet_FacadeChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeChange_descriptor_,
      Sheet_FacadeChange::default_instance_,
      Sheet_FacadeChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeChange));
  E_FacadeStarupUpattributeDesc_descriptor_ = file->message_type(18);
  static const int E_FacadeStarupUpattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarupUpattributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarupUpattributeDesc, m_value_),
  };
  E_FacadeStarupUpattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeStarupUpattributeDesc_descriptor_,
      E_FacadeStarupUpattributeDesc::default_instance_,
      E_FacadeStarupUpattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarupUpattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarupUpattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeStarupUpattributeDesc));
  E_FacadeStarup_descriptor_ = file->message_type(19);
  static const int E_FacadeStarup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, m_upattributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, m_starid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, m_upattribute_),
  };
  E_FacadeStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeStarup_descriptor_,
      E_FacadeStarup::default_instance_,
      E_FacadeStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeStarup));
  Sheet_FacadeStarup_descriptor_ = file->message_type(20);
  static const int Sheet_FacadeStarup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeStarup, e_facadestarup_list_),
  };
  Sheet_FacadeStarup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeStarup_descriptor_,
      Sheet_FacadeStarup::default_instance_,
      Sheet_FacadeStarup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeStarup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeStarup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeStarup));
  E_FacadeSoulAttributeDesc_descriptor_ = file->message_type(21);
  static const int E_FacadeSoulAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulAttributeDesc, m_value_),
  };
  E_FacadeSoulAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoulAttributeDesc_descriptor_,
      E_FacadeSoulAttributeDesc::default_instance_,
      E_FacadeSoulAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoulAttributeDesc));
  E_FacadeSoul_descriptor_ = file->message_type(22);
  static const int E_FacadeSoul_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_mainskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_attributetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, m_minorskill_),
  };
  E_FacadeSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoul_descriptor_,
      E_FacadeSoul::default_instance_,
      E_FacadeSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoul));
  Sheet_FacadeSoul_descriptor_ = file->message_type(23);
  static const int Sheet_FacadeSoul_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoul, e_facadesoul_list_),
  };
  Sheet_FacadeSoul_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeSoul_descriptor_,
      Sheet_FacadeSoul::default_instance_,
      Sheet_FacadeSoul_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoul, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoul, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeSoul));
  E_FacadeSoulactiveUnlockDesc_descriptor_ = file->message_type(24);
  static const int E_FacadeSoulactiveUnlockDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactiveUnlockDesc, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactiveUnlockDesc, m_condition_),
  };
  E_FacadeSoulactiveUnlockDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoulactiveUnlockDesc_descriptor_,
      E_FacadeSoulactiveUnlockDesc::default_instance_,
      E_FacadeSoulactiveUnlockDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactiveUnlockDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactiveUnlockDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoulactiveUnlockDesc));
  E_FacadeSoulactive_descriptor_ = file->message_type(25);
  static const int E_FacadeSoulactive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactive, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactive, m_unlock_),
  };
  E_FacadeSoulactive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoulactive_descriptor_,
      E_FacadeSoulactive::default_instance_,
      E_FacadeSoulactive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulactive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoulactive));
  Sheet_FacadeSoulactive_descriptor_ = file->message_type(26);
  static const int Sheet_FacadeSoulactive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulactive, e_facadesoulactive_list_),
  };
  Sheet_FacadeSoulactive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeSoulactive_descriptor_,
      Sheet_FacadeSoulactive::default_instance_,
      Sheet_FacadeSoulactive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulactive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulactive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeSoulactive));
  E_FacadeSoullvAttributeDesc_descriptor_ = file->message_type(27);
  static const int E_FacadeSoullvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullvAttributeDesc, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullvAttributeDesc, m_value_),
  };
  E_FacadeSoullvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoullvAttributeDesc_descriptor_,
      E_FacadeSoullvAttributeDesc::default_instance_,
      E_FacadeSoullvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoullvAttributeDesc));
  E_FacadeSoullv_descriptor_ = file->message_type(28);
  static const int E_FacadeSoullv_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_soulllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_successrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_downlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, m_attribute_),
  };
  E_FacadeSoullv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoullv_descriptor_,
      E_FacadeSoullv::default_instance_,
      E_FacadeSoullv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoullv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoullv));
  Sheet_FacadeSoullv_descriptor_ = file->message_type(29);
  static const int Sheet_FacadeSoullv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoullv, e_facadesoullv_list_),
  };
  Sheet_FacadeSoullv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeSoullv_descriptor_,
      Sheet_FacadeSoullv::default_instance_,
      Sheet_FacadeSoullv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoullv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoullv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeSoullv));
  E_FacadeSoulachievement_descriptor_ = file->message_type(30);
  static const int E_FacadeSoulachievement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_soulid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, m_num_),
  };
  E_FacadeSoulachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FacadeSoulachievement_descriptor_,
      E_FacadeSoulachievement::default_instance_,
      E_FacadeSoulachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FacadeSoulachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FacadeSoulachievement));
  Sheet_FacadeSoulachievement_descriptor_ = file->message_type(31);
  static const int Sheet_FacadeSoulachievement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulachievement, e_facadesoulachievement_list_),
  };
  Sheet_FacadeSoulachievement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FacadeSoulachievement_descriptor_,
      Sheet_FacadeSoulachievement::default_instance_,
      Sheet_FacadeSoulachievement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulachievement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FacadeSoulachievement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FacadeSoulachievement));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_facade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeDisplayMaterialDesc_descriptor_, &E_FacadeDisplayMaterialDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeDisplay_descriptor_, &E_FacadeDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeDisplay_descriptor_, &Sheet_FacadeDisplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeValueTreasureattributeDesc_descriptor_, &E_FacadeValueTreasureattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeValueArtifactattributeDesc_descriptor_, &E_FacadeValueArtifactattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeValueBladeattributeDesc_descriptor_, &E_FacadeValueBladeattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeValueWingattributeDesc_descriptor_, &E_FacadeValueWingattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeValue_descriptor_, &E_FacadeValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeValue_descriptor_, &Sheet_FacadeValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeType_descriptor_, &E_FacadeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeType_descriptor_, &Sheet_FacadeType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeFragmentAttributeDesc_descriptor_, &E_FacadeFragmentAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeFragment_descriptor_, &E_FacadeFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeFragment_descriptor_, &Sheet_FacadeFragment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeChangeAttributeDesc_descriptor_, &E_FacadeChangeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeChangeActiveattributeDesc_descriptor_, &E_FacadeChangeActiveattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeChange_descriptor_, &E_FacadeChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeChange_descriptor_, &Sheet_FacadeChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeStarupUpattributeDesc_descriptor_, &E_FacadeStarupUpattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeStarup_descriptor_, &E_FacadeStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeStarup_descriptor_, &Sheet_FacadeStarup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoulAttributeDesc_descriptor_, &E_FacadeSoulAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoul_descriptor_, &E_FacadeSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeSoul_descriptor_, &Sheet_FacadeSoul::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoulactiveUnlockDesc_descriptor_, &E_FacadeSoulactiveUnlockDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoulactive_descriptor_, &E_FacadeSoulactive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeSoulactive_descriptor_, &Sheet_FacadeSoulactive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoullvAttributeDesc_descriptor_, &E_FacadeSoullvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoullv_descriptor_, &E_FacadeSoullv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeSoullv_descriptor_, &Sheet_FacadeSoullv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FacadeSoulachievement_descriptor_, &E_FacadeSoulachievement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FacadeSoulachievement_descriptor_, &Sheet_FacadeSoulachievement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_facade_2eproto() {
  delete E_FacadeDisplayMaterialDesc::default_instance_;
  delete E_FacadeDisplayMaterialDesc_reflection_;
  delete E_FacadeDisplay::default_instance_;
  delete E_FacadeDisplay_reflection_;
  delete Sheet_FacadeDisplay::default_instance_;
  delete Sheet_FacadeDisplay_reflection_;
  delete E_FacadeValueTreasureattributeDesc::default_instance_;
  delete E_FacadeValueTreasureattributeDesc_reflection_;
  delete E_FacadeValueArtifactattributeDesc::default_instance_;
  delete E_FacadeValueArtifactattributeDesc_reflection_;
  delete E_FacadeValueBladeattributeDesc::default_instance_;
  delete E_FacadeValueBladeattributeDesc_reflection_;
  delete E_FacadeValueWingattributeDesc::default_instance_;
  delete E_FacadeValueWingattributeDesc_reflection_;
  delete E_FacadeValue::default_instance_;
  delete E_FacadeValue_reflection_;
  delete Sheet_FacadeValue::default_instance_;
  delete Sheet_FacadeValue_reflection_;
  delete E_FacadeType::default_instance_;
  delete E_FacadeType_reflection_;
  delete Sheet_FacadeType::default_instance_;
  delete Sheet_FacadeType_reflection_;
  delete E_FacadeFragmentAttributeDesc::default_instance_;
  delete E_FacadeFragmentAttributeDesc_reflection_;
  delete E_FacadeFragment::default_instance_;
  delete E_FacadeFragment_reflection_;
  delete Sheet_FacadeFragment::default_instance_;
  delete Sheet_FacadeFragment_reflection_;
  delete E_FacadeChangeAttributeDesc::default_instance_;
  delete E_FacadeChangeAttributeDesc_reflection_;
  delete E_FacadeChangeActiveattributeDesc::default_instance_;
  delete E_FacadeChangeActiveattributeDesc_reflection_;
  delete E_FacadeChange::default_instance_;
  delete E_FacadeChange_reflection_;
  delete Sheet_FacadeChange::default_instance_;
  delete Sheet_FacadeChange_reflection_;
  delete E_FacadeStarupUpattributeDesc::default_instance_;
  delete E_FacadeStarupUpattributeDesc_reflection_;
  delete E_FacadeStarup::default_instance_;
  delete E_FacadeStarup_reflection_;
  delete Sheet_FacadeStarup::default_instance_;
  delete Sheet_FacadeStarup_reflection_;
  delete E_FacadeSoulAttributeDesc::default_instance_;
  delete E_FacadeSoulAttributeDesc_reflection_;
  delete E_FacadeSoul::default_instance_;
  delete E_FacadeSoul_reflection_;
  delete Sheet_FacadeSoul::default_instance_;
  delete Sheet_FacadeSoul_reflection_;
  delete E_FacadeSoulactiveUnlockDesc::default_instance_;
  delete E_FacadeSoulactiveUnlockDesc_reflection_;
  delete E_FacadeSoulactive::default_instance_;
  delete E_FacadeSoulactive_reflection_;
  delete Sheet_FacadeSoulactive::default_instance_;
  delete Sheet_FacadeSoulactive_reflection_;
  delete E_FacadeSoullvAttributeDesc::default_instance_;
  delete E_FacadeSoullvAttributeDesc_reflection_;
  delete E_FacadeSoullv::default_instance_;
  delete E_FacadeSoullv_reflection_;
  delete Sheet_FacadeSoullv::default_instance_;
  delete Sheet_FacadeSoullv_reflection_;
  delete E_FacadeSoulachievement::default_instance_;
  delete E_FacadeSoulachievement_reflection_;
  delete Sheet_FacadeSoulachievement::default_instance_;
  delete Sheet_FacadeSoulachievement_reflection_;
}

void protobuf_AddDesc_facade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014facade.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"Q\n\033E_FacadeDisplayMaterialDesc\022\024"
    "\n\004m_id\030\001 \001(\003B\006\302\377\024\002ID\022\034\n\005m_exp\030\002 \001(\005B\r\302\377\024"
    "\t\347\273\217\351\252\214\345\200\274\"\264\003\n\017E_FacadeDisplay\022\032\n\004m_id\030\001"
    " \001(\003B\014\302\377\024\010\345\244\226\350\247\202ID\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006"
    "\345\244\247\347\261\273\022(\n\nm_resource\030\003 \001(\tB\024\302\377\024\014\350\265\204\346\272\220\345\275"
    "\242\350\261\241\220\301\024<\022\036\n\006m_name\030\004 \001(\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<"
    "\022*\n\014m_activedesc\030\005 \001(\tB\024\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260"
    "\220\301\024d\022(\n\016m_professionid\030\006 \001(\tB\020\302\377\024\010\350\201\214\344\270\232"
    "ID\220\301\024<\022)\n\tm_skillid\030\007 \001(\tB\026\302\377\024\016\350\247\243\351\224\201\346\212\200"
    "\350\203\275ID\220\301\024P\022\037\n\tm_souliid\030\010 \001(\005B\014\302\377\024\010\345\231\250\351\255\202"
    "ID\022O\n\nm_material\030\t \003(\0132%.proto_ff.E_Faca"
    "deDisplayMaterialDescB\024\302\377\024\014\350\277\233\351\230\266\346\235\220\346\226\231\210"
    "\301\024\003\022,\n\014m_fragmentid\030\n \003(\003B\026\302\377\024\016\345\205\263\350\201\224\347\242\216"
    "\347\211\207ID\210\301\024\003\"T\n\023Sheet_FacadeDisplay\022=\n\024E_Fa"
    "cadeDisplay_List\030\001 \003(\0132\031.proto_ff.E_Faca"
    "deDisplayB\004\210\301\024\024\"V\n\"E_FacadeValueTreasure"
    "attributeDesc\022\026\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n"
    "\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"V\n\"E_FacadeValue"
    "ArtifactattributeDesc\022\026\n\006m_type\030\001 \001(\005B\006\302"
    "\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"S\n\037E_Fac"
    "adeValueBladeattributeDesc\022\026\n\006m_type\030\001 \001"
    "(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"R\n\036"
    "E_FacadeValueWingattributeDesc\022\026\n\006m_type"
    "\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274"
    "\"\354\004\n\rE_FacadeValue\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255"
    "\211\347\272\247\022)\n\tm_wingexp\030\002 \001(\003B\026\302\377\024\022\347\277\205\350\206\200\345\215\207\347\272"
    "\247\347\273\217\351\252\214\022-\n\rm_treasureexp\030\003 \001(\003B\026\302\377\024\022\345\256\235\347"
    "\211\251\345\215\207\347\272\247\347\273\217\351\252\214\022-\n\rm_artifactexp\030\004 \001(\003B\026\302"
    "\377\024\022\347\245\236\345\231\250\345\215\207\347\272\247\347\273\217\351\252\214\022*\n\nm_bladeexp\030\005 \001("
    "\003B\026\302\377\024\022\345\211\221\347\201\265\345\215\207\347\272\247\347\273\217\351\252\214\022e\n\023m_treasurea"
    "ttribute\030\006 \003(\0132,.proto_ff.E_FacadeValueT"
    "reasureattributeDescB\032\302\377\024\022\345\256\235\345\205\267\345\237\272\347\241\200\345\261"
    "\236\346\200\247\210\301\024\005\022e\n\023m_artifactattribute\030\007 \003(\0132,."
    "proto_ff.E_FacadeValueArtifactattributeD"
    "escB\032\302\377\024\022\347\245\236\345\231\250\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\006\022_\n\020m_bla"
    "deattribute\030\010 \003(\0132).proto_ff.E_FacadeVal"
    "ueBladeattributeDescB\032\302\377\024\022\347\245\236\345\231\250\345\237\272\347\241\200\345\261"
    "\236\346\200\247\210\301\024\006\022]\n\017m_wingattribute\030\t \003(\0132(.prot"
    "o_ff.E_FacadeValueWingattributeDescB\032\302\377\024"
    "\022\347\277\205\350\206\200\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\004\"O\n\021Sheet_FacadeV"
    "alue\022:\n\022E_FacadeValue_List\030\001 \003(\0132\027.proto"
    "_ff.E_FacadeValueB\005\210\301\024\364\003\"U\n\014E_FacadeType"
    "\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\347\261\273\345\236\213id\022)\n\013m_soucen"
    "ame\030\002 \001(\tB\024\302\377\024\014\350\265\204\346\272\220\345\220\215\347\247\260\220\301\024<\"K\n\020Sheet"
    "_FacadeType\0227\n\021E_FacadeType_List\030\001 \003(\0132\026"
    ".proto_ff.E_FacadeTypeB\004\210\301\024\024\"Q\n\035E_Facade"
    "FragmentAttributeDesc\022\026\n\006m_type\030\001 \001(\005B\006\302"
    "\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\323\001\n\020E_Fa"
    "cadeFragment\022\"\n\014m_fragmentid\030\001 \001(\003B\014\302\377\024\010"
    "\347\242\216\347\211\207ID\022\034\n\006m_item\030\002 \001(\003B\014\302\377\024\010\347\211\251\345\223\201ID\022)"
    "\n\tm_itemnum\030\003 \001(\005B\026\302\377\024\022\347\242\216\347\211\207\344\275\277\347\224\250\344\270\212\351\231"
    "\220\022R\n\013m_attribute\030\004 \003(\0132\'.proto_ff.E_Faca"
    "deFragmentAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200"
    "\247\210\301\024\003\"W\n\024Sheet_FacadeFragment\022\?\n\025E_Facad"
    "eFragment_List\030\001 \003(\0132\032.proto_ff.E_Facade"
    "FragmentB\004\210\301\024\024\"O\n\033E_FacadeChangeAttribut"
    "eDesc\022\026\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value"
    "\030\002 \001(\005B\007\302\377\024\003\345\200\274\"Y\n!E_FacadeChangeActivea"
    "ttributeDesc\022\032\n\006m_type\030\001 \001(\005B\n\302\377\024\006\347\261\273\345\236\213"
    "\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\260\006\n\016E_FacadeC"
    "hange\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\345\244\226\350\247\202ID\022\032\n\006m_t"
    "ype\030\002 \001(\005B\n\302\377\024\006\345\244\247\347\261\273\022(\n\nm_resource\030\003 \001("
    "\tB\024\302\377\024\014\350\265\204\346\272\220\345\275\242\350\261\241\220\301\024<\022(\n\016m_professioni"
    "d\030\004 \001(\tB\020\302\377\024\010\350\201\214\344\270\232ID\220\301\024<\022\036\n\006m_name\030\005 \001("
    "\tB\016\302\377\024\006\345\220\215\345\255\227\220\301\024<\022+\n\014m_activedesc\030\006 \001(\tB"
    "\025\302\377\024\014\346\277\200\346\264\273\346\217\217\350\277\260\220\301\024\240\001\022\035\n\tm_quality\030\007 \001("
    "\005B\n\302\377\024\006\345\223\201\350\264\250\022,\n\020m_activationitem\030\010 \001(\003B"
    "\022\302\377\024\016\346\277\200\346\264\273\351\201\223\345\205\267ID\022/\n\017m_activationnum\030\t"
    " \001(\005B\026\302\377\024\022\346\277\200\346\264\273\351\201\223\345\205\267\346\225\260\351\207\217\022$\n\010m_starid"
    "\030\n \001(\003B\022\302\377\024\016\345\215\207\346\230\237\351\201\223\345\205\267id\022.\n\tm_starnum\030"
    "\013 \001(\tB\033\302\377\024\022\345\215\207\346\230\237\351\201\223\345\205\267\346\225\260\351\207\217\220\301\024\254\002\022(\n\010m_"
    "starup\030\014 \001(\005B\026\302\377\024\022\345\215\207\346\230\237\347\255\211\347\272\247\344\270\212\351\231\220\022>\n\t"
    "m_starber\030\r \001(\005B+\302\377\024\'\346\257\217\346\254\241\345\215\207\346\230\237\345\261\236\346\200\247\345"
    "\242\236\345\212\240\347\232\204\344\270\207\345\210\206\346\257\224\345\200\274\022.\n\017m_upattributeid\030"
    "\016 \001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022-\n\rm_active"
    "skill\030\017 \001(\005B\026\302\377\024\022\346\277\200\346\264\273\350\216\267\345\276\227\346\212\200\350\203\275\022P\n\013m"
    "_attribute\030\020 \003(\0132%.proto_ff.E_FacadeChan"
    "geAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\005\022V\n"
    "\021m_activeattribute\030\021 \003(\0132+.proto_ff.E_Fa"
    "cadeChangeActiveattributeDescB\016\302\377\024\006\345\261\236\346\200"
    "\247\210\301\024\006\"Q\n\022Sheet_FacadeChange\022;\n\023E_FacadeC"
    "hange_List\030\001 \003(\0132\030.proto_ff.E_FacadeChan"
    "geB\004\210\301\024<\"Q\n\035E_FacadeStarupUpattributeDes"
    "c\022\026\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001"
    "(\005B\007\302\377\024\003\345\200\274\"\361\001\n\016E_FacadeStarup\022\032\n\004m_id\030\001"
    " \001(\005B\014\302\377\024\010\345\224\257\344\270\200ID\022.\n\017m_upattributeid\030\002 "
    "\001(\003B\025\302\377\024\021\345\215\207\346\230\237\345\261\236\346\200\247\347\273\204ID\022\034\n\010m_starid\030\003"
    " \001(\005B\n\302\377\024\006\346\230\237\347\272\247\022\037\n\tm_skillid\030\004 \001(\005B\014\302\377\024"
    "\010\346\212\200\350\203\275id\022T\n\rm_upattribute\030\005 \003(\0132\'.proto"
    "_ff.E_FacadeStarupUpattributeDescB\024\302\377\024\014\346"
    "\277\200\346\264\273\345\261\236\346\200\247\210\301\024\003\"Q\n\022Sheet_FacadeStarup\022;\n"
    "\023E_FacadeStarup_List\030\001 \003(\0132\030.proto_ff.E_"
    "FacadeStarupB\004\210\301\024(\"M\n\031E_FacadeSoulAttrib"
    "uteDesc\022\026\n\006m_type\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_val"
    "ue\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\261\002\n\014E_FacadeSoul\022\032\n\004m_"
    "id\030\001 \001(\003B\014\302\377\024\010\345\231\250\351\255\202ID\022)\n\014m_rechargeid\030\002"
    " \001(\005B\023\302\377\024\017\344\273\267\346\240\274\350\256\241\350\264\271\347\202\271\022$\n\013m_mainskill"
    "\030\003 \001(\005B\017\302\377\024\013\344\270\273\346\212\200\350\203\275ID\0223\n\017m_attributety"
    "pe\030\004 \001(\tB\032\302\377\024\022\345\215\207\347\272\247\345\261\236\346\200\247\347\261\273\345\236\213\220\301\024<\022T\n\013"
    "m_attribute\030\005 \003(\0132#.proto_ff.E_FacadeSou"
    "lAttributeDescB\032\302\377\024\022\346\277\200\346\264\273\345\237\272\347\241\200\345\261\236\346\200\247\210\301"
    "\024\004\022)\n\014m_minorskill\030\006 \003(\005B\023\302\377\024\013\345\211\257\346\212\200\350\203\275I"
    "D\210\301\024\010\"K\n\020Sheet_FacadeSoul\0227\n\021E_FacadeSou"
    "l_List\030\001 \003(\0132\026.proto_ff.E_FacadeSoulB\004\210\301"
    "\024\024\"a\n\034E_FacadeSoulactiveUnlockDesc\022 \n\010m_"
    "parama\030\001 \001(\tB\016\302\377\024\006\345\217\202\346\225\260\220\301\024<\022\037\n\013m_condit"
    "ion\030\002 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\"z\n\022E_FacadeSoulact"
    "ive\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\346\212\200\350\203\275ID\022H\n\010m_unl"
    "ock\030\002 \003(\0132&.proto_ff.E_FacadeSoulactiveU"
    "nlockDescB\016\302\377\024\006\350\247\243\351\224\201\210\301\024\002\"]\n\026Sheet_Facad"
    "eSoulactive\022C\n\027E_FacadeSoulactive_List\030\001"
    " \003(\0132\034.proto_ff.E_FacadeSoulactiveB\004\210\301\024("
    "\"O\n\033E_FacadeSoullvAttributeDesc\022\026\n\006m_typ"
    "e\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\007m_value\030\002 \001(\005B\007\302\377\024\003\345\200"
    "\274\"\314\002\n\016E_FacadeSoullv\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002"
    "id\022\035\n\tm_soulllv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\036\n\010m_s"
    "oulid\030\003 \001(\005B\014\302\377\024\010\345\231\250\351\255\202ID\022\"\n\010m_itemid\030\004 "
    "\001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201\223\345\205\267\022\037\n\005m_num\030\005 \001(\005B\020\302\377"
    "\024\014\346\266\210\350\200\227\346\225\260\351\207\217\022*\n\rm_successrate\030\006 \001(\005B\023\302"
    "\377\024\017\345\215\207\347\272\247\346\210\220\345\212\237\347\216\207\022\"\n\010m_downlv\030\007 \001(\005B\020\302\377"
    "\024\014\346\230\257\345\220\246\346\216\211\347\272\247\022P\n\013m_attribute\030\010 \003(\0132%.pr"
    "oto_ff.E_FacadeSoullvAttributeDescB\024\302\377\024\014"
    "\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\007\"R\n\022Sheet_FacadeSoullv\022<"
    "\n\023E_FacadeSoullv_List\030\001 \003(\0132\030.proto_ff.E"
    "_FacadeSoullvB\005\210\301\024\214\001\"\327\001\n\027E_FacadeSoulach"
    "ievement\022\032\n\004m_id\030\001 \001(\003B\014\302\377\024\010\346\210\220\345\260\261id\022\036\n\010"
    "m_soulid\030\002 \001(\005B\014\302\377\024\010\345\231\250\351\255\202ID\022\032\n\006m_type\030\003"
    " \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\037\n\010m_parama\030\004 \001(\005B\r\302\377\024\t"
    "\345\275\261\345\223\215\345\200\274\022\"\n\010m_itemid\030\005 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\351"
    "\201\223\345\205\267\022\037\n\005m_num\030\006 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\346\225\260\351\207\217\"m"
    "\n\033Sheet_FacadeSoulachievement\022N\n\034E_Facad"
    "eSoulachievement_List\030\001 \003(\0132!.proto_ff.E"
    "_FacadeSoulachievementB\005\210\301\024\240\001", 5349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "facade.proto", &protobuf_RegisterTypes);
  E_FacadeDisplayMaterialDesc::default_instance_ = new E_FacadeDisplayMaterialDesc();
  E_FacadeDisplay::default_instance_ = new E_FacadeDisplay();
  Sheet_FacadeDisplay::default_instance_ = new Sheet_FacadeDisplay();
  E_FacadeValueTreasureattributeDesc::default_instance_ = new E_FacadeValueTreasureattributeDesc();
  E_FacadeValueArtifactattributeDesc::default_instance_ = new E_FacadeValueArtifactattributeDesc();
  E_FacadeValueBladeattributeDesc::default_instance_ = new E_FacadeValueBladeattributeDesc();
  E_FacadeValueWingattributeDesc::default_instance_ = new E_FacadeValueWingattributeDesc();
  E_FacadeValue::default_instance_ = new E_FacadeValue();
  Sheet_FacadeValue::default_instance_ = new Sheet_FacadeValue();
  E_FacadeType::default_instance_ = new E_FacadeType();
  Sheet_FacadeType::default_instance_ = new Sheet_FacadeType();
  E_FacadeFragmentAttributeDesc::default_instance_ = new E_FacadeFragmentAttributeDesc();
  E_FacadeFragment::default_instance_ = new E_FacadeFragment();
  Sheet_FacadeFragment::default_instance_ = new Sheet_FacadeFragment();
  E_FacadeChangeAttributeDesc::default_instance_ = new E_FacadeChangeAttributeDesc();
  E_FacadeChangeActiveattributeDesc::default_instance_ = new E_FacadeChangeActiveattributeDesc();
  E_FacadeChange::default_instance_ = new E_FacadeChange();
  Sheet_FacadeChange::default_instance_ = new Sheet_FacadeChange();
  E_FacadeStarupUpattributeDesc::default_instance_ = new E_FacadeStarupUpattributeDesc();
  E_FacadeStarup::default_instance_ = new E_FacadeStarup();
  Sheet_FacadeStarup::default_instance_ = new Sheet_FacadeStarup();
  E_FacadeSoulAttributeDesc::default_instance_ = new E_FacadeSoulAttributeDesc();
  E_FacadeSoul::default_instance_ = new E_FacadeSoul();
  Sheet_FacadeSoul::default_instance_ = new Sheet_FacadeSoul();
  E_FacadeSoulactiveUnlockDesc::default_instance_ = new E_FacadeSoulactiveUnlockDesc();
  E_FacadeSoulactive::default_instance_ = new E_FacadeSoulactive();
  Sheet_FacadeSoulactive::default_instance_ = new Sheet_FacadeSoulactive();
  E_FacadeSoullvAttributeDesc::default_instance_ = new E_FacadeSoullvAttributeDesc();
  E_FacadeSoullv::default_instance_ = new E_FacadeSoullv();
  Sheet_FacadeSoullv::default_instance_ = new Sheet_FacadeSoullv();
  E_FacadeSoulachievement::default_instance_ = new E_FacadeSoulachievement();
  Sheet_FacadeSoulachievement::default_instance_ = new Sheet_FacadeSoulachievement();
  E_FacadeDisplayMaterialDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeDisplay::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeDisplay::default_instance_->InitAsDefaultInstance();
  E_FacadeValueTreasureattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeValueArtifactattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeValueBladeattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeValueWingattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeValue::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeValue::default_instance_->InitAsDefaultInstance();
  E_FacadeType::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeType::default_instance_->InitAsDefaultInstance();
  E_FacadeFragmentAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeFragment::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeFragment::default_instance_->InitAsDefaultInstance();
  E_FacadeChangeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeChangeActiveattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeChange::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeChange::default_instance_->InitAsDefaultInstance();
  E_FacadeStarupUpattributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeStarup::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeStarup::default_instance_->InitAsDefaultInstance();
  E_FacadeSoulAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeSoul::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeSoul::default_instance_->InitAsDefaultInstance();
  E_FacadeSoulactiveUnlockDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeSoulactive::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeSoulactive::default_instance_->InitAsDefaultInstance();
  E_FacadeSoullvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_FacadeSoullv::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeSoullv::default_instance_->InitAsDefaultInstance();
  E_FacadeSoulachievement::default_instance_->InitAsDefaultInstance();
  Sheet_FacadeSoulachievement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_facade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_facade_2eproto {
  StaticDescriptorInitializer_facade_2eproto() {
    protobuf_AddDesc_facade_2eproto();
  }
} static_descriptor_initializer_facade_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FacadeDisplayMaterialDesc::kMIdFieldNumber;
const int E_FacadeDisplayMaterialDesc::kMExpFieldNumber;
#endif  // !_MSC_VER

E_FacadeDisplayMaterialDesc::E_FacadeDisplayMaterialDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeDisplayMaterialDesc::InitAsDefaultInstance() {
}

E_FacadeDisplayMaterialDesc::E_FacadeDisplayMaterialDesc(const E_FacadeDisplayMaterialDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeDisplayMaterialDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeDisplayMaterialDesc::~E_FacadeDisplayMaterialDesc() {
  SharedDtor();
}

void E_FacadeDisplayMaterialDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeDisplayMaterialDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeDisplayMaterialDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeDisplayMaterialDesc_descriptor_;
}

const E_FacadeDisplayMaterialDesc& E_FacadeDisplayMaterialDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeDisplayMaterialDesc* E_FacadeDisplayMaterialDesc::default_instance_ = NULL;

E_FacadeDisplayMaterialDesc* E_FacadeDisplayMaterialDesc::New() const {
  return new E_FacadeDisplayMaterialDesc;
}

void E_FacadeDisplayMaterialDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeDisplayMaterialDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeDisplayMaterialDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeDisplayMaterialDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeDisplayMaterialDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeDisplayMaterialDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeDisplayMaterialDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeDisplayMaterialDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeDisplayMaterialDesc::MergeFrom(const E_FacadeDisplayMaterialDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeDisplayMaterialDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeDisplayMaterialDesc::CopyFrom(const E_FacadeDisplayMaterialDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeDisplayMaterialDesc::IsInitialized() const {

  return true;
}

void E_FacadeDisplayMaterialDesc::Swap(E_FacadeDisplayMaterialDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeDisplayMaterialDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeDisplayMaterialDesc_descriptor_;
  metadata.reflection = E_FacadeDisplayMaterialDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeDisplay::kMIdFieldNumber;
const int E_FacadeDisplay::kMTypeFieldNumber;
const int E_FacadeDisplay::kMResourceFieldNumber;
const int E_FacadeDisplay::kMNameFieldNumber;
const int E_FacadeDisplay::kMActivedescFieldNumber;
const int E_FacadeDisplay::kMProfessionidFieldNumber;
const int E_FacadeDisplay::kMSkillidFieldNumber;
const int E_FacadeDisplay::kMSouliidFieldNumber;
const int E_FacadeDisplay::kMMaterialFieldNumber;
const int E_FacadeDisplay::kMFragmentidFieldNumber;
#endif  // !_MSC_VER

E_FacadeDisplay::E_FacadeDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeDisplay::InitAsDefaultInstance() {
}

E_FacadeDisplay::E_FacadeDisplay(const E_FacadeDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeDisplay::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_professionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_skillid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_souliid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeDisplay::~E_FacadeDisplay() {
  SharedDtor();
}

void E_FacadeDisplay::SharedDtor() {
  if (m_resource_ != &::google::protobuf::internal::kEmptyString) {
    delete m_resource_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activedesc_;
  }
  if (m_professionid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_professionid_;
  }
  if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillid_;
  }
  if (this != default_instance_) {
  }
}

void E_FacadeDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeDisplay_descriptor_;
}

const E_FacadeDisplay& E_FacadeDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeDisplay* E_FacadeDisplay::default_instance_ = NULL;

E_FacadeDisplay* E_FacadeDisplay::New() const {
  return new E_FacadeDisplay;
}

void E_FacadeDisplay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    if (has_m_resource()) {
      if (m_resource_ != &::google::protobuf::internal::kEmptyString) {
        m_resource_->clear();
      }
    }
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_activedesc()) {
      if (m_activedesc_ != &::google::protobuf::internal::kEmptyString) {
        m_activedesc_->clear();
      }
    }
    if (has_m_professionid()) {
      if (m_professionid_ != &::google::protobuf::internal::kEmptyString) {
        m_professionid_->clear();
      }
    }
    if (has_m_skillid()) {
      if (m_skillid_ != &::google::protobuf::internal::kEmptyString) {
        m_skillid_->clear();
      }
    }
    m_souliid_ = 0;
  }
  m_material_.Clear();
  m_fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_resource;
        break;
      }

      // optional string m_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_resource().data(), this->m_resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_name;
        break;
      }

      // optional string m_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_activedesc;
        break;
      }

      // optional string m_activedesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activedesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activedesc().data(), this->m_activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_professionid;
        break;
      }

      // optional string m_professionid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_professionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_professionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_professionid().data(), this->m_professionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_skillid;
        break;
      }

      // optional string m_skillid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillid().data(), this->m_skillid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_souliid;
        break;
      }

      // optional int32 m_souliid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_souliid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_souliid_)));
          set_has_m_souliid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_material;
        break;
      }

      // repeated .proto_ff.E_FacadeDisplayMaterialDesc m_material = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_material()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_material;
        if (input->ExpectTag(80)) goto parse_m_fragmentid;
        break;
      }

      // repeated int64 m_fragmentid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fragmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 80, input, this->mutable_m_fragmentid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_fragmentid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_fragmentid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_resource = 3;
  if (has_m_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_resource().data(), this->m_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_resource(), output);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_name(), output);
  }

  // optional string m_activedesc = 5;
  if (has_m_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activedesc().data(), this->m_activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_activedesc(), output);
  }

  // optional string m_professionid = 6;
  if (has_m_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionid().data(), this->m_professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_professionid(), output);
  }

  // optional string m_skillid = 7;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_skillid(), output);
  }

  // optional int32 m_souliid = 8;
  if (has_m_souliid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_souliid(), output);
  }

  // repeated .proto_ff.E_FacadeDisplayMaterialDesc m_material = 9;
  for (int i = 0; i < this->m_material_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_material(i), output);
  }

  // repeated int64 m_fragmentid = 10;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      10, this->m_fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_resource = 3;
  if (has_m_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_resource().data(), this->m_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_resource(), target);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_name(), target);
  }

  // optional string m_activedesc = 5;
  if (has_m_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activedesc().data(), this->m_activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_activedesc(), target);
  }

  // optional string m_professionid = 6;
  if (has_m_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionid().data(), this->m_professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_professionid(), target);
  }

  // optional string m_skillid = 7;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillid().data(), this->m_skillid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_skillid(), target);
  }

  // optional int32 m_souliid = 8;
  if (has_m_souliid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_souliid(), target);
  }

  // repeated .proto_ff.E_FacadeDisplayMaterialDesc m_material = 9;
  for (int i = 0; i < this->m_material_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_material(i), target);
  }

  // repeated int64 m_fragmentid = 10;
  for (int i = 0; i < this->m_fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(10, this->m_fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeDisplay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_resource = 3;
    if (has_m_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_resource());
    }

    // optional string m_name = 4;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional string m_activedesc = 5;
    if (has_m_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activedesc());
    }

    // optional string m_professionid = 6;
    if (has_m_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_professionid());
    }

    // optional string m_skillid = 7;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillid());
    }

    // optional int32 m_souliid = 8;
    if (has_m_souliid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_souliid());
    }

  }
  // repeated .proto_ff.E_FacadeDisplayMaterialDesc m_material = 9;
  total_size += 1 * this->m_material_size();
  for (int i = 0; i < this->m_material_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_material(i));
  }

  // repeated int64 m_fragmentid = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_fragmentid(i));
    }
    total_size += 1 * this->m_fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeDisplay::MergeFrom(const E_FacadeDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_material_.MergeFrom(from.m_material_);
  m_fragmentid_.MergeFrom(from.m_fragmentid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_resource()) {
      set_m_resource(from.m_resource());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_activedesc()) {
      set_m_activedesc(from.m_activedesc());
    }
    if (from.has_m_professionid()) {
      set_m_professionid(from.m_professionid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_souliid()) {
      set_m_souliid(from.m_souliid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeDisplay::CopyFrom(const E_FacadeDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeDisplay::IsInitialized() const {

  return true;
}

void E_FacadeDisplay::Swap(E_FacadeDisplay* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_resource_, other->m_resource_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_activedesc_, other->m_activedesc_);
    std::swap(m_professionid_, other->m_professionid_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_souliid_, other->m_souliid_);
    m_material_.Swap(&other->m_material_);
    m_fragmentid_.Swap(&other->m_fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeDisplay_descriptor_;
  metadata.reflection = E_FacadeDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeDisplay::kEFacadeDisplayListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeDisplay::Sheet_FacadeDisplay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeDisplay::InitAsDefaultInstance() {
}

Sheet_FacadeDisplay::Sheet_FacadeDisplay(const Sheet_FacadeDisplay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeDisplay::~Sheet_FacadeDisplay() {
  SharedDtor();
}

void Sheet_FacadeDisplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeDisplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeDisplay_descriptor_;
}

const Sheet_FacadeDisplay& Sheet_FacadeDisplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeDisplay* Sheet_FacadeDisplay::default_instance_ = NULL;

Sheet_FacadeDisplay* Sheet_FacadeDisplay::New() const {
  return new Sheet_FacadeDisplay;
}

void Sheet_FacadeDisplay::Clear() {
  e_facadedisplay_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeDisplay E_FacadeDisplay_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeDisplay_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadedisplay_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeDisplay_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeDisplay E_FacadeDisplay_List = 1;
  for (int i = 0; i < this->e_facadedisplay_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadedisplay_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeDisplay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeDisplay E_FacadeDisplay_List = 1;
  for (int i = 0; i < this->e_facadedisplay_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadedisplay_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeDisplay::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeDisplay E_FacadeDisplay_List = 1;
  total_size += 1 * this->e_facadedisplay_list_size();
  for (int i = 0; i < this->e_facadedisplay_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadedisplay_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeDisplay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeDisplay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeDisplay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeDisplay::MergeFrom(const Sheet_FacadeDisplay& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadedisplay_list_.MergeFrom(from.e_facadedisplay_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeDisplay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeDisplay::CopyFrom(const Sheet_FacadeDisplay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeDisplay::IsInitialized() const {

  return true;
}

void Sheet_FacadeDisplay::Swap(Sheet_FacadeDisplay* other) {
  if (other != this) {
    e_facadedisplay_list_.Swap(&other->e_facadedisplay_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeDisplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeDisplay_descriptor_;
  metadata.reflection = Sheet_FacadeDisplay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeValueTreasureattributeDesc::kMTypeFieldNumber;
const int E_FacadeValueTreasureattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeValueTreasureattributeDesc::E_FacadeValueTreasureattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeValueTreasureattributeDesc::InitAsDefaultInstance() {
}

E_FacadeValueTreasureattributeDesc::E_FacadeValueTreasureattributeDesc(const E_FacadeValueTreasureattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeValueTreasureattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeValueTreasureattributeDesc::~E_FacadeValueTreasureattributeDesc() {
  SharedDtor();
}

void E_FacadeValueTreasureattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeValueTreasureattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeValueTreasureattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeValueTreasureattributeDesc_descriptor_;
}

const E_FacadeValueTreasureattributeDesc& E_FacadeValueTreasureattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeValueTreasureattributeDesc* E_FacadeValueTreasureattributeDesc::default_instance_ = NULL;

E_FacadeValueTreasureattributeDesc* E_FacadeValueTreasureattributeDesc::New() const {
  return new E_FacadeValueTreasureattributeDesc;
}

void E_FacadeValueTreasureattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeValueTreasureattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeValueTreasureattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeValueTreasureattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeValueTreasureattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeValueTreasureattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeValueTreasureattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeValueTreasureattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeValueTreasureattributeDesc::MergeFrom(const E_FacadeValueTreasureattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeValueTreasureattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeValueTreasureattributeDesc::CopyFrom(const E_FacadeValueTreasureattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeValueTreasureattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeValueTreasureattributeDesc::Swap(E_FacadeValueTreasureattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeValueTreasureattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeValueTreasureattributeDesc_descriptor_;
  metadata.reflection = E_FacadeValueTreasureattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeValueArtifactattributeDesc::kMTypeFieldNumber;
const int E_FacadeValueArtifactattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeValueArtifactattributeDesc::E_FacadeValueArtifactattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeValueArtifactattributeDesc::InitAsDefaultInstance() {
}

E_FacadeValueArtifactattributeDesc::E_FacadeValueArtifactattributeDesc(const E_FacadeValueArtifactattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeValueArtifactattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeValueArtifactattributeDesc::~E_FacadeValueArtifactattributeDesc() {
  SharedDtor();
}

void E_FacadeValueArtifactattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeValueArtifactattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeValueArtifactattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeValueArtifactattributeDesc_descriptor_;
}

const E_FacadeValueArtifactattributeDesc& E_FacadeValueArtifactattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeValueArtifactattributeDesc* E_FacadeValueArtifactattributeDesc::default_instance_ = NULL;

E_FacadeValueArtifactattributeDesc* E_FacadeValueArtifactattributeDesc::New() const {
  return new E_FacadeValueArtifactattributeDesc;
}

void E_FacadeValueArtifactattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeValueArtifactattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeValueArtifactattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeValueArtifactattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeValueArtifactattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeValueArtifactattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeValueArtifactattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeValueArtifactattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeValueArtifactattributeDesc::MergeFrom(const E_FacadeValueArtifactattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeValueArtifactattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeValueArtifactattributeDesc::CopyFrom(const E_FacadeValueArtifactattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeValueArtifactattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeValueArtifactattributeDesc::Swap(E_FacadeValueArtifactattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeValueArtifactattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeValueArtifactattributeDesc_descriptor_;
  metadata.reflection = E_FacadeValueArtifactattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeValueBladeattributeDesc::kMTypeFieldNumber;
const int E_FacadeValueBladeattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeValueBladeattributeDesc::E_FacadeValueBladeattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeValueBladeattributeDesc::InitAsDefaultInstance() {
}

E_FacadeValueBladeattributeDesc::E_FacadeValueBladeattributeDesc(const E_FacadeValueBladeattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeValueBladeattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeValueBladeattributeDesc::~E_FacadeValueBladeattributeDesc() {
  SharedDtor();
}

void E_FacadeValueBladeattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeValueBladeattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeValueBladeattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeValueBladeattributeDesc_descriptor_;
}

const E_FacadeValueBladeattributeDesc& E_FacadeValueBladeattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeValueBladeattributeDesc* E_FacadeValueBladeattributeDesc::default_instance_ = NULL;

E_FacadeValueBladeattributeDesc* E_FacadeValueBladeattributeDesc::New() const {
  return new E_FacadeValueBladeattributeDesc;
}

void E_FacadeValueBladeattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeValueBladeattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeValueBladeattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeValueBladeattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeValueBladeattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeValueBladeattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeValueBladeattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeValueBladeattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeValueBladeattributeDesc::MergeFrom(const E_FacadeValueBladeattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeValueBladeattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeValueBladeattributeDesc::CopyFrom(const E_FacadeValueBladeattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeValueBladeattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeValueBladeattributeDesc::Swap(E_FacadeValueBladeattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeValueBladeattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeValueBladeattributeDesc_descriptor_;
  metadata.reflection = E_FacadeValueBladeattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeValueWingattributeDesc::kMTypeFieldNumber;
const int E_FacadeValueWingattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeValueWingattributeDesc::E_FacadeValueWingattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeValueWingattributeDesc::InitAsDefaultInstance() {
}

E_FacadeValueWingattributeDesc::E_FacadeValueWingattributeDesc(const E_FacadeValueWingattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeValueWingattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeValueWingattributeDesc::~E_FacadeValueWingattributeDesc() {
  SharedDtor();
}

void E_FacadeValueWingattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeValueWingattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeValueWingattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeValueWingattributeDesc_descriptor_;
}

const E_FacadeValueWingattributeDesc& E_FacadeValueWingattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeValueWingattributeDesc* E_FacadeValueWingattributeDesc::default_instance_ = NULL;

E_FacadeValueWingattributeDesc* E_FacadeValueWingattributeDesc::New() const {
  return new E_FacadeValueWingattributeDesc;
}

void E_FacadeValueWingattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeValueWingattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeValueWingattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeValueWingattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeValueWingattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeValueWingattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeValueWingattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeValueWingattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeValueWingattributeDesc::MergeFrom(const E_FacadeValueWingattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeValueWingattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeValueWingattributeDesc::CopyFrom(const E_FacadeValueWingattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeValueWingattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeValueWingattributeDesc::Swap(E_FacadeValueWingattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeValueWingattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeValueWingattributeDesc_descriptor_;
  metadata.reflection = E_FacadeValueWingattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeValue::kMLvFieldNumber;
const int E_FacadeValue::kMWingexpFieldNumber;
const int E_FacadeValue::kMTreasureexpFieldNumber;
const int E_FacadeValue::kMArtifactexpFieldNumber;
const int E_FacadeValue::kMBladeexpFieldNumber;
const int E_FacadeValue::kMTreasureattributeFieldNumber;
const int E_FacadeValue::kMArtifactattributeFieldNumber;
const int E_FacadeValue::kMBladeattributeFieldNumber;
const int E_FacadeValue::kMWingattributeFieldNumber;
#endif  // !_MSC_VER

E_FacadeValue::E_FacadeValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeValue::InitAsDefaultInstance() {
}

E_FacadeValue::E_FacadeValue(const E_FacadeValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeValue::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_wingexp_ = GOOGLE_LONGLONG(0);
  m_treasureexp_ = GOOGLE_LONGLONG(0);
  m_artifactexp_ = GOOGLE_LONGLONG(0);
  m_bladeexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeValue::~E_FacadeValue() {
  SharedDtor();
}

void E_FacadeValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeValue_descriptor_;
}

const E_FacadeValue& E_FacadeValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeValue* E_FacadeValue::default_instance_ = NULL;

E_FacadeValue* E_FacadeValue::New() const {
  return new E_FacadeValue;
}

void E_FacadeValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_wingexp_ = GOOGLE_LONGLONG(0);
    m_treasureexp_ = GOOGLE_LONGLONG(0);
    m_artifactexp_ = GOOGLE_LONGLONG(0);
    m_bladeexp_ = GOOGLE_LONGLONG(0);
  }
  m_treasureattribute_.Clear();
  m_artifactattribute_.Clear();
  m_bladeattribute_.Clear();
  m_wingattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wingexp;
        break;
      }

      // optional int64 m_wingexp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wingexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_wingexp_)));
          set_has_m_wingexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_treasureexp;
        break;
      }

      // optional int64 m_treasureexp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_treasureexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_treasureexp_)));
          set_has_m_treasureexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_artifactexp;
        break;
      }

      // optional int64 m_artifactexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_artifactexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_artifactexp_)));
          set_has_m_artifactexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_bladeexp;
        break;
      }

      // optional int64 m_bladeexp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bladeexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_bladeexp_)));
          set_has_m_bladeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_treasureattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeValueTreasureattributeDesc m_treasureattribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_treasureattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_treasureattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_treasureattribute;
        if (input->ExpectTag(58)) goto parse_m_artifactattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeValueArtifactattributeDesc m_artifactattribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_artifactattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_artifactattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_artifactattribute;
        if (input->ExpectTag(66)) goto parse_m_bladeattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeValueBladeattributeDesc m_bladeattribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_bladeattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_bladeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_bladeattribute;
        if (input->ExpectTag(74)) goto parse_m_wingattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeValueWingattributeDesc m_wingattribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_wingattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_wingattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_wingattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int64 m_wingexp = 2;
  if (has_m_wingexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_wingexp(), output);
  }

  // optional int64 m_treasureexp = 3;
  if (has_m_treasureexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_treasureexp(), output);
  }

  // optional int64 m_artifactexp = 4;
  if (has_m_artifactexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_artifactexp(), output);
  }

  // optional int64 m_bladeexp = 5;
  if (has_m_bladeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_bladeexp(), output);
  }

  // repeated .proto_ff.E_FacadeValueTreasureattributeDesc m_treasureattribute = 6;
  for (int i = 0; i < this->m_treasureattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_treasureattribute(i), output);
  }

  // repeated .proto_ff.E_FacadeValueArtifactattributeDesc m_artifactattribute = 7;
  for (int i = 0; i < this->m_artifactattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_artifactattribute(i), output);
  }

  // repeated .proto_ff.E_FacadeValueBladeattributeDesc m_bladeattribute = 8;
  for (int i = 0; i < this->m_bladeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_bladeattribute(i), output);
  }

  // repeated .proto_ff.E_FacadeValueWingattributeDesc m_wingattribute = 9;
  for (int i = 0; i < this->m_wingattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_wingattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int64 m_wingexp = 2;
  if (has_m_wingexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_wingexp(), target);
  }

  // optional int64 m_treasureexp = 3;
  if (has_m_treasureexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_treasureexp(), target);
  }

  // optional int64 m_artifactexp = 4;
  if (has_m_artifactexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_artifactexp(), target);
  }

  // optional int64 m_bladeexp = 5;
  if (has_m_bladeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_bladeexp(), target);
  }

  // repeated .proto_ff.E_FacadeValueTreasureattributeDesc m_treasureattribute = 6;
  for (int i = 0; i < this->m_treasureattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_treasureattribute(i), target);
  }

  // repeated .proto_ff.E_FacadeValueArtifactattributeDesc m_artifactattribute = 7;
  for (int i = 0; i < this->m_artifactattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_artifactattribute(i), target);
  }

  // repeated .proto_ff.E_FacadeValueBladeattributeDesc m_bladeattribute = 8;
  for (int i = 0; i < this->m_bladeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_bladeattribute(i), target);
  }

  // repeated .proto_ff.E_FacadeValueWingattributeDesc m_wingattribute = 9;
  for (int i = 0; i < this->m_wingattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_wingattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_wingexp = 2;
    if (has_m_wingexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_wingexp());
    }

    // optional int64 m_treasureexp = 3;
    if (has_m_treasureexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_treasureexp());
    }

    // optional int64 m_artifactexp = 4;
    if (has_m_artifactexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_artifactexp());
    }

    // optional int64 m_bladeexp = 5;
    if (has_m_bladeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_bladeexp());
    }

  }
  // repeated .proto_ff.E_FacadeValueTreasureattributeDesc m_treasureattribute = 6;
  total_size += 1 * this->m_treasureattribute_size();
  for (int i = 0; i < this->m_treasureattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_treasureattribute(i));
  }

  // repeated .proto_ff.E_FacadeValueArtifactattributeDesc m_artifactattribute = 7;
  total_size += 1 * this->m_artifactattribute_size();
  for (int i = 0; i < this->m_artifactattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_artifactattribute(i));
  }

  // repeated .proto_ff.E_FacadeValueBladeattributeDesc m_bladeattribute = 8;
  total_size += 1 * this->m_bladeattribute_size();
  for (int i = 0; i < this->m_bladeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_bladeattribute(i));
  }

  // repeated .proto_ff.E_FacadeValueWingattributeDesc m_wingattribute = 9;
  total_size += 1 * this->m_wingattribute_size();
  for (int i = 0; i < this->m_wingattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_wingattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeValue::MergeFrom(const E_FacadeValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_treasureattribute_.MergeFrom(from.m_treasureattribute_);
  m_artifactattribute_.MergeFrom(from.m_artifactattribute_);
  m_bladeattribute_.MergeFrom(from.m_bladeattribute_);
  m_wingattribute_.MergeFrom(from.m_wingattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_wingexp()) {
      set_m_wingexp(from.m_wingexp());
    }
    if (from.has_m_treasureexp()) {
      set_m_treasureexp(from.m_treasureexp());
    }
    if (from.has_m_artifactexp()) {
      set_m_artifactexp(from.m_artifactexp());
    }
    if (from.has_m_bladeexp()) {
      set_m_bladeexp(from.m_bladeexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeValue::CopyFrom(const E_FacadeValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeValue::IsInitialized() const {

  return true;
}

void E_FacadeValue::Swap(E_FacadeValue* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_wingexp_, other->m_wingexp_);
    std::swap(m_treasureexp_, other->m_treasureexp_);
    std::swap(m_artifactexp_, other->m_artifactexp_);
    std::swap(m_bladeexp_, other->m_bladeexp_);
    m_treasureattribute_.Swap(&other->m_treasureattribute_);
    m_artifactattribute_.Swap(&other->m_artifactattribute_);
    m_bladeattribute_.Swap(&other->m_bladeattribute_);
    m_wingattribute_.Swap(&other->m_wingattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeValue_descriptor_;
  metadata.reflection = E_FacadeValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeValue::kEFacadeValueListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeValue::Sheet_FacadeValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeValue::InitAsDefaultInstance() {
}

Sheet_FacadeValue::Sheet_FacadeValue(const Sheet_FacadeValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeValue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeValue::~Sheet_FacadeValue() {
  SharedDtor();
}

void Sheet_FacadeValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeValue_descriptor_;
}

const Sheet_FacadeValue& Sheet_FacadeValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeValue* Sheet_FacadeValue::default_instance_ = NULL;

Sheet_FacadeValue* Sheet_FacadeValue::New() const {
  return new Sheet_FacadeValue;
}

void Sheet_FacadeValue::Clear() {
  e_facadevalue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeValue E_FacadeValue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeValue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadevalue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeValue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeValue E_FacadeValue_List = 1;
  for (int i = 0; i < this->e_facadevalue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadevalue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeValue E_FacadeValue_List = 1;
  for (int i = 0; i < this->e_facadevalue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadevalue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeValue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeValue E_FacadeValue_List = 1;
  total_size += 1 * this->e_facadevalue_list_size();
  for (int i = 0; i < this->e_facadevalue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadevalue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeValue::MergeFrom(const Sheet_FacadeValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadevalue_list_.MergeFrom(from.e_facadevalue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeValue::CopyFrom(const Sheet_FacadeValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeValue::IsInitialized() const {

  return true;
}

void Sheet_FacadeValue::Swap(Sheet_FacadeValue* other) {
  if (other != this) {
    e_facadevalue_list_.Swap(&other->e_facadevalue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeValue_descriptor_;
  metadata.reflection = Sheet_FacadeValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeType::kMIdFieldNumber;
const int E_FacadeType::kMSoucenameFieldNumber;
#endif  // !_MSC_VER

E_FacadeType::E_FacadeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeType::InitAsDefaultInstance() {
}

E_FacadeType::E_FacadeType(const E_FacadeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeType::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_soucename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeType::~E_FacadeType() {
  SharedDtor();
}

void E_FacadeType::SharedDtor() {
  if (m_soucename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_soucename_;
  }
  if (this != default_instance_) {
  }
}

void E_FacadeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeType_descriptor_;
}

const E_FacadeType& E_FacadeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeType* E_FacadeType::default_instance_ = NULL;

E_FacadeType* E_FacadeType::New() const {
  return new E_FacadeType;
}

void E_FacadeType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_soucename()) {
      if (m_soucename_ != &::google::protobuf::internal::kEmptyString) {
        m_soucename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_soucename;
        break;
      }

      // optional string m_soucename = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_soucename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_soucename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_soucename().data(), this->m_soucename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_soucename = 2;
  if (has_m_soucename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_soucename().data(), this->m_soucename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_soucename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_soucename = 2;
  if (has_m_soucename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_soucename().data(), this->m_soucename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_soucename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_soucename = 2;
    if (has_m_soucename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_soucename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeType::MergeFrom(const E_FacadeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_soucename()) {
      set_m_soucename(from.m_soucename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeType::CopyFrom(const E_FacadeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeType::IsInitialized() const {

  return true;
}

void E_FacadeType::Swap(E_FacadeType* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_soucename_, other->m_soucename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeType_descriptor_;
  metadata.reflection = E_FacadeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeType::kEFacadeTypeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeType::Sheet_FacadeType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeType::InitAsDefaultInstance() {
}

Sheet_FacadeType::Sheet_FacadeType(const Sheet_FacadeType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeType::~Sheet_FacadeType() {
  SharedDtor();
}

void Sheet_FacadeType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeType_descriptor_;
}

const Sheet_FacadeType& Sheet_FacadeType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeType* Sheet_FacadeType::default_instance_ = NULL;

Sheet_FacadeType* Sheet_FacadeType::New() const {
  return new Sheet_FacadeType;
}

void Sheet_FacadeType::Clear() {
  e_facadetype_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeType E_FacadeType_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeType_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadetype_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeType_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeType E_FacadeType_List = 1;
  for (int i = 0; i < this->e_facadetype_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadetype_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeType E_FacadeType_List = 1;
  for (int i = 0; i < this->e_facadetype_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadetype_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeType::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeType E_FacadeType_List = 1;
  total_size += 1 * this->e_facadetype_list_size();
  for (int i = 0; i < this->e_facadetype_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadetype_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeType::MergeFrom(const Sheet_FacadeType& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadetype_list_.MergeFrom(from.e_facadetype_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeType::CopyFrom(const Sheet_FacadeType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeType::IsInitialized() const {

  return true;
}

void Sheet_FacadeType::Swap(Sheet_FacadeType* other) {
  if (other != this) {
    e_facadetype_list_.Swap(&other->e_facadetype_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeType_descriptor_;
  metadata.reflection = Sheet_FacadeType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeFragmentAttributeDesc::kMTypeFieldNumber;
const int E_FacadeFragmentAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeFragmentAttributeDesc::E_FacadeFragmentAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeFragmentAttributeDesc::InitAsDefaultInstance() {
}

E_FacadeFragmentAttributeDesc::E_FacadeFragmentAttributeDesc(const E_FacadeFragmentAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeFragmentAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeFragmentAttributeDesc::~E_FacadeFragmentAttributeDesc() {
  SharedDtor();
}

void E_FacadeFragmentAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeFragmentAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeFragmentAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeFragmentAttributeDesc_descriptor_;
}

const E_FacadeFragmentAttributeDesc& E_FacadeFragmentAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeFragmentAttributeDesc* E_FacadeFragmentAttributeDesc::default_instance_ = NULL;

E_FacadeFragmentAttributeDesc* E_FacadeFragmentAttributeDesc::New() const {
  return new E_FacadeFragmentAttributeDesc;
}

void E_FacadeFragmentAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeFragmentAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeFragmentAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeFragmentAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeFragmentAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeFragmentAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeFragmentAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeFragmentAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeFragmentAttributeDesc::MergeFrom(const E_FacadeFragmentAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeFragmentAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeFragmentAttributeDesc::CopyFrom(const E_FacadeFragmentAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeFragmentAttributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeFragmentAttributeDesc::Swap(E_FacadeFragmentAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeFragmentAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeFragmentAttributeDesc_descriptor_;
  metadata.reflection = E_FacadeFragmentAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeFragment::kMFragmentidFieldNumber;
const int E_FacadeFragment::kMItemFieldNumber;
const int E_FacadeFragment::kMItemnumFieldNumber;
const int E_FacadeFragment::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_FacadeFragment::E_FacadeFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeFragment::InitAsDefaultInstance() {
}

E_FacadeFragment::E_FacadeFragment(const E_FacadeFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeFragment::SharedCtor() {
  _cached_size_ = 0;
  m_fragmentid_ = GOOGLE_LONGLONG(0);
  m_item_ = GOOGLE_LONGLONG(0);
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeFragment::~E_FacadeFragment() {
  SharedDtor();
}

void E_FacadeFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeFragment_descriptor_;
}

const E_FacadeFragment& E_FacadeFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeFragment* E_FacadeFragment::default_instance_ = NULL;

E_FacadeFragment* E_FacadeFragment::New() const {
  return new E_FacadeFragment;
}

void E_FacadeFragment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_fragmentid_ = GOOGLE_LONGLONG(0);
    m_item_ = GOOGLE_LONGLONG(0);
    m_itemnum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_fragmentid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_fragmentid_)));
          set_has_m_fragmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int64 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_FacadeFragmentAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_fragmentid = 1;
  if (has_m_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_fragmentid(), output);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_item(), output);
  }

  // optional int32 m_itemnum = 3;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemnum(), output);
  }

  // repeated .proto_ff.E_FacadeFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_fragmentid = 1;
  if (has_m_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_fragmentid(), target);
  }

  // optional int64 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_item(), target);
  }

  // optional int32 m_itemnum = 3;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemnum(), target);
  }

  // repeated .proto_ff.E_FacadeFragmentAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeFragment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_fragmentid = 1;
    if (has_m_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_fragmentid());
    }

    // optional int64 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_item());
    }

    // optional int32 m_itemnum = 3;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated .proto_ff.E_FacadeFragmentAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeFragment::MergeFrom(const E_FacadeFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_fragmentid()) {
      set_m_fragmentid(from.m_fragmentid());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeFragment::CopyFrom(const E_FacadeFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeFragment::IsInitialized() const {

  return true;
}

void E_FacadeFragment::Swap(E_FacadeFragment* other) {
  if (other != this) {
    std::swap(m_fragmentid_, other->m_fragmentid_);
    std::swap(m_item_, other->m_item_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeFragment_descriptor_;
  metadata.reflection = E_FacadeFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeFragment::kEFacadeFragmentListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeFragment::Sheet_FacadeFragment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeFragment::InitAsDefaultInstance() {
}

Sheet_FacadeFragment::Sheet_FacadeFragment(const Sheet_FacadeFragment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeFragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeFragment::~Sheet_FacadeFragment() {
  SharedDtor();
}

void Sheet_FacadeFragment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeFragment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeFragment_descriptor_;
}

const Sheet_FacadeFragment& Sheet_FacadeFragment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeFragment* Sheet_FacadeFragment::default_instance_ = NULL;

Sheet_FacadeFragment* Sheet_FacadeFragment::New() const {
  return new Sheet_FacadeFragment;
}

void Sheet_FacadeFragment::Clear() {
  e_facadefragment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeFragment E_FacadeFragment_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeFragment_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadefragment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeFragment_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeFragment E_FacadeFragment_List = 1;
  for (int i = 0; i < this->e_facadefragment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadefragment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeFragment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeFragment E_FacadeFragment_List = 1;
  for (int i = 0; i < this->e_facadefragment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadefragment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeFragment::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeFragment E_FacadeFragment_List = 1;
  total_size += 1 * this->e_facadefragment_list_size();
  for (int i = 0; i < this->e_facadefragment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadefragment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeFragment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeFragment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeFragment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeFragment::MergeFrom(const Sheet_FacadeFragment& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadefragment_list_.MergeFrom(from.e_facadefragment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeFragment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeFragment::CopyFrom(const Sheet_FacadeFragment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeFragment::IsInitialized() const {

  return true;
}

void Sheet_FacadeFragment::Swap(Sheet_FacadeFragment* other) {
  if (other != this) {
    e_facadefragment_list_.Swap(&other->e_facadefragment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeFragment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeFragment_descriptor_;
  metadata.reflection = Sheet_FacadeFragment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeChangeAttributeDesc::kMTypeFieldNumber;
const int E_FacadeChangeAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeChangeAttributeDesc::E_FacadeChangeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeChangeAttributeDesc::InitAsDefaultInstance() {
}

E_FacadeChangeAttributeDesc::E_FacadeChangeAttributeDesc(const E_FacadeChangeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeChangeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeChangeAttributeDesc::~E_FacadeChangeAttributeDesc() {
  SharedDtor();
}

void E_FacadeChangeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeChangeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeChangeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeChangeAttributeDesc_descriptor_;
}

const E_FacadeChangeAttributeDesc& E_FacadeChangeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeChangeAttributeDesc* E_FacadeChangeAttributeDesc::default_instance_ = NULL;

E_FacadeChangeAttributeDesc* E_FacadeChangeAttributeDesc::New() const {
  return new E_FacadeChangeAttributeDesc;
}

void E_FacadeChangeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeChangeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeChangeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeChangeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeChangeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeChangeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeChangeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeChangeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeChangeAttributeDesc::MergeFrom(const E_FacadeChangeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeChangeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeChangeAttributeDesc::CopyFrom(const E_FacadeChangeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeChangeAttributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeChangeAttributeDesc::Swap(E_FacadeChangeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeChangeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeChangeAttributeDesc_descriptor_;
  metadata.reflection = E_FacadeChangeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeChangeActiveattributeDesc::kMTypeFieldNumber;
const int E_FacadeChangeActiveattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeChangeActiveattributeDesc::E_FacadeChangeActiveattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeChangeActiveattributeDesc::InitAsDefaultInstance() {
}

E_FacadeChangeActiveattributeDesc::E_FacadeChangeActiveattributeDesc(const E_FacadeChangeActiveattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeChangeActiveattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeChangeActiveattributeDesc::~E_FacadeChangeActiveattributeDesc() {
  SharedDtor();
}

void E_FacadeChangeActiveattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeChangeActiveattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeChangeActiveattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeChangeActiveattributeDesc_descriptor_;
}

const E_FacadeChangeActiveattributeDesc& E_FacadeChangeActiveattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeChangeActiveattributeDesc* E_FacadeChangeActiveattributeDesc::default_instance_ = NULL;

E_FacadeChangeActiveattributeDesc* E_FacadeChangeActiveattributeDesc::New() const {
  return new E_FacadeChangeActiveattributeDesc;
}

void E_FacadeChangeActiveattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeChangeActiveattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeChangeActiveattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeChangeActiveattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeChangeActiveattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeChangeActiveattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeChangeActiveattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeChangeActiveattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeChangeActiveattributeDesc::MergeFrom(const E_FacadeChangeActiveattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeChangeActiveattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeChangeActiveattributeDesc::CopyFrom(const E_FacadeChangeActiveattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeChangeActiveattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeChangeActiveattributeDesc::Swap(E_FacadeChangeActiveattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeChangeActiveattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeChangeActiveattributeDesc_descriptor_;
  metadata.reflection = E_FacadeChangeActiveattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeChange::kMIdFieldNumber;
const int E_FacadeChange::kMTypeFieldNumber;
const int E_FacadeChange::kMResourceFieldNumber;
const int E_FacadeChange::kMProfessionidFieldNumber;
const int E_FacadeChange::kMNameFieldNumber;
const int E_FacadeChange::kMActivedescFieldNumber;
const int E_FacadeChange::kMQualityFieldNumber;
const int E_FacadeChange::kMActivationitemFieldNumber;
const int E_FacadeChange::kMActivationnumFieldNumber;
const int E_FacadeChange::kMStaridFieldNumber;
const int E_FacadeChange::kMStarnumFieldNumber;
const int E_FacadeChange::kMStarupFieldNumber;
const int E_FacadeChange::kMStarberFieldNumber;
const int E_FacadeChange::kMUpattributeidFieldNumber;
const int E_FacadeChange::kMActiveskillFieldNumber;
const int E_FacadeChange::kMAttributeFieldNumber;
const int E_FacadeChange::kMActiveattributeFieldNumber;
#endif  // !_MSC_VER

E_FacadeChange::E_FacadeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeChange::InitAsDefaultInstance() {
}

E_FacadeChange::E_FacadeChange(const E_FacadeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeChange::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_type_ = 0;
  m_resource_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_professionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_activedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_quality_ = 0;
  m_activationitem_ = GOOGLE_LONGLONG(0);
  m_activationnum_ = 0;
  m_starid_ = GOOGLE_LONGLONG(0);
  m_starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starup_ = 0;
  m_starber_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_activeskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeChange::~E_FacadeChange() {
  SharedDtor();
}

void E_FacadeChange::SharedDtor() {
  if (m_resource_ != &::google::protobuf::internal::kEmptyString) {
    delete m_resource_;
  }
  if (m_professionid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_professionid_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_activedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activedesc_;
  }
  if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starnum_;
  }
  if (this != default_instance_) {
  }
}

void E_FacadeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeChange_descriptor_;
}

const E_FacadeChange& E_FacadeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeChange* E_FacadeChange::default_instance_ = NULL;

E_FacadeChange* E_FacadeChange::New() const {
  return new E_FacadeChange;
}

void E_FacadeChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_type_ = 0;
    if (has_m_resource()) {
      if (m_resource_ != &::google::protobuf::internal::kEmptyString) {
        m_resource_->clear();
      }
    }
    if (has_m_professionid()) {
      if (m_professionid_ != &::google::protobuf::internal::kEmptyString) {
        m_professionid_->clear();
      }
    }
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    if (has_m_activedesc()) {
      if (m_activedesc_ != &::google::protobuf::internal::kEmptyString) {
        m_activedesc_->clear();
      }
    }
    m_quality_ = 0;
    m_activationitem_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_activationnum_ = 0;
    m_starid_ = GOOGLE_LONGLONG(0);
    if (has_m_starnum()) {
      if (m_starnum_ != &::google::protobuf::internal::kEmptyString) {
        m_starnum_->clear();
      }
    }
    m_starup_ = 0;
    m_starber_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_activeskill_ = 0;
  }
  m_attribute_.Clear();
  m_activeattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_resource;
        break;
      }

      // optional string m_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_resource()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_resource().data(), this->m_resource().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_professionid;
        break;
      }

      // optional string m_professionid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_professionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_professionid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_professionid().data(), this->m_professionid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_name;
        break;
      }

      // optional string m_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_activedesc;
        break;
      }

      // optional string m_activedesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activedesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_activedesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_activedesc().data(), this->m_activedesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_activationitem;
        break;
      }

      // optional int64 m_activationitem = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_activationitem_)));
          set_has_m_activationitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_activationnum;
        break;
      }

      // optional int32 m_activationnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activationnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activationnum_)));
          set_has_m_activationnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_starid;
        break;
      }

      // optional int64 m_starid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_starnum;
        break;
      }

      // optional string m_starnum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starnum().data(), this->m_starnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_starup;
        break;
      }

      // optional int32 m_starup = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starup_)));
          set_has_m_starup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_starber;
        break;
      }

      // optional int32 m_starber = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starber_)));
          set_has_m_starber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_upattributeid;
        break;
      }

      // optional int64 m_upattributeid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_activeskill;
        break;
      }

      // optional int32 m_activeskill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activeskill_)));
          set_has_m_activeskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_FacadeChangeAttributeDesc m_attribute = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_attribute;
        if (input->ExpectTag(138)) goto parse_m_activeattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeChangeActiveattributeDesc m_activeattribute = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_activeattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_activeattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_activeattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_resource = 3;
  if (has_m_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_resource().data(), this->m_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_resource(), output);
  }

  // optional string m_professionid = 4;
  if (has_m_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionid().data(), this->m_professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_professionid(), output);
  }

  // optional string m_name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_name(), output);
  }

  // optional string m_activedesc = 6;
  if (has_m_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activedesc().data(), this->m_activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_activedesc(), output);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_quality(), output);
  }

  // optional int64 m_activationitem = 8;
  if (has_m_activationitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_activationitem(), output);
  }

  // optional int32 m_activationnum = 9;
  if (has_m_activationnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_activationnum(), output);
  }

  // optional int64 m_starid = 10;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->m_starid(), output);
  }

  // optional string m_starnum = 11;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_starnum(), output);
  }

  // optional int32 m_starup = 12;
  if (has_m_starup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_starup(), output);
  }

  // optional int32 m_starber = 13;
  if (has_m_starber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_starber(), output);
  }

  // optional int64 m_upattributeid = 14;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->m_upattributeid(), output);
  }

  // optional int32 m_activeskill = 15;
  if (has_m_activeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_activeskill(), output);
  }

  // repeated .proto_ff.E_FacadeChangeAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_attribute(i), output);
  }

  // repeated .proto_ff.E_FacadeChangeActiveattributeDesc m_activeattribute = 17;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->m_activeattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_resource = 3;
  if (has_m_resource()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_resource().data(), this->m_resource().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_resource(), target);
  }

  // optional string m_professionid = 4;
  if (has_m_professionid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_professionid().data(), this->m_professionid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_professionid(), target);
  }

  // optional string m_name = 5;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_name(), target);
  }

  // optional string m_activedesc = 6;
  if (has_m_activedesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_activedesc().data(), this->m_activedesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_activedesc(), target);
  }

  // optional int32 m_quality = 7;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_quality(), target);
  }

  // optional int64 m_activationitem = 8;
  if (has_m_activationitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_activationitem(), target);
  }

  // optional int32 m_activationnum = 9;
  if (has_m_activationnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_activationnum(), target);
  }

  // optional int64 m_starid = 10;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->m_starid(), target);
  }

  // optional string m_starnum = 11;
  if (has_m_starnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starnum().data(), this->m_starnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_starnum(), target);
  }

  // optional int32 m_starup = 12;
  if (has_m_starup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_starup(), target);
  }

  // optional int32 m_starber = 13;
  if (has_m_starber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_starber(), target);
  }

  // optional int64 m_upattributeid = 14;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->m_upattributeid(), target);
  }

  // optional int32 m_activeskill = 15;
  if (has_m_activeskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_activeskill(), target);
  }

  // repeated .proto_ff.E_FacadeChangeAttributeDesc m_attribute = 16;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_attribute(i), target);
  }

  // repeated .proto_ff.E_FacadeChangeActiveattributeDesc m_activeattribute = 17;
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->m_activeattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_resource = 3;
    if (has_m_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_resource());
    }

    // optional string m_professionid = 4;
    if (has_m_professionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_professionid());
    }

    // optional string m_name = 5;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional string m_activedesc = 6;
    if (has_m_activedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_activedesc());
    }

    // optional int32 m_quality = 7;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int64 m_activationitem = 8;
    if (has_m_activationitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_activationitem());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_activationnum = 9;
    if (has_m_activationnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activationnum());
    }

    // optional int64 m_starid = 10;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_starid());
    }

    // optional string m_starnum = 11;
    if (has_m_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starnum());
    }

    // optional int32 m_starup = 12;
    if (has_m_starup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starup());
    }

    // optional int32 m_starber = 13;
    if (has_m_starber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starber());
    }

    // optional int64 m_upattributeid = 14;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_activeskill = 15;
    if (has_m_activeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activeskill());
    }

  }
  // repeated .proto_ff.E_FacadeChangeAttributeDesc m_attribute = 16;
  total_size += 2 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated .proto_ff.E_FacadeChangeActiveattributeDesc m_activeattribute = 17;
  total_size += 2 * this->m_activeattribute_size();
  for (int i = 0; i < this->m_activeattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_activeattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeChange::MergeFrom(const E_FacadeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_activeattribute_.MergeFrom(from.m_activeattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_resource()) {
      set_m_resource(from.m_resource());
    }
    if (from.has_m_professionid()) {
      set_m_professionid(from.m_professionid());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_activedesc()) {
      set_m_activedesc(from.m_activedesc());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_activationitem()) {
      set_m_activationitem(from.m_activationitem());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_activationnum()) {
      set_m_activationnum(from.m_activationnum());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_starnum()) {
      set_m_starnum(from.m_starnum());
    }
    if (from.has_m_starup()) {
      set_m_starup(from.m_starup());
    }
    if (from.has_m_starber()) {
      set_m_starber(from.m_starber());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_activeskill()) {
      set_m_activeskill(from.m_activeskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeChange::CopyFrom(const E_FacadeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeChange::IsInitialized() const {

  return true;
}

void E_FacadeChange::Swap(E_FacadeChange* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_resource_, other->m_resource_);
    std::swap(m_professionid_, other->m_professionid_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_activedesc_, other->m_activedesc_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_activationitem_, other->m_activationitem_);
    std::swap(m_activationnum_, other->m_activationnum_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_starnum_, other->m_starnum_);
    std::swap(m_starup_, other->m_starup_);
    std::swap(m_starber_, other->m_starber_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_activeskill_, other->m_activeskill_);
    m_attribute_.Swap(&other->m_attribute_);
    m_activeattribute_.Swap(&other->m_activeattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeChange_descriptor_;
  metadata.reflection = E_FacadeChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeChange::kEFacadeChangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeChange::Sheet_FacadeChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeChange::InitAsDefaultInstance() {
}

Sheet_FacadeChange::Sheet_FacadeChange(const Sheet_FacadeChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeChange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeChange::~Sheet_FacadeChange() {
  SharedDtor();
}

void Sheet_FacadeChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeChange_descriptor_;
}

const Sheet_FacadeChange& Sheet_FacadeChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeChange* Sheet_FacadeChange::default_instance_ = NULL;

Sheet_FacadeChange* Sheet_FacadeChange::New() const {
  return new Sheet_FacadeChange;
}

void Sheet_FacadeChange::Clear() {
  e_facadechange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeChange E_FacadeChange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeChange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadechange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeChange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeChange E_FacadeChange_List = 1;
  for (int i = 0; i < this->e_facadechange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadechange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeChange E_FacadeChange_List = 1;
  for (int i = 0; i < this->e_facadechange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadechange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeChange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeChange E_FacadeChange_List = 1;
  total_size += 1 * this->e_facadechange_list_size();
  for (int i = 0; i < this->e_facadechange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadechange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeChange::MergeFrom(const Sheet_FacadeChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadechange_list_.MergeFrom(from.e_facadechange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeChange::CopyFrom(const Sheet_FacadeChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeChange::IsInitialized() const {

  return true;
}

void Sheet_FacadeChange::Swap(Sheet_FacadeChange* other) {
  if (other != this) {
    e_facadechange_list_.Swap(&other->e_facadechange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeChange_descriptor_;
  metadata.reflection = Sheet_FacadeChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeStarupUpattributeDesc::kMTypeFieldNumber;
const int E_FacadeStarupUpattributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeStarupUpattributeDesc::E_FacadeStarupUpattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeStarupUpattributeDesc::InitAsDefaultInstance() {
}

E_FacadeStarupUpattributeDesc::E_FacadeStarupUpattributeDesc(const E_FacadeStarupUpattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeStarupUpattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeStarupUpattributeDesc::~E_FacadeStarupUpattributeDesc() {
  SharedDtor();
}

void E_FacadeStarupUpattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeStarupUpattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeStarupUpattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeStarupUpattributeDesc_descriptor_;
}

const E_FacadeStarupUpattributeDesc& E_FacadeStarupUpattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeStarupUpattributeDesc* E_FacadeStarupUpattributeDesc::default_instance_ = NULL;

E_FacadeStarupUpattributeDesc* E_FacadeStarupUpattributeDesc::New() const {
  return new E_FacadeStarupUpattributeDesc;
}

void E_FacadeStarupUpattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeStarupUpattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeStarupUpattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeStarupUpattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeStarupUpattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeStarupUpattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeStarupUpattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeStarupUpattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeStarupUpattributeDesc::MergeFrom(const E_FacadeStarupUpattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeStarupUpattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeStarupUpattributeDesc::CopyFrom(const E_FacadeStarupUpattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeStarupUpattributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeStarupUpattributeDesc::Swap(E_FacadeStarupUpattributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeStarupUpattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeStarupUpattributeDesc_descriptor_;
  metadata.reflection = E_FacadeStarupUpattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeStarup::kMIdFieldNumber;
const int E_FacadeStarup::kMUpattributeidFieldNumber;
const int E_FacadeStarup::kMStaridFieldNumber;
const int E_FacadeStarup::kMSkillidFieldNumber;
const int E_FacadeStarup::kMUpattributeFieldNumber;
#endif  // !_MSC_VER

E_FacadeStarup::E_FacadeStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeStarup::InitAsDefaultInstance() {
}

E_FacadeStarup::E_FacadeStarup(const E_FacadeStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeStarup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_upattributeid_ = GOOGLE_LONGLONG(0);
  m_starid_ = 0;
  m_skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeStarup::~E_FacadeStarup() {
  SharedDtor();
}

void E_FacadeStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeStarup_descriptor_;
}

const E_FacadeStarup& E_FacadeStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeStarup* E_FacadeStarup::default_instance_ = NULL;

E_FacadeStarup* E_FacadeStarup::New() const {
  return new E_FacadeStarup;
}

void E_FacadeStarup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_upattributeid_ = GOOGLE_LONGLONG(0);
    m_starid_ = 0;
    m_skillid_ = 0;
  }
  m_upattribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_upattributeid;
        break;
      }

      // optional int64 m_upattributeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_upattributeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_upattributeid_)));
          set_has_m_upattributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_starid;
        break;
      }

      // optional int32 m_starid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starid_)));
          set_has_m_starid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upattribute;
        break;
      }

      // repeated .proto_ff.E_FacadeStarupUpattributeDesc m_upattribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_upattribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_upattribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_upattribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int64 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_upattributeid(), output);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_starid(), output);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_skillid(), output);
  }

  // repeated .proto_ff.E_FacadeStarupUpattributeDesc m_upattribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_upattribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int64 m_upattributeid = 2;
  if (has_m_upattributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_upattributeid(), target);
  }

  // optional int32 m_starid = 3;
  if (has_m_starid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_starid(), target);
  }

  // optional int32 m_skillid = 4;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_skillid(), target);
  }

  // repeated .proto_ff.E_FacadeStarupUpattributeDesc m_upattribute = 5;
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_upattribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeStarup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int64 m_upattributeid = 2;
    if (has_m_upattributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_upattributeid());
    }

    // optional int32 m_starid = 3;
    if (has_m_starid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starid());
    }

    // optional int32 m_skillid = 4;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

  }
  // repeated .proto_ff.E_FacadeStarupUpattributeDesc m_upattribute = 5;
  total_size += 1 * this->m_upattribute_size();
  for (int i = 0; i < this->m_upattribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_upattribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeStarup::MergeFrom(const E_FacadeStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_upattribute_.MergeFrom(from.m_upattribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_upattributeid()) {
      set_m_upattributeid(from.m_upattributeid());
    }
    if (from.has_m_starid()) {
      set_m_starid(from.m_starid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeStarup::CopyFrom(const E_FacadeStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeStarup::IsInitialized() const {

  return true;
}

void E_FacadeStarup::Swap(E_FacadeStarup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_upattributeid_, other->m_upattributeid_);
    std::swap(m_starid_, other->m_starid_);
    std::swap(m_skillid_, other->m_skillid_);
    m_upattribute_.Swap(&other->m_upattribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeStarup_descriptor_;
  metadata.reflection = E_FacadeStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeStarup::kEFacadeStarupListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeStarup::Sheet_FacadeStarup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeStarup::InitAsDefaultInstance() {
}

Sheet_FacadeStarup::Sheet_FacadeStarup(const Sheet_FacadeStarup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeStarup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeStarup::~Sheet_FacadeStarup() {
  SharedDtor();
}

void Sheet_FacadeStarup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeStarup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeStarup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeStarup_descriptor_;
}

const Sheet_FacadeStarup& Sheet_FacadeStarup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeStarup* Sheet_FacadeStarup::default_instance_ = NULL;

Sheet_FacadeStarup* Sheet_FacadeStarup::New() const {
  return new Sheet_FacadeStarup;
}

void Sheet_FacadeStarup::Clear() {
  e_facadestarup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeStarup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeStarup E_FacadeStarup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeStarup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadestarup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeStarup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeStarup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeStarup E_FacadeStarup_List = 1;
  for (int i = 0; i < this->e_facadestarup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadestarup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeStarup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeStarup E_FacadeStarup_List = 1;
  for (int i = 0; i < this->e_facadestarup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadestarup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeStarup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeStarup E_FacadeStarup_List = 1;
  total_size += 1 * this->e_facadestarup_list_size();
  for (int i = 0; i < this->e_facadestarup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadestarup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeStarup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeStarup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeStarup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeStarup::MergeFrom(const Sheet_FacadeStarup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadestarup_list_.MergeFrom(from.e_facadestarup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeStarup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeStarup::CopyFrom(const Sheet_FacadeStarup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeStarup::IsInitialized() const {

  return true;
}

void Sheet_FacadeStarup::Swap(Sheet_FacadeStarup* other) {
  if (other != this) {
    e_facadestarup_list_.Swap(&other->e_facadestarup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeStarup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeStarup_descriptor_;
  metadata.reflection = Sheet_FacadeStarup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoulAttributeDesc::kMTypeFieldNumber;
const int E_FacadeSoulAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoulAttributeDesc::E_FacadeSoulAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoulAttributeDesc::InitAsDefaultInstance() {
}

E_FacadeSoulAttributeDesc::E_FacadeSoulAttributeDesc(const E_FacadeSoulAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoulAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoulAttributeDesc::~E_FacadeSoulAttributeDesc() {
  SharedDtor();
}

void E_FacadeSoulAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeSoulAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoulAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoulAttributeDesc_descriptor_;
}

const E_FacadeSoulAttributeDesc& E_FacadeSoulAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoulAttributeDesc* E_FacadeSoulAttributeDesc::default_instance_ = NULL;

E_FacadeSoulAttributeDesc* E_FacadeSoulAttributeDesc::New() const {
  return new E_FacadeSoulAttributeDesc;
}

void E_FacadeSoulAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoulAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoulAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoulAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoulAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoulAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoulAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoulAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoulAttributeDesc::MergeFrom(const E_FacadeSoulAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoulAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoulAttributeDesc::CopyFrom(const E_FacadeSoulAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoulAttributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeSoulAttributeDesc::Swap(E_FacadeSoulAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoulAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoulAttributeDesc_descriptor_;
  metadata.reflection = E_FacadeSoulAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoul::kMIdFieldNumber;
const int E_FacadeSoul::kMRechargeidFieldNumber;
const int E_FacadeSoul::kMMainskillFieldNumber;
const int E_FacadeSoul::kMAttributetypeFieldNumber;
const int E_FacadeSoul::kMAttributeFieldNumber;
const int E_FacadeSoul::kMMinorskillFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoul::E_FacadeSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoul::InitAsDefaultInstance() {
}

E_FacadeSoul::E_FacadeSoul(const E_FacadeSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoul::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_rechargeid_ = 0;
  m_mainskill_ = 0;
  m_attributetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoul::~E_FacadeSoul() {
  SharedDtor();
}

void E_FacadeSoul::SharedDtor() {
  if (m_attributetype_ != &::google::protobuf::internal::kEmptyString) {
    delete m_attributetype_;
  }
  if (this != default_instance_) {
  }
}

void E_FacadeSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoul_descriptor_;
}

const E_FacadeSoul& E_FacadeSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoul* E_FacadeSoul::default_instance_ = NULL;

E_FacadeSoul* E_FacadeSoul::New() const {
  return new E_FacadeSoul;
}

void E_FacadeSoul::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_rechargeid_ = 0;
    m_mainskill_ = 0;
    if (has_m_attributetype()) {
      if (m_attributetype_ != &::google::protobuf::internal::kEmptyString) {
        m_attributetype_->clear();
      }
    }
  }
  m_attribute_.Clear();
  m_minorskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rechargeid;
        break;
      }

      // optional int32 m_rechargeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_mainskill;
        break;
      }

      // optional int32 m_mainskill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mainskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_mainskill_)));
          set_has_m_mainskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attributetype;
        break;
      }

      // optional string m_attributetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attributetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_attributetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_attributetype().data(), this->m_attributetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_FacadeSoulAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectTag(48)) goto parse_m_minorskill;
        break;
      }

      // repeated int32 m_minorskill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minorskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_minorskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_minorskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_minorskill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_rechargeid = 2;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rechargeid(), output);
  }

  // optional int32 m_mainskill = 3;
  if (has_m_mainskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_mainskill(), output);
  }

  // optional string m_attributetype = 4;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attributetype().data(), this->m_attributetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_attributetype(), output);
  }

  // repeated .proto_ff.E_FacadeSoulAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  // repeated int32 m_minorskill = 6;
  for (int i = 0; i < this->m_minorskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_minorskill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rechargeid = 2;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rechargeid(), target);
  }

  // optional int32 m_mainskill = 3;
  if (has_m_mainskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_mainskill(), target);
  }

  // optional string m_attributetype = 4;
  if (has_m_attributetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_attributetype().data(), this->m_attributetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_attributetype(), target);
  }

  // repeated .proto_ff.E_FacadeSoulAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  // repeated int32 m_minorskill = 6;
  for (int i = 0; i < this->m_minorskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_minorskill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoul::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_rechargeid = 2;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

    // optional int32 m_mainskill = 3;
    if (has_m_mainskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_mainskill());
    }

    // optional string m_attributetype = 4;
    if (has_m_attributetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_attributetype());
    }

  }
  // repeated .proto_ff.E_FacadeSoulAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  // repeated int32 m_minorskill = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_minorskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_minorskill(i));
    }
    total_size += 1 * this->m_minorskill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoul::MergeFrom(const E_FacadeSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  m_minorskill_.MergeFrom(from.m_minorskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
    if (from.has_m_mainskill()) {
      set_m_mainskill(from.m_mainskill());
    }
    if (from.has_m_attributetype()) {
      set_m_attributetype(from.m_attributetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoul::CopyFrom(const E_FacadeSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoul::IsInitialized() const {

  return true;
}

void E_FacadeSoul::Swap(E_FacadeSoul* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(m_mainskill_, other->m_mainskill_);
    std::swap(m_attributetype_, other->m_attributetype_);
    m_attribute_.Swap(&other->m_attribute_);
    m_minorskill_.Swap(&other->m_minorskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoul_descriptor_;
  metadata.reflection = E_FacadeSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeSoul::kEFacadeSoulListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeSoul::Sheet_FacadeSoul()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeSoul::InitAsDefaultInstance() {
}

Sheet_FacadeSoul::Sheet_FacadeSoul(const Sheet_FacadeSoul& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeSoul::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeSoul::~Sheet_FacadeSoul() {
  SharedDtor();
}

void Sheet_FacadeSoul::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeSoul::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeSoul::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeSoul_descriptor_;
}

const Sheet_FacadeSoul& Sheet_FacadeSoul::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeSoul* Sheet_FacadeSoul::default_instance_ = NULL;

Sheet_FacadeSoul* Sheet_FacadeSoul::New() const {
  return new Sheet_FacadeSoul;
}

void Sheet_FacadeSoul::Clear() {
  e_facadesoul_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeSoul::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeSoul E_FacadeSoul_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeSoul_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadesoul_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeSoul_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeSoul::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeSoul E_FacadeSoul_List = 1;
  for (int i = 0; i < this->e_facadesoul_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadesoul_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeSoul::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeSoul E_FacadeSoul_List = 1;
  for (int i = 0; i < this->e_facadesoul_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadesoul_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeSoul::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeSoul E_FacadeSoul_List = 1;
  total_size += 1 * this->e_facadesoul_list_size();
  for (int i = 0; i < this->e_facadesoul_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadesoul_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeSoul::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeSoul* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeSoul*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeSoul::MergeFrom(const Sheet_FacadeSoul& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadesoul_list_.MergeFrom(from.e_facadesoul_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeSoul::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeSoul::CopyFrom(const Sheet_FacadeSoul& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeSoul::IsInitialized() const {

  return true;
}

void Sheet_FacadeSoul::Swap(Sheet_FacadeSoul* other) {
  if (other != this) {
    e_facadesoul_list_.Swap(&other->e_facadesoul_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeSoul::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeSoul_descriptor_;
  metadata.reflection = Sheet_FacadeSoul_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoulactiveUnlockDesc::kMParamaFieldNumber;
const int E_FacadeSoulactiveUnlockDesc::kMConditionFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoulactiveUnlockDesc::E_FacadeSoulactiveUnlockDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoulactiveUnlockDesc::InitAsDefaultInstance() {
}

E_FacadeSoulactiveUnlockDesc::E_FacadeSoulactiveUnlockDesc(const E_FacadeSoulactiveUnlockDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoulactiveUnlockDesc::SharedCtor() {
  _cached_size_ = 0;
  m_parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_condition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoulactiveUnlockDesc::~E_FacadeSoulactiveUnlockDesc() {
  SharedDtor();
}

void E_FacadeSoulactiveUnlockDesc::SharedDtor() {
  if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parama_;
  }
  if (this != default_instance_) {
  }
}

void E_FacadeSoulactiveUnlockDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoulactiveUnlockDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoulactiveUnlockDesc_descriptor_;
}

const E_FacadeSoulactiveUnlockDesc& E_FacadeSoulactiveUnlockDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoulactiveUnlockDesc* E_FacadeSoulactiveUnlockDesc::default_instance_ = NULL;

E_FacadeSoulactiveUnlockDesc* E_FacadeSoulactiveUnlockDesc::New() const {
  return new E_FacadeSoulactiveUnlockDesc;
}

void E_FacadeSoulactiveUnlockDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_parama()) {
      if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
        m_parama_->clear();
      }
    }
    m_condition_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoulactiveUnlockDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_parama = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_parama().data(), this->m_parama().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoulactiveUnlockDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_parama = 1;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_parama(), output);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_condition(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoulactiveUnlockDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_parama = 1;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_parama(), target);
  }

  // optional int32 m_condition = 2;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_condition(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoulactiveUnlockDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_parama = 1;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_parama());
    }

    // optional int32 m_condition = 2;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoulactiveUnlockDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoulactiveUnlockDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoulactiveUnlockDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoulactiveUnlockDesc::MergeFrom(const E_FacadeSoulactiveUnlockDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoulactiveUnlockDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoulactiveUnlockDesc::CopyFrom(const E_FacadeSoulactiveUnlockDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoulactiveUnlockDesc::IsInitialized() const {

  return true;
}

void E_FacadeSoulactiveUnlockDesc::Swap(E_FacadeSoulactiveUnlockDesc* other) {
  if (other != this) {
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoulactiveUnlockDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoulactiveUnlockDesc_descriptor_;
  metadata.reflection = E_FacadeSoulactiveUnlockDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoulactive::kMIdFieldNumber;
const int E_FacadeSoulactive::kMUnlockFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoulactive::E_FacadeSoulactive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoulactive::InitAsDefaultInstance() {
}

E_FacadeSoulactive::E_FacadeSoulactive(const E_FacadeSoulactive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoulactive::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoulactive::~E_FacadeSoulactive() {
  SharedDtor();
}

void E_FacadeSoulactive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeSoulactive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoulactive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoulactive_descriptor_;
}

const E_FacadeSoulactive& E_FacadeSoulactive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoulactive* E_FacadeSoulactive::default_instance_ = NULL;

E_FacadeSoulactive* E_FacadeSoulactive::New() const {
  return new E_FacadeSoulactive;
}

void E_FacadeSoulactive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
  }
  m_unlock_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoulactive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_unlock;
        break;
      }

      // repeated .proto_ff.E_FacadeSoulactiveUnlockDesc m_unlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_unlock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_unlock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_unlock;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoulactive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_FacadeSoulactiveUnlockDesc m_unlock = 2;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_unlock(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoulactive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_FacadeSoulactiveUnlockDesc m_unlock = 2;
  for (int i = 0; i < this->m_unlock_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_unlock(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoulactive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_FacadeSoulactiveUnlockDesc m_unlock = 2;
  total_size += 1 * this->m_unlock_size();
  for (int i = 0; i < this->m_unlock_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_unlock(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoulactive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoulactive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoulactive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoulactive::MergeFrom(const E_FacadeSoulactive& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_unlock_.MergeFrom(from.m_unlock_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoulactive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoulactive::CopyFrom(const E_FacadeSoulactive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoulactive::IsInitialized() const {

  return true;
}

void E_FacadeSoulactive::Swap(E_FacadeSoulactive* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_unlock_.Swap(&other->m_unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoulactive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoulactive_descriptor_;
  metadata.reflection = E_FacadeSoulactive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeSoulactive::kEFacadeSoulactiveListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeSoulactive::Sheet_FacadeSoulactive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeSoulactive::InitAsDefaultInstance() {
}

Sheet_FacadeSoulactive::Sheet_FacadeSoulactive(const Sheet_FacadeSoulactive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeSoulactive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeSoulactive::~Sheet_FacadeSoulactive() {
  SharedDtor();
}

void Sheet_FacadeSoulactive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeSoulactive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeSoulactive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeSoulactive_descriptor_;
}

const Sheet_FacadeSoulactive& Sheet_FacadeSoulactive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeSoulactive* Sheet_FacadeSoulactive::default_instance_ = NULL;

Sheet_FacadeSoulactive* Sheet_FacadeSoulactive::New() const {
  return new Sheet_FacadeSoulactive;
}

void Sheet_FacadeSoulactive::Clear() {
  e_facadesoulactive_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeSoulactive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeSoulactive E_FacadeSoulactive_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeSoulactive_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadesoulactive_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeSoulactive_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeSoulactive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeSoulactive E_FacadeSoulactive_List = 1;
  for (int i = 0; i < this->e_facadesoulactive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadesoulactive_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeSoulactive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeSoulactive E_FacadeSoulactive_List = 1;
  for (int i = 0; i < this->e_facadesoulactive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadesoulactive_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeSoulactive::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeSoulactive E_FacadeSoulactive_List = 1;
  total_size += 1 * this->e_facadesoulactive_list_size();
  for (int i = 0; i < this->e_facadesoulactive_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadesoulactive_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeSoulactive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeSoulactive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeSoulactive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeSoulactive::MergeFrom(const Sheet_FacadeSoulactive& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadesoulactive_list_.MergeFrom(from.e_facadesoulactive_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeSoulactive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeSoulactive::CopyFrom(const Sheet_FacadeSoulactive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeSoulactive::IsInitialized() const {

  return true;
}

void Sheet_FacadeSoulactive::Swap(Sheet_FacadeSoulactive* other) {
  if (other != this) {
    e_facadesoulactive_list_.Swap(&other->e_facadesoulactive_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeSoulactive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeSoulactive_descriptor_;
  metadata.reflection = Sheet_FacadeSoulactive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoullvAttributeDesc::kMTypeFieldNumber;
const int E_FacadeSoullvAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoullvAttributeDesc::E_FacadeSoullvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoullvAttributeDesc::InitAsDefaultInstance() {
}

E_FacadeSoullvAttributeDesc::E_FacadeSoullvAttributeDesc(const E_FacadeSoullvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoullvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoullvAttributeDesc::~E_FacadeSoullvAttributeDesc() {
  SharedDtor();
}

void E_FacadeSoullvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeSoullvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoullvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoullvAttributeDesc_descriptor_;
}

const E_FacadeSoullvAttributeDesc& E_FacadeSoullvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoullvAttributeDesc* E_FacadeSoullvAttributeDesc::default_instance_ = NULL;

E_FacadeSoullvAttributeDesc* E_FacadeSoullvAttributeDesc::New() const {
  return new E_FacadeSoullvAttributeDesc;
}

void E_FacadeSoullvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoullvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoullvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoullvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoullvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoullvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoullvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoullvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoullvAttributeDesc::MergeFrom(const E_FacadeSoullvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoullvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoullvAttributeDesc::CopyFrom(const E_FacadeSoullvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoullvAttributeDesc::IsInitialized() const {

  return true;
}

void E_FacadeSoullvAttributeDesc::Swap(E_FacadeSoullvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoullvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoullvAttributeDesc_descriptor_;
  metadata.reflection = E_FacadeSoullvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoullv::kMIdFieldNumber;
const int E_FacadeSoullv::kMSoulllvFieldNumber;
const int E_FacadeSoullv::kMSoulidFieldNumber;
const int E_FacadeSoullv::kMItemidFieldNumber;
const int E_FacadeSoullv::kMNumFieldNumber;
const int E_FacadeSoullv::kMSuccessrateFieldNumber;
const int E_FacadeSoullv::kMDownlvFieldNumber;
const int E_FacadeSoullv::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoullv::E_FacadeSoullv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoullv::InitAsDefaultInstance() {
}

E_FacadeSoullv::E_FacadeSoullv(const E_FacadeSoullv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoullv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_soulllv_ = 0;
  m_soulid_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  m_successrate_ = 0;
  m_downlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoullv::~E_FacadeSoullv() {
  SharedDtor();
}

void E_FacadeSoullv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeSoullv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoullv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoullv_descriptor_;
}

const E_FacadeSoullv& E_FacadeSoullv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoullv* E_FacadeSoullv::default_instance_ = NULL;

E_FacadeSoullv* E_FacadeSoullv::New() const {
  return new E_FacadeSoullv;
}

void E_FacadeSoullv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_soulllv_ = 0;
    m_soulid_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
    m_successrate_ = 0;
    m_downlv_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoullv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_soulllv;
        break;
      }

      // optional int32 m_soulllv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulllv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulllv_)));
          set_has_m_soulllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_soulid;
        break;
      }

      // optional int32 m_soulid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulid_)));
          set_has_m_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_successrate;
        break;
      }

      // optional int32 m_successrate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_successrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_successrate_)));
          set_has_m_successrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_downlv;
        break;
      }

      // optional int32 m_downlv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_downlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_downlv_)));
          set_has_m_downlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_FacadeSoullvAttributeDesc m_attribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoullv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_soulllv = 2;
  if (has_m_soulllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_soulllv(), output);
  }

  // optional int32 m_soulid = 3;
  if (has_m_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_soulid(), output);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // optional int32 m_successrate = 6;
  if (has_m_successrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_successrate(), output);
  }

  // optional int32 m_downlv = 7;
  if (has_m_downlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_downlv(), output);
  }

  // repeated .proto_ff.E_FacadeSoullvAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoullv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_soulllv = 2;
  if (has_m_soulllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_soulllv(), target);
  }

  // optional int32 m_soulid = 3;
  if (has_m_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_soulid(), target);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // optional int32 m_successrate = 6;
  if (has_m_successrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_successrate(), target);
  }

  // optional int32 m_downlv = 7;
  if (has_m_downlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_downlv(), target);
  }

  // repeated .proto_ff.E_FacadeSoullvAttributeDesc m_attribute = 8;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoullv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_soulllv = 2;
    if (has_m_soulllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulllv());
    }

    // optional int32 m_soulid = 3;
    if (has_m_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulid());
    }

    // optional int32 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_successrate = 6;
    if (has_m_successrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_successrate());
    }

    // optional int32 m_downlv = 7;
    if (has_m_downlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_downlv());
    }

  }
  // repeated .proto_ff.E_FacadeSoullvAttributeDesc m_attribute = 8;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoullv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoullv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoullv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoullv::MergeFrom(const E_FacadeSoullv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_soulllv()) {
      set_m_soulllv(from.m_soulllv());
    }
    if (from.has_m_soulid()) {
      set_m_soulid(from.m_soulid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_successrate()) {
      set_m_successrate(from.m_successrate());
    }
    if (from.has_m_downlv()) {
      set_m_downlv(from.m_downlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoullv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoullv::CopyFrom(const E_FacadeSoullv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoullv::IsInitialized() const {

  return true;
}

void E_FacadeSoullv::Swap(E_FacadeSoullv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_soulllv_, other->m_soulllv_);
    std::swap(m_soulid_, other->m_soulid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_successrate_, other->m_successrate_);
    std::swap(m_downlv_, other->m_downlv_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoullv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoullv_descriptor_;
  metadata.reflection = E_FacadeSoullv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeSoullv::kEFacadeSoullvListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeSoullv::Sheet_FacadeSoullv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeSoullv::InitAsDefaultInstance() {
}

Sheet_FacadeSoullv::Sheet_FacadeSoullv(const Sheet_FacadeSoullv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeSoullv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeSoullv::~Sheet_FacadeSoullv() {
  SharedDtor();
}

void Sheet_FacadeSoullv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeSoullv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeSoullv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeSoullv_descriptor_;
}

const Sheet_FacadeSoullv& Sheet_FacadeSoullv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeSoullv* Sheet_FacadeSoullv::default_instance_ = NULL;

Sheet_FacadeSoullv* Sheet_FacadeSoullv::New() const {
  return new Sheet_FacadeSoullv;
}

void Sheet_FacadeSoullv::Clear() {
  e_facadesoullv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeSoullv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeSoullv E_FacadeSoullv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeSoullv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadesoullv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeSoullv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeSoullv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeSoullv E_FacadeSoullv_List = 1;
  for (int i = 0; i < this->e_facadesoullv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadesoullv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeSoullv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeSoullv E_FacadeSoullv_List = 1;
  for (int i = 0; i < this->e_facadesoullv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadesoullv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeSoullv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeSoullv E_FacadeSoullv_List = 1;
  total_size += 1 * this->e_facadesoullv_list_size();
  for (int i = 0; i < this->e_facadesoullv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadesoullv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeSoullv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeSoullv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeSoullv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeSoullv::MergeFrom(const Sheet_FacadeSoullv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadesoullv_list_.MergeFrom(from.e_facadesoullv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeSoullv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeSoullv::CopyFrom(const Sheet_FacadeSoullv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeSoullv::IsInitialized() const {

  return true;
}

void Sheet_FacadeSoullv::Swap(Sheet_FacadeSoullv* other) {
  if (other != this) {
    e_facadesoullv_list_.Swap(&other->e_facadesoullv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeSoullv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeSoullv_descriptor_;
  metadata.reflection = Sheet_FacadeSoullv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FacadeSoulachievement::kMIdFieldNumber;
const int E_FacadeSoulachievement::kMSoulidFieldNumber;
const int E_FacadeSoulachievement::kMTypeFieldNumber;
const int E_FacadeSoulachievement::kMParamaFieldNumber;
const int E_FacadeSoulachievement::kMItemidFieldNumber;
const int E_FacadeSoulachievement::kMNumFieldNumber;
#endif  // !_MSC_VER

E_FacadeSoulachievement::E_FacadeSoulachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FacadeSoulachievement::InitAsDefaultInstance() {
}

E_FacadeSoulachievement::E_FacadeSoulachievement(const E_FacadeSoulachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FacadeSoulachievement::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_soulid_ = 0;
  m_type_ = 0;
  m_parama_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FacadeSoulachievement::~E_FacadeSoulachievement() {
  SharedDtor();
}

void E_FacadeSoulachievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FacadeSoulachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FacadeSoulachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FacadeSoulachievement_descriptor_;
}

const E_FacadeSoulachievement& E_FacadeSoulachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

E_FacadeSoulachievement* E_FacadeSoulachievement::default_instance_ = NULL;

E_FacadeSoulachievement* E_FacadeSoulachievement::New() const {
  return new E_FacadeSoulachievement;
}

void E_FacadeSoulachievement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_soulid_ = 0;
    m_type_ = 0;
    m_parama_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FacadeSoulachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_soulid;
        break;
      }

      // optional int32 m_soulid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_soulid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_soulid_)));
          set_has_m_soulid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_parama;
        break;
      }

      // optional int32 m_parama = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parama_)));
          set_has_m_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FacadeSoulachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_soulid = 2;
  if (has_m_soulid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_soulid(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_parama = 4;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_parama(), output);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FacadeSoulachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_soulid = 2;
  if (has_m_soulid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_soulid(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_parama = 4;
  if (has_m_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_parama(), target);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FacadeSoulachievement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_soulid = 2;
    if (has_m_soulid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_soulid());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_parama = 4;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parama());
    }

    // optional int32 m_itemid = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 6;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FacadeSoulachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FacadeSoulachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FacadeSoulachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FacadeSoulachievement::MergeFrom(const E_FacadeSoulachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_soulid()) {
      set_m_soulid(from.m_soulid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FacadeSoulachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FacadeSoulachievement::CopyFrom(const E_FacadeSoulachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FacadeSoulachievement::IsInitialized() const {

  return true;
}

void E_FacadeSoulachievement::Swap(E_FacadeSoulachievement* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_soulid_, other->m_soulid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FacadeSoulachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FacadeSoulachievement_descriptor_;
  metadata.reflection = E_FacadeSoulachievement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FacadeSoulachievement::kEFacadeSoulachievementListFieldNumber;
#endif  // !_MSC_VER

Sheet_FacadeSoulachievement::Sheet_FacadeSoulachievement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FacadeSoulachievement::InitAsDefaultInstance() {
}

Sheet_FacadeSoulachievement::Sheet_FacadeSoulachievement(const Sheet_FacadeSoulachievement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FacadeSoulachievement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FacadeSoulachievement::~Sheet_FacadeSoulachievement() {
  SharedDtor();
}

void Sheet_FacadeSoulachievement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FacadeSoulachievement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FacadeSoulachievement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FacadeSoulachievement_descriptor_;
}

const Sheet_FacadeSoulachievement& Sheet_FacadeSoulachievement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_facade_2eproto();
  return *default_instance_;
}

Sheet_FacadeSoulachievement* Sheet_FacadeSoulachievement::default_instance_ = NULL;

Sheet_FacadeSoulachievement* Sheet_FacadeSoulachievement::New() const {
  return new Sheet_FacadeSoulachievement;
}

void Sheet_FacadeSoulachievement::Clear() {
  e_facadesoulachievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FacadeSoulachievement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FacadeSoulachievement E_FacadeSoulachievement_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FacadeSoulachievement_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_facadesoulachievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FacadeSoulachievement_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FacadeSoulachievement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FacadeSoulachievement E_FacadeSoulachievement_List = 1;
  for (int i = 0; i < this->e_facadesoulachievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_facadesoulachievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FacadeSoulachievement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FacadeSoulachievement E_FacadeSoulachievement_List = 1;
  for (int i = 0; i < this->e_facadesoulachievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_facadesoulachievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FacadeSoulachievement::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FacadeSoulachievement E_FacadeSoulachievement_List = 1;
  total_size += 1 * this->e_facadesoulachievement_list_size();
  for (int i = 0; i < this->e_facadesoulachievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_facadesoulachievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FacadeSoulachievement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FacadeSoulachievement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FacadeSoulachievement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FacadeSoulachievement::MergeFrom(const Sheet_FacadeSoulachievement& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_facadesoulachievement_list_.MergeFrom(from.e_facadesoulachievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FacadeSoulachievement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FacadeSoulachievement::CopyFrom(const Sheet_FacadeSoulachievement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FacadeSoulachievement::IsInitialized() const {

  return true;
}

void Sheet_FacadeSoulachievement::Swap(Sheet_FacadeSoulachievement* other) {
  if (other != this) {
    e_facadesoulachievement_list_.Swap(&other->e_facadesoulachievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FacadeSoulachievement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FacadeSoulachievement_descriptor_;
  metadata.reflection = Sheet_FacadeSoulachievement_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
