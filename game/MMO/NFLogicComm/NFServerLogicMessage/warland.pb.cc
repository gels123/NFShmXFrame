// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: warland.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "warland.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* warlandconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  warlandconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_warlandconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_warlandconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* warlandmultiKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  warlandmultiKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_warlandmultiKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_warlandmultiKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* warlandrankreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  warlandrankreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_warlandrankreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_warlandrankreward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_warland_2eproto() {
  protobuf_AddDesc_warland_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "warland.proto");
  GOOGLE_CHECK(file != NULL);
  warlandconstant_descriptor_ = file->message_type(0);
  static const int warlandconstant_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, winscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, scoreareaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, occupyscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, occupycontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, killarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, killcontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, killrangecontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, killrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, skillida_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, skillidb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, guardskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, continuouskillbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, winreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, losereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, preparebuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, preparetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, invincibleskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, allplayerskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, killhelppoint_),
  };
  warlandconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      warlandconstant_descriptor_,
      warlandconstant::default_instance_,
      warlandconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(warlandconstant));
  Sheet_warlandconstant_descriptor_ = file->message_type(1);
  static const int Sheet_warlandconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandconstant, warlandconstant_list_),
  };
  Sheet_warlandconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_warlandconstant_descriptor_,
      Sheet_warlandconstant::default_instance_,
      Sheet_warlandconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_warlandconstant));
  warlandmultiKill_descriptor_ = file->message_type(2);
  static const int warlandmultiKill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, multikillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, multikillicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, endmultikillscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, endmultikillpoint_),
  };
  warlandmultiKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      warlandmultiKill_descriptor_,
      warlandmultiKill::default_instance_,
      warlandmultiKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandmultiKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(warlandmultiKill));
  Sheet_warlandmultiKill_descriptor_ = file->message_type(3);
  static const int Sheet_warlandmultiKill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandmultiKill, warlandmultikill_list_),
  };
  Sheet_warlandmultiKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_warlandmultiKill_descriptor_,
      Sheet_warlandmultiKill::default_instance_,
      Sheet_warlandmultiKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandmultiKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandmultiKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_warlandmultiKill));
  warlandrankreward_descriptor_ = file->message_type(4);
  static const int warlandrankreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, minranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, maxranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, reward_),
  };
  warlandrankreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      warlandrankreward_descriptor_,
      warlandrankreward::default_instance_,
      warlandrankreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(warlandrankreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(warlandrankreward));
  Sheet_warlandrankreward_descriptor_ = file->message_type(5);
  static const int Sheet_warlandrankreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandrankreward, warlandrankreward_list_),
  };
  Sheet_warlandrankreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_warlandrankreward_descriptor_,
      Sheet_warlandrankreward::default_instance_,
      Sheet_warlandrankreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandrankreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_warlandrankreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_warlandrankreward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_warland_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    warlandconstant_descriptor_, &warlandconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_warlandconstant_descriptor_, &Sheet_warlandconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    warlandmultiKill_descriptor_, &warlandmultiKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_warlandmultiKill_descriptor_, &Sheet_warlandmultiKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    warlandrankreward_descriptor_, &warlandrankreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_warlandrankreward_descriptor_, &Sheet_warlandrankreward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_warland_2eproto() {
  delete warlandconstant::default_instance_;
  delete warlandconstant_reflection_;
  delete Sheet_warlandconstant::default_instance_;
  delete Sheet_warlandconstant_reflection_;
  delete warlandmultiKill::default_instance_;
  delete warlandmultiKill_reflection_;
  delete Sheet_warlandmultiKill::default_instance_;
  delete Sheet_warlandmultiKill_reflection_;
  delete warlandrankreward::default_instance_;
  delete warlandrankreward_reflection_;
  delete Sheet_warlandrankreward::default_instance_;
  delete Sheet_warlandrankreward_reflection_;
}

void protobuf_AddDesc_warland_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rwarland.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\244\010\n\017warlandconstant\022\022\n\002id\030\001 \001(\005"
    "B\006\302\377\024\002id\022\"\n\010winscore\030\002 \001(\005B\020\302\377\024\014\350\216\267\350\203\234\347\247"
    "\257\345\210\206\022\'\n\013scoreareaID\030\003 \001(\003B\022\302\377\024\016\345\276\227\345\210\206\345\214\272"
    "\345\237\237ID\022=\n\013OccupyScore\030\004 \001(\005B(\302\377\024$\345\234\250\347\247\257\345\210"
    "\206\345\214\272\345\237\237\346\257\217\346\254\241\345\242\236\345\212\240\347\232\204\350\264\241\347\214\256\022D\n\022OccupyCo"
    "ntribution\030\005 \001(\005B(\302\377\024$\345\234\250\347\247\257\345\210\206\345\214\272\345\237\237\346\257\217"
    "\346\254\241\345\242\236\345\212\240\347\232\204\347\247\257\345\210\206\022+\n\010KillArea\030\006 \001(\005B\031\302\377"
    "\024\025\345\207\273\346\235\200\345\242\236\345\212\240\347\232\204\347\247\257\345\210\206\0223\n\020KillContribut"
    "ion\030\007 \001(\005B\031\302\377\024\025\345\207\273\346\235\200\345\242\236\345\212\240\347\232\204\350\264\241\347\214\256\022>\n\025"
    "KillRangeContribution\030\010 \001(\005B\037\302\377\024\033\345\207\273\346\235\200\350"
    "\214\203\345\233\264\345\242\236\345\212\240\347\232\204\350\264\241\347\214\256\022)\n\tKillRange\030\t \001(\005B"
    "\026\302\377\024\022\345\207\273\346\235\200\350\264\241\347\214\256\350\214\203\345\233\264\022/\n\010SkillIdA\030\n \001("
    "\003B\035\302\377\024\031\344\270\200\345\261\202\345\256\210\346\212\244\345\242\236\345\212\240skillid\0222\n\010Skil"
    "lIdB\030\013 \001(\003B \302\377\024\034\344\272\214\345\261\202\345\256\210\346\212\244\345\242\236\345\212\240\347\232\204ski"
    "llid\0220\n\014GuardskillId\030\014 \001(\003B\032\302\377\024\026\351\251\273\345\256\210\345\256"
    "\210\346\212\244\347\232\204skillID\0225\n\024ContinuousKillBuffId\030\r"
    " \001(\tB\027\302\377\024\017\350\277\236\346\235\200\347\232\204buffID\220\301\024P\0226\n\tWinRewa"
    "rd\030\016 \001(\tB#\302\377\024\033\347\273\223\347\256\227\346\227\266\350\203\234\345\210\251\346\226\271\347\232\204\345\245\226\345\212"
    "\261\220\301\024P\0227\n\nLoseReward\030\017 \001(\tB#\302\377\024\033\347\273\223\347\256\227\346\227\266"
    "\345\244\261\350\264\245\346\226\271\347\232\204\345\245\226\345\212\261\220\301\024P\022,\n\013PrepareBuff\030\020 "
    "\001(\003B\027\302\377\024\023\345\207\206\345\244\207\351\230\266\346\256\265skillid\022R\n\013PrepareT"
    "ime\030\021 \001(\005B=\302\377\0249\345\207\206\345\244\207\351\230\266\346\256\265\346\227\266\351\225\277\357\274\210\344\275\215\344"
    "\272\216\346\264\273\345\212\250\345\274\200\345\247\213\345\211\215\357\274\214\345\215\225\344\275\215\347\247\222\357\274\211\0225\n\021invi"
    "ncibleSkillId\030\022 \001(\003B\032\302\377\024\026\345\274\261\351\270\241\347\216\251\345\256\266\346\227\240"
    "\346\225\214BUFF\0224\n\020allplayerSkillId\030\023 \001(\003B\032\302\377\024\026\346"
    "\211\200\346\234\211\347\216\251\345\256\266\345\207\217\344\274\244BUFF\0220\n\rkillHelpPoint\030\024"
    " \001(\005B\031\302\377\024\025\345\212\251\346\224\273\350\216\267\345\276\227\347\232\204\350\264\241\347\214\256\"V\n\025Sheet"
    "_warlandconstant\022=\n\024warlandconstant_List"
    "\030\001 \003(\0132\031.proto_ff.warlandconstantB\004\210\301\024\024\""
    "\320\001\n\020warlandmultiKill\022#\n\014multiKillNum\030\001 \001"
    "(\005B\r\302\377\024\t\350\277\236\346\235\200\346\225\260\0221\n\rmultiKillIcon\030\002 \001(\t"
    "B\032\302\377\024\022\350\277\236\346\235\200\347\247\260\345\217\267\345\233\276\346\240\207\220\301\024<\0221\n\021endMulti"
    "Killscore\030\003 \001(\005B\026\302\377\024\022\347\273\210\347\273\223\350\277\236\346\235\200\347\247\257\345\210\206\022"
    "1\n\021endMultiKillPoint\030\004 \001(\005B\026\302\377\024\022\347\273\210\347\273\223\350\277"
    "\236\346\235\200\350\264\241\347\214\256\"Y\n\026Sheet_warlandmultiKill\022\?\n\025"
    "warlandmultiKill_List\030\001 \003(\0132\032.proto_ff.w"
    "arlandmultiKillB\004\210\301\024\024\"\350\001\n\021warlandrankrew"
    "ard\022*\n\007stageId\030\001 \001(\005B\031\302\377\024\025\351\230\265\350\220\245\346\210\230\346\216\222\345\220"
    "\215\345\245\226\345\212\261\022\'\n\nMinRanking\030\002 \001(\005B\023\302\377\024\017\346\234\200\344\275\216\346"
    "\216\222\345\220\215\345\200\274\022\'\n\nMaxRanking\030\003 \001(\005B\023\302\377\024\017\346\234\200\351\253\230"
    "\346\216\222\345\220\215\345\200\274\022U\n\006Reward\030\004 \001(\tBE\302\377\024<\345\245\226\345\212\261\347\211\251"
    "\345\223\201\357\274\210\347\211\251\345\223\201ID\357\274\214\346\225\260\351\207\217\357\274\233\347\211\251\345\223\201id\357\274\214\346\225\260"
    "\351\207\217\342\200\246..\357\274\211\220\301\024\214\001\"\\\n\027Sheet_warlandrankrew"
    "ard\022A\n\026warlandrankreward_List\030\001 \003(\0132\033.pr"
    "oto_ff.warlandrankrewardB\004\210\301\024\024", 1830);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "warland.proto", &protobuf_RegisterTypes);
  warlandconstant::default_instance_ = new warlandconstant();
  Sheet_warlandconstant::default_instance_ = new Sheet_warlandconstant();
  warlandmultiKill::default_instance_ = new warlandmultiKill();
  Sheet_warlandmultiKill::default_instance_ = new Sheet_warlandmultiKill();
  warlandrankreward::default_instance_ = new warlandrankreward();
  Sheet_warlandrankreward::default_instance_ = new Sheet_warlandrankreward();
  warlandconstant::default_instance_->InitAsDefaultInstance();
  Sheet_warlandconstant::default_instance_->InitAsDefaultInstance();
  warlandmultiKill::default_instance_->InitAsDefaultInstance();
  Sheet_warlandmultiKill::default_instance_->InitAsDefaultInstance();
  warlandrankreward::default_instance_->InitAsDefaultInstance();
  Sheet_warlandrankreward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_warland_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_warland_2eproto {
  StaticDescriptorInitializer_warland_2eproto() {
    protobuf_AddDesc_warland_2eproto();
  }
} static_descriptor_initializer_warland_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int warlandconstant::kIdFieldNumber;
const int warlandconstant::kWinscoreFieldNumber;
const int warlandconstant::kScoreareaIDFieldNumber;
const int warlandconstant::kOccupyScoreFieldNumber;
const int warlandconstant::kOccupyContributionFieldNumber;
const int warlandconstant::kKillAreaFieldNumber;
const int warlandconstant::kKillContributionFieldNumber;
const int warlandconstant::kKillRangeContributionFieldNumber;
const int warlandconstant::kKillRangeFieldNumber;
const int warlandconstant::kSkillIdAFieldNumber;
const int warlandconstant::kSkillIdBFieldNumber;
const int warlandconstant::kGuardskillIdFieldNumber;
const int warlandconstant::kContinuousKillBuffIdFieldNumber;
const int warlandconstant::kWinRewardFieldNumber;
const int warlandconstant::kLoseRewardFieldNumber;
const int warlandconstant::kPrepareBuffFieldNumber;
const int warlandconstant::kPrepareTimeFieldNumber;
const int warlandconstant::kInvincibleSkillIdFieldNumber;
const int warlandconstant::kAllplayerSkillIdFieldNumber;
const int warlandconstant::kKillHelpPointFieldNumber;
#endif  // !_MSC_VER

warlandconstant::warlandconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void warlandconstant::InitAsDefaultInstance() {
}

warlandconstant::warlandconstant(const warlandconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void warlandconstant::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  winscore_ = 0;
  scoreareaid_ = GOOGLE_LONGLONG(0);
  occupyscore_ = 0;
  occupycontribution_ = 0;
  killarea_ = 0;
  killcontribution_ = 0;
  killrangecontribution_ = 0;
  killrange_ = 0;
  skillida_ = GOOGLE_LONGLONG(0);
  skillidb_ = GOOGLE_LONGLONG(0);
  guardskillid_ = GOOGLE_LONGLONG(0);
  continuouskillbuffid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  losereward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preparebuff_ = GOOGLE_LONGLONG(0);
  preparetime_ = 0;
  invincibleskillid_ = GOOGLE_LONGLONG(0);
  allplayerskillid_ = GOOGLE_LONGLONG(0);
  killhelppoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

warlandconstant::~warlandconstant() {
  SharedDtor();
}

void warlandconstant::SharedDtor() {
  if (continuouskillbuffid_ != &::google::protobuf::internal::kEmptyString) {
    delete continuouskillbuffid_;
  }
  if (winreward_ != &::google::protobuf::internal::kEmptyString) {
    delete winreward_;
  }
  if (losereward_ != &::google::protobuf::internal::kEmptyString) {
    delete losereward_;
  }
  if (this != default_instance_) {
  }
}

void warlandconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* warlandconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return warlandconstant_descriptor_;
}

const warlandconstant& warlandconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

warlandconstant* warlandconstant::default_instance_ = NULL;

warlandconstant* warlandconstant::New() const {
  return new warlandconstant;
}

void warlandconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    winscore_ = 0;
    scoreareaid_ = GOOGLE_LONGLONG(0);
    occupyscore_ = 0;
    occupycontribution_ = 0;
    killarea_ = 0;
    killcontribution_ = 0;
    killrangecontribution_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killrange_ = 0;
    skillida_ = GOOGLE_LONGLONG(0);
    skillidb_ = GOOGLE_LONGLONG(0);
    guardskillid_ = GOOGLE_LONGLONG(0);
    if (has_continuouskillbuffid()) {
      if (continuouskillbuffid_ != &::google::protobuf::internal::kEmptyString) {
        continuouskillbuffid_->clear();
      }
    }
    if (has_winreward()) {
      if (winreward_ != &::google::protobuf::internal::kEmptyString) {
        winreward_->clear();
      }
    }
    if (has_losereward()) {
      if (losereward_ != &::google::protobuf::internal::kEmptyString) {
        losereward_->clear();
      }
    }
    preparebuff_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    preparetime_ = 0;
    invincibleskillid_ = GOOGLE_LONGLONG(0);
    allplayerskillid_ = GOOGLE_LONGLONG(0);
    killhelppoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool warlandconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winscore;
        break;
      }

      // optional int32 winscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winscore_)));
          set_has_winscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scoreareaID;
        break;
      }

      // optional int64 scoreareaID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoreareaID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scoreareaid_)));
          set_has_scoreareaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OccupyScore;
        break;
      }

      // optional int32 OccupyScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OccupyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupyscore_)));
          set_has_occupyscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OccupyContribution;
        break;
      }

      // optional int32 OccupyContribution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OccupyContribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupycontribution_)));
          set_has_occupycontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_KillArea;
        break;
      }

      // optional int32 KillArea = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killarea_)));
          set_has_killarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_KillContribution;
        break;
      }

      // optional int32 KillContribution = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillContribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killcontribution_)));
          set_has_killcontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_KillRangeContribution;
        break;
      }

      // optional int32 KillRangeContribution = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillRangeContribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killrangecontribution_)));
          set_has_killrangecontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_KillRange;
        break;
      }

      // optional int32 KillRange = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killrange_)));
          set_has_killrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SkillIdA;
        break;
      }

      // optional int64 SkillIdA = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillIdA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillida_)));
          set_has_skillida();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SkillIdB;
        break;
      }

      // optional int64 SkillIdB = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillIdB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillidb_)));
          set_has_skillidb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_GuardskillId;
        break;
      }

      // optional int64 GuardskillId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuardskillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guardskillid_)));
          set_has_guardskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_ContinuousKillBuffId;
        break;
      }

      // optional string ContinuousKillBuffId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContinuousKillBuffId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_continuouskillbuffid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->continuouskillbuffid().data(), this->continuouskillbuffid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_WinReward;
        break;
      }

      // optional string WinReward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WinReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->winreward().data(), this->winreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_LoseReward;
        break;
      }

      // optional string LoseReward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LoseReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_losereward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->losereward().data(), this->losereward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PrepareBuff;
        break;
      }

      // optional int64 PrepareBuff = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrepareBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &preparebuff_)));
          set_has_preparebuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_PrepareTime;
        break;
      }

      // optional int32 PrepareTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrepareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preparetime_)));
          set_has_preparetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_invincibleSkillId;
        break;
      }

      // optional int64 invincibleSkillId = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invincibleSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &invincibleskillid_)));
          set_has_invincibleskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_allplayerSkillId;
        break;
      }

      // optional int64 allplayerSkillId = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allplayerSkillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &allplayerskillid_)));
          set_has_allplayerskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_killHelpPoint;
        break;
      }

      // optional int32 killHelpPoint = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killHelpPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killhelppoint_)));
          set_has_killhelppoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void warlandconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 winscore = 2;
  if (has_winscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->winscore(), output);
  }

  // optional int64 scoreareaID = 3;
  if (has_scoreareaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->scoreareaid(), output);
  }

  // optional int32 OccupyScore = 4;
  if (has_occupyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->occupyscore(), output);
  }

  // optional int32 OccupyContribution = 5;
  if (has_occupycontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->occupycontribution(), output);
  }

  // optional int32 KillArea = 6;
  if (has_killarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->killarea(), output);
  }

  // optional int32 KillContribution = 7;
  if (has_killcontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->killcontribution(), output);
  }

  // optional int32 KillRangeContribution = 8;
  if (has_killrangecontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->killrangecontribution(), output);
  }

  // optional int32 KillRange = 9;
  if (has_killrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->killrange(), output);
  }

  // optional int64 SkillIdA = 10;
  if (has_skillida()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->skillida(), output);
  }

  // optional int64 SkillIdB = 11;
  if (has_skillidb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->skillidb(), output);
  }

  // optional int64 GuardskillId = 12;
  if (has_guardskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->guardskillid(), output);
  }

  // optional string ContinuousKillBuffId = 13;
  if (has_continuouskillbuffid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuouskillbuffid().data(), this->continuouskillbuffid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->continuouskillbuffid(), output);
  }

  // optional string WinReward = 14;
  if (has_winreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winreward().data(), this->winreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->winreward(), output);
  }

  // optional string LoseReward = 15;
  if (has_losereward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->losereward().data(), this->losereward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->losereward(), output);
  }

  // optional int64 PrepareBuff = 16;
  if (has_preparebuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->preparebuff(), output);
  }

  // optional int32 PrepareTime = 17;
  if (has_preparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->preparetime(), output);
  }

  // optional int64 invincibleSkillId = 18;
  if (has_invincibleskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->invincibleskillid(), output);
  }

  // optional int64 allplayerSkillId = 19;
  if (has_allplayerskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->allplayerskillid(), output);
  }

  // optional int32 killHelpPoint = 20;
  if (has_killhelppoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->killhelppoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* warlandconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 winscore = 2;
  if (has_winscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->winscore(), target);
  }

  // optional int64 scoreareaID = 3;
  if (has_scoreareaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->scoreareaid(), target);
  }

  // optional int32 OccupyScore = 4;
  if (has_occupyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->occupyscore(), target);
  }

  // optional int32 OccupyContribution = 5;
  if (has_occupycontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->occupycontribution(), target);
  }

  // optional int32 KillArea = 6;
  if (has_killarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->killarea(), target);
  }

  // optional int32 KillContribution = 7;
  if (has_killcontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->killcontribution(), target);
  }

  // optional int32 KillRangeContribution = 8;
  if (has_killrangecontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->killrangecontribution(), target);
  }

  // optional int32 KillRange = 9;
  if (has_killrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->killrange(), target);
  }

  // optional int64 SkillIdA = 10;
  if (has_skillida()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->skillida(), target);
  }

  // optional int64 SkillIdB = 11;
  if (has_skillidb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->skillidb(), target);
  }

  // optional int64 GuardskillId = 12;
  if (has_guardskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->guardskillid(), target);
  }

  // optional string ContinuousKillBuffId = 13;
  if (has_continuouskillbuffid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->continuouskillbuffid().data(), this->continuouskillbuffid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->continuouskillbuffid(), target);
  }

  // optional string WinReward = 14;
  if (has_winreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->winreward().data(), this->winreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->winreward(), target);
  }

  // optional string LoseReward = 15;
  if (has_losereward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->losereward().data(), this->losereward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->losereward(), target);
  }

  // optional int64 PrepareBuff = 16;
  if (has_preparebuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->preparebuff(), target);
  }

  // optional int32 PrepareTime = 17;
  if (has_preparetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->preparetime(), target);
  }

  // optional int64 invincibleSkillId = 18;
  if (has_invincibleskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->invincibleskillid(), target);
  }

  // optional int64 allplayerSkillId = 19;
  if (has_allplayerskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->allplayerskillid(), target);
  }

  // optional int32 killHelpPoint = 20;
  if (has_killhelppoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->killhelppoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int warlandconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 winscore = 2;
    if (has_winscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winscore());
    }

    // optional int64 scoreareaID = 3;
    if (has_scoreareaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scoreareaid());
    }

    // optional int32 OccupyScore = 4;
    if (has_occupyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupyscore());
    }

    // optional int32 OccupyContribution = 5;
    if (has_occupycontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupycontribution());
    }

    // optional int32 KillArea = 6;
    if (has_killarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killarea());
    }

    // optional int32 KillContribution = 7;
    if (has_killcontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killcontribution());
    }

    // optional int32 KillRangeContribution = 8;
    if (has_killrangecontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killrangecontribution());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 KillRange = 9;
    if (has_killrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killrange());
    }

    // optional int64 SkillIdA = 10;
    if (has_skillida()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillida());
    }

    // optional int64 SkillIdB = 11;
    if (has_skillidb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillidb());
    }

    // optional int64 GuardskillId = 12;
    if (has_guardskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guardskillid());
    }

    // optional string ContinuousKillBuffId = 13;
    if (has_continuouskillbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->continuouskillbuffid());
    }

    // optional string WinReward = 14;
    if (has_winreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winreward());
    }

    // optional string LoseReward = 15;
    if (has_losereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->losereward());
    }

    // optional int64 PrepareBuff = 16;
    if (has_preparebuff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->preparebuff());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 PrepareTime = 17;
    if (has_preparetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preparetime());
    }

    // optional int64 invincibleSkillId = 18;
    if (has_invincibleskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->invincibleskillid());
    }

    // optional int64 allplayerSkillId = 19;
    if (has_allplayerskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->allplayerskillid());
    }

    // optional int32 killHelpPoint = 20;
    if (has_killhelppoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killhelppoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void warlandconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const warlandconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const warlandconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void warlandconstant::MergeFrom(const warlandconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_winscore()) {
      set_winscore(from.winscore());
    }
    if (from.has_scoreareaid()) {
      set_scoreareaid(from.scoreareaid());
    }
    if (from.has_occupyscore()) {
      set_occupyscore(from.occupyscore());
    }
    if (from.has_occupycontribution()) {
      set_occupycontribution(from.occupycontribution());
    }
    if (from.has_killarea()) {
      set_killarea(from.killarea());
    }
    if (from.has_killcontribution()) {
      set_killcontribution(from.killcontribution());
    }
    if (from.has_killrangecontribution()) {
      set_killrangecontribution(from.killrangecontribution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killrange()) {
      set_killrange(from.killrange());
    }
    if (from.has_skillida()) {
      set_skillida(from.skillida());
    }
    if (from.has_skillidb()) {
      set_skillidb(from.skillidb());
    }
    if (from.has_guardskillid()) {
      set_guardskillid(from.guardskillid());
    }
    if (from.has_continuouskillbuffid()) {
      set_continuouskillbuffid(from.continuouskillbuffid());
    }
    if (from.has_winreward()) {
      set_winreward(from.winreward());
    }
    if (from.has_losereward()) {
      set_losereward(from.losereward());
    }
    if (from.has_preparebuff()) {
      set_preparebuff(from.preparebuff());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_preparetime()) {
      set_preparetime(from.preparetime());
    }
    if (from.has_invincibleskillid()) {
      set_invincibleskillid(from.invincibleskillid());
    }
    if (from.has_allplayerskillid()) {
      set_allplayerskillid(from.allplayerskillid());
    }
    if (from.has_killhelppoint()) {
      set_killhelppoint(from.killhelppoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void warlandconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void warlandconstant::CopyFrom(const warlandconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool warlandconstant::IsInitialized() const {

  return true;
}

void warlandconstant::Swap(warlandconstant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(winscore_, other->winscore_);
    std::swap(scoreareaid_, other->scoreareaid_);
    std::swap(occupyscore_, other->occupyscore_);
    std::swap(occupycontribution_, other->occupycontribution_);
    std::swap(killarea_, other->killarea_);
    std::swap(killcontribution_, other->killcontribution_);
    std::swap(killrangecontribution_, other->killrangecontribution_);
    std::swap(killrange_, other->killrange_);
    std::swap(skillida_, other->skillida_);
    std::swap(skillidb_, other->skillidb_);
    std::swap(guardskillid_, other->guardskillid_);
    std::swap(continuouskillbuffid_, other->continuouskillbuffid_);
    std::swap(winreward_, other->winreward_);
    std::swap(losereward_, other->losereward_);
    std::swap(preparebuff_, other->preparebuff_);
    std::swap(preparetime_, other->preparetime_);
    std::swap(invincibleskillid_, other->invincibleskillid_);
    std::swap(allplayerskillid_, other->allplayerskillid_);
    std::swap(killhelppoint_, other->killhelppoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata warlandconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = warlandconstant_descriptor_;
  metadata.reflection = warlandconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_warlandconstant::kWarlandconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_warlandconstant::Sheet_warlandconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_warlandconstant::InitAsDefaultInstance() {
}

Sheet_warlandconstant::Sheet_warlandconstant(const Sheet_warlandconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_warlandconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_warlandconstant::~Sheet_warlandconstant() {
  SharedDtor();
}

void Sheet_warlandconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_warlandconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_warlandconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_warlandconstant_descriptor_;
}

const Sheet_warlandconstant& Sheet_warlandconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

Sheet_warlandconstant* Sheet_warlandconstant::default_instance_ = NULL;

Sheet_warlandconstant* Sheet_warlandconstant::New() const {
  return new Sheet_warlandconstant;
}

void Sheet_warlandconstant::Clear() {
  warlandconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_warlandconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.warlandconstant warlandconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warlandconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warlandconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_warlandconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_warlandconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.warlandconstant warlandconstant_List = 1;
  for (int i = 0; i < this->warlandconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warlandconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_warlandconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.warlandconstant warlandconstant_List = 1;
  for (int i = 0; i < this->warlandconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warlandconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_warlandconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.warlandconstant warlandconstant_List = 1;
  total_size += 1 * this->warlandconstant_list_size();
  for (int i = 0; i < this->warlandconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warlandconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_warlandconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_warlandconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_warlandconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_warlandconstant::MergeFrom(const Sheet_warlandconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  warlandconstant_list_.MergeFrom(from.warlandconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_warlandconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_warlandconstant::CopyFrom(const Sheet_warlandconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_warlandconstant::IsInitialized() const {

  return true;
}

void Sheet_warlandconstant::Swap(Sheet_warlandconstant* other) {
  if (other != this) {
    warlandconstant_list_.Swap(&other->warlandconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_warlandconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_warlandconstant_descriptor_;
  metadata.reflection = Sheet_warlandconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int warlandmultiKill::kMultiKillNumFieldNumber;
const int warlandmultiKill::kMultiKillIconFieldNumber;
const int warlandmultiKill::kEndMultiKillscoreFieldNumber;
const int warlandmultiKill::kEndMultiKillPointFieldNumber;
#endif  // !_MSC_VER

warlandmultiKill::warlandmultiKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void warlandmultiKill::InitAsDefaultInstance() {
}

warlandmultiKill::warlandmultiKill(const warlandmultiKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void warlandmultiKill::SharedCtor() {
  _cached_size_ = 0;
  multikillnum_ = 0;
  multikillicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endmultikillscore_ = 0;
  endmultikillpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

warlandmultiKill::~warlandmultiKill() {
  SharedDtor();
}

void warlandmultiKill::SharedDtor() {
  if (multikillicon_ != &::google::protobuf::internal::kEmptyString) {
    delete multikillicon_;
  }
  if (this != default_instance_) {
  }
}

void warlandmultiKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* warlandmultiKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return warlandmultiKill_descriptor_;
}

const warlandmultiKill& warlandmultiKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

warlandmultiKill* warlandmultiKill::default_instance_ = NULL;

warlandmultiKill* warlandmultiKill::New() const {
  return new warlandmultiKill;
}

void warlandmultiKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    multikillnum_ = 0;
    if (has_multikillicon()) {
      if (multikillicon_ != &::google::protobuf::internal::kEmptyString) {
        multikillicon_->clear();
      }
    }
    endmultikillscore_ = 0;
    endmultikillpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool warlandmultiKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 multiKillNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multikillnum_)));
          set_has_multikillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_multiKillIcon;
        break;
      }

      // optional string multiKillIcon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_multiKillIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multikillicon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multikillicon().data(), this->multikillicon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endMultiKillscore;
        break;
      }

      // optional int32 endMultiKillscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endMultiKillscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endmultikillscore_)));
          set_has_endmultikillscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endMultiKillPoint;
        break;
      }

      // optional int32 endMultiKillPoint = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endMultiKillPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endmultikillpoint_)));
          set_has_endmultikillpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void warlandmultiKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 multiKillNum = 1;
  if (has_multikillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->multikillnum(), output);
  }

  // optional string multiKillIcon = 2;
  if (has_multikillicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multikillicon().data(), this->multikillicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->multikillicon(), output);
  }

  // optional int32 endMultiKillscore = 3;
  if (has_endmultikillscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endmultikillscore(), output);
  }

  // optional int32 endMultiKillPoint = 4;
  if (has_endmultikillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endmultikillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* warlandmultiKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 multiKillNum = 1;
  if (has_multikillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->multikillnum(), target);
  }

  // optional string multiKillIcon = 2;
  if (has_multikillicon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multikillicon().data(), this->multikillicon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->multikillicon(), target);
  }

  // optional int32 endMultiKillscore = 3;
  if (has_endmultikillscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endmultikillscore(), target);
  }

  // optional int32 endMultiKillPoint = 4;
  if (has_endmultikillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endmultikillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int warlandmultiKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 multiKillNum = 1;
    if (has_multikillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multikillnum());
    }

    // optional string multiKillIcon = 2;
    if (has_multikillicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multikillicon());
    }

    // optional int32 endMultiKillscore = 3;
    if (has_endmultikillscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endmultikillscore());
    }

    // optional int32 endMultiKillPoint = 4;
    if (has_endmultikillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endmultikillpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void warlandmultiKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const warlandmultiKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const warlandmultiKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void warlandmultiKill::MergeFrom(const warlandmultiKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multikillnum()) {
      set_multikillnum(from.multikillnum());
    }
    if (from.has_multikillicon()) {
      set_multikillicon(from.multikillicon());
    }
    if (from.has_endmultikillscore()) {
      set_endmultikillscore(from.endmultikillscore());
    }
    if (from.has_endmultikillpoint()) {
      set_endmultikillpoint(from.endmultikillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void warlandmultiKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void warlandmultiKill::CopyFrom(const warlandmultiKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool warlandmultiKill::IsInitialized() const {

  return true;
}

void warlandmultiKill::Swap(warlandmultiKill* other) {
  if (other != this) {
    std::swap(multikillnum_, other->multikillnum_);
    std::swap(multikillicon_, other->multikillicon_);
    std::swap(endmultikillscore_, other->endmultikillscore_);
    std::swap(endmultikillpoint_, other->endmultikillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata warlandmultiKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = warlandmultiKill_descriptor_;
  metadata.reflection = warlandmultiKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_warlandmultiKill::kWarlandmultiKillListFieldNumber;
#endif  // !_MSC_VER

Sheet_warlandmultiKill::Sheet_warlandmultiKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_warlandmultiKill::InitAsDefaultInstance() {
}

Sheet_warlandmultiKill::Sheet_warlandmultiKill(const Sheet_warlandmultiKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_warlandmultiKill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_warlandmultiKill::~Sheet_warlandmultiKill() {
  SharedDtor();
}

void Sheet_warlandmultiKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_warlandmultiKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_warlandmultiKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_warlandmultiKill_descriptor_;
}

const Sheet_warlandmultiKill& Sheet_warlandmultiKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

Sheet_warlandmultiKill* Sheet_warlandmultiKill::default_instance_ = NULL;

Sheet_warlandmultiKill* Sheet_warlandmultiKill::New() const {
  return new Sheet_warlandmultiKill;
}

void Sheet_warlandmultiKill::Clear() {
  warlandmultikill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_warlandmultiKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warlandmultiKill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warlandmultikill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_warlandmultiKill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_warlandmultiKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
  for (int i = 0; i < this->warlandmultikill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warlandmultikill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_warlandmultiKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
  for (int i = 0; i < this->warlandmultikill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warlandmultikill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_warlandmultiKill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.warlandmultiKill warlandmultiKill_List = 1;
  total_size += 1 * this->warlandmultikill_list_size();
  for (int i = 0; i < this->warlandmultikill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warlandmultikill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_warlandmultiKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_warlandmultiKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_warlandmultiKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_warlandmultiKill::MergeFrom(const Sheet_warlandmultiKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  warlandmultikill_list_.MergeFrom(from.warlandmultikill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_warlandmultiKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_warlandmultiKill::CopyFrom(const Sheet_warlandmultiKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_warlandmultiKill::IsInitialized() const {

  return true;
}

void Sheet_warlandmultiKill::Swap(Sheet_warlandmultiKill* other) {
  if (other != this) {
    warlandmultikill_list_.Swap(&other->warlandmultikill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_warlandmultiKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_warlandmultiKill_descriptor_;
  metadata.reflection = Sheet_warlandmultiKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int warlandrankreward::kStageIdFieldNumber;
const int warlandrankreward::kMinRankingFieldNumber;
const int warlandrankreward::kMaxRankingFieldNumber;
const int warlandrankreward::kRewardFieldNumber;
#endif  // !_MSC_VER

warlandrankreward::warlandrankreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void warlandrankreward::InitAsDefaultInstance() {
}

warlandrankreward::warlandrankreward(const warlandrankreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void warlandrankreward::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0;
  minranking_ = 0;
  maxranking_ = 0;
  reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

warlandrankreward::~warlandrankreward() {
  SharedDtor();
}

void warlandrankreward::SharedDtor() {
  if (reward_ != &::google::protobuf::internal::kEmptyString) {
    delete reward_;
  }
  if (this != default_instance_) {
  }
}

void warlandrankreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* warlandrankreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return warlandrankreward_descriptor_;
}

const warlandrankreward& warlandrankreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

warlandrankreward* warlandrankreward::default_instance_ = NULL;

warlandrankreward* warlandrankreward::New() const {
  return new warlandrankreward;
}

void warlandrankreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stageid_ = 0;
    minranking_ = 0;
    maxranking_ = 0;
    if (has_reward()) {
      if (reward_ != &::google::protobuf::internal::kEmptyString) {
        reward_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool warlandrankreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stageId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MinRanking;
        break;
      }

      // optional int32 MinRanking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinRanking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minranking_)));
          set_has_minranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxRanking;
        break;
      }

      // optional int32 MaxRanking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxRanking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxranking_)));
          set_has_maxranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        break;
      }

      // optional string Reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reward().data(), this->reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void warlandrankreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stageId = 1;
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stageid(), output);
  }

  // optional int32 MinRanking = 2;
  if (has_minranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minranking(), output);
  }

  // optional int32 MaxRanking = 3;
  if (has_maxranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxranking(), output);
  }

  // optional string Reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* warlandrankreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stageId = 1;
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stageid(), target);
  }

  // optional int32 MinRanking = 2;
  if (has_minranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minranking(), target);
  }

  // optional int32 MaxRanking = 3;
  if (has_maxranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxranking(), target);
  }

  // optional string Reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reward().data(), this->reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int warlandrankreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stageId = 1;
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stageid());
    }

    // optional int32 MinRanking = 2;
    if (has_minranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minranking());
    }

    // optional int32 MaxRanking = 3;
    if (has_maxranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxranking());
    }

    // optional string Reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void warlandrankreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const warlandrankreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const warlandrankreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void warlandrankreward::MergeFrom(const warlandrankreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_minranking()) {
      set_minranking(from.minranking());
    }
    if (from.has_maxranking()) {
      set_maxranking(from.maxranking());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void warlandrankreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void warlandrankreward::CopyFrom(const warlandrankreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool warlandrankreward::IsInitialized() const {

  return true;
}

void warlandrankreward::Swap(warlandrankreward* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(minranking_, other->minranking_);
    std::swap(maxranking_, other->maxranking_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata warlandrankreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = warlandrankreward_descriptor_;
  metadata.reflection = warlandrankreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_warlandrankreward::kWarlandrankrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_warlandrankreward::Sheet_warlandrankreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_warlandrankreward::InitAsDefaultInstance() {
}

Sheet_warlandrankreward::Sheet_warlandrankreward(const Sheet_warlandrankreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_warlandrankreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_warlandrankreward::~Sheet_warlandrankreward() {
  SharedDtor();
}

void Sheet_warlandrankreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_warlandrankreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_warlandrankreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_warlandrankreward_descriptor_;
}

const Sheet_warlandrankreward& Sheet_warlandrankreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_warland_2eproto();
  return *default_instance_;
}

Sheet_warlandrankreward* Sheet_warlandrankreward::default_instance_ = NULL;

Sheet_warlandrankreward* Sheet_warlandrankreward::New() const {
  return new Sheet_warlandrankreward;
}

void Sheet_warlandrankreward::Clear() {
  warlandrankreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_warlandrankreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warlandrankreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warlandrankreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_warlandrankreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_warlandrankreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
  for (int i = 0; i < this->warlandrankreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->warlandrankreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_warlandrankreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
  for (int i = 0; i < this->warlandrankreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->warlandrankreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_warlandrankreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.warlandrankreward warlandrankreward_List = 1;
  total_size += 1 * this->warlandrankreward_list_size();
  for (int i = 0; i < this->warlandrankreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warlandrankreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_warlandrankreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_warlandrankreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_warlandrankreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_warlandrankreward::MergeFrom(const Sheet_warlandrankreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  warlandrankreward_list_.MergeFrom(from.warlandrankreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_warlandrankreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_warlandrankreward::CopyFrom(const Sheet_warlandrankreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_warlandrankreward::IsInitialized() const {

  return true;
}

void Sheet_warlandrankreward::Swap(Sheet_warlandrankreward* other) {
  if (other != this) {
    warlandrankreward_list_.Swap(&other->warlandrankreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_warlandrankreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_warlandrankreward_descriptor_;
  metadata.reflection = Sheet_warlandrankreward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
