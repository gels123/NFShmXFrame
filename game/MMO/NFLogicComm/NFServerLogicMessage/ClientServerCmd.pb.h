// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientServerCmd.proto

#ifndef PROTOBUF_ClientServerCmd_2eproto__INCLUDED
#define PROTOBUF_ClientServerCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClientServerCmd_2eproto();
void protobuf_AssignDesc_ClientServerCmd_2eproto();
void protobuf_ShutdownFile_ClientServerCmd_2eproto();


enum ClientToServerCmd {
  CLIENT_LOGIN_REQ = 1,
  CLIENT_LOGIN_RSP = 2,
  CLIENT_CREATE_ROLE_REQ = 3,
  CLIENT_CREATE_ROLE_RSP = 4,
  CLIENT_QUEUE_POS_REQ = 5,
  CLIENT_QUEUE_POS_RSP = 6,
  CLIENT_QUEUE_CANCAN_REQ = 7,
  CLIENT_QUEUE_CANCAN_RSP = 8,
  CLIENT_RECONNECT_REQ = 9,
  CLIENT_RECONNECT_RSP = 10,
  CLIENT_ENTER_GAME_REQ = 11,
  CLIENT_ENTER_GAME_RSP = 12,
  CLIENT_RET_ROLE_LIST_REQ = 13,
  CLIENT_RET_ROLE_LIST_RSP = 14,
  NOTIFY_CLIENT_CREATURE_CREATE = 101,
  NOTIFY_CLIENT_CREATURE_DESTORY = 102,
  CLIENT_MAX_CMD_ID_VALUE = 5000
};
bool ClientToServerCmd_IsValid(int value);
const ClientToServerCmd ClientToServerCmd_MIN = CLIENT_LOGIN_REQ;
const ClientToServerCmd ClientToServerCmd_MAX = CLIENT_MAX_CMD_ID_VALUE;
const int ClientToServerCmd_ARRAYSIZE = ClientToServerCmd_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientToServerCmd_descriptor();
inline const ::std::string& ClientToServerCmd_Name(ClientToServerCmd value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientToServerCmd_descriptor(), value);
}
inline bool ClientToServerCmd_Parse(
    const ::std::string& name, ClientToServerCmd* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientToServerCmd>(
    ClientToServerCmd_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::ClientToServerCmd>() {
  return ::proto_ff::ClientToServerCmd_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClientServerCmd_2eproto__INCLUDED
