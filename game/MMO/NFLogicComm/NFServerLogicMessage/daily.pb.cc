// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daily.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "daily.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_DailyDaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DailyDaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DailyDaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DailyDaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DailyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DailyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DailyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DailyReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DailyCultivateAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DailyCultivateAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_DailyCultivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_DailyCultivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_DailyCultivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_DailyCultivate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_daily_2eproto() {
  protobuf_AddDesc_daily_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "daily.proto");
  GOOGLE_CHECK(file != NULL);
  E_DailyDaily_descriptor_ = file->message_type(0);
  static const int E_DailyDaily_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_playargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_funciontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_eachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, m_regreward_),
  };
  E_DailyDaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DailyDaily_descriptor_,
      E_DailyDaily::default_instance_,
      E_DailyDaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyDaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DailyDaily));
  Sheet_DailyDaily_descriptor_ = file->message_type(1);
  static const int Sheet_DailyDaily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyDaily, e_dailydaily_list_),
  };
  Sheet_DailyDaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DailyDaily_descriptor_,
      Sheet_DailyDaily::default_instance_,
      Sheet_DailyDaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyDaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyDaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DailyDaily));
  E_DailyReward_descriptor_ = file->message_type(2);
  static const int E_DailyReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, m_activescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, m_rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, m_rewardnum_),
  };
  E_DailyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DailyReward_descriptor_,
      E_DailyReward::default_instance_,
      E_DailyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DailyReward));
  Sheet_DailyReward_descriptor_ = file->message_type(3);
  static const int Sheet_DailyReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyReward, e_dailyreward_list_),
  };
  Sheet_DailyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DailyReward_descriptor_,
      Sheet_DailyReward::default_instance_,
      Sheet_DailyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DailyReward));
  E_DailyCultivateAttributeDesc_descriptor_ = file->message_type(4);
  static const int E_DailyCultivateAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivateAttributeDesc, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivateAttributeDesc, m_value_),
  };
  E_DailyCultivateAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DailyCultivateAttributeDesc_descriptor_,
      E_DailyCultivateAttributeDesc::default_instance_,
      E_DailyCultivateAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivateAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivateAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DailyCultivateAttributeDesc));
  E_DailyCultivate_descriptor_ = file->message_type(5);
  static const int E_DailyCultivate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, m_attribute_),
  };
  E_DailyCultivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_DailyCultivate_descriptor_,
      E_DailyCultivate::default_instance_,
      E_DailyCultivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_DailyCultivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_DailyCultivate));
  Sheet_DailyCultivate_descriptor_ = file->message_type(6);
  static const int Sheet_DailyCultivate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyCultivate, e_dailycultivate_list_),
  };
  Sheet_DailyCultivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_DailyCultivate_descriptor_,
      Sheet_DailyCultivate::default_instance_,
      Sheet_DailyCultivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyCultivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_DailyCultivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_DailyCultivate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_daily_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DailyDaily_descriptor_, &E_DailyDaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DailyDaily_descriptor_, &Sheet_DailyDaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DailyReward_descriptor_, &E_DailyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DailyReward_descriptor_, &Sheet_DailyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DailyCultivateAttributeDesc_descriptor_, &E_DailyCultivateAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_DailyCultivate_descriptor_, &E_DailyCultivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_DailyCultivate_descriptor_, &Sheet_DailyCultivate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_daily_2eproto() {
  delete E_DailyDaily::default_instance_;
  delete E_DailyDaily_reflection_;
  delete Sheet_DailyDaily::default_instance_;
  delete Sheet_DailyDaily_reflection_;
  delete E_DailyReward::default_instance_;
  delete E_DailyReward_reflection_;
  delete Sheet_DailyReward::default_instance_;
  delete Sheet_DailyReward_reflection_;
  delete E_DailyCultivateAttributeDesc::default_instance_;
  delete E_DailyCultivateAttributeDesc_reflection_;
  delete E_DailyCultivate::default_instance_;
  delete E_DailyCultivate_reflection_;
  delete Sheet_DailyCultivate::default_instance_;
  delete Sheet_DailyCultivate_reflection_;
}

void protobuf_AddDesc_daily_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013daily.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\241\003\n\014E_DailyDaily\022\032\n\004m_id\030\001 \001(\003B\014\302"
    "\377\024\010\347\261\273\345\236\213ID\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\345"
    "\220\215\347\247\260\220\301\024<\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\346\264\273\345\212\250\347\261\273"
    "\345\236\213\022 \n\006m_args\030\004 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\022$\n"
    "\nm_playtype\030\005 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\347\261\273\345\236\213\022$\n\nm"
    "_playargs\030\006 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\022\"\n\014m_f"
    "unciontid\030\007 \001(\003B\014\302\377\024\010\345\212\237\350\203\275ID\022\034\n\010m_numbe"
    "r\030\010 \001(\005B\n\302\377\024\006\346\254\241\346\225\260\022(\n\013m_eachscore\030\t \001(\005"
    "B\023\302\377\024\017\346\257\217\346\254\241\346\264\273\350\267\203\345\200\274\022!\n\007m_cycle\030\n \001(\005B\020"
    "\302\377\024\014\351\207\215\347\275\256\345\221\250\346\234\237\0220\n\013m_regreward\030\013 \001(\005B\033\302"
    "\377\024\027\346\212\245\345\220\215\345\245\226\345\212\261\351\201\223\345\205\267boxid\"K\n\020Sheet_Dail"
    "yDaily\0227\n\021E_DailyDaily_List\030\001 \003(\0132\026.prot"
    "o_ff.E_DailyDailyB\004\210\301\024<\"\267\001\n\rE_DailyRewar"
    "d\022\030\n\004m_id\030\001 \001(\005B\n\302\377\024\006\347\264\242\345\274\225\022\032\n\006m_type\030\002 "
    "\001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\'\n\rm_activescore\030\003 \001(\005B\020"
    "\302\377\024\014\346\264\273\350\267\203\345\272\246\345\200\274\022 \n\nm_rewardid\030\004 \001(\003B\014\302\377"
    "\024\010\345\245\226\345\212\261ID\022%\n\013m_rewardnum\030\005 \001(\005B\020\302\377\024\014\345\245\226"
    "\345\212\261\346\225\260\351\207\217\"N\n\021Sheet_DailyReward\0229\n\022E_Dail"
    "yReward_List\030\001 \003(\0132\027.proto_ff.E_DailyRew"
    "ardB\004\210\301\024\024\"O\n\035E_DailyCultivateAttributeDe"
    "sc\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\007m_value\030\002 \001("
    "\005B\007\302\377\024\003\345\200\274\"\267\001\n\020E_DailyCultivate\022\024\n\004m_id\030"
    "\001 \001(\005B\006\302\377\024\002id\022\030\n\004m_lv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022"
    "%\n\005m_exp\030\003 \001(\005B\026\302\377\024\022\345\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\022L"
    "\n\013m_attribute\030\004 \003(\0132\'.proto_ff.E_DailyCu"
    "ltivateAttributeDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024\004\"W\n\024"
    "Sheet_DailyCultivate\022\?\n\025E_DailyCultivate"
    "_List\030\001 \003(\0132\032.proto_ff.E_DailyCultivateB"
    "\004\210\301\024P", 1165);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "daily.proto", &protobuf_RegisterTypes);
  E_DailyDaily::default_instance_ = new E_DailyDaily();
  Sheet_DailyDaily::default_instance_ = new Sheet_DailyDaily();
  E_DailyReward::default_instance_ = new E_DailyReward();
  Sheet_DailyReward::default_instance_ = new Sheet_DailyReward();
  E_DailyCultivateAttributeDesc::default_instance_ = new E_DailyCultivateAttributeDesc();
  E_DailyCultivate::default_instance_ = new E_DailyCultivate();
  Sheet_DailyCultivate::default_instance_ = new Sheet_DailyCultivate();
  E_DailyDaily::default_instance_->InitAsDefaultInstance();
  Sheet_DailyDaily::default_instance_->InitAsDefaultInstance();
  E_DailyReward::default_instance_->InitAsDefaultInstance();
  Sheet_DailyReward::default_instance_->InitAsDefaultInstance();
  E_DailyCultivateAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_DailyCultivate::default_instance_->InitAsDefaultInstance();
  Sheet_DailyCultivate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_daily_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_daily_2eproto {
  StaticDescriptorInitializer_daily_2eproto() {
    protobuf_AddDesc_daily_2eproto();
  }
} static_descriptor_initializer_daily_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_DailyDaily::kMIdFieldNumber;
const int E_DailyDaily::kMNameFieldNumber;
const int E_DailyDaily::kMTypeFieldNumber;
const int E_DailyDaily::kMArgsFieldNumber;
const int E_DailyDaily::kMPlaytypeFieldNumber;
const int E_DailyDaily::kMPlayargsFieldNumber;
const int E_DailyDaily::kMFunciontidFieldNumber;
const int E_DailyDaily::kMNumberFieldNumber;
const int E_DailyDaily::kMEachscoreFieldNumber;
const int E_DailyDaily::kMCycleFieldNumber;
const int E_DailyDaily::kMRegrewardFieldNumber;
#endif  // !_MSC_VER

E_DailyDaily::E_DailyDaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DailyDaily::InitAsDefaultInstance() {
}

E_DailyDaily::E_DailyDaily(const E_DailyDaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DailyDaily::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_type_ = 0;
  m_args_ = 0;
  m_playtype_ = 0;
  m_playargs_ = 0;
  m_funciontid_ = GOOGLE_LONGLONG(0);
  m_number_ = 0;
  m_eachscore_ = 0;
  m_cycle_ = 0;
  m_regreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DailyDaily::~E_DailyDaily() {
  SharedDtor();
}

void E_DailyDaily::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_DailyDaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DailyDaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DailyDaily_descriptor_;
}

const E_DailyDaily& E_DailyDaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

E_DailyDaily* E_DailyDaily::default_instance_ = NULL;

E_DailyDaily* E_DailyDaily::New() const {
  return new E_DailyDaily;
}

void E_DailyDaily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_type_ = 0;
    m_args_ = 0;
    m_playtype_ = 0;
    m_playargs_ = 0;
    m_funciontid_ = GOOGLE_LONGLONG(0);
    m_number_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_eachscore_ = 0;
    m_cycle_ = 0;
    m_regreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DailyDaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_args;
        break;
      }

      // optional int32 m_args = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_args_)));
          set_has_m_args();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_playtype;
        break;
      }

      // optional int32 m_playtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playtype_)));
          set_has_m_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_playargs;
        break;
      }

      // optional int32 m_playargs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playargs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playargs_)));
          set_has_m_playargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_funciontid;
        break;
      }

      // optional int64 m_funciontid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_funciontid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_funciontid_)));
          set_has_m_funciontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_number;
        break;
      }

      // optional int32 m_number = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_number_)));
          set_has_m_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_eachscore;
        break;
      }

      // optional int32 m_eachscore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eachscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eachscore_)));
          set_has_m_eachscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_cycle;
        break;
      }

      // optional int32 m_cycle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cycle_)));
          set_has_m_cycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_regreward;
        break;
      }

      // optional int32 m_regreward = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_regreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_regreward_)));
          set_has_m_regreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DailyDaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_args = 4;
  if (has_m_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_args(), output);
  }

  // optional int32 m_playtype = 5;
  if (has_m_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_playtype(), output);
  }

  // optional int32 m_playargs = 6;
  if (has_m_playargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_playargs(), output);
  }

  // optional int64 m_funciontid = 7;
  if (has_m_funciontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->m_funciontid(), output);
  }

  // optional int32 m_number = 8;
  if (has_m_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_number(), output);
  }

  // optional int32 m_eachscore = 9;
  if (has_m_eachscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_eachscore(), output);
  }

  // optional int32 m_cycle = 10;
  if (has_m_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_cycle(), output);
  }

  // optional int32 m_regreward = 11;
  if (has_m_regreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_regreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DailyDaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_args = 4;
  if (has_m_args()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_args(), target);
  }

  // optional int32 m_playtype = 5;
  if (has_m_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_playtype(), target);
  }

  // optional int32 m_playargs = 6;
  if (has_m_playargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_playargs(), target);
  }

  // optional int64 m_funciontid = 7;
  if (has_m_funciontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->m_funciontid(), target);
  }

  // optional int32 m_number = 8;
  if (has_m_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_number(), target);
  }

  // optional int32 m_eachscore = 9;
  if (has_m_eachscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_eachscore(), target);
  }

  // optional int32 m_cycle = 10;
  if (has_m_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_cycle(), target);
  }

  // optional int32 m_regreward = 11;
  if (has_m_regreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_regreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DailyDaily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_args = 4;
    if (has_m_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_args());
    }

    // optional int32 m_playtype = 5;
    if (has_m_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playtype());
    }

    // optional int32 m_playargs = 6;
    if (has_m_playargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playargs());
    }

    // optional int64 m_funciontid = 7;
    if (has_m_funciontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_funciontid());
    }

    // optional int32 m_number = 8;
    if (has_m_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_number());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_eachscore = 9;
    if (has_m_eachscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eachscore());
    }

    // optional int32 m_cycle = 10;
    if (has_m_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cycle());
    }

    // optional int32 m_regreward = 11;
    if (has_m_regreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_regreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DailyDaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DailyDaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DailyDaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DailyDaily::MergeFrom(const E_DailyDaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_args()) {
      set_m_args(from.m_args());
    }
    if (from.has_m_playtype()) {
      set_m_playtype(from.m_playtype());
    }
    if (from.has_m_playargs()) {
      set_m_playargs(from.m_playargs());
    }
    if (from.has_m_funciontid()) {
      set_m_funciontid(from.m_funciontid());
    }
    if (from.has_m_number()) {
      set_m_number(from.m_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_eachscore()) {
      set_m_eachscore(from.m_eachscore());
    }
    if (from.has_m_cycle()) {
      set_m_cycle(from.m_cycle());
    }
    if (from.has_m_regreward()) {
      set_m_regreward(from.m_regreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DailyDaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DailyDaily::CopyFrom(const E_DailyDaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DailyDaily::IsInitialized() const {

  return true;
}

void E_DailyDaily::Swap(E_DailyDaily* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_args_, other->m_args_);
    std::swap(m_playtype_, other->m_playtype_);
    std::swap(m_playargs_, other->m_playargs_);
    std::swap(m_funciontid_, other->m_funciontid_);
    std::swap(m_number_, other->m_number_);
    std::swap(m_eachscore_, other->m_eachscore_);
    std::swap(m_cycle_, other->m_cycle_);
    std::swap(m_regreward_, other->m_regreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DailyDaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DailyDaily_descriptor_;
  metadata.reflection = E_DailyDaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DailyDaily::kEDailyDailyListFieldNumber;
#endif  // !_MSC_VER

Sheet_DailyDaily::Sheet_DailyDaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DailyDaily::InitAsDefaultInstance() {
}

Sheet_DailyDaily::Sheet_DailyDaily(const Sheet_DailyDaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DailyDaily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DailyDaily::~Sheet_DailyDaily() {
  SharedDtor();
}

void Sheet_DailyDaily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DailyDaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DailyDaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DailyDaily_descriptor_;
}

const Sheet_DailyDaily& Sheet_DailyDaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_DailyDaily* Sheet_DailyDaily::default_instance_ = NULL;

Sheet_DailyDaily* Sheet_DailyDaily::New() const {
  return new Sheet_DailyDaily;
}

void Sheet_DailyDaily::Clear() {
  e_dailydaily_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DailyDaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DailyDaily E_DailyDaily_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DailyDaily_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dailydaily_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DailyDaily_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DailyDaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DailyDaily E_DailyDaily_List = 1;
  for (int i = 0; i < this->e_dailydaily_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dailydaily_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DailyDaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DailyDaily E_DailyDaily_List = 1;
  for (int i = 0; i < this->e_dailydaily_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dailydaily_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DailyDaily::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DailyDaily E_DailyDaily_List = 1;
  total_size += 1 * this->e_dailydaily_list_size();
  for (int i = 0; i < this->e_dailydaily_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dailydaily_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DailyDaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DailyDaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DailyDaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DailyDaily::MergeFrom(const Sheet_DailyDaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dailydaily_list_.MergeFrom(from.e_dailydaily_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DailyDaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DailyDaily::CopyFrom(const Sheet_DailyDaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DailyDaily::IsInitialized() const {

  return true;
}

void Sheet_DailyDaily::Swap(Sheet_DailyDaily* other) {
  if (other != this) {
    e_dailydaily_list_.Swap(&other->e_dailydaily_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DailyDaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DailyDaily_descriptor_;
  metadata.reflection = Sheet_DailyDaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DailyReward::kMIdFieldNumber;
const int E_DailyReward::kMTypeFieldNumber;
const int E_DailyReward::kMActivescoreFieldNumber;
const int E_DailyReward::kMRewardidFieldNumber;
const int E_DailyReward::kMRewardnumFieldNumber;
#endif  // !_MSC_VER

E_DailyReward::E_DailyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DailyReward::InitAsDefaultInstance() {
}

E_DailyReward::E_DailyReward(const E_DailyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DailyReward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_activescore_ = 0;
  m_rewardid_ = GOOGLE_LONGLONG(0);
  m_rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DailyReward::~E_DailyReward() {
  SharedDtor();
}

void E_DailyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DailyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DailyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DailyReward_descriptor_;
}

const E_DailyReward& E_DailyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

E_DailyReward* E_DailyReward::default_instance_ = NULL;

E_DailyReward* E_DailyReward::New() const {
  return new E_DailyReward;
}

void E_DailyReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_activescore_ = 0;
    m_rewardid_ = GOOGLE_LONGLONG(0);
    m_rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DailyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_activescore;
        break;
      }

      // optional int32 m_activescore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activescore_)));
          set_has_m_activescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rewardid;
        break;
      }

      // optional int64 m_rewardid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_rewardid_)));
          set_has_m_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rewardnum;
        break;
      }

      // optional int32 m_rewardnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardnum_)));
          set_has_m_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DailyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_activescore = 3;
  if (has_m_activescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_activescore(), output);
  }

  // optional int64 m_rewardid = 4;
  if (has_m_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_rewardid(), output);
  }

  // optional int32 m_rewardnum = 5;
  if (has_m_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DailyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_activescore = 3;
  if (has_m_activescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_activescore(), target);
  }

  // optional int64 m_rewardid = 4;
  if (has_m_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_rewardid(), target);
  }

  // optional int32 m_rewardnum = 5;
  if (has_m_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DailyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_activescore = 3;
    if (has_m_activescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activescore());
    }

    // optional int64 m_rewardid = 4;
    if (has_m_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_rewardid());
    }

    // optional int32 m_rewardnum = 5;
    if (has_m_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DailyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DailyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DailyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DailyReward::MergeFrom(const E_DailyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_activescore()) {
      set_m_activescore(from.m_activescore());
    }
    if (from.has_m_rewardid()) {
      set_m_rewardid(from.m_rewardid());
    }
    if (from.has_m_rewardnum()) {
      set_m_rewardnum(from.m_rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DailyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DailyReward::CopyFrom(const E_DailyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DailyReward::IsInitialized() const {

  return true;
}

void E_DailyReward::Swap(E_DailyReward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_activescore_, other->m_activescore_);
    std::swap(m_rewardid_, other->m_rewardid_);
    std::swap(m_rewardnum_, other->m_rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DailyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DailyReward_descriptor_;
  metadata.reflection = E_DailyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DailyReward::kEDailyRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_DailyReward::Sheet_DailyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DailyReward::InitAsDefaultInstance() {
}

Sheet_DailyReward::Sheet_DailyReward(const Sheet_DailyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DailyReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DailyReward::~Sheet_DailyReward() {
  SharedDtor();
}

void Sheet_DailyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DailyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DailyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DailyReward_descriptor_;
}

const Sheet_DailyReward& Sheet_DailyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_DailyReward* Sheet_DailyReward::default_instance_ = NULL;

Sheet_DailyReward* Sheet_DailyReward::New() const {
  return new Sheet_DailyReward;
}

void Sheet_DailyReward::Clear() {
  e_dailyreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DailyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DailyReward E_DailyReward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DailyReward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dailyreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DailyReward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DailyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DailyReward E_DailyReward_List = 1;
  for (int i = 0; i < this->e_dailyreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dailyreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DailyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DailyReward E_DailyReward_List = 1;
  for (int i = 0; i < this->e_dailyreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dailyreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DailyReward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DailyReward E_DailyReward_List = 1;
  total_size += 1 * this->e_dailyreward_list_size();
  for (int i = 0; i < this->e_dailyreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dailyreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DailyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DailyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DailyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DailyReward::MergeFrom(const Sheet_DailyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dailyreward_list_.MergeFrom(from.e_dailyreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DailyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DailyReward::CopyFrom(const Sheet_DailyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DailyReward::IsInitialized() const {

  return true;
}

void Sheet_DailyReward::Swap(Sheet_DailyReward* other) {
  if (other != this) {
    e_dailyreward_list_.Swap(&other->e_dailyreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DailyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DailyReward_descriptor_;
  metadata.reflection = Sheet_DailyReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DailyCultivateAttributeDesc::kMIdFieldNumber;
const int E_DailyCultivateAttributeDesc::kMValueFieldNumber;
#endif  // !_MSC_VER

E_DailyCultivateAttributeDesc::E_DailyCultivateAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DailyCultivateAttributeDesc::InitAsDefaultInstance() {
}

E_DailyCultivateAttributeDesc::E_DailyCultivateAttributeDesc(const E_DailyCultivateAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DailyCultivateAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DailyCultivateAttributeDesc::~E_DailyCultivateAttributeDesc() {
  SharedDtor();
}

void E_DailyCultivateAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DailyCultivateAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DailyCultivateAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DailyCultivateAttributeDesc_descriptor_;
}

const E_DailyCultivateAttributeDesc& E_DailyCultivateAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

E_DailyCultivateAttributeDesc* E_DailyCultivateAttributeDesc::default_instance_ = NULL;

E_DailyCultivateAttributeDesc* E_DailyCultivateAttributeDesc::New() const {
  return new E_DailyCultivateAttributeDesc;
}

void E_DailyCultivateAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DailyCultivateAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DailyCultivateAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DailyCultivateAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_value = 2;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DailyCultivateAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_value = 2;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DailyCultivateAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DailyCultivateAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DailyCultivateAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DailyCultivateAttributeDesc::MergeFrom(const E_DailyCultivateAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DailyCultivateAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DailyCultivateAttributeDesc::CopyFrom(const E_DailyCultivateAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DailyCultivateAttributeDesc::IsInitialized() const {

  return true;
}

void E_DailyCultivateAttributeDesc::Swap(E_DailyCultivateAttributeDesc* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_value_, other->m_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DailyCultivateAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DailyCultivateAttributeDesc_descriptor_;
  metadata.reflection = E_DailyCultivateAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_DailyCultivate::kMIdFieldNumber;
const int E_DailyCultivate::kMLvFieldNumber;
const int E_DailyCultivate::kMExpFieldNumber;
const int E_DailyCultivate::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_DailyCultivate::E_DailyCultivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_DailyCultivate::InitAsDefaultInstance() {
}

E_DailyCultivate::E_DailyCultivate(const E_DailyCultivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_DailyCultivate::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_DailyCultivate::~E_DailyCultivate() {
  SharedDtor();
}

void E_DailyCultivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_DailyCultivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_DailyCultivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_DailyCultivate_descriptor_;
}

const E_DailyCultivate& E_DailyCultivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

E_DailyCultivate* E_DailyCultivate::default_instance_ = NULL;

E_DailyCultivate* E_DailyCultivate::New() const {
  return new E_DailyCultivate;
}

void E_DailyCultivate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_lv_ = 0;
    m_exp_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_DailyCultivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_DailyCultivateAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_DailyCultivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_lv(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  // repeated .proto_ff.E_DailyCultivateAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_DailyCultivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_lv = 2;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_lv(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  // repeated .proto_ff.E_DailyCultivateAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_DailyCultivate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_lv = 2;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

  }
  // repeated .proto_ff.E_DailyCultivateAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_DailyCultivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_DailyCultivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_DailyCultivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_DailyCultivate::MergeFrom(const E_DailyCultivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_DailyCultivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_DailyCultivate::CopyFrom(const E_DailyCultivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_DailyCultivate::IsInitialized() const {

  return true;
}

void E_DailyCultivate::Swap(E_DailyCultivate* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_DailyCultivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_DailyCultivate_descriptor_;
  metadata.reflection = E_DailyCultivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_DailyCultivate::kEDailyCultivateListFieldNumber;
#endif  // !_MSC_VER

Sheet_DailyCultivate::Sheet_DailyCultivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_DailyCultivate::InitAsDefaultInstance() {
}

Sheet_DailyCultivate::Sheet_DailyCultivate(const Sheet_DailyCultivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_DailyCultivate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_DailyCultivate::~Sheet_DailyCultivate() {
  SharedDtor();
}

void Sheet_DailyCultivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_DailyCultivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_DailyCultivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_DailyCultivate_descriptor_;
}

const Sheet_DailyCultivate& Sheet_DailyCultivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_DailyCultivate* Sheet_DailyCultivate::default_instance_ = NULL;

Sheet_DailyCultivate* Sheet_DailyCultivate::New() const {
  return new Sheet_DailyCultivate;
}

void Sheet_DailyCultivate::Clear() {
  e_dailycultivate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_DailyCultivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_DailyCultivate E_DailyCultivate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_DailyCultivate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_dailycultivate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_DailyCultivate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_DailyCultivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_DailyCultivate E_DailyCultivate_List = 1;
  for (int i = 0; i < this->e_dailycultivate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_dailycultivate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_DailyCultivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_DailyCultivate E_DailyCultivate_List = 1;
  for (int i = 0; i < this->e_dailycultivate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_dailycultivate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_DailyCultivate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_DailyCultivate E_DailyCultivate_List = 1;
  total_size += 1 * this->e_dailycultivate_list_size();
  for (int i = 0; i < this->e_dailycultivate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_dailycultivate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_DailyCultivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_DailyCultivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_DailyCultivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_DailyCultivate::MergeFrom(const Sheet_DailyCultivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_dailycultivate_list_.MergeFrom(from.e_dailycultivate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_DailyCultivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_DailyCultivate::CopyFrom(const Sheet_DailyCultivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_DailyCultivate::IsInitialized() const {

  return true;
}

void Sheet_DailyCultivate::Swap(Sheet_DailyCultivate* other) {
  if (other != this) {
    e_dailycultivate_list_.Swap(&other->e_dailycultivate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_DailyCultivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_DailyCultivate_descriptor_;
  metadata.reflection = Sheet_DailyCultivate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
