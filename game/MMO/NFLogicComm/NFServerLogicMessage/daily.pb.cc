// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: daily.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "daily.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* dailydaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailydaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dailydaily_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dailydaily_reflection_ = NULL;
const ::google::protobuf::Descriptor* dailyreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailyreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dailyreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dailyreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* dailycultivateattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailycultivateattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* dailycultivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  dailycultivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_dailycultivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_dailycultivate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_daily_2eproto() {
  protobuf_AddDesc_daily_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "daily.proto");
  GOOGLE_CHECK(file != NULL);
  dailydaily_descriptor_ = file->message_type(0);
  static const int dailydaily_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, playargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, funciontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, othernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, eachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, regreward_),
  };
  dailydaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailydaily_descriptor_,
      dailydaily::default_instance_,
      dailydaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailydaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailydaily));
  Sheet_dailydaily_descriptor_ = file->message_type(1);
  static const int Sheet_dailydaily_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailydaily, dailydaily_list_),
  };
  Sheet_dailydaily_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dailydaily_descriptor_,
      Sheet_dailydaily::default_instance_,
      Sheet_dailydaily_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailydaily, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailydaily, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dailydaily));
  dailyreward_descriptor_ = file->message_type(2);
  static const int dailyreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, activescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, rewardnum_),
  };
  dailyreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailyreward_descriptor_,
      dailyreward::default_instance_,
      dailyreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailyreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailyreward));
  Sheet_dailyreward_descriptor_ = file->message_type(3);
  static const int Sheet_dailyreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailyreward, dailyreward_list_),
  };
  Sheet_dailyreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dailyreward_descriptor_,
      Sheet_dailyreward::default_instance_,
      Sheet_dailyreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailyreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailyreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dailyreward));
  dailycultivateattributeDesc_descriptor_ = file->message_type(4);
  static const int dailycultivateattributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivateattributeDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivateattributeDesc, value_),
  };
  dailycultivateattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailycultivateattributeDesc_descriptor_,
      dailycultivateattributeDesc::default_instance_,
      dailycultivateattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivateattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivateattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailycultivateattributeDesc));
  dailycultivate_descriptor_ = file->message_type(5);
  static const int dailycultivate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, attribute_),
  };
  dailycultivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      dailycultivate_descriptor_,
      dailycultivate::default_instance_,
      dailycultivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(dailycultivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(dailycultivate));
  Sheet_dailycultivate_descriptor_ = file->message_type(6);
  static const int Sheet_dailycultivate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailycultivate, dailycultivate_list_),
  };
  Sheet_dailycultivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_dailycultivate_descriptor_,
      Sheet_dailycultivate::default_instance_,
      Sheet_dailycultivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailycultivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_dailycultivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_dailycultivate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_daily_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailydaily_descriptor_, &dailydaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dailydaily_descriptor_, &Sheet_dailydaily::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailyreward_descriptor_, &dailyreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dailyreward_descriptor_, &Sheet_dailyreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailycultivateattributeDesc_descriptor_, &dailycultivateattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    dailycultivate_descriptor_, &dailycultivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_dailycultivate_descriptor_, &Sheet_dailycultivate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_daily_2eproto() {
  delete dailydaily::default_instance_;
  delete dailydaily_reflection_;
  delete Sheet_dailydaily::default_instance_;
  delete Sheet_dailydaily_reflection_;
  delete dailyreward::default_instance_;
  delete dailyreward_reflection_;
  delete Sheet_dailyreward::default_instance_;
  delete Sheet_dailyreward_reflection_;
  delete dailycultivateattributeDesc::default_instance_;
  delete dailycultivateattributeDesc_reflection_;
  delete dailycultivate::default_instance_;
  delete dailycultivate_reflection_;
  delete Sheet_dailycultivate::default_instance_;
  delete Sheet_dailycultivate_reflection_;
}

void protobuf_AddDesc_daily_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013daily.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\326\003\n\ndailydaily\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\347"
    "\261\273\345\236\213ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\345\220\215\347\247\260\220"
    "\301\024<\022\036\n\004type\030\003 \001(\005B\020\302\377\024\014\346\264\273\345\212\250\347\261\273\345\236\213\022\036\n\004a"
    "rgs\030\004 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\022\"\n\010playType\030"
    "\005 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\347\261\273\345\236\213\022\"\n\010playArgs\030\006 \001("
    "\005B\020\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\022 \n\nfunciontID\030\007 \001(\003B"
    "\014\302\377\024\010\345\212\237\350\203\275ID\022\032\n\006number\030\010 \001(\005B\n\302\377\024\006\346\254\241\346\225"
    "\260\022\036\n\007viptype\030\t \001(\005B\r\302\377\024\tVIP\347\261\273\345\236\213\022+\n\010oth"
    "erNum\030\n \001(\005B\031\302\377\024\025\345\205\266\344\275\231\345\217\257\350\264\255\344\271\260\346\254\241\346\225\260\022&"
    "\n\teachScore\030\013 \001(\005B\023\302\377\024\017\346\257\217\346\254\241\346\264\273\350\267\203\345\200\274\022\037"
    "\n\005cycle\030\014 \001(\005B\020\302\377\024\014\351\207\215\347\275\256\345\221\250\346\234\237\022.\n\tregRe"
    "ward\030\r \001(\005B\033\302\377\024\027\346\212\245\345\220\215\345\245\226\345\212\261\351\201\223\345\205\267boxid\""
    "G\n\020Sheet_dailydaily\0223\n\017dailydaily_List\030\001"
    " \003(\0132\024.proto_ff.dailydailyB\004\210\301\024\024\"\253\001\n\013dai"
    "lyreward\022\026\n\002id\030\001 \001(\005B\n\302\377\024\006\347\264\242\345\274\225\022\030\n\004type"
    "\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022%\n\013activeScore\030\003 \001(\005B"
    "\020\302\377\024\014\346\264\273\350\267\203\345\272\246\345\200\274\022\036\n\010rewardId\030\004 \001(\003B\014\302\377\024"
    "\010\345\245\226\345\212\261ID\022#\n\trewardNum\030\005 \001(\005B\020\302\377\024\014\345\245\226\345\212\261"
    "\346\225\260\351\207\217\"J\n\021Sheet_dailyreward\0225\n\020dailyrewa"
    "rd_List\030\001 \003(\0132\025.proto_ff.dailyrewardB\004\210\301"
    "\024\024\"I\n\033dailycultivateattributeDesc\022\022\n\002ID\030"
    "\001 \001(\005B\006\302\377\024\002id\022\026\n\005Value\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\253\001"
    "\n\016dailycultivate\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002id\022\026\n\002"
    "lv\030\002 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022#\n\003exp\030\003 \001(\005B\026\302\377\024\022\345"
    "\215\207\347\272\247\346\211\200\351\234\200\347\273\217\351\252\214\022H\n\tattribute\030\004 \003(\0132%.p"
    "roto_ff.dailycultivateattributeDescB\016\302\377\024"
    "\006\345\261\236\346\200\247\210\301\024\004\"S\n\024Sheet_dailycultivate\022;\n\023d"
    "ailycultivate_List\030\001 \003(\0132\030.proto_ff.dail"
    "ycultivateB\004\210\301\024(", 1176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "daily.proto", &protobuf_RegisterTypes);
  dailydaily::default_instance_ = new dailydaily();
  Sheet_dailydaily::default_instance_ = new Sheet_dailydaily();
  dailyreward::default_instance_ = new dailyreward();
  Sheet_dailyreward::default_instance_ = new Sheet_dailyreward();
  dailycultivateattributeDesc::default_instance_ = new dailycultivateattributeDesc();
  dailycultivate::default_instance_ = new dailycultivate();
  Sheet_dailycultivate::default_instance_ = new Sheet_dailycultivate();
  dailydaily::default_instance_->InitAsDefaultInstance();
  Sheet_dailydaily::default_instance_->InitAsDefaultInstance();
  dailyreward::default_instance_->InitAsDefaultInstance();
  Sheet_dailyreward::default_instance_->InitAsDefaultInstance();
  dailycultivateattributeDesc::default_instance_->InitAsDefaultInstance();
  dailycultivate::default_instance_->InitAsDefaultInstance();
  Sheet_dailycultivate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_daily_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_daily_2eproto {
  StaticDescriptorInitializer_daily_2eproto() {
    protobuf_AddDesc_daily_2eproto();
  }
} static_descriptor_initializer_daily_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int dailydaily::kIdFieldNumber;
const int dailydaily::kNameFieldNumber;
const int dailydaily::kTypeFieldNumber;
const int dailydaily::kArgsFieldNumber;
const int dailydaily::kPlayTypeFieldNumber;
const int dailydaily::kPlayArgsFieldNumber;
const int dailydaily::kFunciontIDFieldNumber;
const int dailydaily::kNumberFieldNumber;
const int dailydaily::kViptypeFieldNumber;
const int dailydaily::kOtherNumFieldNumber;
const int dailydaily::kEachScoreFieldNumber;
const int dailydaily::kCycleFieldNumber;
const int dailydaily::kRegRewardFieldNumber;
#endif  // !_MSC_VER

dailydaily::dailydaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dailydaily::InitAsDefaultInstance() {
}

dailydaily::dailydaily(const dailydaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dailydaily::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  args_ = 0;
  playtype_ = 0;
  playargs_ = 0;
  funciontid_ = GOOGLE_LONGLONG(0);
  number_ = 0;
  viptype_ = 0;
  othernum_ = 0;
  eachscore_ = 0;
  cycle_ = 0;
  regreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailydaily::~dailydaily() {
  SharedDtor();
}

void dailydaily::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void dailydaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailydaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailydaily_descriptor_;
}

const dailydaily& dailydaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

dailydaily* dailydaily::default_instance_ = NULL;

dailydaily* dailydaily::New() const {
  return new dailydaily;
}

void dailydaily::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    args_ = 0;
    playtype_ = 0;
    playargs_ = 0;
    funciontid_ = GOOGLE_LONGLONG(0);
    number_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viptype_ = 0;
    othernum_ = 0;
    eachscore_ = 0;
    cycle_ = 0;
    regreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailydaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_args;
        break;
      }

      // optional int32 args = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &args_)));
          set_has_args();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playType;
        break;
      }

      // optional int32 playType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playtype_)));
          set_has_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playArgs;
        break;
      }

      // optional int32 playArgs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playArgs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playargs_)));
          set_has_playargs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_funciontID;
        break;
      }

      // optional int64 funciontID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funciontID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &funciontid_)));
          set_has_funciontid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_number;
        break;
      }

      // optional int32 number = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_viptype;
        break;
      }

      // optional int32 viptype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_otherNum;
        break;
      }

      // optional int32 otherNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othernum_)));
          set_has_othernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_eachScore;
        break;
      }

      // optional int32 eachScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eachscore_)));
          set_has_eachscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cycle;
        break;
      }

      // optional int32 cycle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_regReward;
        break;
      }

      // optional int32 regReward = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regreward_)));
          set_has_regreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dailydaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 args = 4;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->args(), output);
  }

  // optional int32 playType = 5;
  if (has_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playtype(), output);
  }

  // optional int32 playArgs = 6;
  if (has_playargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->playargs(), output);
  }

  // optional int64 funciontID = 7;
  if (has_funciontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->funciontid(), output);
  }

  // optional int32 number = 8;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->number(), output);
  }

  // optional int32 viptype = 9;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->viptype(), output);
  }

  // optional int32 otherNum = 10;
  if (has_othernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->othernum(), output);
  }

  // optional int32 eachScore = 11;
  if (has_eachscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->eachscore(), output);
  }

  // optional int32 cycle = 12;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cycle(), output);
  }

  // optional int32 regReward = 13;
  if (has_regreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->regreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dailydaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 args = 4;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->args(), target);
  }

  // optional int32 playType = 5;
  if (has_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playtype(), target);
  }

  // optional int32 playArgs = 6;
  if (has_playargs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->playargs(), target);
  }

  // optional int64 funciontID = 7;
  if (has_funciontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->funciontid(), target);
  }

  // optional int32 number = 8;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->number(), target);
  }

  // optional int32 viptype = 9;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->viptype(), target);
  }

  // optional int32 otherNum = 10;
  if (has_othernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->othernum(), target);
  }

  // optional int32 eachScore = 11;
  if (has_eachscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->eachscore(), target);
  }

  // optional int32 cycle = 12;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cycle(), target);
  }

  // optional int32 regReward = 13;
  if (has_regreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->regreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dailydaily::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 args = 4;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->args());
    }

    // optional int32 playType = 5;
    if (has_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playtype());
    }

    // optional int32 playArgs = 6;
    if (has_playargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playargs());
    }

    // optional int64 funciontID = 7;
    if (has_funciontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->funciontid());
    }

    // optional int32 number = 8;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 viptype = 9;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }

    // optional int32 otherNum = 10;
    if (has_othernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othernum());
    }

    // optional int32 eachScore = 11;
    if (has_eachscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eachscore());
    }

    // optional int32 cycle = 12;
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle());
    }

    // optional int32 regReward = 13;
    if (has_regreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailydaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailydaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailydaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailydaily::MergeFrom(const dailydaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_playtype()) {
      set_playtype(from.playtype());
    }
    if (from.has_playargs()) {
      set_playargs(from.playargs());
    }
    if (from.has_funciontid()) {
      set_funciontid(from.funciontid());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
    if (from.has_othernum()) {
      set_othernum(from.othernum());
    }
    if (from.has_eachscore()) {
      set_eachscore(from.eachscore());
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_regreward()) {
      set_regreward(from.regreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailydaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailydaily::CopyFrom(const dailydaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailydaily::IsInitialized() const {

  return true;
}

void dailydaily::Swap(dailydaily* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(args_, other->args_);
    std::swap(playtype_, other->playtype_);
    std::swap(playargs_, other->playargs_);
    std::swap(funciontid_, other->funciontid_);
    std::swap(number_, other->number_);
    std::swap(viptype_, other->viptype_);
    std::swap(othernum_, other->othernum_);
    std::swap(eachscore_, other->eachscore_);
    std::swap(cycle_, other->cycle_);
    std::swap(regreward_, other->regreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailydaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailydaily_descriptor_;
  metadata.reflection = dailydaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dailydaily::kDailydailyListFieldNumber;
#endif  // !_MSC_VER

Sheet_dailydaily::Sheet_dailydaily()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dailydaily::InitAsDefaultInstance() {
}

Sheet_dailydaily::Sheet_dailydaily(const Sheet_dailydaily& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dailydaily::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dailydaily::~Sheet_dailydaily() {
  SharedDtor();
}

void Sheet_dailydaily::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dailydaily::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dailydaily::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dailydaily_descriptor_;
}

const Sheet_dailydaily& Sheet_dailydaily::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_dailydaily* Sheet_dailydaily::default_instance_ = NULL;

Sheet_dailydaily* Sheet_dailydaily::New() const {
  return new Sheet_dailydaily;
}

void Sheet_dailydaily::Clear() {
  dailydaily_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dailydaily::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dailydaily dailydaily_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailydaily_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailydaily_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailydaily_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dailydaily::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dailydaily dailydaily_List = 1;
  for (int i = 0; i < this->dailydaily_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailydaily_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dailydaily::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dailydaily dailydaily_List = 1;
  for (int i = 0; i < this->dailydaily_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailydaily_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dailydaily::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dailydaily dailydaily_List = 1;
  total_size += 1 * this->dailydaily_list_size();
  for (int i = 0; i < this->dailydaily_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailydaily_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dailydaily::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dailydaily* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dailydaily*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dailydaily::MergeFrom(const Sheet_dailydaily& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailydaily_list_.MergeFrom(from.dailydaily_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dailydaily::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dailydaily::CopyFrom(const Sheet_dailydaily& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dailydaily::IsInitialized() const {

  return true;
}

void Sheet_dailydaily::Swap(Sheet_dailydaily* other) {
  if (other != this) {
    dailydaily_list_.Swap(&other->dailydaily_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dailydaily::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dailydaily_descriptor_;
  metadata.reflection = Sheet_dailydaily_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dailyreward::kIdFieldNumber;
const int dailyreward::kTypeFieldNumber;
const int dailyreward::kActiveScoreFieldNumber;
const int dailyreward::kRewardIdFieldNumber;
const int dailyreward::kRewardNumFieldNumber;
#endif  // !_MSC_VER

dailyreward::dailyreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dailyreward::InitAsDefaultInstance() {
}

dailyreward::dailyreward(const dailyreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dailyreward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  activescore_ = 0;
  rewardid_ = GOOGLE_LONGLONG(0);
  rewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailyreward::~dailyreward() {
  SharedDtor();
}

void dailyreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dailyreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailyreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailyreward_descriptor_;
}

const dailyreward& dailyreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

dailyreward* dailyreward::default_instance_ = NULL;

dailyreward* dailyreward::New() const {
  return new dailyreward;
}

void dailyreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    activescore_ = 0;
    rewardid_ = GOOGLE_LONGLONG(0);
    rewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailyreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activeScore;
        break;
      }

      // optional int32 activeScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activescore_)));
          set_has_activescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardId;
        break;
      }

      // optional int64 rewardId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rewardNum;
        break;
      }

      // optional int32 rewardNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardnum_)));
          set_has_rewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dailyreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 activeScore = 3;
  if (has_activescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activescore(), output);
  }

  // optional int64 rewardId = 4;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardid(), output);
  }

  // optional int32 rewardNum = 5;
  if (has_rewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dailyreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 activeScore = 3;
  if (has_activescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activescore(), target);
  }

  // optional int64 rewardId = 4;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardid(), target);
  }

  // optional int32 rewardNum = 5;
  if (has_rewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dailyreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 activeScore = 3;
    if (has_activescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activescore());
    }

    // optional int64 rewardId = 4;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardid());
    }

    // optional int32 rewardNum = 5;
    if (has_rewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailyreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailyreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailyreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailyreward::MergeFrom(const dailyreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_activescore()) {
      set_activescore(from.activescore());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_rewardnum()) {
      set_rewardnum(from.rewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailyreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailyreward::CopyFrom(const dailyreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailyreward::IsInitialized() const {

  return true;
}

void dailyreward::Swap(dailyreward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(activescore_, other->activescore_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(rewardnum_, other->rewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailyreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailyreward_descriptor_;
  metadata.reflection = dailyreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dailyreward::kDailyrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_dailyreward::Sheet_dailyreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dailyreward::InitAsDefaultInstance() {
}

Sheet_dailyreward::Sheet_dailyreward(const Sheet_dailyreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dailyreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dailyreward::~Sheet_dailyreward() {
  SharedDtor();
}

void Sheet_dailyreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dailyreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dailyreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dailyreward_descriptor_;
}

const Sheet_dailyreward& Sheet_dailyreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_dailyreward* Sheet_dailyreward::default_instance_ = NULL;

Sheet_dailyreward* Sheet_dailyreward::New() const {
  return new Sheet_dailyreward;
}

void Sheet_dailyreward::Clear() {
  dailyreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dailyreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dailyreward dailyreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailyreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dailyreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dailyreward dailyreward_List = 1;
  for (int i = 0; i < this->dailyreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailyreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dailyreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dailyreward dailyreward_List = 1;
  for (int i = 0; i < this->dailyreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailyreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dailyreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dailyreward dailyreward_List = 1;
  total_size += 1 * this->dailyreward_list_size();
  for (int i = 0; i < this->dailyreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dailyreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dailyreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dailyreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dailyreward::MergeFrom(const Sheet_dailyreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyreward_list_.MergeFrom(from.dailyreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dailyreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dailyreward::CopyFrom(const Sheet_dailyreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dailyreward::IsInitialized() const {

  return true;
}

void Sheet_dailyreward::Swap(Sheet_dailyreward* other) {
  if (other != this) {
    dailyreward_list_.Swap(&other->dailyreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dailyreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dailyreward_descriptor_;
  metadata.reflection = Sheet_dailyreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dailycultivateattributeDesc::kIDFieldNumber;
const int dailycultivateattributeDesc::kValueFieldNumber;
#endif  // !_MSC_VER

dailycultivateattributeDesc::dailycultivateattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dailycultivateattributeDesc::InitAsDefaultInstance() {
}

dailycultivateattributeDesc::dailycultivateattributeDesc(const dailycultivateattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dailycultivateattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailycultivateattributeDesc::~dailycultivateattributeDesc() {
  SharedDtor();
}

void dailycultivateattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dailycultivateattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailycultivateattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailycultivateattributeDesc_descriptor_;
}

const dailycultivateattributeDesc& dailycultivateattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

dailycultivateattributeDesc* dailycultivateattributeDesc::default_instance_ = NULL;

dailycultivateattributeDesc* dailycultivateattributeDesc::New() const {
  return new dailycultivateattributeDesc;
}

void dailycultivateattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailycultivateattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dailycultivateattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dailycultivateattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dailycultivateattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailycultivateattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailycultivateattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailycultivateattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailycultivateattributeDesc::MergeFrom(const dailycultivateattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailycultivateattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailycultivateattributeDesc::CopyFrom(const dailycultivateattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailycultivateattributeDesc::IsInitialized() const {

  return true;
}

void dailycultivateattributeDesc::Swap(dailycultivateattributeDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailycultivateattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailycultivateattributeDesc_descriptor_;
  metadata.reflection = dailycultivateattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int dailycultivate::kIDFieldNumber;
const int dailycultivate::kLvFieldNumber;
const int dailycultivate::kExpFieldNumber;
const int dailycultivate::kAttributeFieldNumber;
#endif  // !_MSC_VER

dailycultivate::dailycultivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void dailycultivate::InitAsDefaultInstance() {
}

dailycultivate::dailycultivate(const dailycultivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void dailycultivate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

dailycultivate::~dailycultivate() {
  SharedDtor();
}

void dailycultivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void dailycultivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* dailycultivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return dailycultivate_descriptor_;
}

const dailycultivate& dailycultivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

dailycultivate* dailycultivate::default_instance_ = NULL;

dailycultivate* dailycultivate::New() const {
  return new dailycultivate;
}

void dailycultivate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    exp_ = 0;
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool dailycultivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void dailycultivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* dailycultivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int dailycultivate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated .proto_ff.dailycultivateattributeDesc attribute = 4;
  total_size += 1 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void dailycultivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const dailycultivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const dailycultivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void dailycultivate::MergeFrom(const dailycultivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void dailycultivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void dailycultivate::CopyFrom(const dailycultivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool dailycultivate::IsInitialized() const {

  return true;
}

void dailycultivate::Swap(dailycultivate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata dailycultivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = dailycultivate_descriptor_;
  metadata.reflection = dailycultivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_dailycultivate::kDailycultivateListFieldNumber;
#endif  // !_MSC_VER

Sheet_dailycultivate::Sheet_dailycultivate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_dailycultivate::InitAsDefaultInstance() {
}

Sheet_dailycultivate::Sheet_dailycultivate(const Sheet_dailycultivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_dailycultivate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_dailycultivate::~Sheet_dailycultivate() {
  SharedDtor();
}

void Sheet_dailycultivate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_dailycultivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_dailycultivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_dailycultivate_descriptor_;
}

const Sheet_dailycultivate& Sheet_dailycultivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_daily_2eproto();
  return *default_instance_;
}

Sheet_dailycultivate* Sheet_dailycultivate::default_instance_ = NULL;

Sheet_dailycultivate* Sheet_dailycultivate::New() const {
  return new Sheet_dailycultivate;
}

void Sheet_dailycultivate::Clear() {
  dailycultivate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_dailycultivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.dailycultivate dailycultivate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailycultivate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailycultivate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailycultivate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_dailycultivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.dailycultivate dailycultivate_List = 1;
  for (int i = 0; i < this->dailycultivate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailycultivate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_dailycultivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.dailycultivate dailycultivate_List = 1;
  for (int i = 0; i < this->dailycultivate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailycultivate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_dailycultivate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.dailycultivate dailycultivate_List = 1;
  total_size += 1 * this->dailycultivate_list_size();
  for (int i = 0; i < this->dailycultivate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailycultivate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_dailycultivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_dailycultivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_dailycultivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_dailycultivate::MergeFrom(const Sheet_dailycultivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailycultivate_list_.MergeFrom(from.dailycultivate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_dailycultivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_dailycultivate::CopyFrom(const Sheet_dailycultivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_dailycultivate::IsInitialized() const {

  return true;
}

void Sheet_dailycultivate::Swap(Sheet_dailycultivate* other) {
  if (other != this) {
    dailycultivate_list_.Swap(&other->dailycultivate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_dailycultivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_dailycultivate_descriptor_;
  metadata.reflection = Sheet_dailycultivate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
