// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSLogin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSLogin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ClientLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateRoleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateRoleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCreateRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCreateRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientQueuePosReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQueuePosReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientQueuePosRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQueuePosRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCancelQueueReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCancelQueueReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientCancelQueueRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientCancelQueueRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReConnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReConnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReConnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReConnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientEnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientEnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnRoleListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnRoleListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnRoleListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnRoleListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientPingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientPingRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CSLogin_2eproto() {
  protobuf_AddDesc_CSLogin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CSLogin.proto");
  GOOGLE_CHECK(file != NULL);
  ClientLoginReq_descriptor_ = file->message_type(0);
  static const int ClientLoginReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, logintimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, reserve_),
  };
  ClientLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginReq_descriptor_,
      ClientLoginReq::default_instance_,
      ClientLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginReq));
  ClientLoginRsp_descriptor_ = file->message_type(1);
  static const int ClientLoginRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, role_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, unix_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, unix_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, time_zone_),
  };
  ClientLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginRsp_descriptor_,
      ClientLoginRsp::default_instance_,
      ClientLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginRsp));
  ClientCreateRoleReq_descriptor_ = file->message_type(2);
  static const int ClientCreateRoleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleReq, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleReq, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleReq, color_),
  };
  ClientCreateRoleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateRoleReq_descriptor_,
      ClientCreateRoleReq::default_instance_,
      ClientCreateRoleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateRoleReq));
  ClientCreateRoleRsp_descriptor_ = file->message_type(3);
  static const int ClientCreateRoleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleRsp, info_),
  };
  ClientCreateRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCreateRoleRsp_descriptor_,
      ClientCreateRoleRsp::default_instance_,
      ClientCreateRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCreateRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCreateRoleRsp));
  ClientQueuePosReq_descriptor_ = file->message_type(4);
  static const int ClientQueuePosReq_offsets_[1] = {
  };
  ClientQueuePosReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQueuePosReq_descriptor_,
      ClientQueuePosReq::default_instance_,
      ClientQueuePosReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQueuePosReq));
  ClientQueuePosRsp_descriptor_ = file->message_type(5);
  static const int ClientQueuePosRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosRsp, num_),
  };
  ClientQueuePosRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQueuePosRsp_descriptor_,
      ClientQueuePosRsp::default_instance_,
      ClientQueuePosRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueuePosRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQueuePosRsp));
  ClientCancelQueueReq_descriptor_ = file->message_type(6);
  static const int ClientCancelQueueReq_offsets_[1] = {
  };
  ClientCancelQueueReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCancelQueueReq_descriptor_,
      ClientCancelQueueReq::default_instance_,
      ClientCancelQueueReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCancelQueueReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCancelQueueReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCancelQueueReq));
  ClientCancelQueueRsp_descriptor_ = file->message_type(7);
  static const int ClientCancelQueueRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCancelQueueRsp, ret_),
  };
  ClientCancelQueueRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientCancelQueueRsp_descriptor_,
      ClientCancelQueueRsp::default_instance_,
      ClientCancelQueueRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCancelQueueRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientCancelQueueRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientCancelQueueRsp));
  ClientReConnectReq_descriptor_ = file->message_type(8);
  static const int ClientReConnectReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectReq, token_),
  };
  ClientReConnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReConnectReq_descriptor_,
      ClientReConnectReq::default_instance_,
      ClientReConnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReConnectReq));
  ClientReConnectRsp_descriptor_ = file->message_type(9);
  static const int ClientReConnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectRsp, ret_),
  };
  ClientReConnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReConnectRsp_descriptor_,
      ClientReConnectRsp::default_instance_,
      ClientReConnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReConnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReConnectRsp));
  ClientEnterGameReq_descriptor_ = file->message_type(10);
  static const int ClientEnterGameReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameReq, cid_),
  };
  ClientEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEnterGameReq_descriptor_,
      ClientEnterGameReq::default_instance_,
      ClientEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEnterGameReq));
  ClientEnterGameRsp_descriptor_ = file->message_type(11);
  static const int ClientEnterGameRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameRsp, ret_),
  };
  ClientEnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientEnterGameRsp_descriptor_,
      ClientEnterGameRsp::default_instance_,
      ClientEnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientEnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientEnterGameRsp));
  ReturnRoleListReq_descriptor_ = file->message_type(12);
  static const int ReturnRoleListReq_offsets_[1] = {
  };
  ReturnRoleListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnRoleListReq_descriptor_,
      ReturnRoleListReq::default_instance_,
      ReturnRoleListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnRoleListReq));
  ReturnRoleListRsp_descriptor_ = file->message_type(13);
  static const int ReturnRoleListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListRsp, role_lst_),
  };
  ReturnRoleListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnRoleListRsp_descriptor_,
      ReturnRoleListRsp::default_instance_,
      ReturnRoleListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnRoleListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnRoleListRsp));
  ClientPingReq_descriptor_ = file->message_type(14);
  static const int ClientPingReq_offsets_[1] = {
  };
  ClientPingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPingReq_descriptor_,
      ClientPingReq::default_instance_,
      ClientPingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPingReq));
  ClientPingRsp_descriptor_ = file->message_type(15);
  static const int ClientPingRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingRsp, unix_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingRsp, unix_msec_),
  };
  ClientPingRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientPingRsp_descriptor_,
      ClientPingRsp::default_instance_,
      ClientPingRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientPingRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientPingRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CSLogin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginReq_descriptor_, &ClientLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginRsp_descriptor_, &ClientLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateRoleReq_descriptor_, &ClientCreateRoleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCreateRoleRsp_descriptor_, &ClientCreateRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQueuePosReq_descriptor_, &ClientQueuePosReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQueuePosRsp_descriptor_, &ClientQueuePosRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCancelQueueReq_descriptor_, &ClientCancelQueueReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientCancelQueueRsp_descriptor_, &ClientCancelQueueRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReConnectReq_descriptor_, &ClientReConnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReConnectRsp_descriptor_, &ClientReConnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEnterGameReq_descriptor_, &ClientEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientEnterGameRsp_descriptor_, &ClientEnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnRoleListReq_descriptor_, &ReturnRoleListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnRoleListRsp_descriptor_, &ReturnRoleListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPingReq_descriptor_, &ClientPingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientPingRsp_descriptor_, &ClientPingRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CSLogin_2eproto() {
  delete ClientLoginReq::default_instance_;
  delete ClientLoginReq_reflection_;
  delete ClientLoginRsp::default_instance_;
  delete ClientLoginRsp_reflection_;
  delete ClientCreateRoleReq::default_instance_;
  delete ClientCreateRoleReq_reflection_;
  delete ClientCreateRoleRsp::default_instance_;
  delete ClientCreateRoleRsp_reflection_;
  delete ClientQueuePosReq::default_instance_;
  delete ClientQueuePosReq_reflection_;
  delete ClientQueuePosRsp::default_instance_;
  delete ClientQueuePosRsp_reflection_;
  delete ClientCancelQueueReq::default_instance_;
  delete ClientCancelQueueReq_reflection_;
  delete ClientCancelQueueRsp::default_instance_;
  delete ClientCancelQueueRsp_reflection_;
  delete ClientReConnectReq::default_instance_;
  delete ClientReConnectReq_reflection_;
  delete ClientReConnectRsp::default_instance_;
  delete ClientReConnectRsp_reflection_;
  delete ClientEnterGameReq::default_instance_;
  delete ClientEnterGameReq_reflection_;
  delete ClientEnterGameRsp::default_instance_;
  delete ClientEnterGameRsp_reflection_;
  delete ReturnRoleListReq::default_instance_;
  delete ReturnRoleListReq_reflection_;
  delete ReturnRoleListRsp::default_instance_;
  delete ReturnRoleListRsp_reflection_;
  delete ClientPingReq::default_instance_;
  delete ClientPingReq_reflection_;
  delete ClientPingRsp::default_instance_;
  delete ClientPingRsp_reflection_;
}

void protobuf_AddDesc_CSLogin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rCSLogin.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\022common_logic.proto\032\tCom.proto\""
    "v\n\016ClientLoginReq\022\013\n\003uid\030\001 \001(\r\022\022\n\nchanne"
    "l_id\030\002 \001(\r\022\r\n\005token\030\003 \001(\t\022\026\n\016loginTimeSt"
    "amp\030\004 \002(\004\022\013\n\003zid\030\005 \001(\r\022\017\n\007reserve\030\006 \001(\t\""
    "\201\001\n\016ClientLoginRsp\022\013\n\003ret\030\001 \002(\005\022*\n\010role_"
    "lst\030\002 \003(\0132\030.proto_ff.LoginRoleProto\022\020\n\010u"
    "nix_sec\030\003 \002(\004\022\021\n\tunix_msec\030\004 \002(\004\022\021\n\ttime"
    "_zone\030\005 \002(\005\"@\n\023ClientCreateRoleReq\022\014\n\004na"
    "me\030\001 \001(\t\022\014\n\004prof\030\002 \001(\r\022\r\n\005color\030\003 \001(\005\"M\n"
    "\023ClientCreateRoleRsp\022\016\n\006result\030\001 \002(\r\022&\n\004"
    "info\030\002 \001(\0132\030.proto_ff.LoginRoleProto\"\023\n\021"
    "ClientQueuePosReq\"-\n\021ClientQueuePosRsp\022\013"
    "\n\003ret\030\001 \002(\005\022\013\n\003num\030\002 \001(\r\"\026\n\024ClientCancel"
    "QueueReq\"#\n\024ClientCancelQueueRsp\022\013\n\003ret\030"
    "\001 \002(\005\"=\n\022ClientReConnectReq\022\013\n\003uid\030\001 \002(\r"
    "\022\013\n\003cid\030\002 \002(\004\022\r\n\005token\030\003 \002(\t\"!\n\022ClientRe"
    "ConnectRsp\022\013\n\003ret\030\001 \002(\005\"!\n\022ClientEnterGa"
    "meReq\022\013\n\003cid\030\001 \002(\004\"!\n\022ClientEnterGameRsp"
    "\022\013\n\003ret\030\001 \002(\005\"\023\n\021ReturnRoleListReq\"L\n\021Re"
    "turnRoleListRsp\022\013\n\003ret\030\001 \002(\005\022*\n\010role_lst"
    "\030\002 \003(\0132\030.proto_ff.LoginRoleProto\"\017\n\rClie"
    "ntPingReq\"4\n\rClientPingRsp\022\020\n\010unix_sec\030\001"
    " \002(\004\022\021\n\tunix_msec\030\002 \002(\004", 943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CSLogin.proto", &protobuf_RegisterTypes);
  ClientLoginReq::default_instance_ = new ClientLoginReq();
  ClientLoginRsp::default_instance_ = new ClientLoginRsp();
  ClientCreateRoleReq::default_instance_ = new ClientCreateRoleReq();
  ClientCreateRoleRsp::default_instance_ = new ClientCreateRoleRsp();
  ClientQueuePosReq::default_instance_ = new ClientQueuePosReq();
  ClientQueuePosRsp::default_instance_ = new ClientQueuePosRsp();
  ClientCancelQueueReq::default_instance_ = new ClientCancelQueueReq();
  ClientCancelQueueRsp::default_instance_ = new ClientCancelQueueRsp();
  ClientReConnectReq::default_instance_ = new ClientReConnectReq();
  ClientReConnectRsp::default_instance_ = new ClientReConnectRsp();
  ClientEnterGameReq::default_instance_ = new ClientEnterGameReq();
  ClientEnterGameRsp::default_instance_ = new ClientEnterGameRsp();
  ReturnRoleListReq::default_instance_ = new ReturnRoleListReq();
  ReturnRoleListRsp::default_instance_ = new ReturnRoleListRsp();
  ClientPingReq::default_instance_ = new ClientPingReq();
  ClientPingRsp::default_instance_ = new ClientPingRsp();
  ClientLoginReq::default_instance_->InitAsDefaultInstance();
  ClientLoginRsp::default_instance_->InitAsDefaultInstance();
  ClientCreateRoleReq::default_instance_->InitAsDefaultInstance();
  ClientCreateRoleRsp::default_instance_->InitAsDefaultInstance();
  ClientQueuePosReq::default_instance_->InitAsDefaultInstance();
  ClientQueuePosRsp::default_instance_->InitAsDefaultInstance();
  ClientCancelQueueReq::default_instance_->InitAsDefaultInstance();
  ClientCancelQueueRsp::default_instance_->InitAsDefaultInstance();
  ClientReConnectReq::default_instance_->InitAsDefaultInstance();
  ClientReConnectRsp::default_instance_->InitAsDefaultInstance();
  ClientEnterGameReq::default_instance_->InitAsDefaultInstance();
  ClientEnterGameRsp::default_instance_->InitAsDefaultInstance();
  ReturnRoleListReq::default_instance_->InitAsDefaultInstance();
  ReturnRoleListRsp::default_instance_->InitAsDefaultInstance();
  ClientPingReq::default_instance_->InitAsDefaultInstance();
  ClientPingRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSLogin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSLogin_2eproto {
  StaticDescriptorInitializer_CSLogin_2eproto() {
    protobuf_AddDesc_CSLogin_2eproto();
  }
} static_descriptor_initializer_CSLogin_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientLoginReq::kUidFieldNumber;
const int ClientLoginReq::kChannelIdFieldNumber;
const int ClientLoginReq::kTokenFieldNumber;
const int ClientLoginReq::kLoginTimeStampFieldNumber;
const int ClientLoginReq::kZidFieldNumber;
const int ClientLoginReq::kReserveFieldNumber;
#endif  // !_MSC_VER

ClientLoginReq::ClientLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginReq::InitAsDefaultInstance() {
}

ClientLoginReq::ClientLoginReq(const ClientLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  channel_id_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintimestamp_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  reserve_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginReq::~ClientLoginReq() {
  SharedDtor();
}

void ClientLoginReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (reserve_ != &::google::protobuf::internal::kEmptyString) {
    delete reserve_;
  }
  if (this != default_instance_) {
  }
}

void ClientLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginReq_descriptor_;
}

const ClientLoginReq& ClientLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientLoginReq* ClientLoginReq::default_instance_ = NULL;

ClientLoginReq* ClientLoginReq::New() const {
  return new ClientLoginReq;
}

void ClientLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    channel_id_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    logintimestamp_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    if (has_reserve()) {
      if (reserve_ != &::google::protobuf::internal::kEmptyString) {
        reserve_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginTimeStamp;
        break;
      }

      // required uint64 loginTimeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintimestamp_)));
          set_has_logintimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reserve;
        break;
      }

      // optional string reserve = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reserve:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reserve().data(), this->reserve().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_id(), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // required uint64 loginTimeStamp = 4;
  if (has_logintimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logintimestamp(), output);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zid(), output);
  }

  // optional string reserve = 6;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reserve(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 channel_id = 2;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_id(), target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required uint64 loginTimeStamp = 4;
  if (has_logintimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logintimestamp(), target);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zid(), target);
  }

  // optional string reserve = 6;
  if (has_reserve()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reserve().data(), this->reserve().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reserve(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 channel_id = 2;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint64 loginTimeStamp = 4;
    if (has_logintimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintimestamp());
    }

    // optional uint32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional string reserve = 6;
    if (has_reserve()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginReq::MergeFrom(const ClientLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_logintimestamp()) {
      set_logintimestamp(from.logintimestamp());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_reserve()) {
      set_reserve(from.reserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginReq::CopyFrom(const ClientLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  return true;
}

void ClientLoginReq::Swap(ClientLoginReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(token_, other->token_);
    std::swap(logintimestamp_, other->logintimestamp_);
    std::swap(zid_, other->zid_);
    std::swap(reserve_, other->reserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginReq_descriptor_;
  metadata.reflection = ClientLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginRsp::kRetFieldNumber;
const int ClientLoginRsp::kRoleLstFieldNumber;
const int ClientLoginRsp::kUnixSecFieldNumber;
const int ClientLoginRsp::kUnixMsecFieldNumber;
const int ClientLoginRsp::kTimeZoneFieldNumber;
#endif  // !_MSC_VER

ClientLoginRsp::ClientLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginRsp::InitAsDefaultInstance() {
}

ClientLoginRsp::ClientLoginRsp(const ClientLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  unix_sec_ = GOOGLE_ULONGLONG(0);
  unix_msec_ = GOOGLE_ULONGLONG(0);
  time_zone_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginRsp::~ClientLoginRsp() {
  SharedDtor();
}

void ClientLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginRsp_descriptor_;
}

const ClientLoginRsp& ClientLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientLoginRsp* ClientLoginRsp::default_instance_ = NULL;

ClientLoginRsp* ClientLoginRsp::New() const {
  return new ClientLoginRsp;
}

void ClientLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    unix_sec_ = GOOGLE_ULONGLONG(0);
    unix_msec_ = GOOGLE_ULONGLONG(0);
    time_zone_ = 0;
  }
  role_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_lst;
        break;
      }

      // repeated .proto_ff.LoginRoleProto role_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_lst;
        if (input->ExpectTag(24)) goto parse_unix_sec;
        break;
      }

      // required uint64 unix_sec = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unix_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unix_sec_)));
          set_has_unix_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_unix_msec;
        break;
      }

      // required uint64 unix_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unix_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unix_msec_)));
          set_has_unix_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_zone;
        break;
      }

      // required int32 time_zone = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_zone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_zone_)));
          set_has_time_zone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  for (int i = 0; i < this->role_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_lst(i), output);
  }

  // required uint64 unix_sec = 3;
  if (has_unix_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->unix_sec(), output);
  }

  // required uint64 unix_msec = 4;
  if (has_unix_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->unix_msec(), output);
  }

  // required int32 time_zone = 5;
  if (has_time_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time_zone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  for (int i = 0; i < this->role_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_lst(i), target);
  }

  // required uint64 unix_sec = 3;
  if (has_unix_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->unix_sec(), target);
  }

  // required uint64 unix_msec = 4;
  if (has_unix_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->unix_msec(), target);
  }

  // required int32 time_zone = 5;
  if (has_time_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time_zone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 unix_sec = 3;
    if (has_unix_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unix_sec());
    }

    // required uint64 unix_msec = 4;
    if (has_unix_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unix_msec());
    }

    // required int32 time_zone = 5;
    if (has_time_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time_zone());
    }

  }
  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  total_size += 1 * this->role_lst_size();
  for (int i = 0; i < this->role_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginRsp::MergeFrom(const ClientLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_lst_.MergeFrom(from.role_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_unix_sec()) {
      set_unix_sec(from.unix_sec());
    }
    if (from.has_unix_msec()) {
      set_unix_msec(from.unix_msec());
    }
    if (from.has_time_zone()) {
      set_time_zone(from.time_zone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginRsp::CopyFrom(const ClientLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < role_lst_size(); i++) {
    if (!this->role_lst(i).IsInitialized()) return false;
  }
  return true;
}

void ClientLoginRsp::Swap(ClientLoginRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    role_lst_.Swap(&other->role_lst_);
    std::swap(unix_sec_, other->unix_sec_);
    std::swap(unix_msec_, other->unix_msec_);
    std::swap(time_zone_, other->time_zone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginRsp_descriptor_;
  metadata.reflection = ClientLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCreateRoleReq::kNameFieldNumber;
const int ClientCreateRoleReq::kProfFieldNumber;
const int ClientCreateRoleReq::kColorFieldNumber;
#endif  // !_MSC_VER

ClientCreateRoleReq::ClientCreateRoleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateRoleReq::InitAsDefaultInstance() {
}

ClientCreateRoleReq::ClientCreateRoleReq(const ClientCreateRoleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateRoleReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateRoleReq::~ClientCreateRoleReq() {
  SharedDtor();
}

void ClientCreateRoleReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientCreateRoleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateRoleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateRoleReq_descriptor_;
}

const ClientCreateRoleReq& ClientCreateRoleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientCreateRoleReq* ClientCreateRoleReq::default_instance_ = NULL;

ClientCreateRoleReq* ClientCreateRoleReq::New() const {
  return new ClientCreateRoleReq;
}

void ClientCreateRoleReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    color_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateRoleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_color;
        break;
      }

      // optional int32 color = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateRoleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 prof = 2;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prof(), output);
  }

  // optional int32 color = 3;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateRoleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 prof = 2;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prof(), target);
  }

  // optional int32 color = 3;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateRoleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 prof = 2;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional int32 color = 3;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateRoleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateRoleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateRoleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateRoleReq::MergeFrom(const ClientCreateRoleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateRoleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateRoleReq::CopyFrom(const ClientCreateRoleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateRoleReq::IsInitialized() const {

  return true;
}

void ClientCreateRoleReq::Swap(ClientCreateRoleReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateRoleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateRoleReq_descriptor_;
  metadata.reflection = ClientCreateRoleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCreateRoleRsp::kResultFieldNumber;
const int ClientCreateRoleRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

ClientCreateRoleRsp::ClientCreateRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCreateRoleRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::LoginRoleProto*>(&::proto_ff::LoginRoleProto::default_instance());
}

ClientCreateRoleRsp::ClientCreateRoleRsp(const ClientCreateRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCreateRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCreateRoleRsp::~ClientCreateRoleRsp() {
  SharedDtor();
}

void ClientCreateRoleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ClientCreateRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCreateRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCreateRoleRsp_descriptor_;
}

const ClientCreateRoleRsp& ClientCreateRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientCreateRoleRsp* ClientCreateRoleRsp::default_instance_ = NULL;

ClientCreateRoleRsp* ClientCreateRoleRsp::New() const {
  return new ClientCreateRoleRsp;
}

void ClientCreateRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::LoginRoleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCreateRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.LoginRoleProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCreateRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto_ff.LoginRoleProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCreateRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto_ff.LoginRoleProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCreateRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional .proto_ff.LoginRoleProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCreateRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCreateRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCreateRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCreateRoleRsp::MergeFrom(const ClientCreateRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::LoginRoleProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCreateRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCreateRoleRsp::CopyFrom(const ClientCreateRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCreateRoleRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ClientCreateRoleRsp::Swap(ClientCreateRoleRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCreateRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCreateRoleRsp_descriptor_;
  metadata.reflection = ClientCreateRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientQueuePosReq::ClientQueuePosReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientQueuePosReq::InitAsDefaultInstance() {
}

ClientQueuePosReq::ClientQueuePosReq(const ClientQueuePosReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientQueuePosReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQueuePosReq::~ClientQueuePosReq() {
  SharedDtor();
}

void ClientQueuePosReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQueuePosReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQueuePosReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQueuePosReq_descriptor_;
}

const ClientQueuePosReq& ClientQueuePosReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientQueuePosReq* ClientQueuePosReq::default_instance_ = NULL;

ClientQueuePosReq* ClientQueuePosReq::New() const {
  return new ClientQueuePosReq;
}

void ClientQueuePosReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQueuePosReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientQueuePosReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientQueuePosReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientQueuePosReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQueuePosReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQueuePosReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQueuePosReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQueuePosReq::MergeFrom(const ClientQueuePosReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQueuePosReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQueuePosReq::CopyFrom(const ClientQueuePosReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQueuePosReq::IsInitialized() const {

  return true;
}

void ClientQueuePosReq::Swap(ClientQueuePosReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQueuePosReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQueuePosReq_descriptor_;
  metadata.reflection = ClientQueuePosReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientQueuePosRsp::kRetFieldNumber;
const int ClientQueuePosRsp::kNumFieldNumber;
#endif  // !_MSC_VER

ClientQueuePosRsp::ClientQueuePosRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientQueuePosRsp::InitAsDefaultInstance() {
}

ClientQueuePosRsp::ClientQueuePosRsp(const ClientQueuePosRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientQueuePosRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQueuePosRsp::~ClientQueuePosRsp() {
  SharedDtor();
}

void ClientQueuePosRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQueuePosRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQueuePosRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQueuePosRsp_descriptor_;
}

const ClientQueuePosRsp& ClientQueuePosRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientQueuePosRsp* ClientQueuePosRsp::default_instance_ = NULL;

ClientQueuePosRsp* ClientQueuePosRsp::New() const {
  return new ClientQueuePosRsp;
}

void ClientQueuePosRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQueuePosRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientQueuePosRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientQueuePosRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientQueuePosRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQueuePosRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQueuePosRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQueuePosRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQueuePosRsp::MergeFrom(const ClientQueuePosRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQueuePosRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQueuePosRsp::CopyFrom(const ClientQueuePosRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQueuePosRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientQueuePosRsp::Swap(ClientQueuePosRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQueuePosRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQueuePosRsp_descriptor_;
  metadata.reflection = ClientQueuePosRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientCancelQueueReq::ClientCancelQueueReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCancelQueueReq::InitAsDefaultInstance() {
}

ClientCancelQueueReq::ClientCancelQueueReq(const ClientCancelQueueReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCancelQueueReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCancelQueueReq::~ClientCancelQueueReq() {
  SharedDtor();
}

void ClientCancelQueueReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCancelQueueReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCancelQueueReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCancelQueueReq_descriptor_;
}

const ClientCancelQueueReq& ClientCancelQueueReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientCancelQueueReq* ClientCancelQueueReq::default_instance_ = NULL;

ClientCancelQueueReq* ClientCancelQueueReq::New() const {
  return new ClientCancelQueueReq;
}

void ClientCancelQueueReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCancelQueueReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientCancelQueueReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCancelQueueReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCancelQueueReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCancelQueueReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCancelQueueReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCancelQueueReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCancelQueueReq::MergeFrom(const ClientCancelQueueReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCancelQueueReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCancelQueueReq::CopyFrom(const ClientCancelQueueReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCancelQueueReq::IsInitialized() const {

  return true;
}

void ClientCancelQueueReq::Swap(ClientCancelQueueReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCancelQueueReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCancelQueueReq_descriptor_;
  metadata.reflection = ClientCancelQueueReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientCancelQueueRsp::kRetFieldNumber;
#endif  // !_MSC_VER

ClientCancelQueueRsp::ClientCancelQueueRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientCancelQueueRsp::InitAsDefaultInstance() {
}

ClientCancelQueueRsp::ClientCancelQueueRsp(const ClientCancelQueueRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientCancelQueueRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientCancelQueueRsp::~ClientCancelQueueRsp() {
  SharedDtor();
}

void ClientCancelQueueRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientCancelQueueRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientCancelQueueRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientCancelQueueRsp_descriptor_;
}

const ClientCancelQueueRsp& ClientCancelQueueRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientCancelQueueRsp* ClientCancelQueueRsp::default_instance_ = NULL;

ClientCancelQueueRsp* ClientCancelQueueRsp::New() const {
  return new ClientCancelQueueRsp;
}

void ClientCancelQueueRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientCancelQueueRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientCancelQueueRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientCancelQueueRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientCancelQueueRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientCancelQueueRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientCancelQueueRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientCancelQueueRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientCancelQueueRsp::MergeFrom(const ClientCancelQueueRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientCancelQueueRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCancelQueueRsp::CopyFrom(const ClientCancelQueueRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCancelQueueRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientCancelQueueRsp::Swap(ClientCancelQueueRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientCancelQueueRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientCancelQueueRsp_descriptor_;
  metadata.reflection = ClientCancelQueueRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReConnectReq::kUidFieldNumber;
const int ClientReConnectReq::kCidFieldNumber;
const int ClientReConnectReq::kTokenFieldNumber;
#endif  // !_MSC_VER

ClientReConnectReq::ClientReConnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReConnectReq::InitAsDefaultInstance() {
}

ClientReConnectReq::ClientReConnectReq(const ClientReConnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReConnectReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReConnectReq::~ClientReConnectReq() {
  SharedDtor();
}

void ClientReConnectReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void ClientReConnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReConnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReConnectReq_descriptor_;
}

const ClientReConnectReq& ClientReConnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientReConnectReq* ClientReConnectReq::default_instance_ = NULL;

ClientReConnectReq* ClientReConnectReq::New() const {
  return new ClientReConnectReq;
}

void ClientReConnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReConnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReConnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReConnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReConnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReConnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReConnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReConnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReConnectReq::MergeFrom(const ClientReConnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReConnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReConnectReq::CopyFrom(const ClientReConnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReConnectReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientReConnectReq::Swap(ClientReConnectReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReConnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReConnectReq_descriptor_;
  metadata.reflection = ClientReConnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReConnectRsp::kRetFieldNumber;
#endif  // !_MSC_VER

ClientReConnectRsp::ClientReConnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReConnectRsp::InitAsDefaultInstance() {
}

ClientReConnectRsp::ClientReConnectRsp(const ClientReConnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReConnectRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReConnectRsp::~ClientReConnectRsp() {
  SharedDtor();
}

void ClientReConnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReConnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReConnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReConnectRsp_descriptor_;
}

const ClientReConnectRsp& ClientReConnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientReConnectRsp* ClientReConnectRsp::default_instance_ = NULL;

ClientReConnectRsp* ClientReConnectRsp::New() const {
  return new ClientReConnectRsp;
}

void ClientReConnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReConnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReConnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReConnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReConnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReConnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReConnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReConnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReConnectRsp::MergeFrom(const ClientReConnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReConnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReConnectRsp::CopyFrom(const ClientReConnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReConnectRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReConnectRsp::Swap(ClientReConnectRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReConnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReConnectRsp_descriptor_;
  metadata.reflection = ClientReConnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEnterGameReq::kCidFieldNumber;
#endif  // !_MSC_VER

ClientEnterGameReq::ClientEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientEnterGameReq::InitAsDefaultInstance() {
}

ClientEnterGameReq::ClientEnterGameReq(const ClientEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEnterGameReq::~ClientEnterGameReq() {
  SharedDtor();
}

void ClientEnterGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEnterGameReq_descriptor_;
}

const ClientEnterGameReq& ClientEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientEnterGameReq* ClientEnterGameReq::default_instance_ = NULL;

ClientEnterGameReq* ClientEnterGameReq::New() const {
  return new ClientEnterGameReq;
}

void ClientEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientEnterGameReq::MergeFrom(const ClientEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEnterGameReq::CopyFrom(const ClientEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientEnterGameReq::Swap(ClientEnterGameReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEnterGameReq_descriptor_;
  metadata.reflection = ClientEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientEnterGameRsp::kRetFieldNumber;
#endif  // !_MSC_VER

ClientEnterGameRsp::ClientEnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientEnterGameRsp::InitAsDefaultInstance() {
}

ClientEnterGameRsp::ClientEnterGameRsp(const ClientEnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientEnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientEnterGameRsp::~ClientEnterGameRsp() {
  SharedDtor();
}

void ClientEnterGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientEnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientEnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientEnterGameRsp_descriptor_;
}

const ClientEnterGameRsp& ClientEnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientEnterGameRsp* ClientEnterGameRsp::default_instance_ = NULL;

ClientEnterGameRsp* ClientEnterGameRsp::New() const {
  return new ClientEnterGameRsp;
}

void ClientEnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientEnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientEnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientEnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientEnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientEnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientEnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientEnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientEnterGameRsp::MergeFrom(const ClientEnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientEnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientEnterGameRsp::CopyFrom(const ClientEnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientEnterGameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientEnterGameRsp::Swap(ClientEnterGameRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientEnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientEnterGameRsp_descriptor_;
  metadata.reflection = ClientEnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReturnRoleListReq::ReturnRoleListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnRoleListReq::InitAsDefaultInstance() {
}

ReturnRoleListReq::ReturnRoleListReq(const ReturnRoleListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnRoleListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnRoleListReq::~ReturnRoleListReq() {
  SharedDtor();
}

void ReturnRoleListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnRoleListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnRoleListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnRoleListReq_descriptor_;
}

const ReturnRoleListReq& ReturnRoleListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ReturnRoleListReq* ReturnRoleListReq::default_instance_ = NULL;

ReturnRoleListReq* ReturnRoleListReq::New() const {
  return new ReturnRoleListReq;
}

void ReturnRoleListReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnRoleListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReturnRoleListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnRoleListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnRoleListReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnRoleListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnRoleListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnRoleListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnRoleListReq::MergeFrom(const ReturnRoleListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnRoleListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnRoleListReq::CopyFrom(const ReturnRoleListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnRoleListReq::IsInitialized() const {

  return true;
}

void ReturnRoleListReq::Swap(ReturnRoleListReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnRoleListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnRoleListReq_descriptor_;
  metadata.reflection = ReturnRoleListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnRoleListRsp::kRetFieldNumber;
const int ReturnRoleListRsp::kRoleLstFieldNumber;
#endif  // !_MSC_VER

ReturnRoleListRsp::ReturnRoleListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnRoleListRsp::InitAsDefaultInstance() {
}

ReturnRoleListRsp::ReturnRoleListRsp(const ReturnRoleListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnRoleListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnRoleListRsp::~ReturnRoleListRsp() {
  SharedDtor();
}

void ReturnRoleListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnRoleListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnRoleListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnRoleListRsp_descriptor_;
}

const ReturnRoleListRsp& ReturnRoleListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ReturnRoleListRsp* ReturnRoleListRsp::default_instance_ = NULL;

ReturnRoleListRsp* ReturnRoleListRsp::New() const {
  return new ReturnRoleListRsp;
}

void ReturnRoleListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  role_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnRoleListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_lst;
        break;
      }

      // repeated .proto_ff.LoginRoleProto role_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnRoleListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  for (int i = 0; i < this->role_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnRoleListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  for (int i = 0; i < this->role_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnRoleListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .proto_ff.LoginRoleProto role_lst = 2;
  total_size += 1 * this->role_lst_size();
  for (int i = 0; i < this->role_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnRoleListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnRoleListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnRoleListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnRoleListRsp::MergeFrom(const ReturnRoleListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_lst_.MergeFrom(from.role_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnRoleListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnRoleListRsp::CopyFrom(const ReturnRoleListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnRoleListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < role_lst_size(); i++) {
    if (!this->role_lst(i).IsInitialized()) return false;
  }
  return true;
}

void ReturnRoleListRsp::Swap(ReturnRoleListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    role_lst_.Swap(&other->role_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnRoleListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnRoleListRsp_descriptor_;
  metadata.reflection = ReturnRoleListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientPingReq::ClientPingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientPingReq::InitAsDefaultInstance() {
}

ClientPingReq::ClientPingReq(const ClientPingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientPingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPingReq::~ClientPingReq() {
  SharedDtor();
}

void ClientPingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientPingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPingReq_descriptor_;
}

const ClientPingReq& ClientPingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientPingReq* ClientPingReq::default_instance_ = NULL;

ClientPingReq* ClientPingReq::New() const {
  return new ClientPingReq;
}

void ClientPingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientPingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientPingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientPingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientPingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientPingReq::MergeFrom(const ClientPingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientPingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPingReq::CopyFrom(const ClientPingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPingReq::IsInitialized() const {

  return true;
}

void ClientPingReq::Swap(ClientPingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientPingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPingReq_descriptor_;
  metadata.reflection = ClientPingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientPingRsp::kUnixSecFieldNumber;
const int ClientPingRsp::kUnixMsecFieldNumber;
#endif  // !_MSC_VER

ClientPingRsp::ClientPingRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientPingRsp::InitAsDefaultInstance() {
}

ClientPingRsp::ClientPingRsp(const ClientPingRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientPingRsp::SharedCtor() {
  _cached_size_ = 0;
  unix_sec_ = GOOGLE_ULONGLONG(0);
  unix_msec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientPingRsp::~ClientPingRsp() {
  SharedDtor();
}

void ClientPingRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientPingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientPingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientPingRsp_descriptor_;
}

const ClientPingRsp& ClientPingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CSLogin_2eproto();
  return *default_instance_;
}

ClientPingRsp* ClientPingRsp::default_instance_ = NULL;

ClientPingRsp* ClientPingRsp::New() const {
  return new ClientPingRsp;
}

void ClientPingRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unix_sec_ = GOOGLE_ULONGLONG(0);
    unix_msec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientPingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 unix_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unix_sec_)));
          set_has_unix_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_unix_msec;
        break;
      }

      // required uint64 unix_msec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unix_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unix_msec_)));
          set_has_unix_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientPingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 unix_sec = 1;
  if (has_unix_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unix_sec(), output);
  }

  // required uint64 unix_msec = 2;
  if (has_unix_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unix_msec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientPingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 unix_sec = 1;
  if (has_unix_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unix_sec(), target);
  }

  // required uint64 unix_msec = 2;
  if (has_unix_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unix_msec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientPingRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 unix_sec = 1;
    if (has_unix_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unix_sec());
    }

    // required uint64 unix_msec = 2;
    if (has_unix_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unix_msec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientPingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientPingRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientPingRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientPingRsp::MergeFrom(const ClientPingRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unix_sec()) {
      set_unix_sec(from.unix_sec());
    }
    if (from.has_unix_msec()) {
      set_unix_msec(from.unix_msec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientPingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientPingRsp::CopyFrom(const ClientPingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientPingRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientPingRsp::Swap(ClientPingRsp* other) {
  if (other != this) {
    std::swap(unix_sec_, other->unix_sec_);
    std::swap(unix_msec_, other->unix_msec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientPingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientPingRsp_descriptor_;
  metadata.reflection = ClientPingRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
