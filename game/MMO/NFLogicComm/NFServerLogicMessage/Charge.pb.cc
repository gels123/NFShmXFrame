// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Charge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Charge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ChargeFirstTotalProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeFirstTotalProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_FirstInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_FirstInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_FirstInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_FirstInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_FirstFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_FirstFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_FirstFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_FirstFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_FirstTotalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_FirstTotalRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_OpenTotalInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_OpenTotalInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_OpenTotalInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_OpenTotalInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_OpenTotalFetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_OpenTotalFetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_OpenTotalFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_OpenTotalFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Charge_UpdateOpenTotalRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Charge_UpdateOpenTotalRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Charge_2eproto() {
  protobuf_AddDesc_Charge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Charge.proto");
  GOOGLE_CHECK(file != NULL);
  ChargeFirstTotalProto_descriptor_ = file->message_type(0);
  static const int ChargeFirstTotalProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeFirstTotalProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeFirstTotalProto, total_),
  };
  ChargeFirstTotalProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeFirstTotalProto_descriptor_,
      ChargeFirstTotalProto::default_instance_,
      ChargeFirstTotalProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeFirstTotalProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeFirstTotalProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeFirstTotalProto));
  Charge_FirstInfoReq_descriptor_ = file->message_type(1);
  static const int Charge_FirstInfoReq_offsets_[1] = {
  };
  Charge_FirstInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_FirstInfoReq_descriptor_,
      Charge_FirstInfoReq::default_instance_,
      Charge_FirstInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_FirstInfoReq));
  Charge_FirstInfoRsp_descriptor_ = file->message_type(2);
  static const int Charge_FirstInfoRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, first_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, first_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, dia_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, dia_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, star_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, star_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, king_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, king_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, second_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, second_fetch_),
  };
  Charge_FirstInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_FirstInfoRsp_descriptor_,
      Charge_FirstInfoRsp::default_instance_,
      Charge_FirstInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_FirstInfoRsp));
  Charge_FirstFetchReq_descriptor_ = file->message_type(3);
  static const int Charge_FirstFetchReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchReq, one_key_),
  };
  Charge_FirstFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_FirstFetchReq_descriptor_,
      Charge_FirstFetchReq::default_instance_,
      Charge_FirstFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_FirstFetchReq));
  Charge_FirstFetchRsp_descriptor_ = file->message_type(4);
  static const int Charge_FirstFetchRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchRsp, id_lst_),
  };
  Charge_FirstFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_FirstFetchRsp_descriptor_,
      Charge_FirstFetchRsp::default_instance_,
      Charge_FirstFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_FirstFetchRsp));
  Charge_FirstTotalRsp_descriptor_ = file->message_type(5);
  static const int Charge_FirstTotalRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstTotalRsp, info_),
  };
  Charge_FirstTotalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_FirstTotalRsp_descriptor_,
      Charge_FirstTotalRsp::default_instance_,
      Charge_FirstTotalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstTotalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_FirstTotalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_FirstTotalRsp));
  Charge_OpenTotalInfoReq_descriptor_ = file->message_type(6);
  static const int Charge_OpenTotalInfoReq_offsets_[1] = {
  };
  Charge_OpenTotalInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_OpenTotalInfoReq_descriptor_,
      Charge_OpenTotalInfoReq::default_instance_,
      Charge_OpenTotalInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_OpenTotalInfoReq));
  Charge_OpenTotalInfoRsp_descriptor_ = file->message_type(7);
  static const int Charge_OpenTotalInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoRsp, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoRsp, fetch_),
  };
  Charge_OpenTotalInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_OpenTotalInfoRsp_descriptor_,
      Charge_OpenTotalInfoRsp::default_instance_,
      Charge_OpenTotalInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_OpenTotalInfoRsp));
  Charge_OpenTotalFetchReq_descriptor_ = file->message_type(8);
  static const int Charge_OpenTotalFetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchReq, id_),
  };
  Charge_OpenTotalFetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_OpenTotalFetchReq_descriptor_,
      Charge_OpenTotalFetchReq::default_instance_,
      Charge_OpenTotalFetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_OpenTotalFetchReq));
  Charge_OpenTotalFetchRsp_descriptor_ = file->message_type(9);
  static const int Charge_OpenTotalFetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchRsp, id_),
  };
  Charge_OpenTotalFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_OpenTotalFetchRsp_descriptor_,
      Charge_OpenTotalFetchRsp::default_instance_,
      Charge_OpenTotalFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_OpenTotalFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_OpenTotalFetchRsp));
  Charge_UpdateOpenTotalRsp_descriptor_ = file->message_type(10);
  static const int Charge_UpdateOpenTotalRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_UpdateOpenTotalRsp, total_),
  };
  Charge_UpdateOpenTotalRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Charge_UpdateOpenTotalRsp_descriptor_,
      Charge_UpdateOpenTotalRsp::default_instance_,
      Charge_UpdateOpenTotalRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_UpdateOpenTotalRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Charge_UpdateOpenTotalRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Charge_UpdateOpenTotalRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Charge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeFirstTotalProto_descriptor_, &ChargeFirstTotalProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_FirstInfoReq_descriptor_, &Charge_FirstInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_FirstInfoRsp_descriptor_, &Charge_FirstInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_FirstFetchReq_descriptor_, &Charge_FirstFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_FirstFetchRsp_descriptor_, &Charge_FirstFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_FirstTotalRsp_descriptor_, &Charge_FirstTotalRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_OpenTotalInfoReq_descriptor_, &Charge_OpenTotalInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_OpenTotalInfoRsp_descriptor_, &Charge_OpenTotalInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_OpenTotalFetchReq_descriptor_, &Charge_OpenTotalFetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_OpenTotalFetchRsp_descriptor_, &Charge_OpenTotalFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Charge_UpdateOpenTotalRsp_descriptor_, &Charge_UpdateOpenTotalRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Charge_2eproto() {
  delete ChargeFirstTotalProto::default_instance_;
  delete ChargeFirstTotalProto_reflection_;
  delete Charge_FirstInfoReq::default_instance_;
  delete Charge_FirstInfoReq_reflection_;
  delete Charge_FirstInfoRsp::default_instance_;
  delete Charge_FirstInfoRsp_reflection_;
  delete Charge_FirstFetchReq::default_instance_;
  delete Charge_FirstFetchReq_reflection_;
  delete Charge_FirstFetchRsp::default_instance_;
  delete Charge_FirstFetchRsp_reflection_;
  delete Charge_FirstTotalRsp::default_instance_;
  delete Charge_FirstTotalRsp_reflection_;
  delete Charge_OpenTotalInfoReq::default_instance_;
  delete Charge_OpenTotalInfoReq_reflection_;
  delete Charge_OpenTotalInfoRsp::default_instance_;
  delete Charge_OpenTotalInfoRsp_reflection_;
  delete Charge_OpenTotalFetchReq::default_instance_;
  delete Charge_OpenTotalFetchReq_reflection_;
  delete Charge_OpenTotalFetchRsp::default_instance_;
  delete Charge_OpenTotalFetchRsp_reflection_;
  delete Charge_UpdateOpenTotalRsp::default_instance_;
  delete Charge_UpdateOpenTotalRsp_reflection_;
}

void protobuf_AddDesc_Charge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Charge.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"4\n\025ChargeFirstTotalProto\022\014\n"
    "\004type\030\001 \001(\005\022\r\n\005total\030\002 \001(\005\"\025\n\023Charge_Fir"
    "stInfoReq\"\327\001\n\023Charge_FirstInfoRsp\022\021\n\tfir"
    "st_rmb\030\001 \001(\005\022\023\n\013first_fetch\030\002 \003(\005\022\017\n\007dia"
    "_rmb\030\003 \001(\005\022\021\n\tdia_fetch\030\004 \003(\005\022\020\n\010star_rm"
    "b\030\005 \001(\005\022\022\n\nstar_fetch\030\006 \003(\005\022\020\n\010king_rmb\030"
    "\007 \001(\005\022\022\n\nking_fetch\030\010 \003(\005\022\022\n\nsecond_rmb\030"
    "\t \001(\005\022\024\n\014second_fetch\030\n \003(\005\"A\n\024Charge_Fi"
    "rstFetchReq\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\017\n"
    "\007one_key\030\003 \001(\005\"A\n\024Charge_FirstFetchRsp\022\013"
    "\n\003ret\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\016\n\006id_lst\030\003 \003("
    "\005\"E\n\024Charge_FirstTotalRsp\022-\n\004info\030\001 \003(\0132"
    "\037.proto_ff.ChargeFirstTotalProto\"\031\n\027Char"
    "ge_OpenTotalInfoReq\"7\n\027Charge_OpenTotalI"
    "nfoRsp\022\r\n\005total\030\001 \001(\005\022\r\n\005fetch\030\002 \003(\005\"&\n\030"
    "Charge_OpenTotalFetchReq\022\n\n\002id\030\001 \001(\005\"3\n\030"
    "Charge_OpenTotalFetchRsp\022\013\n\003ret\030\001 \002(\005\022\n\n"
    "\002id\030\002 \001(\005\"*\n\031Charge_UpdateOpenTotalRsp\022\r"
    "\n\005total\030\001 \001(\005", 773);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Charge.proto", &protobuf_RegisterTypes);
  ChargeFirstTotalProto::default_instance_ = new ChargeFirstTotalProto();
  Charge_FirstInfoReq::default_instance_ = new Charge_FirstInfoReq();
  Charge_FirstInfoRsp::default_instance_ = new Charge_FirstInfoRsp();
  Charge_FirstFetchReq::default_instance_ = new Charge_FirstFetchReq();
  Charge_FirstFetchRsp::default_instance_ = new Charge_FirstFetchRsp();
  Charge_FirstTotalRsp::default_instance_ = new Charge_FirstTotalRsp();
  Charge_OpenTotalInfoReq::default_instance_ = new Charge_OpenTotalInfoReq();
  Charge_OpenTotalInfoRsp::default_instance_ = new Charge_OpenTotalInfoRsp();
  Charge_OpenTotalFetchReq::default_instance_ = new Charge_OpenTotalFetchReq();
  Charge_OpenTotalFetchRsp::default_instance_ = new Charge_OpenTotalFetchRsp();
  Charge_UpdateOpenTotalRsp::default_instance_ = new Charge_UpdateOpenTotalRsp();
  ChargeFirstTotalProto::default_instance_->InitAsDefaultInstance();
  Charge_FirstInfoReq::default_instance_->InitAsDefaultInstance();
  Charge_FirstInfoRsp::default_instance_->InitAsDefaultInstance();
  Charge_FirstFetchReq::default_instance_->InitAsDefaultInstance();
  Charge_FirstFetchRsp::default_instance_->InitAsDefaultInstance();
  Charge_FirstTotalRsp::default_instance_->InitAsDefaultInstance();
  Charge_OpenTotalInfoReq::default_instance_->InitAsDefaultInstance();
  Charge_OpenTotalInfoRsp::default_instance_->InitAsDefaultInstance();
  Charge_OpenTotalFetchReq::default_instance_->InitAsDefaultInstance();
  Charge_OpenTotalFetchRsp::default_instance_->InitAsDefaultInstance();
  Charge_UpdateOpenTotalRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Charge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Charge_2eproto {
  StaticDescriptorInitializer_Charge_2eproto() {
    protobuf_AddDesc_Charge_2eproto();
  }
} static_descriptor_initializer_Charge_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChargeFirstTotalProto::kTypeFieldNumber;
const int ChargeFirstTotalProto::kTotalFieldNumber;
#endif  // !_MSC_VER

ChargeFirstTotalProto::ChargeFirstTotalProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeFirstTotalProto::InitAsDefaultInstance() {
}

ChargeFirstTotalProto::ChargeFirstTotalProto(const ChargeFirstTotalProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeFirstTotalProto::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeFirstTotalProto::~ChargeFirstTotalProto() {
  SharedDtor();
}

void ChargeFirstTotalProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeFirstTotalProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeFirstTotalProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeFirstTotalProto_descriptor_;
}

const ChargeFirstTotalProto& ChargeFirstTotalProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

ChargeFirstTotalProto* ChargeFirstTotalProto::default_instance_ = NULL;

ChargeFirstTotalProto* ChargeFirstTotalProto::New() const {
  return new ChargeFirstTotalProto;
}

void ChargeFirstTotalProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeFirstTotalProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeFirstTotalProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeFirstTotalProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeFirstTotalProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeFirstTotalProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeFirstTotalProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeFirstTotalProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeFirstTotalProto::MergeFrom(const ChargeFirstTotalProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeFirstTotalProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeFirstTotalProto::CopyFrom(const ChargeFirstTotalProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeFirstTotalProto::IsInitialized() const {

  return true;
}

void ChargeFirstTotalProto::Swap(ChargeFirstTotalProto* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeFirstTotalProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeFirstTotalProto_descriptor_;
  metadata.reflection = ChargeFirstTotalProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Charge_FirstInfoReq::Charge_FirstInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_FirstInfoReq::InitAsDefaultInstance() {
}

Charge_FirstInfoReq::Charge_FirstInfoReq(const Charge_FirstInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_FirstInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_FirstInfoReq::~Charge_FirstInfoReq() {
  SharedDtor();
}

void Charge_FirstInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_FirstInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_FirstInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_FirstInfoReq_descriptor_;
}

const Charge_FirstInfoReq& Charge_FirstInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_FirstInfoReq* Charge_FirstInfoReq::default_instance_ = NULL;

Charge_FirstInfoReq* Charge_FirstInfoReq::New() const {
  return new Charge_FirstInfoReq;
}

void Charge_FirstInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_FirstInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Charge_FirstInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_FirstInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_FirstInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_FirstInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_FirstInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_FirstInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_FirstInfoReq::MergeFrom(const Charge_FirstInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_FirstInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_FirstInfoReq::CopyFrom(const Charge_FirstInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_FirstInfoReq::IsInitialized() const {

  return true;
}

void Charge_FirstInfoReq::Swap(Charge_FirstInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_FirstInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_FirstInfoReq_descriptor_;
  metadata.reflection = Charge_FirstInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_FirstInfoRsp::kFirstRmbFieldNumber;
const int Charge_FirstInfoRsp::kFirstFetchFieldNumber;
const int Charge_FirstInfoRsp::kDiaRmbFieldNumber;
const int Charge_FirstInfoRsp::kDiaFetchFieldNumber;
const int Charge_FirstInfoRsp::kStarRmbFieldNumber;
const int Charge_FirstInfoRsp::kStarFetchFieldNumber;
const int Charge_FirstInfoRsp::kKingRmbFieldNumber;
const int Charge_FirstInfoRsp::kKingFetchFieldNumber;
const int Charge_FirstInfoRsp::kSecondRmbFieldNumber;
const int Charge_FirstInfoRsp::kSecondFetchFieldNumber;
#endif  // !_MSC_VER

Charge_FirstInfoRsp::Charge_FirstInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_FirstInfoRsp::InitAsDefaultInstance() {
}

Charge_FirstInfoRsp::Charge_FirstInfoRsp(const Charge_FirstInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_FirstInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  first_rmb_ = 0;
  dia_rmb_ = 0;
  star_rmb_ = 0;
  king_rmb_ = 0;
  second_rmb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_FirstInfoRsp::~Charge_FirstInfoRsp() {
  SharedDtor();
}

void Charge_FirstInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_FirstInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_FirstInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_FirstInfoRsp_descriptor_;
}

const Charge_FirstInfoRsp& Charge_FirstInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_FirstInfoRsp* Charge_FirstInfoRsp::default_instance_ = NULL;

Charge_FirstInfoRsp* Charge_FirstInfoRsp::New() const {
  return new Charge_FirstInfoRsp;
}

void Charge_FirstInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_rmb_ = 0;
    dia_rmb_ = 0;
    star_rmb_ = 0;
    king_rmb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    second_rmb_ = 0;
  }
  first_fetch_.Clear();
  dia_fetch_.Clear();
  star_fetch_.Clear();
  king_fetch_.Clear();
  second_fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_FirstInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 first_rmb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_rmb_)));
          set_has_first_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_fetch;
        break;
      }

      // repeated int32 first_fetch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_fetch;
        if (input->ExpectTag(24)) goto parse_dia_rmb;
        break;
      }

      // optional int32 dia_rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dia_rmb_)));
          set_has_dia_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dia_fetch;
        break;
      }

      // repeated int32 dia_fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_dia_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dia_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dia_fetch;
        if (input->ExpectTag(40)) goto parse_star_rmb;
        break;
      }

      // optional int32 star_rmb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_rmb_)));
          set_has_star_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_fetch;
        break;
      }

      // repeated int32 star_fetch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_star_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_star_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_fetch;
        if (input->ExpectTag(56)) goto parse_king_rmb;
        break;
      }

      // optional int32 king_rmb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &king_rmb_)));
          set_has_king_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_fetch;
        break;
      }

      // repeated int32 king_fetch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_king_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_king_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_fetch;
        if (input->ExpectTag(72)) goto parse_second_rmb;
        break;
      }

      // optional int32 second_rmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_rmb_)));
          set_has_second_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_second_fetch;
        break;
      }

      // repeated int32 second_fetch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_second_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_second_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_FirstInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 first_rmb = 1;
  if (has_first_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_rmb(), output);
  }

  // repeated int32 first_fetch = 2;
  for (int i = 0; i < this->first_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_fetch(i), output);
  }

  // optional int32 dia_rmb = 3;
  if (has_dia_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dia_rmb(), output);
  }

  // repeated int32 dia_fetch = 4;
  for (int i = 0; i < this->dia_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->dia_fetch(i), output);
  }

  // optional int32 star_rmb = 5;
  if (has_star_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star_rmb(), output);
  }

  // repeated int32 star_fetch = 6;
  for (int i = 0; i < this->star_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->star_fetch(i), output);
  }

  // optional int32 king_rmb = 7;
  if (has_king_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->king_rmb(), output);
  }

  // repeated int32 king_fetch = 8;
  for (int i = 0; i < this->king_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->king_fetch(i), output);
  }

  // optional int32 second_rmb = 9;
  if (has_second_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->second_rmb(), output);
  }

  // repeated int32 second_fetch = 10;
  for (int i = 0; i < this->second_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->second_fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_FirstInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 first_rmb = 1;
  if (has_first_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_rmb(), target);
  }

  // repeated int32 first_fetch = 2;
  for (int i = 0; i < this->first_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_fetch(i), target);
  }

  // optional int32 dia_rmb = 3;
  if (has_dia_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dia_rmb(), target);
  }

  // repeated int32 dia_fetch = 4;
  for (int i = 0; i < this->dia_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->dia_fetch(i), target);
  }

  // optional int32 star_rmb = 5;
  if (has_star_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star_rmb(), target);
  }

  // repeated int32 star_fetch = 6;
  for (int i = 0; i < this->star_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->star_fetch(i), target);
  }

  // optional int32 king_rmb = 7;
  if (has_king_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->king_rmb(), target);
  }

  // repeated int32 king_fetch = 8;
  for (int i = 0; i < this->king_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->king_fetch(i), target);
  }

  // optional int32 second_rmb = 9;
  if (has_second_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->second_rmb(), target);
  }

  // repeated int32 second_fetch = 10;
  for (int i = 0; i < this->second_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->second_fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_FirstInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 first_rmb = 1;
    if (has_first_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_rmb());
    }

    // optional int32 dia_rmb = 3;
    if (has_dia_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dia_rmb());
    }

    // optional int32 star_rmb = 5;
    if (has_star_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_rmb());
    }

    // optional int32 king_rmb = 7;
    if (has_king_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->king_rmb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 second_rmb = 9;
    if (has_second_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_rmb());
    }

  }
  // repeated int32 first_fetch = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_fetch(i));
    }
    total_size += 1 * this->first_fetch_size() + data_size;
  }

  // repeated int32 dia_fetch = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dia_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dia_fetch(i));
    }
    total_size += 1 * this->dia_fetch_size() + data_size;
  }

  // repeated int32 star_fetch = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->star_fetch(i));
    }
    total_size += 1 * this->star_fetch_size() + data_size;
  }

  // repeated int32 king_fetch = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->king_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->king_fetch(i));
    }
    total_size += 1 * this->king_fetch_size() + data_size;
  }

  // repeated int32 second_fetch = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->second_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->second_fetch(i));
    }
    total_size += 1 * this->second_fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_FirstInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_FirstInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_FirstInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_FirstInfoRsp::MergeFrom(const Charge_FirstInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_fetch_.MergeFrom(from.first_fetch_);
  dia_fetch_.MergeFrom(from.dia_fetch_);
  star_fetch_.MergeFrom(from.star_fetch_);
  king_fetch_.MergeFrom(from.king_fetch_);
  second_fetch_.MergeFrom(from.second_fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_rmb()) {
      set_first_rmb(from.first_rmb());
    }
    if (from.has_dia_rmb()) {
      set_dia_rmb(from.dia_rmb());
    }
    if (from.has_star_rmb()) {
      set_star_rmb(from.star_rmb());
    }
    if (from.has_king_rmb()) {
      set_king_rmb(from.king_rmb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_second_rmb()) {
      set_second_rmb(from.second_rmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_FirstInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_FirstInfoRsp::CopyFrom(const Charge_FirstInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_FirstInfoRsp::IsInitialized() const {

  return true;
}

void Charge_FirstInfoRsp::Swap(Charge_FirstInfoRsp* other) {
  if (other != this) {
    std::swap(first_rmb_, other->first_rmb_);
    first_fetch_.Swap(&other->first_fetch_);
    std::swap(dia_rmb_, other->dia_rmb_);
    dia_fetch_.Swap(&other->dia_fetch_);
    std::swap(star_rmb_, other->star_rmb_);
    star_fetch_.Swap(&other->star_fetch_);
    std::swap(king_rmb_, other->king_rmb_);
    king_fetch_.Swap(&other->king_fetch_);
    std::swap(second_rmb_, other->second_rmb_);
    second_fetch_.Swap(&other->second_fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_FirstInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_FirstInfoRsp_descriptor_;
  metadata.reflection = Charge_FirstInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_FirstFetchReq::kTypeFieldNumber;
const int Charge_FirstFetchReq::kIdFieldNumber;
const int Charge_FirstFetchReq::kOneKeyFieldNumber;
#endif  // !_MSC_VER

Charge_FirstFetchReq::Charge_FirstFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_FirstFetchReq::InitAsDefaultInstance() {
}

Charge_FirstFetchReq::Charge_FirstFetchReq(const Charge_FirstFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_FirstFetchReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  one_key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_FirstFetchReq::~Charge_FirstFetchReq() {
  SharedDtor();
}

void Charge_FirstFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_FirstFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_FirstFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_FirstFetchReq_descriptor_;
}

const Charge_FirstFetchReq& Charge_FirstFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_FirstFetchReq* Charge_FirstFetchReq::default_instance_ = NULL;

Charge_FirstFetchReq* Charge_FirstFetchReq::New() const {
  return new Charge_FirstFetchReq;
}

void Charge_FirstFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    one_key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_FirstFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_one_key;
        break;
      }

      // optional int32 one_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_one_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &one_key_)));
          set_has_one_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_FirstFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 one_key = 3;
  if (has_one_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->one_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_FirstFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 one_key = 3;
  if (has_one_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->one_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_FirstFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 one_key = 3;
    if (has_one_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->one_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_FirstFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_FirstFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_FirstFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_FirstFetchReq::MergeFrom(const Charge_FirstFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_one_key()) {
      set_one_key(from.one_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_FirstFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_FirstFetchReq::CopyFrom(const Charge_FirstFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_FirstFetchReq::IsInitialized() const {

  return true;
}

void Charge_FirstFetchReq::Swap(Charge_FirstFetchReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(one_key_, other->one_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_FirstFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_FirstFetchReq_descriptor_;
  metadata.reflection = Charge_FirstFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_FirstFetchRsp::kRetFieldNumber;
const int Charge_FirstFetchRsp::kTypeFieldNumber;
const int Charge_FirstFetchRsp::kIdLstFieldNumber;
#endif  // !_MSC_VER

Charge_FirstFetchRsp::Charge_FirstFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_FirstFetchRsp::InitAsDefaultInstance() {
}

Charge_FirstFetchRsp::Charge_FirstFetchRsp(const Charge_FirstFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_FirstFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_FirstFetchRsp::~Charge_FirstFetchRsp() {
  SharedDtor();
}

void Charge_FirstFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_FirstFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_FirstFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_FirstFetchRsp_descriptor_;
}

const Charge_FirstFetchRsp& Charge_FirstFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_FirstFetchRsp* Charge_FirstFetchRsp::default_instance_ = NULL;

Charge_FirstFetchRsp* Charge_FirstFetchRsp::New() const {
  return new Charge_FirstFetchRsp;
}

void Charge_FirstFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_FirstFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_lst;
        break;
      }

      // repeated int32 id_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_FirstFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated int32 id_lst = 3;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_FirstFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated int32 id_lst = 3;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_FirstFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 id_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_FirstFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_FirstFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_FirstFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_FirstFetchRsp::MergeFrom(const Charge_FirstFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_FirstFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_FirstFetchRsp::CopyFrom(const Charge_FirstFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_FirstFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Charge_FirstFetchRsp::Swap(Charge_FirstFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_FirstFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_FirstFetchRsp_descriptor_;
  metadata.reflection = Charge_FirstFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_FirstTotalRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

Charge_FirstTotalRsp::Charge_FirstTotalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_FirstTotalRsp::InitAsDefaultInstance() {
}

Charge_FirstTotalRsp::Charge_FirstTotalRsp(const Charge_FirstTotalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_FirstTotalRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_FirstTotalRsp::~Charge_FirstTotalRsp() {
  SharedDtor();
}

void Charge_FirstTotalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_FirstTotalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_FirstTotalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_FirstTotalRsp_descriptor_;
}

const Charge_FirstTotalRsp& Charge_FirstTotalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_FirstTotalRsp* Charge_FirstTotalRsp::default_instance_ = NULL;

Charge_FirstTotalRsp* Charge_FirstTotalRsp::New() const {
  return new Charge_FirstTotalRsp;
}

void Charge_FirstTotalRsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_FirstTotalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ChargeFirstTotalProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_FirstTotalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ChargeFirstTotalProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_FirstTotalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ChargeFirstTotalProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_FirstTotalRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ChargeFirstTotalProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_FirstTotalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_FirstTotalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_FirstTotalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_FirstTotalRsp::MergeFrom(const Charge_FirstTotalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_FirstTotalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_FirstTotalRsp::CopyFrom(const Charge_FirstTotalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_FirstTotalRsp::IsInitialized() const {

  return true;
}

void Charge_FirstTotalRsp::Swap(Charge_FirstTotalRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_FirstTotalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_FirstTotalRsp_descriptor_;
  metadata.reflection = Charge_FirstTotalRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Charge_OpenTotalInfoReq::Charge_OpenTotalInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_OpenTotalInfoReq::InitAsDefaultInstance() {
}

Charge_OpenTotalInfoReq::Charge_OpenTotalInfoReq(const Charge_OpenTotalInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_OpenTotalInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_OpenTotalInfoReq::~Charge_OpenTotalInfoReq() {
  SharedDtor();
}

void Charge_OpenTotalInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_OpenTotalInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_OpenTotalInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_OpenTotalInfoReq_descriptor_;
}

const Charge_OpenTotalInfoReq& Charge_OpenTotalInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_OpenTotalInfoReq* Charge_OpenTotalInfoReq::default_instance_ = NULL;

Charge_OpenTotalInfoReq* Charge_OpenTotalInfoReq::New() const {
  return new Charge_OpenTotalInfoReq;
}

void Charge_OpenTotalInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_OpenTotalInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Charge_OpenTotalInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_OpenTotalInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_OpenTotalInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_OpenTotalInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_OpenTotalInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_OpenTotalInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_OpenTotalInfoReq::MergeFrom(const Charge_OpenTotalInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_OpenTotalInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_OpenTotalInfoReq::CopyFrom(const Charge_OpenTotalInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_OpenTotalInfoReq::IsInitialized() const {

  return true;
}

void Charge_OpenTotalInfoReq::Swap(Charge_OpenTotalInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_OpenTotalInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_OpenTotalInfoReq_descriptor_;
  metadata.reflection = Charge_OpenTotalInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_OpenTotalInfoRsp::kTotalFieldNumber;
const int Charge_OpenTotalInfoRsp::kFetchFieldNumber;
#endif  // !_MSC_VER

Charge_OpenTotalInfoRsp::Charge_OpenTotalInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_OpenTotalInfoRsp::InitAsDefaultInstance() {
}

Charge_OpenTotalInfoRsp::Charge_OpenTotalInfoRsp(const Charge_OpenTotalInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_OpenTotalInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_OpenTotalInfoRsp::~Charge_OpenTotalInfoRsp() {
  SharedDtor();
}

void Charge_OpenTotalInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_OpenTotalInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_OpenTotalInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_OpenTotalInfoRsp_descriptor_;
}

const Charge_OpenTotalInfoRsp& Charge_OpenTotalInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_OpenTotalInfoRsp* Charge_OpenTotalInfoRsp::default_instance_ = NULL;

Charge_OpenTotalInfoRsp* Charge_OpenTotalInfoRsp::New() const {
  return new Charge_OpenTotalInfoRsp;
}

void Charge_OpenTotalInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_OpenTotalInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetch;
        break;
      }

      // repeated int32 fetch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_OpenTotalInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // repeated int32 fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_OpenTotalInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // repeated int32 fetch = 2;
  for (int i = 0; i < this->fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_OpenTotalInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated int32 fetch = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch(i));
    }
    total_size += 1 * this->fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_OpenTotalInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_OpenTotalInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_OpenTotalInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_OpenTotalInfoRsp::MergeFrom(const Charge_OpenTotalInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_.MergeFrom(from.fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_OpenTotalInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_OpenTotalInfoRsp::CopyFrom(const Charge_OpenTotalInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_OpenTotalInfoRsp::IsInitialized() const {

  return true;
}

void Charge_OpenTotalInfoRsp::Swap(Charge_OpenTotalInfoRsp* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    fetch_.Swap(&other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_OpenTotalInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_OpenTotalInfoRsp_descriptor_;
  metadata.reflection = Charge_OpenTotalInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_OpenTotalFetchReq::kIdFieldNumber;
#endif  // !_MSC_VER

Charge_OpenTotalFetchReq::Charge_OpenTotalFetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_OpenTotalFetchReq::InitAsDefaultInstance() {
}

Charge_OpenTotalFetchReq::Charge_OpenTotalFetchReq(const Charge_OpenTotalFetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_OpenTotalFetchReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_OpenTotalFetchReq::~Charge_OpenTotalFetchReq() {
  SharedDtor();
}

void Charge_OpenTotalFetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_OpenTotalFetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_OpenTotalFetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_OpenTotalFetchReq_descriptor_;
}

const Charge_OpenTotalFetchReq& Charge_OpenTotalFetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_OpenTotalFetchReq* Charge_OpenTotalFetchReq::default_instance_ = NULL;

Charge_OpenTotalFetchReq* Charge_OpenTotalFetchReq::New() const {
  return new Charge_OpenTotalFetchReq;
}

void Charge_OpenTotalFetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_OpenTotalFetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_OpenTotalFetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_OpenTotalFetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_OpenTotalFetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_OpenTotalFetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_OpenTotalFetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_OpenTotalFetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_OpenTotalFetchReq::MergeFrom(const Charge_OpenTotalFetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_OpenTotalFetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_OpenTotalFetchReq::CopyFrom(const Charge_OpenTotalFetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_OpenTotalFetchReq::IsInitialized() const {

  return true;
}

void Charge_OpenTotalFetchReq::Swap(Charge_OpenTotalFetchReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_OpenTotalFetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_OpenTotalFetchReq_descriptor_;
  metadata.reflection = Charge_OpenTotalFetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_OpenTotalFetchRsp::kRetFieldNumber;
const int Charge_OpenTotalFetchRsp::kIdFieldNumber;
#endif  // !_MSC_VER

Charge_OpenTotalFetchRsp::Charge_OpenTotalFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_OpenTotalFetchRsp::InitAsDefaultInstance() {
}

Charge_OpenTotalFetchRsp::Charge_OpenTotalFetchRsp(const Charge_OpenTotalFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_OpenTotalFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_OpenTotalFetchRsp::~Charge_OpenTotalFetchRsp() {
  SharedDtor();
}

void Charge_OpenTotalFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_OpenTotalFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_OpenTotalFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_OpenTotalFetchRsp_descriptor_;
}

const Charge_OpenTotalFetchRsp& Charge_OpenTotalFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_OpenTotalFetchRsp* Charge_OpenTotalFetchRsp::default_instance_ = NULL;

Charge_OpenTotalFetchRsp* Charge_OpenTotalFetchRsp::New() const {
  return new Charge_OpenTotalFetchRsp;
}

void Charge_OpenTotalFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_OpenTotalFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_OpenTotalFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_OpenTotalFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_OpenTotalFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_OpenTotalFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_OpenTotalFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_OpenTotalFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_OpenTotalFetchRsp::MergeFrom(const Charge_OpenTotalFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_OpenTotalFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_OpenTotalFetchRsp::CopyFrom(const Charge_OpenTotalFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_OpenTotalFetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Charge_OpenTotalFetchRsp::Swap(Charge_OpenTotalFetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_OpenTotalFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_OpenTotalFetchRsp_descriptor_;
  metadata.reflection = Charge_OpenTotalFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Charge_UpdateOpenTotalRsp::kTotalFieldNumber;
#endif  // !_MSC_VER

Charge_UpdateOpenTotalRsp::Charge_UpdateOpenTotalRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Charge_UpdateOpenTotalRsp::InitAsDefaultInstance() {
}

Charge_UpdateOpenTotalRsp::Charge_UpdateOpenTotalRsp(const Charge_UpdateOpenTotalRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Charge_UpdateOpenTotalRsp::SharedCtor() {
  _cached_size_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Charge_UpdateOpenTotalRsp::~Charge_UpdateOpenTotalRsp() {
  SharedDtor();
}

void Charge_UpdateOpenTotalRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Charge_UpdateOpenTotalRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Charge_UpdateOpenTotalRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Charge_UpdateOpenTotalRsp_descriptor_;
}

const Charge_UpdateOpenTotalRsp& Charge_UpdateOpenTotalRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Charge_2eproto();
  return *default_instance_;
}

Charge_UpdateOpenTotalRsp* Charge_UpdateOpenTotalRsp::default_instance_ = NULL;

Charge_UpdateOpenTotalRsp* Charge_UpdateOpenTotalRsp::New() const {
  return new Charge_UpdateOpenTotalRsp;
}

void Charge_UpdateOpenTotalRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Charge_UpdateOpenTotalRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 total = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Charge_UpdateOpenTotalRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 total = 1;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Charge_UpdateOpenTotalRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 total = 1;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Charge_UpdateOpenTotalRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 total = 1;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Charge_UpdateOpenTotalRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Charge_UpdateOpenTotalRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Charge_UpdateOpenTotalRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Charge_UpdateOpenTotalRsp::MergeFrom(const Charge_UpdateOpenTotalRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Charge_UpdateOpenTotalRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Charge_UpdateOpenTotalRsp::CopyFrom(const Charge_UpdateOpenTotalRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Charge_UpdateOpenTotalRsp::IsInitialized() const {

  return true;
}

void Charge_UpdateOpenTotalRsp::Swap(Charge_UpdateOpenTotalRsp* other) {
  if (other != this) {
    std::swap(total_, other->total_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Charge_UpdateOpenTotalRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Charge_UpdateOpenTotalRsp_descriptor_;
  metadata.reflection = Charge_UpdateOpenTotalRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
