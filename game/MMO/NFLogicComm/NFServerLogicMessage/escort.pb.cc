// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: escort.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "escort.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* escortescortshuangDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortescortshuangDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* escortescort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortescort_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_escortescort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_escortescort_reflection_ = NULL;
const ::google::protobuf::Descriptor* escortchanceescortDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortchanceescortDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* escortchance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortchance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_escortchance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_escortchance_reflection_ = NULL;
const ::google::protobuf::Descriptor* escortrewardExprewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortrewardExprewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* escortrewardExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  escortrewardExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_escortrewardExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_escortrewardExp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_escort_2eproto() {
  protobuf_AddDesc_escort_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "escort.proto");
  GOOGLE_CHECK(file != NULL);
  escortescortshuangDesc_descriptor_ = file->message_type(0);
  static const int escortescortshuangDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescortshuangDesc, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescortshuangDesc, time_),
  };
  escortescortshuangDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortescortshuangDesc_descriptor_,
      escortescortshuangDesc::default_instance_,
      escortescortshuangDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescortshuangDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescortshuangDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortescortshuangDesc));
  escortescort_descriptor_ = file->message_type(1);
  static const int escortescort_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, convoyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, convoyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, convoylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, tokenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, tokennumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, daytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, startarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, endarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, startarealink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, endarealink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, distancea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, distanceb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, distancec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, rewardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, shuang_),
  };
  escortescort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortescort_descriptor_,
      escortescort::default_instance_,
      escortescort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortescort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortescort));
  Sheet_escortescort_descriptor_ = file->message_type(2);
  static const int Sheet_escortescort_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortescort, escortescort_list_),
  };
  Sheet_escortescort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_escortescort_descriptor_,
      Sheet_escortescort::default_instance_,
      Sheet_escortescort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortescort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortescort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_escortescort));
  escortchanceescortDesc_descriptor_ = file->message_type(3);
  static const int escortchanceescortDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchanceescortDesc, chance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchanceescortDesc, id_),
  };
  escortchanceescortDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortchanceescortDesc_descriptor_,
      escortchanceescortDesc::default_instance_,
      escortchanceescortDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchanceescortDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchanceescortDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortchanceescortDesc));
  escortchance_descriptor_ = file->message_type(4);
  static const int escortchance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchance, convoyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchance, escort_),
  };
  escortchance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortchance_descriptor_,
      escortchance::default_instance_,
      escortchance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortchance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortchance));
  Sheet_escortchance_descriptor_ = file->message_type(5);
  static const int Sheet_escortchance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortchance, escortchance_list_),
  };
  Sheet_escortchance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_escortchance_descriptor_,
      Sheet_escortchance::default_instance_,
      Sheet_escortchance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortchance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortchance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_escortchance));
  escortrewardExprewardDesc_descriptor_ = file->message_type(6);
  static const int escortrewardExprewardDesc_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExprewardDesc, exp_),
  };
  escortrewardExprewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortrewardExprewardDesc_descriptor_,
      escortrewardExprewardDesc::default_instance_,
      escortrewardExprewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExprewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExprewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortrewardExprewardDesc));
  escortrewardExp_descriptor_ = file->message_type(7);
  static const int escortrewardExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExp, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExp, reward_),
  };
  escortrewardExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      escortrewardExp_descriptor_,
      escortrewardExp::default_instance_,
      escortrewardExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(escortrewardExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(escortrewardExp));
  Sheet_escortrewardExp_descriptor_ = file->message_type(8);
  static const int Sheet_escortrewardExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortrewardExp, escortrewardexp_list_),
  };
  Sheet_escortrewardExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_escortrewardExp_descriptor_,
      Sheet_escortrewardExp::default_instance_,
      Sheet_escortrewardExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortrewardExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_escortrewardExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_escortrewardExp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_escort_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortescortshuangDesc_descriptor_, &escortescortshuangDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortescort_descriptor_, &escortescort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_escortescort_descriptor_, &Sheet_escortescort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortchanceescortDesc_descriptor_, &escortchanceescortDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortchance_descriptor_, &escortchance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_escortchance_descriptor_, &Sheet_escortchance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortrewardExprewardDesc_descriptor_, &escortrewardExprewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    escortrewardExp_descriptor_, &escortrewardExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_escortrewardExp_descriptor_, &Sheet_escortrewardExp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_escort_2eproto() {
  delete escortescortshuangDesc::default_instance_;
  delete escortescortshuangDesc_reflection_;
  delete escortescort::default_instance_;
  delete escortescort_reflection_;
  delete Sheet_escortescort::default_instance_;
  delete Sheet_escortescort_reflection_;
  delete escortchanceescortDesc::default_instance_;
  delete escortchanceescortDesc_reflection_;
  delete escortchance::default_instance_;
  delete escortchance_reflection_;
  delete Sheet_escortchance::default_instance_;
  delete Sheet_escortchance_reflection_;
  delete escortrewardExprewardDesc::default_instance_;
  delete escortrewardExprewardDesc_reflection_;
  delete escortrewardExp::default_instance_;
  delete escortrewardExp_reflection_;
  delete Sheet_escortrewardExp::default_instance_;
  delete Sheet_escortrewardExp_reflection_;
}

void protobuf_AddDesc_escort_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014escort.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"V\n\026escortescortshuangDesc\022\"\n\010dur"
    "ation\030\001 \001(\005B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\022\030\n\004Time\030\002 "
    "\001(\005B\n\302\377\024\006\346\227\266\351\227\264\"\201\006\n\014escortescort\022\036\n\010conv"
    "oyId\030\001 \001(\003B\014\302\377\024\010\351\225\226\350\275\246ID\022+\n\nconvoyName\030\002"
    " \001(\tB\027\302\377\024\017\347\211\251\350\265\204\350\275\246\345\220\215\347\247\260\220\301\024 \022\"\n\tMonster"
    "Id\030\003 \001(\003B\017\302\377\024\013\347\211\251\350\265\204\350\275\246ID\022%\n\013convoyLevel"
    "\030\004 \001(\005B\020\302\377\024\014\351\225\226\350\275\246\347\255\211\347\272\247\022&\n\006chance\030\005 \001(\005"
    "B\026\302\377\024\022\351\273\230\350\256\244\350\216\267\345\276\227\346\235\203\351\207\215\022#\n\007tokenId\030\006 \001("
    "\003B\022\302\377\024\016\347\211\251\350\265\204\345\215\267\350\275\264ID\022+\n\013tokenNumber\030\007 \001"
    "(\005B\026\302\377\024\022\347\211\251\350\265\204\345\215\267\350\275\264\346\225\260\351\207\217\022!\n\007dayTime\030\010 "
    "\001(\005B\020\302\377\024\014\346\257\217\346\227\245\346\254\241\346\225\260\022\033\n\005mapId\030\t \001(\003B\014\302\377"
    "\024\010\345\234\260\345\233\276ID\022#\n\tstartArea\030\n \001(\003B\020\302\377\024\014\345\210\235\345\247"
    "\213\345\214\272\345\237\237\022!\n\007endArea\030\013 \001(\003B\020\302\377\024\014\347\233\256\346\240\207\345\214\272\345"
    "\237\237\022\'\n\rstartAreaLink\030\014 \001(\003B\020\302\377\024\014\345\210\235\345\247\213\350\277\236"
    "\346\216\245\022%\n\013endAreaLink\030\r \001(\003B\020\302\377\024\014\347\233\256\346\240\207\350\277\236\346"
    "\216\245\022#\n\tDistanceA\030\016 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\350\267\235\347\246\273\022"
    "#\n\tDistanceB\030\017 \001(\005B\020\302\377\024\014\350\267\237\350\277\233\350\267\235\347\246\273\022#\n\t"
    "DistanceC\030\020 \001(\005B\020\302\377\024\014\346\234\200\350\277\221\350\267\235\347\246\273\022+\n\013rew"
    "ardMoney\030\021 \001(\005B\026\302\377\024\022\347\216\251\345\256\266\345\245\226\345\212\261\351\207\221\345\270\201\022)"
    "\n\ttimeLimit\030\022 \001(\005B\026\302\377\024\022\344\273\273\345\212\241\346\227\266\351\227\264\351\231\220\345\210"
    "\266\022@\n\006shuang\030\023 \003(\0132 .proto_ff.escortescor"
    "tshuangDescB\016\302\377\024\006\345\217\214\345\200\215\210\301\024\002\"M\n\022Sheet_esc"
    "ortescort\0227\n\021escortescort_List\030\001 \003(\0132\026.p"
    "roto_ff.escortescortB\004\210\301\024l\"H\n\026escortchan"
    "ceescortDesc\022\032\n\006chance\030\001 \001(\005B\n\302\377\024\006\346\235\203\351\207\215"
    "\022\022\n\002ID\030\002 \001(\003B\006\302\377\024\002ID\"p\n\014escortchance\022\036\n\010"
    "convoyId\030\001 \001(\003B\014\302\377\024\010\351\225\226\350\275\246ID\022@\n\006escort\030\002"
    " \003(\0132 .proto_ff.escortchanceescortDescB\016"
    "\302\377\024\006\351\225\226\350\275\246\210\301\024\004\"M\n\022Sheet_escortchance\0227\n\021"
    "escortchance_List\030\001 \003(\0132\026.proto_ff.escor"
    "tchanceB\004\210\301\024k\":\n\031escortrewardExprewardDe"
    "sc\022\035\n\003Exp\030\001 \001(\003B\020\302\377\024\014\345\245\226\345\212\261\347\273\217\351\252\214\"w\n\017esc"
    "ortrewardExp\022\034\n\002lv\030\001 \001(\005B\020\302\377\024\014\350\247\222\350\211\262\347\255\211\347"
    "\272\247\022F\n\006reward\030\002 \003(\0132#.proto_ff.escortrewa"
    "rdExprewardDescB\021\302\377\024\t\347\211\251\350\265\204\350\275\246\210\301\024\004\"W\n\025Sh"
    "eet_escortrewardExp\022>\n\024escortrewardExp_L"
    "ist\030\001 \003(\0132\031.proto_ff.escortrewardExpB\005\210\301"
    "\024\304\014", 1523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "escort.proto", &protobuf_RegisterTypes);
  escortescortshuangDesc::default_instance_ = new escortescortshuangDesc();
  escortescort::default_instance_ = new escortescort();
  Sheet_escortescort::default_instance_ = new Sheet_escortescort();
  escortchanceescortDesc::default_instance_ = new escortchanceescortDesc();
  escortchance::default_instance_ = new escortchance();
  Sheet_escortchance::default_instance_ = new Sheet_escortchance();
  escortrewardExprewardDesc::default_instance_ = new escortrewardExprewardDesc();
  escortrewardExp::default_instance_ = new escortrewardExp();
  Sheet_escortrewardExp::default_instance_ = new Sheet_escortrewardExp();
  escortescortshuangDesc::default_instance_->InitAsDefaultInstance();
  escortescort::default_instance_->InitAsDefaultInstance();
  Sheet_escortescort::default_instance_->InitAsDefaultInstance();
  escortchanceescortDesc::default_instance_->InitAsDefaultInstance();
  escortchance::default_instance_->InitAsDefaultInstance();
  Sheet_escortchance::default_instance_->InitAsDefaultInstance();
  escortrewardExprewardDesc::default_instance_->InitAsDefaultInstance();
  escortrewardExp::default_instance_->InitAsDefaultInstance();
  Sheet_escortrewardExp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_escort_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_escort_2eproto {
  StaticDescriptorInitializer_escort_2eproto() {
    protobuf_AddDesc_escort_2eproto();
  }
} static_descriptor_initializer_escort_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int escortescortshuangDesc::kDurationFieldNumber;
const int escortescortshuangDesc::kTimeFieldNumber;
#endif  // !_MSC_VER

escortescortshuangDesc::escortescortshuangDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortescortshuangDesc::InitAsDefaultInstance() {
}

escortescortshuangDesc::escortescortshuangDesc(const escortescortshuangDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortescortshuangDesc::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortescortshuangDesc::~escortescortshuangDesc() {
  SharedDtor();
}

void escortescortshuangDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void escortescortshuangDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortescortshuangDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortescortshuangDesc_descriptor_;
}

const escortescortshuangDesc& escortescortshuangDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortescortshuangDesc* escortescortshuangDesc::default_instance_ = NULL;

escortescortshuangDesc* escortescortshuangDesc::New() const {
  return new escortescortshuangDesc;
}

void escortescortshuangDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortescortshuangDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // optional int32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortescortshuangDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->duration(), output);
  }

  // optional int32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortescortshuangDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->duration(), target);
  }

  // optional int32 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortescortshuangDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional int32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortescortshuangDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortescortshuangDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortescortshuangDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortescortshuangDesc::MergeFrom(const escortescortshuangDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortescortshuangDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortescortshuangDesc::CopyFrom(const escortescortshuangDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortescortshuangDesc::IsInitialized() const {

  return true;
}

void escortescortshuangDesc::Swap(escortescortshuangDesc* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortescortshuangDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortescortshuangDesc_descriptor_;
  metadata.reflection = escortescortshuangDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int escortescort::kConvoyIdFieldNumber;
const int escortescort::kConvoyNameFieldNumber;
const int escortescort::kMonsterIdFieldNumber;
const int escortescort::kConvoyLevelFieldNumber;
const int escortescort::kChanceFieldNumber;
const int escortescort::kTokenIdFieldNumber;
const int escortescort::kTokenNumberFieldNumber;
const int escortescort::kDayTimeFieldNumber;
const int escortescort::kMapIdFieldNumber;
const int escortescort::kStartAreaFieldNumber;
const int escortescort::kEndAreaFieldNumber;
const int escortescort::kStartAreaLinkFieldNumber;
const int escortescort::kEndAreaLinkFieldNumber;
const int escortescort::kDistanceAFieldNumber;
const int escortescort::kDistanceBFieldNumber;
const int escortescort::kDistanceCFieldNumber;
const int escortescort::kRewardMoneyFieldNumber;
const int escortescort::kTimeLimitFieldNumber;
const int escortescort::kShuangFieldNumber;
#endif  // !_MSC_VER

escortescort::escortescort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortescort::InitAsDefaultInstance() {
}

escortescort::escortescort(const escortescort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortescort::SharedCtor() {
  _cached_size_ = 0;
  convoyid_ = GOOGLE_LONGLONG(0);
  convoyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monsterid_ = GOOGLE_LONGLONG(0);
  convoylevel_ = 0;
  chance_ = 0;
  tokenid_ = GOOGLE_LONGLONG(0);
  tokennumber_ = 0;
  daytime_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  startarea_ = GOOGLE_LONGLONG(0);
  endarea_ = GOOGLE_LONGLONG(0);
  startarealink_ = GOOGLE_LONGLONG(0);
  endarealink_ = GOOGLE_LONGLONG(0);
  distancea_ = 0;
  distanceb_ = 0;
  distancec_ = 0;
  rewardmoney_ = 0;
  timelimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortescort::~escortescort() {
  SharedDtor();
}

void escortescort::SharedDtor() {
  if (convoyname_ != &::google::protobuf::internal::kEmptyString) {
    delete convoyname_;
  }
  if (this != default_instance_) {
  }
}

void escortescort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortescort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortescort_descriptor_;
}

const escortescort& escortescort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortescort* escortescort::default_instance_ = NULL;

escortescort* escortescort::New() const {
  return new escortescort;
}

void escortescort::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    convoyid_ = GOOGLE_LONGLONG(0);
    if (has_convoyname()) {
      if (convoyname_ != &::google::protobuf::internal::kEmptyString) {
        convoyname_->clear();
      }
    }
    monsterid_ = GOOGLE_LONGLONG(0);
    convoylevel_ = 0;
    chance_ = 0;
    tokenid_ = GOOGLE_LONGLONG(0);
    tokennumber_ = 0;
    daytime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    startarea_ = GOOGLE_LONGLONG(0);
    endarea_ = GOOGLE_LONGLONG(0);
    startarealink_ = GOOGLE_LONGLONG(0);
    endarealink_ = GOOGLE_LONGLONG(0);
    distancea_ = 0;
    distanceb_ = 0;
    distancec_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    rewardmoney_ = 0;
    timelimit_ = 0;
  }
  shuang_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortescort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 convoyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &convoyid_)));
          set_has_convoyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_convoyName;
        break;
      }

      // optional string convoyName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convoyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_convoyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->convoyname().data(), this->convoyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MonsterId;
        break;
      }

      // optional int64 MonsterId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_convoyLevel;
        break;
      }

      // optional int32 convoyLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_convoyLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &convoylevel_)));
          set_has_convoylevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chance;
        break;
      }

      // optional int32 chance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tokenId;
        break;
      }

      // optional int64 tokenId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokenId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tokenid_)));
          set_has_tokenid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tokenNumber;
        break;
      }

      // optional int32 tokenNumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tokenNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tokennumber_)));
          set_has_tokennumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dayTime;
        break;
      }

      // optional int32 dayTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daytime_)));
          set_has_daytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mapId;
        break;
      }

      // optional int64 mapId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_startArea;
        break;
      }

      // optional int64 startArea = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startarea_)));
          set_has_startarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_endArea;
        break;
      }

      // optional int64 endArea = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endarea_)));
          set_has_endarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_startAreaLink;
        break;
      }

      // optional int64 startAreaLink = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startAreaLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startarealink_)));
          set_has_startarealink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_endAreaLink;
        break;
      }

      // optional int64 endAreaLink = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endAreaLink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endarealink_)));
          set_has_endarealink();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_DistanceA;
        break;
      }

      // optional int32 DistanceA = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DistanceA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distancea_)));
          set_has_distancea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_DistanceB;
        break;
      }

      // optional int32 DistanceB = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DistanceB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distanceb_)));
          set_has_distanceb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_DistanceC;
        break;
      }

      // optional int32 DistanceC = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DistanceC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distancec_)));
          set_has_distancec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rewardMoney;
        break;
      }

      // optional int32 rewardMoney = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardmoney_)));
          set_has_rewardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_timeLimit;
        break;
      }

      // optional int32 timeLimit = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimit_)));
          set_has_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_shuang;
        break;
      }

      // repeated .proto_ff.escortescortshuangDesc shuang = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shuang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shuang()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_shuang;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortescort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 convoyId = 1;
  if (has_convoyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->convoyid(), output);
  }

  // optional string convoyName = 2;
  if (has_convoyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->convoyname().data(), this->convoyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->convoyname(), output);
  }

  // optional int64 MonsterId = 3;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->monsterid(), output);
  }

  // optional int32 convoyLevel = 4;
  if (has_convoylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->convoylevel(), output);
  }

  // optional int32 chance = 5;
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->chance(), output);
  }

  // optional int64 tokenId = 6;
  if (has_tokenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tokenid(), output);
  }

  // optional int32 tokenNumber = 7;
  if (has_tokennumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tokennumber(), output);
  }

  // optional int32 dayTime = 8;
  if (has_daytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->daytime(), output);
  }

  // optional int64 mapId = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mapid(), output);
  }

  // optional int64 startArea = 10;
  if (has_startarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->startarea(), output);
  }

  // optional int64 endArea = 11;
  if (has_endarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->endarea(), output);
  }

  // optional int64 startAreaLink = 12;
  if (has_startarealink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->startarealink(), output);
  }

  // optional int64 endAreaLink = 13;
  if (has_endarealink()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->endarealink(), output);
  }

  // optional int32 DistanceA = 14;
  if (has_distancea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->distancea(), output);
  }

  // optional int32 DistanceB = 15;
  if (has_distanceb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->distanceb(), output);
  }

  // optional int32 DistanceC = 16;
  if (has_distancec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->distancec(), output);
  }

  // optional int32 rewardMoney = 17;
  if (has_rewardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->rewardmoney(), output);
  }

  // optional int32 timeLimit = 18;
  if (has_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->timelimit(), output);
  }

  // repeated .proto_ff.escortescortshuangDesc shuang = 19;
  for (int i = 0; i < this->shuang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->shuang(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortescort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 convoyId = 1;
  if (has_convoyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->convoyid(), target);
  }

  // optional string convoyName = 2;
  if (has_convoyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->convoyname().data(), this->convoyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->convoyname(), target);
  }

  // optional int64 MonsterId = 3;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->monsterid(), target);
  }

  // optional int32 convoyLevel = 4;
  if (has_convoylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->convoylevel(), target);
  }

  // optional int32 chance = 5;
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->chance(), target);
  }

  // optional int64 tokenId = 6;
  if (has_tokenid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tokenid(), target);
  }

  // optional int32 tokenNumber = 7;
  if (has_tokennumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tokennumber(), target);
  }

  // optional int32 dayTime = 8;
  if (has_daytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->daytime(), target);
  }

  // optional int64 mapId = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mapid(), target);
  }

  // optional int64 startArea = 10;
  if (has_startarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->startarea(), target);
  }

  // optional int64 endArea = 11;
  if (has_endarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->endarea(), target);
  }

  // optional int64 startAreaLink = 12;
  if (has_startarealink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->startarealink(), target);
  }

  // optional int64 endAreaLink = 13;
  if (has_endarealink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->endarealink(), target);
  }

  // optional int32 DistanceA = 14;
  if (has_distancea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->distancea(), target);
  }

  // optional int32 DistanceB = 15;
  if (has_distanceb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->distanceb(), target);
  }

  // optional int32 DistanceC = 16;
  if (has_distancec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->distancec(), target);
  }

  // optional int32 rewardMoney = 17;
  if (has_rewardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->rewardmoney(), target);
  }

  // optional int32 timeLimit = 18;
  if (has_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->timelimit(), target);
  }

  // repeated .proto_ff.escortescortshuangDesc shuang = 19;
  for (int i = 0; i < this->shuang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->shuang(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortescort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 convoyId = 1;
    if (has_convoyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->convoyid());
    }

    // optional string convoyName = 2;
    if (has_convoyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->convoyname());
    }

    // optional int64 MonsterId = 3;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional int32 convoyLevel = 4;
    if (has_convoylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->convoylevel());
    }

    // optional int32 chance = 5;
    if (has_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance());
    }

    // optional int64 tokenId = 6;
    if (has_tokenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tokenid());
    }

    // optional int32 tokenNumber = 7;
    if (has_tokennumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tokennumber());
    }

    // optional int32 dayTime = 8;
    if (has_daytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daytime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 mapId = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 startArea = 10;
    if (has_startarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startarea());
    }

    // optional int64 endArea = 11;
    if (has_endarea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endarea());
    }

    // optional int64 startAreaLink = 12;
    if (has_startarealink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startarealink());
    }

    // optional int64 endAreaLink = 13;
    if (has_endarealink()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endarealink());
    }

    // optional int32 DistanceA = 14;
    if (has_distancea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distancea());
    }

    // optional int32 DistanceB = 15;
    if (has_distanceb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distanceb());
    }

    // optional int32 DistanceC = 16;
    if (has_distancec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distancec());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 rewardMoney = 17;
    if (has_rewardmoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardmoney());
    }

    // optional int32 timeLimit = 18;
    if (has_timelimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelimit());
    }

  }
  // repeated .proto_ff.escortescortshuangDesc shuang = 19;
  total_size += 2 * this->shuang_size();
  for (int i = 0; i < this->shuang_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shuang(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortescort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortescort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortescort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortescort::MergeFrom(const escortescort& from) {
  GOOGLE_CHECK_NE(&from, this);
  shuang_.MergeFrom(from.shuang_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_convoyid()) {
      set_convoyid(from.convoyid());
    }
    if (from.has_convoyname()) {
      set_convoyname(from.convoyname());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_convoylevel()) {
      set_convoylevel(from.convoylevel());
    }
    if (from.has_chance()) {
      set_chance(from.chance());
    }
    if (from.has_tokenid()) {
      set_tokenid(from.tokenid());
    }
    if (from.has_tokennumber()) {
      set_tokennumber(from.tokennumber());
    }
    if (from.has_daytime()) {
      set_daytime(from.daytime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_startarea()) {
      set_startarea(from.startarea());
    }
    if (from.has_endarea()) {
      set_endarea(from.endarea());
    }
    if (from.has_startarealink()) {
      set_startarealink(from.startarealink());
    }
    if (from.has_endarealink()) {
      set_endarealink(from.endarealink());
    }
    if (from.has_distancea()) {
      set_distancea(from.distancea());
    }
    if (from.has_distanceb()) {
      set_distanceb(from.distanceb());
    }
    if (from.has_distancec()) {
      set_distancec(from.distancec());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_rewardmoney()) {
      set_rewardmoney(from.rewardmoney());
    }
    if (from.has_timelimit()) {
      set_timelimit(from.timelimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortescort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortescort::CopyFrom(const escortescort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortescort::IsInitialized() const {

  return true;
}

void escortescort::Swap(escortescort* other) {
  if (other != this) {
    std::swap(convoyid_, other->convoyid_);
    std::swap(convoyname_, other->convoyname_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(convoylevel_, other->convoylevel_);
    std::swap(chance_, other->chance_);
    std::swap(tokenid_, other->tokenid_);
    std::swap(tokennumber_, other->tokennumber_);
    std::swap(daytime_, other->daytime_);
    std::swap(mapid_, other->mapid_);
    std::swap(startarea_, other->startarea_);
    std::swap(endarea_, other->endarea_);
    std::swap(startarealink_, other->startarealink_);
    std::swap(endarealink_, other->endarealink_);
    std::swap(distancea_, other->distancea_);
    std::swap(distanceb_, other->distanceb_);
    std::swap(distancec_, other->distancec_);
    std::swap(rewardmoney_, other->rewardmoney_);
    std::swap(timelimit_, other->timelimit_);
    shuang_.Swap(&other->shuang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortescort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortescort_descriptor_;
  metadata.reflection = escortescort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_escortescort::kEscortescortListFieldNumber;
#endif  // !_MSC_VER

Sheet_escortescort::Sheet_escortescort()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_escortescort::InitAsDefaultInstance() {
}

Sheet_escortescort::Sheet_escortescort(const Sheet_escortescort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_escortescort::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_escortescort::~Sheet_escortescort() {
  SharedDtor();
}

void Sheet_escortescort::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_escortescort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_escortescort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_escortescort_descriptor_;
}

const Sheet_escortescort& Sheet_escortescort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

Sheet_escortescort* Sheet_escortescort::default_instance_ = NULL;

Sheet_escortescort* Sheet_escortescort::New() const {
  return new Sheet_escortescort;
}

void Sheet_escortescort::Clear() {
  escortescort_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_escortescort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.escortescort escortescort_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escortescort_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escortescort_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_escortescort_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_escortescort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.escortescort escortescort_List = 1;
  for (int i = 0; i < this->escortescort_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->escortescort_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_escortescort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.escortescort escortescort_List = 1;
  for (int i = 0; i < this->escortescort_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->escortescort_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_escortescort::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.escortescort escortescort_List = 1;
  total_size += 1 * this->escortescort_list_size();
  for (int i = 0; i < this->escortescort_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escortescort_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_escortescort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_escortescort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_escortescort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_escortescort::MergeFrom(const Sheet_escortescort& from) {
  GOOGLE_CHECK_NE(&from, this);
  escortescort_list_.MergeFrom(from.escortescort_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_escortescort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_escortescort::CopyFrom(const Sheet_escortescort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_escortescort::IsInitialized() const {

  return true;
}

void Sheet_escortescort::Swap(Sheet_escortescort* other) {
  if (other != this) {
    escortescort_list_.Swap(&other->escortescort_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_escortescort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_escortescort_descriptor_;
  metadata.reflection = Sheet_escortescort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int escortchanceescortDesc::kChanceFieldNumber;
const int escortchanceescortDesc::kIDFieldNumber;
#endif  // !_MSC_VER

escortchanceescortDesc::escortchanceescortDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortchanceescortDesc::InitAsDefaultInstance() {
}

escortchanceescortDesc::escortchanceescortDesc(const escortchanceescortDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortchanceescortDesc::SharedCtor() {
  _cached_size_ = 0;
  chance_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortchanceescortDesc::~escortchanceescortDesc() {
  SharedDtor();
}

void escortchanceescortDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void escortchanceescortDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortchanceescortDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortchanceescortDesc_descriptor_;
}

const escortchanceescortDesc& escortchanceescortDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortchanceescortDesc* escortchanceescortDesc::default_instance_ = NULL;

escortchanceescortDesc* escortchanceescortDesc::New() const {
  return new escortchanceescortDesc;
}

void escortchanceescortDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chance_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortchanceescortDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 chance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chance_)));
          set_has_chance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // optional int64 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortchanceescortDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 chance = 1;
  if (has_chance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chance(), output);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortchanceescortDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 chance = 1;
  if (has_chance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chance(), target);
  }

  // optional int64 ID = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortchanceescortDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 chance = 1;
    if (has_chance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chance());
    }

    // optional int64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortchanceescortDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortchanceescortDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortchanceescortDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortchanceescortDesc::MergeFrom(const escortchanceescortDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chance()) {
      set_chance(from.chance());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortchanceescortDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortchanceescortDesc::CopyFrom(const escortchanceescortDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortchanceescortDesc::IsInitialized() const {

  return true;
}

void escortchanceescortDesc::Swap(escortchanceescortDesc* other) {
  if (other != this) {
    std::swap(chance_, other->chance_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortchanceescortDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortchanceescortDesc_descriptor_;
  metadata.reflection = escortchanceescortDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int escortchance::kConvoyIdFieldNumber;
const int escortchance::kEscortFieldNumber;
#endif  // !_MSC_VER

escortchance::escortchance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortchance::InitAsDefaultInstance() {
}

escortchance::escortchance(const escortchance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortchance::SharedCtor() {
  _cached_size_ = 0;
  convoyid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortchance::~escortchance() {
  SharedDtor();
}

void escortchance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void escortchance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortchance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortchance_descriptor_;
}

const escortchance& escortchance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortchance* escortchance::default_instance_ = NULL;

escortchance* escortchance::New() const {
  return new escortchance;
}

void escortchance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    convoyid_ = GOOGLE_LONGLONG(0);
  }
  escort_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortchance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 convoyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &convoyid_)));
          set_has_convoyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_escort;
        break;
      }

      // repeated .proto_ff.escortchanceescortDesc escort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_escort;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortchance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 convoyId = 1;
  if (has_convoyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->convoyid(), output);
  }

  // repeated .proto_ff.escortchanceescortDesc escort = 2;
  for (int i = 0; i < this->escort_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->escort(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortchance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 convoyId = 1;
  if (has_convoyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->convoyid(), target);
  }

  // repeated .proto_ff.escortchanceescortDesc escort = 2;
  for (int i = 0; i < this->escort_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->escort(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortchance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 convoyId = 1;
    if (has_convoyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->convoyid());
    }

  }
  // repeated .proto_ff.escortchanceescortDesc escort = 2;
  total_size += 1 * this->escort_size();
  for (int i = 0; i < this->escort_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escort(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortchance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortchance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortchance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortchance::MergeFrom(const escortchance& from) {
  GOOGLE_CHECK_NE(&from, this);
  escort_.MergeFrom(from.escort_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_convoyid()) {
      set_convoyid(from.convoyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortchance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortchance::CopyFrom(const escortchance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortchance::IsInitialized() const {

  return true;
}

void escortchance::Swap(escortchance* other) {
  if (other != this) {
    std::swap(convoyid_, other->convoyid_);
    escort_.Swap(&other->escort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortchance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortchance_descriptor_;
  metadata.reflection = escortchance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_escortchance::kEscortchanceListFieldNumber;
#endif  // !_MSC_VER

Sheet_escortchance::Sheet_escortchance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_escortchance::InitAsDefaultInstance() {
}

Sheet_escortchance::Sheet_escortchance(const Sheet_escortchance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_escortchance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_escortchance::~Sheet_escortchance() {
  SharedDtor();
}

void Sheet_escortchance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_escortchance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_escortchance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_escortchance_descriptor_;
}

const Sheet_escortchance& Sheet_escortchance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

Sheet_escortchance* Sheet_escortchance::default_instance_ = NULL;

Sheet_escortchance* Sheet_escortchance::New() const {
  return new Sheet_escortchance;
}

void Sheet_escortchance::Clear() {
  escortchance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_escortchance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.escortchance escortchance_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escortchance_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escortchance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_escortchance_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_escortchance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.escortchance escortchance_List = 1;
  for (int i = 0; i < this->escortchance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->escortchance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_escortchance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.escortchance escortchance_List = 1;
  for (int i = 0; i < this->escortchance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->escortchance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_escortchance::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.escortchance escortchance_List = 1;
  total_size += 1 * this->escortchance_list_size();
  for (int i = 0; i < this->escortchance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escortchance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_escortchance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_escortchance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_escortchance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_escortchance::MergeFrom(const Sheet_escortchance& from) {
  GOOGLE_CHECK_NE(&from, this);
  escortchance_list_.MergeFrom(from.escortchance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_escortchance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_escortchance::CopyFrom(const Sheet_escortchance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_escortchance::IsInitialized() const {

  return true;
}

void Sheet_escortchance::Swap(Sheet_escortchance* other) {
  if (other != this) {
    escortchance_list_.Swap(&other->escortchance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_escortchance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_escortchance_descriptor_;
  metadata.reflection = Sheet_escortchance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int escortrewardExprewardDesc::kExpFieldNumber;
#endif  // !_MSC_VER

escortrewardExprewardDesc::escortrewardExprewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortrewardExprewardDesc::InitAsDefaultInstance() {
}

escortrewardExprewardDesc::escortrewardExprewardDesc(const escortrewardExprewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortrewardExprewardDesc::SharedCtor() {
  _cached_size_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortrewardExprewardDesc::~escortrewardExprewardDesc() {
  SharedDtor();
}

void escortrewardExprewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void escortrewardExprewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortrewardExprewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortrewardExprewardDesc_descriptor_;
}

const escortrewardExprewardDesc& escortrewardExprewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortrewardExprewardDesc* escortrewardExprewardDesc::default_instance_ = NULL;

escortrewardExprewardDesc* escortrewardExprewardDesc::New() const {
  return new escortrewardExprewardDesc;
}

void escortrewardExprewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortrewardExprewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortrewardExprewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortrewardExprewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortrewardExprewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortrewardExprewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortrewardExprewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortrewardExprewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortrewardExprewardDesc::MergeFrom(const escortrewardExprewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortrewardExprewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortrewardExprewardDesc::CopyFrom(const escortrewardExprewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortrewardExprewardDesc::IsInitialized() const {

  return true;
}

void escortrewardExprewardDesc::Swap(escortrewardExprewardDesc* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortrewardExprewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortrewardExprewardDesc_descriptor_;
  metadata.reflection = escortrewardExprewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int escortrewardExp::kLvFieldNumber;
const int escortrewardExp::kRewardFieldNumber;
#endif  // !_MSC_VER

escortrewardExp::escortrewardExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void escortrewardExp::InitAsDefaultInstance() {
}

escortrewardExp::escortrewardExp(const escortrewardExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void escortrewardExp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

escortrewardExp::~escortrewardExp() {
  SharedDtor();
}

void escortrewardExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void escortrewardExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* escortrewardExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return escortrewardExp_descriptor_;
}

const escortrewardExp& escortrewardExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

escortrewardExp* escortrewardExp::default_instance_ = NULL;

escortrewardExp* escortrewardExp::New() const {
  return new escortrewardExp;
}

void escortrewardExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool escortrewardExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .proto_ff.escortrewardExprewardDesc reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void escortrewardExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lv(), output);
  }

  // repeated .proto_ff.escortrewardExprewardDesc reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* escortrewardExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lv(), target);
  }

  // repeated .proto_ff.escortrewardExprewardDesc reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int escortrewardExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  // repeated .proto_ff.escortrewardExprewardDesc reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void escortrewardExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const escortrewardExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const escortrewardExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void escortrewardExp::MergeFrom(const escortrewardExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void escortrewardExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void escortrewardExp::CopyFrom(const escortrewardExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool escortrewardExp::IsInitialized() const {

  return true;
}

void escortrewardExp::Swap(escortrewardExp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata escortrewardExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = escortrewardExp_descriptor_;
  metadata.reflection = escortrewardExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_escortrewardExp::kEscortrewardExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_escortrewardExp::Sheet_escortrewardExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_escortrewardExp::InitAsDefaultInstance() {
}

Sheet_escortrewardExp::Sheet_escortrewardExp(const Sheet_escortrewardExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_escortrewardExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_escortrewardExp::~Sheet_escortrewardExp() {
  SharedDtor();
}

void Sheet_escortrewardExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_escortrewardExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_escortrewardExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_escortrewardExp_descriptor_;
}

const Sheet_escortrewardExp& Sheet_escortrewardExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_escort_2eproto();
  return *default_instance_;
}

Sheet_escortrewardExp* Sheet_escortrewardExp::default_instance_ = NULL;

Sheet_escortrewardExp* Sheet_escortrewardExp::New() const {
  return new Sheet_escortrewardExp;
}

void Sheet_escortrewardExp::Clear() {
  escortrewardexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_escortrewardExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.escortrewardExp escortrewardExp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escortrewardExp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_escortrewardexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_escortrewardExp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_escortrewardExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.escortrewardExp escortrewardExp_List = 1;
  for (int i = 0; i < this->escortrewardexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->escortrewardexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_escortrewardExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.escortrewardExp escortrewardExp_List = 1;
  for (int i = 0; i < this->escortrewardexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->escortrewardexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_escortrewardExp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.escortrewardExp escortrewardExp_List = 1;
  total_size += 1 * this->escortrewardexp_list_size();
  for (int i = 0; i < this->escortrewardexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->escortrewardexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_escortrewardExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_escortrewardExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_escortrewardExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_escortrewardExp::MergeFrom(const Sheet_escortrewardExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  escortrewardexp_list_.MergeFrom(from.escortrewardexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_escortrewardExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_escortrewardExp::CopyFrom(const Sheet_escortrewardExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_escortrewardExp::IsInitialized() const {

  return true;
}

void Sheet_escortrewardExp::Swap(Sheet_escortrewardExp* other) {
  if (other != this) {
    escortrewardexp_list_.Swap(&other->escortrewardexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_escortrewardExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_escortrewardExp_descriptor_;
  metadata.reflection = Sheet_escortrewardExp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
