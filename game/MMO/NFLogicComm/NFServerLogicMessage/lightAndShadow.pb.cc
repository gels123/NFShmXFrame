// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lightAndShadow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lightAndShadow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* lightAndShadowcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lightAndShadowcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_lightAndShadowcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_lightAndShadowcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* lightAndShadowreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  lightAndShadowreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_lightAndShadowreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_lightAndShadowreward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lightAndShadow_2eproto() {
  protobuf_AddDesc_lightAndShadow_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lightAndShadow.proto");
  GOOGLE_CHECK(file != NULL);
  lightAndShadowcons_descriptor_ = file->message_type(0);
  static const int lightAndShadowcons_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowcons, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowcons, valuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowcons, stringdata_),
  };
  lightAndShadowcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lightAndShadowcons_descriptor_,
      lightAndShadowcons::default_instance_,
      lightAndShadowcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lightAndShadowcons));
  Sheet_lightAndShadowcons_descriptor_ = file->message_type(1);
  static const int Sheet_lightAndShadowcons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowcons, lightandshadowcons_list_),
  };
  Sheet_lightAndShadowcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_lightAndShadowcons_descriptor_,
      Sheet_lightAndShadowcons::default_instance_,
      Sheet_lightAndShadowcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_lightAndShadowcons));
  lightAndShadowreward_descriptor_ = file->message_type(2);
  static const int lightAndShadowreward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, goldmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, goldmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, winreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, winrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, losereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, loserewardnum_),
  };
  lightAndShadowreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      lightAndShadowreward_descriptor_,
      lightAndShadowreward::default_instance_,
      lightAndShadowreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(lightAndShadowreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(lightAndShadowreward));
  Sheet_lightAndShadowreward_descriptor_ = file->message_type(3);
  static const int Sheet_lightAndShadowreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowreward, lightandshadowreward_list_),
  };
  Sheet_lightAndShadowreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_lightAndShadowreward_descriptor_,
      Sheet_lightAndShadowreward::default_instance_,
      Sheet_lightAndShadowreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_lightAndShadowreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_lightAndShadowreward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lightAndShadow_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lightAndShadowcons_descriptor_, &lightAndShadowcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_lightAndShadowcons_descriptor_, &Sheet_lightAndShadowcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    lightAndShadowreward_descriptor_, &lightAndShadowreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_lightAndShadowreward_descriptor_, &Sheet_lightAndShadowreward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lightAndShadow_2eproto() {
  delete lightAndShadowcons::default_instance_;
  delete lightAndShadowcons_reflection_;
  delete Sheet_lightAndShadowcons::default_instance_;
  delete Sheet_lightAndShadowcons_reflection_;
  delete lightAndShadowreward::default_instance_;
  delete lightAndShadowreward_reflection_;
  delete Sheet_lightAndShadowreward::default_instance_;
  delete Sheet_lightAndShadowreward_reflection_;
}

void protobuf_AddDesc_lightAndShadow_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024lightAndShadow.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"{\n\022lightAndShadowcons\022\026\n"
    "\002ID\030\001 \001(\005B\n\302\377\024\006\347\274\226\345\217\267\022 \n\tvaluedata\030\002 \001(\003"
    "B\r\302\377\024\t\345\200\274\346\225\260\346\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377\024"
    "\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024/\"_\n\030Sheet_lightAndSh"
    "adowcons\022C\n\027lightAndShadowcons_List\030\001 \003("
    "\0132\034.proto_ff.lightAndShadowconsB\004\210\301\024y\"\267\002"
    "\n\024lightAndShadowreward\022\026\n\002ID\030\001 \001(\005B\n\302\377\024\006"
    "\347\274\226\345\217\267\0220\n\007goldMin\030\002 \001(\005B\037\302\377\024\033\346\234\200\344\275\216\347\247\257\345\210"
    "\206\357\274\210\344\270\215\345\214\205\345\220\253\357\274\211\022-\n\007goldMax\030\003 \001(\005B\034\302\377\024\030\346"
    "\234\200\351\253\230\347\247\257\345\210\206\357\274\210\345\214\205\345\220\253\357\274\211\022)\n\twinReward\030\004 \001"
    "(\003B\026\302\377\024\022\350\203\234\345\210\251\345\245\226\345\212\261\351\201\223\345\205\267\022&\n\014winRewardN"
    "um\030\005 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\022*\n\nloseReward"
    "\030\006 \001(\003B\026\302\377\024\022\345\244\261\350\264\245\345\245\226\345\212\261\351\201\223\345\205\267\022\'\n\rloseRe"
    "wardNum\030\007 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\"e\n\032Sheet"
    "_lightAndShadowreward\022G\n\031lightAndShadowr"
    "eward_List\030\001 \003(\0132\036.proto_ff.lightAndShad"
    "owrewardB\004\210\301\024n", 694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lightAndShadow.proto", &protobuf_RegisterTypes);
  lightAndShadowcons::default_instance_ = new lightAndShadowcons();
  Sheet_lightAndShadowcons::default_instance_ = new Sheet_lightAndShadowcons();
  lightAndShadowreward::default_instance_ = new lightAndShadowreward();
  Sheet_lightAndShadowreward::default_instance_ = new Sheet_lightAndShadowreward();
  lightAndShadowcons::default_instance_->InitAsDefaultInstance();
  Sheet_lightAndShadowcons::default_instance_->InitAsDefaultInstance();
  lightAndShadowreward::default_instance_->InitAsDefaultInstance();
  Sheet_lightAndShadowreward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lightAndShadow_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lightAndShadow_2eproto {
  StaticDescriptorInitializer_lightAndShadow_2eproto() {
    protobuf_AddDesc_lightAndShadow_2eproto();
  }
} static_descriptor_initializer_lightAndShadow_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int lightAndShadowcons::kIDFieldNumber;
const int lightAndShadowcons::kValuedataFieldNumber;
const int lightAndShadowcons::kStringdataFieldNumber;
#endif  // !_MSC_VER

lightAndShadowcons::lightAndShadowcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lightAndShadowcons::InitAsDefaultInstance() {
}

lightAndShadowcons::lightAndShadowcons(const lightAndShadowcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lightAndShadowcons::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  valuedata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lightAndShadowcons::~lightAndShadowcons() {
  SharedDtor();
}

void lightAndShadowcons::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void lightAndShadowcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lightAndShadowcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lightAndShadowcons_descriptor_;
}

const lightAndShadowcons& lightAndShadowcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lightAndShadow_2eproto();
  return *default_instance_;
}

lightAndShadowcons* lightAndShadowcons::default_instance_ = NULL;

lightAndShadowcons* lightAndShadowcons::New() const {
  return new lightAndShadowcons;
}

void lightAndShadowcons::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    valuedata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lightAndShadowcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valuedata;
        break;
      }

      // optional int64 valuedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valuedata_)));
          set_has_valuedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lightAndShadowcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->valuedata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lightAndShadowcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->valuedata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lightAndShadowcons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 valuedata = 2;
    if (has_valuedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valuedata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lightAndShadowcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lightAndShadowcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lightAndShadowcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lightAndShadowcons::MergeFrom(const lightAndShadowcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_valuedata()) {
      set_valuedata(from.valuedata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lightAndShadowcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lightAndShadowcons::CopyFrom(const lightAndShadowcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lightAndShadowcons::IsInitialized() const {

  return true;
}

void lightAndShadowcons::Swap(lightAndShadowcons* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(valuedata_, other->valuedata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lightAndShadowcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lightAndShadowcons_descriptor_;
  metadata.reflection = lightAndShadowcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_lightAndShadowcons::kLightAndShadowconsListFieldNumber;
#endif  // !_MSC_VER

Sheet_lightAndShadowcons::Sheet_lightAndShadowcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_lightAndShadowcons::InitAsDefaultInstance() {
}

Sheet_lightAndShadowcons::Sheet_lightAndShadowcons(const Sheet_lightAndShadowcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_lightAndShadowcons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_lightAndShadowcons::~Sheet_lightAndShadowcons() {
  SharedDtor();
}

void Sheet_lightAndShadowcons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_lightAndShadowcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_lightAndShadowcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_lightAndShadowcons_descriptor_;
}

const Sheet_lightAndShadowcons& Sheet_lightAndShadowcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lightAndShadow_2eproto();
  return *default_instance_;
}

Sheet_lightAndShadowcons* Sheet_lightAndShadowcons::default_instance_ = NULL;

Sheet_lightAndShadowcons* Sheet_lightAndShadowcons::New() const {
  return new Sheet_lightAndShadowcons;
}

void Sheet_lightAndShadowcons::Clear() {
  lightandshadowcons_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_lightAndShadowcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightAndShadowcons_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lightandshadowcons_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lightAndShadowcons_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_lightAndShadowcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
  for (int i = 0; i < this->lightandshadowcons_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lightandshadowcons_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_lightAndShadowcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
  for (int i = 0; i < this->lightandshadowcons_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lightandshadowcons_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_lightAndShadowcons::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.lightAndShadowcons lightAndShadowcons_List = 1;
  total_size += 1 * this->lightandshadowcons_list_size();
  for (int i = 0; i < this->lightandshadowcons_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lightandshadowcons_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_lightAndShadowcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_lightAndShadowcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_lightAndShadowcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_lightAndShadowcons::MergeFrom(const Sheet_lightAndShadowcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  lightandshadowcons_list_.MergeFrom(from.lightandshadowcons_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_lightAndShadowcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_lightAndShadowcons::CopyFrom(const Sheet_lightAndShadowcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_lightAndShadowcons::IsInitialized() const {

  return true;
}

void Sheet_lightAndShadowcons::Swap(Sheet_lightAndShadowcons* other) {
  if (other != this) {
    lightandshadowcons_list_.Swap(&other->lightandshadowcons_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_lightAndShadowcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_lightAndShadowcons_descriptor_;
  metadata.reflection = Sheet_lightAndShadowcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int lightAndShadowreward::kIDFieldNumber;
const int lightAndShadowreward::kGoldMinFieldNumber;
const int lightAndShadowreward::kGoldMaxFieldNumber;
const int lightAndShadowreward::kWinRewardFieldNumber;
const int lightAndShadowreward::kWinRewardNumFieldNumber;
const int lightAndShadowreward::kLoseRewardFieldNumber;
const int lightAndShadowreward::kLoseRewardNumFieldNumber;
#endif  // !_MSC_VER

lightAndShadowreward::lightAndShadowreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void lightAndShadowreward::InitAsDefaultInstance() {
}

lightAndShadowreward::lightAndShadowreward(const lightAndShadowreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void lightAndShadowreward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  goldmin_ = 0;
  goldmax_ = 0;
  winreward_ = GOOGLE_LONGLONG(0);
  winrewardnum_ = 0;
  losereward_ = GOOGLE_LONGLONG(0);
  loserewardnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

lightAndShadowreward::~lightAndShadowreward() {
  SharedDtor();
}

void lightAndShadowreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void lightAndShadowreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* lightAndShadowreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return lightAndShadowreward_descriptor_;
}

const lightAndShadowreward& lightAndShadowreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lightAndShadow_2eproto();
  return *default_instance_;
}

lightAndShadowreward* lightAndShadowreward::default_instance_ = NULL;

lightAndShadowreward* lightAndShadowreward::New() const {
  return new lightAndShadowreward;
}

void lightAndShadowreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    goldmin_ = 0;
    goldmax_ = 0;
    winreward_ = GOOGLE_LONGLONG(0);
    winrewardnum_ = 0;
    losereward_ = GOOGLE_LONGLONG(0);
    loserewardnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool lightAndShadowreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goldMin;
        break;
      }

      // optional int32 goldMin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldmin_)));
          set_has_goldmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldMax;
        break;
      }

      // optional int32 goldMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldmax_)));
          set_has_goldmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_winReward;
        break;
      }

      // optional int64 winReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winreward_)));
          set_has_winreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winRewardNum;
        break;
      }

      // optional int32 winRewardNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winrewardnum_)));
          set_has_winrewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_loseReward;
        break;
      }

      // optional int64 loseReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &losereward_)));
          set_has_losereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_loseRewardNum;
        break;
      }

      // optional int32 loseRewardNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loseRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loserewardnum_)));
          set_has_loserewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void lightAndShadowreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 goldMin = 2;
  if (has_goldmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->goldmin(), output);
  }

  // optional int32 goldMax = 3;
  if (has_goldmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldmax(), output);
  }

  // optional int64 winReward = 4;
  if (has_winreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winreward(), output);
  }

  // optional int32 winRewardNum = 5;
  if (has_winrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winrewardnum(), output);
  }

  // optional int64 loseReward = 6;
  if (has_losereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->losereward(), output);
  }

  // optional int32 loseRewardNum = 7;
  if (has_loserewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->loserewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* lightAndShadowreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 goldMin = 2;
  if (has_goldmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->goldmin(), target);
  }

  // optional int32 goldMax = 3;
  if (has_goldmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldmax(), target);
  }

  // optional int64 winReward = 4;
  if (has_winreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winreward(), target);
  }

  // optional int32 winRewardNum = 5;
  if (has_winrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winrewardnum(), target);
  }

  // optional int64 loseReward = 6;
  if (has_losereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->losereward(), target);
  }

  // optional int32 loseRewardNum = 7;
  if (has_loserewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->loserewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int lightAndShadowreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 goldMin = 2;
    if (has_goldmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldmin());
    }

    // optional int32 goldMax = 3;
    if (has_goldmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldmax());
    }

    // optional int64 winReward = 4;
    if (has_winreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->winreward());
    }

    // optional int32 winRewardNum = 5;
    if (has_winrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winrewardnum());
    }

    // optional int64 loseReward = 6;
    if (has_losereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->losereward());
    }

    // optional int32 loseRewardNum = 7;
    if (has_loserewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loserewardnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void lightAndShadowreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const lightAndShadowreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const lightAndShadowreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void lightAndShadowreward::MergeFrom(const lightAndShadowreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_goldmin()) {
      set_goldmin(from.goldmin());
    }
    if (from.has_goldmax()) {
      set_goldmax(from.goldmax());
    }
    if (from.has_winreward()) {
      set_winreward(from.winreward());
    }
    if (from.has_winrewardnum()) {
      set_winrewardnum(from.winrewardnum());
    }
    if (from.has_losereward()) {
      set_losereward(from.losereward());
    }
    if (from.has_loserewardnum()) {
      set_loserewardnum(from.loserewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void lightAndShadowreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lightAndShadowreward::CopyFrom(const lightAndShadowreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lightAndShadowreward::IsInitialized() const {

  return true;
}

void lightAndShadowreward::Swap(lightAndShadowreward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(goldmin_, other->goldmin_);
    std::swap(goldmax_, other->goldmax_);
    std::swap(winreward_, other->winreward_);
    std::swap(winrewardnum_, other->winrewardnum_);
    std::swap(losereward_, other->losereward_);
    std::swap(loserewardnum_, other->loserewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata lightAndShadowreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = lightAndShadowreward_descriptor_;
  metadata.reflection = lightAndShadowreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_lightAndShadowreward::kLightAndShadowrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_lightAndShadowreward::Sheet_lightAndShadowreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_lightAndShadowreward::InitAsDefaultInstance() {
}

Sheet_lightAndShadowreward::Sheet_lightAndShadowreward(const Sheet_lightAndShadowreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_lightAndShadowreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_lightAndShadowreward::~Sheet_lightAndShadowreward() {
  SharedDtor();
}

void Sheet_lightAndShadowreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_lightAndShadowreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_lightAndShadowreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_lightAndShadowreward_descriptor_;
}

const Sheet_lightAndShadowreward& Sheet_lightAndShadowreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lightAndShadow_2eproto();
  return *default_instance_;
}

Sheet_lightAndShadowreward* Sheet_lightAndShadowreward::default_instance_ = NULL;

Sheet_lightAndShadowreward* Sheet_lightAndShadowreward::New() const {
  return new Sheet_lightAndShadowreward;
}

void Sheet_lightAndShadowreward::Clear() {
  lightandshadowreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_lightAndShadowreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lightAndShadowreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lightandshadowreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lightAndShadowreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_lightAndShadowreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
  for (int i = 0; i < this->lightandshadowreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lightandshadowreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_lightAndShadowreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
  for (int i = 0; i < this->lightandshadowreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lightandshadowreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_lightAndShadowreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.lightAndShadowreward lightAndShadowreward_List = 1;
  total_size += 1 * this->lightandshadowreward_list_size();
  for (int i = 0; i < this->lightandshadowreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lightandshadowreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_lightAndShadowreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_lightAndShadowreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_lightAndShadowreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_lightAndShadowreward::MergeFrom(const Sheet_lightAndShadowreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  lightandshadowreward_list_.MergeFrom(from.lightandshadowreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_lightAndShadowreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_lightAndShadowreward::CopyFrom(const Sheet_lightAndShadowreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_lightAndShadowreward::IsInitialized() const {

  return true;
}

void Sheet_lightAndShadowreward::Swap(Sheet_lightAndShadowreward* other) {
  if (other != this) {
    lightandshadowreward_list_.Swap(&other->lightandshadowreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_lightAndShadowreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_lightAndShadowreward_descriptor_;
  metadata.reflection = Sheet_lightAndShadowreward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
