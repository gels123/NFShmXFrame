// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientToServer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientToServer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ClientToLogInfoProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToLogInfoProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientLoginGateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientLoginGateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientQueueIndexReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientQueueIndexReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ClientToServer_2eproto() {
  protobuf_AddDesc_ClientToServer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ClientToServer.proto");
  GOOGLE_CHECK(file != NULL);
  ClientToLogInfoProto_descriptor_ = file->message_type(0);
  static const int ClientToLogInfoProto_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, os_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, os_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, udid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, device_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, app_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, app_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, platform_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, active_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, device_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, idfa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, imei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, port_),
  };
  ClientToLogInfoProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToLogInfoProto_descriptor_,
      ClientToLogInfoProto::default_instance_,
      ClientToLogInfoProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToLogInfoProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToLogInfoProto));
  ClientLoginGateReq_descriptor_ = file->message_type(1);
  static const int ClientLoginGateReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, logintimestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, clientsdkstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, srvsdkstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, loginfo_),
  };
  ClientLoginGateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientLoginGateReq_descriptor_,
      ClientLoginGateReq::default_instance_,
      ClientLoginGateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientLoginGateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientLoginGateReq));
  ClientQueueIndexReq_descriptor_ = file->message_type(2);
  static const int ClientQueueIndexReq_offsets_[1] = {
  };
  ClientQueueIndexReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientQueueIndexReq_descriptor_,
      ClientQueueIndexReq::default_instance_,
      ClientQueueIndexReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueueIndexReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientQueueIndexReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientQueueIndexReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ClientToServer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToLogInfoProto_descriptor_, &ClientToLogInfoProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientLoginGateReq_descriptor_, &ClientLoginGateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientQueueIndexReq_descriptor_, &ClientQueueIndexReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ClientToServer_2eproto() {
  delete ClientToLogInfoProto::default_instance_;
  delete ClientToLogInfoProto_reflection_;
  delete ClientLoginGateReq::default_instance_;
  delete ClientLoginGateReq_reflection_;
  delete ClientQueueIndexReq::default_instance_;
  delete ClientQueueIndexReq_reflection_;
}

void protobuf_AddDesc_ClientToServer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5fmsg_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ClientToServer.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\032\022common_logic.proto\032\020com"
    "mon_msg.proto\"\302\002\n\024ClientToLogInfoProto\022\017"
    "\n\007os_name\030\001 \001(\t\022\016\n\006os_ver\030\002 \001(\t\022\020\n\010mac_a"
    "ddr\030\003 \001(\t\022\014\n\004udid\030\004 \001(\t\022\024\n\014device_model\030"
    "\005 \001(\t\022\n\n\002ip\030\006 \001(\t\022\023\n\013app_channel\030\007 \001(\t\022\017"
    "\n\007app_ver\030\010 \001(\t\022\017\n\007network\030\t \001(\t\022\024\n\014plat"
    "form_tag\030\n \001(\t\022\020\n\010group_id\030\013 \001(\005\022\022\n\nchan"
    "nel_id\030\014 \001(\005\022\023\n\013active_time\030\r \001(\005\022\025\n\rdev"
    "ice_screen\030\016 \001(\t\022\014\n\004idfa\030\017 \001(\t\022\014\n\004imei\030\020"
    " \001(\t\022\014\n\004port\030\021 \001(\r\"\334\001\n\022ClientLoginGateRe"
    "q\022\013\n\003uid\030\001 \002(\r\022\021\n\tchannelId\030\002 \002(\r\022\r\n\005tok"
    "en\030\003 \002(\t\022\026\n\016loginTimeStamp\030\004 \002(\004\022\016\n\006gate"
    "Id\030\005 \002(\r\022\027\n\017clientSdkString\030\006 \001(\t\022\024\n\014srv"
    "SdkString\030\007 \001(\t\022\017\n\007version\030\010 \001(\r\022/\n\007logi"
    "nfo\030\t \001(\0132\036.proto_ff.ClientToLogInfoProt"
    "o\"\025\n\023ClientQueueIndexReq", 664);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ClientToServer.proto", &protobuf_RegisterTypes);
  ClientToLogInfoProto::default_instance_ = new ClientToLogInfoProto();
  ClientLoginGateReq::default_instance_ = new ClientLoginGateReq();
  ClientQueueIndexReq::default_instance_ = new ClientQueueIndexReq();
  ClientToLogInfoProto::default_instance_->InitAsDefaultInstance();
  ClientLoginGateReq::default_instance_->InitAsDefaultInstance();
  ClientQueueIndexReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientToServer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientToServer_2eproto {
  StaticDescriptorInitializer_ClientToServer_2eproto() {
    protobuf_AddDesc_ClientToServer_2eproto();
  }
} static_descriptor_initializer_ClientToServer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientToLogInfoProto::kOsNameFieldNumber;
const int ClientToLogInfoProto::kOsVerFieldNumber;
const int ClientToLogInfoProto::kMacAddrFieldNumber;
const int ClientToLogInfoProto::kUdidFieldNumber;
const int ClientToLogInfoProto::kDeviceModelFieldNumber;
const int ClientToLogInfoProto::kIpFieldNumber;
const int ClientToLogInfoProto::kAppChannelFieldNumber;
const int ClientToLogInfoProto::kAppVerFieldNumber;
const int ClientToLogInfoProto::kNetworkFieldNumber;
const int ClientToLogInfoProto::kPlatformTagFieldNumber;
const int ClientToLogInfoProto::kGroupIdFieldNumber;
const int ClientToLogInfoProto::kChannelIdFieldNumber;
const int ClientToLogInfoProto::kActiveTimeFieldNumber;
const int ClientToLogInfoProto::kDeviceScreenFieldNumber;
const int ClientToLogInfoProto::kIdfaFieldNumber;
const int ClientToLogInfoProto::kImeiFieldNumber;
const int ClientToLogInfoProto::kPortFieldNumber;
#endif  // !_MSC_VER

ClientToLogInfoProto::ClientToLogInfoProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToLogInfoProto::InitAsDefaultInstance() {
}

ClientToLogInfoProto::ClientToLogInfoProto(const ClientToLogInfoProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToLogInfoProto::SharedCtor() {
  _cached_size_ = 0;
  os_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  udid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_channel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  platform_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_id_ = 0;
  channel_id_ = 0;
  active_time_ = 0;
  device_screen_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idfa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imei_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToLogInfoProto::~ClientToLogInfoProto() {
  SharedDtor();
}

void ClientToLogInfoProto::SharedDtor() {
  if (os_name_ != &::google::protobuf::internal::kEmptyString) {
    delete os_name_;
  }
  if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete os_ver_;
  }
  if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_addr_;
  }
  if (udid_ != &::google::protobuf::internal::kEmptyString) {
    delete udid_;
  }
  if (device_model_ != &::google::protobuf::internal::kEmptyString) {
    delete device_model_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (app_channel_ != &::google::protobuf::internal::kEmptyString) {
    delete app_channel_;
  }
  if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete app_ver_;
  }
  if (network_ != &::google::protobuf::internal::kEmptyString) {
    delete network_;
  }
  if (platform_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_tag_;
  }
  if (device_screen_ != &::google::protobuf::internal::kEmptyString) {
    delete device_screen_;
  }
  if (idfa_ != &::google::protobuf::internal::kEmptyString) {
    delete idfa_;
  }
  if (imei_ != &::google::protobuf::internal::kEmptyString) {
    delete imei_;
  }
  if (this != default_instance_) {
  }
}

void ClientToLogInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToLogInfoProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToLogInfoProto_descriptor_;
}

const ClientToLogInfoProto& ClientToLogInfoProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToServer_2eproto();
  return *default_instance_;
}

ClientToLogInfoProto* ClientToLogInfoProto::default_instance_ = NULL;

ClientToLogInfoProto* ClientToLogInfoProto::New() const {
  return new ClientToLogInfoProto;
}

void ClientToLogInfoProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_os_name()) {
      if (os_name_ != &::google::protobuf::internal::kEmptyString) {
        os_name_->clear();
      }
    }
    if (has_os_ver()) {
      if (os_ver_ != &::google::protobuf::internal::kEmptyString) {
        os_ver_->clear();
      }
    }
    if (has_mac_addr()) {
      if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
        mac_addr_->clear();
      }
    }
    if (has_udid()) {
      if (udid_ != &::google::protobuf::internal::kEmptyString) {
        udid_->clear();
      }
    }
    if (has_device_model()) {
      if (device_model_ != &::google::protobuf::internal::kEmptyString) {
        device_model_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_app_channel()) {
      if (app_channel_ != &::google::protobuf::internal::kEmptyString) {
        app_channel_->clear();
      }
    }
    if (has_app_ver()) {
      if (app_ver_ != &::google::protobuf::internal::kEmptyString) {
        app_ver_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_network()) {
      if (network_ != &::google::protobuf::internal::kEmptyString) {
        network_->clear();
      }
    }
    if (has_platform_tag()) {
      if (platform_tag_ != &::google::protobuf::internal::kEmptyString) {
        platform_tag_->clear();
      }
    }
    group_id_ = 0;
    channel_id_ = 0;
    active_time_ = 0;
    if (has_device_screen()) {
      if (device_screen_ != &::google::protobuf::internal::kEmptyString) {
        device_screen_->clear();
      }
    }
    if (has_idfa()) {
      if (idfa_ != &::google::protobuf::internal::kEmptyString) {
        idfa_->clear();
      }
    }
    if (has_imei()) {
      if (imei_ != &::google::protobuf::internal::kEmptyString) {
        imei_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToLogInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_os_ver;
        break;
      }

      // optional string os_ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_ver().data(), this->os_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mac_addr;
        break;
      }

      // optional string mac_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mac_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_udid;
        break;
      }

      // optional string udid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_udid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_udid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->udid().data(), this->udid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_model;
        break;
      }

      // optional string device_model = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_model().data(), this->device_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_app_channel;
        break;
      }

      // optional string app_channel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_channel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_channel().data(), this->app_channel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_app_ver;
        break;
      }

      // optional string app_ver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_ver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_ver().data(), this->app_ver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_network;
        break;
      }

      // optional string network = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network().data(), this->network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_platform_tag;
        break;
      }

      // optional string platform_tag = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_platform_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform_tag().data(), this->platform_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_channel_id;
        break;
      }

      // optional int32 channel_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_active_time;
        break;
      }

      // optional int32 active_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_device_screen;
        break;
      }

      // optional string device_screen = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_screen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_screen()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device_screen().data(), this->device_screen().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_idfa;
        break;
      }

      // optional string idfa = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idfa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idfa()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idfa().data(), this->idfa().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_imei;
        break;
      }

      // optional string imei = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imei:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imei()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imei().data(), this->imei().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_port;
        break;
      }

      // optional uint32 port = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToLogInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string os_name = 1;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->os_name(), output);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->os_ver(), output);
  }

  // optional string mac_addr = 3;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mac_addr(), output);
  }

  // optional string udid = 4;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->udid(), output);
  }

  // optional string device_model = 5;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->device_model(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  // optional string app_channel = 7;
  if (has_app_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_channel().data(), this->app_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->app_channel(), output);
  }

  // optional string app_ver = 8;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->app_ver(), output);
  }

  // optional string network = 9;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->network(), output);
  }

  // optional string platform_tag = 10;
  if (has_platform_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_tag().data(), this->platform_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->platform_tag(), output);
  }

  // optional int32 group_id = 11;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->group_id(), output);
  }

  // optional int32 channel_id = 12;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->channel_id(), output);
  }

  // optional int32 active_time = 13;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->active_time(), output);
  }

  // optional string device_screen = 14;
  if (has_device_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_screen().data(), this->device_screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->device_screen(), output);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->idfa(), output);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->imei(), output);
  }

  // optional uint32 port = 17;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToLogInfoProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string os_name = 1;
  if (has_os_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os_name(), target);
  }

  // optional string os_ver = 2;
  if (has_os_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os_ver(), target);
  }

  // optional string mac_addr = 3;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mac_addr(), target);
  }

  // optional string udid = 4;
  if (has_udid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->udid().data(), this->udid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->udid(), target);
  }

  // optional string device_model = 5;
  if (has_device_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_model().data(), this->device_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->device_model(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional string app_channel = 7;
  if (has_app_channel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_channel().data(), this->app_channel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->app_channel(), target);
  }

  // optional string app_ver = 8;
  if (has_app_ver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_ver().data(), this->app_ver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->app_ver(), target);
  }

  // optional string network = 9;
  if (has_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network().data(), this->network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->network(), target);
  }

  // optional string platform_tag = 10;
  if (has_platform_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform_tag().data(), this->platform_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->platform_tag(), target);
  }

  // optional int32 group_id = 11;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->group_id(), target);
  }

  // optional int32 channel_id = 12;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->channel_id(), target);
  }

  // optional int32 active_time = 13;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->active_time(), target);
  }

  // optional string device_screen = 14;
  if (has_device_screen()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device_screen().data(), this->device_screen().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->device_screen(), target);
  }

  // optional string idfa = 15;
  if (has_idfa()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idfa().data(), this->idfa().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->idfa(), target);
  }

  // optional string imei = 16;
  if (has_imei()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imei().data(), this->imei().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->imei(), target);
  }

  // optional uint32 port = 17;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToLogInfoProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string os_name = 1;
    if (has_os_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_name());
    }

    // optional string os_ver = 2;
    if (has_os_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_ver());
    }

    // optional string mac_addr = 3;
    if (has_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_addr());
    }

    // optional string udid = 4;
    if (has_udid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->udid());
    }

    // optional string device_model = 5;
    if (has_device_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_model());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string app_channel = 7;
    if (has_app_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_channel());
    }

    // optional string app_ver = 8;
    if (has_app_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_ver());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string network = 9;
    if (has_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network());
    }

    // optional string platform_tag = 10;
    if (has_platform_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform_tag());
    }

    // optional int32 group_id = 11;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // optional int32 channel_id = 12;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel_id());
    }

    // optional int32 active_time = 13;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_time());
    }

    // optional string device_screen = 14;
    if (has_device_screen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_screen());
    }

    // optional string idfa = 15;
    if (has_idfa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idfa());
    }

    // optional string imei = 16;
    if (has_imei()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imei());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 port = 17;
    if (has_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToLogInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToLogInfoProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToLogInfoProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToLogInfoProto::MergeFrom(const ClientToLogInfoProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_os_name()) {
      set_os_name(from.os_name());
    }
    if (from.has_os_ver()) {
      set_os_ver(from.os_ver());
    }
    if (from.has_mac_addr()) {
      set_mac_addr(from.mac_addr());
    }
    if (from.has_udid()) {
      set_udid(from.udid());
    }
    if (from.has_device_model()) {
      set_device_model(from.device_model());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_app_channel()) {
      set_app_channel(from.app_channel());
    }
    if (from.has_app_ver()) {
      set_app_ver(from.app_ver());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_network()) {
      set_network(from.network());
    }
    if (from.has_platform_tag()) {
      set_platform_tag(from.platform_tag());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
    if (from.has_device_screen()) {
      set_device_screen(from.device_screen());
    }
    if (from.has_idfa()) {
      set_idfa(from.idfa());
    }
    if (from.has_imei()) {
      set_imei(from.imei());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToLogInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToLogInfoProto::CopyFrom(const ClientToLogInfoProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToLogInfoProto::IsInitialized() const {

  return true;
}

void ClientToLogInfoProto::Swap(ClientToLogInfoProto* other) {
  if (other != this) {
    std::swap(os_name_, other->os_name_);
    std::swap(os_ver_, other->os_ver_);
    std::swap(mac_addr_, other->mac_addr_);
    std::swap(udid_, other->udid_);
    std::swap(device_model_, other->device_model_);
    std::swap(ip_, other->ip_);
    std::swap(app_channel_, other->app_channel_);
    std::swap(app_ver_, other->app_ver_);
    std::swap(network_, other->network_);
    std::swap(platform_tag_, other->platform_tag_);
    std::swap(group_id_, other->group_id_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(active_time_, other->active_time_);
    std::swap(device_screen_, other->device_screen_);
    std::swap(idfa_, other->idfa_);
    std::swap(imei_, other->imei_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToLogInfoProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToLogInfoProto_descriptor_;
  metadata.reflection = ClientToLogInfoProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientLoginGateReq::kUidFieldNumber;
const int ClientLoginGateReq::kChannelIdFieldNumber;
const int ClientLoginGateReq::kTokenFieldNumber;
const int ClientLoginGateReq::kLoginTimeStampFieldNumber;
const int ClientLoginGateReq::kGateIdFieldNumber;
const int ClientLoginGateReq::kClientSdkStringFieldNumber;
const int ClientLoginGateReq::kSrvSdkStringFieldNumber;
const int ClientLoginGateReq::kVersionFieldNumber;
const int ClientLoginGateReq::kLoginfoFieldNumber;
#endif  // !_MSC_VER

ClientLoginGateReq::ClientLoginGateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientLoginGateReq::InitAsDefaultInstance() {
  loginfo_ = const_cast< ::proto_ff::ClientToLogInfoProto*>(&::proto_ff::ClientToLogInfoProto::default_instance());
}

ClientLoginGateReq::ClientLoginGateReq(const ClientLoginGateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientLoginGateReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  channelid_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintimestamp_ = GOOGLE_ULONGLONG(0);
  gateid_ = 0u;
  clientsdkstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  srvsdkstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0u;
  loginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientLoginGateReq::~ClientLoginGateReq() {
  SharedDtor();
}

void ClientLoginGateReq::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (clientsdkstring_ != &::google::protobuf::internal::kEmptyString) {
    delete clientsdkstring_;
  }
  if (srvsdkstring_ != &::google::protobuf::internal::kEmptyString) {
    delete srvsdkstring_;
  }
  if (this != default_instance_) {
    delete loginfo_;
  }
}

void ClientLoginGateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientLoginGateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientLoginGateReq_descriptor_;
}

const ClientLoginGateReq& ClientLoginGateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToServer_2eproto();
  return *default_instance_;
}

ClientLoginGateReq* ClientLoginGateReq::default_instance_ = NULL;

ClientLoginGateReq* ClientLoginGateReq::New() const {
  return new ClientLoginGateReq;
}

void ClientLoginGateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    channelid_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    logintimestamp_ = GOOGLE_ULONGLONG(0);
    gateid_ = 0u;
    if (has_clientsdkstring()) {
      if (clientsdkstring_ != &::google::protobuf::internal::kEmptyString) {
        clientsdkstring_->clear();
      }
    }
    if (has_srvsdkstring()) {
      if (srvsdkstring_ != &::google::protobuf::internal::kEmptyString) {
        srvsdkstring_->clear();
      }
    }
    version_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_loginfo()) {
      if (loginfo_ != NULL) loginfo_->::proto_ff::ClientToLogInfoProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientLoginGateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channelId;
        break;
      }

      // required uint32 channelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // required string token = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loginTimeStamp;
        break;
      }

      // required uint64 loginTimeStamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintimestamp_)));
          set_has_logintimestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gateId;
        break;
      }

      // required uint32 gateId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clientSdkString;
        break;
      }

      // optional string clientSdkString = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientSdkString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientsdkstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientsdkstring().data(), this->clientsdkstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_srvSdkString;
        break;
      }

      // optional string srvSdkString = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srvSdkString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srvsdkstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srvsdkstring().data(), this->srvsdkstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // optional uint32 version = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_loginfo;
        break;
      }

      // optional .proto_ff.ClientToLogInfoProto loginfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientLoginGateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 channelId = 2;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channelid(), output);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->token(), output);
  }

  // required uint64 loginTimeStamp = 4;
  if (has_logintimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->logintimestamp(), output);
  }

  // required uint32 gateId = 5;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gateid(), output);
  }

  // optional string clientSdkString = 6;
  if (has_clientsdkstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientsdkstring().data(), this->clientsdkstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->clientsdkstring(), output);
  }

  // optional string srvSdkString = 7;
  if (has_srvsdkstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srvsdkstring().data(), this->srvsdkstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->srvsdkstring(), output);
  }

  // optional uint32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version(), output);
  }

  // optional .proto_ff.ClientToLogInfoProto loginfo = 9;
  if (has_loginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->loginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientLoginGateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 channelId = 2;
  if (has_channelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channelid(), target);
  }

  // required string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // required uint64 loginTimeStamp = 4;
  if (has_logintimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->logintimestamp(), target);
  }

  // required uint32 gateId = 5;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gateid(), target);
  }

  // optional string clientSdkString = 6;
  if (has_clientsdkstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientsdkstring().data(), this->clientsdkstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->clientsdkstring(), target);
  }

  // optional string srvSdkString = 7;
  if (has_srvsdkstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srvsdkstring().data(), this->srvsdkstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->srvsdkstring(), target);
  }

  // optional uint32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version(), target);
  }

  // optional .proto_ff.ClientToLogInfoProto loginfo = 9;
  if (has_loginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->loginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientLoginGateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 channelId = 2;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channelid());
    }

    // required string token = 3;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint64 loginTimeStamp = 4;
    if (has_logintimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintimestamp());
    }

    // required uint32 gateId = 5;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional string clientSdkString = 6;
    if (has_clientsdkstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientsdkstring());
    }

    // optional string srvSdkString = 7;
    if (has_srvsdkstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srvsdkstring());
    }

    // optional uint32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.ClientToLogInfoProto loginfo = 9;
    if (has_loginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientLoginGateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientLoginGateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientLoginGateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientLoginGateReq::MergeFrom(const ClientLoginGateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_logintimestamp()) {
      set_logintimestamp(from.logintimestamp());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientsdkstring()) {
      set_clientsdkstring(from.clientsdkstring());
    }
    if (from.has_srvsdkstring()) {
      set_srvsdkstring(from.srvsdkstring());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loginfo()) {
      mutable_loginfo()->::proto_ff::ClientToLogInfoProto::MergeFrom(from.loginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientLoginGateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientLoginGateReq::CopyFrom(const ClientLoginGateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientLoginGateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ClientLoginGateReq::Swap(ClientLoginGateReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(channelid_, other->channelid_);
    std::swap(token_, other->token_);
    std::swap(logintimestamp_, other->logintimestamp_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientsdkstring_, other->clientsdkstring_);
    std::swap(srvsdkstring_, other->srvsdkstring_);
    std::swap(version_, other->version_);
    std::swap(loginfo_, other->loginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientLoginGateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientLoginGateReq_descriptor_;
  metadata.reflection = ClientLoginGateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientQueueIndexReq::ClientQueueIndexReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientQueueIndexReq::InitAsDefaultInstance() {
}

ClientQueueIndexReq::ClientQueueIndexReq(const ClientQueueIndexReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientQueueIndexReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientQueueIndexReq::~ClientQueueIndexReq() {
  SharedDtor();
}

void ClientQueueIndexReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientQueueIndexReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientQueueIndexReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientQueueIndexReq_descriptor_;
}

const ClientQueueIndexReq& ClientQueueIndexReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ClientToServer_2eproto();
  return *default_instance_;
}

ClientQueueIndexReq* ClientQueueIndexReq::default_instance_ = NULL;

ClientQueueIndexReq* ClientQueueIndexReq::New() const {
  return new ClientQueueIndexReq;
}

void ClientQueueIndexReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientQueueIndexReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientQueueIndexReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientQueueIndexReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientQueueIndexReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientQueueIndexReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientQueueIndexReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientQueueIndexReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientQueueIndexReq::MergeFrom(const ClientQueueIndexReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientQueueIndexReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientQueueIndexReq::CopyFrom(const ClientQueueIndexReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientQueueIndexReq::IsInitialized() const {

  return true;
}

void ClientQueueIndexReq::Swap(ClientQueueIndexReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientQueueIndexReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientQueueIndexReq_descriptor_;
  metadata.reflection = ClientQueueIndexReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
