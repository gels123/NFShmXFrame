// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_VipVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_VipPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_VipPrivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_VipPrivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_VipPrivilege_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vip_2eproto() {
  protobuf_AddDesc_vip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vip.proto");
  GOOGLE_CHECK(file != NULL);
  E_VipVip_descriptor_ = file->message_type(0);
  static const int E_VipVip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, m_privilege_group_),
  };
  E_VipVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipVip_descriptor_,
      E_VipVip::default_instance_,
      E_VipVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipVip));
  Sheet_VipVip_descriptor_ = file->message_type(1);
  static const int Sheet_VipVip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, e_vipvip_list_),
  };
  Sheet_VipVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipVip_descriptor_,
      Sheet_VipVip::default_instance_,
      Sheet_VipVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipVip));
  E_VipPrivilege_descriptor_ = file->message_type(2);
  static const int E_VipPrivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, m_args_),
  };
  E_VipPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_VipPrivilege_descriptor_,
      E_VipPrivilege::default_instance_,
      E_VipPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_VipPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_VipPrivilege));
  Sheet_VipPrivilege_descriptor_ = file->message_type(3);
  static const int Sheet_VipPrivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, e_vipprivilege_list_),
  };
  Sheet_VipPrivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_VipPrivilege_descriptor_,
      Sheet_VipPrivilege::default_instance_,
      Sheet_VipPrivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_VipPrivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_VipPrivilege));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipVip_descriptor_, &E_VipVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipVip_descriptor_, &Sheet_VipVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_VipPrivilege_descriptor_, &E_VipPrivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_VipPrivilege_descriptor_, &Sheet_VipPrivilege::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vip_2eproto() {
  delete E_VipVip::default_instance_;
  delete E_VipVip_reflection_;
  delete Sheet_VipVip::default_instance_;
  delete Sheet_VipVip_reflection_;
  delete E_VipPrivilege::default_instance_;
  delete E_VipPrivilege_reflection_;
  delete Sheet_VipPrivilege::default_instance_;
  delete Sheet_VipPrivilege_reflection_;
}

void protobuf_AddDesc_vip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvip.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"\210\001\n\010E_VipVip\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022"
    "\036\n\007m_level\030\002 \001(\005B\r\302\377\024\tvip\347\255\211\347\272\247\022\034\n\005m_exp"
    "\030\003 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022(\n\021m_privilege_gro"
    "up\030\004 \001(\005B\r\302\377\024\t\347\211\271\346\235\203\347\273\204\"\?\n\014Sheet_VipVip\022"
    "/\n\rE_VipVip_List\030\001 \003(\0132\022.proto_ff.E_VipV"
    "ipB\004\210\301\024\024\"\261\001\n\016E_VipPrivilege\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002ID\022\032\n\007m_group\030\002 \001(\005B\t\302\377\024\005group\022 \n"
    "\006m_type\030\003 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\261\273\345\236\213\022\037\n\005m_arg"
    "\030\004 \001(\005B\020\302\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022*\n\006m_args\030\005 \001(\t"
    "B\032\302\377\024\022\346\225\264\346\225\260\345\212\237\350\203\275\345\217\202\346\225\260\220\301\024<\"Q\n\022Sheet_Vi"
    "pPrivilege\022;\n\023E_VipPrivilege_List\030\001 \003(\0132"
    "\030.proto_ff.E_VipPrivilegeB\004\210\301\024<", 511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vip.proto", &protobuf_RegisterTypes);
  E_VipVip::default_instance_ = new E_VipVip();
  Sheet_VipVip::default_instance_ = new Sheet_VipVip();
  E_VipPrivilege::default_instance_ = new E_VipPrivilege();
  Sheet_VipPrivilege::default_instance_ = new Sheet_VipPrivilege();
  E_VipVip::default_instance_->InitAsDefaultInstance();
  Sheet_VipVip::default_instance_->InitAsDefaultInstance();
  E_VipPrivilege::default_instance_->InitAsDefaultInstance();
  Sheet_VipPrivilege::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vip_2eproto {
  StaticDescriptorInitializer_vip_2eproto() {
    protobuf_AddDesc_vip_2eproto();
  }
} static_descriptor_initializer_vip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_VipVip::kMIdFieldNumber;
const int E_VipVip::kMLevelFieldNumber;
const int E_VipVip::kMExpFieldNumber;
const int E_VipVip::kMPrivilegeGroupFieldNumber;
#endif  // !_MSC_VER

E_VipVip::E_VipVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipVip::InitAsDefaultInstance() {
}

E_VipVip::E_VipVip(const E_VipVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipVip::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_level_ = 0;
  m_exp_ = 0;
  m_privilege_group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipVip::~E_VipVip() {
  SharedDtor();
}

void E_VipVip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_VipVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipVip_descriptor_;
}

const E_VipVip& E_VipVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

E_VipVip* E_VipVip::default_instance_ = NULL;

E_VipVip* E_VipVip::New() const {
  return new E_VipVip;
}

void E_VipVip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_level_ = 0;
    m_exp_ = 0;
    m_privilege_group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_privilege_group;
        break;
      }

      // optional int32 m_privilege_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_privilege_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_privilege_group_)));
          set_has_m_privilege_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_level(), output);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exp(), output);
  }

  // optional int32 m_privilege_group = 4;
  if (has_m_privilege_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_privilege_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_level(), target);
  }

  // optional int32 m_exp = 3;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exp(), target);
  }

  // optional int32 m_privilege_group = 4;
  if (has_m_privilege_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_privilege_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipVip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_level = 2;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_exp = 3;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_privilege_group = 4;
    if (has_m_privilege_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_privilege_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipVip::MergeFrom(const E_VipVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_privilege_group()) {
      set_m_privilege_group(from.m_privilege_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipVip::CopyFrom(const E_VipVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipVip::IsInitialized() const {

  return true;
}

void E_VipVip::Swap(E_VipVip* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_privilege_group_, other->m_privilege_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipVip_descriptor_;
  metadata.reflection = E_VipVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipVip::kEVipVipListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipVip::Sheet_VipVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipVip::InitAsDefaultInstance() {
}

Sheet_VipVip::Sheet_VipVip(const Sheet_VipVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipVip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipVip::~Sheet_VipVip() {
  SharedDtor();
}

void Sheet_VipVip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipVip_descriptor_;
}

const Sheet_VipVip& Sheet_VipVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_VipVip* Sheet_VipVip::default_instance_ = NULL;

Sheet_VipVip* Sheet_VipVip::New() const {
  return new Sheet_VipVip;
}

void Sheet_VipVip::Clear() {
  e_vipvip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipVip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipvip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipVip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipvip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipvip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipVip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipVip E_VipVip_List = 1;
  total_size += 1 * this->e_vipvip_list_size();
  for (int i = 0; i < this->e_vipvip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipvip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipVip::MergeFrom(const Sheet_VipVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipvip_list_.MergeFrom(from.e_vipvip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipVip::CopyFrom(const Sheet_VipVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipVip::IsInitialized() const {

  return true;
}

void Sheet_VipVip::Swap(Sheet_VipVip* other) {
  if (other != this) {
    e_vipvip_list_.Swap(&other->e_vipvip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipVip_descriptor_;
  metadata.reflection = Sheet_VipVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_VipPrivilege::kMIdFieldNumber;
const int E_VipPrivilege::kMGroupFieldNumber;
const int E_VipPrivilege::kMTypeFieldNumber;
const int E_VipPrivilege::kMArgFieldNumber;
const int E_VipPrivilege::kMArgsFieldNumber;
#endif  // !_MSC_VER

E_VipPrivilege::E_VipPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_VipPrivilege::InitAsDefaultInstance() {
}

E_VipPrivilege::E_VipPrivilege(const E_VipPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_VipPrivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_group_ = 0;
  m_type_ = 0;
  m_arg_ = 0;
  m_args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_VipPrivilege::~E_VipPrivilege() {
  SharedDtor();
}

void E_VipPrivilege::SharedDtor() {
  if (m_args_ != &::google::protobuf::internal::kEmptyString) {
    delete m_args_;
  }
  if (this != default_instance_) {
  }
}

void E_VipPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_VipPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_VipPrivilege_descriptor_;
}

const E_VipPrivilege& E_VipPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

E_VipPrivilege* E_VipPrivilege::default_instance_ = NULL;

E_VipPrivilege* E_VipPrivilege::New() const {
  return new E_VipPrivilege;
}

void E_VipPrivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_group_ = 0;
    m_type_ = 0;
    m_arg_ = 0;
    if (has_m_args()) {
      if (m_args_ != &::google::protobuf::internal::kEmptyString) {
        m_args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_VipPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_arg;
        break;
      }

      // optional int32 m_arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_arg_)));
          set_has_m_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_args;
        break;
      }

      // optional string m_args = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_args().data(), this->m_args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_VipPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_group(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_arg = 4;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_arg(), output);
  }

  // optional string m_args = 5;
  if (has_m_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_args().data(), this->m_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_VipPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_group = 2;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_group(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_arg = 4;
  if (has_m_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_arg(), target);
  }

  // optional string m_args = 5;
  if (has_m_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_args().data(), this->m_args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_VipPrivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_group = 2;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_arg = 4;
    if (has_m_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_arg());
    }

    // optional string m_args = 5;
    if (has_m_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_VipPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_VipPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_VipPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_VipPrivilege::MergeFrom(const E_VipPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_arg()) {
      set_m_arg(from.m_arg());
    }
    if (from.has_m_args()) {
      set_m_args(from.m_args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_VipPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_VipPrivilege::CopyFrom(const E_VipPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_VipPrivilege::IsInitialized() const {

  return true;
}

void E_VipPrivilege::Swap(E_VipPrivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_arg_, other->m_arg_);
    std::swap(m_args_, other->m_args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_VipPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_VipPrivilege_descriptor_;
  metadata.reflection = E_VipPrivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_VipPrivilege::kEVipPrivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_VipPrivilege::Sheet_VipPrivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_VipPrivilege::InitAsDefaultInstance() {
}

Sheet_VipPrivilege::Sheet_VipPrivilege(const Sheet_VipPrivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_VipPrivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_VipPrivilege::~Sheet_VipPrivilege() {
  SharedDtor();
}

void Sheet_VipPrivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_VipPrivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_VipPrivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_VipPrivilege_descriptor_;
}

const Sheet_VipPrivilege& Sheet_VipPrivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_VipPrivilege* Sheet_VipPrivilege::default_instance_ = NULL;

Sheet_VipPrivilege* Sheet_VipPrivilege::New() const {
  return new Sheet_VipPrivilege;
}

void Sheet_VipPrivilege::Clear() {
  e_vipprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_VipPrivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_VipPrivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_vipprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_VipPrivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_VipPrivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_vipprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_VipPrivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_vipprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_VipPrivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_VipPrivilege E_VipPrivilege_List = 1;
  total_size += 1 * this->e_vipprivilege_list_size();
  for (int i = 0; i < this->e_vipprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_vipprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_VipPrivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_VipPrivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_VipPrivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_VipPrivilege::MergeFrom(const Sheet_VipPrivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_vipprivilege_list_.MergeFrom(from.e_vipprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_VipPrivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_VipPrivilege::CopyFrom(const Sheet_VipPrivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_VipPrivilege::IsInitialized() const {

  return true;
}

void Sheet_VipPrivilege::Swap(Sheet_VipPrivilege* other) {
  if (other != this) {
    e_vipprivilege_list_.Swap(&other->e_vipprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_VipPrivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_VipPrivilege_descriptor_;
  metadata.reflection = Sheet_VipPrivilege_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
