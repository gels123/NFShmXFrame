// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* vipvip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipvip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_vipvip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_vipvip_reflection_ = NULL;
const ::google::protobuf::Descriptor* vipprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_vipprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_vipprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* vipgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_vipgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_vipgift_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vip_2eproto() {
  protobuf_AddDesc_vip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vip.proto");
  GOOGLE_CHECK(file != NULL);
  vipvip_descriptor_ = file->message_type(0);
  static const int vipvip_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, viptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, privilege_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, chat_),
  };
  vipvip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipvip_descriptor_,
      vipvip::default_instance_,
      vipvip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipvip));
  Sheet_vipvip_descriptor_ = file->message_type(1);
  static const int Sheet_vipvip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, vipvip_list_),
  };
  Sheet_vipvip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_vipvip_descriptor_,
      Sheet_vipvip::default_instance_,
      Sheet_vipvip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_vipvip));
  vipprivilege_descriptor_ = file->message_type(2);
  static const int vipprivilege_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, canshustring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, canshu_),
  };
  vipprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipprivilege_descriptor_,
      vipprivilege::default_instance_,
      vipprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipprivilege));
  Sheet_vipprivilege_descriptor_ = file->message_type(3);
  static const int Sheet_vipprivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, vipprivilege_list_),
  };
  Sheet_vipprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_vipprivilege_descriptor_,
      Sheet_vipprivilege::default_instance_,
      Sheet_vipprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_vipprivilege));
  vipgift_descriptor_ = file->message_type(4);
  static const int vipgift_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, boxid_),
  };
  vipgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipgift_descriptor_,
      vipgift::default_instance_,
      vipgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipgift));
  Sheet_vipgift_descriptor_ = file->message_type(5);
  static const int Sheet_vipgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipgift, vipgift_list_),
  };
  Sheet_vipgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_vipgift_descriptor_,
      Sheet_vipgift::default_instance_,
      Sheet_vipgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_vipgift));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipvip_descriptor_, &vipvip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_vipvip_descriptor_, &Sheet_vipvip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipprivilege_descriptor_, &vipprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_vipprivilege_descriptor_, &Sheet_vipprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipgift_descriptor_, &vipgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_vipgift_descriptor_, &Sheet_vipgift::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vip_2eproto() {
  delete vipvip::default_instance_;
  delete vipvip_reflection_;
  delete Sheet_vipvip::default_instance_;
  delete Sheet_vipvip_reflection_;
  delete vipprivilege::default_instance_;
  delete vipprivilege_reflection_;
  delete Sheet_vipprivilege::default_instance_;
  delete Sheet_vipprivilege_reflection_;
  delete vipgift::default_instance_;
  delete vipgift_reflection_;
  delete Sheet_vipgift::default_instance_;
  delete Sheet_vipgift_reflection_;
}

void protobuf_AddDesc_vip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvip.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"\274\001\n\006vipvip\022\022\n\002id\030\001 \001(\003B\006\302\377\024\002id\022\034\n\005l"
    "evel\030\002 \001(\005B\r\302\377\024\tvip\347\255\211\347\272\247\022\036\n\007vipType\030\003 \001"
    "(\005B\r\302\377\024\tvip\347\261\273\345\236\213\022\032\n\003exp\030\004 \001(\005B\r\302\377\024\t\347\273\217\351"
    "\252\214\345\200\274\022\'\n\014privilege_id\030\005 \001(\tB\021\302\377\024\010\347\211\271\346\235\203i"
    "d\220\301\024\277\001\022\033\n\004chat\030\006 \001(\003B\r\302\377\024\t\350\267\221\351\251\254\347\201\257\";\n\014S"
    "heet_vipvip\022+\n\013vipvip_List\030\001 \003(\0132\020.proto"
    "_ff.vipvipB\004\210\301\024}\"\226\001\n\014vipprivilege\022\022\n\002id\030"
    "\001 \001(\003B\006\302\377\024\002ID\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\345\274\200\346\224\276\347"
    "\261\273\345\236\213\0220\n\014canshuString\030\003 \001(\tB\032\302\377\024\022\346\225\264\346\225\260\345"
    "\212\237\350\203\275\345\217\202\346\225\260\220\301\024 \022 \n\006canshu\030\004 \003(\005B\020\302\377\024\014\345\212\237"
    "\350\203\275\345\217\202\346\225\260\"N\n\022Sheet_vipprivilege\0228\n\021vippr"
    "ivilege_List\030\001 \003(\0132\026.proto_ff.vipprivile"
    "geB\005\210\301\024\325\003\"\325\001\n\007vipgift\022\022\n\002ID\030\001 \001(\003B\006\302\377\024\002I"
    "D\022\030\n\004Type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\034\n\005VipLv\030\003 \001"
    "(\005B\r\302\377\024\tVIP\347\255\211\347\272\247\022#\n\tmoneyType\030\004 \001(\005B\020\302\377"
    "\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022!\n\rOriginalPrice\030\005 \001(\005B\n\302"
    "\377\024\006\345\216\237\344\273\267\022\031\n\005Price\030\006 \001(\005B\n\302\377\024\006\347\216\260\344\273\267\022\033\n\005"
    "boxid\030\007 \001(\003B\014\302\377\024\010\345\245\226\345\212\261ID\"\?\n\rSheet_vipgi"
    "ft\022.\n\014vipgift_List\030\001 \003(\0132\021.proto_ff.vipg"
    "iftB\005\210\301\024\220\001", 810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vip.proto", &protobuf_RegisterTypes);
  vipvip::default_instance_ = new vipvip();
  Sheet_vipvip::default_instance_ = new Sheet_vipvip();
  vipprivilege::default_instance_ = new vipprivilege();
  Sheet_vipprivilege::default_instance_ = new Sheet_vipprivilege();
  vipgift::default_instance_ = new vipgift();
  Sheet_vipgift::default_instance_ = new Sheet_vipgift();
  vipvip::default_instance_->InitAsDefaultInstance();
  Sheet_vipvip::default_instance_->InitAsDefaultInstance();
  vipprivilege::default_instance_->InitAsDefaultInstance();
  Sheet_vipprivilege::default_instance_->InitAsDefaultInstance();
  vipgift::default_instance_->InitAsDefaultInstance();
  Sheet_vipgift::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vip_2eproto {
  StaticDescriptorInitializer_vip_2eproto() {
    protobuf_AddDesc_vip_2eproto();
  }
} static_descriptor_initializer_vip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int vipvip::kIdFieldNumber;
const int vipvip::kLevelFieldNumber;
const int vipvip::kVipTypeFieldNumber;
const int vipvip::kExpFieldNumber;
const int vipvip::kPrivilegeIdFieldNumber;
const int vipvip::kChatFieldNumber;
#endif  // !_MSC_VER

vipvip::vipvip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipvip::InitAsDefaultInstance() {
}

vipvip::vipvip(const vipvip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipvip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  viptype_ = 0;
  exp_ = 0;
  privilege_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipvip::~vipvip() {
  SharedDtor();
}

void vipvip::SharedDtor() {
  if (privilege_id_ != &::google::protobuf::internal::kEmptyString) {
    delete privilege_id_;
  }
  if (this != default_instance_) {
  }
}

void vipvip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipvip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipvip_descriptor_;
}

const vipvip& vipvip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

vipvip* vipvip::default_instance_ = NULL;

vipvip* vipvip::New() const {
  return new vipvip;
}

void vipvip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    viptype_ = 0;
    exp_ = 0;
    if (has_privilege_id()) {
      if (privilege_id_ != &::google::protobuf::internal::kEmptyString) {
        privilege_id_->clear();
      }
    }
    chat_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipvip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipType;
        break;
      }

      // optional int32 vipType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viptype_)));
          set_has_viptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_privilege_id;
        break;
      }

      // optional string privilege_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_privilege_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_privilege_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->privilege_id().data(), this->privilege_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_chat;
        break;
      }

      // optional int64 chat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipvip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 vipType = 3;
  if (has_viptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viptype(), output);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }

  // optional string privilege_id = 5;
  if (has_privilege_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privilege_id().data(), this->privilege_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->privilege_id(), output);
  }

  // optional int64 chat = 6;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->chat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipvip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 vipType = 3;
  if (has_viptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viptype(), target);
  }

  // optional int32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }

  // optional string privilege_id = 5;
  if (has_privilege_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->privilege_id().data(), this->privilege_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->privilege_id(), target);
  }

  // optional int64 chat = 6;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->chat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipvip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vipType = 3;
    if (has_viptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viptype());
    }

    // optional int32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional string privilege_id = 5;
    if (has_privilege_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->privilege_id());
    }

    // optional int64 chat = 6;
    if (has_chat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipvip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipvip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipvip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipvip::MergeFrom(const vipvip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viptype()) {
      set_viptype(from.viptype());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_privilege_id()) {
      set_privilege_id(from.privilege_id());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipvip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipvip::CopyFrom(const vipvip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipvip::IsInitialized() const {

  return true;
}

void vipvip::Swap(vipvip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(viptype_, other->viptype_);
    std::swap(exp_, other->exp_);
    std::swap(privilege_id_, other->privilege_id_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipvip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipvip_descriptor_;
  metadata.reflection = vipvip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_vipvip::kVipvipListFieldNumber;
#endif  // !_MSC_VER

Sheet_vipvip::Sheet_vipvip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_vipvip::InitAsDefaultInstance() {
}

Sheet_vipvip::Sheet_vipvip(const Sheet_vipvip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_vipvip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_vipvip::~Sheet_vipvip() {
  SharedDtor();
}

void Sheet_vipvip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_vipvip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_vipvip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_vipvip_descriptor_;
}

const Sheet_vipvip& Sheet_vipvip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_vipvip* Sheet_vipvip::default_instance_ = NULL;

Sheet_vipvip* Sheet_vipvip::New() const {
  return new Sheet_vipvip;
}

void Sheet_vipvip::Clear() {
  vipvip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_vipvip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.vipvip vipvip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipvip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipvip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipvip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_vipvip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.vipvip vipvip_List = 1;
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipvip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_vipvip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.vipvip vipvip_List = 1;
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipvip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_vipvip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.vipvip vipvip_List = 1;
  total_size += 1 * this->vipvip_list_size();
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipvip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_vipvip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_vipvip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_vipvip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_vipvip::MergeFrom(const Sheet_vipvip& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipvip_list_.MergeFrom(from.vipvip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_vipvip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_vipvip::CopyFrom(const Sheet_vipvip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_vipvip::IsInitialized() const {

  return true;
}

void Sheet_vipvip::Swap(Sheet_vipvip* other) {
  if (other != this) {
    vipvip_list_.Swap(&other->vipvip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_vipvip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_vipvip_descriptor_;
  metadata.reflection = Sheet_vipvip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vipprivilege::kIdFieldNumber;
const int vipprivilege::kTypeFieldNumber;
const int vipprivilege::kCanshuStringFieldNumber;
const int vipprivilege::kCanshuFieldNumber;
#endif  // !_MSC_VER

vipprivilege::vipprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipprivilege::InitAsDefaultInstance() {
}

vipprivilege::vipprivilege(const vipprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipprivilege::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  canshustring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipprivilege::~vipprivilege() {
  SharedDtor();
}

void vipprivilege::SharedDtor() {
  if (canshustring_ != &::google::protobuf::internal::kEmptyString) {
    delete canshustring_;
  }
  if (this != default_instance_) {
  }
}

void vipprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipprivilege_descriptor_;
}

const vipprivilege& vipprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

vipprivilege* vipprivilege::default_instance_ = NULL;

vipprivilege* vipprivilege::New() const {
  return new vipprivilege;
}

void vipprivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_canshustring()) {
      if (canshustring_ != &::google::protobuf::internal::kEmptyString) {
        canshustring_->clear();
      }
    }
  }
  canshu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_canshuString;
        break;
      }

      // optional string canshuString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_canshuString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_canshustring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->canshustring().data(), this->canshustring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_canshu;
        break;
      }

      // repeated int32 canshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canshu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_canshu())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_canshu())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_canshu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string canshuString = 3;
  if (has_canshustring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canshustring().data(), this->canshustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->canshustring(), output);
  }

  // repeated int32 canshu = 4;
  for (int i = 0; i < this->canshu_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->canshu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string canshuString = 3;
  if (has_canshustring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canshustring().data(), this->canshustring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->canshustring(), target);
  }

  // repeated int32 canshu = 4;
  for (int i = 0; i < this->canshu_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->canshu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipprivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string canshuString = 3;
    if (has_canshustring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->canshustring());
    }

  }
  // repeated int32 canshu = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->canshu_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->canshu(i));
    }
    total_size += 1 * this->canshu_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipprivilege::MergeFrom(const vipprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  canshu_.MergeFrom(from.canshu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_canshustring()) {
      set_canshustring(from.canshustring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipprivilege::CopyFrom(const vipprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipprivilege::IsInitialized() const {

  return true;
}

void vipprivilege::Swap(vipprivilege* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(canshustring_, other->canshustring_);
    canshu_.Swap(&other->canshu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipprivilege_descriptor_;
  metadata.reflection = vipprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_vipprivilege::kVipprivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_vipprivilege::Sheet_vipprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_vipprivilege::InitAsDefaultInstance() {
}

Sheet_vipprivilege::Sheet_vipprivilege(const Sheet_vipprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_vipprivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_vipprivilege::~Sheet_vipprivilege() {
  SharedDtor();
}

void Sheet_vipprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_vipprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_vipprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_vipprivilege_descriptor_;
}

const Sheet_vipprivilege& Sheet_vipprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_vipprivilege* Sheet_vipprivilege::default_instance_ = NULL;

Sheet_vipprivilege* Sheet_vipprivilege::New() const {
  return new Sheet_vipprivilege;
}

void Sheet_vipprivilege::Clear() {
  vipprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_vipprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipprivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipprivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_vipprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_vipprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_vipprivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  total_size += 1 * this->vipprivilege_list_size();
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_vipprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_vipprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_vipprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_vipprivilege::MergeFrom(const Sheet_vipprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipprivilege_list_.MergeFrom(from.vipprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_vipprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_vipprivilege::CopyFrom(const Sheet_vipprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_vipprivilege::IsInitialized() const {

  return true;
}

void Sheet_vipprivilege::Swap(Sheet_vipprivilege* other) {
  if (other != this) {
    vipprivilege_list_.Swap(&other->vipprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_vipprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_vipprivilege_descriptor_;
  metadata.reflection = Sheet_vipprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vipgift::kIDFieldNumber;
const int vipgift::kTypeFieldNumber;
const int vipgift::kVipLvFieldNumber;
const int vipgift::kMoneyTypeFieldNumber;
const int vipgift::kOriginalPriceFieldNumber;
const int vipgift::kPriceFieldNumber;
const int vipgift::kBoxidFieldNumber;
#endif  // !_MSC_VER

vipgift::vipgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipgift::InitAsDefaultInstance() {
}

vipgift::vipgift(const vipgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipgift::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  viplv_ = 0;
  moneytype_ = 0;
  originalprice_ = 0;
  price_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipgift::~vipgift() {
  SharedDtor();
}

void vipgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vipgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipgift_descriptor_;
}

const vipgift& vipgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

vipgift* vipgift::default_instance_ = NULL;

vipgift* vipgift::New() const {
  return new vipgift;
}

void vipgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    viplv_ = 0;
    moneytype_ = 0;
    originalprice_ = 0;
    price_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_VipLv;
        break;
      }

      // optional int32 VipLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OriginalPrice;
        break;
      }

      // optional int32 OriginalPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OriginalPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &originalprice_)));
          set_has_originalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Price;
        break;
      }

      // optional int32 Price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 VipLv = 3;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplv(), output);
  }

  // optional int32 moneyType = 4;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->moneytype(), output);
  }

  // optional int32 OriginalPrice = 5;
  if (has_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->originalprice(), output);
  }

  // optional int32 Price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // optional int64 boxid = 7;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 VipLv = 3;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplv(), target);
  }

  // optional int32 moneyType = 4;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->moneytype(), target);
  }

  // optional int32 OriginalPrice = 5;
  if (has_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->originalprice(), target);
  }

  // optional int32 Price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  // optional int64 boxid = 7;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 VipLv = 3;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 moneyType = 4;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional int32 OriginalPrice = 5;
    if (has_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->originalprice());
    }

    // optional int32 Price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int64 boxid = 7;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipgift::MergeFrom(const vipgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_originalprice()) {
      set_originalprice(from.originalprice());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipgift::CopyFrom(const vipgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipgift::IsInitialized() const {

  return true;
}

void vipgift::Swap(vipgift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(viplv_, other->viplv_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(originalprice_, other->originalprice_);
    std::swap(price_, other->price_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipgift_descriptor_;
  metadata.reflection = vipgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_vipgift::kVipgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_vipgift::Sheet_vipgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_vipgift::InitAsDefaultInstance() {
}

Sheet_vipgift::Sheet_vipgift(const Sheet_vipgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_vipgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_vipgift::~Sheet_vipgift() {
  SharedDtor();
}

void Sheet_vipgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_vipgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_vipgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_vipgift_descriptor_;
}

const Sheet_vipgift& Sheet_vipgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_vipgift* Sheet_vipgift::default_instance_ = NULL;

Sheet_vipgift* Sheet_vipgift::New() const {
  return new Sheet_vipgift;
}

void Sheet_vipgift::Clear() {
  vipgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_vipgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.vipgift vipgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_vipgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.vipgift vipgift_List = 1;
  for (int i = 0; i < this->vipgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_vipgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.vipgift vipgift_List = 1;
  for (int i = 0; i < this->vipgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_vipgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.vipgift vipgift_List = 1;
  total_size += 1 * this->vipgift_list_size();
  for (int i = 0; i < this->vipgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_vipgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_vipgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_vipgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_vipgift::MergeFrom(const Sheet_vipgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipgift_list_.MergeFrom(from.vipgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_vipgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_vipgift::CopyFrom(const Sheet_vipgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_vipgift::IsInitialized() const {

  return true;
}

void Sheet_vipgift::Swap(Sheet_vipgift* other) {
  if (other != this) {
    vipgift_list_.Swap(&other->vipgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_vipgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_vipgift_descriptor_;
  metadata.reflection = Sheet_vipgift_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
