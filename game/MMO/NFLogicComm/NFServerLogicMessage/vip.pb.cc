// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* vipvip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipvip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_vipvip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_vipvip_reflection_ = NULL;
const ::google::protobuf::Descriptor* vipprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vipprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_vipprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_vipprivilege_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_vip_2eproto() {
  protobuf_AddDesc_vip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vip.proto");
  GOOGLE_CHECK(file != NULL);
  vipvip_descriptor_ = file->message_type(0);
  static const int vipvip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, privilege_group_),
  };
  vipvip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipvip_descriptor_,
      vipvip::default_instance_,
      vipvip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipvip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipvip));
  Sheet_vipvip_descriptor_ = file->message_type(1);
  static const int Sheet_vipvip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, vipvip_list_),
  };
  Sheet_vipvip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_vipvip_descriptor_,
      Sheet_vipvip::default_instance_,
      Sheet_vipvip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipvip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_vipvip));
  vipprivilege_descriptor_ = file->message_type(2);
  static const int vipprivilege_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, args_),
  };
  vipprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vipprivilege_descriptor_,
      vipprivilege::default_instance_,
      vipprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vipprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vipprivilege));
  Sheet_vipprivilege_descriptor_ = file->message_type(3);
  static const int Sheet_vipprivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, vipprivilege_list_),
  };
  Sheet_vipprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_vipprivilege_descriptor_,
      Sheet_vipprivilege::default_instance_,
      Sheet_vipprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_vipprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_vipprivilege));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipvip_descriptor_, &vipvip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_vipvip_descriptor_, &Sheet_vipvip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vipprivilege_descriptor_, &vipprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_vipprivilege_descriptor_, &Sheet_vipprivilege::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vip_2eproto() {
  delete vipvip::default_instance_;
  delete vipvip_reflection_;
  delete Sheet_vipvip::default_instance_;
  delete Sheet_vipvip_reflection_;
  delete vipprivilege::default_instance_;
  delete vipprivilege_reflection_;
  delete Sheet_vipprivilege::default_instance_;
  delete Sheet_vipprivilege_reflection_;
}

void protobuf_AddDesc_vip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tvip.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"~\n\006vipvip\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\005le"
    "vel\030\002 \001(\005B\r\302\377\024\tvip\347\255\211\347\272\247\022\032\n\003exp\030\003 \001(\005B\r\302"
    "\377\024\t\347\273\217\351\252\214\345\200\274\022&\n\017privilege_group\030\004 \001(\005B\r\302"
    "\377\024\t\347\211\271\346\235\203\347\273\204\";\n\014Sheet_vipvip\022+\n\013vipvip_L"
    "ist\030\001 \003(\0132\020.proto_ff.vipvipB\004\210\301\024\024\"\245\001\n\014vi"
    "pprivilege\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\005group\030"
    "\002 \001(\005B\t\302\377\024\005group\022\036\n\004type\030\003 \001(\005B\020\302\377\024\014\347\211\271\346"
    "\235\203\347\261\273\345\236\213\022\035\n\003arg\030\004 \001(\005B\020\302\377\024\014\345\212\237\350\203\275\345\217\202\346\225\260\022"
    "(\n\004args\030\005 \001(\tB\032\302\377\024\022\346\225\264\346\225\260\345\212\237\350\203\275\345\217\202\346\225\260\220\301\024"
    "<\"M\n\022Sheet_vipprivilege\0227\n\021vipprivilege_"
    "List\030\001 \003(\0132\026.proto_ff.vipprivilegeB\004\210\301\024<", 480);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vip.proto", &protobuf_RegisterTypes);
  vipvip::default_instance_ = new vipvip();
  Sheet_vipvip::default_instance_ = new Sheet_vipvip();
  vipprivilege::default_instance_ = new vipprivilege();
  Sheet_vipprivilege::default_instance_ = new Sheet_vipprivilege();
  vipvip::default_instance_->InitAsDefaultInstance();
  Sheet_vipvip::default_instance_->InitAsDefaultInstance();
  vipprivilege::default_instance_->InitAsDefaultInstance();
  Sheet_vipprivilege::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vip_2eproto {
  StaticDescriptorInitializer_vip_2eproto() {
    protobuf_AddDesc_vip_2eproto();
  }
} static_descriptor_initializer_vip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int vipvip::kIdFieldNumber;
const int vipvip::kLevelFieldNumber;
const int vipvip::kExpFieldNumber;
const int vipvip::kPrivilegeGroupFieldNumber;
#endif  // !_MSC_VER

vipvip::vipvip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipvip::InitAsDefaultInstance() {
}

vipvip::vipvip(const vipvip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipvip::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  exp_ = 0;
  privilege_group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipvip::~vipvip() {
  SharedDtor();
}

void vipvip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vipvip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipvip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipvip_descriptor_;
}

const vipvip& vipvip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

vipvip* vipvip::default_instance_ = NULL;

vipvip* vipvip::New() const {
  return new vipvip;
}

void vipvip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    exp_ = 0;
    privilege_group_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipvip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_privilege_group;
        break;
      }

      // optional int32 privilege_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privilege_group_)));
          set_has_privilege_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipvip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 privilege_group = 4;
  if (has_privilege_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->privilege_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipvip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 privilege_group = 4;
  if (has_privilege_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->privilege_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipvip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 privilege_group = 4;
    if (has_privilege_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privilege_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipvip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipvip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipvip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipvip::MergeFrom(const vipvip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_privilege_group()) {
      set_privilege_group(from.privilege_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipvip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipvip::CopyFrom(const vipvip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipvip::IsInitialized() const {

  return true;
}

void vipvip::Swap(vipvip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(privilege_group_, other->privilege_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipvip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipvip_descriptor_;
  metadata.reflection = vipvip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_vipvip::kVipvipListFieldNumber;
#endif  // !_MSC_VER

Sheet_vipvip::Sheet_vipvip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_vipvip::InitAsDefaultInstance() {
}

Sheet_vipvip::Sheet_vipvip(const Sheet_vipvip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_vipvip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_vipvip::~Sheet_vipvip() {
  SharedDtor();
}

void Sheet_vipvip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_vipvip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_vipvip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_vipvip_descriptor_;
}

const Sheet_vipvip& Sheet_vipvip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_vipvip* Sheet_vipvip::default_instance_ = NULL;

Sheet_vipvip* Sheet_vipvip::New() const {
  return new Sheet_vipvip;
}

void Sheet_vipvip::Clear() {
  vipvip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_vipvip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.vipvip vipvip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipvip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipvip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipvip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_vipvip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.vipvip vipvip_List = 1;
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipvip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_vipvip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.vipvip vipvip_List = 1;
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipvip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_vipvip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.vipvip vipvip_List = 1;
  total_size += 1 * this->vipvip_list_size();
  for (int i = 0; i < this->vipvip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipvip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_vipvip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_vipvip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_vipvip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_vipvip::MergeFrom(const Sheet_vipvip& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipvip_list_.MergeFrom(from.vipvip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_vipvip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_vipvip::CopyFrom(const Sheet_vipvip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_vipvip::IsInitialized() const {

  return true;
}

void Sheet_vipvip::Swap(Sheet_vipvip* other) {
  if (other != this) {
    vipvip_list_.Swap(&other->vipvip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_vipvip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_vipvip_descriptor_;
  metadata.reflection = Sheet_vipvip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int vipprivilege::kIdFieldNumber;
const int vipprivilege::kGroupFieldNumber;
const int vipprivilege::kTypeFieldNumber;
const int vipprivilege::kArgFieldNumber;
const int vipprivilege::kArgsFieldNumber;
#endif  // !_MSC_VER

vipprivilege::vipprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vipprivilege::InitAsDefaultInstance() {
}

vipprivilege::vipprivilege(const vipprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vipprivilege::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_ = 0;
  type_ = 0;
  arg_ = 0;
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vipprivilege::~vipprivilege() {
  SharedDtor();
}

void vipprivilege::SharedDtor() {
  if (args_ != &::google::protobuf::internal::kEmptyString) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void vipprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vipprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vipprivilege_descriptor_;
}

const vipprivilege& vipprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

vipprivilege* vipprivilege::default_instance_ = NULL;

vipprivilege* vipprivilege::New() const {
  return new vipprivilege;
}

void vipprivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_ = 0;
    type_ = 0;
    arg_ = 0;
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::kEmptyString) {
        args_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vipprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arg;
        break;
      }

      // optional int32 arg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arg_)));
          set_has_arg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_args;
        break;
      }

      // optional string args = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void vipprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 arg = 4;
  if (has_arg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->arg(), output);
  }

  // optional string args = 5;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->args(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vipprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 arg = 4;
  if (has_arg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->arg(), target);
  }

  // optional string args = 5;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->args(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vipprivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 arg = 4;
    if (has_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arg());
    }

    // optional string args = 5;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vipprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vipprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vipprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vipprivilege::MergeFrom(const vipprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_arg()) {
      set_arg(from.arg());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vipprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vipprivilege::CopyFrom(const vipprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vipprivilege::IsInitialized() const {

  return true;
}

void vipprivilege::Swap(vipprivilege* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_, other->group_);
    std::swap(type_, other->type_);
    std::swap(arg_, other->arg_);
    std::swap(args_, other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vipprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vipprivilege_descriptor_;
  metadata.reflection = vipprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_vipprivilege::kVipprivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_vipprivilege::Sheet_vipprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_vipprivilege::InitAsDefaultInstance() {
}

Sheet_vipprivilege::Sheet_vipprivilege(const Sheet_vipprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_vipprivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_vipprivilege::~Sheet_vipprivilege() {
  SharedDtor();
}

void Sheet_vipprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_vipprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_vipprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_vipprivilege_descriptor_;
}

const Sheet_vipprivilege& Sheet_vipprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vip_2eproto();
  return *default_instance_;
}

Sheet_vipprivilege* Sheet_vipprivilege::default_instance_ = NULL;

Sheet_vipprivilege* Sheet_vipprivilege::New() const {
  return new Sheet_vipprivilege;
}

void Sheet_vipprivilege::Clear() {
  vipprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_vipprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipprivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipprivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_vipprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vipprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_vipprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->vipprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_vipprivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.vipprivilege vipprivilege_List = 1;
  total_size += 1 * this->vipprivilege_list_size();
  for (int i = 0; i < this->vipprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_vipprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_vipprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_vipprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_vipprivilege::MergeFrom(const Sheet_vipprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipprivilege_list_.MergeFrom(from.vipprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_vipprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_vipprivilege::CopyFrom(const Sheet_vipprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_vipprivilege::IsInitialized() const {

  return true;
}

void Sheet_vipprivilege::Swap(Sheet_vipprivilege* other) {
  if (other != this) {
    vipprivilege_list_.Swap(&other->vipprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_vipprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_vipprivilege_descriptor_;
  metadata.reflection = Sheet_vipprivilege_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
