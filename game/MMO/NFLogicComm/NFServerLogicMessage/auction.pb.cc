// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auction.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "auction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* auctionacquisition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auctionacquisition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_auctionacquisition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_auctionacquisition_reflection_ = NULL;
const ::google::protobuf::Descriptor* auctionpurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  auctionpurchase_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_auctionpurchase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_auctionpurchase_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_auction_2eproto() {
  protobuf_AddDesc_auction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "auction.proto");
  GOOGLE_CHECK(file != NULL);
  auctionacquisition_descriptor_ = file->message_type(0);
  static const int auctionacquisition_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, num_),
  };
  auctionacquisition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auctionacquisition_descriptor_,
      auctionacquisition::default_instance_,
      auctionacquisition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionacquisition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auctionacquisition));
  Sheet_auctionacquisition_descriptor_ = file->message_type(1);
  static const int Sheet_auctionacquisition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionacquisition, auctionacquisition_list_),
  };
  Sheet_auctionacquisition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_auctionacquisition_descriptor_,
      Sheet_auctionacquisition::default_instance_,
      Sheet_auctionacquisition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionacquisition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionacquisition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_auctionacquisition));
  auctionpurchase_descriptor_ = file->message_type(2);
  static const int auctionpurchase_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, subtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, itemid_),
  };
  auctionpurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      auctionpurchase_descriptor_,
      auctionpurchase::default_instance_,
      auctionpurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(auctionpurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(auctionpurchase));
  Sheet_auctionpurchase_descriptor_ = file->message_type(3);
  static const int Sheet_auctionpurchase_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionpurchase, auctionpurchase_list_),
  };
  Sheet_auctionpurchase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_auctionpurchase_descriptor_,
      Sheet_auctionpurchase::default_instance_,
      Sheet_auctionpurchase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionpurchase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_auctionpurchase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_auctionpurchase));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_auction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auctionacquisition_descriptor_, &auctionacquisition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_auctionacquisition_descriptor_, &Sheet_auctionacquisition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    auctionpurchase_descriptor_, &auctionpurchase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_auctionpurchase_descriptor_, &Sheet_auctionpurchase::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_auction_2eproto() {
  delete auctionacquisition::default_instance_;
  delete auctionacquisition_reflection_;
  delete Sheet_auctionacquisition::default_instance_;
  delete Sheet_auctionacquisition_reflection_;
  delete auctionpurchase::default_instance_;
  delete auctionpurchase_reflection_;
  delete Sheet_auctionpurchase::default_instance_;
  delete Sheet_auctionpurchase_reflection_;
}

void protobuf_AddDesc_auction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rauction.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\277\001\n\022auctionacquisition\022\026\n\002Id\030\001 "
    "\001(\003B\n\302\377\024\006\345\272\217\345\217\267\022\036\n\nprofession\030\002 \001(\005B\n\302\377\024"
    "\006\345\210\206\347\261\273\022\034\n\010position\030\003 \001(\005B\n\302\377\024\006\345\255\220\347\261\273\022\034\n"
    "\004name\030\004 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024 \022\034\n\004icon\030\005 \001("
    "\tB\016\302\377\024\006\345\233\276\346\240\207\220\301\024 \022\027\n\003num\030\006 \001(\005B\n\302\377\024\006\346\225\260\351"
    "\207\217\"`\n\030Sheet_auctionacquisition\022D\n\027auctio"
    "nacquisition_List\030\001 \003(\0132\034.proto_ff.aucti"
    "onacquisitionB\005\210\301\024\242\001\"\310\001\n\017auctionpurchase"
    "\022\026\n\002Id\030\001 \001(\003B\n\302\377\024\006\345\272\217\345\217\267\022\030\n\004type\030\002 \001(\005B\n"
    "\302\377\024\006\345\210\206\347\261\273\022\033\n\007subType\030\003 \001(\005B\n\302\377\024\006\345\255\220\347\261\273\022"
    "\034\n\004name\030\004 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024 \022&\n\010itemNam"
    "e\030\005 \001(\tB\024\302\377\024\014\351\201\223\345\205\267\345\220\215\347\247\260\220\301\024 \022 \n\006itemId\030"
    "\006 \001(\tB\020\302\377\024\010\351\201\223\345\205\267ID\220\301\024#\"W\n\025Sheet_auction"
    "purchase\022>\n\024auctionpurchase_List\030\001 \003(\0132\031"
    ".proto_ff.auctionpurchaseB\005\210\301\024\374\n", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "auction.proto", &protobuf_RegisterTypes);
  auctionacquisition::default_instance_ = new auctionacquisition();
  Sheet_auctionacquisition::default_instance_ = new Sheet_auctionacquisition();
  auctionpurchase::default_instance_ = new auctionpurchase();
  Sheet_auctionpurchase::default_instance_ = new Sheet_auctionpurchase();
  auctionacquisition::default_instance_->InitAsDefaultInstance();
  Sheet_auctionacquisition::default_instance_->InitAsDefaultInstance();
  auctionpurchase::default_instance_->InitAsDefaultInstance();
  Sheet_auctionpurchase::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_auction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_auction_2eproto {
  StaticDescriptorInitializer_auction_2eproto() {
    protobuf_AddDesc_auction_2eproto();
  }
} static_descriptor_initializer_auction_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int auctionacquisition::kIdFieldNumber;
const int auctionacquisition::kProfessionFieldNumber;
const int auctionacquisition::kPositionFieldNumber;
const int auctionacquisition::kNameFieldNumber;
const int auctionacquisition::kIconFieldNumber;
const int auctionacquisition::kNumFieldNumber;
#endif  // !_MSC_VER

auctionacquisition::auctionacquisition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auctionacquisition::InitAsDefaultInstance() {
}

auctionacquisition::auctionacquisition(const auctionacquisition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auctionacquisition::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  profession_ = 0;
  position_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auctionacquisition::~auctionacquisition() {
  SharedDtor();
}

void auctionacquisition::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void auctionacquisition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auctionacquisition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auctionacquisition_descriptor_;
}

const auctionacquisition& auctionacquisition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

auctionacquisition* auctionacquisition::default_instance_ = NULL;

auctionacquisition* auctionacquisition::New() const {
  return new auctionacquisition;
}

void auctionacquisition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    profession_ = 0;
    position_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auctionacquisition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional int32 profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional int32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_icon;
        break;
      }

      // optional string icon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auctionacquisition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->profession(), output);
  }

  // optional int32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->position(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auctionacquisition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->profession(), target);
  }

  // optional int32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->position(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string icon = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->icon(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auctionacquisition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string icon = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auctionacquisition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auctionacquisition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auctionacquisition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auctionacquisition::MergeFrom(const auctionacquisition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auctionacquisition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auctionacquisition::CopyFrom(const auctionacquisition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auctionacquisition::IsInitialized() const {

  return true;
}

void auctionacquisition::Swap(auctionacquisition* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(profession_, other->profession_);
    std::swap(position_, other->position_);
    std::swap(name_, other->name_);
    std::swap(icon_, other->icon_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auctionacquisition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auctionacquisition_descriptor_;
  metadata.reflection = auctionacquisition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_auctionacquisition::kAuctionacquisitionListFieldNumber;
#endif  // !_MSC_VER

Sheet_auctionacquisition::Sheet_auctionacquisition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_auctionacquisition::InitAsDefaultInstance() {
}

Sheet_auctionacquisition::Sheet_auctionacquisition(const Sheet_auctionacquisition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_auctionacquisition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_auctionacquisition::~Sheet_auctionacquisition() {
  SharedDtor();
}

void Sheet_auctionacquisition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_auctionacquisition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_auctionacquisition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_auctionacquisition_descriptor_;
}

const Sheet_auctionacquisition& Sheet_auctionacquisition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Sheet_auctionacquisition* Sheet_auctionacquisition::default_instance_ = NULL;

Sheet_auctionacquisition* Sheet_auctionacquisition::New() const {
  return new Sheet_auctionacquisition;
}

void Sheet_auctionacquisition::Clear() {
  auctionacquisition_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_auctionacquisition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auctionacquisition_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auctionacquisition_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_auctionacquisition_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_auctionacquisition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
  for (int i = 0; i < this->auctionacquisition_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->auctionacquisition_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_auctionacquisition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
  for (int i = 0; i < this->auctionacquisition_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->auctionacquisition_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_auctionacquisition::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.auctionacquisition auctionacquisition_List = 1;
  total_size += 1 * this->auctionacquisition_list_size();
  for (int i = 0; i < this->auctionacquisition_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auctionacquisition_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_auctionacquisition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_auctionacquisition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_auctionacquisition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_auctionacquisition::MergeFrom(const Sheet_auctionacquisition& from) {
  GOOGLE_CHECK_NE(&from, this);
  auctionacquisition_list_.MergeFrom(from.auctionacquisition_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_auctionacquisition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_auctionacquisition::CopyFrom(const Sheet_auctionacquisition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_auctionacquisition::IsInitialized() const {

  return true;
}

void Sheet_auctionacquisition::Swap(Sheet_auctionacquisition* other) {
  if (other != this) {
    auctionacquisition_list_.Swap(&other->auctionacquisition_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_auctionacquisition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_auctionacquisition_descriptor_;
  metadata.reflection = Sheet_auctionacquisition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int auctionpurchase::kIdFieldNumber;
const int auctionpurchase::kTypeFieldNumber;
const int auctionpurchase::kSubTypeFieldNumber;
const int auctionpurchase::kNameFieldNumber;
const int auctionpurchase::kItemNameFieldNumber;
const int auctionpurchase::kItemIdFieldNumber;
#endif  // !_MSC_VER

auctionpurchase::auctionpurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void auctionpurchase::InitAsDefaultInstance() {
}

auctionpurchase::auctionpurchase(const auctionpurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void auctionpurchase::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  subtype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

auctionpurchase::~auctionpurchase() {
  SharedDtor();
}

void auctionpurchase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete itemid_;
  }
  if (this != default_instance_) {
  }
}

void auctionpurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* auctionpurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return auctionpurchase_descriptor_;
}

const auctionpurchase& auctionpurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

auctionpurchase* auctionpurchase::default_instance_ = NULL;

auctionpurchase* auctionpurchase::New() const {
  return new auctionpurchase;
}

void auctionpurchase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    subtype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    if (has_itemid()) {
      if (itemid_ != &::google::protobuf::internal::kEmptyString) {
        itemid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool auctionpurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subType;
        break;
      }

      // optional int32 subType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subtype_)));
          set_has_subtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemName;
        break;
      }

      // optional string itemName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_itemId;
        break;
      }

      // optional string itemId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemid().data(), this->itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void auctionpurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 subType = 3;
  if (has_subtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subtype(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional string itemName = 5;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->itemname(), output);
  }

  // optional string itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* auctionpurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 subType = 3;
  if (has_subtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subtype(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string itemName = 5;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->itemname(), target);
  }

  // optional string itemId = 6;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemid().data(), this->itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int auctionpurchase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 subType = 3;
    if (has_subtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subtype());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string itemName = 5;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional string itemId = 6;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void auctionpurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const auctionpurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const auctionpurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void auctionpurchase::MergeFrom(const auctionpurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtype()) {
      set_subtype(from.subtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void auctionpurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void auctionpurchase::CopyFrom(const auctionpurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool auctionpurchase::IsInitialized() const {

  return true;
}

void auctionpurchase::Swap(auctionpurchase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(subtype_, other->subtype_);
    std::swap(name_, other->name_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata auctionpurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = auctionpurchase_descriptor_;
  metadata.reflection = auctionpurchase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_auctionpurchase::kAuctionpurchaseListFieldNumber;
#endif  // !_MSC_VER

Sheet_auctionpurchase::Sheet_auctionpurchase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_auctionpurchase::InitAsDefaultInstance() {
}

Sheet_auctionpurchase::Sheet_auctionpurchase(const Sheet_auctionpurchase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_auctionpurchase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_auctionpurchase::~Sheet_auctionpurchase() {
  SharedDtor();
}

void Sheet_auctionpurchase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_auctionpurchase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_auctionpurchase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_auctionpurchase_descriptor_;
}

const Sheet_auctionpurchase& Sheet_auctionpurchase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_auction_2eproto();
  return *default_instance_;
}

Sheet_auctionpurchase* Sheet_auctionpurchase::default_instance_ = NULL;

Sheet_auctionpurchase* Sheet_auctionpurchase::New() const {
  return new Sheet_auctionpurchase;
}

void Sheet_auctionpurchase::Clear() {
  auctionpurchase_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_auctionpurchase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_auctionpurchase_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_auctionpurchase_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_auctionpurchase_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_auctionpurchase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
  for (int i = 0; i < this->auctionpurchase_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->auctionpurchase_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_auctionpurchase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
  for (int i = 0; i < this->auctionpurchase_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->auctionpurchase_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_auctionpurchase::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.auctionpurchase auctionpurchase_List = 1;
  total_size += 1 * this->auctionpurchase_list_size();
  for (int i = 0; i < this->auctionpurchase_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->auctionpurchase_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_auctionpurchase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_auctionpurchase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_auctionpurchase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_auctionpurchase::MergeFrom(const Sheet_auctionpurchase& from) {
  GOOGLE_CHECK_NE(&from, this);
  auctionpurchase_list_.MergeFrom(from.auctionpurchase_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_auctionpurchase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_auctionpurchase::CopyFrom(const Sheet_auctionpurchase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_auctionpurchase::IsInitialized() const {

  return true;
}

void Sheet_auctionpurchase::Swap(Sheet_auctionpurchase* other) {
  if (other != this) {
    auctionpurchase_list_.Swap(&other->auctionpurchase_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_auctionpurchase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_auctionpurchase_descriptor_;
  metadata.reflection = Sheet_auctionpurchase_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
