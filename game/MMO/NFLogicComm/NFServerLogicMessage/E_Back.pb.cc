// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Back.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Back.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_BackBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_BackBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_BackBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_BackBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fBack_2eproto() {
  protobuf_AddDesc_E_5fBack_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Back.proto");
  GOOGLE_CHECK(file != NULL);
  E_BackBack_descriptor_ = file->message_type(0);
  static const int E_BackBack_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_typeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_functionunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_pboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_backday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_costitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_pcostitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_pcostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_acostitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_acostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, m_param_),
  };
  E_BackBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_BackBack_descriptor_,
      E_BackBack::default_instance_,
      E_BackBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_BackBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_BackBack));
  Sheet_BackBack_descriptor_ = file->message_type(1);
  static const int Sheet_BackBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BackBack, e_backback_list_),
  };
  Sheet_BackBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_BackBack_descriptor_,
      Sheet_BackBack::default_instance_,
      Sheet_BackBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BackBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_BackBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_BackBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fBack_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_BackBack_descriptor_, &E_BackBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_BackBack_descriptor_, &Sheet_BackBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fBack_2eproto() {
  delete E_BackBack::default_instance_;
  delete E_BackBack_reflection_;
  delete Sheet_BackBack::default_instance_;
  delete Sheet_BackBack_reflection_;
}

void protobuf_AddDesc_E_5fBack_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014E_Back.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"\324\005\n\nE_BackBack\022\032\n\004m_id\030\001 \001(\005B\014\302\377"
    "\024\010\345\224\257\344\270\200id\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\346\211\276\345\233\236\347\261"
    "\273\345\236\213\022%\n\013m_typeparam\030\003 \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345\217\202"
    "\346\225\260\022$\n\006m_name\030\004 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\345\220\215\347\247\260\220\301\024"
    "@\022\030\n\007m_group\030\005 \001(\005B\007\302\377\024\003\347\273\204\0220\n\020m_functio"
    "nunlock\030\006 \001(\005B\026\302\377\024\022\345\205\263\350\201\224\345\212\237\350\203\275\345\274\200\346\224\276\022,\n"
    "\014m_levellimit\030\007 \001(\005B\026\302\377\024\022\347\255\211\347\272\247\350\246\201\346\261\202\344\270\213"
    "\351\231\220\022+\n\010m_pboxid\030\010 \001(\003B\031\302\377\024\025\345\256\214\347\276\216\346\211\276\345\233\236\347"
    "\211\251\345\223\201box\022$\n\007m_boxid\030\t \001(\003B\023\302\377\024\017\346\211\276\345\233\236\347\211\251"
    "\345\223\201box\022#\n\tm_backday\030\n \001(\005B\020\302\377\024\014\346\211\276\345\233\236\345\244\251"
    "\346\225\260\022/\n\014m_costitemid\030\013 \001(\005B\031\302\377\024\025\346\231\256\351\200\232\346\211\276"
    "\345\233\236\346\266\210\350\200\227\347\211\251\022/\n\tm_costnum\030\014 \001(\005B\034\302\377\024\030\346\231\256"
    "\351\200\232\346\211\276\345\233\236\346\266\210\350\200\227\346\225\260\351\207\217\0220\n\rm_pcostitemid\030\r"
    " \001(\005B\031\302\377\024\025\345\256\214\347\276\216\346\211\276\345\233\236\346\266\210\350\200\227\347\211\251\0220\n\nm_pco"
    "stnum\030\016 \001(\005B\034\302\377\024\030\345\256\214\347\276\216\346\211\276\345\233\236\346\266\210\350\200\227\346\225\260\351\207"
    "\217\0220\n\rm_acostitemid\030\017 \001(\005B\031\302\377\024\025\351\242\235\345\244\226\346\211\276\345"
    "\233\236\346\266\210\350\200\227\347\211\251\0220\n\nm_acostnum\030\020 \001(\005B\034\302\377\024\030\351\242\235"
    "\345\244\226\346\211\276\345\233\236\345\260\217\345\217\267\346\225\260\351\207\217\022\037\n\007m_param\030\021 \003(\005B\016"
    "\302\377\024\006\345\217\202\346\225\260\210\301\024\002\"E\n\016Sheet_BackBack\0223\n\017E_Ba"
    "ckBack_List\030\001 \003(\0132\024.proto_ff.E_BackBackB"
    "\004\210\301\024@", 845);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Back.proto", &protobuf_RegisterTypes);
  E_BackBack::default_instance_ = new E_BackBack();
  Sheet_BackBack::default_instance_ = new Sheet_BackBack();
  E_BackBack::default_instance_->InitAsDefaultInstance();
  Sheet_BackBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fBack_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fBack_2eproto {
  StaticDescriptorInitializer_E_5fBack_2eproto() {
    protobuf_AddDesc_E_5fBack_2eproto();
  }
} static_descriptor_initializer_E_5fBack_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_BackBack::kMIdFieldNumber;
const int E_BackBack::kMTypeFieldNumber;
const int E_BackBack::kMTypeparamFieldNumber;
const int E_BackBack::kMNameFieldNumber;
const int E_BackBack::kMGroupFieldNumber;
const int E_BackBack::kMFunctionunlockFieldNumber;
const int E_BackBack::kMLevellimitFieldNumber;
const int E_BackBack::kMPboxidFieldNumber;
const int E_BackBack::kMBoxidFieldNumber;
const int E_BackBack::kMBackdayFieldNumber;
const int E_BackBack::kMCostitemidFieldNumber;
const int E_BackBack::kMCostnumFieldNumber;
const int E_BackBack::kMPcostitemidFieldNumber;
const int E_BackBack::kMPcostnumFieldNumber;
const int E_BackBack::kMAcostitemidFieldNumber;
const int E_BackBack::kMAcostnumFieldNumber;
const int E_BackBack::kMParamFieldNumber;
#endif  // !_MSC_VER

E_BackBack::E_BackBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_BackBack::InitAsDefaultInstance() {
}

E_BackBack::E_BackBack(const E_BackBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_BackBack::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_typeparam_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_group_ = 0;
  m_functionunlock_ = 0;
  m_levellimit_ = 0;
  m_pboxid_ = GOOGLE_LONGLONG(0);
  m_boxid_ = GOOGLE_LONGLONG(0);
  m_backday_ = 0;
  m_costitemid_ = 0;
  m_costnum_ = 0;
  m_pcostitemid_ = 0;
  m_pcostnum_ = 0;
  m_acostitemid_ = 0;
  m_acostnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_BackBack::~E_BackBack() {
  SharedDtor();
}

void E_BackBack::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_BackBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_BackBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_BackBack_descriptor_;
}

const E_BackBack& E_BackBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBack_2eproto();
  return *default_instance_;
}

E_BackBack* E_BackBack::default_instance_ = NULL;

E_BackBack* E_BackBack::New() const {
  return new E_BackBack;
}

void E_BackBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_typeparam_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_group_ = 0;
    m_functionunlock_ = 0;
    m_levellimit_ = 0;
    m_pboxid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_boxid_ = GOOGLE_LONGLONG(0);
    m_backday_ = 0;
    m_costitemid_ = 0;
    m_costnum_ = 0;
    m_pcostitemid_ = 0;
    m_pcostnum_ = 0;
    m_acostitemid_ = 0;
    m_acostnum_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_BackBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_typeparam;
        break;
      }

      // optional int32 m_typeparam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeparam_)));
          set_has_m_typeparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_name;
        break;
      }

      // optional string m_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_group;
        break;
      }

      // optional int32 m_group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_group_)));
          set_has_m_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_functionunlock;
        break;
      }

      // optional int32 m_functionunlock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionunlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionunlock_)));
          set_has_m_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_levellimit;
        break;
      }

      // optional int32 m_levellimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_levellimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_levellimit_)));
          set_has_m_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_pboxid;
        break;
      }

      // optional int64 m_pboxid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_pboxid_)));
          set_has_m_pboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_boxid;
        break;
      }

      // optional int64 m_boxid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_backday;
        break;
      }

      // optional int32 m_backday = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_backday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_backday_)));
          set_has_m_backday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_costitemid;
        break;
      }

      // optional int32 m_costitemid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitemid_)));
          set_has_m_costitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_costnum;
        break;
      }

      // optional int32 m_costnum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_pcostitemid;
        break;
      }

      // optional int32 m_pcostitemid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pcostitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pcostitemid_)));
          set_has_m_pcostitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_pcostnum;
        break;
      }

      // optional int32 m_pcostnum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pcostnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pcostnum_)));
          set_has_m_pcostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_acostitemid;
        break;
      }

      // optional int32 m_acostitemid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_acostitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_acostitemid_)));
          set_has_m_acostitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_acostnum;
        break;
      }

      // optional int32 m_acostnum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_acostnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_acostnum_)));
          set_has_m_acostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_BackBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_typeparam = 3;
  if (has_m_typeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_typeparam(), output);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_name(), output);
  }

  // optional int32 m_group = 5;
  if (has_m_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_group(), output);
  }

  // optional int32 m_functionunlock = 6;
  if (has_m_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_functionunlock(), output);
  }

  // optional int32 m_levellimit = 7;
  if (has_m_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_levellimit(), output);
  }

  // optional int64 m_pboxid = 8;
  if (has_m_pboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->m_pboxid(), output);
  }

  // optional int64 m_boxid = 9;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->m_boxid(), output);
  }

  // optional int32 m_backday = 10;
  if (has_m_backday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_backday(), output);
  }

  // optional int32 m_costitemid = 11;
  if (has_m_costitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_costitemid(), output);
  }

  // optional int32 m_costnum = 12;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_costnum(), output);
  }

  // optional int32 m_pcostitemid = 13;
  if (has_m_pcostitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_pcostitemid(), output);
  }

  // optional int32 m_pcostnum = 14;
  if (has_m_pcostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_pcostnum(), output);
  }

  // optional int32 m_acostitemid = 15;
  if (has_m_acostitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_acostitemid(), output);
  }

  // optional int32 m_acostnum = 16;
  if (has_m_acostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_acostnum(), output);
  }

  // repeated int32 m_param = 17;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_BackBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_typeparam = 3;
  if (has_m_typeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_typeparam(), target);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_name(), target);
  }

  // optional int32 m_group = 5;
  if (has_m_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_group(), target);
  }

  // optional int32 m_functionunlock = 6;
  if (has_m_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_functionunlock(), target);
  }

  // optional int32 m_levellimit = 7;
  if (has_m_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_levellimit(), target);
  }

  // optional int64 m_pboxid = 8;
  if (has_m_pboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->m_pboxid(), target);
  }

  // optional int64 m_boxid = 9;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->m_boxid(), target);
  }

  // optional int32 m_backday = 10;
  if (has_m_backday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_backday(), target);
  }

  // optional int32 m_costitemid = 11;
  if (has_m_costitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_costitemid(), target);
  }

  // optional int32 m_costnum = 12;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_costnum(), target);
  }

  // optional int32 m_pcostitemid = 13;
  if (has_m_pcostitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_pcostitemid(), target);
  }

  // optional int32 m_pcostnum = 14;
  if (has_m_pcostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_pcostnum(), target);
  }

  // optional int32 m_acostitemid = 15;
  if (has_m_acostitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_acostitemid(), target);
  }

  // optional int32 m_acostnum = 16;
  if (has_m_acostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_acostnum(), target);
  }

  // repeated int32 m_param = 17;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_BackBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_typeparam = 3;
    if (has_m_typeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeparam());
    }

    // optional string m_name = 4;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_group = 5;
    if (has_m_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_group());
    }

    // optional int32 m_functionunlock = 6;
    if (has_m_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionunlock());
    }

    // optional int32 m_levellimit = 7;
    if (has_m_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_levellimit());
    }

    // optional int64 m_pboxid = 8;
    if (has_m_pboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_pboxid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 m_boxid = 9;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_boxid());
    }

    // optional int32 m_backday = 10;
    if (has_m_backday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_backday());
    }

    // optional int32 m_costitemid = 11;
    if (has_m_costitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitemid());
    }

    // optional int32 m_costnum = 12;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

    // optional int32 m_pcostitemid = 13;
    if (has_m_pcostitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pcostitemid());
    }

    // optional int32 m_pcostnum = 14;
    if (has_m_pcostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pcostnum());
    }

    // optional int32 m_acostitemid = 15;
    if (has_m_acostitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_acostitemid());
    }

    // optional int32 m_acostnum = 16;
    if (has_m_acostnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_acostnum());
    }

  }
  // repeated int32 m_param = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 2 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_BackBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_BackBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_BackBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_BackBack::MergeFrom(const E_BackBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_typeparam()) {
      set_m_typeparam(from.m_typeparam());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_group()) {
      set_m_group(from.m_group());
    }
    if (from.has_m_functionunlock()) {
      set_m_functionunlock(from.m_functionunlock());
    }
    if (from.has_m_levellimit()) {
      set_m_levellimit(from.m_levellimit());
    }
    if (from.has_m_pboxid()) {
      set_m_pboxid(from.m_pboxid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
    if (from.has_m_backday()) {
      set_m_backday(from.m_backday());
    }
    if (from.has_m_costitemid()) {
      set_m_costitemid(from.m_costitemid());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
    if (from.has_m_pcostitemid()) {
      set_m_pcostitemid(from.m_pcostitemid());
    }
    if (from.has_m_pcostnum()) {
      set_m_pcostnum(from.m_pcostnum());
    }
    if (from.has_m_acostitemid()) {
      set_m_acostitemid(from.m_acostitemid());
    }
    if (from.has_m_acostnum()) {
      set_m_acostnum(from.m_acostnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_BackBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_BackBack::CopyFrom(const E_BackBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_BackBack::IsInitialized() const {

  return true;
}

void E_BackBack::Swap(E_BackBack* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_typeparam_, other->m_typeparam_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_group_, other->m_group_);
    std::swap(m_functionunlock_, other->m_functionunlock_);
    std::swap(m_levellimit_, other->m_levellimit_);
    std::swap(m_pboxid_, other->m_pboxid_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(m_backday_, other->m_backday_);
    std::swap(m_costitemid_, other->m_costitemid_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(m_pcostitemid_, other->m_pcostitemid_);
    std::swap(m_pcostnum_, other->m_pcostnum_);
    std::swap(m_acostitemid_, other->m_acostitemid_);
    std::swap(m_acostnum_, other->m_acostnum_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_BackBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_BackBack_descriptor_;
  metadata.reflection = E_BackBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_BackBack::kEBackBackListFieldNumber;
#endif  // !_MSC_VER

Sheet_BackBack::Sheet_BackBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_BackBack::InitAsDefaultInstance() {
}

Sheet_BackBack::Sheet_BackBack(const Sheet_BackBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_BackBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_BackBack::~Sheet_BackBack() {
  SharedDtor();
}

void Sheet_BackBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_BackBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_BackBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_BackBack_descriptor_;
}

const Sheet_BackBack& Sheet_BackBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fBack_2eproto();
  return *default_instance_;
}

Sheet_BackBack* Sheet_BackBack::default_instance_ = NULL;

Sheet_BackBack* Sheet_BackBack::New() const {
  return new Sheet_BackBack;
}

void Sheet_BackBack::Clear() {
  e_backback_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_BackBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_BackBack E_BackBack_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_BackBack_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_backback_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_BackBack_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_BackBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_BackBack E_BackBack_List = 1;
  for (int i = 0; i < this->e_backback_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_backback_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_BackBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_BackBack E_BackBack_List = 1;
  for (int i = 0; i < this->e_backback_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_backback_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_BackBack::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_BackBack E_BackBack_List = 1;
  total_size += 1 * this->e_backback_list_size();
  for (int i = 0; i < this->e_backback_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_backback_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_BackBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_BackBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_BackBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_BackBack::MergeFrom(const Sheet_BackBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_backback_list_.MergeFrom(from.e_backback_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_BackBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_BackBack::CopyFrom(const Sheet_BackBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_BackBack::IsInitialized() const {

  return true;
}

void Sheet_BackBack::Swap(Sheet_BackBack* other) {
  if (other != this) {
    e_backback_list_.Swap(&other->e_backback_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_BackBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_BackBack_descriptor_;
  metadata.reflection = Sheet_BackBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
