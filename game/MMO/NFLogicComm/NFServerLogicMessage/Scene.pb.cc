// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CreateSceneParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateSceneParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTransParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTransParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureTransParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureTransParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLoadMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLoadMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadMapFinishReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadMapFinishReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CorpseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CorpseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySceneCorpseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySceneCorpseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifySceneDriveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifySceneDriveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterCreateSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterCreateSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterCreateSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterCreateSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCAddNewScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCAddNewScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCDelScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCDelScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyLogicSceneClose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyLogicSceneClose_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogicCreatureTransSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogicCreatureTransSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterCreatureTransSceneResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterCreatureTransSceneResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterCreatureTransSceneSuccessRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterCreatureTransSceneSuccessRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleEnterScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleEnterScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleChgLogic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleChgLogic_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_NewSceneReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_NewSceneReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_NewSceneRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_NewSceneRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_MainCityInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_MainCityInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_MainCityInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_MainCityInfoRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CL_MainCityInfoRsp_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CSGenSceneIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGenSceneIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGenSceneIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGenSceneIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSNtLSCreateScene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSNtLSCreateScene_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSRegToCenterServer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSRegToCenterServer_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSDestroyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSDestroyReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Scene_2eproto() {
  protobuf_AddDesc_Scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Scene.proto");
  GOOGLE_CHECK(file != NULL);
  CreateSceneParamProto_descriptor_ = file->message_type(0);
  static const int CreateSceneParamProto_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, param_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, dup_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, key_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, alive_time_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, mergenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, marry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, cur_hp_),
  };
  CreateSceneParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateSceneParamProto_descriptor_,
      CreateSceneParamProto::default_instance_,
      CreateSceneParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSceneParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateSceneParamProto));
  PlayerTransParam_descriptor_ = file->message_type(1);
  static const int PlayerTransParam_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, last_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, last_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, channid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, sync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, last_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, head_flag_),
  };
  PlayerTransParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTransParam_descriptor_,
      PlayerTransParam::default_instance_,
      PlayerTransParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTransParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTransParam));
  CreatureTransParam_descriptor_ = file->message_type(2);
  static const int CreatureTransParam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, player_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, trans_param_),
  };
  CreatureTransParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureTransParam_descriptor_,
      CreatureTransParam::default_instance_,
      CreatureTransParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureTransParam));
  NotifyLoadMap_descriptor_ = file->message_type(3);
  static const int NotifyLoadMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, zid_),
  };
  NotifyLoadMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLoadMap_descriptor_,
      NotifyLoadMap::default_instance_,
      NotifyLoadMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLoadMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLoadMap));
  TransSceneReq_descriptor_ = file->message_type(4);
  static const int TransSceneReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, dst_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, id_),
  };
  TransSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransSceneReq_descriptor_,
      TransSceneReq::default_instance_,
      TransSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransSceneReq));
  TransSceneRsp_descriptor_ = file->message_type(5);
  static const int TransSceneRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRsp, mapid_),
  };
  TransSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransSceneRsp_descriptor_,
      TransSceneRsp::default_instance_,
      TransSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransSceneRsp));
  LoadMapFinishReq_descriptor_ = file->message_type(6);
  static const int LoadMapFinishReq_offsets_[1] = {
  };
  LoadMapFinishReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadMapFinishReq_descriptor_,
      LoadMapFinishReq::default_instance_,
      LoadMapFinishReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadMapFinishReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadMapFinishReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadMapFinishReq));
  CorpseInfo_descriptor_ = file->message_type(7);
  static const int CorpseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, alivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, cid_),
  };
  CorpseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CorpseInfo_descriptor_,
      CorpseInfo::default_instance_,
      CorpseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CorpseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CorpseInfo));
  NotifySceneCorpseInfoRsp_descriptor_ = file->message_type(8);
  static const int NotifySceneCorpseInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneCorpseInfoRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneCorpseInfoRsp, infos_),
  };
  NotifySceneCorpseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySceneCorpseInfoRsp_descriptor_,
      NotifySceneCorpseInfoRsp::default_instance_,
      NotifySceneCorpseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneCorpseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneCorpseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySceneCorpseInfoRsp));
  NotifySceneDriveRsp_descriptor_ = file->message_type(9);
  static const int NotifySceneDriveRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneDriveRsp, curdrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneDriveRsp, maxdrive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneDriveRsp, drivetime_),
  };
  NotifySceneDriveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifySceneDriveRsp_descriptor_,
      NotifySceneDriveRsp::default_instance_,
      NotifySceneDriveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneDriveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifySceneDriveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifySceneDriveRsp));
  CenterCreateSceneReq_descriptor_ = file->message_type(10);
  static const int CenterCreateSceneReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneReq, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneReq, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneReq, param_),
  };
  CenterCreateSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterCreateSceneReq_descriptor_,
      CenterCreateSceneReq::default_instance_,
      CenterCreateSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterCreateSceneReq));
  CenterCreateSceneRsp_descriptor_ = file->message_type(11);
  static const int CenterCreateSceneRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneRsp, info_),
  };
  CenterCreateSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterCreateSceneRsp_descriptor_,
      CenterCreateSceneRsp::default_instance_,
      CenterCreateSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreateSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterCreateSceneRsp));
  SCAddNewScene_descriptor_ = file->message_type(12);
  static const int SCAddNewScene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAddNewScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAddNewScene, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAddNewScene, logicid_),
  };
  SCAddNewScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCAddNewScene_descriptor_,
      SCAddNewScene::default_instance_,
      SCAddNewScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAddNewScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCAddNewScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCAddNewScene));
  SCDelScene_descriptor_ = file->message_type(13);
  static const int SCDelScene_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDelScene, sceneid_),
  };
  SCDelScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCDelScene_descriptor_,
      SCDelScene::default_instance_,
      SCDelScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDelScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCDelScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCDelScene));
  NotifyLogicSceneClose_descriptor_ = file->message_type(14);
  static const int NotifyLogicSceneClose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicSceneClose, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicSceneClose, mapid_),
  };
  NotifyLogicSceneClose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyLogicSceneClose_descriptor_,
      NotifyLogicSceneClose::default_instance_,
      NotifyLogicSceneClose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicSceneClose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyLogicSceneClose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyLogicSceneClose));
  LogicCreatureTransSceneReq_descriptor_ = file->message_type(15);
  static const int LogicCreatureTransSceneReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, cursceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, dstsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, srclogicid_),
  };
  LogicCreatureTransSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogicCreatureTransSceneReq_descriptor_,
      LogicCreatureTransSceneReq::default_instance_,
      LogicCreatureTransSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogicCreatureTransSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogicCreatureTransSceneReq));
  CenterCreatureTransSceneResultRsp_descriptor_ = file->message_type(16);
  static const int CenterCreatureTransSceneResultRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, cur_sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, dst_sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, kind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, cid_),
  };
  CenterCreatureTransSceneResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterCreatureTransSceneResultRsp_descriptor_,
      CenterCreatureTransSceneResultRsp::default_instance_,
      CenterCreatureTransSceneResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterCreatureTransSceneResultRsp));
  CenterCreatureTransSceneSuccessRsp_descriptor_ = file->message_type(17);
  static const int CenterCreatureTransSceneSuccessRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, dst_sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, dst_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, dst_zid_),
  };
  CenterCreatureTransSceneSuccessRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterCreatureTransSceneSuccessRsp_descriptor_,
      CenterCreatureTransSceneSuccessRsp::default_instance_,
      CenterCreatureTransSceneSuccessRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterCreatureTransSceneSuccessRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterCreatureTransSceneSuccessRsp));
  NotifyRoleEnterScene_descriptor_ = file->message_type(18);
  static const int NotifyRoleEnterScene_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, scene_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, pos_),
  };
  NotifyRoleEnterScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleEnterScene_descriptor_,
      NotifyRoleEnterScene::default_instance_,
      NotifyRoleEnterScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleEnterScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleEnterScene));
  NotifyRoleChgLogic_descriptor_ = file->message_type(19);
  static const int NotifyRoleChgLogic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, logicid_),
  };
  NotifyRoleChgLogic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleChgLogic_descriptor_,
      NotifyRoleChgLogic::default_instance_,
      NotifyRoleChgLogic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleChgLogic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleChgLogic));
  LC_NewSceneReq_descriptor_ = file->message_type(20);
  static const int LC_NewSceneReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_NewSceneReq, count_),
  };
  LC_NewSceneReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_NewSceneReq_descriptor_,
      LC_NewSceneReq::default_instance_,
      LC_NewSceneReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_NewSceneReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_NewSceneReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_NewSceneReq));
  CL_NewSceneRsp_descriptor_ = file->message_type(21);
  static const int CL_NewSceneRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_NewSceneRsp, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_NewSceneRsp, sceneid_lst_),
  };
  CL_NewSceneRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_NewSceneRsp_descriptor_,
      CL_NewSceneRsp::default_instance_,
      CL_NewSceneRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_NewSceneRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_NewSceneRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_NewSceneRsp));
  LC_MainCityInfoReq_descriptor_ = file->message_type(22);
  static const int LC_MainCityInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_MainCityInfoReq, info_),
  };
  LC_MainCityInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_MainCityInfoReq_descriptor_,
      LC_MainCityInfoReq::default_instance_,
      LC_MainCityInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_MainCityInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_MainCityInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_MainCityInfoReq));
  CL_MainCityInfoRsp_descriptor_ = file->message_type(23);
  static const int CL_MainCityInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_MainCityInfoRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_MainCityInfoRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_MainCityInfoRsp, del_scene_),
  };
  CL_MainCityInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_MainCityInfoRsp_descriptor_,
      CL_MainCityInfoRsp::default_instance_,
      CL_MainCityInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_MainCityInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_MainCityInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_MainCityInfoRsp));
  CL_MainCityInfoRsp_Type_descriptor_ = CL_MainCityInfoRsp_descriptor_->enum_type(0);
  CSGenSceneIdReq_descriptor_ = file->message_type(24);
  static const int CSGenSceneIdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdReq, session_),
  };
  CSGenSceneIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGenSceneIdReq_descriptor_,
      CSGenSceneIdReq::default_instance_,
      CSGenSceneIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGenSceneIdReq));
  CSGenSceneIdRsp_descriptor_ = file->message_type(25);
  static const int CSGenSceneIdRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdRsp, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdRsp, sceneid_),
  };
  CSGenSceneIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGenSceneIdRsp_descriptor_,
      CSGenSceneIdRsp::default_instance_,
      CSGenSceneIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGenSceneIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGenSceneIdRsp));
  CSNtLSCreateScene_descriptor_ = file->message_type(26);
  static const int CSNtLSCreateScene_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, zid_),
  };
  CSNtLSCreateScene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSNtLSCreateScene_descriptor_,
      CSNtLSCreateScene::default_instance_,
      CSNtLSCreateScene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSNtLSCreateScene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSNtLSCreateScene));
  CSRegToCenterServer_descriptor_ = file->message_type(27);
  static const int CSRegToCenterServer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegToCenterServer, session_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegToCenterServer, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegToCenterServer, sceneid_),
  };
  CSRegToCenterServer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSRegToCenterServer_descriptor_,
      CSRegToCenterServer::default_instance_,
      CSRegToCenterServer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegToCenterServer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSRegToCenterServer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSRegToCenterServer));
  CSDestroyReq_descriptor_ = file->message_type(28);
  static const int CSDestroyReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDestroyReq, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDestroyReq, notifylogicserver_),
  };
  CSDestroyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSDestroyReq_descriptor_,
      CSDestroyReq::default_instance_,
      CSDestroyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDestroyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSDestroyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSDestroyReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateSceneParamProto_descriptor_, &CreateSceneParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTransParam_descriptor_, &PlayerTransParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureTransParam_descriptor_, &CreatureTransParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLoadMap_descriptor_, &NotifyLoadMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransSceneReq_descriptor_, &TransSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransSceneRsp_descriptor_, &TransSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadMapFinishReq_descriptor_, &LoadMapFinishReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CorpseInfo_descriptor_, &CorpseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySceneCorpseInfoRsp_descriptor_, &NotifySceneCorpseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifySceneDriveRsp_descriptor_, &NotifySceneDriveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterCreateSceneReq_descriptor_, &CenterCreateSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterCreateSceneRsp_descriptor_, &CenterCreateSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCAddNewScene_descriptor_, &SCAddNewScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCDelScene_descriptor_, &SCDelScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyLogicSceneClose_descriptor_, &NotifyLogicSceneClose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogicCreatureTransSceneReq_descriptor_, &LogicCreatureTransSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterCreatureTransSceneResultRsp_descriptor_, &CenterCreatureTransSceneResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterCreatureTransSceneSuccessRsp_descriptor_, &CenterCreatureTransSceneSuccessRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleEnterScene_descriptor_, &NotifyRoleEnterScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleChgLogic_descriptor_, &NotifyRoleChgLogic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_NewSceneReq_descriptor_, &LC_NewSceneReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_NewSceneRsp_descriptor_, &CL_NewSceneRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_MainCityInfoReq_descriptor_, &LC_MainCityInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_MainCityInfoRsp_descriptor_, &CL_MainCityInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGenSceneIdReq_descriptor_, &CSGenSceneIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGenSceneIdRsp_descriptor_, &CSGenSceneIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSNtLSCreateScene_descriptor_, &CSNtLSCreateScene::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSRegToCenterServer_descriptor_, &CSRegToCenterServer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSDestroyReq_descriptor_, &CSDestroyReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Scene_2eproto() {
  delete CreateSceneParamProto::default_instance_;
  delete CreateSceneParamProto_reflection_;
  delete PlayerTransParam::default_instance_;
  delete PlayerTransParam_reflection_;
  delete CreatureTransParam::default_instance_;
  delete CreatureTransParam_reflection_;
  delete NotifyLoadMap::default_instance_;
  delete NotifyLoadMap_reflection_;
  delete TransSceneReq::default_instance_;
  delete TransSceneReq_reflection_;
  delete TransSceneRsp::default_instance_;
  delete TransSceneRsp_reflection_;
  delete LoadMapFinishReq::default_instance_;
  delete LoadMapFinishReq_reflection_;
  delete CorpseInfo::default_instance_;
  delete CorpseInfo_reflection_;
  delete NotifySceneCorpseInfoRsp::default_instance_;
  delete NotifySceneCorpseInfoRsp_reflection_;
  delete NotifySceneDriveRsp::default_instance_;
  delete NotifySceneDriveRsp_reflection_;
  delete CenterCreateSceneReq::default_instance_;
  delete CenterCreateSceneReq_reflection_;
  delete CenterCreateSceneRsp::default_instance_;
  delete CenterCreateSceneRsp_reflection_;
  delete SCAddNewScene::default_instance_;
  delete SCAddNewScene_reflection_;
  delete SCDelScene::default_instance_;
  delete SCDelScene_reflection_;
  delete NotifyLogicSceneClose::default_instance_;
  delete NotifyLogicSceneClose_reflection_;
  delete LogicCreatureTransSceneReq::default_instance_;
  delete LogicCreatureTransSceneReq_reflection_;
  delete CenterCreatureTransSceneResultRsp::default_instance_;
  delete CenterCreatureTransSceneResultRsp_reflection_;
  delete CenterCreatureTransSceneSuccessRsp::default_instance_;
  delete CenterCreatureTransSceneSuccessRsp_reflection_;
  delete NotifyRoleEnterScene::default_instance_;
  delete NotifyRoleEnterScene_reflection_;
  delete NotifyRoleChgLogic::default_instance_;
  delete NotifyRoleChgLogic_reflection_;
  delete LC_NewSceneReq::default_instance_;
  delete LC_NewSceneReq_reflection_;
  delete CL_NewSceneRsp::default_instance_;
  delete CL_NewSceneRsp_reflection_;
  delete LC_MainCityInfoReq::default_instance_;
  delete LC_MainCityInfoReq_reflection_;
  delete CL_MainCityInfoRsp::default_instance_;
  delete CL_MainCityInfoRsp_reflection_;
  delete CSGenSceneIdReq::default_instance_;
  delete CSGenSceneIdReq_reflection_;
  delete CSGenSceneIdRsp::default_instance_;
  delete CSGenSceneIdRsp_reflection_;
  delete CSNtLSCreateScene::default_instance_;
  delete CSNtLSCreateScene_reflection_;
  delete CSRegToCenterServer::default_instance_;
  delete CSRegToCenterServer_reflection_;
  delete CSDestroyReq::default_instance_;
  delete CSDestroyReq_reflection_;
}

void protobuf_AddDesc_Scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Scene.proto\022\010proto_ff\032\tCom.proto\032\017ComD"
    "efine.proto\"\246\002\n\025CreateSceneParamProto\022\022\n"
    "\nparam_type\030\001 \002(\005\022\013\n\003zid\030\002 \002(\r\022\013\n\003cid\030\003 "
    "\001(\004\022\016\n\006dup_id\030\004 \001(\004\022\020\n\010key_type\030\005 \001(\005\022\021\n"
    "\tkey_value\030\006 \001(\004\022\026\n\016alive_time_sec\030\007 \001(\005"
    "\022\020\n\010mergenum\030\010 \001(\005\022\016\n\006teamid\030\t \001(\005\022+\n\005ma"
    "rry\030\n \003(\0132\034.proto_ff.RolePlayerMiniInfo\022"
    "\021\n\tstr_param\030\013 \001(\t\022\021\n\tfactionid\030\014 \001(\004\022\r\n"
    "\005layer\030\r \001(\004\022\016\n\006cur_hp\030\016 \001(\004\"\206\003\n\020PlayerT"
    "ransParam\022\021\n\tclient_id\030\001 \002(\r\022\026\n\016enter_sc"
    "ene_id\030\002 \002(\004\022\024\n\014enter_map_id\030\003 \002(\004\022\021\n\ten"
    "terposx\030\004 \002(\002\022\021\n\tenterposy\030\005 \002(\002\022\021\n\tente"
    "rposz\030\006 \002(\002\022\025\n\rlast_scene_id\030\007 \002(\004\022\023\n\013la"
    "st_map_id\030\010 \002(\004\022\020\n\010lastposx\030\t \002(\002\022\020\n\010las"
    "tposy\030\n \002(\002\022\020\n\010lastposz\030\013 \002(\002\022\016\n\006gateId\030"
    "\014 \001(\r\022\017\n\007channId\030\r \001(\r\022\013\n\003uid\030\016 \001(\r\022\013\n\003z"
    "id\030\017 \001(\r\022&\n\004sync\030\020 \001(\0132\030.proto_ff.LoginS"
    "yncProto\022\014\n\004prof\030\021 \001(\005\022\022\n\nlast_state\030\022 \001"
    "(\005\022\021\n\thead_flag\030\023 \001(\005\"\221\001\n\022CreatureTransP"
    "aram\022\014\n\004kind\030\001 \002(\005\022\013\n\003cid\030\002 \002(\004\0220\n\014playe"
    "r_param\030\003 \001(\0132\032.proto_ff.PlayerTransPara"
    "m\022.\n\013trans_param\030\004 \001(\0132\031.proto_ff.SceneT"
    "ransParam\"M\n\rNotifyLoadMap\022\r\n\005mapid\030\001 \002("
    "\004\022 \n\003pos\030\002 \002(\0132\023.proto_ff.Vector3PB\022\013\n\003z"
    "id\030\003 \001(\r\"<\n\rTransSceneReq\022\021\n\tdst_mapid\030\001"
    " \002(\004\022\014\n\004type\030\002 \001(\005\022\n\n\002id\030\003 \001(\004\"/\n\rTransS"
    "ceneRsp\022\017\n\007retcode\030\001 \002(\005\022\r\n\005mapid\030\002 \001(\004\""
    "\022\n\020LoadMapFinishReq\"]\n\nCorpseInfo\022\r\n\005cfg"
    "Id\030\001 \001(\004\022\021\n\taliveTime\030\002 \001(\004\022 \n\003pos\030\003 \001(\013"
    "2\023.proto_ff.Vector3PB\022\013\n\003cid\030\004 \001(\004\"M\n\030No"
    "tifySceneCorpseInfoRsp\022\014\n\004type\030\001 \001(\005\022#\n\005"
    "infos\030\002 \003(\0132\024.proto_ff.CorpseInfo\"L\n\023Not"
    "ifySceneDriveRsp\022\020\n\010curDrive\030\001 \001(\005\022\020\n\010ma"
    "xDrive\030\002 \001(\005\022\021\n\tdriveTime\030\003 \001(\004\"f\n\024Cente"
    "rCreateSceneReq\022\017\n\007sceneId\030\001 \002(\004\022\r\n\005mapI"
    "d\030\002 \002(\004\022.\n\005param\030\003 \001(\0132\037.proto_ff.Create"
    "SceneParamProto\":\n\024CenterCreateSceneRsp\022"
    "\"\n\004info\030\001 \003(\0132\024.proto_ff.SceneProto\"@\n\rS"
    "CAddNewScene\022\r\n\005mapid\030\001 \002(\004\022\017\n\007sceneid\030\002"
    " \002(\004\022\017\n\007logicid\030\003 \002(\r\"\035\n\nSCDelScene\022\017\n\007s"
    "ceneid\030\001 \002(\004\"7\n\025NotifyLogicSceneClose\022\017\n"
    "\007sceneId\030\001 \002(\004\022\r\n\005mapId\030\002 \002(\004\"\205\001\n\032LogicC"
    "reatureTransSceneReq\022\022\n\ncurSceneId\030\001 \002(\004"
    "\022\022\n\ndstSceneId\030\002 \002(\004\022+\n\005param\030\003 \002(\0132\034.pr"
    "oto_ff.CreatureTransParam\022\022\n\nsrcLogicId\030"
    "\004 \002(\r\"x\n!CenterCreatureTransSceneResultR"
    "sp\022\016\n\006result\030\001 \002(\005\022\023\n\013cur_sceneid\030\002 \002(\004\022"
    "\023\n\013dst_sceneid\030\003 \002(\004\022\014\n\004kind\030\004 \002(\005\022\013\n\003ci"
    "d\030\005 \002(\004\"\212\001\n\"CenterCreatureTransSceneSucc"
    "essRsp\022\023\n\013dst_sceneid\030\001 \002(\004\022\021\n\tdst_mapid"
    "\030\002 \002(\004\022+\n\005param\030\003 \002(\0132\034.proto_ff.Creatur"
    "eTransParam\022\017\n\007dst_zid\030\004 \001(\005\"z\n\024NotifyRo"
    "leEnterScene\022\013\n\003cid\030\001 \002(\004\022\020\n\010scene_id\030\002 "
    "\002(\004\022\016\n\006map_id\030\003 \002(\004\022\021\n\tscene_zid\030\004 \002(\r\022 "
    "\n\003pos\030\005 \001(\0132\023.proto_ff.Vector3PB\"Q\n\022Noti"
    "fyRoleChgLogic\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r"
    "\022\020\n\010clientid\030\003 \002(\r\022\017\n\007logicid\030\004 \002(\r\"\037\n\016L"
    "C_NewSceneReq\022\r\n\005count\030\001 \002(\r\"2\n\016CL_NewSc"
    "eneRsp\022\013\n\003zid\030\001 \002(\r\022\023\n\013sceneid_lst\030\002 \003(\004"
    "\"8\n\022LC_MainCityInfoReq\022\"\n\004info\030\001 \003(\0132\024.p"
    "roto_ff.SceneProto\"v\n\022CL_MainCityInfoRsp"
    "\022\014\n\004type\030\001 \001(\r\022\"\n\004info\030\002 \003(\0132\024.proto_ff."
    "SceneProto\022\021\n\tdel_scene\030\003 \003(\004\"\033\n\004Type\022\n\n"
    "\006update\020\001\022\007\n\003all\020\002\"\"\n\017CSGenSceneIdReq\022\017\n"
    "\007session\030\001 \002(\004\"3\n\017CSGenSceneIdRsp\022\017\n\007ses"
    "sion\030\001 \002(\004\022\017\n\007sceneId\030\002 \002(\004\"Q\n\021CSNtLSCre"
    "ateScene\022\017\n\007session\030\001 \002(\004\022\r\n\005mapId\030\002 \002(\r"
    "\022\017\n\007sceneId\030\003 \002(\004\022\013\n\003zid\030\004 \001(\r\"F\n\023CSRegT"
    "oCenterServer\022\017\n\007session\030\001 \002(\004\022\r\n\005mapId\030"
    "\002 \002(\r\022\017\n\007sceneId\030\003 \002(\004\":\n\014CSDestroyReq\022\017"
    "\n\007sceneId\030\001 \002(\004\022\031\n\021notifyLogicServer\030\002 \002"
    "(\010", 2842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Scene.proto", &protobuf_RegisterTypes);
  CreateSceneParamProto::default_instance_ = new CreateSceneParamProto();
  PlayerTransParam::default_instance_ = new PlayerTransParam();
  CreatureTransParam::default_instance_ = new CreatureTransParam();
  NotifyLoadMap::default_instance_ = new NotifyLoadMap();
  TransSceneReq::default_instance_ = new TransSceneReq();
  TransSceneRsp::default_instance_ = new TransSceneRsp();
  LoadMapFinishReq::default_instance_ = new LoadMapFinishReq();
  CorpseInfo::default_instance_ = new CorpseInfo();
  NotifySceneCorpseInfoRsp::default_instance_ = new NotifySceneCorpseInfoRsp();
  NotifySceneDriveRsp::default_instance_ = new NotifySceneDriveRsp();
  CenterCreateSceneReq::default_instance_ = new CenterCreateSceneReq();
  CenterCreateSceneRsp::default_instance_ = new CenterCreateSceneRsp();
  SCAddNewScene::default_instance_ = new SCAddNewScene();
  SCDelScene::default_instance_ = new SCDelScene();
  NotifyLogicSceneClose::default_instance_ = new NotifyLogicSceneClose();
  LogicCreatureTransSceneReq::default_instance_ = new LogicCreatureTransSceneReq();
  CenterCreatureTransSceneResultRsp::default_instance_ = new CenterCreatureTransSceneResultRsp();
  CenterCreatureTransSceneSuccessRsp::default_instance_ = new CenterCreatureTransSceneSuccessRsp();
  NotifyRoleEnterScene::default_instance_ = new NotifyRoleEnterScene();
  NotifyRoleChgLogic::default_instance_ = new NotifyRoleChgLogic();
  LC_NewSceneReq::default_instance_ = new LC_NewSceneReq();
  CL_NewSceneRsp::default_instance_ = new CL_NewSceneRsp();
  LC_MainCityInfoReq::default_instance_ = new LC_MainCityInfoReq();
  CL_MainCityInfoRsp::default_instance_ = new CL_MainCityInfoRsp();
  CSGenSceneIdReq::default_instance_ = new CSGenSceneIdReq();
  CSGenSceneIdRsp::default_instance_ = new CSGenSceneIdRsp();
  CSNtLSCreateScene::default_instance_ = new CSNtLSCreateScene();
  CSRegToCenterServer::default_instance_ = new CSRegToCenterServer();
  CSDestroyReq::default_instance_ = new CSDestroyReq();
  CreateSceneParamProto::default_instance_->InitAsDefaultInstance();
  PlayerTransParam::default_instance_->InitAsDefaultInstance();
  CreatureTransParam::default_instance_->InitAsDefaultInstance();
  NotifyLoadMap::default_instance_->InitAsDefaultInstance();
  TransSceneReq::default_instance_->InitAsDefaultInstance();
  TransSceneRsp::default_instance_->InitAsDefaultInstance();
  LoadMapFinishReq::default_instance_->InitAsDefaultInstance();
  CorpseInfo::default_instance_->InitAsDefaultInstance();
  NotifySceneCorpseInfoRsp::default_instance_->InitAsDefaultInstance();
  NotifySceneDriveRsp::default_instance_->InitAsDefaultInstance();
  CenterCreateSceneReq::default_instance_->InitAsDefaultInstance();
  CenterCreateSceneRsp::default_instance_->InitAsDefaultInstance();
  SCAddNewScene::default_instance_->InitAsDefaultInstance();
  SCDelScene::default_instance_->InitAsDefaultInstance();
  NotifyLogicSceneClose::default_instance_->InitAsDefaultInstance();
  LogicCreatureTransSceneReq::default_instance_->InitAsDefaultInstance();
  CenterCreatureTransSceneResultRsp::default_instance_->InitAsDefaultInstance();
  CenterCreatureTransSceneSuccessRsp::default_instance_->InitAsDefaultInstance();
  NotifyRoleEnterScene::default_instance_->InitAsDefaultInstance();
  NotifyRoleChgLogic::default_instance_->InitAsDefaultInstance();
  LC_NewSceneReq::default_instance_->InitAsDefaultInstance();
  CL_NewSceneRsp::default_instance_->InitAsDefaultInstance();
  LC_MainCityInfoReq::default_instance_->InitAsDefaultInstance();
  CL_MainCityInfoRsp::default_instance_->InitAsDefaultInstance();
  CSGenSceneIdReq::default_instance_->InitAsDefaultInstance();
  CSGenSceneIdRsp::default_instance_->InitAsDefaultInstance();
  CSNtLSCreateScene::default_instance_->InitAsDefaultInstance();
  CSRegToCenterServer::default_instance_->InitAsDefaultInstance();
  CSDestroyReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Scene_2eproto {
  StaticDescriptorInitializer_Scene_2eproto() {
    protobuf_AddDesc_Scene_2eproto();
  }
} static_descriptor_initializer_Scene_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateSceneParamProto::kParamTypeFieldNumber;
const int CreateSceneParamProto::kZidFieldNumber;
const int CreateSceneParamProto::kCidFieldNumber;
const int CreateSceneParamProto::kDupIdFieldNumber;
const int CreateSceneParamProto::kKeyTypeFieldNumber;
const int CreateSceneParamProto::kKeyValueFieldNumber;
const int CreateSceneParamProto::kAliveTimeSecFieldNumber;
const int CreateSceneParamProto::kMergenumFieldNumber;
const int CreateSceneParamProto::kTeamidFieldNumber;
const int CreateSceneParamProto::kMarryFieldNumber;
const int CreateSceneParamProto::kStrParamFieldNumber;
const int CreateSceneParamProto::kFactionidFieldNumber;
const int CreateSceneParamProto::kLayerFieldNumber;
const int CreateSceneParamProto::kCurHpFieldNumber;
#endif  // !_MSC_VER

CreateSceneParamProto::CreateSceneParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateSceneParamProto::InitAsDefaultInstance() {
}

CreateSceneParamProto::CreateSceneParamProto(const CreateSceneParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateSceneParamProto::SharedCtor() {
  _cached_size_ = 0;
  param_type_ = 0;
  zid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  dup_id_ = GOOGLE_ULONGLONG(0);
  key_type_ = 0;
  key_value_ = GOOGLE_ULONGLONG(0);
  alive_time_sec_ = 0;
  mergenum_ = 0;
  teamid_ = 0;
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factionid_ = GOOGLE_ULONGLONG(0);
  layer_ = GOOGLE_ULONGLONG(0);
  cur_hp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateSceneParamProto::~CreateSceneParamProto() {
  SharedDtor();
}

void CreateSceneParamProto::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void CreateSceneParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSceneParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateSceneParamProto_descriptor_;
}

const CreateSceneParamProto& CreateSceneParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CreateSceneParamProto* CreateSceneParamProto::default_instance_ = NULL;

CreateSceneParamProto* CreateSceneParamProto::New() const {
  return new CreateSceneParamProto;
}

void CreateSceneParamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    param_type_ = 0;
    zid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    dup_id_ = GOOGLE_ULONGLONG(0);
    key_type_ = 0;
    key_value_ = GOOGLE_ULONGLONG(0);
    alive_time_sec_ = 0;
    mergenum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = 0;
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    factionid_ = GOOGLE_ULONGLONG(0);
    layer_ = GOOGLE_ULONGLONG(0);
    cur_hp_ = GOOGLE_ULONGLONG(0);
  }
  marry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateSceneParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 param_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_type_)));
          set_has_param_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dup_id;
        break;
      }

      // optional uint64 dup_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dup_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dup_id_)));
          set_has_dup_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_key_type;
        break;
      }

      // optional int32 key_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_type_)));
          set_has_key_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_key_value;
        break;
      }

      // optional uint64 key_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_value_)));
          set_has_key_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_alive_time_sec;
        break;
      }

      // optional int32 alive_time_sec = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alive_time_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alive_time_sec_)));
          set_has_alive_time_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mergenum;
        break;
      }

      // optional int32 mergenum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mergenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mergenum_)));
          set_has_mergenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_teamid;
        break;
      }

      // optional int32 teamid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_marry;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo marry = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_marry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_marry;
        if (input->ExpectTag(90)) goto parse_str_param;
        break;
      }

      // optional string str_param = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_param().data(), this->str_param().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_factionid;
        break;
      }

      // optional uint64 factionid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_layer;
        break;
      }

      // optional uint64 layer = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_cur_hp;
        break;
      }

      // optional uint64 cur_hp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateSceneParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 param_type = 1;
  if (has_param_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param_type(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional uint64 dup_id = 4;
  if (has_dup_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->dup_id(), output);
  }

  // optional int32 key_type = 5;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->key_type(), output);
  }

  // optional uint64 key_value = 6;
  if (has_key_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->key_value(), output);
  }

  // optional int32 alive_time_sec = 7;
  if (has_alive_time_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->alive_time_sec(), output);
  }

  // optional int32 mergenum = 8;
  if (has_mergenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mergenum(), output);
  }

  // optional int32 teamid = 9;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->teamid(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo marry = 10;
  for (int i = 0; i < this->marry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->marry(i), output);
  }

  // optional string str_param = 11;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->str_param(), output);
  }

  // optional uint64 factionid = 12;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->factionid(), output);
  }

  // optional uint64 layer = 13;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->layer(), output);
  }

  // optional uint64 cur_hp = 14;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->cur_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateSceneParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 param_type = 1;
  if (has_param_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param_type(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional uint64 dup_id = 4;
  if (has_dup_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->dup_id(), target);
  }

  // optional int32 key_type = 5;
  if (has_key_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->key_type(), target);
  }

  // optional uint64 key_value = 6;
  if (has_key_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->key_value(), target);
  }

  // optional int32 alive_time_sec = 7;
  if (has_alive_time_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->alive_time_sec(), target);
  }

  // optional int32 mergenum = 8;
  if (has_mergenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mergenum(), target);
  }

  // optional int32 teamid = 9;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->teamid(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo marry = 10;
  for (int i = 0; i < this->marry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->marry(i), target);
  }

  // optional string str_param = 11;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_param().data(), this->str_param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->str_param(), target);
  }

  // optional uint64 factionid = 12;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->factionid(), target);
  }

  // optional uint64 layer = 13;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->layer(), target);
  }

  // optional uint64 cur_hp = 14;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->cur_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateSceneParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 param_type = 1;
    if (has_param_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param_type());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 dup_id = 4;
    if (has_dup_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dup_id());
    }

    // optional int32 key_type = 5;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key_type());
    }

    // optional uint64 key_value = 6;
    if (has_key_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_value());
    }

    // optional int32 alive_time_sec = 7;
    if (has_alive_time_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alive_time_sec());
    }

    // optional int32 mergenum = 8;
    if (has_mergenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mergenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 teamid = 9;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamid());
    }

    // optional string str_param = 11;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_param());
    }

    // optional uint64 factionid = 12;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factionid());
    }

    // optional uint64 layer = 13;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer());
    }

    // optional uint64 cur_hp = 14;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_hp());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo marry = 10;
  total_size += 1 * this->marry_size();
  for (int i = 0; i < this->marry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->marry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSceneParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateSceneParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateSceneParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateSceneParamProto::MergeFrom(const CreateSceneParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  marry_.MergeFrom(from.marry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param_type()) {
      set_param_type(from.param_type());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_dup_id()) {
      set_dup_id(from.dup_id());
    }
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_key_value()) {
      set_key_value(from.key_value());
    }
    if (from.has_alive_time_sec()) {
      set_alive_time_sec(from.alive_time_sec());
    }
    if (from.has_mergenum()) {
      set_mergenum(from.mergenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateSceneParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSceneParamProto::CopyFrom(const CreateSceneParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSceneParamProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < marry_size(); i++) {
    if (!this->marry(i).IsInitialized()) return false;
  }
  return true;
}

void CreateSceneParamProto::Swap(CreateSceneParamProto* other) {
  if (other != this) {
    std::swap(param_type_, other->param_type_);
    std::swap(zid_, other->zid_);
    std::swap(cid_, other->cid_);
    std::swap(dup_id_, other->dup_id_);
    std::swap(key_type_, other->key_type_);
    std::swap(key_value_, other->key_value_);
    std::swap(alive_time_sec_, other->alive_time_sec_);
    std::swap(mergenum_, other->mergenum_);
    std::swap(teamid_, other->teamid_);
    marry_.Swap(&other->marry_);
    std::swap(str_param_, other->str_param_);
    std::swap(factionid_, other->factionid_);
    std::swap(layer_, other->layer_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateSceneParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateSceneParamProto_descriptor_;
  metadata.reflection = CreateSceneParamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTransParam::kClientIdFieldNumber;
const int PlayerTransParam::kEnterSceneIdFieldNumber;
const int PlayerTransParam::kEnterMapIdFieldNumber;
const int PlayerTransParam::kEnterposxFieldNumber;
const int PlayerTransParam::kEnterposyFieldNumber;
const int PlayerTransParam::kEnterposzFieldNumber;
const int PlayerTransParam::kLastSceneIdFieldNumber;
const int PlayerTransParam::kLastMapIdFieldNumber;
const int PlayerTransParam::kLastposxFieldNumber;
const int PlayerTransParam::kLastposyFieldNumber;
const int PlayerTransParam::kLastposzFieldNumber;
const int PlayerTransParam::kGateIdFieldNumber;
const int PlayerTransParam::kChannIdFieldNumber;
const int PlayerTransParam::kUidFieldNumber;
const int PlayerTransParam::kZidFieldNumber;
const int PlayerTransParam::kSyncFieldNumber;
const int PlayerTransParam::kProfFieldNumber;
const int PlayerTransParam::kLastStateFieldNumber;
const int PlayerTransParam::kHeadFlagFieldNumber;
#endif  // !_MSC_VER

PlayerTransParam::PlayerTransParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTransParam::InitAsDefaultInstance() {
  sync_ = const_cast< ::proto_ff::LoginSyncProto*>(&::proto_ff::LoginSyncProto::default_instance());
}

PlayerTransParam::PlayerTransParam(const PlayerTransParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTransParam::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = 0u;
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  last_scene_id_ = GOOGLE_ULONGLONG(0);
  last_map_id_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  gateid_ = 0u;
  channid_ = 0u;
  uid_ = 0u;
  zid_ = 0u;
  sync_ = NULL;
  prof_ = 0;
  last_state_ = 0;
  head_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTransParam::~PlayerTransParam() {
  SharedDtor();
}

void PlayerTransParam::SharedDtor() {
  if (this != default_instance_) {
    delete sync_;
  }
}

void PlayerTransParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTransParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTransParam_descriptor_;
}

const PlayerTransParam& PlayerTransParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

PlayerTransParam* PlayerTransParam::default_instance_ = NULL;

PlayerTransParam* PlayerTransParam::New() const {
  return new PlayerTransParam;
}

void PlayerTransParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_id_ = 0u;
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    last_scene_id_ = GOOGLE_ULONGLONG(0);
    last_map_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastposx_ = 0;
    lastposy_ = 0;
    lastposz_ = 0;
    gateid_ = 0u;
    channid_ = 0u;
    uid_ = 0u;
    zid_ = 0u;
    if (has_sync()) {
      if (sync_ != NULL) sync_->::proto_ff::LoginSyncProto::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    prof_ = 0;
    last_state_ = 0;
    head_flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTransParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_id_)));
          set_has_client_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enter_scene_id;
        break;
      }

      // required uint64 enter_scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter_map_id;
        break;
      }

      // required uint64 enter_map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_enterposx;
        break;
      }

      // required float enterposx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_enterposy;
        break;
      }

      // required float enterposy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_enterposz;
        break;
      }

      // required float enterposz = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_scene_id;
        break;
      }

      // required uint64 last_scene_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_scene_id_)));
          set_has_last_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_map_id;
        break;
      }

      // required uint64 last_map_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_map_id_)));
          set_has_last_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_lastposx;
        break;
      }

      // required float lastposx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_lastposy;
        break;
      }

      // required float lastposy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_lastposz;
        break;
      }

      // required float lastposz = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_gateId;
        break;
      }

      // optional uint32 gateId = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_channId;
        break;
      }

      // optional uint32 channId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channid_)));
          set_has_channid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_sync;
        break;
      }

      // optional .proto_ff.LoginSyncProto sync = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sync()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_prof;
        break;
      }

      // optional int32 prof = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_last_state;
        break;
      }

      // optional int32 last_state = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_state_)));
          set_has_last_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_head_flag;
        break;
      }

      // optional int32 head_flag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_flag_)));
          set_has_head_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerTransParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 client_id = 1;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_id(), output);
  }

  // required uint64 enter_scene_id = 2;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->enter_scene_id(), output);
  }

  // required uint64 enter_map_id = 3;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->enter_map_id(), output);
  }

  // required float enterposx = 4;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->enterposx(), output);
  }

  // required float enterposy = 5;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->enterposy(), output);
  }

  // required float enterposz = 6;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->enterposz(), output);
  }

  // required uint64 last_scene_id = 7;
  if (has_last_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->last_scene_id(), output);
  }

  // required uint64 last_map_id = 8;
  if (has_last_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->last_map_id(), output);
  }

  // required float lastposx = 9;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lastposx(), output);
  }

  // required float lastposy = 10;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lastposy(), output);
  }

  // required float lastposz = 11;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lastposz(), output);
  }

  // optional uint32 gateId = 12;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gateid(), output);
  }

  // optional uint32 channId = 13;
  if (has_channid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->channid(), output);
  }

  // optional uint32 uid = 14;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uid(), output);
  }

  // optional uint32 zid = 15;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->zid(), output);
  }

  // optional .proto_ff.LoginSyncProto sync = 16;
  if (has_sync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->sync(), output);
  }

  // optional int32 prof = 17;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->prof(), output);
  }

  // optional int32 last_state = 18;
  if (has_last_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->last_state(), output);
  }

  // optional int32 head_flag = 19;
  if (has_head_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->head_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTransParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 client_id = 1;
  if (has_client_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_id(), target);
  }

  // required uint64 enter_scene_id = 2;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->enter_scene_id(), target);
  }

  // required uint64 enter_map_id = 3;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->enter_map_id(), target);
  }

  // required float enterposx = 4;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->enterposx(), target);
  }

  // required float enterposy = 5;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->enterposy(), target);
  }

  // required float enterposz = 6;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->enterposz(), target);
  }

  // required uint64 last_scene_id = 7;
  if (has_last_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->last_scene_id(), target);
  }

  // required uint64 last_map_id = 8;
  if (has_last_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->last_map_id(), target);
  }

  // required float lastposx = 9;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lastposx(), target);
  }

  // required float lastposy = 10;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lastposy(), target);
  }

  // required float lastposz = 11;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lastposz(), target);
  }

  // optional uint32 gateId = 12;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gateid(), target);
  }

  // optional uint32 channId = 13;
  if (has_channid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->channid(), target);
  }

  // optional uint32 uid = 14;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uid(), target);
  }

  // optional uint32 zid = 15;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->zid(), target);
  }

  // optional .proto_ff.LoginSyncProto sync = 16;
  if (has_sync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->sync(), target);
  }

  // optional int32 prof = 17;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->prof(), target);
  }

  // optional int32 last_state = 18;
  if (has_last_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->last_state(), target);
  }

  // optional int32 head_flag = 19;
  if (has_head_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->head_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTransParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_id());
    }

    // required uint64 enter_scene_id = 2;
    if (has_enter_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

    // required uint64 enter_map_id = 3;
    if (has_enter_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // required float enterposx = 4;
    if (has_enterposx()) {
      total_size += 1 + 4;
    }

    // required float enterposy = 5;
    if (has_enterposy()) {
      total_size += 1 + 4;
    }

    // required float enterposz = 6;
    if (has_enterposz()) {
      total_size += 1 + 4;
    }

    // required uint64 last_scene_id = 7;
    if (has_last_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_scene_id());
    }

    // required uint64 last_map_id = 8;
    if (has_last_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_map_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float lastposx = 9;
    if (has_lastposx()) {
      total_size += 1 + 4;
    }

    // required float lastposy = 10;
    if (has_lastposy()) {
      total_size += 1 + 4;
    }

    // required float lastposz = 11;
    if (has_lastposz()) {
      total_size += 1 + 4;
    }

    // optional uint32 gateId = 12;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional uint32 channId = 13;
    if (has_channid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channid());
    }

    // optional uint32 uid = 14;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 zid = 15;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional .proto_ff.LoginSyncProto sync = 16;
    if (has_sync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sync());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 prof = 17;
    if (has_prof()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 last_state = 18;
    if (has_last_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_state());
    }

    // optional int32 head_flag = 19;
    if (has_head_flag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTransParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTransParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTransParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTransParam::MergeFrom(const PlayerTransParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_last_scene_id()) {
      set_last_scene_id(from.last_scene_id());
    }
    if (from.has_last_map_id()) {
      set_last_map_id(from.last_map_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_channid()) {
      set_channid(from.channid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_sync()) {
      mutable_sync()->::proto_ff::LoginSyncProto::MergeFrom(from.sync());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_last_state()) {
      set_last_state(from.last_state());
    }
    if (from.has_head_flag()) {
      set_head_flag(from.head_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTransParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTransParam::CopyFrom(const PlayerTransParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTransParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void PlayerTransParam::Swap(PlayerTransParam* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(last_scene_id_, other->last_scene_id_);
    std::swap(last_map_id_, other->last_map_id_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(gateid_, other->gateid_);
    std::swap(channid_, other->channid_);
    std::swap(uid_, other->uid_);
    std::swap(zid_, other->zid_);
    std::swap(sync_, other->sync_);
    std::swap(prof_, other->prof_);
    std::swap(last_state_, other->last_state_);
    std::swap(head_flag_, other->head_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTransParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTransParam_descriptor_;
  metadata.reflection = PlayerTransParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureTransParam::kKindFieldNumber;
const int CreatureTransParam::kCidFieldNumber;
const int CreatureTransParam::kPlayerParamFieldNumber;
const int CreatureTransParam::kTransParamFieldNumber;
#endif  // !_MSC_VER

CreatureTransParam::CreatureTransParam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureTransParam::InitAsDefaultInstance() {
  player_param_ = const_cast< ::proto_ff::PlayerTransParam*>(&::proto_ff::PlayerTransParam::default_instance());
  trans_param_ = const_cast< ::proto_ff::SceneTransParam*>(&::proto_ff::SceneTransParam::default_instance());
}

CreatureTransParam::CreatureTransParam(const CreatureTransParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureTransParam::SharedCtor() {
  _cached_size_ = 0;
  kind_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  player_param_ = NULL;
  trans_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureTransParam::~CreatureTransParam() {
  SharedDtor();
}

void CreatureTransParam::SharedDtor() {
  if (this != default_instance_) {
    delete player_param_;
    delete trans_param_;
  }
}

void CreatureTransParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureTransParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureTransParam_descriptor_;
}

const CreatureTransParam& CreatureTransParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CreatureTransParam* CreatureTransParam::default_instance_ = NULL;

CreatureTransParam* CreatureTransParam::New() const {
  return new CreatureTransParam;
}

void CreatureTransParam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kind_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_player_param()) {
      if (player_param_ != NULL) player_param_->::proto_ff::PlayerTransParam::Clear();
    }
    if (has_trans_param()) {
      if (trans_param_ != NULL) trans_param_->::proto_ff::SceneTransParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureTransParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 kind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player_param;
        break;
      }

      // optional .proto_ff.PlayerTransParam player_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_trans_param;
        break;
      }

      // optional .proto_ff.SceneTransParam trans_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trans_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trans_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureTransParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 kind = 1;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->kind(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional .proto_ff.PlayerTransParam player_param = 3;
  if (has_player_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_param(), output);
  }

  // optional .proto_ff.SceneTransParam trans_param = 4;
  if (has_trans_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trans_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureTransParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 kind = 1;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->kind(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional .proto_ff.PlayerTransParam player_param = 3;
  if (has_player_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player_param(), target);
  }

  // optional .proto_ff.SceneTransParam trans_param = 4;
  if (has_trans_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->trans_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureTransParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 kind = 1;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional .proto_ff.PlayerTransParam player_param = 3;
    if (has_player_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_param());
    }

    // optional .proto_ff.SceneTransParam trans_param = 4;
    if (has_trans_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trans_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureTransParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureTransParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureTransParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureTransParam::MergeFrom(const CreatureTransParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_player_param()) {
      mutable_player_param()->::proto_ff::PlayerTransParam::MergeFrom(from.player_param());
    }
    if (from.has_trans_param()) {
      mutable_trans_param()->::proto_ff::SceneTransParam::MergeFrom(from.trans_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureTransParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureTransParam::CopyFrom(const CreatureTransParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureTransParam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_player_param()) {
    if (!this->player_param().IsInitialized()) return false;
  }
  return true;
}

void CreatureTransParam::Swap(CreatureTransParam* other) {
  if (other != this) {
    std::swap(kind_, other->kind_);
    std::swap(cid_, other->cid_);
    std::swap(player_param_, other->player_param_);
    std::swap(trans_param_, other->trans_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureTransParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureTransParam_descriptor_;
  metadata.reflection = CreatureTransParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLoadMap::kMapidFieldNumber;
const int NotifyLoadMap::kPosFieldNumber;
const int NotifyLoadMap::kZidFieldNumber;
#endif  // !_MSC_VER

NotifyLoadMap::NotifyLoadMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLoadMap::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

NotifyLoadMap::NotifyLoadMap(const NotifyLoadMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLoadMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLoadMap::~NotifyLoadMap() {
  SharedDtor();
}

void NotifyLoadMap::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void NotifyLoadMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLoadMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLoadMap_descriptor_;
}

const NotifyLoadMap& NotifyLoadMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifyLoadMap* NotifyLoadMap::default_instance_ = NULL;

NotifyLoadMap* NotifyLoadMap::New() const {
  return new NotifyLoadMap;
}

void NotifyLoadMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLoadMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLoadMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLoadMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLoadMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // required .proto_ff.Vector3PB pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLoadMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLoadMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLoadMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLoadMap::MergeFrom(const NotifyLoadMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLoadMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLoadMap::CopyFrom(const NotifyLoadMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLoadMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void NotifyLoadMap::Swap(NotifyLoadMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLoadMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLoadMap_descriptor_;
  metadata.reflection = NotifyLoadMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransSceneReq::kDstMapidFieldNumber;
const int TransSceneReq::kTypeFieldNumber;
const int TransSceneReq::kIdFieldNumber;
#endif  // !_MSC_VER

TransSceneReq::TransSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransSceneReq::InitAsDefaultInstance() {
}

TransSceneReq::TransSceneReq(const TransSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransSceneReq::SharedCtor() {
  _cached_size_ = 0;
  dst_mapid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransSceneReq::~TransSceneReq() {
  SharedDtor();
}

void TransSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransSceneReq_descriptor_;
}

const TransSceneReq& TransSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

TransSceneReq* TransSceneReq::default_instance_ = NULL;

TransSceneReq* TransSceneReq::New() const {
  return new TransSceneReq;
}

void TransSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_mapid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dst_mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_mapid_)));
          set_has_dst_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 dst_mapid = 1;
  if (has_dst_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst_mapid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 dst_mapid = 1;
  if (has_dst_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst_mapid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dst_mapid = 1;
    if (has_dst_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_mapid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransSceneReq::MergeFrom(const TransSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_mapid()) {
      set_dst_mapid(from.dst_mapid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransSceneReq::CopyFrom(const TransSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransSceneReq::Swap(TransSceneReq* other) {
  if (other != this) {
    std::swap(dst_mapid_, other->dst_mapid_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransSceneReq_descriptor_;
  metadata.reflection = TransSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransSceneRsp::kRetcodeFieldNumber;
const int TransSceneRsp::kMapidFieldNumber;
#endif  // !_MSC_VER

TransSceneRsp::TransSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransSceneRsp::InitAsDefaultInstance() {
}

TransSceneRsp::TransSceneRsp(const TransSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransSceneRsp::~TransSceneRsp() {
  SharedDtor();
}

void TransSceneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransSceneRsp_descriptor_;
}

const TransSceneRsp& TransSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

TransSceneRsp* TransSceneRsp::default_instance_ = NULL;

TransSceneRsp* TransSceneRsp::New() const {
  return new TransSceneRsp;
}

void TransSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransSceneRsp::MergeFrom(const TransSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransSceneRsp::CopyFrom(const TransSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransSceneRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TransSceneRsp::Swap(TransSceneRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransSceneRsp_descriptor_;
  metadata.reflection = TransSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoadMapFinishReq::LoadMapFinishReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadMapFinishReq::InitAsDefaultInstance() {
}

LoadMapFinishReq::LoadMapFinishReq(const LoadMapFinishReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadMapFinishReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadMapFinishReq::~LoadMapFinishReq() {
  SharedDtor();
}

void LoadMapFinishReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadMapFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadMapFinishReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadMapFinishReq_descriptor_;
}

const LoadMapFinishReq& LoadMapFinishReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

LoadMapFinishReq* LoadMapFinishReq::default_instance_ = NULL;

LoadMapFinishReq* LoadMapFinishReq::New() const {
  return new LoadMapFinishReq;
}

void LoadMapFinishReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadMapFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void LoadMapFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadMapFinishReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadMapFinishReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadMapFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadMapFinishReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadMapFinishReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadMapFinishReq::MergeFrom(const LoadMapFinishReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadMapFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadMapFinishReq::CopyFrom(const LoadMapFinishReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadMapFinishReq::IsInitialized() const {

  return true;
}

void LoadMapFinishReq::Swap(LoadMapFinishReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadMapFinishReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadMapFinishReq_descriptor_;
  metadata.reflection = LoadMapFinishReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CorpseInfo::kCfgIdFieldNumber;
const int CorpseInfo::kAliveTimeFieldNumber;
const int CorpseInfo::kPosFieldNumber;
const int CorpseInfo::kCidFieldNumber;
#endif  // !_MSC_VER

CorpseInfo::CorpseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CorpseInfo::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

CorpseInfo::CorpseInfo(const CorpseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CorpseInfo::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = GOOGLE_ULONGLONG(0);
  alivetime_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CorpseInfo::~CorpseInfo() {
  SharedDtor();
}

void CorpseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CorpseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CorpseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CorpseInfo_descriptor_;
}

const CorpseInfo& CorpseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CorpseInfo* CorpseInfo::default_instance_ = NULL;

CorpseInfo* CorpseInfo::New() const {
  return new CorpseInfo;
}

void CorpseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = GOOGLE_ULONGLONG(0);
    alivetime_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CorpseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cfgId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_aliveTime;
        break;
      }

      // optional uint64 aliveTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aliveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alivetime_)));
          set_has_alivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CorpseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cfgId = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cfgid(), output);
  }

  // optional uint64 aliveTime = 2;
  if (has_alivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->alivetime(), output);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CorpseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cfgId = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cfgid(), target);
  }

  // optional uint64 aliveTime = 2;
  if (has_alivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->alivetime(), target);
  }

  // optional .proto_ff.Vector3PB pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CorpseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cfgId = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

    // optional uint64 aliveTime = 2;
    if (has_alivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->alivetime());
    }

    // optional .proto_ff.Vector3PB pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CorpseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CorpseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CorpseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CorpseInfo::MergeFrom(const CorpseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_alivetime()) {
      set_alivetime(from.alivetime());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CorpseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorpseInfo::CopyFrom(const CorpseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorpseInfo::IsInitialized() const {

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CorpseInfo::Swap(CorpseInfo* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(alivetime_, other->alivetime_);
    std::swap(pos_, other->pos_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CorpseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CorpseInfo_descriptor_;
  metadata.reflection = CorpseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySceneCorpseInfoRsp::kTypeFieldNumber;
const int NotifySceneCorpseInfoRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

NotifySceneCorpseInfoRsp::NotifySceneCorpseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySceneCorpseInfoRsp::InitAsDefaultInstance() {
}

NotifySceneCorpseInfoRsp::NotifySceneCorpseInfoRsp(const NotifySceneCorpseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySceneCorpseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySceneCorpseInfoRsp::~NotifySceneCorpseInfoRsp() {
  SharedDtor();
}

void NotifySceneCorpseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySceneCorpseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySceneCorpseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySceneCorpseInfoRsp_descriptor_;
}

const NotifySceneCorpseInfoRsp& NotifySceneCorpseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifySceneCorpseInfoRsp* NotifySceneCorpseInfoRsp::default_instance_ = NULL;

NotifySceneCorpseInfoRsp* NotifySceneCorpseInfoRsp::New() const {
  return new NotifySceneCorpseInfoRsp;
}

void NotifySceneCorpseInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySceneCorpseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.CorpseInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySceneCorpseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.CorpseInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySceneCorpseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.CorpseInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySceneCorpseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.CorpseInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySceneCorpseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySceneCorpseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySceneCorpseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySceneCorpseInfoRsp::MergeFrom(const NotifySceneCorpseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySceneCorpseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySceneCorpseInfoRsp::CopyFrom(const NotifySceneCorpseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySceneCorpseInfoRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void NotifySceneCorpseInfoRsp::Swap(NotifySceneCorpseInfoRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySceneCorpseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySceneCorpseInfoRsp_descriptor_;
  metadata.reflection = NotifySceneCorpseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifySceneDriveRsp::kCurDriveFieldNumber;
const int NotifySceneDriveRsp::kMaxDriveFieldNumber;
const int NotifySceneDriveRsp::kDriveTimeFieldNumber;
#endif  // !_MSC_VER

NotifySceneDriveRsp::NotifySceneDriveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifySceneDriveRsp::InitAsDefaultInstance() {
}

NotifySceneDriveRsp::NotifySceneDriveRsp(const NotifySceneDriveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifySceneDriveRsp::SharedCtor() {
  _cached_size_ = 0;
  curdrive_ = 0;
  maxdrive_ = 0;
  drivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifySceneDriveRsp::~NotifySceneDriveRsp() {
  SharedDtor();
}

void NotifySceneDriveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifySceneDriveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifySceneDriveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifySceneDriveRsp_descriptor_;
}

const NotifySceneDriveRsp& NotifySceneDriveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifySceneDriveRsp* NotifySceneDriveRsp::default_instance_ = NULL;

NotifySceneDriveRsp* NotifySceneDriveRsp::New() const {
  return new NotifySceneDriveRsp;
}

void NotifySceneDriveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curdrive_ = 0;
    maxdrive_ = 0;
    drivetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifySceneDriveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curDrive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curdrive_)));
          set_has_curdrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxDrive;
        break;
      }

      // optional int32 maxDrive = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxDrive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdrive_)));
          set_has_maxdrive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_driveTime;
        break;
      }

      // optional uint64 driveTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_driveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &drivetime_)));
          set_has_drivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifySceneDriveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curDrive = 1;
  if (has_curdrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curdrive(), output);
  }

  // optional int32 maxDrive = 2;
  if (has_maxdrive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxdrive(), output);
  }

  // optional uint64 driveTime = 3;
  if (has_drivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->drivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifySceneDriveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curDrive = 1;
  if (has_curdrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curdrive(), target);
  }

  // optional int32 maxDrive = 2;
  if (has_maxdrive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxdrive(), target);
  }

  // optional uint64 driveTime = 3;
  if (has_drivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->drivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifySceneDriveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curDrive = 1;
    if (has_curdrive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curdrive());
    }

    // optional int32 maxDrive = 2;
    if (has_maxdrive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxdrive());
    }

    // optional uint64 driveTime = 3;
    if (has_drivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->drivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifySceneDriveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifySceneDriveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifySceneDriveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifySceneDriveRsp::MergeFrom(const NotifySceneDriveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curdrive()) {
      set_curdrive(from.curdrive());
    }
    if (from.has_maxdrive()) {
      set_maxdrive(from.maxdrive());
    }
    if (from.has_drivetime()) {
      set_drivetime(from.drivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifySceneDriveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifySceneDriveRsp::CopyFrom(const NotifySceneDriveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifySceneDriveRsp::IsInitialized() const {

  return true;
}

void NotifySceneDriveRsp::Swap(NotifySceneDriveRsp* other) {
  if (other != this) {
    std::swap(curdrive_, other->curdrive_);
    std::swap(maxdrive_, other->maxdrive_);
    std::swap(drivetime_, other->drivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifySceneDriveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifySceneDriveRsp_descriptor_;
  metadata.reflection = NotifySceneDriveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterCreateSceneReq::kSceneIdFieldNumber;
const int CenterCreateSceneReq::kMapIdFieldNumber;
const int CenterCreateSceneReq::kParamFieldNumber;
#endif  // !_MSC_VER

CenterCreateSceneReq::CenterCreateSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterCreateSceneReq::InitAsDefaultInstance() {
  param_ = const_cast< ::proto_ff::CreateSceneParamProto*>(&::proto_ff::CreateSceneParamProto::default_instance());
}

CenterCreateSceneReq::CenterCreateSceneReq(const CenterCreateSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterCreateSceneReq::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterCreateSceneReq::~CenterCreateSceneReq() {
  SharedDtor();
}

void CenterCreateSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void CenterCreateSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterCreateSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterCreateSceneReq_descriptor_;
}

const CenterCreateSceneReq& CenterCreateSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CenterCreateSceneReq* CenterCreateSceneReq::default_instance_ = NULL;

CenterCreateSceneReq* CenterCreateSceneReq::New() const {
  return new CenterCreateSceneReq;
}

void CenterCreateSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_param()) {
      if (param_ != NULL) param_->::proto_ff::CreateSceneParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterCreateSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint64 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // optional .proto_ff.CreateSceneParamProto param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterCreateSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // required uint64 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mapid(), output);
  }

  // optional .proto_ff.CreateSceneParamProto param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterCreateSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // required uint64 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mapid(), target);
  }

  // optional .proto_ff.CreateSceneParamProto param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterCreateSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // required uint64 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional .proto_ff.CreateSceneParamProto param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterCreateSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterCreateSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterCreateSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterCreateSceneReq::MergeFrom(const CenterCreateSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_param()) {
      mutable_param()->::proto_ff::CreateSceneParamProto::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterCreateSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterCreateSceneReq::CopyFrom(const CenterCreateSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterCreateSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void CenterCreateSceneReq::Swap(CenterCreateSceneReq* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterCreateSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterCreateSceneReq_descriptor_;
  metadata.reflection = CenterCreateSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterCreateSceneRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

CenterCreateSceneRsp::CenterCreateSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterCreateSceneRsp::InitAsDefaultInstance() {
}

CenterCreateSceneRsp::CenterCreateSceneRsp(const CenterCreateSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterCreateSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterCreateSceneRsp::~CenterCreateSceneRsp() {
  SharedDtor();
}

void CenterCreateSceneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterCreateSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterCreateSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterCreateSceneRsp_descriptor_;
}

const CenterCreateSceneRsp& CenterCreateSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CenterCreateSceneRsp* CenterCreateSceneRsp::default_instance_ = NULL;

CenterCreateSceneRsp* CenterCreateSceneRsp::New() const {
  return new CenterCreateSceneRsp;
}

void CenterCreateSceneRsp::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterCreateSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SceneProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterCreateSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SceneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterCreateSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SceneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterCreateSceneRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SceneProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterCreateSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterCreateSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterCreateSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterCreateSceneRsp::MergeFrom(const CenterCreateSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterCreateSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterCreateSceneRsp::CopyFrom(const CenterCreateSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterCreateSceneRsp::IsInitialized() const {

  return true;
}

void CenterCreateSceneRsp::Swap(CenterCreateSceneRsp* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterCreateSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterCreateSceneRsp_descriptor_;
  metadata.reflection = CenterCreateSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCAddNewScene::kMapidFieldNumber;
const int SCAddNewScene::kSceneidFieldNumber;
const int SCAddNewScene::kLogicidFieldNumber;
#endif  // !_MSC_VER

SCAddNewScene::SCAddNewScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCAddNewScene::InitAsDefaultInstance() {
}

SCAddNewScene::SCAddNewScene(const SCAddNewScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCAddNewScene::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCAddNewScene::~SCAddNewScene() {
  SharedDtor();
}

void SCAddNewScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCAddNewScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCAddNewScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCAddNewScene_descriptor_;
}

const SCAddNewScene& SCAddNewScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

SCAddNewScene* SCAddNewScene::default_instance_ = NULL;

SCAddNewScene* SCAddNewScene::New() const {
  return new SCAddNewScene;
}

void SCAddNewScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCAddNewScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // required uint64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_logicid;
        break;
      }

      // required uint32 logicid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCAddNewScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // required uint64 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // required uint32 logicid = 3;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCAddNewScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // required uint64 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // required uint32 logicid = 3;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCAddNewScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // required uint64 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // required uint32 logicid = 3;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCAddNewScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCAddNewScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCAddNewScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCAddNewScene::MergeFrom(const SCAddNewScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCAddNewScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCAddNewScene::CopyFrom(const SCAddNewScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCAddNewScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SCAddNewScene::Swap(SCAddNewScene* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCAddNewScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCAddNewScene_descriptor_;
  metadata.reflection = SCAddNewScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCDelScene::kSceneidFieldNumber;
#endif  // !_MSC_VER

SCDelScene::SCDelScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCDelScene::InitAsDefaultInstance() {
}

SCDelScene::SCDelScene(const SCDelScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCDelScene::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCDelScene::~SCDelScene() {
  SharedDtor();
}

void SCDelScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCDelScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCDelScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCDelScene_descriptor_;
}

const SCDelScene& SCDelScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

SCDelScene* SCDelScene::default_instance_ = NULL;

SCDelScene* SCDelScene::New() const {
  return new SCDelScene;
}

void SCDelScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCDelScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCDelScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sceneid = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCDelScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sceneid = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCDelScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sceneid = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCDelScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCDelScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCDelScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCDelScene::MergeFrom(const SCDelScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCDelScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCDelScene::CopyFrom(const SCDelScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCDelScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCDelScene::Swap(SCDelScene* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCDelScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCDelScene_descriptor_;
  metadata.reflection = SCDelScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyLogicSceneClose::kSceneIdFieldNumber;
const int NotifyLogicSceneClose::kMapIdFieldNumber;
#endif  // !_MSC_VER

NotifyLogicSceneClose::NotifyLogicSceneClose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyLogicSceneClose::InitAsDefaultInstance() {
}

NotifyLogicSceneClose::NotifyLogicSceneClose(const NotifyLogicSceneClose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyLogicSceneClose::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyLogicSceneClose::~NotifyLogicSceneClose() {
  SharedDtor();
}

void NotifyLogicSceneClose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyLogicSceneClose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyLogicSceneClose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyLogicSceneClose_descriptor_;
}

const NotifyLogicSceneClose& NotifyLogicSceneClose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifyLogicSceneClose* NotifyLogicSceneClose::default_instance_ = NULL;

NotifyLogicSceneClose* NotifyLogicSceneClose::New() const {
  return new NotifyLogicSceneClose;
}

void NotifyLogicSceneClose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyLogicSceneClose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint64 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyLogicSceneClose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // required uint64 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyLogicSceneClose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // required uint64 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyLogicSceneClose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // required uint64 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyLogicSceneClose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyLogicSceneClose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyLogicSceneClose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyLogicSceneClose::MergeFrom(const NotifyLogicSceneClose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyLogicSceneClose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyLogicSceneClose::CopyFrom(const NotifyLogicSceneClose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyLogicSceneClose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyLogicSceneClose::Swap(NotifyLogicSceneClose* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyLogicSceneClose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyLogicSceneClose_descriptor_;
  metadata.reflection = NotifyLogicSceneClose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogicCreatureTransSceneReq::kCurSceneIdFieldNumber;
const int LogicCreatureTransSceneReq::kDstSceneIdFieldNumber;
const int LogicCreatureTransSceneReq::kParamFieldNumber;
const int LogicCreatureTransSceneReq::kSrcLogicIdFieldNumber;
#endif  // !_MSC_VER

LogicCreatureTransSceneReq::LogicCreatureTransSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogicCreatureTransSceneReq::InitAsDefaultInstance() {
  param_ = const_cast< ::proto_ff::CreatureTransParam*>(&::proto_ff::CreatureTransParam::default_instance());
}

LogicCreatureTransSceneReq::LogicCreatureTransSceneReq(const LogicCreatureTransSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogicCreatureTransSceneReq::SharedCtor() {
  _cached_size_ = 0;
  cursceneid_ = GOOGLE_ULONGLONG(0);
  dstsceneid_ = GOOGLE_ULONGLONG(0);
  param_ = NULL;
  srclogicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogicCreatureTransSceneReq::~LogicCreatureTransSceneReq() {
  SharedDtor();
}

void LogicCreatureTransSceneReq::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void LogicCreatureTransSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogicCreatureTransSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogicCreatureTransSceneReq_descriptor_;
}

const LogicCreatureTransSceneReq& LogicCreatureTransSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

LogicCreatureTransSceneReq* LogicCreatureTransSceneReq::default_instance_ = NULL;

LogicCreatureTransSceneReq* LogicCreatureTransSceneReq::New() const {
  return new LogicCreatureTransSceneReq;
}

void LogicCreatureTransSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cursceneid_ = GOOGLE_ULONGLONG(0);
    dstsceneid_ = GOOGLE_ULONGLONG(0);
    if (has_param()) {
      if (param_ != NULL) param_->::proto_ff::CreatureTransParam::Clear();
    }
    srclogicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogicCreatureTransSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 curSceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cursceneid_)));
          set_has_cursceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstSceneId;
        break;
      }

      // required uint64 dstSceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstSceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstsceneid_)));
          set_has_dstsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // required .proto_ff.CreatureTransParam param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_srcLogicId;
        break;
      }

      // required uint32 srcLogicId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcLogicId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srclogicid_)));
          set_has_srclogicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogicCreatureTransSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 curSceneId = 1;
  if (has_cursceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cursceneid(), output);
  }

  // required uint64 dstSceneId = 2;
  if (has_dstsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dstsceneid(), output);
  }

  // required .proto_ff.CreatureTransParam param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->param(), output);
  }

  // required uint32 srcLogicId = 4;
  if (has_srclogicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->srclogicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogicCreatureTransSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 curSceneId = 1;
  if (has_cursceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cursceneid(), target);
  }

  // required uint64 dstSceneId = 2;
  if (has_dstsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dstsceneid(), target);
  }

  // required .proto_ff.CreatureTransParam param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->param(), target);
  }

  // required uint32 srcLogicId = 4;
  if (has_srclogicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->srclogicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogicCreatureTransSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 curSceneId = 1;
    if (has_cursceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cursceneid());
    }

    // required uint64 dstSceneId = 2;
    if (has_dstsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dstsceneid());
    }

    // required .proto_ff.CreatureTransParam param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // required uint32 srcLogicId = 4;
    if (has_srclogicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srclogicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicCreatureTransSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogicCreatureTransSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogicCreatureTransSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogicCreatureTransSceneReq::MergeFrom(const LogicCreatureTransSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cursceneid()) {
      set_cursceneid(from.cursceneid());
    }
    if (from.has_dstsceneid()) {
      set_dstsceneid(from.dstsceneid());
    }
    if (from.has_param()) {
      mutable_param()->::proto_ff::CreatureTransParam::MergeFrom(from.param());
    }
    if (from.has_srclogicid()) {
      set_srclogicid(from.srclogicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogicCreatureTransSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicCreatureTransSceneReq::CopyFrom(const LogicCreatureTransSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicCreatureTransSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void LogicCreatureTransSceneReq::Swap(LogicCreatureTransSceneReq* other) {
  if (other != this) {
    std::swap(cursceneid_, other->cursceneid_);
    std::swap(dstsceneid_, other->dstsceneid_);
    std::swap(param_, other->param_);
    std::swap(srclogicid_, other->srclogicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogicCreatureTransSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogicCreatureTransSceneReq_descriptor_;
  metadata.reflection = LogicCreatureTransSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterCreatureTransSceneResultRsp::kResultFieldNumber;
const int CenterCreatureTransSceneResultRsp::kCurSceneidFieldNumber;
const int CenterCreatureTransSceneResultRsp::kDstSceneidFieldNumber;
const int CenterCreatureTransSceneResultRsp::kKindFieldNumber;
const int CenterCreatureTransSceneResultRsp::kCidFieldNumber;
#endif  // !_MSC_VER

CenterCreatureTransSceneResultRsp::CenterCreatureTransSceneResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterCreatureTransSceneResultRsp::InitAsDefaultInstance() {
}

CenterCreatureTransSceneResultRsp::CenterCreatureTransSceneResultRsp(const CenterCreatureTransSceneResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterCreatureTransSceneResultRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  cur_sceneid_ = GOOGLE_ULONGLONG(0);
  dst_sceneid_ = GOOGLE_ULONGLONG(0);
  kind_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterCreatureTransSceneResultRsp::~CenterCreatureTransSceneResultRsp() {
  SharedDtor();
}

void CenterCreatureTransSceneResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterCreatureTransSceneResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterCreatureTransSceneResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterCreatureTransSceneResultRsp_descriptor_;
}

const CenterCreatureTransSceneResultRsp& CenterCreatureTransSceneResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CenterCreatureTransSceneResultRsp* CenterCreatureTransSceneResultRsp::default_instance_ = NULL;

CenterCreatureTransSceneResultRsp* CenterCreatureTransSceneResultRsp::New() const {
  return new CenterCreatureTransSceneResultRsp;
}

void CenterCreatureTransSceneResultRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    cur_sceneid_ = GOOGLE_ULONGLONG(0);
    dst_sceneid_ = GOOGLE_ULONGLONG(0);
    kind_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterCreatureTransSceneResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_sceneid;
        break;
      }

      // required uint64 cur_sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_sceneid_)));
          set_has_cur_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dst_sceneid;
        break;
      }

      // required uint64 dst_sceneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_sceneid_)));
          set_has_dst_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kind;
        break;
      }

      // required int32 kind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kind_)));
          set_has_kind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cid;
        break;
      }

      // required uint64 cid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterCreatureTransSceneResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 cur_sceneid = 2;
  if (has_cur_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cur_sceneid(), output);
  }

  // required uint64 dst_sceneid = 3;
  if (has_dst_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dst_sceneid(), output);
  }

  // required int32 kind = 4;
  if (has_kind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kind(), output);
  }

  // required uint64 cid = 5;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterCreatureTransSceneResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 cur_sceneid = 2;
  if (has_cur_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cur_sceneid(), target);
  }

  // required uint64 dst_sceneid = 3;
  if (has_dst_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dst_sceneid(), target);
  }

  // required int32 kind = 4;
  if (has_kind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kind(), target);
  }

  // required uint64 cid = 5;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterCreatureTransSceneResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 cur_sceneid = 2;
    if (has_cur_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_sceneid());
    }

    // required uint64 dst_sceneid = 3;
    if (has_dst_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_sceneid());
    }

    // required int32 kind = 4;
    if (has_kind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kind());
    }

    // required uint64 cid = 5;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterCreatureTransSceneResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterCreatureTransSceneResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterCreatureTransSceneResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterCreatureTransSceneResultRsp::MergeFrom(const CenterCreatureTransSceneResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_cur_sceneid()) {
      set_cur_sceneid(from.cur_sceneid());
    }
    if (from.has_dst_sceneid()) {
      set_dst_sceneid(from.dst_sceneid());
    }
    if (from.has_kind()) {
      set_kind(from.kind());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterCreatureTransSceneResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterCreatureTransSceneResultRsp::CopyFrom(const CenterCreatureTransSceneResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterCreatureTransSceneResultRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CenterCreatureTransSceneResultRsp::Swap(CenterCreatureTransSceneResultRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(cur_sceneid_, other->cur_sceneid_);
    std::swap(dst_sceneid_, other->dst_sceneid_);
    std::swap(kind_, other->kind_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterCreatureTransSceneResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterCreatureTransSceneResultRsp_descriptor_;
  metadata.reflection = CenterCreatureTransSceneResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterCreatureTransSceneSuccessRsp::kDstSceneidFieldNumber;
const int CenterCreatureTransSceneSuccessRsp::kDstMapidFieldNumber;
const int CenterCreatureTransSceneSuccessRsp::kParamFieldNumber;
const int CenterCreatureTransSceneSuccessRsp::kDstZidFieldNumber;
#endif  // !_MSC_VER

CenterCreatureTransSceneSuccessRsp::CenterCreatureTransSceneSuccessRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterCreatureTransSceneSuccessRsp::InitAsDefaultInstance() {
  param_ = const_cast< ::proto_ff::CreatureTransParam*>(&::proto_ff::CreatureTransParam::default_instance());
}

CenterCreatureTransSceneSuccessRsp::CenterCreatureTransSceneSuccessRsp(const CenterCreatureTransSceneSuccessRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterCreatureTransSceneSuccessRsp::SharedCtor() {
  _cached_size_ = 0;
  dst_sceneid_ = GOOGLE_ULONGLONG(0);
  dst_mapid_ = GOOGLE_ULONGLONG(0);
  param_ = NULL;
  dst_zid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterCreatureTransSceneSuccessRsp::~CenterCreatureTransSceneSuccessRsp() {
  SharedDtor();
}

void CenterCreatureTransSceneSuccessRsp::SharedDtor() {
  if (this != default_instance_) {
    delete param_;
  }
}

void CenterCreatureTransSceneSuccessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterCreatureTransSceneSuccessRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterCreatureTransSceneSuccessRsp_descriptor_;
}

const CenterCreatureTransSceneSuccessRsp& CenterCreatureTransSceneSuccessRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CenterCreatureTransSceneSuccessRsp* CenterCreatureTransSceneSuccessRsp::default_instance_ = NULL;

CenterCreatureTransSceneSuccessRsp* CenterCreatureTransSceneSuccessRsp::New() const {
  return new CenterCreatureTransSceneSuccessRsp;
}

void CenterCreatureTransSceneSuccessRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dst_sceneid_ = GOOGLE_ULONGLONG(0);
    dst_mapid_ = GOOGLE_ULONGLONG(0);
    if (has_param()) {
      if (param_ != NULL) param_->::proto_ff::CreatureTransParam::Clear();
    }
    dst_zid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterCreatureTransSceneSuccessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dst_sceneid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_sceneid_)));
          set_has_dst_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_mapid;
        break;
      }

      // required uint64 dst_mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_mapid_)));
          set_has_dst_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_param;
        break;
      }

      // required .proto_ff.CreatureTransParam param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dst_zid;
        break;
      }

      // optional int32 dst_zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_zid_)));
          set_has_dst_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterCreatureTransSceneSuccessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 dst_sceneid = 1;
  if (has_dst_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dst_sceneid(), output);
  }

  // required uint64 dst_mapid = 2;
  if (has_dst_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_mapid(), output);
  }

  // required .proto_ff.CreatureTransParam param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->param(), output);
  }

  // optional int32 dst_zid = 4;
  if (has_dst_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dst_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterCreatureTransSceneSuccessRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 dst_sceneid = 1;
  if (has_dst_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst_sceneid(), target);
  }

  // required uint64 dst_mapid = 2;
  if (has_dst_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_mapid(), target);
  }

  // required .proto_ff.CreatureTransParam param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->param(), target);
  }

  // optional int32 dst_zid = 4;
  if (has_dst_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dst_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterCreatureTransSceneSuccessRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 dst_sceneid = 1;
    if (has_dst_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_sceneid());
    }

    // required uint64 dst_mapid = 2;
    if (has_dst_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_mapid());
    }

    // required .proto_ff.CreatureTransParam param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

    // optional int32 dst_zid = 4;
    if (has_dst_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterCreatureTransSceneSuccessRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterCreatureTransSceneSuccessRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterCreatureTransSceneSuccessRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterCreatureTransSceneSuccessRsp::MergeFrom(const CenterCreatureTransSceneSuccessRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_sceneid()) {
      set_dst_sceneid(from.dst_sceneid());
    }
    if (from.has_dst_mapid()) {
      set_dst_mapid(from.dst_mapid());
    }
    if (from.has_param()) {
      mutable_param()->::proto_ff::CreatureTransParam::MergeFrom(from.param());
    }
    if (from.has_dst_zid()) {
      set_dst_zid(from.dst_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterCreatureTransSceneSuccessRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterCreatureTransSceneSuccessRsp::CopyFrom(const CenterCreatureTransSceneSuccessRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterCreatureTransSceneSuccessRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_param()) {
    if (!this->param().IsInitialized()) return false;
  }
  return true;
}

void CenterCreatureTransSceneSuccessRsp::Swap(CenterCreatureTransSceneSuccessRsp* other) {
  if (other != this) {
    std::swap(dst_sceneid_, other->dst_sceneid_);
    std::swap(dst_mapid_, other->dst_mapid_);
    std::swap(param_, other->param_);
    std::swap(dst_zid_, other->dst_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterCreatureTransSceneSuccessRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterCreatureTransSceneSuccessRsp_descriptor_;
  metadata.reflection = CenterCreatureTransSceneSuccessRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleEnterScene::kCidFieldNumber;
const int NotifyRoleEnterScene::kSceneIdFieldNumber;
const int NotifyRoleEnterScene::kMapIdFieldNumber;
const int NotifyRoleEnterScene::kSceneZidFieldNumber;
const int NotifyRoleEnterScene::kPosFieldNumber;
#endif  // !_MSC_VER

NotifyRoleEnterScene::NotifyRoleEnterScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleEnterScene::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

NotifyRoleEnterScene::NotifyRoleEnterScene(const NotifyRoleEnterScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleEnterScene::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  scene_id_ = GOOGLE_ULONGLONG(0);
  map_id_ = GOOGLE_ULONGLONG(0);
  scene_zid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleEnterScene::~NotifyRoleEnterScene() {
  SharedDtor();
}

void NotifyRoleEnterScene::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void NotifyRoleEnterScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleEnterScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleEnterScene_descriptor_;
}

const NotifyRoleEnterScene& NotifyRoleEnterScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifyRoleEnterScene* NotifyRoleEnterScene::default_instance_ = NULL;

NotifyRoleEnterScene* NotifyRoleEnterScene::New() const {
  return new NotifyRoleEnterScene;
}

void NotifyRoleEnterScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    scene_id_ = GOOGLE_ULONGLONG(0);
    map_id_ = GOOGLE_ULONGLONG(0);
    scene_zid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleEnterScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scene_id;
        break;
      }

      // required uint64 scene_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &scene_id_)));
          set_has_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_map_id;
        break;
      }

      // required uint64 map_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scene_zid;
        break;
      }

      // required uint32 scene_zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_zid_)));
          set_has_scene_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleEnterScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 scene_id = 2;
  if (has_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->scene_id(), output);
  }

  // required uint64 map_id = 3;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->map_id(), output);
  }

  // required uint32 scene_zid = 4;
  if (has_scene_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene_zid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleEnterScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 scene_id = 2;
  if (has_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->scene_id(), target);
  }

  // required uint64 map_id = 3;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->map_id(), target);
  }

  // required uint32 scene_zid = 4;
  if (has_scene_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene_zid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleEnterScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 scene_id = 2;
    if (has_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->scene_id());
    }

    // required uint64 map_id = 3;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->map_id());
    }

    // required uint32 scene_zid = 4;
    if (has_scene_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene_zid());
    }

    // optional .proto_ff.Vector3PB pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleEnterScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleEnterScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleEnterScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleEnterScene::MergeFrom(const NotifyRoleEnterScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_scene_id()) {
      set_scene_id(from.scene_id());
    }
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_scene_zid()) {
      set_scene_zid(from.scene_zid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleEnterScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleEnterScene::CopyFrom(const NotifyRoleEnterScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleEnterScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void NotifyRoleEnterScene::Swap(NotifyRoleEnterScene* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(scene_id_, other->scene_id_);
    std::swap(map_id_, other->map_id_);
    std::swap(scene_zid_, other->scene_zid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleEnterScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleEnterScene_descriptor_;
  metadata.reflection = NotifyRoleEnterScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleChgLogic::kCidFieldNumber;
const int NotifyRoleChgLogic::kUidFieldNumber;
const int NotifyRoleChgLogic::kClientidFieldNumber;
const int NotifyRoleChgLogic::kLogicidFieldNumber;
#endif  // !_MSC_VER

NotifyRoleChgLogic::NotifyRoleChgLogic()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleChgLogic::InitAsDefaultInstance() {
}

NotifyRoleChgLogic::NotifyRoleChgLogic(const NotifyRoleChgLogic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleChgLogic::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = 0u;
  logicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleChgLogic::~NotifyRoleChgLogic() {
  SharedDtor();
}

void NotifyRoleChgLogic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRoleChgLogic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleChgLogic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleChgLogic_descriptor_;
}

const NotifyRoleChgLogic& NotifyRoleChgLogic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

NotifyRoleChgLogic* NotifyRoleChgLogic::default_instance_ = NULL;

NotifyRoleChgLogic* NotifyRoleChgLogic::New() const {
  return new NotifyRoleChgLogic;
}

void NotifyRoleChgLogic::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = 0u;
    logicid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleChgLogic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint32 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_logicid;
        break;
      }

      // required uint32 logicid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logicid_)));
          set_has_logicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleChgLogic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->clientid(), output);
  }

  // required uint32 logicid = 4;
  if (has_logicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->logicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleChgLogic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->clientid(), target);
  }

  // required uint32 logicid = 4;
  if (has_logicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->logicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleChgLogic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required uint32 logicid = 4;
    if (has_logicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleChgLogic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleChgLogic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleChgLogic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleChgLogic::MergeFrom(const NotifyRoleChgLogic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_logicid()) {
      set_logicid(from.logicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleChgLogic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleChgLogic::CopyFrom(const NotifyRoleChgLogic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleChgLogic::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NotifyRoleChgLogic::Swap(NotifyRoleChgLogic* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(logicid_, other->logicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleChgLogic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleChgLogic_descriptor_;
  metadata.reflection = NotifyRoleChgLogic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_NewSceneReq::kCountFieldNumber;
#endif  // !_MSC_VER

LC_NewSceneReq::LC_NewSceneReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_NewSceneReq::InitAsDefaultInstance() {
}

LC_NewSceneReq::LC_NewSceneReq(const LC_NewSceneReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_NewSceneReq::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_NewSceneReq::~LC_NewSceneReq() {
  SharedDtor();
}

void LC_NewSceneReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_NewSceneReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_NewSceneReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_NewSceneReq_descriptor_;
}

const LC_NewSceneReq& LC_NewSceneReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

LC_NewSceneReq* LC_NewSceneReq::default_instance_ = NULL;

LC_NewSceneReq* LC_NewSceneReq::New() const {
  return new LC_NewSceneReq;
}

void LC_NewSceneReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_NewSceneReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_NewSceneReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_NewSceneReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_NewSceneReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_NewSceneReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_NewSceneReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_NewSceneReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_NewSceneReq::MergeFrom(const LC_NewSceneReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_NewSceneReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_NewSceneReq::CopyFrom(const LC_NewSceneReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_NewSceneReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LC_NewSceneReq::Swap(LC_NewSceneReq* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_NewSceneReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_NewSceneReq_descriptor_;
  metadata.reflection = LC_NewSceneReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_NewSceneRsp::kZidFieldNumber;
const int CL_NewSceneRsp::kSceneidLstFieldNumber;
#endif  // !_MSC_VER

CL_NewSceneRsp::CL_NewSceneRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_NewSceneRsp::InitAsDefaultInstance() {
}

CL_NewSceneRsp::CL_NewSceneRsp(const CL_NewSceneRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_NewSceneRsp::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_NewSceneRsp::~CL_NewSceneRsp() {
  SharedDtor();
}

void CL_NewSceneRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_NewSceneRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_NewSceneRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_NewSceneRsp_descriptor_;
}

const CL_NewSceneRsp& CL_NewSceneRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CL_NewSceneRsp* CL_NewSceneRsp::default_instance_ = NULL;

CL_NewSceneRsp* CL_NewSceneRsp::New() const {
  return new CL_NewSceneRsp;
}

void CL_NewSceneRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
  }
  sceneid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_NewSceneRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid_lst;
        break;
      }

      // repeated uint64 sceneid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_sceneid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sceneid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_NewSceneRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // repeated uint64 sceneid_lst = 2;
  for (int i = 0; i < this->sceneid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->sceneid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_NewSceneRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // repeated uint64 sceneid_lst = 2;
  for (int i = 0; i < this->sceneid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->sceneid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_NewSceneRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  // repeated uint64 sceneid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->sceneid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sceneid_lst(i));
    }
    total_size += 1 * this->sceneid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_NewSceneRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_NewSceneRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_NewSceneRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_NewSceneRsp::MergeFrom(const CL_NewSceneRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneid_lst_.MergeFrom(from.sceneid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_NewSceneRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_NewSceneRsp::CopyFrom(const CL_NewSceneRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_NewSceneRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CL_NewSceneRsp::Swap(CL_NewSceneRsp* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    sceneid_lst_.Swap(&other->sceneid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_NewSceneRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_NewSceneRsp_descriptor_;
  metadata.reflection = CL_NewSceneRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_MainCityInfoReq::kInfoFieldNumber;
#endif  // !_MSC_VER

LC_MainCityInfoReq::LC_MainCityInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_MainCityInfoReq::InitAsDefaultInstance() {
}

LC_MainCityInfoReq::LC_MainCityInfoReq(const LC_MainCityInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_MainCityInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_MainCityInfoReq::~LC_MainCityInfoReq() {
  SharedDtor();
}

void LC_MainCityInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LC_MainCityInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_MainCityInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_MainCityInfoReq_descriptor_;
}

const LC_MainCityInfoReq& LC_MainCityInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

LC_MainCityInfoReq* LC_MainCityInfoReq::default_instance_ = NULL;

LC_MainCityInfoReq* LC_MainCityInfoReq::New() const {
  return new LC_MainCityInfoReq;
}

void LC_MainCityInfoReq::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_MainCityInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SceneProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_MainCityInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SceneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_MainCityInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SceneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_MainCityInfoReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SceneProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_MainCityInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_MainCityInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_MainCityInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_MainCityInfoReq::MergeFrom(const LC_MainCityInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_MainCityInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_MainCityInfoReq::CopyFrom(const LC_MainCityInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_MainCityInfoReq::IsInitialized() const {

  return true;
}

void LC_MainCityInfoReq::Swap(LC_MainCityInfoReq* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_MainCityInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_MainCityInfoReq_descriptor_;
  metadata.reflection = LC_MainCityInfoReq_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CL_MainCityInfoRsp_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_MainCityInfoRsp_Type_descriptor_;
}
bool CL_MainCityInfoRsp_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CL_MainCityInfoRsp_Type CL_MainCityInfoRsp::update;
const CL_MainCityInfoRsp_Type CL_MainCityInfoRsp::all;
const CL_MainCityInfoRsp_Type CL_MainCityInfoRsp::Type_MIN;
const CL_MainCityInfoRsp_Type CL_MainCityInfoRsp::Type_MAX;
const int CL_MainCityInfoRsp::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CL_MainCityInfoRsp::kTypeFieldNumber;
const int CL_MainCityInfoRsp::kInfoFieldNumber;
const int CL_MainCityInfoRsp::kDelSceneFieldNumber;
#endif  // !_MSC_VER

CL_MainCityInfoRsp::CL_MainCityInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_MainCityInfoRsp::InitAsDefaultInstance() {
}

CL_MainCityInfoRsp::CL_MainCityInfoRsp(const CL_MainCityInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_MainCityInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_MainCityInfoRsp::~CL_MainCityInfoRsp() {
  SharedDtor();
}

void CL_MainCityInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CL_MainCityInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_MainCityInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_MainCityInfoRsp_descriptor_;
}

const CL_MainCityInfoRsp& CL_MainCityInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CL_MainCityInfoRsp* CL_MainCityInfoRsp::default_instance_ = NULL;

CL_MainCityInfoRsp* CL_MainCityInfoRsp::New() const {
  return new CL_MainCityInfoRsp;
}

void CL_MainCityInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  info_.Clear();
  del_scene_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_MainCityInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.SceneProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_del_scene;
        break;
      }

      // repeated uint64 del_scene = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_del_scene())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_scene())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_del_scene;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_MainCityInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .proto_ff.SceneProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // repeated uint64 del_scene = 3;
  for (int i = 0; i < this->del_scene_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->del_scene(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_MainCityInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.SceneProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // repeated uint64 del_scene = 3;
  for (int i = 0; i < this->del_scene_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->del_scene(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_MainCityInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .proto_ff.SceneProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated uint64 del_scene = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_scene_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_scene(i));
    }
    total_size += 1 * this->del_scene_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_MainCityInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_MainCityInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_MainCityInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_MainCityInfoRsp::MergeFrom(const CL_MainCityInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  del_scene_.MergeFrom(from.del_scene_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_MainCityInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_MainCityInfoRsp::CopyFrom(const CL_MainCityInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_MainCityInfoRsp::IsInitialized() const {

  return true;
}

void CL_MainCityInfoRsp::Swap(CL_MainCityInfoRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    info_.Swap(&other->info_);
    del_scene_.Swap(&other->del_scene_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_MainCityInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_MainCityInfoRsp_descriptor_;
  metadata.reflection = CL_MainCityInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGenSceneIdReq::kSessionFieldNumber;
#endif  // !_MSC_VER

CSGenSceneIdReq::CSGenSceneIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGenSceneIdReq::InitAsDefaultInstance() {
}

CSGenSceneIdReq::CSGenSceneIdReq(const CSGenSceneIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGenSceneIdReq::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGenSceneIdReq::~CSGenSceneIdReq() {
  SharedDtor();
}

void CSGenSceneIdReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGenSceneIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGenSceneIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGenSceneIdReq_descriptor_;
}

const CSGenSceneIdReq& CSGenSceneIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CSGenSceneIdReq* CSGenSceneIdReq::default_instance_ = NULL;

CSGenSceneIdReq* CSGenSceneIdReq::New() const {
  return new CSGenSceneIdReq;
}

void CSGenSceneIdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGenSceneIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGenSceneIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGenSceneIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGenSceneIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGenSceneIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGenSceneIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGenSceneIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGenSceneIdReq::MergeFrom(const CSGenSceneIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGenSceneIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGenSceneIdReq::CopyFrom(const CSGenSceneIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGenSceneIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGenSceneIdReq::Swap(CSGenSceneIdReq* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGenSceneIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGenSceneIdReq_descriptor_;
  metadata.reflection = CSGenSceneIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGenSceneIdRsp::kSessionFieldNumber;
const int CSGenSceneIdRsp::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CSGenSceneIdRsp::CSGenSceneIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGenSceneIdRsp::InitAsDefaultInstance() {
}

CSGenSceneIdRsp::CSGenSceneIdRsp(const CSGenSceneIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGenSceneIdRsp::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGenSceneIdRsp::~CSGenSceneIdRsp() {
  SharedDtor();
}

void CSGenSceneIdRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGenSceneIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGenSceneIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGenSceneIdRsp_descriptor_;
}

const CSGenSceneIdRsp& CSGenSceneIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CSGenSceneIdRsp* CSGenSceneIdRsp::default_instance_ = NULL;

CSGenSceneIdRsp* CSGenSceneIdRsp::New() const {
  return new CSGenSceneIdRsp;
}

void CSGenSceneIdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGenSceneIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneId;
        break;
      }

      // required uint64 sceneId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGenSceneIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  // required uint64 sceneId = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGenSceneIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  // required uint64 sceneId = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGenSceneIdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // required uint64 sceneId = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGenSceneIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGenSceneIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGenSceneIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGenSceneIdRsp::MergeFrom(const CSGenSceneIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGenSceneIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGenSceneIdRsp::CopyFrom(const CSGenSceneIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGenSceneIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGenSceneIdRsp::Swap(CSGenSceneIdRsp* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGenSceneIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGenSceneIdRsp_descriptor_;
  metadata.reflection = CSGenSceneIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSNtLSCreateScene::kSessionFieldNumber;
const int CSNtLSCreateScene::kMapIdFieldNumber;
const int CSNtLSCreateScene::kSceneIdFieldNumber;
const int CSNtLSCreateScene::kZidFieldNumber;
#endif  // !_MSC_VER

CSNtLSCreateScene::CSNtLSCreateScene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSNtLSCreateScene::InitAsDefaultInstance() {
}

CSNtLSCreateScene::CSNtLSCreateScene(const CSNtLSCreateScene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSNtLSCreateScene::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  sceneid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNtLSCreateScene::~CSNtLSCreateScene() {
  SharedDtor();
}

void CSNtLSCreateScene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSNtLSCreateScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSNtLSCreateScene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSNtLSCreateScene_descriptor_;
}

const CSNtLSCreateScene& CSNtLSCreateScene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CSNtLSCreateScene* CSNtLSCreateScene::default_instance_ = NULL;

CSNtLSCreateScene* CSNtLSCreateScene::New() const {
  return new CSNtLSCreateScene;
}

void CSNtLSCreateScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    sceneid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSNtLSCreateScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneId;
        break;
      }

      // required uint64 sceneId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNtLSCreateScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // required uint64 sceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSNtLSCreateScene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // required uint64 sceneId = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSNtLSCreateScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // required uint32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint64 sceneId = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNtLSCreateScene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSNtLSCreateScene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSNtLSCreateScene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSNtLSCreateScene::MergeFrom(const CSNtLSCreateScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSNtLSCreateScene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSNtLSCreateScene::CopyFrom(const CSNtLSCreateScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNtLSCreateScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSNtLSCreateScene::Swap(CSNtLSCreateScene* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(mapid_, other->mapid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSNtLSCreateScene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSNtLSCreateScene_descriptor_;
  metadata.reflection = CSNtLSCreateScene_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegToCenterServer::kSessionFieldNumber;
const int CSRegToCenterServer::kMapIdFieldNumber;
const int CSRegToCenterServer::kSceneIdFieldNumber;
#endif  // !_MSC_VER

CSRegToCenterServer::CSRegToCenterServer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSRegToCenterServer::InitAsDefaultInstance() {
}

CSRegToCenterServer::CSRegToCenterServer(const CSRegToCenterServer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegToCenterServer::SharedCtor() {
  _cached_size_ = 0;
  session_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  sceneid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegToCenterServer::~CSRegToCenterServer() {
  SharedDtor();
}

void CSRegToCenterServer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSRegToCenterServer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSRegToCenterServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSRegToCenterServer_descriptor_;
}

const CSRegToCenterServer& CSRegToCenterServer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CSRegToCenterServer* CSRegToCenterServer::default_instance_ = NULL;

CSRegToCenterServer* CSRegToCenterServer::New() const {
  return new CSRegToCenterServer;
}

void CSRegToCenterServer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    session_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    sceneid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSRegToCenterServer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 session = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &session_)));
          set_has_session();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // required uint32 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sceneId;
        break;
      }

      // required uint64 sceneId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegToCenterServer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 session = 1;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->session(), output);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapid(), output);
  }

  // required uint64 sceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSRegToCenterServer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 session = 1;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->session(), target);
  }

  // required uint32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapid(), target);
  }

  // required uint64 sceneId = 3;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSRegToCenterServer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 session = 1;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->session());
    }

    // required uint32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint64 sceneId = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegToCenterServer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSRegToCenterServer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSRegToCenterServer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSRegToCenterServer::MergeFrom(const CSRegToCenterServer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session()) {
      set_session(from.session());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSRegToCenterServer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSRegToCenterServer::CopyFrom(const CSRegToCenterServer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegToCenterServer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSRegToCenterServer::Swap(CSRegToCenterServer* other) {
  if (other != this) {
    std::swap(session_, other->session_);
    std::swap(mapid_, other->mapid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSRegToCenterServer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSRegToCenterServer_descriptor_;
  metadata.reflection = CSRegToCenterServer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSDestroyReq::kSceneIdFieldNumber;
const int CSDestroyReq::kNotifyLogicServerFieldNumber;
#endif  // !_MSC_VER

CSDestroyReq::CSDestroyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSDestroyReq::InitAsDefaultInstance() {
}

CSDestroyReq::CSDestroyReq(const CSDestroyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSDestroyReq::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = GOOGLE_ULONGLONG(0);
  notifylogicserver_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDestroyReq::~CSDestroyReq() {
  SharedDtor();
}

void CSDestroyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSDestroyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSDestroyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSDestroyReq_descriptor_;
}

const CSDestroyReq& CSDestroyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Scene_2eproto();
  return *default_instance_;
}

CSDestroyReq* CSDestroyReq::default_instance_ = NULL;

CSDestroyReq* CSDestroyReq::New() const {
  return new CSDestroyReq;
}

void CSDestroyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = GOOGLE_ULONGLONG(0);
    notifylogicserver_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSDestroyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 sceneId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_notifyLogicServer;
        break;
      }

      // required bool notifyLogicServer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notifyLogicServer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notifylogicserver_)));
          set_has_notifylogicserver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDestroyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->sceneid(), output);
  }

  // required bool notifyLogicServer = 2;
  if (has_notifylogicserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->notifylogicserver(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSDestroyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 sceneId = 1;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->sceneid(), target);
  }

  // required bool notifyLogicServer = 2;
  if (has_notifylogicserver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->notifylogicserver(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSDestroyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 sceneId = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // required bool notifyLogicServer = 2;
    if (has_notifylogicserver()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDestroyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSDestroyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSDestroyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSDestroyReq::MergeFrom(const CSDestroyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_notifylogicserver()) {
      set_notifylogicserver(from.notifylogicserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSDestroyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSDestroyReq::CopyFrom(const CSDestroyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDestroyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDestroyReq::Swap(CSDestroyReq* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(notifylogicserver_, other->notifylogicserver_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSDestroyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSDestroyReq_descriptor_;
  metadata.reflection = CSDestroyReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
