// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CGodEvil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CGodEvil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GodEvil_FetchPreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchPreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchPreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchPreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchTaskReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchTaskReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_FetchTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_FetchTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpdateTaskRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpdateTaskRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_UpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_UpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChgFacadeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChgFacadeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_BuyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_BuyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_BuyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_BuyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_PrivLevNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_PrivLevNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ChangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ChangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvil_ExtraExpNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvil_ExtraExpNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CGodEvil_2eproto() {
  protobuf_AddDesc_CGodEvil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CGodEvil.proto");
  GOOGLE_CHECK(file != NULL);
  GodEvil_FetchPreReq_descriptor_ = file->message_type(0);
  static const int GodEvil_FetchPreReq_offsets_[1] = {
  };
  GodEvil_FetchPreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchPreReq_descriptor_,
      GodEvil_FetchPreReq::default_instance_,
      GodEvil_FetchPreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchPreReq));
  GodEvil_FetchPreRsp_descriptor_ = file->message_type(1);
  static const int GodEvil_FetchPreRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, ret_),
  };
  GodEvil_FetchPreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchPreRsp_descriptor_,
      GodEvil_FetchPreRsp::default_instance_,
      GodEvil_FetchPreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchPreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchPreRsp));
  GodEvil_FetchTaskReq_descriptor_ = file->message_type(2);
  static const int GodEvil_FetchTaskReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, id_),
  };
  GodEvil_FetchTaskReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchTaskReq_descriptor_,
      GodEvil_FetchTaskReq::default_instance_,
      GodEvil_FetchTaskReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchTaskReq));
  GodEvil_FetchTaskRsp_descriptor_ = file->message_type(3);
  static const int GodEvil_FetchTaskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, ret_),
  };
  GodEvil_FetchTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_FetchTaskRsp_descriptor_,
      GodEvil_FetchTaskRsp::default_instance_,
      GodEvil_FetchTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_FetchTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_FetchTaskRsp));
  GodEvil_UpdateTaskRsp_descriptor_ = file->message_type(4);
  static const int GodEvil_UpdateTaskRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, stage_),
  };
  GodEvil_UpdateTaskRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpdateTaskRsp_descriptor_,
      GodEvil_UpdateTaskRsp::default_instance_,
      GodEvil_UpdateTaskRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpdateTaskRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpdateTaskRsp));
  GodEvil_ActiveReq_descriptor_ = file->message_type(5);
  static const int GodEvil_ActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, type_),
  };
  GodEvil_ActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ActiveReq_descriptor_,
      GodEvil_ActiveReq::default_instance_,
      GodEvil_ActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ActiveReq));
  GodEvil_ActiveRsp_descriptor_ = file->message_type(6);
  static const int GodEvil_ActiveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, type_),
  };
  GodEvil_ActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ActiveRsp_descriptor_,
      GodEvil_ActiveRsp::default_instance_,
      GodEvil_ActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ActiveRsp));
  GodEvil_UpgradeReq_descriptor_ = file->message_type(7);
  static const int GodEvil_UpgradeReq_offsets_[1] = {
  };
  GodEvil_UpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpgradeReq_descriptor_,
      GodEvil_UpgradeReq::default_instance_,
      GodEvil_UpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpgradeReq));
  GodEvil_UpgradeRsp_descriptor_ = file->message_type(8);
  static const int GodEvil_UpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, ret_),
  };
  GodEvil_UpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_UpgradeRsp_descriptor_,
      GodEvil_UpgradeRsp::default_instance_,
      GodEvil_UpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_UpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_UpgradeRsp));
  GodEvil_ChgFacadeReq_descriptor_ = file->message_type(9);
  static const int GodEvil_ChgFacadeReq_offsets_[1] = {
  };
  GodEvil_ChgFacadeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChgFacadeReq_descriptor_,
      GodEvil_ChgFacadeReq::default_instance_,
      GodEvil_ChgFacadeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChgFacadeReq));
  GodEvil_ChgFacadeRsp_descriptor_ = file->message_type(10);
  static const int GodEvil_ChgFacadeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, cd_),
  };
  GodEvil_ChgFacadeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChgFacadeRsp_descriptor_,
      GodEvil_ChgFacadeRsp::default_instance_,
      GodEvil_ChgFacadeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChgFacadeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChgFacadeRsp));
  GodEvil_BuyReq_descriptor_ = file->message_type(11);
  static const int GodEvil_BuyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, type_),
  };
  GodEvil_BuyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_BuyReq_descriptor_,
      GodEvil_BuyReq::default_instance_,
      GodEvil_BuyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_BuyReq));
  GodEvil_BuyRsp_descriptor_ = file->message_type(12);
  static const int GodEvil_BuyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, ret_),
  };
  GodEvil_BuyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_BuyRsp_descriptor_,
      GodEvil_BuyRsp::default_instance_,
      GodEvil_BuyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_BuyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_BuyRsp));
  GodEvil_PrivLevNotify_descriptor_ = file->message_type(13);
  static const int GodEvil_PrivLevNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, vessel_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, mirror_lev_),
  };
  GodEvil_PrivLevNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_PrivLevNotify_descriptor_,
      GodEvil_PrivLevNotify::default_instance_,
      GodEvil_PrivLevNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_PrivLevNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_PrivLevNotify));
  GodEvil_ChangeReq_descriptor_ = file->message_type(14);
  static const int GodEvil_ChangeReq_offsets_[1] = {
  };
  GodEvil_ChangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChangeReq_descriptor_,
      GodEvil_ChangeReq::default_instance_,
      GodEvil_ChangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChangeReq));
  GodEvil_ChangeRsp_descriptor_ = file->message_type(15);
  static const int GodEvil_ChangeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, type_),
  };
  GodEvil_ChangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ChangeRsp_descriptor_,
      GodEvil_ChangeRsp::default_instance_,
      GodEvil_ChangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ChangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ChangeRsp));
  GodEvil_ExtraExpNotify_descriptor_ = file->message_type(16);
  static const int GodEvil_ExtraExpNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, extra_exp_),
  };
  GodEvil_ExtraExpNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvil_ExtraExpNotify_descriptor_,
      GodEvil_ExtraExpNotify::default_instance_,
      GodEvil_ExtraExpNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvil_ExtraExpNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvil_ExtraExpNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CGodEvil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchPreReq_descriptor_, &GodEvil_FetchPreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchPreRsp_descriptor_, &GodEvil_FetchPreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchTaskReq_descriptor_, &GodEvil_FetchTaskReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_FetchTaskRsp_descriptor_, &GodEvil_FetchTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpdateTaskRsp_descriptor_, &GodEvil_UpdateTaskRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ActiveReq_descriptor_, &GodEvil_ActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ActiveRsp_descriptor_, &GodEvil_ActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpgradeReq_descriptor_, &GodEvil_UpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_UpgradeRsp_descriptor_, &GodEvil_UpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChgFacadeReq_descriptor_, &GodEvil_ChgFacadeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChgFacadeRsp_descriptor_, &GodEvil_ChgFacadeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_BuyReq_descriptor_, &GodEvil_BuyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_BuyRsp_descriptor_, &GodEvil_BuyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_PrivLevNotify_descriptor_, &GodEvil_PrivLevNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChangeReq_descriptor_, &GodEvil_ChangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ChangeRsp_descriptor_, &GodEvil_ChangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvil_ExtraExpNotify_descriptor_, &GodEvil_ExtraExpNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CGodEvil_2eproto() {
  delete GodEvil_FetchPreReq::default_instance_;
  delete GodEvil_FetchPreReq_reflection_;
  delete GodEvil_FetchPreRsp::default_instance_;
  delete GodEvil_FetchPreRsp_reflection_;
  delete GodEvil_FetchTaskReq::default_instance_;
  delete GodEvil_FetchTaskReq_reflection_;
  delete GodEvil_FetchTaskRsp::default_instance_;
  delete GodEvil_FetchTaskRsp_reflection_;
  delete GodEvil_UpdateTaskRsp::default_instance_;
  delete GodEvil_UpdateTaskRsp_reflection_;
  delete GodEvil_ActiveReq::default_instance_;
  delete GodEvil_ActiveReq_reflection_;
  delete GodEvil_ActiveRsp::default_instance_;
  delete GodEvil_ActiveRsp_reflection_;
  delete GodEvil_UpgradeReq::default_instance_;
  delete GodEvil_UpgradeReq_reflection_;
  delete GodEvil_UpgradeRsp::default_instance_;
  delete GodEvil_UpgradeRsp_reflection_;
  delete GodEvil_ChgFacadeReq::default_instance_;
  delete GodEvil_ChgFacadeReq_reflection_;
  delete GodEvil_ChgFacadeRsp::default_instance_;
  delete GodEvil_ChgFacadeRsp_reflection_;
  delete GodEvil_BuyReq::default_instance_;
  delete GodEvil_BuyReq_reflection_;
  delete GodEvil_BuyRsp::default_instance_;
  delete GodEvil_BuyRsp_reflection_;
  delete GodEvil_PrivLevNotify::default_instance_;
  delete GodEvil_PrivLevNotify_reflection_;
  delete GodEvil_ChangeReq::default_instance_;
  delete GodEvil_ChangeReq_reflection_;
  delete GodEvil_ChangeRsp::default_instance_;
  delete GodEvil_ChangeRsp_reflection_;
  delete GodEvil_ExtraExpNotify::default_instance_;
  delete GodEvil_ExtraExpNotify_reflection_;
}

void protobuf_AddDesc_CGodEvil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016CGodEvil.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\032\022common_logic.proto\032\tCom.proto"
    "\"\025\n\023GodEvil_FetchPreReq\"\"\n\023GodEvil_Fetch"
    "PreRsp\022\013\n\003ret\030\001 \002(\005\"\"\n\024GodEvil_FetchTask"
    "Req\022\n\n\002id\030\001 \001(\005\"#\n\024GodEvil_FetchTaskRsp\022"
    "\013\n\003ret\030\001 \002(\005\"C\n\025GodEvil_UpdateTaskRsp\022*\n"
    "\005stage\030\001 \001(\0132\033.proto_ff.GodEvilStageProt"
    "o\"!\n\021GodEvil_ActiveReq\022\014\n\004type\030\001 \001(\005\".\n\021"
    "GodEvil_ActiveRsp\022\013\n\003ret\030\001 \002(\005\022\014\n\004type\030\002"
    " \001(\005\"\024\n\022GodEvil_UpgradeReq\"!\n\022GodEvil_Up"
    "gradeRsp\022\013\n\003ret\030\001 \002(\005\"\026\n\024GodEvil_ChgFaca"
    "deReq\"/\n\024GodEvil_ChgFacadeRsp\022\013\n\003ret\030\001 \002"
    "(\005\022\n\n\002cd\030\002 \001(\005\"\036\n\016GodEvil_BuyReq\022\014\n\004type"
    "\030\001 \001(\005\"\035\n\016GodEvil_BuyRsp\022\013\n\003ret\030\001 \002(\005\"\?\n"
    "\025GodEvil_PrivLevNotify\022\022\n\nvessel_lev\030\001 \001"
    "(\005\022\022\n\nmirror_lev\030\002 \001(\005\"\023\n\021GodEvil_Change"
    "Req\".\n\021GodEvil_ChangeRsp\022\013\n\003ret\030\001 \002(\005\022\014\n"
    "\004type\030\002 \001(\005\"+\n\026GodEvil_ExtraExpNotify\022\021\n"
    "\textra_exp\030\001 \002(\003", 736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CGodEvil.proto", &protobuf_RegisterTypes);
  GodEvil_FetchPreReq::default_instance_ = new GodEvil_FetchPreReq();
  GodEvil_FetchPreRsp::default_instance_ = new GodEvil_FetchPreRsp();
  GodEvil_FetchTaskReq::default_instance_ = new GodEvil_FetchTaskReq();
  GodEvil_FetchTaskRsp::default_instance_ = new GodEvil_FetchTaskRsp();
  GodEvil_UpdateTaskRsp::default_instance_ = new GodEvil_UpdateTaskRsp();
  GodEvil_ActiveReq::default_instance_ = new GodEvil_ActiveReq();
  GodEvil_ActiveRsp::default_instance_ = new GodEvil_ActiveRsp();
  GodEvil_UpgradeReq::default_instance_ = new GodEvil_UpgradeReq();
  GodEvil_UpgradeRsp::default_instance_ = new GodEvil_UpgradeRsp();
  GodEvil_ChgFacadeReq::default_instance_ = new GodEvil_ChgFacadeReq();
  GodEvil_ChgFacadeRsp::default_instance_ = new GodEvil_ChgFacadeRsp();
  GodEvil_BuyReq::default_instance_ = new GodEvil_BuyReq();
  GodEvil_BuyRsp::default_instance_ = new GodEvil_BuyRsp();
  GodEvil_PrivLevNotify::default_instance_ = new GodEvil_PrivLevNotify();
  GodEvil_ChangeReq::default_instance_ = new GodEvil_ChangeReq();
  GodEvil_ChangeRsp::default_instance_ = new GodEvil_ChangeRsp();
  GodEvil_ExtraExpNotify::default_instance_ = new GodEvil_ExtraExpNotify();
  GodEvil_FetchPreReq::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchPreRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchTaskReq::default_instance_->InitAsDefaultInstance();
  GodEvil_FetchTaskRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_UpdateTaskRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ActiveReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ActiveRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_UpgradeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_UpgradeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ChgFacadeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ChgFacadeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_BuyReq::default_instance_->InitAsDefaultInstance();
  GodEvil_BuyRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_PrivLevNotify::default_instance_->InitAsDefaultInstance();
  GodEvil_ChangeReq::default_instance_->InitAsDefaultInstance();
  GodEvil_ChangeRsp::default_instance_->InitAsDefaultInstance();
  GodEvil_ExtraExpNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CGodEvil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CGodEvil_2eproto {
  StaticDescriptorInitializer_CGodEvil_2eproto() {
    protobuf_AddDesc_CGodEvil_2eproto();
  }
} static_descriptor_initializer_CGodEvil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_FetchPreReq::GodEvil_FetchPreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchPreReq::InitAsDefaultInstance() {
}

GodEvil_FetchPreReq::GodEvil_FetchPreReq(const GodEvil_FetchPreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchPreReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchPreReq::~GodEvil_FetchPreReq() {
  SharedDtor();
}

void GodEvil_FetchPreReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchPreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchPreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchPreReq_descriptor_;
}

const GodEvil_FetchPreReq& GodEvil_FetchPreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchPreReq* GodEvil_FetchPreReq::default_instance_ = NULL;

GodEvil_FetchPreReq* GodEvil_FetchPreReq::New() const {
  return new GodEvil_FetchPreReq;
}

void GodEvil_FetchPreReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchPreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_FetchPreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchPreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchPreReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchPreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchPreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchPreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchPreReq::MergeFrom(const GodEvil_FetchPreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchPreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchPreReq::CopyFrom(const GodEvil_FetchPreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchPreReq::IsInitialized() const {

  return true;
}

void GodEvil_FetchPreReq::Swap(GodEvil_FetchPreReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchPreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchPreReq_descriptor_;
  metadata.reflection = GodEvil_FetchPreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchPreRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchPreRsp::GodEvil_FetchPreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchPreRsp::InitAsDefaultInstance() {
}

GodEvil_FetchPreRsp::GodEvil_FetchPreRsp(const GodEvil_FetchPreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchPreRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchPreRsp::~GodEvil_FetchPreRsp() {
  SharedDtor();
}

void GodEvil_FetchPreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchPreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchPreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchPreRsp_descriptor_;
}

const GodEvil_FetchPreRsp& GodEvil_FetchPreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchPreRsp* GodEvil_FetchPreRsp::default_instance_ = NULL;

GodEvil_FetchPreRsp* GodEvil_FetchPreRsp::New() const {
  return new GodEvil_FetchPreRsp;
}

void GodEvil_FetchPreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchPreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchPreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchPreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchPreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchPreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchPreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchPreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchPreRsp::MergeFrom(const GodEvil_FetchPreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchPreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchPreRsp::CopyFrom(const GodEvil_FetchPreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchPreRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_FetchPreRsp::Swap(GodEvil_FetchPreRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchPreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchPreRsp_descriptor_;
  metadata.reflection = GodEvil_FetchPreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchTaskReq::kIdFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchTaskReq::GodEvil_FetchTaskReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchTaskReq::InitAsDefaultInstance() {
}

GodEvil_FetchTaskReq::GodEvil_FetchTaskReq(const GodEvil_FetchTaskReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchTaskReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchTaskReq::~GodEvil_FetchTaskReq() {
  SharedDtor();
}

void GodEvil_FetchTaskReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchTaskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchTaskReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchTaskReq_descriptor_;
}

const GodEvil_FetchTaskReq& GodEvil_FetchTaskReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchTaskReq* GodEvil_FetchTaskReq::default_instance_ = NULL;

GodEvil_FetchTaskReq* GodEvil_FetchTaskReq::New() const {
  return new GodEvil_FetchTaskReq;
}

void GodEvil_FetchTaskReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchTaskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchTaskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchTaskReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchTaskReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchTaskReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchTaskReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchTaskReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchTaskReq::MergeFrom(const GodEvil_FetchTaskReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchTaskReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchTaskReq::CopyFrom(const GodEvil_FetchTaskReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchTaskReq::IsInitialized() const {

  return true;
}

void GodEvil_FetchTaskReq::Swap(GodEvil_FetchTaskReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchTaskReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchTaskReq_descriptor_;
  metadata.reflection = GodEvil_FetchTaskReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_FetchTaskRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_FetchTaskRsp::GodEvil_FetchTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_FetchTaskRsp::InitAsDefaultInstance() {
}

GodEvil_FetchTaskRsp::GodEvil_FetchTaskRsp(const GodEvil_FetchTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_FetchTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_FetchTaskRsp::~GodEvil_FetchTaskRsp() {
  SharedDtor();
}

void GodEvil_FetchTaskRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_FetchTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_FetchTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_FetchTaskRsp_descriptor_;
}

const GodEvil_FetchTaskRsp& GodEvil_FetchTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_FetchTaskRsp* GodEvil_FetchTaskRsp::default_instance_ = NULL;

GodEvil_FetchTaskRsp* GodEvil_FetchTaskRsp::New() const {
  return new GodEvil_FetchTaskRsp;
}

void GodEvil_FetchTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_FetchTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_FetchTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_FetchTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_FetchTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_FetchTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_FetchTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_FetchTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_FetchTaskRsp::MergeFrom(const GodEvil_FetchTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_FetchTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_FetchTaskRsp::CopyFrom(const GodEvil_FetchTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_FetchTaskRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_FetchTaskRsp::Swap(GodEvil_FetchTaskRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_FetchTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_FetchTaskRsp_descriptor_;
  metadata.reflection = GodEvil_FetchTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_UpdateTaskRsp::kStageFieldNumber;
#endif  // !_MSC_VER

GodEvil_UpdateTaskRsp::GodEvil_UpdateTaskRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpdateTaskRsp::InitAsDefaultInstance() {
  stage_ = const_cast< ::proto_ff::GodEvilStageProto*>(&::proto_ff::GodEvilStageProto::default_instance());
}

GodEvil_UpdateTaskRsp::GodEvil_UpdateTaskRsp(const GodEvil_UpdateTaskRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpdateTaskRsp::SharedCtor() {
  _cached_size_ = 0;
  stage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpdateTaskRsp::~GodEvil_UpdateTaskRsp() {
  SharedDtor();
}

void GodEvil_UpdateTaskRsp::SharedDtor() {
  if (this != default_instance_) {
    delete stage_;
  }
}

void GodEvil_UpdateTaskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpdateTaskRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpdateTaskRsp_descriptor_;
}

const GodEvil_UpdateTaskRsp& GodEvil_UpdateTaskRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpdateTaskRsp* GodEvil_UpdateTaskRsp::default_instance_ = NULL;

GodEvil_UpdateTaskRsp* GodEvil_UpdateTaskRsp::New() const {
  return new GodEvil_UpdateTaskRsp;
}

void GodEvil_UpdateTaskRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stage()) {
      if (stage_ != NULL) stage_->::proto_ff::GodEvilStageProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpdateTaskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GodEvilStageProto stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_UpdateTaskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GodEvilStageProto stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpdateTaskRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GodEvilStageProto stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpdateTaskRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GodEvilStageProto stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpdateTaskRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpdateTaskRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpdateTaskRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpdateTaskRsp::MergeFrom(const GodEvil_UpdateTaskRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      mutable_stage()->::proto_ff::GodEvilStageProto::MergeFrom(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpdateTaskRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpdateTaskRsp::CopyFrom(const GodEvil_UpdateTaskRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpdateTaskRsp::IsInitialized() const {

  return true;
}

void GodEvil_UpdateTaskRsp::Swap(GodEvil_UpdateTaskRsp* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpdateTaskRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpdateTaskRsp_descriptor_;
  metadata.reflection = GodEvil_UpdateTaskRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ActiveReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ActiveReq::GodEvil_ActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ActiveReq::InitAsDefaultInstance() {
}

GodEvil_ActiveReq::GodEvil_ActiveReq(const GodEvil_ActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ActiveReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ActiveReq::~GodEvil_ActiveReq() {
  SharedDtor();
}

void GodEvil_ActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ActiveReq_descriptor_;
}

const GodEvil_ActiveReq& GodEvil_ActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ActiveReq* GodEvil_ActiveReq::default_instance_ = NULL;

GodEvil_ActiveReq* GodEvil_ActiveReq::New() const {
  return new GodEvil_ActiveReq;
}

void GodEvil_ActiveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ActiveReq::MergeFrom(const GodEvil_ActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ActiveReq::CopyFrom(const GodEvil_ActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ActiveReq::IsInitialized() const {

  return true;
}

void GodEvil_ActiveReq::Swap(GodEvil_ActiveReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ActiveReq_descriptor_;
  metadata.reflection = GodEvil_ActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ActiveRsp::kRetFieldNumber;
const int GodEvil_ActiveRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ActiveRsp::GodEvil_ActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ActiveRsp::InitAsDefaultInstance() {
}

GodEvil_ActiveRsp::GodEvil_ActiveRsp(const GodEvil_ActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ActiveRsp::~GodEvil_ActiveRsp() {
  SharedDtor();
}

void GodEvil_ActiveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ActiveRsp_descriptor_;
}

const GodEvil_ActiveRsp& GodEvil_ActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ActiveRsp* GodEvil_ActiveRsp::default_instance_ = NULL;

GodEvil_ActiveRsp* GodEvil_ActiveRsp::New() const {
  return new GodEvil_ActiveRsp;
}

void GodEvil_ActiveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ActiveRsp::MergeFrom(const GodEvil_ActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ActiveRsp::CopyFrom(const GodEvil_ActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ActiveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ActiveRsp::Swap(GodEvil_ActiveRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ActiveRsp_descriptor_;
  metadata.reflection = GodEvil_ActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_UpgradeReq::GodEvil_UpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpgradeReq::InitAsDefaultInstance() {
}

GodEvil_UpgradeReq::GodEvil_UpgradeReq(const GodEvil_UpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpgradeReq::~GodEvil_UpgradeReq() {
  SharedDtor();
}

void GodEvil_UpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_UpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpgradeReq_descriptor_;
}

const GodEvil_UpgradeReq& GodEvil_UpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpgradeReq* GodEvil_UpgradeReq::default_instance_ = NULL;

GodEvil_UpgradeReq* GodEvil_UpgradeReq::New() const {
  return new GodEvil_UpgradeReq;
}

void GodEvil_UpgradeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_UpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpgradeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpgradeReq::MergeFrom(const GodEvil_UpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpgradeReq::CopyFrom(const GodEvil_UpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpgradeReq::IsInitialized() const {

  return true;
}

void GodEvil_UpgradeReq::Swap(GodEvil_UpgradeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpgradeReq_descriptor_;
  metadata.reflection = GodEvil_UpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_UpgradeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_UpgradeRsp::GodEvil_UpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_UpgradeRsp::InitAsDefaultInstance() {
}

GodEvil_UpgradeRsp::GodEvil_UpgradeRsp(const GodEvil_UpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_UpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_UpgradeRsp::~GodEvil_UpgradeRsp() {
  SharedDtor();
}

void GodEvil_UpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_UpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_UpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_UpgradeRsp_descriptor_;
}

const GodEvil_UpgradeRsp& GodEvil_UpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_UpgradeRsp* GodEvil_UpgradeRsp::default_instance_ = NULL;

GodEvil_UpgradeRsp* GodEvil_UpgradeRsp::New() const {
  return new GodEvil_UpgradeRsp;
}

void GodEvil_UpgradeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_UpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_UpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_UpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_UpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_UpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_UpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_UpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_UpgradeRsp::MergeFrom(const GodEvil_UpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_UpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_UpgradeRsp::CopyFrom(const GodEvil_UpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_UpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_UpgradeRsp::Swap(GodEvil_UpgradeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_UpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_UpgradeRsp_descriptor_;
  metadata.reflection = GodEvil_UpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_ChgFacadeReq::GodEvil_ChgFacadeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChgFacadeReq::InitAsDefaultInstance() {
}

GodEvil_ChgFacadeReq::GodEvil_ChgFacadeReq(const GodEvil_ChgFacadeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChgFacadeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChgFacadeReq::~GodEvil_ChgFacadeReq() {
  SharedDtor();
}

void GodEvil_ChgFacadeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChgFacadeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChgFacadeReq_descriptor_;
}

const GodEvil_ChgFacadeReq& GodEvil_ChgFacadeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChgFacadeReq* GodEvil_ChgFacadeReq::default_instance_ = NULL;

GodEvil_ChgFacadeReq* GodEvil_ChgFacadeReq::New() const {
  return new GodEvil_ChgFacadeReq;
}

void GodEvil_ChgFacadeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChgFacadeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_ChgFacadeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChgFacadeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChgFacadeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChgFacadeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChgFacadeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChgFacadeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChgFacadeReq::MergeFrom(const GodEvil_ChgFacadeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChgFacadeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChgFacadeReq::CopyFrom(const GodEvil_ChgFacadeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChgFacadeReq::IsInitialized() const {

  return true;
}

void GodEvil_ChgFacadeReq::Swap(GodEvil_ChgFacadeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChgFacadeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChgFacadeReq_descriptor_;
  metadata.reflection = GodEvil_ChgFacadeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ChgFacadeRsp::kRetFieldNumber;
const int GodEvil_ChgFacadeRsp::kCdFieldNumber;
#endif  // !_MSC_VER

GodEvil_ChgFacadeRsp::GodEvil_ChgFacadeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChgFacadeRsp::InitAsDefaultInstance() {
}

GodEvil_ChgFacadeRsp::GodEvil_ChgFacadeRsp(const GodEvil_ChgFacadeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChgFacadeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChgFacadeRsp::~GodEvil_ChgFacadeRsp() {
  SharedDtor();
}

void GodEvil_ChgFacadeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChgFacadeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChgFacadeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChgFacadeRsp_descriptor_;
}

const GodEvil_ChgFacadeRsp& GodEvil_ChgFacadeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChgFacadeRsp* GodEvil_ChgFacadeRsp::default_instance_ = NULL;

GodEvil_ChgFacadeRsp* GodEvil_ChgFacadeRsp::New() const {
  return new GodEvil_ChgFacadeRsp;
}

void GodEvil_ChgFacadeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChgFacadeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ChgFacadeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChgFacadeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChgFacadeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChgFacadeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChgFacadeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChgFacadeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChgFacadeRsp::MergeFrom(const GodEvil_ChgFacadeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChgFacadeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChgFacadeRsp::CopyFrom(const GodEvil_ChgFacadeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChgFacadeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ChgFacadeRsp::Swap(GodEvil_ChgFacadeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChgFacadeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChgFacadeRsp_descriptor_;
  metadata.reflection = GodEvil_ChgFacadeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_BuyReq::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_BuyReq::GodEvil_BuyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_BuyReq::InitAsDefaultInstance() {
}

GodEvil_BuyReq::GodEvil_BuyReq(const GodEvil_BuyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_BuyReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_BuyReq::~GodEvil_BuyReq() {
  SharedDtor();
}

void GodEvil_BuyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_BuyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_BuyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_BuyReq_descriptor_;
}

const GodEvil_BuyReq& GodEvil_BuyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_BuyReq* GodEvil_BuyReq::default_instance_ = NULL;

GodEvil_BuyReq* GodEvil_BuyReq::New() const {
  return new GodEvil_BuyReq;
}

void GodEvil_BuyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_BuyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_BuyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_BuyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_BuyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_BuyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_BuyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_BuyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_BuyReq::MergeFrom(const GodEvil_BuyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_BuyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_BuyReq::CopyFrom(const GodEvil_BuyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_BuyReq::IsInitialized() const {

  return true;
}

void GodEvil_BuyReq::Swap(GodEvil_BuyReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_BuyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_BuyReq_descriptor_;
  metadata.reflection = GodEvil_BuyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_BuyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

GodEvil_BuyRsp::GodEvil_BuyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_BuyRsp::InitAsDefaultInstance() {
}

GodEvil_BuyRsp::GodEvil_BuyRsp(const GodEvil_BuyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_BuyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_BuyRsp::~GodEvil_BuyRsp() {
  SharedDtor();
}

void GodEvil_BuyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_BuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_BuyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_BuyRsp_descriptor_;
}

const GodEvil_BuyRsp& GodEvil_BuyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_BuyRsp* GodEvil_BuyRsp::default_instance_ = NULL;

GodEvil_BuyRsp* GodEvil_BuyRsp::New() const {
  return new GodEvil_BuyRsp;
}

void GodEvil_BuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_BuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_BuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_BuyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_BuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_BuyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_BuyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_BuyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_BuyRsp::MergeFrom(const GodEvil_BuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_BuyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_BuyRsp::CopyFrom(const GodEvil_BuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_BuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_BuyRsp::Swap(GodEvil_BuyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_BuyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_BuyRsp_descriptor_;
  metadata.reflection = GodEvil_BuyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_PrivLevNotify::kVesselLevFieldNumber;
const int GodEvil_PrivLevNotify::kMirrorLevFieldNumber;
#endif  // !_MSC_VER

GodEvil_PrivLevNotify::GodEvil_PrivLevNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_PrivLevNotify::InitAsDefaultInstance() {
}

GodEvil_PrivLevNotify::GodEvil_PrivLevNotify(const GodEvil_PrivLevNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_PrivLevNotify::SharedCtor() {
  _cached_size_ = 0;
  vessel_lev_ = 0;
  mirror_lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_PrivLevNotify::~GodEvil_PrivLevNotify() {
  SharedDtor();
}

void GodEvil_PrivLevNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_PrivLevNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_PrivLevNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_PrivLevNotify_descriptor_;
}

const GodEvil_PrivLevNotify& GodEvil_PrivLevNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_PrivLevNotify* GodEvil_PrivLevNotify::default_instance_ = NULL;

GodEvil_PrivLevNotify* GodEvil_PrivLevNotify::New() const {
  return new GodEvil_PrivLevNotify;
}

void GodEvil_PrivLevNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vessel_lev_ = 0;
    mirror_lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_PrivLevNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vessel_lev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vessel_lev_)));
          set_has_vessel_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mirror_lev;
        break;
      }

      // optional int32 mirror_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_lev_)));
          set_has_mirror_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_PrivLevNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vessel_lev = 1;
  if (has_vessel_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vessel_lev(), output);
  }

  // optional int32 mirror_lev = 2;
  if (has_mirror_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mirror_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_PrivLevNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vessel_lev = 1;
  if (has_vessel_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vessel_lev(), target);
  }

  // optional int32 mirror_lev = 2;
  if (has_mirror_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mirror_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_PrivLevNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vessel_lev = 1;
    if (has_vessel_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vessel_lev());
    }

    // optional int32 mirror_lev = 2;
    if (has_mirror_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_PrivLevNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_PrivLevNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_PrivLevNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_PrivLevNotify::MergeFrom(const GodEvil_PrivLevNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vessel_lev()) {
      set_vessel_lev(from.vessel_lev());
    }
    if (from.has_mirror_lev()) {
      set_mirror_lev(from.mirror_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_PrivLevNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_PrivLevNotify::CopyFrom(const GodEvil_PrivLevNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_PrivLevNotify::IsInitialized() const {

  return true;
}

void GodEvil_PrivLevNotify::Swap(GodEvil_PrivLevNotify* other) {
  if (other != this) {
    std::swap(vessel_lev_, other->vessel_lev_);
    std::swap(mirror_lev_, other->mirror_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_PrivLevNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_PrivLevNotify_descriptor_;
  metadata.reflection = GodEvil_PrivLevNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GodEvil_ChangeReq::GodEvil_ChangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChangeReq::InitAsDefaultInstance() {
}

GodEvil_ChangeReq::GodEvil_ChangeReq(const GodEvil_ChangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChangeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChangeReq::~GodEvil_ChangeReq() {
  SharedDtor();
}

void GodEvil_ChangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChangeReq_descriptor_;
}

const GodEvil_ChangeReq& GodEvil_ChangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChangeReq* GodEvil_ChangeReq::default_instance_ = NULL;

GodEvil_ChangeReq* GodEvil_ChangeReq::New() const {
  return new GodEvil_ChangeReq;
}

void GodEvil_ChangeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GodEvil_ChangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChangeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChangeReq::MergeFrom(const GodEvil_ChangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChangeReq::CopyFrom(const GodEvil_ChangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChangeReq::IsInitialized() const {

  return true;
}

void GodEvil_ChangeReq::Swap(GodEvil_ChangeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChangeReq_descriptor_;
  metadata.reflection = GodEvil_ChangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ChangeRsp::kRetFieldNumber;
const int GodEvil_ChangeRsp::kTypeFieldNumber;
#endif  // !_MSC_VER

GodEvil_ChangeRsp::GodEvil_ChangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ChangeRsp::InitAsDefaultInstance() {
}

GodEvil_ChangeRsp::GodEvil_ChangeRsp(const GodEvil_ChangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ChangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ChangeRsp::~GodEvil_ChangeRsp() {
  SharedDtor();
}

void GodEvil_ChangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ChangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ChangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ChangeRsp_descriptor_;
}

const GodEvil_ChangeRsp& GodEvil_ChangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ChangeRsp* GodEvil_ChangeRsp::default_instance_ = NULL;

GodEvil_ChangeRsp* GodEvil_ChangeRsp::New() const {
  return new GodEvil_ChangeRsp;
}

void GodEvil_ChangeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ChangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ChangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ChangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ChangeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ChangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ChangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ChangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ChangeRsp::MergeFrom(const GodEvil_ChangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ChangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ChangeRsp::CopyFrom(const GodEvil_ChangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ChangeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ChangeRsp::Swap(GodEvil_ChangeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ChangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ChangeRsp_descriptor_;
  metadata.reflection = GodEvil_ChangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvil_ExtraExpNotify::kExtraExpFieldNumber;
#endif  // !_MSC_VER

GodEvil_ExtraExpNotify::GodEvil_ExtraExpNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvil_ExtraExpNotify::InitAsDefaultInstance() {
}

GodEvil_ExtraExpNotify::GodEvil_ExtraExpNotify(const GodEvil_ExtraExpNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvil_ExtraExpNotify::SharedCtor() {
  _cached_size_ = 0;
  extra_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvil_ExtraExpNotify::~GodEvil_ExtraExpNotify() {
  SharedDtor();
}

void GodEvil_ExtraExpNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvil_ExtraExpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvil_ExtraExpNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvil_ExtraExpNotify_descriptor_;
}

const GodEvil_ExtraExpNotify& GodEvil_ExtraExpNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CGodEvil_2eproto();
  return *default_instance_;
}

GodEvil_ExtraExpNotify* GodEvil_ExtraExpNotify::default_instance_ = NULL;

GodEvil_ExtraExpNotify* GodEvil_ExtraExpNotify::New() const {
  return new GodEvil_ExtraExpNotify;
}

void GodEvil_ExtraExpNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    extra_exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvil_ExtraExpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 extra_exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extra_exp_)));
          set_has_extra_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvil_ExtraExpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 extra_exp = 1;
  if (has_extra_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->extra_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvil_ExtraExpNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 extra_exp = 1;
  if (has_extra_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->extra_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvil_ExtraExpNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 extra_exp = 1;
    if (has_extra_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extra_exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvil_ExtraExpNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvil_ExtraExpNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvil_ExtraExpNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvil_ExtraExpNotify::MergeFrom(const GodEvil_ExtraExpNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_extra_exp()) {
      set_extra_exp(from.extra_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvil_ExtraExpNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvil_ExtraExpNotify::CopyFrom(const GodEvil_ExtraExpNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvil_ExtraExpNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GodEvil_ExtraExpNotify::Swap(GodEvil_ExtraExpNotify* other) {
  if (other != this) {
    std::swap(extra_exp_, other->extra_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvil_ExtraExpNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvil_ExtraExpNotify_descriptor_;
  metadata.reflection = GodEvil_ExtraExpNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
