// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Condition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Condition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_ConditionConditionConditionDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConditionConditionConditionDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ConditionCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ConditionCondition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ConditionCondition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ConditionCondition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fCondition_2eproto() {
  protobuf_AddDesc_E_5fCondition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Condition.proto");
  GOOGLE_CHECK(file != NULL);
  E_ConditionConditionConditionDesc_descriptor_ = file->message_type(0);
  static const int E_ConditionConditionConditionDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionConditionConditionDesc, m_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionConditionConditionDesc, m_type_),
  };
  E_ConditionConditionConditionDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConditionConditionConditionDesc_descriptor_,
      E_ConditionConditionConditionDesc::default_instance_,
      E_ConditionConditionConditionDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionConditionConditionDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionConditionConditionDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConditionConditionConditionDesc));
  E_ConditionCondition_descriptor_ = file->message_type(1);
  static const int E_ConditionCondition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionCondition, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionCondition, m_condition_),
  };
  E_ConditionCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ConditionCondition_descriptor_,
      E_ConditionCondition::default_instance_,
      E_ConditionCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ConditionCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ConditionCondition));
  Sheet_ConditionCondition_descriptor_ = file->message_type(2);
  static const int Sheet_ConditionCondition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConditionCondition, e_conditioncondition_list_),
  };
  Sheet_ConditionCondition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ConditionCondition_descriptor_,
      Sheet_ConditionCondition::default_instance_,
      Sheet_ConditionCondition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConditionCondition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ConditionCondition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ConditionCondition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fCondition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConditionConditionConditionDesc_descriptor_, &E_ConditionConditionConditionDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ConditionCondition_descriptor_, &E_ConditionCondition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ConditionCondition_descriptor_, &Sheet_ConditionCondition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fCondition_2eproto() {
  delete E_ConditionConditionConditionDesc::default_instance_;
  delete E_ConditionConditionConditionDesc_reflection_;
  delete E_ConditionCondition::default_instance_;
  delete E_ConditionCondition_reflection_;
  delete Sheet_ConditionCondition::default_instance_;
  delete Sheet_ConditionCondition_reflection_;
}

void protobuf_AddDesc_E_5fCondition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021E_Condition.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\\\n!E_ConditionConditionCond"
    "itionDesc\022\033\n\007m_param\030\001 \001(\005B\n\302\377\024\006\345\217\202\346\225\260\022\032"
    "\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"~\n\024E_Conditio"
    "nCondition\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022P\n\013m_co"
    "ndition\030\002 \003(\0132+.proto_ff.E_ConditionCond"
    "itionConditionDescB\016\302\377\024\006\346\235\241\344\273\266\210\301\024\003\"c\n\030Sh"
    "eet_ConditionCondition\022G\n\031E_ConditionCon"
    "dition_List\030\001 \003(\0132\036.proto_ff.E_Condition"
    "ConditionB\004\210\301\024 ", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Condition.proto", &protobuf_RegisterTypes);
  E_ConditionConditionConditionDesc::default_instance_ = new E_ConditionConditionConditionDesc();
  E_ConditionCondition::default_instance_ = new E_ConditionCondition();
  Sheet_ConditionCondition::default_instance_ = new Sheet_ConditionCondition();
  E_ConditionConditionConditionDesc::default_instance_->InitAsDefaultInstance();
  E_ConditionCondition::default_instance_->InitAsDefaultInstance();
  Sheet_ConditionCondition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fCondition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fCondition_2eproto {
  StaticDescriptorInitializer_E_5fCondition_2eproto() {
    protobuf_AddDesc_E_5fCondition_2eproto();
  }
} static_descriptor_initializer_E_5fCondition_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_ConditionConditionConditionDesc::kMParamFieldNumber;
const int E_ConditionConditionConditionDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_ConditionConditionConditionDesc::E_ConditionConditionConditionDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConditionConditionConditionDesc::InitAsDefaultInstance() {
}

E_ConditionConditionConditionDesc::E_ConditionConditionConditionDesc(const E_ConditionConditionConditionDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConditionConditionConditionDesc::SharedCtor() {
  _cached_size_ = 0;
  m_param_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConditionConditionConditionDesc::~E_ConditionConditionConditionDesc() {
  SharedDtor();
}

void E_ConditionConditionConditionDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConditionConditionConditionDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConditionConditionConditionDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConditionConditionConditionDesc_descriptor_;
}

const E_ConditionConditionConditionDesc& E_ConditionConditionConditionDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCondition_2eproto();
  return *default_instance_;
}

E_ConditionConditionConditionDesc* E_ConditionConditionConditionDesc::default_instance_ = NULL;

E_ConditionConditionConditionDesc* E_ConditionConditionConditionDesc::New() const {
  return new E_ConditionConditionConditionDesc;
}

void E_ConditionConditionConditionDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_param_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConditionConditionConditionDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_param_)));
          set_has_m_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConditionConditionConditionDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_param = 1;
  if (has_m_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_param(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConditionConditionConditionDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_param = 1;
  if (has_m_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_param(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConditionConditionConditionDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_param = 1;
    if (has_m_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_param());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConditionConditionConditionDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConditionConditionConditionDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConditionConditionConditionDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConditionConditionConditionDesc::MergeFrom(const E_ConditionConditionConditionDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_param()) {
      set_m_param(from.m_param());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConditionConditionConditionDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConditionConditionConditionDesc::CopyFrom(const E_ConditionConditionConditionDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConditionConditionConditionDesc::IsInitialized() const {

  return true;
}

void E_ConditionConditionConditionDesc::Swap(E_ConditionConditionConditionDesc* other) {
  if (other != this) {
    std::swap(m_param_, other->m_param_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConditionConditionConditionDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConditionConditionConditionDesc_descriptor_;
  metadata.reflection = E_ConditionConditionConditionDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ConditionCondition::kMIdFieldNumber;
const int E_ConditionCondition::kMConditionFieldNumber;
#endif  // !_MSC_VER

E_ConditionCondition::E_ConditionCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ConditionCondition::InitAsDefaultInstance() {
}

E_ConditionCondition::E_ConditionCondition(const E_ConditionCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ConditionCondition::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ConditionCondition::~E_ConditionCondition() {
  SharedDtor();
}

void E_ConditionCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_ConditionCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ConditionCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ConditionCondition_descriptor_;
}

const E_ConditionCondition& E_ConditionCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCondition_2eproto();
  return *default_instance_;
}

E_ConditionCondition* E_ConditionCondition::default_instance_ = NULL;

E_ConditionCondition* E_ConditionCondition::New() const {
  return new E_ConditionCondition;
}

void E_ConditionCondition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
  }
  m_condition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ConditionCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_condition;
        break;
      }

      // repeated .proto_ff.E_ConditionConditionConditionDesc m_condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_condition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_condition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ConditionCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // repeated .proto_ff.E_ConditionConditionConditionDesc m_condition = 2;
  for (int i = 0; i < this->m_condition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_condition(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ConditionCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // repeated .proto_ff.E_ConditionConditionConditionDesc m_condition = 2;
  for (int i = 0; i < this->m_condition_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_condition(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ConditionCondition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  // repeated .proto_ff.E_ConditionConditionConditionDesc m_condition = 2;
  total_size += 1 * this->m_condition_size();
  for (int i = 0; i < this->m_condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_condition(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ConditionCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ConditionCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ConditionCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ConditionCondition::MergeFrom(const E_ConditionCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_condition_.MergeFrom(from.m_condition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ConditionCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ConditionCondition::CopyFrom(const E_ConditionCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ConditionCondition::IsInitialized() const {

  return true;
}

void E_ConditionCondition::Swap(E_ConditionCondition* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    m_condition_.Swap(&other->m_condition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ConditionCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ConditionCondition_descriptor_;
  metadata.reflection = E_ConditionCondition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ConditionCondition::kEConditionConditionListFieldNumber;
#endif  // !_MSC_VER

Sheet_ConditionCondition::Sheet_ConditionCondition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ConditionCondition::InitAsDefaultInstance() {
}

Sheet_ConditionCondition::Sheet_ConditionCondition(const Sheet_ConditionCondition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ConditionCondition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ConditionCondition::~Sheet_ConditionCondition() {
  SharedDtor();
}

void Sheet_ConditionCondition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ConditionCondition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ConditionCondition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ConditionCondition_descriptor_;
}

const Sheet_ConditionCondition& Sheet_ConditionCondition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCondition_2eproto();
  return *default_instance_;
}

Sheet_ConditionCondition* Sheet_ConditionCondition::default_instance_ = NULL;

Sheet_ConditionCondition* Sheet_ConditionCondition::New() const {
  return new Sheet_ConditionCondition;
}

void Sheet_ConditionCondition::Clear() {
  e_conditioncondition_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ConditionCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ConditionCondition E_ConditionCondition_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ConditionCondition_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_conditioncondition_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ConditionCondition_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ConditionCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ConditionCondition E_ConditionCondition_List = 1;
  for (int i = 0; i < this->e_conditioncondition_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_conditioncondition_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ConditionCondition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ConditionCondition E_ConditionCondition_List = 1;
  for (int i = 0; i < this->e_conditioncondition_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_conditioncondition_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ConditionCondition::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ConditionCondition E_ConditionCondition_List = 1;
  total_size += 1 * this->e_conditioncondition_list_size();
  for (int i = 0; i < this->e_conditioncondition_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_conditioncondition_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ConditionCondition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ConditionCondition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ConditionCondition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ConditionCondition::MergeFrom(const Sheet_ConditionCondition& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_conditioncondition_list_.MergeFrom(from.e_conditioncondition_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ConditionCondition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ConditionCondition::CopyFrom(const Sheet_ConditionCondition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ConditionCondition::IsInitialized() const {

  return true;
}

void Sheet_ConditionCondition::Swap(Sheet_ConditionCondition* other) {
  if (other != this) {
    e_conditioncondition_list_.Swap(&other->e_conditioncondition_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ConditionCondition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ConditionCondition_descriptor_;
  metadata.reflection = Sheet_ConditionCondition_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
