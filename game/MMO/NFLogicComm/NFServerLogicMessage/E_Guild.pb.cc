// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_GuildConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildLevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildSalaryRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildSalaryRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildSalary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildSalary_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildSalary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildSalary_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildDonateRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildDonateRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildDonate_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildPrestigetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildPrestigetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildPrestigetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildPrestigetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildLvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildLvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildLvreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildLvreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildCollegeAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildCollegeAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildCollege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildCollege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildCollege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildCollege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildRank_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildRank_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildRank_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildRank_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildShouhskillRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildShouhskillRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildShouhskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildShouhskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildShouhskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildShouhskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildGwreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildGwreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildGwreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildGwreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildGwwinstreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildGwwinstreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildGwwinstreak_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildGwwinstreak_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildTtower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildTtower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildTtower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildTtower_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildTtowerdevelopAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildTtowerdevelopAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildTtowerdevelop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildTtowerdevelop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildTtowerdevelop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop_dataAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildTtowerdevelop_dataAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GuildTtowerdevelop_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GuildTtowerdevelop_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GuildTtowerdevelop_data_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fGuild_2eproto() {
  protobuf_AddDesc_E_5fGuild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Guild.proto");
  GOOGLE_CHECK(file != NULL);
  E_GuildConstant_descriptor_ = file->message_type(0);
  static const int E_GuildConstant_offsets_[76] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_setitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_nameitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_editrequirelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_giftcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_dismiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_transferguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_territory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_autominlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_autominbp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_donatetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_packetmaxd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_packetmaxbd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_packetmaxsend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_packetvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_packetadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetasonekeyvip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetasonekeylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetaskprivage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetaskflash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetaskflashprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_prestigetasktimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_rewardcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answerdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answerresulttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answerfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answersuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_answebasics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_linklvupper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_linklvupmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_linktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_collecttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shens_daytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shens_weektimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shens_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shensitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shenscost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shenscostactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shouh_dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shouhexpskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_shouhmosid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwdupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwbattletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwresttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwcentermid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtowermid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtankmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwbornrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwcenterrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtowerrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtankrpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwbornbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwcenterbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtowerbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_gwtankbpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tanknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tankresttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tankrestnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_dominatedaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_dominatebossreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_freepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_deffreepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_playerpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tankpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_towerpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_centerpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_assistradio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tteamdamageadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tweekclosetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_cyclicreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, m_tencyclicreward_),
  };
  E_GuildConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildConstant_descriptor_,
      E_GuildConstant::default_instance_,
      E_GuildConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildConstant));
  Sheet_GuildConstant_descriptor_ = file->message_type(1);
  static const int Sheet_GuildConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildConstant, e_guildconstant_list_),
  };
  Sheet_GuildConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildConstant_descriptor_,
      Sheet_GuildConstant::default_instance_,
      Sheet_GuildConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildConstant));
  E_GuildLevel_descriptor_ = file->message_type(2);
  static const int E_GuildLevel_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_vp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_np_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, m_guildlevel_g_),
  };
  E_GuildLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildLevel_descriptor_,
      E_GuildLevel::default_instance_,
      E_GuildLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildLevel));
  Sheet_GuildLevel_descriptor_ = file->message_type(3);
  static const int Sheet_GuildLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLevel, e_guildlevel_list_),
  };
  Sheet_GuildLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildLevel_descriptor_,
      Sheet_GuildLevel::default_instance_,
      Sheet_GuildLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildLevel));
  E_GuildPosition_descriptor_ = file->message_type(4);
  static const int E_GuildPosition_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_admitnewcomer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_appointandremovevp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_appointandremoveelder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_appointandremoveg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_appointandremoveelite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_expelvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_expelelder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_expelg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_expelmass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_announcementediting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_rname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_joincondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_guildactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_dissolveassignguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_changename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_recruitchat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_guildpacket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, m_upguard_),
  };
  E_GuildPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildPosition_descriptor_,
      E_GuildPosition::default_instance_,
      E_GuildPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildPosition));
  Sheet_GuildPosition_descriptor_ = file->message_type(5);
  static const int Sheet_GuildPosition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPosition, e_guildposition_list_),
  };
  Sheet_GuildPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildPosition_descriptor_,
      Sheet_GuildPosition::default_instance_,
      Sheet_GuildPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildPosition));
  E_GuildSalaryRewardDesc_descriptor_ = file->message_type(6);
  static const int E_GuildSalaryRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalaryRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalaryRewardDesc, m_item_),
  };
  E_GuildSalaryRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildSalaryRewardDesc_descriptor_,
      E_GuildSalaryRewardDesc::default_instance_,
      E_GuildSalaryRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalaryRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalaryRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildSalaryRewardDesc));
  E_GuildSalary_descriptor_ = file->message_type(7);
  static const int E_GuildSalary_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, m_typearg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, m_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, m_reward_),
  };
  E_GuildSalary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildSalary_descriptor_,
      E_GuildSalary::default_instance_,
      E_GuildSalary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildSalary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildSalary));
  Sheet_GuildSalary_descriptor_ = file->message_type(8);
  static const int Sheet_GuildSalary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildSalary, e_guildsalary_list_),
  };
  Sheet_GuildSalary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildSalary_descriptor_,
      Sheet_GuildSalary::default_instance_,
      Sheet_GuildSalary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildSalary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildSalary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildSalary));
  E_GuildDonateRewardDesc_descriptor_ = file->message_type(9);
  static const int E_GuildDonateRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonateRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonateRewardDesc, m_item_),
  };
  E_GuildDonateRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildDonateRewardDesc_descriptor_,
      E_GuildDonateRewardDesc::default_instance_,
      E_GuildDonateRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonateRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonateRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildDonateRewardDesc));
  E_GuildDonate_descriptor_ = file->message_type(10);
  static const int E_GuildDonate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, m_reward_),
  };
  E_GuildDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildDonate_descriptor_,
      E_GuildDonate::default_instance_,
      E_GuildDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildDonate));
  Sheet_GuildDonate_descriptor_ = file->message_type(11);
  static const int Sheet_GuildDonate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildDonate, e_guilddonate_list_),
  };
  Sheet_GuildDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildDonate_descriptor_,
      Sheet_GuildDonate::default_instance_,
      Sheet_GuildDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildDonate));
  E_GuildPacket_descriptor_ = file->message_type(12);
  static const int E_GuildPacket_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_belongtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_typearg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_pre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, m_daily_),
  };
  E_GuildPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildPacket_descriptor_,
      E_GuildPacket::default_instance_,
      E_GuildPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildPacket));
  Sheet_GuildPacket_descriptor_ = file->message_type(13);
  static const int Sheet_GuildPacket_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPacket, e_guildpacket_list_),
  };
  Sheet_GuildPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildPacket_descriptor_,
      Sheet_GuildPacket::default_instance_,
      Sheet_GuildPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildPacket));
  E_GuildPrestigetask_descriptor_ = file->message_type(14);
  static const int E_GuildPrestigetask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_lvmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_lvmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_taskpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, m_reward_),
  };
  E_GuildPrestigetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildPrestigetask_descriptor_,
      E_GuildPrestigetask::default_instance_,
      E_GuildPrestigetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildPrestigetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildPrestigetask));
  Sheet_GuildPrestigetask_descriptor_ = file->message_type(15);
  static const int Sheet_GuildPrestigetask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPrestigetask, e_guildprestigetask_list_),
  };
  Sheet_GuildPrestigetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildPrestigetask_descriptor_,
      Sheet_GuildPrestigetask::default_instance_,
      Sheet_GuildPrestigetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPrestigetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildPrestigetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildPrestigetask));
  E_GuildLvreward_descriptor_ = file->message_type(16);
  static const int E_GuildLvreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, m_partyexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, m_partyeontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, m_linkexp_),
  };
  E_GuildLvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildLvreward_descriptor_,
      E_GuildLvreward::default_instance_,
      E_GuildLvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildLvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildLvreward));
  Sheet_GuildLvreward_descriptor_ = file->message_type(17);
  static const int Sheet_GuildLvreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLvreward, e_guildlvreward_list_),
  };
  Sheet_GuildLvreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildLvreward_descriptor_,
      Sheet_GuildLvreward::default_instance_,
      Sheet_GuildLvreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLvreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildLvreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildLvreward));
  E_GuildCollegeAttributeDesc_descriptor_ = file->message_type(18);
  static const int E_GuildCollegeAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollegeAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollegeAttributeDesc, m_type_),
  };
  E_GuildCollegeAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildCollegeAttributeDesc_descriptor_,
      E_GuildCollegeAttributeDesc::default_instance_,
      E_GuildCollegeAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollegeAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollegeAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildCollegeAttributeDesc));
  E_GuildCollege_descriptor_ = file->message_type(19);
  static const int E_GuildCollege_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_skilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_playerlvlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_preskillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_preskilllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_costcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, m_attribute_),
  };
  E_GuildCollege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildCollege_descriptor_,
      E_GuildCollege::default_instance_,
      E_GuildCollege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildCollege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildCollege));
  Sheet_GuildCollege_descriptor_ = file->message_type(20);
  static const int Sheet_GuildCollege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildCollege, e_guildcollege_list_),
  };
  Sheet_GuildCollege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildCollege_descriptor_,
      Sheet_GuildCollege::default_instance_,
      Sheet_GuildCollege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildCollege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildCollege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildCollege));
  E_GuildAnswer_descriptor_ = file->message_type(21);
  static const int E_GuildAnswer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildAnswer, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildAnswer, m_answer_),
  };
  E_GuildAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildAnswer_descriptor_,
      E_GuildAnswer::default_instance_,
      E_GuildAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildAnswer));
  Sheet_GuildAnswer_descriptor_ = file->message_type(22);
  static const int Sheet_GuildAnswer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildAnswer, e_guildanswer_list_),
  };
  Sheet_GuildAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildAnswer_descriptor_,
      Sheet_GuildAnswer::default_instance_,
      Sheet_GuildAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildAnswer));
  E_GuildRank_reward_descriptor_ = file->message_type(23);
  static const int E_GuildRank_reward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_rankmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_rankmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_lvmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, m_rewards_),
  };
  E_GuildRank_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildRank_reward_descriptor_,
      E_GuildRank_reward::default_instance_,
      E_GuildRank_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildRank_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildRank_reward));
  Sheet_GuildRank_reward_descriptor_ = file->message_type(24);
  static const int Sheet_GuildRank_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildRank_reward, e_guildrank_reward_list_),
  };
  Sheet_GuildRank_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildRank_reward_descriptor_,
      Sheet_GuildRank_reward::default_instance_,
      Sheet_GuildRank_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildRank_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildRank_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildRank_reward));
  E_GuildShouhskillRewardDesc_descriptor_ = file->message_type(25);
  static const int E_GuildShouhskillRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskillRewardDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskillRewardDesc, m_id_),
  };
  E_GuildShouhskillRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildShouhskillRewardDesc_descriptor_,
      E_GuildShouhskillRewardDesc::default_instance_,
      E_GuildShouhskillRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskillRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskillRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildShouhskillRewardDesc));
  E_GuildShouhskill_descriptor_ = file->message_type(26);
  static const int E_GuildShouhskill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, m_reward_),
  };
  E_GuildShouhskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildShouhskill_descriptor_,
      E_GuildShouhskill::default_instance_,
      E_GuildShouhskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildShouhskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildShouhskill));
  Sheet_GuildShouhskill_descriptor_ = file->message_type(27);
  static const int Sheet_GuildShouhskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildShouhskill, e_guildshouhskill_list_),
  };
  Sheet_GuildShouhskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildShouhskill_descriptor_,
      Sheet_GuildShouhskill::default_instance_,
      Sheet_GuildShouhskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildShouhskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildShouhskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildShouhskill));
  E_GuildGwreward_descriptor_ = file->message_type(28);
  static const int E_GuildGwreward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, m_crossreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, m_arg_),
  };
  E_GuildGwreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildGwreward_descriptor_,
      E_GuildGwreward::default_instance_,
      E_GuildGwreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildGwreward));
  Sheet_GuildGwreward_descriptor_ = file->message_type(29);
  static const int Sheet_GuildGwreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwreward, e_guildgwreward_list_),
  };
  Sheet_GuildGwreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildGwreward_descriptor_,
      Sheet_GuildGwreward::default_instance_,
      Sheet_GuildGwreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildGwreward));
  E_GuildGwwinstreak_descriptor_ = file->message_type(30);
  static const int E_GuildGwwinstreak_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, m_winstreak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, m_winreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, m_endreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, m_challengeskill_),
  };
  E_GuildGwwinstreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildGwwinstreak_descriptor_,
      E_GuildGwwinstreak::default_instance_,
      E_GuildGwwinstreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildGwwinstreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildGwwinstreak));
  Sheet_GuildGwwinstreak_descriptor_ = file->message_type(31);
  static const int Sheet_GuildGwwinstreak_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwwinstreak, e_guildgwwinstreak_list_),
  };
  Sheet_GuildGwwinstreak_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildGwwinstreak_descriptor_,
      Sheet_GuildGwwinstreak::default_instance_,
      Sheet_GuildGwwinstreak_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwwinstreak, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildGwwinstreak, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildGwwinstreak));
  E_GuildTtower_descriptor_ = file->message_type(32);
  static const int E_GuildTtower_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, m_dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, m_breakbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, m_clearbox_),
  };
  E_GuildTtower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildTtower_descriptor_,
      E_GuildTtower::default_instance_,
      E_GuildTtower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildTtower));
  Sheet_GuildTtower_descriptor_ = file->message_type(33);
  static const int Sheet_GuildTtower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtower, e_guildttower_list_),
  };
  Sheet_GuildTtower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildTtower_descriptor_,
      Sheet_GuildTtower::default_instance_,
      Sheet_GuildTtower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildTtower));
  E_GuildTtowerdevelopAttributeDesc_descriptor_ = file->message_type(34);
  static const int E_GuildTtowerdevelopAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelopAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelopAttributeDesc, m_type_),
  };
  E_GuildTtowerdevelopAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildTtowerdevelopAttributeDesc_descriptor_,
      E_GuildTtowerdevelopAttributeDesc::default_instance_,
      E_GuildTtowerdevelopAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelopAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelopAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildTtowerdevelopAttributeDesc));
  E_GuildTtowerdevelop_descriptor_ = file->message_type(35);
  static const int E_GuildTtowerdevelop_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, m_datagroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, m_attribute_),
  };
  E_GuildTtowerdevelop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildTtowerdevelop_descriptor_,
      E_GuildTtowerdevelop::default_instance_,
      E_GuildTtowerdevelop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildTtowerdevelop));
  Sheet_GuildTtowerdevelop_descriptor_ = file->message_type(36);
  static const int Sheet_GuildTtowerdevelop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop, e_guildttowerdevelop_list_),
  };
  Sheet_GuildTtowerdevelop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildTtowerdevelop_descriptor_,
      Sheet_GuildTtowerdevelop::default_instance_,
      Sheet_GuildTtowerdevelop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildTtowerdevelop));
  E_GuildTtowerdevelop_dataAttributeDesc_descriptor_ = file->message_type(37);
  static const int E_GuildTtowerdevelop_dataAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_dataAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_dataAttributeDesc, m_type_),
  };
  E_GuildTtowerdevelop_dataAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildTtowerdevelop_dataAttributeDesc_descriptor_,
      E_GuildTtowerdevelop_dataAttributeDesc::default_instance_,
      E_GuildTtowerdevelop_dataAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_dataAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_dataAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildTtowerdevelop_dataAttributeDesc));
  E_GuildTtowerdevelop_data_descriptor_ = file->message_type(38);
  static const int E_GuildTtowerdevelop_data_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, m_attribute_),
  };
  E_GuildTtowerdevelop_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GuildTtowerdevelop_data_descriptor_,
      E_GuildTtowerdevelop_data::default_instance_,
      E_GuildTtowerdevelop_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GuildTtowerdevelop_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GuildTtowerdevelop_data));
  Sheet_GuildTtowerdevelop_data_descriptor_ = file->message_type(39);
  static const int Sheet_GuildTtowerdevelop_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop_data, e_guildttowerdevelop_data_list_),
  };
  Sheet_GuildTtowerdevelop_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GuildTtowerdevelop_data_descriptor_,
      Sheet_GuildTtowerdevelop_data::default_instance_,
      Sheet_GuildTtowerdevelop_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GuildTtowerdevelop_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GuildTtowerdevelop_data));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fGuild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildConstant_descriptor_, &E_GuildConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildConstant_descriptor_, &Sheet_GuildConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildLevel_descriptor_, &E_GuildLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildLevel_descriptor_, &Sheet_GuildLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildPosition_descriptor_, &E_GuildPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildPosition_descriptor_, &Sheet_GuildPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildSalaryRewardDesc_descriptor_, &E_GuildSalaryRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildSalary_descriptor_, &E_GuildSalary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildSalary_descriptor_, &Sheet_GuildSalary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildDonateRewardDesc_descriptor_, &E_GuildDonateRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildDonate_descriptor_, &E_GuildDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildDonate_descriptor_, &Sheet_GuildDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildPacket_descriptor_, &E_GuildPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildPacket_descriptor_, &Sheet_GuildPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildPrestigetask_descriptor_, &E_GuildPrestigetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildPrestigetask_descriptor_, &Sheet_GuildPrestigetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildLvreward_descriptor_, &E_GuildLvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildLvreward_descriptor_, &Sheet_GuildLvreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildCollegeAttributeDesc_descriptor_, &E_GuildCollegeAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildCollege_descriptor_, &E_GuildCollege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildCollege_descriptor_, &Sheet_GuildCollege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildAnswer_descriptor_, &E_GuildAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildAnswer_descriptor_, &Sheet_GuildAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildRank_reward_descriptor_, &E_GuildRank_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildRank_reward_descriptor_, &Sheet_GuildRank_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildShouhskillRewardDesc_descriptor_, &E_GuildShouhskillRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildShouhskill_descriptor_, &E_GuildShouhskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildShouhskill_descriptor_, &Sheet_GuildShouhskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildGwreward_descriptor_, &E_GuildGwreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildGwreward_descriptor_, &Sheet_GuildGwreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildGwwinstreak_descriptor_, &E_GuildGwwinstreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildGwwinstreak_descriptor_, &Sheet_GuildGwwinstreak::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildTtower_descriptor_, &E_GuildTtower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildTtower_descriptor_, &Sheet_GuildTtower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildTtowerdevelopAttributeDesc_descriptor_, &E_GuildTtowerdevelopAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildTtowerdevelop_descriptor_, &E_GuildTtowerdevelop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildTtowerdevelop_descriptor_, &Sheet_GuildTtowerdevelop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildTtowerdevelop_dataAttributeDesc_descriptor_, &E_GuildTtowerdevelop_dataAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GuildTtowerdevelop_data_descriptor_, &E_GuildTtowerdevelop_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GuildTtowerdevelop_data_descriptor_, &Sheet_GuildTtowerdevelop_data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fGuild_2eproto() {
  delete E_GuildConstant::default_instance_;
  delete E_GuildConstant_reflection_;
  delete Sheet_GuildConstant::default_instance_;
  delete Sheet_GuildConstant_reflection_;
  delete E_GuildLevel::default_instance_;
  delete E_GuildLevel_reflection_;
  delete Sheet_GuildLevel::default_instance_;
  delete Sheet_GuildLevel_reflection_;
  delete E_GuildPosition::default_instance_;
  delete E_GuildPosition_reflection_;
  delete Sheet_GuildPosition::default_instance_;
  delete Sheet_GuildPosition_reflection_;
  delete E_GuildSalaryRewardDesc::default_instance_;
  delete E_GuildSalaryRewardDesc_reflection_;
  delete E_GuildSalary::default_instance_;
  delete E_GuildSalary_reflection_;
  delete Sheet_GuildSalary::default_instance_;
  delete Sheet_GuildSalary_reflection_;
  delete E_GuildDonateRewardDesc::default_instance_;
  delete E_GuildDonateRewardDesc_reflection_;
  delete E_GuildDonate::default_instance_;
  delete E_GuildDonate_reflection_;
  delete Sheet_GuildDonate::default_instance_;
  delete Sheet_GuildDonate_reflection_;
  delete E_GuildPacket::default_instance_;
  delete E_GuildPacket_reflection_;
  delete Sheet_GuildPacket::default_instance_;
  delete Sheet_GuildPacket_reflection_;
  delete E_GuildPrestigetask::default_instance_;
  delete E_GuildPrestigetask_reflection_;
  delete Sheet_GuildPrestigetask::default_instance_;
  delete Sheet_GuildPrestigetask_reflection_;
  delete E_GuildLvreward::default_instance_;
  delete E_GuildLvreward_reflection_;
  delete Sheet_GuildLvreward::default_instance_;
  delete Sheet_GuildLvreward_reflection_;
  delete E_GuildCollegeAttributeDesc::default_instance_;
  delete E_GuildCollegeAttributeDesc_reflection_;
  delete E_GuildCollege::default_instance_;
  delete E_GuildCollege_reflection_;
  delete Sheet_GuildCollege::default_instance_;
  delete Sheet_GuildCollege_reflection_;
  delete E_GuildAnswer::default_instance_;
  delete E_GuildAnswer_reflection_;
  delete Sheet_GuildAnswer::default_instance_;
  delete Sheet_GuildAnswer_reflection_;
  delete E_GuildRank_reward::default_instance_;
  delete E_GuildRank_reward_reflection_;
  delete Sheet_GuildRank_reward::default_instance_;
  delete Sheet_GuildRank_reward_reflection_;
  delete E_GuildShouhskillRewardDesc::default_instance_;
  delete E_GuildShouhskillRewardDesc_reflection_;
  delete E_GuildShouhskill::default_instance_;
  delete E_GuildShouhskill_reflection_;
  delete Sheet_GuildShouhskill::default_instance_;
  delete Sheet_GuildShouhskill_reflection_;
  delete E_GuildGwreward::default_instance_;
  delete E_GuildGwreward_reflection_;
  delete Sheet_GuildGwreward::default_instance_;
  delete Sheet_GuildGwreward_reflection_;
  delete E_GuildGwwinstreak::default_instance_;
  delete E_GuildGwwinstreak_reflection_;
  delete Sheet_GuildGwwinstreak::default_instance_;
  delete Sheet_GuildGwwinstreak_reflection_;
  delete E_GuildTtower::default_instance_;
  delete E_GuildTtower_reflection_;
  delete Sheet_GuildTtower::default_instance_;
  delete Sheet_GuildTtower_reflection_;
  delete E_GuildTtowerdevelopAttributeDesc::default_instance_;
  delete E_GuildTtowerdevelopAttributeDesc_reflection_;
  delete E_GuildTtowerdevelop::default_instance_;
  delete E_GuildTtowerdevelop_reflection_;
  delete Sheet_GuildTtowerdevelop::default_instance_;
  delete Sheet_GuildTtowerdevelop_reflection_;
  delete E_GuildTtowerdevelop_dataAttributeDesc::default_instance_;
  delete E_GuildTtowerdevelop_dataAttributeDesc_reflection_;
  delete E_GuildTtowerdevelop_data::default_instance_;
  delete E_GuildTtowerdevelop_data_reflection_;
  delete Sheet_GuildTtowerdevelop_data::default_instance_;
  delete Sheet_GuildTtowerdevelop_data_reflection_;
}

void protobuf_AddDesc_E_5fGuild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rE_Guild.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\226\036\n\017E_GuildConstant\022\"\n\014m_consta"
    "ntid\030\001 \001(\005B\014\302\377\024\010\351\205\215\347\275\256id\0221\n\tm_setItem\030\002 "
    "\001(\005B\036\302\377\024\032\345\210\233\345\273\272\345\205\254\344\274\232\351\234\200\350\246\201\351\201\223\345\205\267ID\0222\n\nm"
    "_nameItem\030\003 \001(\005B\036\302\377\024\032\345\205\254\344\274\232\346\224\271\345\220\215\351\234\200\350\246\201\351"
    "\201\223\345\205\267ID\022A\n\017m_EditRequireLV\030\004 \001(\005B(\302\377\024$\344\277"
    "\256\346\224\271\345\205\254\344\274\232\345\205\254\345\221\212\350\246\201\346\261\202\345\205\254\345\221\212\347\255\211\347\272\247\022(\n\010m_"
    "giftCD\030\005 \001(\005B\026\302\377\024\022\347\272\242\345\214\205\346\270\205\347\220\206\346\227\266\351\227\264\022)\n\t"
    "m_dismiss\030\006 \001(\005B\026\302\377\024\022\350\247\243\346\225\243\345\205\254\344\274\232\346\227\266\351\227\264\022"
    "8\n\017m_transferGuild\030\007 \001(\005B\037\302\377\024\033\344\273\243\347\220\206\344\274\232\351"
    "\225\277\345\217\257\347\224\263\350\257\267\346\227\266\351\227\264\022-\n\013m_territory\030\010 \001(\005B\030"
    "\302\377\024\024\345\205\254\344\274\232\351\242\206\345\234\260\345\234\272\346\231\257id\0221\n\013m_autoMinLV\030"
    "\t \001(\005B\034\302\377\024\030\350\207\252\345\212\250\345\256\241\346\211\271\346\234\200\344\275\216\347\255\211\347\272\247\0221\n\013m"
    "_autoMinBP\030\n \001(\005B\034\302\377\024\030\350\207\252\345\212\250\345\256\241\346\211\271\346\234\200\344\275\216"
    "\346\210\230\345\212\233\022\'\n\rm_donateTimes\030\013 \001(\005B\020\302\377\024\014\346\215\220\346\254"
    "\276\346\254\241\346\225\260\0222\n\014m_packetMaxD\030\014 \001(\005B\034\302\377\024\030\347\272\242\345\214"
    "\205\347\273\221\351\222\273\346\257\217\346\227\245\351\231\220\345\210\266\0223\n\rm_packetMaxBD\030\r \001"
    "(\005B\034\302\377\024\030\347\272\242\345\214\205\351\255\224\346\231\266\346\257\217\346\227\245\351\231\220\345\210\266\022/\n\017m_pa"
    "cketMaxSend\030\016 \001(\005B\026\302\377\024\022\350\207\252\350\264\271\347\272\242\345\214\205\351\231\220\345\210"
    "\266\0221\n\013m_packetvip\030\017 \001(\005B\034\302\377\024\030\347\272\242\345\214\205\345\212\240\346\210\220"
    "\347\232\204vip\347\255\211\347\272\247\022+\n\013m_packetAdd\030\020 \001(\005B\026\302\377\024\022\347"
    "\272\242\345\214\205\345\212\240\346\210\220\346\257\224\344\276\213\0229\n\026m_prestigeTasOneKey"
    "VIP\030\021 \001(\005B\031\302\377\024\025\345\243\260\346\234\233\344\273\273\345\212\241\344\270\200\351\224\256vip\022:\n\025"
    "m_prestigeTasOneKeyLV\030\022 \001(\005B\033\302\377\024\027\345\243\260\346\234\233\344"
    "\273\273\345\212\241\344\270\200\351\224\256viplv\0227\n\025m_prestigeTaskPrivag"
    "e\030\023 \001(\005B\030\302\377\024\024\345\243\260\346\234\233\344\273\273\345\212\241\347\211\271\346\235\203id\022\?\n\023m_p"
    "restigeTaskFlash\030\024 \001(\005B\"\302\377\024\036\345\243\260\346\234\233\344\273\273\345\212\241"
    "\345\205\215\350\264\271\345\210\267\346\226\260\346\254\241\346\225\260\022D\n\030m_prestigeTaskflas"
    "hPrice\030\025 \001(\005B\"\302\377\024\036\345\243\260\346\234\233\344\273\273\345\212\241\344\273\230\350\264\271\345\210\267\346"
    "\226\260\344\273\267\346\240\274\0229\n\023m_prestigeTaskTimes\030\026 \001(\005B\034\302"
    "\377\024\030\345\243\260\346\234\233\344\273\273\345\212\241\346\257\217\346\227\245\346\254\241\346\225\260\0220\n\nm_rewardC"
    "D\030\027 \001(\005B\034\302\377\024\030\346\231\232\345\256\264\346\214\201\347\273\255\346\224\266\347\233\212\351\227\264\351\232\224\022-\n"
    "\rm_answerdelay\030\030 \001(\005B\026\302\377\024\022\346\231\232\345\256\264\347\255\224\351\242\230\351\227"
    "\264\351\232\224\022\"\n\013m_answerNum\030\031 \001(\005B\r\302\377\024\t\351\242\230\347\233\256\346\225\260"
    "\0228\n\014m_answerTime\030\032 \001(\005B\"\302\377\024\036\346\257\217\351\201\223\351\242\230\347\232\204"
    "\346\234\200\351\225\277\344\275\234\347\255\224\344\272\213\344\273\266\0228\n\022m_answerResultTime"
    "\030\033 \001(\005B\034\302\377\024\030\346\257\217\351\201\223\351\242\230\347\232\204\347\255\224\346\241\210\346\227\266\351\227\264\022-\n\r"
    "m_answerLimit\030\034 \001(\005B\026\302\377\024\022\347\255\224\351\242\230\351\231\220\346\227\266\345\245\226"
    "\345\212\261\022-\n\rm_answerFirst\030\035 \001(\005B\026\302\377\024\022\347\255\224\351\242\230\351\246"
    "\226\347\255\224\345\245\226\345\212\261\022/\n\017m_answerSuccess\030\036 \001(\005B\026\302\377\024"
    "\022\347\255\224\351\242\230\347\255\224\345\257\271\345\245\226\345\212\261\022-\n\rm_answeBasics\030\037 \001"
    "(\005B\026\302\377\024\022\347\255\224\351\242\230\345\256\211\346\205\260\345\245\226\345\212\261\022<\n\rm_linkLvUp"
    "Per\030  \001(\005B%\302\377\024!\344\274\240\345\212\237\346\257\217\347\272\247\346\217\220\351\253\230\347\273\217\351\252\214\344"
    "\270\207\345\210\206\346\257\224\0223\n\rm_linkLvUpMax\030! \001(\005B\034\302\377\024\030\344\274\240"
    "\345\212\237\346\217\220\351\253\230\347\273\217\351\252\214\344\270\212\351\231\220\022-\n\nm_linkTime\030\" \001("
    "\005B\031\302\377\024\025\344\274\240\345\212\237\347\232\204\350\241\214\344\270\272\346\227\266\351\227\264\022$\n\013m_monste"
    "rID\030# \001(\005B\017\302\377\024\013\351\207\207\351\233\206\347\211\251id\022\'\n\007m_point\030$ "
    "\001(\005B\026\302\377\024\022\351\207\207\351\233\206\347\211\251\345\210\267\346\226\260\347\202\271\0227\n\016m_collect"
    "Times\030% \001(\005B\037\302\377\024\033\346\257\217\346\254\241\345\274\200\345\220\257\345\217\257\351\207\207\351\233\206\346\254"
    "\241\346\225\260\0220\n\020m_shens_dayTimes\030& \001(\005B\026\302\377\024\022\347\245\236\345"
    "\205\275\346\257\217\346\227\245\346\254\241\346\225\260\0221\n\021m_shens_weekTimes\030\' \001("
    "\005B\026\302\377\024\022\347\245\236\345\205\275\346\257\217\345\221\250\346\254\241\346\225\260\022\'\n\013m_shens_dup"
    "\030( \001(\005B\022\302\377\024\016\347\245\236\345\205\275\345\211\257\346\234\254id\022\'\n\013m_shensIte"
    "m\030) \001(\005B\022\302\377\024\016\347\245\236\345\205\275\347\245\255\345\223\201id\022+\n\013m_shensCo"
    "st\030* \001(\005B\026\302\377\024\022\347\245\236\345\205\275\347\245\255\345\223\201\346\266\210\350\200\227\0221\n\021m_sh"
    "ensCostActive\030+ \001(\005B\026\302\377\024\022\347\245\236\345\205\275\347\245\255\345\223\201\346\266\210"
    "\350\200\227\022\'\n\013m_shouh_dup\030, \001(\005B\022\302\377\024\016\345\256\210\346\212\244\345\211\257\346"
    "\234\254id\022/\n\017m_shouhExpSkill\030- \001(\005B\026\302\377\024\022\345\256\210\346\212"
    "\244\345\211\257\346\234\254\346\212\200\350\203\275\022)\n\014m_shouhMosId\030. \001(\tB\023\302\377\024"
    "\013\345\256\210\346\212\244npcid\220\301\024@\022(\n\tm_GWDupid\030/ \001(\005B\025\302\377\024"
    "\021\345\270\256\346\264\276\346\210\230\345\211\257\346\234\254id\0221\n\016m_GWBattleTime\0300 \001"
    "(\005B\031\302\377\024\025\345\270\256\346\264\276\346\210\230\345\215\225\345\234\272\346\227\266\351\227\264\022/\n\014m_GWRes"
    "tTime\0301 \001(\005B\031\302\377\024\025\345\270\256\346\264\276\346\210\230\344\274\221\346\201\257\346\227\266\351\227\264\0222"
    "\n\rm_GWCenterMID\0302 \001(\005B\033\302\377\024\027\345\270\256\346\264\276\346\210\230\346\260\264\346"
    "\231\266\346\200\252\347\211\251id\022.\n\014m_GWTowerMID\0303 \001(\005B\030\302\377\024\024\345\270"
    "\256\346\264\276\346\210\230\345\241\224\346\200\252\347\211\251id\022-\n\013m_GWTankMID\0304 \001(\005B"
    "\030\302\377\024\024\345\270\256\346\264\276\346\210\230\350\275\246\346\200\252\347\211\251id\0223\n\016m_GWBornRPo"
    "int\0305 \001(\005B\033\302\377\024\027\345\270\256\346\264\276\346\210\230\347\272\242\345\207\272\347\224\237point\0225"
    "\n\020m_GWCenterRPoint\0306 \001(\005B\033\302\377\024\027\345\270\256\346\264\276\346\210\230\347"
    "\272\242\346\260\264\346\231\266point\0225\n\017m_GWTowerRPoint\0307 \001(\tB\034"
    "\302\377\024\024\345\270\256\346\264\276\346\210\230\347\272\242\345\241\224point\220\301\024@\0220\n\016m_GWTank"
    "RPoint\0308 \001(\005B\030\302\377\024\024\345\270\256\346\264\276\347\272\242\346\210\230\350\275\246point\0223"
    "\n\016m_GWBornBPoint\0309 \001(\005B\033\302\377\024\027\345\270\256\346\264\276\346\210\230\350\223\235"
    "\345\207\272\347\224\237point\0225\n\020m_GWCenterBPoint\030: \001(\005B\033\302"
    "\377\024\027\345\270\256\346\264\276\346\210\230\350\223\235\346\260\264\346\231\266point\0225\n\017m_GWTowerB"
    "Point\030; \001(\tB\034\302\377\024\024\345\270\256\346\264\276\346\210\230\350\223\235\345\241\224point\220\301\024"
    "@\0220\n\016m_GWTankBPoint\030< \001(\005B\030\302\377\024\024\345\270\256\346\264\276\350\223\235"
    "\346\210\230\350\275\246point\022)\n\tm_tankNum\030= \001(\005B\026\302\377\024\022\346\210\230\350"
    "\275\246\345\210\235\345\247\213\346\225\260\351\207\217\022.\n\016m_tankRestTime\030> \001(\005B\026"
    "\302\377\024\022\346\210\230\350\275\246\350\241\245\345\205\205\351\227\264\351\232\224\022-\n\rm_tankRestNum\030"
    "\? \001(\005B\026\302\377\024\022\346\210\230\350\275\246\350\241\245\345\205\205\346\225\260\351\207\217\0225\n\017m_domin"
    "ateDaily\030@ \001(\005B\034\302\377\024\030\344\270\273\345\256\260\347\245\236\346\256\277\346\257\217\346\227\245\345\245"
    "\226\345\212\261\022@\n\024m_dominateBossReward\030A \001(\005B\"\302\377\024\036"
    "\344\270\273\345\256\260\347\245\236\346\256\277\344\274\232\351\225\277\344\270\264\346\227\266\345\245\226\345\212\261\022.\n\013m_free"
    "Point\030B \001(\005B\031\302\377\024\025\346\257\217\346\254\241\350\216\267\345\276\227\347\232\204\347\247\257\345\210\206\022="
    "\n\016m_defFreePoint\030C \001(\005B%\302\377\024!\345\244\204\344\272\216\351\230\262\345\276\241"
    "\345\241\224\350\214\203\345\233\264\351\242\235\345\244\226\347\247\257\345\210\206\022-\n\rm_playerPoint\030D"
    " \001(\005B\026\302\377\024\022\345\207\273\346\235\200\347\216\251\345\256\266\347\247\257\345\210\206\022.\n\013m_tankPo"
    "int\030E \001(\005B\031\302\377\024\025\345\207\273\346\235\200\345\267\245\347\250\213\350\275\246\347\247\257\345\210\206\022/\n\014"
    "m_towerPoint\030F \001(\005B\031\302\377\024\025\346\234\272\347\240\264\351\230\262\345\276\241\345\241\224\347"
    "\247\257\345\210\206\022\'\n\rm_centerPoint\030G \001(\005B\020\302\377\024\014\346\260\264\346\231\266"
    "\347\247\257\345\210\206\0220\n\rm_assistRadio\030H \001(\005B\031\302\377\024\025\345\212\251\346\224"
    "\273\347\232\204\347\247\257\345\210\206\347\263\273\346\225\260\0220\n\020m_TTeamDamageAdd\030I \001"
    "(\005B\026\302\377\024\022\347\273\204\351\230\237\345\242\236\345\212\240\344\274\244\345\256\263\0226\n\020m_TWeekClo"
    "seTime\030J \001(\005B\034\302\377\024\030\345\221\250\347\273\223\347\256\227\345\211\215\345\205\263\351\227\255\346\227\266\351"
    "\227\264\0224\n\016m_cyclicReward\030K \001(\005B\034\302\377\024\030\345\221\250\347\216\257\344\273"
    "\273\345\212\241\346\231\256\351\200\232\345\245\226\345\212\261\0227\n\021m_tenCyclicReward\030L "
    "\001(\005B\034\302\377\024\030\345\221\250\347\216\257\344\273\273\345\212\241\345\215\201\347\216\257\345\245\226\345\212\261\"U\n\023She"
    "et_GuildConstant\022>\n\024E_GuildConstant_List"
    "\030\001 \003(\0132\031.proto_ff.E_GuildConstantB\005\210\301\024\200\001"
    "\"\254\002\n\014E_GuildLevel\022&\n\014m_guildLevel\030\001 \001(\005B"
    "\020\302\377\024\014\345\205\254\344\274\232\347\255\211\347\272\247\0220\n\020m_guildLevel_EXP\030\002 "
    "\001(\005B\026\302\377\024\022\345\205\254\344\274\232\345\215\207\347\272\247\347\273\217\351\252\214\0226\n\023m_guildLe"
    "vel_member\030\003 \001(\005B\031\302\377\024\025\345\205\254\344\274\232\346\210\220\345\221\230\346\200\273\344\272\272"
    "\346\225\260\0222\n\017m_guildLevel_VP\030\004 \001(\005B\031\302\377\024\025\345\205\254\344\274\232"
    "\345\211\257\344\274\232\351\225\277\344\272\272\346\225\260\022,\n\017m_guildLevel_NP\030\005 \001(\005"
    "B\023\302\377\024\017\345\205\254\344\274\232\351\225\277\350\200\201\346\225\260\022(\n\016m_guildLevel_G\030"
    "\006 \001(\005B\020\302\377\024\014\346\212\244\346\263\225\344\272\272\346\225\260\"K\n\020Sheet_GuildLe"
    "vel\0227\n\021E_GuildLevel_List\030\001 \003(\0132\026.proto_f"
    "f.E_GuildLevelB\004\210\301\024\020\"\207\007\n\017E_GuildPosition"
    "\022\"\n\014m_positionId\030\001 \001(\005B\014\302\377\024\010\350\201\214\344\275\215ID\022,\n\017"
    "m_admitNewcomer\030\002 \001(\005B\023\302\377\024\017\346\216\245\346\224\266\346\226\260\346\210\220\345"
    "\221\230\0228\n\024m_appointAndRemoveVP\030\003 \001(\005B\032\302\377\024\026\344\273"
    "\273\345\221\275/\350\247\243\351\231\244\345\211\257\344\274\232\351\225\277\0228\n\027m_appointAndRemo"
    "veElder\030\004 \001(\005B\027\302\377\024\023\344\273\273\345\221\275/\350\247\243\351\231\244\351\225\277\350\200\201\0224"
    "\n\023m_appointAndRemoveG\030\005 \001(\005B\027\302\377\024\023\344\273\273\345\221\275/"
    "\350\247\243\351\231\244\346\212\244\346\263\225\0228\n\027m_appointAndRemoveElite\030"
    "\006 \001(\005B\027\302\377\024\023\344\273\273\345\221\275/\350\247\243\351\231\244\347\262\276\350\213\261\022&\n\tm_expe"
    "lVP\030\007 \001(\005B\023\302\377\024\017\350\270\242\345\207\272\345\211\257\344\274\232\351\225\277\022&\n\014m_expe"
    "lElder\030\010 \001(\005B\020\302\377\024\014\350\270\242\345\207\272\351\225\277\350\200\201\022\"\n\010m_expe"
    "lG\030\t \001(\005B\020\302\377\024\014\350\270\242\345\207\272\346\212\244\346\263\225\022+\n\013m_expelMas"
    "s\030\n \001(\005B\026\302\377\024\022\350\270\242\345\207\272\346\231\256\351\200\232\346\210\220\345\221\230\022/\n\025m_ann"
    "ouncementEditing\030\013 \001(\005B\020\302\377\024\014\347\274\226\350\276\221\345\205\254\345\221\212"
    "\022!\n\007m_rName\030\014 \001(\005B\020\302\377\024\014\344\277\256\346\224\271\345\220\215\345\255\227\022/\n\017m"
    "_joinCondition\030\r \001(\005B\026\302\377\024\022\350\256\276\347\275\256\345\212\240\345\205\245\346\226"
    "\271\345\274\217\022/\n\017m_guildActivity\030\016 \001(\005B\026\302\377\024\022\345\274\200\345\220"
    "\257\345\205\254\344\274\232\347\216\251\346\263\225\0226\n\025m_dissolveAssignGuild\030\017"
    " \001(\005B\027\302\377\024\023\350\247\243\346\225\243/\350\275\254\350\256\251\345\205\254\344\274\232\022&\n\014m_chang"
    "eName\030\020 \001(\005B\020\302\377\024\014\346\224\271\345\220\215\346\235\203\351\231\220\022-\n\rm_recru"
    "itChat\030\021 \001(\005B\026\302\377\024\022\345\217\221\345\270\203\346\213\233\350\264\244\347\272\263\345\243\253\0223\n\r"
    "m_guildPacket\030\022 \001(\005B\034\302\377\024\030\345\217\221\351\200\201\345\205\254\344\274\232\347\216\251"
    "\346\263\225\347\272\242\345\214\205\022#\n\tm_UpGuard\030\023 \001(\005B\020\302\377\024\014\345\215\207\347\272\247"
    "\345\256\210\346\212\244\"T\n\023Sheet_GuildPosition\022=\n\024E_Guild"
    "Position_List\030\001 \003(\0132\031.proto_ff.E_GuildPo"
    "sitionB\004\210\301\024\010\"P\n\027E_GuildSalaryRewardDesc\022"
    "\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\032\n\006m_item\030\002 \001"
    "(\005B\n\302\377\024\006\347\211\251\345\223\201\"\324\001\n\rE_GuildSalary\022\024\n\004m_ID"
    "\030\001 \001(\005B\006\302\377\024\002ID\022 \n\006m_type\030\002 \001(\005B\020\302\377\024\014\344\273\273\345"
    "\212\241\347\261\273\345\236\213\022#\n\tm_typeArg\030\003 \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345"
    "\217\202\346\225\260\022!\n\007m_times\030\004 \001(\005B\020\302\377\024\014\346\254\241\346\225\260\345\217\202\346\225\260"
    "\022C\n\010m_reward\030\005 \003(\0132!.proto_ff.E_GuildSal"
    "aryRewardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"N\n\021Sheet_G"
    "uildSalary\0229\n\022E_GuildSalary_List\030\001 \003(\0132\027"
    ".proto_ff.E_GuildSalaryB\004\210\301\024\010\"P\n\027E_Guild"
    "DonateRewardDesc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260"
    "\351\207\217\022\032\n\006m_item\030\002 \001(\005B\n\302\377\024\006\347\211\251\345\223\201\"\275\001\n\rE_Gu"
    "ildDonate\022\024\n\004m_ID\030\001 \001(\005B\006\302\377\024\002ID\022&\n\nm_cos"
    "tItem\030\002 \001(\005B\022\302\377\024\016\350\212\261\350\264\271\347\211\251\345\223\201id\022)\n\tm_cos"
    "tNum\030\003 \001(\005B\026\302\377\024\022\350\212\261\350\264\271\347\211\251\345\223\201\346\225\260\351\207\217\022C\n\010m_"
    "reward\030\004 \003(\0132!.proto_ff.E_GuildDonateRew"
    "ardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\003\"N\n\021Sheet_GuildDo"
    "nate\0229\n\022E_GuildDonate_List\030\001 \003(\0132\027.proto"
    "_ff.E_GuildDonateB\004\210\301\024\004\"\346\002\n\rE_GuildPacke"
    "t\022\032\n\004m_ID\030\001 \001(\005B\014\302\377\024\010\347\272\242\345\214\205ID\022,\n\014m_belon"
    "gType\030\002 \001(\005B\026\302\377\024\022\347\272\242\345\214\205\345\275\222\345\261\236\347\261\273\345\236\213\022&\n\006m"
    "_type\030\003 \001(\005B\026\302\377\024\022\347\272\242\345\214\205\350\247\246\345\217\221\347\261\273\345\236\213\022#\n\tm"
    "_typeArg\030\004 \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\022(\n\010m_it"
    "emID\030\005 \001(\005B\026\302\377\024\022\347\272\242\345\214\205\351\242\206\345\217\226\347\261\273\345\236\213\022#\n\tm_"
    "itemNum\030\006 \001(\005B\020\302\377\024\014\347\272\242\345\214\205\351\207\221\351\242\235\022\037\n\005m_num"
    "\030\007 \001(\005B\020\302\377\024\014\347\272\242\345\214\205\344\273\275\346\225\260\022\037\n\005m_pre\030\010 \001(\005B"
    "\020\302\377\024\014\345\211\215\347\275\256\347\272\242\345\214\205\022-\n\007m_daily\030\t \001(\005B\034\302\377\024\030"
    "\346\257\217\346\227\245\351\231\220\345\210\266\350\247\246\345\217\221\346\254\241\346\225\260\"O\n\021Sheet_GuildP"
    "acket\022:\n\022E_GuildPacket_List\030\001 \003(\0132\027.prot"
    "o_ff.E_GuildPacketB\005\210\301\024\200\001\"\214\002\n\023E_GuildPre"
    "stigetask\022\024\n\004m_ID\030\001 \001(\005B\006\302\377\024\002id\022!\n\007m_lev"
    "el\030\002 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\345\210\206\347\272\247\022!\n\007m_lvMin\030\003 "
    "\001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\213\351\231\220\022!\n\007m_lvMax\030\004 \001(\005B\020"
    "\302\377\024\014\347\255\211\347\272\247\344\270\212\351\231\220\022\034\n\010m_weight\030\005 \001(\005B\n\302\377\024\006"
    "\346\235\203\351\207\215\022,\n\nm_taskpool\030\006 \001(\005B\030\302\377\024\024\351\232\217\346\234\272\347\232"
    "\204\344\273\273\345\212\241\346\261\240id\022*\n\010m_reward\030\007 \001(\005B\030\302\377\024\024\344\273\273\345"
    "\212\241\345\245\226\345\212\261\347\261\273\345\236\213id\"`\n\027Sheet_GuildPrestiget"
    "ask\022E\n\030E_GuildPrestigetask_List\030\001 \003(\0132\035."
    "proto_ff.E_GuildPrestigetaskB\004\210\301\024\020\"\245\001\n\017E"
    "_GuildLvreward\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247"
    "\022$\n\nm_partyExp\030\002 \001(\003B\020\302\377\024\014\346\231\232\345\256\264\347\273\217\351\252\214\022-"
    "\n\023m_partyEontribution\030\003 \001(\005B\020\302\377\024\014\346\231\232\345\256\264\350"
    "\264\241\347\214\256\022#\n\tm_linkExp\030\004 \001(\003B\020\302\377\024\014\351\223\276\346\216\245\347\273\217\351"
    "\252\214\"U\n\023Sheet_GuildLvreward\022>\n\024E_GuildLvre"
    "ward_List\030\001 \003(\0132\031.proto_ff.E_GuildLvrewa"
    "rdB\005\210\301\024\200\020\"O\n\033E_GuildCollegeAttributeDesc"
    "\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001"
    "(\005B\006\302\377\024\002ID\"\303\003\n\016E_GuildCollege\022\033\n\005m_uid\030\001"
    " \001(\005B\014\302\377\024\010\345\224\257\344\270\200id\022\037\n\tm_skillid\030\002 \001(\005B\014\302"
    "\377\024\010\346\212\200\350\203\275id\022#\n\tm_skillLv\030\003 \001(\005B\020\302\377\024\014\345\277\203\346"
    "\263\225\347\255\211\347\272\247\0225\n\tm_guildLv\030\004 \001(\005B\"\302\377\024\036\345\274\200\346\224\276\345"
    "\255\246\344\271\240\351\234\200\346\261\202\345\205\254\344\274\232\347\255\211\347\272\247\022/\n\017m_playerLvLim"
    "it\030\005 \001(\005B\026\302\377\024\022\350\246\201\346\261\202\347\216\251\345\256\266\347\255\211\347\272\247\022.\n\014m_pr"
    "eSkillid\030\006 \001(\005B\030\302\377\024\024\350\246\201\346\261\202\345\211\215\347\275\256\346\212\200\350\203\275ID"
    "\0222\n\014m_preSkillLv\030\007 \001(\005B\034\302\377\024\030\350\246\201\346\261\202\345\211\215\347\275\256"
    "\346\212\200\350\203\275\347\255\211\347\272\247\0220\n\020m_CostContribute\030\010 \001(\005B\026"
    "\302\377\024\022\345\277\203\346\263\225\346\266\210\350\200\227\350\264\241\347\214\256\022P\n\013m_attribute\030\t "
    "\003(\0132%.proto_ff.E_GuildCollegeAttributeDe"
    "scB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\002\"S\n\022Sheet_GuildC"
    "ollege\022=\n\023E_GuildCollege_List\030\001 \003(\0132\030.pr"
    "oto_ff.E_GuildCollegeB\006\210\301\024\200\200\001\"G\n\rE_Guild"
    "Answer\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID\022 \n\010m_answer"
    "\030\002 \001(\tB\016\302\377\024\006\347\255\224\346\241\210\220\301\024@\"N\n\021Sheet_GuildAns"
    "wer\0229\n\022E_GuildAnswer_List\030\001 \003(\0132\027.proto_"
    "ff.E_GuildAnswerB\004\210\301\024@\"\207\002\n\022E_GuildRank_r"
    "eward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002 "
    "\001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\036\n\006m_note\030\003 \001(\tB\016\302\377\024\006\345\244\207"
    "\346\263\250\220\301\024@\022#\n\tm_rankMin\030\004 \001(\005B\020\302\377\024\014\346\216\222\345\220\215\344\270"
    "\213\351\231\220\022#\n\tm_rankMax\030\005 \001(\005B\020\302\377\024\014\346\216\222\345\220\215\344\270\212\351\231"
    "\220\022-\n\007m_lvMin\030\006 \001(\005B\034\302\377\024\030\350\267\250\346\234\215\344\270\226\347\225\214\347\255\211\347"
    "\272\247\344\270\213\351\231\220\022&\n\tm_rewardS\030\007 \001(\005B\023\302\377\024\017\346\234\215\345\212\241\345"
    "\231\250\345\245\226\345\212\261\"^\n\026Sheet_GuildRank_reward\022D\n\027E_"
    "GuildRank_reward_List\030\001 \003(\0132\034.proto_ff.E"
    "_GuildRank_rewardB\005\210\301\024\200\002\"N\n\033E_GuildShouh"
    "skillRewardDesc\022\031\n\005m_Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351"
    "\207\217\022\024\n\004m_Id\030\002 \001(\005B\006\302\377\024\002id\"\225\002\n\021E_GuildShou"
    "hskill\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\006m_name\030\002"
    " \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024@\022\036\n\010m_costId\030\003 \001(\005B\014"
    "\302\377\024\010\350\212\261\350\264\271id\022#\n\tm_costNum\030\004 \001(\005B\020\302\377\024\014\350\212\261"
    "\350\264\271\346\225\260\351\207\217\022\037\n\tm_skillid\030\005 \001(\005B\014\302\377\024\010\346\212\200\350\203\275"
    "id\022\033\n\007m_times\030\006 \001(\005B\n\302\377\024\006\346\254\241\346\225\260\022G\n\010m_rew"
    "ard\030\007 \003(\0132%.proto_ff.E_GuildShouhskillRe"
    "wardDescB\016\302\377\024\006\345\245\226\345\212\261\210\301\024\002\"Z\n\025Sheet_GuildS"
    "houhskill\022A\n\026E_GuildShouhskill_List\030\001 \003("
    "\0132\033.proto_ff.E_GuildShouhskillB\004\210\301\024\010\"\271\001\n"
    "\017E_GuildGwreward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002ID\022\032"
    "\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\'\n\010m_reward\030\003"
    " \001(\tB\025\302\377\024\014\346\234\254\346\234\215\345\245\226\345\212\261\220\301\024\200\002\022,\n\rm_Crossre"
    "ward\030\004 \001(\tB\025\302\377\024\014\350\267\250\346\234\215\345\245\226\345\212\261\220\301\024\200\002\022\035\n\005m_a"
    "rg\030\005 \003(\005B\016\302\377\024\006\345\217\202\346\225\260\210\301\024\003\"U\n\023Sheet_GuildG"
    "wreward\022>\n\024E_GuildGwreward_List\030\001 \003(\0132\031."
    "proto_ff.E_GuildGwrewardB\005\210\301\024\200\001\"\310\001\n\022E_Gu"
    "ildGwwinstreak\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\013"
    "m_winStreak\030\002 \001(\005B\r\302\377\024\t\350\277\236\350\203\234\346\225\260\022%\n\013m_wi"
    "nReward\030\003 \001(\005B\020\302\377\024\014\350\277\236\350\203\234\345\245\226\345\212\261\022%\n\013m_end"
    "Reward\030\004 \001(\005B\020\302\377\024\014\347\273\210\347\273\223\345\245\226\345\212\261\022*\n\020m_chal"
    "lengeSkill\030\005 \001(\005B\020\302\377\024\014\345\243\253\346\260\224\346\212\200\350\203\275\"]\n\026Sh"
    "eet_GuildGwwinstreak\022C\n\027E_GuildGwwinstre"
    "ak_List\030\001 \003(\0132\034.proto_ff.E_GuildGwwinstr"
    "eakB\004\210\301\024 \"\226\001\n\rE_GuildTtower\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002id\022\035\n\007m_dupid\030\002 \001(\005B\014\302\377\024\010\345\211\257\346\234\254id"
    "\022$\n\nm_breakBox\030\003 \001(\005B\020\302\377\024\014\351\200\232\345\205\263\345\245\226\345\212\261\022*"
    "\n\nm_clearBox\030\004 \001(\005B\026\302\377\024\022\345\215\225\346\254\241\347\273\223\347\256\227\345\245\226\345"
    "\212\261\"O\n\021Sheet_GuildTtower\022:\n\022E_GuildTtower"
    "_List\030\001 \003(\0132\027.proto_ff.E_GuildTtowerB\005\210\301"
    "\024\200\001\"U\n!E_GuildTtowerdevelopAttributeDesc"
    "\022\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001"
    "(\005B\006\302\377\024\002ID\"\306\001\n\024E_GuildTtowerdevelop\022\024\n\004m"
    "_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002 \001(\005B\n\302\377\024\006\347"
    "\261\273\345\236\213\022$\n\013m_dataGroup\030\003 \001(\005B\017\302\377\024\013\346\225\260\346\215\256\347\273"
    "\204id\022V\n\013m_attribute\030\004 \003(\0132+.proto_ff.E_Gu"
    "ildTtowerdevelopAttributeDescB\024\302\377\024\014\345\237\272\347\241"
    "\200\345\261\236\346\200\247\210\301\024\010\"c\n\030Sheet_GuildTtowerdevelop\022"
    "G\n\031E_GuildTtowerdevelop_List\030\001 \003(\0132\036.pro"
    "to_ff.E_GuildTtowerdevelopB\004\210\301\024@\"Z\n&E_Gu"
    "ildTtowerdevelop_dataAttributeDesc\022\030\n\007m_"
    "value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001(\005B\006\302\377"
    "\024\002ID\"\367\001\n\031E_GuildTtowerdevelop_data\022\024\n\004m_"
    "id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_groupID\030\002 \001(\005B\t\302\377\024"
    "\005\347\273\204id\022$\n\nm_costItem\030\003 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\351\201"
    "\223\345\205\267\022#\n\tm_costnum\030\004 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\346\225\260\351\207"
    "\217\022[\n\013m_attribute\030\005 \003(\01320.proto_ff.E_Guil"
    "dTtowerdevelop_dataAttributeDescB\024\302\377\024\014\345\237"
    "\272\347\241\200\345\261\236\346\200\247\210\301\024\010\"r\n\035Sheet_GuildTtowerdevel"
    "op_data\022Q\n\036E_GuildTtowerdevelop_data_Lis"
    "t\030\001 \003(\0132#.proto_ff.E_GuildTtowerdevelop_"
    "dataB\004\210\301\024 ", 10410);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Guild.proto", &protobuf_RegisterTypes);
  E_GuildConstant::default_instance_ = new E_GuildConstant();
  Sheet_GuildConstant::default_instance_ = new Sheet_GuildConstant();
  E_GuildLevel::default_instance_ = new E_GuildLevel();
  Sheet_GuildLevel::default_instance_ = new Sheet_GuildLevel();
  E_GuildPosition::default_instance_ = new E_GuildPosition();
  Sheet_GuildPosition::default_instance_ = new Sheet_GuildPosition();
  E_GuildSalaryRewardDesc::default_instance_ = new E_GuildSalaryRewardDesc();
  E_GuildSalary::default_instance_ = new E_GuildSalary();
  Sheet_GuildSalary::default_instance_ = new Sheet_GuildSalary();
  E_GuildDonateRewardDesc::default_instance_ = new E_GuildDonateRewardDesc();
  E_GuildDonate::default_instance_ = new E_GuildDonate();
  Sheet_GuildDonate::default_instance_ = new Sheet_GuildDonate();
  E_GuildPacket::default_instance_ = new E_GuildPacket();
  Sheet_GuildPacket::default_instance_ = new Sheet_GuildPacket();
  E_GuildPrestigetask::default_instance_ = new E_GuildPrestigetask();
  Sheet_GuildPrestigetask::default_instance_ = new Sheet_GuildPrestigetask();
  E_GuildLvreward::default_instance_ = new E_GuildLvreward();
  Sheet_GuildLvreward::default_instance_ = new Sheet_GuildLvreward();
  E_GuildCollegeAttributeDesc::default_instance_ = new E_GuildCollegeAttributeDesc();
  E_GuildCollege::default_instance_ = new E_GuildCollege();
  Sheet_GuildCollege::default_instance_ = new Sheet_GuildCollege();
  E_GuildAnswer::default_instance_ = new E_GuildAnswer();
  Sheet_GuildAnswer::default_instance_ = new Sheet_GuildAnswer();
  E_GuildRank_reward::default_instance_ = new E_GuildRank_reward();
  Sheet_GuildRank_reward::default_instance_ = new Sheet_GuildRank_reward();
  E_GuildShouhskillRewardDesc::default_instance_ = new E_GuildShouhskillRewardDesc();
  E_GuildShouhskill::default_instance_ = new E_GuildShouhskill();
  Sheet_GuildShouhskill::default_instance_ = new Sheet_GuildShouhskill();
  E_GuildGwreward::default_instance_ = new E_GuildGwreward();
  Sheet_GuildGwreward::default_instance_ = new Sheet_GuildGwreward();
  E_GuildGwwinstreak::default_instance_ = new E_GuildGwwinstreak();
  Sheet_GuildGwwinstreak::default_instance_ = new Sheet_GuildGwwinstreak();
  E_GuildTtower::default_instance_ = new E_GuildTtower();
  Sheet_GuildTtower::default_instance_ = new Sheet_GuildTtower();
  E_GuildTtowerdevelopAttributeDesc::default_instance_ = new E_GuildTtowerdevelopAttributeDesc();
  E_GuildTtowerdevelop::default_instance_ = new E_GuildTtowerdevelop();
  Sheet_GuildTtowerdevelop::default_instance_ = new Sheet_GuildTtowerdevelop();
  E_GuildTtowerdevelop_dataAttributeDesc::default_instance_ = new E_GuildTtowerdevelop_dataAttributeDesc();
  E_GuildTtowerdevelop_data::default_instance_ = new E_GuildTtowerdevelop_data();
  Sheet_GuildTtowerdevelop_data::default_instance_ = new Sheet_GuildTtowerdevelop_data();
  E_GuildConstant::default_instance_->InitAsDefaultInstance();
  Sheet_GuildConstant::default_instance_->InitAsDefaultInstance();
  E_GuildLevel::default_instance_->InitAsDefaultInstance();
  Sheet_GuildLevel::default_instance_->InitAsDefaultInstance();
  E_GuildPosition::default_instance_->InitAsDefaultInstance();
  Sheet_GuildPosition::default_instance_->InitAsDefaultInstance();
  E_GuildSalaryRewardDesc::default_instance_->InitAsDefaultInstance();
  E_GuildSalary::default_instance_->InitAsDefaultInstance();
  Sheet_GuildSalary::default_instance_->InitAsDefaultInstance();
  E_GuildDonateRewardDesc::default_instance_->InitAsDefaultInstance();
  E_GuildDonate::default_instance_->InitAsDefaultInstance();
  Sheet_GuildDonate::default_instance_->InitAsDefaultInstance();
  E_GuildPacket::default_instance_->InitAsDefaultInstance();
  Sheet_GuildPacket::default_instance_->InitAsDefaultInstance();
  E_GuildPrestigetask::default_instance_->InitAsDefaultInstance();
  Sheet_GuildPrestigetask::default_instance_->InitAsDefaultInstance();
  E_GuildLvreward::default_instance_->InitAsDefaultInstance();
  Sheet_GuildLvreward::default_instance_->InitAsDefaultInstance();
  E_GuildCollegeAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_GuildCollege::default_instance_->InitAsDefaultInstance();
  Sheet_GuildCollege::default_instance_->InitAsDefaultInstance();
  E_GuildAnswer::default_instance_->InitAsDefaultInstance();
  Sheet_GuildAnswer::default_instance_->InitAsDefaultInstance();
  E_GuildRank_reward::default_instance_->InitAsDefaultInstance();
  Sheet_GuildRank_reward::default_instance_->InitAsDefaultInstance();
  E_GuildShouhskillRewardDesc::default_instance_->InitAsDefaultInstance();
  E_GuildShouhskill::default_instance_->InitAsDefaultInstance();
  Sheet_GuildShouhskill::default_instance_->InitAsDefaultInstance();
  E_GuildGwreward::default_instance_->InitAsDefaultInstance();
  Sheet_GuildGwreward::default_instance_->InitAsDefaultInstance();
  E_GuildGwwinstreak::default_instance_->InitAsDefaultInstance();
  Sheet_GuildGwwinstreak::default_instance_->InitAsDefaultInstance();
  E_GuildTtower::default_instance_->InitAsDefaultInstance();
  Sheet_GuildTtower::default_instance_->InitAsDefaultInstance();
  E_GuildTtowerdevelopAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_GuildTtowerdevelop::default_instance_->InitAsDefaultInstance();
  Sheet_GuildTtowerdevelop::default_instance_->InitAsDefaultInstance();
  E_GuildTtowerdevelop_dataAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_GuildTtowerdevelop_data::default_instance_->InitAsDefaultInstance();
  Sheet_GuildTtowerdevelop_data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fGuild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fGuild_2eproto {
  StaticDescriptorInitializer_E_5fGuild_2eproto() {
    protobuf_AddDesc_E_5fGuild_2eproto();
  }
} static_descriptor_initializer_E_5fGuild_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_GuildConstant::kMConstantidFieldNumber;
const int E_GuildConstant::kMSetItemFieldNumber;
const int E_GuildConstant::kMNameItemFieldNumber;
const int E_GuildConstant::kMEditRequireLVFieldNumber;
const int E_GuildConstant::kMGiftCDFieldNumber;
const int E_GuildConstant::kMDismissFieldNumber;
const int E_GuildConstant::kMTransferGuildFieldNumber;
const int E_GuildConstant::kMTerritoryFieldNumber;
const int E_GuildConstant::kMAutoMinLVFieldNumber;
const int E_GuildConstant::kMAutoMinBPFieldNumber;
const int E_GuildConstant::kMDonateTimesFieldNumber;
const int E_GuildConstant::kMPacketMaxDFieldNumber;
const int E_GuildConstant::kMPacketMaxBDFieldNumber;
const int E_GuildConstant::kMPacketMaxSendFieldNumber;
const int E_GuildConstant::kMPacketvipFieldNumber;
const int E_GuildConstant::kMPacketAddFieldNumber;
const int E_GuildConstant::kMPrestigeTasOneKeyVIPFieldNumber;
const int E_GuildConstant::kMPrestigeTasOneKeyLVFieldNumber;
const int E_GuildConstant::kMPrestigeTaskPrivageFieldNumber;
const int E_GuildConstant::kMPrestigeTaskFlashFieldNumber;
const int E_GuildConstant::kMPrestigeTaskflashPriceFieldNumber;
const int E_GuildConstant::kMPrestigeTaskTimesFieldNumber;
const int E_GuildConstant::kMRewardCDFieldNumber;
const int E_GuildConstant::kMAnswerdelayFieldNumber;
const int E_GuildConstant::kMAnswerNumFieldNumber;
const int E_GuildConstant::kMAnswerTimeFieldNumber;
const int E_GuildConstant::kMAnswerResultTimeFieldNumber;
const int E_GuildConstant::kMAnswerLimitFieldNumber;
const int E_GuildConstant::kMAnswerFirstFieldNumber;
const int E_GuildConstant::kMAnswerSuccessFieldNumber;
const int E_GuildConstant::kMAnsweBasicsFieldNumber;
const int E_GuildConstant::kMLinkLvUpPerFieldNumber;
const int E_GuildConstant::kMLinkLvUpMaxFieldNumber;
const int E_GuildConstant::kMLinkTimeFieldNumber;
const int E_GuildConstant::kMMonsterIDFieldNumber;
const int E_GuildConstant::kMPointFieldNumber;
const int E_GuildConstant::kMCollectTimesFieldNumber;
const int E_GuildConstant::kMShensDayTimesFieldNumber;
const int E_GuildConstant::kMShensWeekTimesFieldNumber;
const int E_GuildConstant::kMShensDupFieldNumber;
const int E_GuildConstant::kMShensItemFieldNumber;
const int E_GuildConstant::kMShensCostFieldNumber;
const int E_GuildConstant::kMShensCostActiveFieldNumber;
const int E_GuildConstant::kMShouhDupFieldNumber;
const int E_GuildConstant::kMShouhExpSkillFieldNumber;
const int E_GuildConstant::kMShouhMosIdFieldNumber;
const int E_GuildConstant::kMGWDupidFieldNumber;
const int E_GuildConstant::kMGWBattleTimeFieldNumber;
const int E_GuildConstant::kMGWRestTimeFieldNumber;
const int E_GuildConstant::kMGWCenterMIDFieldNumber;
const int E_GuildConstant::kMGWTowerMIDFieldNumber;
const int E_GuildConstant::kMGWTankMIDFieldNumber;
const int E_GuildConstant::kMGWBornRPointFieldNumber;
const int E_GuildConstant::kMGWCenterRPointFieldNumber;
const int E_GuildConstant::kMGWTowerRPointFieldNumber;
const int E_GuildConstant::kMGWTankRPointFieldNumber;
const int E_GuildConstant::kMGWBornBPointFieldNumber;
const int E_GuildConstant::kMGWCenterBPointFieldNumber;
const int E_GuildConstant::kMGWTowerBPointFieldNumber;
const int E_GuildConstant::kMGWTankBPointFieldNumber;
const int E_GuildConstant::kMTankNumFieldNumber;
const int E_GuildConstant::kMTankRestTimeFieldNumber;
const int E_GuildConstant::kMTankRestNumFieldNumber;
const int E_GuildConstant::kMDominateDailyFieldNumber;
const int E_GuildConstant::kMDominateBossRewardFieldNumber;
const int E_GuildConstant::kMFreePointFieldNumber;
const int E_GuildConstant::kMDefFreePointFieldNumber;
const int E_GuildConstant::kMPlayerPointFieldNumber;
const int E_GuildConstant::kMTankPointFieldNumber;
const int E_GuildConstant::kMTowerPointFieldNumber;
const int E_GuildConstant::kMCenterPointFieldNumber;
const int E_GuildConstant::kMAssistRadioFieldNumber;
const int E_GuildConstant::kMTTeamDamageAddFieldNumber;
const int E_GuildConstant::kMTWeekCloseTimeFieldNumber;
const int E_GuildConstant::kMCyclicRewardFieldNumber;
const int E_GuildConstant::kMTenCyclicRewardFieldNumber;
#endif  // !_MSC_VER

E_GuildConstant::E_GuildConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildConstant::InitAsDefaultInstance() {
}

E_GuildConstant::E_GuildConstant(const E_GuildConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildConstant::SharedCtor() {
  _cached_size_ = 0;
  m_constantid_ = 0;
  m_setitem_ = 0;
  m_nameitem_ = 0;
  m_editrequirelv_ = 0;
  m_giftcd_ = 0;
  m_dismiss_ = 0;
  m_transferguild_ = 0;
  m_territory_ = 0;
  m_autominlv_ = 0;
  m_autominbp_ = 0;
  m_donatetimes_ = 0;
  m_packetmaxd_ = 0;
  m_packetmaxbd_ = 0;
  m_packetmaxsend_ = 0;
  m_packetvip_ = 0;
  m_packetadd_ = 0;
  m_prestigetasonekeyvip_ = 0;
  m_prestigetasonekeylv_ = 0;
  m_prestigetaskprivage_ = 0;
  m_prestigetaskflash_ = 0;
  m_prestigetaskflashprice_ = 0;
  m_prestigetasktimes_ = 0;
  m_rewardcd_ = 0;
  m_answerdelay_ = 0;
  m_answernum_ = 0;
  m_answertime_ = 0;
  m_answerresulttime_ = 0;
  m_answerlimit_ = 0;
  m_answerfirst_ = 0;
  m_answersuccess_ = 0;
  m_answebasics_ = 0;
  m_linklvupper_ = 0;
  m_linklvupmax_ = 0;
  m_linktime_ = 0;
  m_monsterid_ = 0;
  m_point_ = 0;
  m_collecttimes_ = 0;
  m_shens_daytimes_ = 0;
  m_shens_weektimes_ = 0;
  m_shens_dup_ = 0;
  m_shensitem_ = 0;
  m_shenscost_ = 0;
  m_shenscostactive_ = 0;
  m_shouh_dup_ = 0;
  m_shouhexpskill_ = 0;
  m_shouhmosid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gwdupid_ = 0;
  m_gwbattletime_ = 0;
  m_gwresttime_ = 0;
  m_gwcentermid_ = 0;
  m_gwtowermid_ = 0;
  m_gwtankmid_ = 0;
  m_gwbornrpoint_ = 0;
  m_gwcenterrpoint_ = 0;
  m_gwtowerrpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gwtankrpoint_ = 0;
  m_gwbornbpoint_ = 0;
  m_gwcenterbpoint_ = 0;
  m_gwtowerbpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gwtankbpoint_ = 0;
  m_tanknum_ = 0;
  m_tankresttime_ = 0;
  m_tankrestnum_ = 0;
  m_dominatedaily_ = 0;
  m_dominatebossreward_ = 0;
  m_freepoint_ = 0;
  m_deffreepoint_ = 0;
  m_playerpoint_ = 0;
  m_tankpoint_ = 0;
  m_towerpoint_ = 0;
  m_centerpoint_ = 0;
  m_assistradio_ = 0;
  m_tteamdamageadd_ = 0;
  m_tweekclosetime_ = 0;
  m_cyclicreward_ = 0;
  m_tencyclicreward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildConstant::~E_GuildConstant() {
  SharedDtor();
}

void E_GuildConstant::SharedDtor() {
  if (m_shouhmosid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_shouhmosid_;
  }
  if (m_gwtowerrpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gwtowerrpoint_;
  }
  if (m_gwtowerbpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gwtowerbpoint_;
  }
  if (this != default_instance_) {
  }
}

void E_GuildConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildConstant_descriptor_;
}

const E_GuildConstant& E_GuildConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildConstant* E_GuildConstant::default_instance_ = NULL;

E_GuildConstant* E_GuildConstant::New() const {
  return new E_GuildConstant;
}

void E_GuildConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_constantid_ = 0;
    m_setitem_ = 0;
    m_nameitem_ = 0;
    m_editrequirelv_ = 0;
    m_giftcd_ = 0;
    m_dismiss_ = 0;
    m_transferguild_ = 0;
    m_territory_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_autominlv_ = 0;
    m_autominbp_ = 0;
    m_donatetimes_ = 0;
    m_packetmaxd_ = 0;
    m_packetmaxbd_ = 0;
    m_packetmaxsend_ = 0;
    m_packetvip_ = 0;
    m_packetadd_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_prestigetasonekeyvip_ = 0;
    m_prestigetasonekeylv_ = 0;
    m_prestigetaskprivage_ = 0;
    m_prestigetaskflash_ = 0;
    m_prestigetaskflashprice_ = 0;
    m_prestigetasktimes_ = 0;
    m_rewardcd_ = 0;
    m_answerdelay_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    m_answernum_ = 0;
    m_answertime_ = 0;
    m_answerresulttime_ = 0;
    m_answerlimit_ = 0;
    m_answerfirst_ = 0;
    m_answersuccess_ = 0;
    m_answebasics_ = 0;
    m_linklvupper_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    m_linklvupmax_ = 0;
    m_linktime_ = 0;
    m_monsterid_ = 0;
    m_point_ = 0;
    m_collecttimes_ = 0;
    m_shens_daytimes_ = 0;
    m_shens_weektimes_ = 0;
    m_shens_dup_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    m_shensitem_ = 0;
    m_shenscost_ = 0;
    m_shenscostactive_ = 0;
    m_shouh_dup_ = 0;
    m_shouhexpskill_ = 0;
    if (has_m_shouhmosid()) {
      if (m_shouhmosid_ != &::google::protobuf::internal::kEmptyString) {
        m_shouhmosid_->clear();
      }
    }
    m_gwdupid_ = 0;
    m_gwbattletime_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    m_gwresttime_ = 0;
    m_gwcentermid_ = 0;
    m_gwtowermid_ = 0;
    m_gwtankmid_ = 0;
    m_gwbornrpoint_ = 0;
    m_gwcenterrpoint_ = 0;
    if (has_m_gwtowerrpoint()) {
      if (m_gwtowerrpoint_ != &::google::protobuf::internal::kEmptyString) {
        m_gwtowerrpoint_->clear();
      }
    }
    m_gwtankrpoint_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    m_gwbornbpoint_ = 0;
    m_gwcenterbpoint_ = 0;
    if (has_m_gwtowerbpoint()) {
      if (m_gwtowerbpoint_ != &::google::protobuf::internal::kEmptyString) {
        m_gwtowerbpoint_->clear();
      }
    }
    m_gwtankbpoint_ = 0;
    m_tanknum_ = 0;
    m_tankresttime_ = 0;
    m_tankrestnum_ = 0;
    m_dominatedaily_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    m_dominatebossreward_ = 0;
    m_freepoint_ = 0;
    m_deffreepoint_ = 0;
    m_playerpoint_ = 0;
    m_tankpoint_ = 0;
    m_towerpoint_ = 0;
    m_centerpoint_ = 0;
    m_assistradio_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    m_tteamdamageadd_ = 0;
    m_tweekclosetime_ = 0;
    m_cyclicreward_ = 0;
    m_tencyclicreward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_constantid_)));
          set_has_m_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_setItem;
        break;
      }

      // optional int32 m_setItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_setItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_setitem_)));
          set_has_m_setitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_nameItem;
        break;
      }

      // optional int32 m_nameItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_nameItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_nameitem_)));
          set_has_m_nameitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_EditRequireLV;
        break;
      }

      // optional int32 m_EditRequireLV = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_EditRequireLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_editrequirelv_)));
          set_has_m_editrequirelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_giftCD;
        break;
      }

      // optional int32 m_giftCD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giftCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftcd_)));
          set_has_m_giftcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_dismiss;
        break;
      }

      // optional int32 m_dismiss = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dismiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dismiss_)));
          set_has_m_dismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_transferGuild;
        break;
      }

      // optional int32 m_transferGuild = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_transferGuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_transferguild_)));
          set_has_m_transferguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_territory;
        break;
      }

      // optional int32 m_territory = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_territory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_territory_)));
          set_has_m_territory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_autoMinLV;
        break;
      }

      // optional int32 m_autoMinLV = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_autoMinLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_autominlv_)));
          set_has_m_autominlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_autoMinBP;
        break;
      }

      // optional int32 m_autoMinBP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_autoMinBP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_autominbp_)));
          set_has_m_autominbp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_donateTimes;
        break;
      }

      // optional int32 m_donateTimes = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_donateTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_donatetimes_)));
          set_has_m_donatetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_packetMaxD;
        break;
      }

      // optional int32 m_packetMaxD = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packetMaxD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packetmaxd_)));
          set_has_m_packetmaxd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_packetMaxBD;
        break;
      }

      // optional int32 m_packetMaxBD = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packetMaxBD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packetmaxbd_)));
          set_has_m_packetmaxbd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_packetMaxSend;
        break;
      }

      // optional int32 m_packetMaxSend = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packetMaxSend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packetmaxsend_)));
          set_has_m_packetmaxsend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_packetvip;
        break;
      }

      // optional int32 m_packetvip = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packetvip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packetvip_)));
          set_has_m_packetvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_packetAdd;
        break;
      }

      // optional int32 m_packetAdd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_packetAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_packetadd_)));
          set_has_m_packetadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_prestigeTasOneKeyVIP;
        break;
      }

      // optional int32 m_prestigeTasOneKeyVIP = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTasOneKeyVIP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetasonekeyvip_)));
          set_has_m_prestigetasonekeyvip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_prestigeTasOneKeyLV;
        break;
      }

      // optional int32 m_prestigeTasOneKeyLV = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTasOneKeyLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetasonekeylv_)));
          set_has_m_prestigetasonekeylv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_prestigeTaskPrivage;
        break;
      }

      // optional int32 m_prestigeTaskPrivage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTaskPrivage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetaskprivage_)));
          set_has_m_prestigetaskprivage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_prestigeTaskFlash;
        break;
      }

      // optional int32 m_prestigeTaskFlash = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTaskFlash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetaskflash_)));
          set_has_m_prestigetaskflash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_m_prestigeTaskflashPrice;
        break;
      }

      // optional int32 m_prestigeTaskflashPrice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTaskflashPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetaskflashprice_)));
          set_has_m_prestigetaskflashprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_m_prestigeTaskTimes;
        break;
      }

      // optional int32 m_prestigeTaskTimes = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prestigeTaskTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prestigetasktimes_)));
          set_has_m_prestigetasktimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_m_rewardCD;
        break;
      }

      // optional int32 m_rewardCD = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardcd_)));
          set_has_m_rewardcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_m_answerdelay;
        break;
      }

      // optional int32 m_answerdelay = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerdelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answerdelay_)));
          set_has_m_answerdelay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_m_answerNum;
        break;
      }

      // optional int32 m_answerNum = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answernum_)));
          set_has_m_answernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_m_answerTime;
        break;
      }

      // optional int32 m_answerTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answertime_)));
          set_has_m_answertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_m_answerResultTime;
        break;
      }

      // optional int32 m_answerResultTime = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerResultTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answerresulttime_)));
          set_has_m_answerresulttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_m_answerLimit;
        break;
      }

      // optional int32 m_answerLimit = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answerlimit_)));
          set_has_m_answerlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_m_answerFirst;
        break;
      }

      // optional int32 m_answerFirst = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerFirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answerfirst_)));
          set_has_m_answerfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_m_answerSuccess;
        break;
      }

      // optional int32 m_answerSuccess = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answerSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answersuccess_)));
          set_has_m_answersuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_m_answeBasics;
        break;
      }

      // optional int32 m_answeBasics = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_answeBasics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_answebasics_)));
          set_has_m_answebasics();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_m_linkLvUpPer;
        break;
      }

      // optional int32 m_linkLvUpPer = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkLvUpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linklvupper_)));
          set_has_m_linklvupper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_m_linkLvUpMax;
        break;
      }

      // optional int32 m_linkLvUpMax = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkLvUpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linklvupmax_)));
          set_has_m_linklvupmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_m_linkTime;
        break;
      }

      // optional int32 m_linkTime = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linktime_)));
          set_has_m_linktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_m_monsterID;
        break;
      }

      // optional int32 m_monsterID = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_monsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_monsterid_)));
          set_has_m_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_m_collectTimes;
        break;
      }

      // optional int32 m_collectTimes = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_collectTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_collecttimes_)));
          set_has_m_collecttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_m_shens_dayTimes;
        break;
      }

      // optional int32 m_shens_dayTimes = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shens_dayTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shens_daytimes_)));
          set_has_m_shens_daytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_m_shens_weekTimes;
        break;
      }

      // optional int32 m_shens_weekTimes = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shens_weekTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shens_weektimes_)));
          set_has_m_shens_weektimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_m_shens_dup;
        break;
      }

      // optional int32 m_shens_dup = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shens_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shens_dup_)));
          set_has_m_shens_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_m_shensItem;
        break;
      }

      // optional int32 m_shensItem = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shensItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shensitem_)));
          set_has_m_shensitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_m_shensCost;
        break;
      }

      // optional int32 m_shensCost = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shensCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shenscost_)));
          set_has_m_shenscost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_m_shensCostActive;
        break;
      }

      // optional int32 m_shensCostActive = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shensCostActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shenscostactive_)));
          set_has_m_shenscostactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_m_shouh_dup;
        break;
      }

      // optional int32 m_shouh_dup = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shouh_dup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shouh_dup_)));
          set_has_m_shouh_dup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_m_shouhExpSkill;
        break;
      }

      // optional int32 m_shouhExpSkill = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shouhExpSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shouhexpskill_)));
          set_has_m_shouhexpskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_m_shouhMosId;
        break;
      }

      // optional string m_shouhMosId = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_shouhMosId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_shouhmosid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_shouhmosid().data(), this->m_shouhmosid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_m_GWDupid;
        break;
      }

      // optional int32 m_GWDupid = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWDupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwdupid_)));
          set_has_m_gwdupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_m_GWBattleTime;
        break;
      }

      // optional int32 m_GWBattleTime = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWBattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwbattletime_)));
          set_has_m_gwbattletime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_m_GWRestTime;
        break;
      }

      // optional int32 m_GWRestTime = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWRestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwresttime_)));
          set_has_m_gwresttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_m_GWCenterMID;
        break;
      }

      // optional int32 m_GWCenterMID = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWCenterMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwcentermid_)));
          set_has_m_gwcentermid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_m_GWTowerMID;
        break;
      }

      // optional int32 m_GWTowerMID = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWTowerMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwtowermid_)));
          set_has_m_gwtowermid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_m_GWTankMID;
        break;
      }

      // optional int32 m_GWTankMID = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWTankMID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwtankmid_)));
          set_has_m_gwtankmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_m_GWBornRPoint;
        break;
      }

      // optional int32 m_GWBornRPoint = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWBornRPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwbornrpoint_)));
          set_has_m_gwbornrpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_m_GWCenterRPoint;
        break;
      }

      // optional int32 m_GWCenterRPoint = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWCenterRPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwcenterrpoint_)));
          set_has_m_gwcenterrpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(442)) goto parse_m_GWTowerRPoint;
        break;
      }

      // optional string m_GWTowerRPoint = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_GWTowerRPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gwtowerrpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gwtowerrpoint().data(), this->m_gwtowerrpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_m_GWTankRPoint;
        break;
      }

      // optional int32 m_GWTankRPoint = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWTankRPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwtankrpoint_)));
          set_has_m_gwtankrpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_m_GWBornBPoint;
        break;
      }

      // optional int32 m_GWBornBPoint = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWBornBPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwbornbpoint_)));
          set_has_m_gwbornbpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_m_GWCenterBPoint;
        break;
      }

      // optional int32 m_GWCenterBPoint = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWCenterBPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwcenterbpoint_)));
          set_has_m_gwcenterbpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_m_GWTowerBPoint;
        break;
      }

      // optional string m_GWTowerBPoint = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_GWTowerBPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gwtowerbpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gwtowerbpoint().data(), this->m_gwtowerbpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_m_GWTankBPoint;
        break;
      }

      // optional int32 m_GWTankBPoint = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_GWTankBPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gwtankbpoint_)));
          set_has_m_gwtankbpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_m_tankNum;
        break;
      }

      // optional int32 m_tankNum = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tankNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tanknum_)));
          set_has_m_tanknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_m_tankRestTime;
        break;
      }

      // optional int32 m_tankRestTime = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tankRestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tankresttime_)));
          set_has_m_tankresttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_m_tankRestNum;
        break;
      }

      // optional int32 m_tankRestNum = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tankRestNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tankrestnum_)));
          set_has_m_tankrestnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_m_dominateDaily;
        break;
      }

      // optional int32 m_dominateDaily = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dominateDaily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dominatedaily_)));
          set_has_m_dominatedaily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_m_dominateBossReward;
        break;
      }

      // optional int32 m_dominateBossReward = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dominateBossReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dominatebossreward_)));
          set_has_m_dominatebossreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_m_freePoint;
        break;
      }

      // optional int32 m_freePoint = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_freePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_freepoint_)));
          set_has_m_freepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_m_defFreePoint;
        break;
      }

      // optional int32 m_defFreePoint = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_defFreePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_deffreepoint_)));
          set_has_m_deffreepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_m_playerPoint;
        break;
      }

      // optional int32 m_playerPoint = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerpoint_)));
          set_has_m_playerpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_m_tankPoint;
        break;
      }

      // optional int32 m_tankPoint = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tankPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tankpoint_)));
          set_has_m_tankpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_m_towerPoint;
        break;
      }

      // optional int32 m_towerPoint = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_towerPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_towerpoint_)));
          set_has_m_towerpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_m_centerPoint;
        break;
      }

      // optional int32 m_centerPoint = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_centerPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_centerpoint_)));
          set_has_m_centerpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_m_assistRadio;
        break;
      }

      // optional int32 m_assistRadio = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_assistRadio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_assistradio_)));
          set_has_m_assistradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_m_TTeamDamageAdd;
        break;
      }

      // optional int32 m_TTeamDamageAdd = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TTeamDamageAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tteamdamageadd_)));
          set_has_m_tteamdamageadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_m_TWeekCloseTime;
        break;
      }

      // optional int32 m_TWeekCloseTime = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_TWeekCloseTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tweekclosetime_)));
          set_has_m_tweekclosetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_m_cyclicReward;
        break;
      }

      // optional int32 m_cyclicReward = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_cyclicReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_cyclicreward_)));
          set_has_m_cyclicreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(608)) goto parse_m_tenCyclicReward;
        break;
      }

      // optional int32 m_tenCyclicReward = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tenCyclicReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tencyclicreward_)));
          set_has_m_tencyclicreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_constantid(), output);
  }

  // optional int32 m_setItem = 2;
  if (has_m_setitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_setitem(), output);
  }

  // optional int32 m_nameItem = 3;
  if (has_m_nameitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_nameitem(), output);
  }

  // optional int32 m_EditRequireLV = 4;
  if (has_m_editrequirelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_editrequirelv(), output);
  }

  // optional int32 m_giftCD = 5;
  if (has_m_giftcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_giftcd(), output);
  }

  // optional int32 m_dismiss = 6;
  if (has_m_dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_dismiss(), output);
  }

  // optional int32 m_transferGuild = 7;
  if (has_m_transferguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_transferguild(), output);
  }

  // optional int32 m_territory = 8;
  if (has_m_territory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_territory(), output);
  }

  // optional int32 m_autoMinLV = 9;
  if (has_m_autominlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_autominlv(), output);
  }

  // optional int32 m_autoMinBP = 10;
  if (has_m_autominbp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_autominbp(), output);
  }

  // optional int32 m_donateTimes = 11;
  if (has_m_donatetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_donatetimes(), output);
  }

  // optional int32 m_packetMaxD = 12;
  if (has_m_packetmaxd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_packetmaxd(), output);
  }

  // optional int32 m_packetMaxBD = 13;
  if (has_m_packetmaxbd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_packetmaxbd(), output);
  }

  // optional int32 m_packetMaxSend = 14;
  if (has_m_packetmaxsend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_packetmaxsend(), output);
  }

  // optional int32 m_packetvip = 15;
  if (has_m_packetvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_packetvip(), output);
  }

  // optional int32 m_packetAdd = 16;
  if (has_m_packetadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_packetadd(), output);
  }

  // optional int32 m_prestigeTasOneKeyVIP = 17;
  if (has_m_prestigetasonekeyvip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_prestigetasonekeyvip(), output);
  }

  // optional int32 m_prestigeTasOneKeyLV = 18;
  if (has_m_prestigetasonekeylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_prestigetasonekeylv(), output);
  }

  // optional int32 m_prestigeTaskPrivage = 19;
  if (has_m_prestigetaskprivage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_prestigetaskprivage(), output);
  }

  // optional int32 m_prestigeTaskFlash = 20;
  if (has_m_prestigetaskflash()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->m_prestigetaskflash(), output);
  }

  // optional int32 m_prestigeTaskflashPrice = 21;
  if (has_m_prestigetaskflashprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->m_prestigetaskflashprice(), output);
  }

  // optional int32 m_prestigeTaskTimes = 22;
  if (has_m_prestigetasktimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->m_prestigetasktimes(), output);
  }

  // optional int32 m_rewardCD = 23;
  if (has_m_rewardcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->m_rewardcd(), output);
  }

  // optional int32 m_answerdelay = 24;
  if (has_m_answerdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->m_answerdelay(), output);
  }

  // optional int32 m_answerNum = 25;
  if (has_m_answernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->m_answernum(), output);
  }

  // optional int32 m_answerTime = 26;
  if (has_m_answertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->m_answertime(), output);
  }

  // optional int32 m_answerResultTime = 27;
  if (has_m_answerresulttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->m_answerresulttime(), output);
  }

  // optional int32 m_answerLimit = 28;
  if (has_m_answerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->m_answerlimit(), output);
  }

  // optional int32 m_answerFirst = 29;
  if (has_m_answerfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->m_answerfirst(), output);
  }

  // optional int32 m_answerSuccess = 30;
  if (has_m_answersuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->m_answersuccess(), output);
  }

  // optional int32 m_answeBasics = 31;
  if (has_m_answebasics()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->m_answebasics(), output);
  }

  // optional int32 m_linkLvUpPer = 32;
  if (has_m_linklvupper()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->m_linklvupper(), output);
  }

  // optional int32 m_linkLvUpMax = 33;
  if (has_m_linklvupmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->m_linklvupmax(), output);
  }

  // optional int32 m_linkTime = 34;
  if (has_m_linktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->m_linktime(), output);
  }

  // optional int32 m_monsterID = 35;
  if (has_m_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->m_monsterid(), output);
  }

  // optional int32 m_point = 36;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->m_point(), output);
  }

  // optional int32 m_collectTimes = 37;
  if (has_m_collecttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->m_collecttimes(), output);
  }

  // optional int32 m_shens_dayTimes = 38;
  if (has_m_shens_daytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->m_shens_daytimes(), output);
  }

  // optional int32 m_shens_weekTimes = 39;
  if (has_m_shens_weektimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->m_shens_weektimes(), output);
  }

  // optional int32 m_shens_dup = 40;
  if (has_m_shens_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->m_shens_dup(), output);
  }

  // optional int32 m_shensItem = 41;
  if (has_m_shensitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->m_shensitem(), output);
  }

  // optional int32 m_shensCost = 42;
  if (has_m_shenscost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->m_shenscost(), output);
  }

  // optional int32 m_shensCostActive = 43;
  if (has_m_shenscostactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->m_shenscostactive(), output);
  }

  // optional int32 m_shouh_dup = 44;
  if (has_m_shouh_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->m_shouh_dup(), output);
  }

  // optional int32 m_shouhExpSkill = 45;
  if (has_m_shouhexpskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->m_shouhexpskill(), output);
  }

  // optional string m_shouhMosId = 46;
  if (has_m_shouhmosid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_shouhmosid().data(), this->m_shouhmosid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->m_shouhmosid(), output);
  }

  // optional int32 m_GWDupid = 47;
  if (has_m_gwdupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->m_gwdupid(), output);
  }

  // optional int32 m_GWBattleTime = 48;
  if (has_m_gwbattletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->m_gwbattletime(), output);
  }

  // optional int32 m_GWRestTime = 49;
  if (has_m_gwresttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->m_gwresttime(), output);
  }

  // optional int32 m_GWCenterMID = 50;
  if (has_m_gwcentermid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->m_gwcentermid(), output);
  }

  // optional int32 m_GWTowerMID = 51;
  if (has_m_gwtowermid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->m_gwtowermid(), output);
  }

  // optional int32 m_GWTankMID = 52;
  if (has_m_gwtankmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->m_gwtankmid(), output);
  }

  // optional int32 m_GWBornRPoint = 53;
  if (has_m_gwbornrpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->m_gwbornrpoint(), output);
  }

  // optional int32 m_GWCenterRPoint = 54;
  if (has_m_gwcenterrpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->m_gwcenterrpoint(), output);
  }

  // optional string m_GWTowerRPoint = 55;
  if (has_m_gwtowerrpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gwtowerrpoint().data(), this->m_gwtowerrpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      55, this->m_gwtowerrpoint(), output);
  }

  // optional int32 m_GWTankRPoint = 56;
  if (has_m_gwtankrpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->m_gwtankrpoint(), output);
  }

  // optional int32 m_GWBornBPoint = 57;
  if (has_m_gwbornbpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->m_gwbornbpoint(), output);
  }

  // optional int32 m_GWCenterBPoint = 58;
  if (has_m_gwcenterbpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->m_gwcenterbpoint(), output);
  }

  // optional string m_GWTowerBPoint = 59;
  if (has_m_gwtowerbpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gwtowerbpoint().data(), this->m_gwtowerbpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      59, this->m_gwtowerbpoint(), output);
  }

  // optional int32 m_GWTankBPoint = 60;
  if (has_m_gwtankbpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->m_gwtankbpoint(), output);
  }

  // optional int32 m_tankNum = 61;
  if (has_m_tanknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->m_tanknum(), output);
  }

  // optional int32 m_tankRestTime = 62;
  if (has_m_tankresttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->m_tankresttime(), output);
  }

  // optional int32 m_tankRestNum = 63;
  if (has_m_tankrestnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->m_tankrestnum(), output);
  }

  // optional int32 m_dominateDaily = 64;
  if (has_m_dominatedaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->m_dominatedaily(), output);
  }

  // optional int32 m_dominateBossReward = 65;
  if (has_m_dominatebossreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->m_dominatebossreward(), output);
  }

  // optional int32 m_freePoint = 66;
  if (has_m_freepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->m_freepoint(), output);
  }

  // optional int32 m_defFreePoint = 67;
  if (has_m_deffreepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->m_deffreepoint(), output);
  }

  // optional int32 m_playerPoint = 68;
  if (has_m_playerpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->m_playerpoint(), output);
  }

  // optional int32 m_tankPoint = 69;
  if (has_m_tankpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->m_tankpoint(), output);
  }

  // optional int32 m_towerPoint = 70;
  if (has_m_towerpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->m_towerpoint(), output);
  }

  // optional int32 m_centerPoint = 71;
  if (has_m_centerpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->m_centerpoint(), output);
  }

  // optional int32 m_assistRadio = 72;
  if (has_m_assistradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->m_assistradio(), output);
  }

  // optional int32 m_TTeamDamageAdd = 73;
  if (has_m_tteamdamageadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->m_tteamdamageadd(), output);
  }

  // optional int32 m_TWeekCloseTime = 74;
  if (has_m_tweekclosetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->m_tweekclosetime(), output);
  }

  // optional int32 m_cyclicReward = 75;
  if (has_m_cyclicreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->m_cyclicreward(), output);
  }

  // optional int32 m_tenCyclicReward = 76;
  if (has_m_tencyclicreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(76, this->m_tencyclicreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_constantid = 1;
  if (has_m_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_constantid(), target);
  }

  // optional int32 m_setItem = 2;
  if (has_m_setitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_setitem(), target);
  }

  // optional int32 m_nameItem = 3;
  if (has_m_nameitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_nameitem(), target);
  }

  // optional int32 m_EditRequireLV = 4;
  if (has_m_editrequirelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_editrequirelv(), target);
  }

  // optional int32 m_giftCD = 5;
  if (has_m_giftcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_giftcd(), target);
  }

  // optional int32 m_dismiss = 6;
  if (has_m_dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_dismiss(), target);
  }

  // optional int32 m_transferGuild = 7;
  if (has_m_transferguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_transferguild(), target);
  }

  // optional int32 m_territory = 8;
  if (has_m_territory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_territory(), target);
  }

  // optional int32 m_autoMinLV = 9;
  if (has_m_autominlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_autominlv(), target);
  }

  // optional int32 m_autoMinBP = 10;
  if (has_m_autominbp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_autominbp(), target);
  }

  // optional int32 m_donateTimes = 11;
  if (has_m_donatetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_donatetimes(), target);
  }

  // optional int32 m_packetMaxD = 12;
  if (has_m_packetmaxd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_packetmaxd(), target);
  }

  // optional int32 m_packetMaxBD = 13;
  if (has_m_packetmaxbd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_packetmaxbd(), target);
  }

  // optional int32 m_packetMaxSend = 14;
  if (has_m_packetmaxsend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_packetmaxsend(), target);
  }

  // optional int32 m_packetvip = 15;
  if (has_m_packetvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_packetvip(), target);
  }

  // optional int32 m_packetAdd = 16;
  if (has_m_packetadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_packetadd(), target);
  }

  // optional int32 m_prestigeTasOneKeyVIP = 17;
  if (has_m_prestigetasonekeyvip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_prestigetasonekeyvip(), target);
  }

  // optional int32 m_prestigeTasOneKeyLV = 18;
  if (has_m_prestigetasonekeylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_prestigetasonekeylv(), target);
  }

  // optional int32 m_prestigeTaskPrivage = 19;
  if (has_m_prestigetaskprivage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_prestigetaskprivage(), target);
  }

  // optional int32 m_prestigeTaskFlash = 20;
  if (has_m_prestigetaskflash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->m_prestigetaskflash(), target);
  }

  // optional int32 m_prestigeTaskflashPrice = 21;
  if (has_m_prestigetaskflashprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->m_prestigetaskflashprice(), target);
  }

  // optional int32 m_prestigeTaskTimes = 22;
  if (has_m_prestigetasktimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->m_prestigetasktimes(), target);
  }

  // optional int32 m_rewardCD = 23;
  if (has_m_rewardcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->m_rewardcd(), target);
  }

  // optional int32 m_answerdelay = 24;
  if (has_m_answerdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->m_answerdelay(), target);
  }

  // optional int32 m_answerNum = 25;
  if (has_m_answernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->m_answernum(), target);
  }

  // optional int32 m_answerTime = 26;
  if (has_m_answertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->m_answertime(), target);
  }

  // optional int32 m_answerResultTime = 27;
  if (has_m_answerresulttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->m_answerresulttime(), target);
  }

  // optional int32 m_answerLimit = 28;
  if (has_m_answerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->m_answerlimit(), target);
  }

  // optional int32 m_answerFirst = 29;
  if (has_m_answerfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->m_answerfirst(), target);
  }

  // optional int32 m_answerSuccess = 30;
  if (has_m_answersuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->m_answersuccess(), target);
  }

  // optional int32 m_answeBasics = 31;
  if (has_m_answebasics()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->m_answebasics(), target);
  }

  // optional int32 m_linkLvUpPer = 32;
  if (has_m_linklvupper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->m_linklvupper(), target);
  }

  // optional int32 m_linkLvUpMax = 33;
  if (has_m_linklvupmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->m_linklvupmax(), target);
  }

  // optional int32 m_linkTime = 34;
  if (has_m_linktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->m_linktime(), target);
  }

  // optional int32 m_monsterID = 35;
  if (has_m_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->m_monsterid(), target);
  }

  // optional int32 m_point = 36;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->m_point(), target);
  }

  // optional int32 m_collectTimes = 37;
  if (has_m_collecttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->m_collecttimes(), target);
  }

  // optional int32 m_shens_dayTimes = 38;
  if (has_m_shens_daytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->m_shens_daytimes(), target);
  }

  // optional int32 m_shens_weekTimes = 39;
  if (has_m_shens_weektimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->m_shens_weektimes(), target);
  }

  // optional int32 m_shens_dup = 40;
  if (has_m_shens_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->m_shens_dup(), target);
  }

  // optional int32 m_shensItem = 41;
  if (has_m_shensitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->m_shensitem(), target);
  }

  // optional int32 m_shensCost = 42;
  if (has_m_shenscost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->m_shenscost(), target);
  }

  // optional int32 m_shensCostActive = 43;
  if (has_m_shenscostactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->m_shenscostactive(), target);
  }

  // optional int32 m_shouh_dup = 44;
  if (has_m_shouh_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->m_shouh_dup(), target);
  }

  // optional int32 m_shouhExpSkill = 45;
  if (has_m_shouhexpskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->m_shouhexpskill(), target);
  }

  // optional string m_shouhMosId = 46;
  if (has_m_shouhmosid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_shouhmosid().data(), this->m_shouhmosid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->m_shouhmosid(), target);
  }

  // optional int32 m_GWDupid = 47;
  if (has_m_gwdupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->m_gwdupid(), target);
  }

  // optional int32 m_GWBattleTime = 48;
  if (has_m_gwbattletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->m_gwbattletime(), target);
  }

  // optional int32 m_GWRestTime = 49;
  if (has_m_gwresttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->m_gwresttime(), target);
  }

  // optional int32 m_GWCenterMID = 50;
  if (has_m_gwcentermid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->m_gwcentermid(), target);
  }

  // optional int32 m_GWTowerMID = 51;
  if (has_m_gwtowermid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->m_gwtowermid(), target);
  }

  // optional int32 m_GWTankMID = 52;
  if (has_m_gwtankmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->m_gwtankmid(), target);
  }

  // optional int32 m_GWBornRPoint = 53;
  if (has_m_gwbornrpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->m_gwbornrpoint(), target);
  }

  // optional int32 m_GWCenterRPoint = 54;
  if (has_m_gwcenterrpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->m_gwcenterrpoint(), target);
  }

  // optional string m_GWTowerRPoint = 55;
  if (has_m_gwtowerrpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gwtowerrpoint().data(), this->m_gwtowerrpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->m_gwtowerrpoint(), target);
  }

  // optional int32 m_GWTankRPoint = 56;
  if (has_m_gwtankrpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->m_gwtankrpoint(), target);
  }

  // optional int32 m_GWBornBPoint = 57;
  if (has_m_gwbornbpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->m_gwbornbpoint(), target);
  }

  // optional int32 m_GWCenterBPoint = 58;
  if (has_m_gwcenterbpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->m_gwcenterbpoint(), target);
  }

  // optional string m_GWTowerBPoint = 59;
  if (has_m_gwtowerbpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gwtowerbpoint().data(), this->m_gwtowerbpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->m_gwtowerbpoint(), target);
  }

  // optional int32 m_GWTankBPoint = 60;
  if (has_m_gwtankbpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->m_gwtankbpoint(), target);
  }

  // optional int32 m_tankNum = 61;
  if (has_m_tanknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->m_tanknum(), target);
  }

  // optional int32 m_tankRestTime = 62;
  if (has_m_tankresttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->m_tankresttime(), target);
  }

  // optional int32 m_tankRestNum = 63;
  if (has_m_tankrestnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->m_tankrestnum(), target);
  }

  // optional int32 m_dominateDaily = 64;
  if (has_m_dominatedaily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->m_dominatedaily(), target);
  }

  // optional int32 m_dominateBossReward = 65;
  if (has_m_dominatebossreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->m_dominatebossreward(), target);
  }

  // optional int32 m_freePoint = 66;
  if (has_m_freepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->m_freepoint(), target);
  }

  // optional int32 m_defFreePoint = 67;
  if (has_m_deffreepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->m_deffreepoint(), target);
  }

  // optional int32 m_playerPoint = 68;
  if (has_m_playerpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->m_playerpoint(), target);
  }

  // optional int32 m_tankPoint = 69;
  if (has_m_tankpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->m_tankpoint(), target);
  }

  // optional int32 m_towerPoint = 70;
  if (has_m_towerpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->m_towerpoint(), target);
  }

  // optional int32 m_centerPoint = 71;
  if (has_m_centerpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->m_centerpoint(), target);
  }

  // optional int32 m_assistRadio = 72;
  if (has_m_assistradio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->m_assistradio(), target);
  }

  // optional int32 m_TTeamDamageAdd = 73;
  if (has_m_tteamdamageadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->m_tteamdamageadd(), target);
  }

  // optional int32 m_TWeekCloseTime = 74;
  if (has_m_tweekclosetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->m_tweekclosetime(), target);
  }

  // optional int32 m_cyclicReward = 75;
  if (has_m_cyclicreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->m_cyclicreward(), target);
  }

  // optional int32 m_tenCyclicReward = 76;
  if (has_m_tencyclicreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(76, this->m_tencyclicreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_constantid = 1;
    if (has_m_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_constantid());
    }

    // optional int32 m_setItem = 2;
    if (has_m_setitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_setitem());
    }

    // optional int32 m_nameItem = 3;
    if (has_m_nameitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_nameitem());
    }

    // optional int32 m_EditRequireLV = 4;
    if (has_m_editrequirelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_editrequirelv());
    }

    // optional int32 m_giftCD = 5;
    if (has_m_giftcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftcd());
    }

    // optional int32 m_dismiss = 6;
    if (has_m_dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dismiss());
    }

    // optional int32 m_transferGuild = 7;
    if (has_m_transferguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_transferguild());
    }

    // optional int32 m_territory = 8;
    if (has_m_territory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_territory());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_autoMinLV = 9;
    if (has_m_autominlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_autominlv());
    }

    // optional int32 m_autoMinBP = 10;
    if (has_m_autominbp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_autominbp());
    }

    // optional int32 m_donateTimes = 11;
    if (has_m_donatetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_donatetimes());
    }

    // optional int32 m_packetMaxD = 12;
    if (has_m_packetmaxd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packetmaxd());
    }

    // optional int32 m_packetMaxBD = 13;
    if (has_m_packetmaxbd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packetmaxbd());
    }

    // optional int32 m_packetMaxSend = 14;
    if (has_m_packetmaxsend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packetmaxsend());
    }

    // optional int32 m_packetvip = 15;
    if (has_m_packetvip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packetvip());
    }

    // optional int32 m_packetAdd = 16;
    if (has_m_packetadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_packetadd());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_prestigeTasOneKeyVIP = 17;
    if (has_m_prestigetasonekeyvip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetasonekeyvip());
    }

    // optional int32 m_prestigeTasOneKeyLV = 18;
    if (has_m_prestigetasonekeylv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetasonekeylv());
    }

    // optional int32 m_prestigeTaskPrivage = 19;
    if (has_m_prestigetaskprivage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetaskprivage());
    }

    // optional int32 m_prestigeTaskFlash = 20;
    if (has_m_prestigetaskflash()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetaskflash());
    }

    // optional int32 m_prestigeTaskflashPrice = 21;
    if (has_m_prestigetaskflashprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetaskflashprice());
    }

    // optional int32 m_prestigeTaskTimes = 22;
    if (has_m_prestigetasktimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prestigetasktimes());
    }

    // optional int32 m_rewardCD = 23;
    if (has_m_rewardcd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardcd());
    }

    // optional int32 m_answerdelay = 24;
    if (has_m_answerdelay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answerdelay());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 m_answerNum = 25;
    if (has_m_answernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answernum());
    }

    // optional int32 m_answerTime = 26;
    if (has_m_answertime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answertime());
    }

    // optional int32 m_answerResultTime = 27;
    if (has_m_answerresulttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answerresulttime());
    }

    // optional int32 m_answerLimit = 28;
    if (has_m_answerlimit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answerlimit());
    }

    // optional int32 m_answerFirst = 29;
    if (has_m_answerfirst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answerfirst());
    }

    // optional int32 m_answerSuccess = 30;
    if (has_m_answersuccess()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answersuccess());
    }

    // optional int32 m_answeBasics = 31;
    if (has_m_answebasics()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_answebasics());
    }

    // optional int32 m_linkLvUpPer = 32;
    if (has_m_linklvupper()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linklvupper());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 m_linkLvUpMax = 33;
    if (has_m_linklvupmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linklvupmax());
    }

    // optional int32 m_linkTime = 34;
    if (has_m_linktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linktime());
    }

    // optional int32 m_monsterID = 35;
    if (has_m_monsterid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_monsterid());
    }

    // optional int32 m_point = 36;
    if (has_m_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

    // optional int32 m_collectTimes = 37;
    if (has_m_collecttimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_collecttimes());
    }

    // optional int32 m_shens_dayTimes = 38;
    if (has_m_shens_daytimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shens_daytimes());
    }

    // optional int32 m_shens_weekTimes = 39;
    if (has_m_shens_weektimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shens_weektimes());
    }

    // optional int32 m_shens_dup = 40;
    if (has_m_shens_dup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shens_dup());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 m_shensItem = 41;
    if (has_m_shensitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shensitem());
    }

    // optional int32 m_shensCost = 42;
    if (has_m_shenscost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shenscost());
    }

    // optional int32 m_shensCostActive = 43;
    if (has_m_shenscostactive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shenscostactive());
    }

    // optional int32 m_shouh_dup = 44;
    if (has_m_shouh_dup()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shouh_dup());
    }

    // optional int32 m_shouhExpSkill = 45;
    if (has_m_shouhexpskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shouhexpskill());
    }

    // optional string m_shouhMosId = 46;
    if (has_m_shouhmosid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_shouhmosid());
    }

    // optional int32 m_GWDupid = 47;
    if (has_m_gwdupid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwdupid());
    }

    // optional int32 m_GWBattleTime = 48;
    if (has_m_gwbattletime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwbattletime());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 m_GWRestTime = 49;
    if (has_m_gwresttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwresttime());
    }

    // optional int32 m_GWCenterMID = 50;
    if (has_m_gwcentermid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwcentermid());
    }

    // optional int32 m_GWTowerMID = 51;
    if (has_m_gwtowermid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwtowermid());
    }

    // optional int32 m_GWTankMID = 52;
    if (has_m_gwtankmid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwtankmid());
    }

    // optional int32 m_GWBornRPoint = 53;
    if (has_m_gwbornrpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwbornrpoint());
    }

    // optional int32 m_GWCenterRPoint = 54;
    if (has_m_gwcenterrpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwcenterrpoint());
    }

    // optional string m_GWTowerRPoint = 55;
    if (has_m_gwtowerrpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gwtowerrpoint());
    }

    // optional int32 m_GWTankRPoint = 56;
    if (has_m_gwtankrpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwtankrpoint());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 m_GWBornBPoint = 57;
    if (has_m_gwbornbpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwbornbpoint());
    }

    // optional int32 m_GWCenterBPoint = 58;
    if (has_m_gwcenterbpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwcenterbpoint());
    }

    // optional string m_GWTowerBPoint = 59;
    if (has_m_gwtowerbpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gwtowerbpoint());
    }

    // optional int32 m_GWTankBPoint = 60;
    if (has_m_gwtankbpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gwtankbpoint());
    }

    // optional int32 m_tankNum = 61;
    if (has_m_tanknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tanknum());
    }

    // optional int32 m_tankRestTime = 62;
    if (has_m_tankresttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tankresttime());
    }

    // optional int32 m_tankRestNum = 63;
    if (has_m_tankrestnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tankrestnum());
    }

    // optional int32 m_dominateDaily = 64;
    if (has_m_dominatedaily()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dominatedaily());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 m_dominateBossReward = 65;
    if (has_m_dominatebossreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dominatebossreward());
    }

    // optional int32 m_freePoint = 66;
    if (has_m_freepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_freepoint());
    }

    // optional int32 m_defFreePoint = 67;
    if (has_m_deffreepoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_deffreepoint());
    }

    // optional int32 m_playerPoint = 68;
    if (has_m_playerpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerpoint());
    }

    // optional int32 m_tankPoint = 69;
    if (has_m_tankpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tankpoint());
    }

    // optional int32 m_towerPoint = 70;
    if (has_m_towerpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_towerpoint());
    }

    // optional int32 m_centerPoint = 71;
    if (has_m_centerpoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_centerpoint());
    }

    // optional int32 m_assistRadio = 72;
    if (has_m_assistradio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_assistradio());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 m_TTeamDamageAdd = 73;
    if (has_m_tteamdamageadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tteamdamageadd());
    }

    // optional int32 m_TWeekCloseTime = 74;
    if (has_m_tweekclosetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tweekclosetime());
    }

    // optional int32 m_cyclicReward = 75;
    if (has_m_cyclicreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_cyclicreward());
    }

    // optional int32 m_tenCyclicReward = 76;
    if (has_m_tencyclicreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tencyclicreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildConstant::MergeFrom(const E_GuildConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_constantid()) {
      set_m_constantid(from.m_constantid());
    }
    if (from.has_m_setitem()) {
      set_m_setitem(from.m_setitem());
    }
    if (from.has_m_nameitem()) {
      set_m_nameitem(from.m_nameitem());
    }
    if (from.has_m_editrequirelv()) {
      set_m_editrequirelv(from.m_editrequirelv());
    }
    if (from.has_m_giftcd()) {
      set_m_giftcd(from.m_giftcd());
    }
    if (from.has_m_dismiss()) {
      set_m_dismiss(from.m_dismiss());
    }
    if (from.has_m_transferguild()) {
      set_m_transferguild(from.m_transferguild());
    }
    if (from.has_m_territory()) {
      set_m_territory(from.m_territory());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_autominlv()) {
      set_m_autominlv(from.m_autominlv());
    }
    if (from.has_m_autominbp()) {
      set_m_autominbp(from.m_autominbp());
    }
    if (from.has_m_donatetimes()) {
      set_m_donatetimes(from.m_donatetimes());
    }
    if (from.has_m_packetmaxd()) {
      set_m_packetmaxd(from.m_packetmaxd());
    }
    if (from.has_m_packetmaxbd()) {
      set_m_packetmaxbd(from.m_packetmaxbd());
    }
    if (from.has_m_packetmaxsend()) {
      set_m_packetmaxsend(from.m_packetmaxsend());
    }
    if (from.has_m_packetvip()) {
      set_m_packetvip(from.m_packetvip());
    }
    if (from.has_m_packetadd()) {
      set_m_packetadd(from.m_packetadd());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_prestigetasonekeyvip()) {
      set_m_prestigetasonekeyvip(from.m_prestigetasonekeyvip());
    }
    if (from.has_m_prestigetasonekeylv()) {
      set_m_prestigetasonekeylv(from.m_prestigetasonekeylv());
    }
    if (from.has_m_prestigetaskprivage()) {
      set_m_prestigetaskprivage(from.m_prestigetaskprivage());
    }
    if (from.has_m_prestigetaskflash()) {
      set_m_prestigetaskflash(from.m_prestigetaskflash());
    }
    if (from.has_m_prestigetaskflashprice()) {
      set_m_prestigetaskflashprice(from.m_prestigetaskflashprice());
    }
    if (from.has_m_prestigetasktimes()) {
      set_m_prestigetasktimes(from.m_prestigetasktimes());
    }
    if (from.has_m_rewardcd()) {
      set_m_rewardcd(from.m_rewardcd());
    }
    if (from.has_m_answerdelay()) {
      set_m_answerdelay(from.m_answerdelay());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_m_answernum()) {
      set_m_answernum(from.m_answernum());
    }
    if (from.has_m_answertime()) {
      set_m_answertime(from.m_answertime());
    }
    if (from.has_m_answerresulttime()) {
      set_m_answerresulttime(from.m_answerresulttime());
    }
    if (from.has_m_answerlimit()) {
      set_m_answerlimit(from.m_answerlimit());
    }
    if (from.has_m_answerfirst()) {
      set_m_answerfirst(from.m_answerfirst());
    }
    if (from.has_m_answersuccess()) {
      set_m_answersuccess(from.m_answersuccess());
    }
    if (from.has_m_answebasics()) {
      set_m_answebasics(from.m_answebasics());
    }
    if (from.has_m_linklvupper()) {
      set_m_linklvupper(from.m_linklvupper());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_m_linklvupmax()) {
      set_m_linklvupmax(from.m_linklvupmax());
    }
    if (from.has_m_linktime()) {
      set_m_linktime(from.m_linktime());
    }
    if (from.has_m_monsterid()) {
      set_m_monsterid(from.m_monsterid());
    }
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
    if (from.has_m_collecttimes()) {
      set_m_collecttimes(from.m_collecttimes());
    }
    if (from.has_m_shens_daytimes()) {
      set_m_shens_daytimes(from.m_shens_daytimes());
    }
    if (from.has_m_shens_weektimes()) {
      set_m_shens_weektimes(from.m_shens_weektimes());
    }
    if (from.has_m_shens_dup()) {
      set_m_shens_dup(from.m_shens_dup());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_m_shensitem()) {
      set_m_shensitem(from.m_shensitem());
    }
    if (from.has_m_shenscost()) {
      set_m_shenscost(from.m_shenscost());
    }
    if (from.has_m_shenscostactive()) {
      set_m_shenscostactive(from.m_shenscostactive());
    }
    if (from.has_m_shouh_dup()) {
      set_m_shouh_dup(from.m_shouh_dup());
    }
    if (from.has_m_shouhexpskill()) {
      set_m_shouhexpskill(from.m_shouhexpskill());
    }
    if (from.has_m_shouhmosid()) {
      set_m_shouhmosid(from.m_shouhmosid());
    }
    if (from.has_m_gwdupid()) {
      set_m_gwdupid(from.m_gwdupid());
    }
    if (from.has_m_gwbattletime()) {
      set_m_gwbattletime(from.m_gwbattletime());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_m_gwresttime()) {
      set_m_gwresttime(from.m_gwresttime());
    }
    if (from.has_m_gwcentermid()) {
      set_m_gwcentermid(from.m_gwcentermid());
    }
    if (from.has_m_gwtowermid()) {
      set_m_gwtowermid(from.m_gwtowermid());
    }
    if (from.has_m_gwtankmid()) {
      set_m_gwtankmid(from.m_gwtankmid());
    }
    if (from.has_m_gwbornrpoint()) {
      set_m_gwbornrpoint(from.m_gwbornrpoint());
    }
    if (from.has_m_gwcenterrpoint()) {
      set_m_gwcenterrpoint(from.m_gwcenterrpoint());
    }
    if (from.has_m_gwtowerrpoint()) {
      set_m_gwtowerrpoint(from.m_gwtowerrpoint());
    }
    if (from.has_m_gwtankrpoint()) {
      set_m_gwtankrpoint(from.m_gwtankrpoint());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_m_gwbornbpoint()) {
      set_m_gwbornbpoint(from.m_gwbornbpoint());
    }
    if (from.has_m_gwcenterbpoint()) {
      set_m_gwcenterbpoint(from.m_gwcenterbpoint());
    }
    if (from.has_m_gwtowerbpoint()) {
      set_m_gwtowerbpoint(from.m_gwtowerbpoint());
    }
    if (from.has_m_gwtankbpoint()) {
      set_m_gwtankbpoint(from.m_gwtankbpoint());
    }
    if (from.has_m_tanknum()) {
      set_m_tanknum(from.m_tanknum());
    }
    if (from.has_m_tankresttime()) {
      set_m_tankresttime(from.m_tankresttime());
    }
    if (from.has_m_tankrestnum()) {
      set_m_tankrestnum(from.m_tankrestnum());
    }
    if (from.has_m_dominatedaily()) {
      set_m_dominatedaily(from.m_dominatedaily());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_m_dominatebossreward()) {
      set_m_dominatebossreward(from.m_dominatebossreward());
    }
    if (from.has_m_freepoint()) {
      set_m_freepoint(from.m_freepoint());
    }
    if (from.has_m_deffreepoint()) {
      set_m_deffreepoint(from.m_deffreepoint());
    }
    if (from.has_m_playerpoint()) {
      set_m_playerpoint(from.m_playerpoint());
    }
    if (from.has_m_tankpoint()) {
      set_m_tankpoint(from.m_tankpoint());
    }
    if (from.has_m_towerpoint()) {
      set_m_towerpoint(from.m_towerpoint());
    }
    if (from.has_m_centerpoint()) {
      set_m_centerpoint(from.m_centerpoint());
    }
    if (from.has_m_assistradio()) {
      set_m_assistradio(from.m_assistradio());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_m_tteamdamageadd()) {
      set_m_tteamdamageadd(from.m_tteamdamageadd());
    }
    if (from.has_m_tweekclosetime()) {
      set_m_tweekclosetime(from.m_tweekclosetime());
    }
    if (from.has_m_cyclicreward()) {
      set_m_cyclicreward(from.m_cyclicreward());
    }
    if (from.has_m_tencyclicreward()) {
      set_m_tencyclicreward(from.m_tencyclicreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildConstant::CopyFrom(const E_GuildConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildConstant::IsInitialized() const {

  return true;
}

void E_GuildConstant::Swap(E_GuildConstant* other) {
  if (other != this) {
    std::swap(m_constantid_, other->m_constantid_);
    std::swap(m_setitem_, other->m_setitem_);
    std::swap(m_nameitem_, other->m_nameitem_);
    std::swap(m_editrequirelv_, other->m_editrequirelv_);
    std::swap(m_giftcd_, other->m_giftcd_);
    std::swap(m_dismiss_, other->m_dismiss_);
    std::swap(m_transferguild_, other->m_transferguild_);
    std::swap(m_territory_, other->m_territory_);
    std::swap(m_autominlv_, other->m_autominlv_);
    std::swap(m_autominbp_, other->m_autominbp_);
    std::swap(m_donatetimes_, other->m_donatetimes_);
    std::swap(m_packetmaxd_, other->m_packetmaxd_);
    std::swap(m_packetmaxbd_, other->m_packetmaxbd_);
    std::swap(m_packetmaxsend_, other->m_packetmaxsend_);
    std::swap(m_packetvip_, other->m_packetvip_);
    std::swap(m_packetadd_, other->m_packetadd_);
    std::swap(m_prestigetasonekeyvip_, other->m_prestigetasonekeyvip_);
    std::swap(m_prestigetasonekeylv_, other->m_prestigetasonekeylv_);
    std::swap(m_prestigetaskprivage_, other->m_prestigetaskprivage_);
    std::swap(m_prestigetaskflash_, other->m_prestigetaskflash_);
    std::swap(m_prestigetaskflashprice_, other->m_prestigetaskflashprice_);
    std::swap(m_prestigetasktimes_, other->m_prestigetasktimes_);
    std::swap(m_rewardcd_, other->m_rewardcd_);
    std::swap(m_answerdelay_, other->m_answerdelay_);
    std::swap(m_answernum_, other->m_answernum_);
    std::swap(m_answertime_, other->m_answertime_);
    std::swap(m_answerresulttime_, other->m_answerresulttime_);
    std::swap(m_answerlimit_, other->m_answerlimit_);
    std::swap(m_answerfirst_, other->m_answerfirst_);
    std::swap(m_answersuccess_, other->m_answersuccess_);
    std::swap(m_answebasics_, other->m_answebasics_);
    std::swap(m_linklvupper_, other->m_linklvupper_);
    std::swap(m_linklvupmax_, other->m_linklvupmax_);
    std::swap(m_linktime_, other->m_linktime_);
    std::swap(m_monsterid_, other->m_monsterid_);
    std::swap(m_point_, other->m_point_);
    std::swap(m_collecttimes_, other->m_collecttimes_);
    std::swap(m_shens_daytimes_, other->m_shens_daytimes_);
    std::swap(m_shens_weektimes_, other->m_shens_weektimes_);
    std::swap(m_shens_dup_, other->m_shens_dup_);
    std::swap(m_shensitem_, other->m_shensitem_);
    std::swap(m_shenscost_, other->m_shenscost_);
    std::swap(m_shenscostactive_, other->m_shenscostactive_);
    std::swap(m_shouh_dup_, other->m_shouh_dup_);
    std::swap(m_shouhexpskill_, other->m_shouhexpskill_);
    std::swap(m_shouhmosid_, other->m_shouhmosid_);
    std::swap(m_gwdupid_, other->m_gwdupid_);
    std::swap(m_gwbattletime_, other->m_gwbattletime_);
    std::swap(m_gwresttime_, other->m_gwresttime_);
    std::swap(m_gwcentermid_, other->m_gwcentermid_);
    std::swap(m_gwtowermid_, other->m_gwtowermid_);
    std::swap(m_gwtankmid_, other->m_gwtankmid_);
    std::swap(m_gwbornrpoint_, other->m_gwbornrpoint_);
    std::swap(m_gwcenterrpoint_, other->m_gwcenterrpoint_);
    std::swap(m_gwtowerrpoint_, other->m_gwtowerrpoint_);
    std::swap(m_gwtankrpoint_, other->m_gwtankrpoint_);
    std::swap(m_gwbornbpoint_, other->m_gwbornbpoint_);
    std::swap(m_gwcenterbpoint_, other->m_gwcenterbpoint_);
    std::swap(m_gwtowerbpoint_, other->m_gwtowerbpoint_);
    std::swap(m_gwtankbpoint_, other->m_gwtankbpoint_);
    std::swap(m_tanknum_, other->m_tanknum_);
    std::swap(m_tankresttime_, other->m_tankresttime_);
    std::swap(m_tankrestnum_, other->m_tankrestnum_);
    std::swap(m_dominatedaily_, other->m_dominatedaily_);
    std::swap(m_dominatebossreward_, other->m_dominatebossreward_);
    std::swap(m_freepoint_, other->m_freepoint_);
    std::swap(m_deffreepoint_, other->m_deffreepoint_);
    std::swap(m_playerpoint_, other->m_playerpoint_);
    std::swap(m_tankpoint_, other->m_tankpoint_);
    std::swap(m_towerpoint_, other->m_towerpoint_);
    std::swap(m_centerpoint_, other->m_centerpoint_);
    std::swap(m_assistradio_, other->m_assistradio_);
    std::swap(m_tteamdamageadd_, other->m_tteamdamageadd_);
    std::swap(m_tweekclosetime_, other->m_tweekclosetime_);
    std::swap(m_cyclicreward_, other->m_cyclicreward_);
    std::swap(m_tencyclicreward_, other->m_tencyclicreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildConstant_descriptor_;
  metadata.reflection = E_GuildConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildConstant::kEGuildConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildConstant::Sheet_GuildConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildConstant::InitAsDefaultInstance() {
}

Sheet_GuildConstant::Sheet_GuildConstant(const Sheet_GuildConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildConstant::~Sheet_GuildConstant() {
  SharedDtor();
}

void Sheet_GuildConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildConstant_descriptor_;
}

const Sheet_GuildConstant& Sheet_GuildConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildConstant* Sheet_GuildConstant::default_instance_ = NULL;

Sheet_GuildConstant* Sheet_GuildConstant::New() const {
  return new Sheet_GuildConstant;
}

void Sheet_GuildConstant::Clear() {
  e_guildconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildConstant E_GuildConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildConstant E_GuildConstant_List = 1;
  for (int i = 0; i < this->e_guildconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildConstant E_GuildConstant_List = 1;
  for (int i = 0; i < this->e_guildconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildConstant E_GuildConstant_List = 1;
  total_size += 1 * this->e_guildconstant_list_size();
  for (int i = 0; i < this->e_guildconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildConstant::MergeFrom(const Sheet_GuildConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildconstant_list_.MergeFrom(from.e_guildconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildConstant::CopyFrom(const Sheet_GuildConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildConstant::IsInitialized() const {

  return true;
}

void Sheet_GuildConstant::Swap(Sheet_GuildConstant* other) {
  if (other != this) {
    e_guildconstant_list_.Swap(&other->e_guildconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildConstant_descriptor_;
  metadata.reflection = Sheet_GuildConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildLevel::kMGuildLevelFieldNumber;
const int E_GuildLevel::kMGuildLevelEXPFieldNumber;
const int E_GuildLevel::kMGuildLevelMemberFieldNumber;
const int E_GuildLevel::kMGuildLevelVPFieldNumber;
const int E_GuildLevel::kMGuildLevelNPFieldNumber;
const int E_GuildLevel::kMGuildLevelGFieldNumber;
#endif  // !_MSC_VER

E_GuildLevel::E_GuildLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildLevel::InitAsDefaultInstance() {
}

E_GuildLevel::E_GuildLevel(const E_GuildLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildLevel::SharedCtor() {
  _cached_size_ = 0;
  m_guildlevel_ = 0;
  m_guildlevel_exp_ = 0;
  m_guildlevel_member_ = 0;
  m_guildlevel_vp_ = 0;
  m_guildlevel_np_ = 0;
  m_guildlevel_g_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildLevel::~E_GuildLevel() {
  SharedDtor();
}

void E_GuildLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildLevel_descriptor_;
}

const E_GuildLevel& E_GuildLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildLevel* E_GuildLevel::default_instance_ = NULL;

E_GuildLevel* E_GuildLevel::New() const {
  return new E_GuildLevel;
}

void E_GuildLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_guildlevel_ = 0;
    m_guildlevel_exp_ = 0;
    m_guildlevel_member_ = 0;
    m_guildlevel_vp_ = 0;
    m_guildlevel_np_ = 0;
    m_guildlevel_g_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_guildLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_)));
          set_has_m_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_guildLevel_EXP;
        break;
      }

      // optional int32 m_guildLevel_EXP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLevel_EXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_exp_)));
          set_has_m_guildlevel_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_guildLevel_member;
        break;
      }

      // optional int32 m_guildLevel_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLevel_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_member_)));
          set_has_m_guildlevel_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_guildLevel_VP;
        break;
      }

      // optional int32 m_guildLevel_VP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLevel_VP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_vp_)));
          set_has_m_guildlevel_vp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_guildLevel_NP;
        break;
      }

      // optional int32 m_guildLevel_NP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLevel_NP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_np_)));
          set_has_m_guildlevel_np();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_guildLevel_G;
        break;
      }

      // optional int32 m_guildLevel_G = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLevel_G:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlevel_g_)));
          set_has_m_guildlevel_g();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_guildLevel = 1;
  if (has_m_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_guildlevel(), output);
  }

  // optional int32 m_guildLevel_EXP = 2;
  if (has_m_guildlevel_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_guildlevel_exp(), output);
  }

  // optional int32 m_guildLevel_member = 3;
  if (has_m_guildlevel_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_guildlevel_member(), output);
  }

  // optional int32 m_guildLevel_VP = 4;
  if (has_m_guildlevel_vp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_guildlevel_vp(), output);
  }

  // optional int32 m_guildLevel_NP = 5;
  if (has_m_guildlevel_np()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_guildlevel_np(), output);
  }

  // optional int32 m_guildLevel_G = 6;
  if (has_m_guildlevel_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_guildlevel_g(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_guildLevel = 1;
  if (has_m_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_guildlevel(), target);
  }

  // optional int32 m_guildLevel_EXP = 2;
  if (has_m_guildlevel_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_guildlevel_exp(), target);
  }

  // optional int32 m_guildLevel_member = 3;
  if (has_m_guildlevel_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_guildlevel_member(), target);
  }

  // optional int32 m_guildLevel_VP = 4;
  if (has_m_guildlevel_vp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_guildlevel_vp(), target);
  }

  // optional int32 m_guildLevel_NP = 5;
  if (has_m_guildlevel_np()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_guildlevel_np(), target);
  }

  // optional int32 m_guildLevel_G = 6;
  if (has_m_guildlevel_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_guildlevel_g(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_guildLevel = 1;
    if (has_m_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel());
    }

    // optional int32 m_guildLevel_EXP = 2;
    if (has_m_guildlevel_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel_exp());
    }

    // optional int32 m_guildLevel_member = 3;
    if (has_m_guildlevel_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel_member());
    }

    // optional int32 m_guildLevel_VP = 4;
    if (has_m_guildlevel_vp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel_vp());
    }

    // optional int32 m_guildLevel_NP = 5;
    if (has_m_guildlevel_np()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel_np());
    }

    // optional int32 m_guildLevel_G = 6;
    if (has_m_guildlevel_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlevel_g());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildLevel::MergeFrom(const E_GuildLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_guildlevel()) {
      set_m_guildlevel(from.m_guildlevel());
    }
    if (from.has_m_guildlevel_exp()) {
      set_m_guildlevel_exp(from.m_guildlevel_exp());
    }
    if (from.has_m_guildlevel_member()) {
      set_m_guildlevel_member(from.m_guildlevel_member());
    }
    if (from.has_m_guildlevel_vp()) {
      set_m_guildlevel_vp(from.m_guildlevel_vp());
    }
    if (from.has_m_guildlevel_np()) {
      set_m_guildlevel_np(from.m_guildlevel_np());
    }
    if (from.has_m_guildlevel_g()) {
      set_m_guildlevel_g(from.m_guildlevel_g());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildLevel::CopyFrom(const E_GuildLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildLevel::IsInitialized() const {

  return true;
}

void E_GuildLevel::Swap(E_GuildLevel* other) {
  if (other != this) {
    std::swap(m_guildlevel_, other->m_guildlevel_);
    std::swap(m_guildlevel_exp_, other->m_guildlevel_exp_);
    std::swap(m_guildlevel_member_, other->m_guildlevel_member_);
    std::swap(m_guildlevel_vp_, other->m_guildlevel_vp_);
    std::swap(m_guildlevel_np_, other->m_guildlevel_np_);
    std::swap(m_guildlevel_g_, other->m_guildlevel_g_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildLevel_descriptor_;
  metadata.reflection = E_GuildLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildLevel::kEGuildLevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildLevel::Sheet_GuildLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildLevel::InitAsDefaultInstance() {
}

Sheet_GuildLevel::Sheet_GuildLevel(const Sheet_GuildLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildLevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildLevel::~Sheet_GuildLevel() {
  SharedDtor();
}

void Sheet_GuildLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildLevel_descriptor_;
}

const Sheet_GuildLevel& Sheet_GuildLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildLevel* Sheet_GuildLevel::default_instance_ = NULL;

Sheet_GuildLevel* Sheet_GuildLevel::New() const {
  return new Sheet_GuildLevel;
}

void Sheet_GuildLevel::Clear() {
  e_guildlevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildLevel E_GuildLevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildLevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildlevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildLevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildLevel E_GuildLevel_List = 1;
  for (int i = 0; i < this->e_guildlevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildlevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildLevel E_GuildLevel_List = 1;
  for (int i = 0; i < this->e_guildlevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildlevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildLevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildLevel E_GuildLevel_List = 1;
  total_size += 1 * this->e_guildlevel_list_size();
  for (int i = 0; i < this->e_guildlevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildlevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildLevel::MergeFrom(const Sheet_GuildLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildlevel_list_.MergeFrom(from.e_guildlevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildLevel::CopyFrom(const Sheet_GuildLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildLevel::IsInitialized() const {

  return true;
}

void Sheet_GuildLevel::Swap(Sheet_GuildLevel* other) {
  if (other != this) {
    e_guildlevel_list_.Swap(&other->e_guildlevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildLevel_descriptor_;
  metadata.reflection = Sheet_GuildLevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildPosition::kMPositionIdFieldNumber;
const int E_GuildPosition::kMAdmitNewcomerFieldNumber;
const int E_GuildPosition::kMAppointAndRemoveVPFieldNumber;
const int E_GuildPosition::kMAppointAndRemoveElderFieldNumber;
const int E_GuildPosition::kMAppointAndRemoveGFieldNumber;
const int E_GuildPosition::kMAppointAndRemoveEliteFieldNumber;
const int E_GuildPosition::kMExpelVPFieldNumber;
const int E_GuildPosition::kMExpelElderFieldNumber;
const int E_GuildPosition::kMExpelGFieldNumber;
const int E_GuildPosition::kMExpelMassFieldNumber;
const int E_GuildPosition::kMAnnouncementEditingFieldNumber;
const int E_GuildPosition::kMRNameFieldNumber;
const int E_GuildPosition::kMJoinConditionFieldNumber;
const int E_GuildPosition::kMGuildActivityFieldNumber;
const int E_GuildPosition::kMDissolveAssignGuildFieldNumber;
const int E_GuildPosition::kMChangeNameFieldNumber;
const int E_GuildPosition::kMRecruitChatFieldNumber;
const int E_GuildPosition::kMGuildPacketFieldNumber;
const int E_GuildPosition::kMUpGuardFieldNumber;
#endif  // !_MSC_VER

E_GuildPosition::E_GuildPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildPosition::InitAsDefaultInstance() {
}

E_GuildPosition::E_GuildPosition(const E_GuildPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildPosition::SharedCtor() {
  _cached_size_ = 0;
  m_positionid_ = 0;
  m_admitnewcomer_ = 0;
  m_appointandremovevp_ = 0;
  m_appointandremoveelder_ = 0;
  m_appointandremoveg_ = 0;
  m_appointandremoveelite_ = 0;
  m_expelvp_ = 0;
  m_expelelder_ = 0;
  m_expelg_ = 0;
  m_expelmass_ = 0;
  m_announcementediting_ = 0;
  m_rname_ = 0;
  m_joincondition_ = 0;
  m_guildactivity_ = 0;
  m_dissolveassignguild_ = 0;
  m_changename_ = 0;
  m_recruitchat_ = 0;
  m_guildpacket_ = 0;
  m_upguard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildPosition::~E_GuildPosition() {
  SharedDtor();
}

void E_GuildPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildPosition_descriptor_;
}

const E_GuildPosition& E_GuildPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildPosition* E_GuildPosition::default_instance_ = NULL;

E_GuildPosition* E_GuildPosition::New() const {
  return new E_GuildPosition;
}

void E_GuildPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_positionid_ = 0;
    m_admitnewcomer_ = 0;
    m_appointandremovevp_ = 0;
    m_appointandremoveelder_ = 0;
    m_appointandremoveg_ = 0;
    m_appointandremoveelite_ = 0;
    m_expelvp_ = 0;
    m_expelelder_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_expelg_ = 0;
    m_expelmass_ = 0;
    m_announcementediting_ = 0;
    m_rname_ = 0;
    m_joincondition_ = 0;
    m_guildactivity_ = 0;
    m_dissolveassignguild_ = 0;
    m_changename_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_recruitchat_ = 0;
    m_guildpacket_ = 0;
    m_upguard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_positionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_positionid_)));
          set_has_m_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_admitNewcomer;
        break;
      }

      // optional int32 m_admitNewcomer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_admitNewcomer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_admitnewcomer_)));
          set_has_m_admitnewcomer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_appointAndRemoveVP;
        break;
      }

      // optional int32 m_appointAndRemoveVP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_appointAndRemoveVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_appointandremovevp_)));
          set_has_m_appointandremovevp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_appointAndRemoveElder;
        break;
      }

      // optional int32 m_appointAndRemoveElder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_appointAndRemoveElder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_appointandremoveelder_)));
          set_has_m_appointandremoveelder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_appointAndRemoveG;
        break;
      }

      // optional int32 m_appointAndRemoveG = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_appointAndRemoveG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_appointandremoveg_)));
          set_has_m_appointandremoveg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_appointAndRemoveElite;
        break;
      }

      // optional int32 m_appointAndRemoveElite = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_appointAndRemoveElite:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_appointandremoveelite_)));
          set_has_m_appointandremoveelite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_expelVP;
        break;
      }

      // optional int32 m_expelVP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expelVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expelvp_)));
          set_has_m_expelvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_expelElder;
        break;
      }

      // optional int32 m_expelElder = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expelElder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expelelder_)));
          set_has_m_expelelder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_expelG;
        break;
      }

      // optional int32 m_expelG = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expelG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expelg_)));
          set_has_m_expelg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_expelMass;
        break;
      }

      // optional int32 m_expelMass = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_expelMass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_expelmass_)));
          set_has_m_expelmass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_announcementEditing;
        break;
      }

      // optional int32 m_announcementEditing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_announcementEditing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_announcementediting_)));
          set_has_m_announcementediting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_rName;
        break;
      }

      // optional int32 m_rName = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rname_)));
          set_has_m_rname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_joinCondition;
        break;
      }

      // optional int32 m_joinCondition = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_joinCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_joincondition_)));
          set_has_m_joincondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_guildActivity;
        break;
      }

      // optional int32 m_guildActivity = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildActivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildactivity_)));
          set_has_m_guildactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_dissolveAssignGuild;
        break;
      }

      // optional int32 m_dissolveAssignGuild = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dissolveAssignGuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dissolveassignguild_)));
          set_has_m_dissolveassignguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_changeName;
        break;
      }

      // optional int32 m_changeName = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_changeName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_changename_)));
          set_has_m_changename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_recruitChat;
        break;
      }

      // optional int32 m_recruitChat = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_recruitChat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_recruitchat_)));
          set_has_m_recruitchat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_guildPacket;
        break;
      }

      // optional int32 m_guildPacket = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildPacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildpacket_)));
          set_has_m_guildpacket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_m_UpGuard;
        break;
      }

      // optional int32 m_UpGuard = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_UpGuard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_upguard_)));
          set_has_m_upguard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_positionId = 1;
  if (has_m_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_positionid(), output);
  }

  // optional int32 m_admitNewcomer = 2;
  if (has_m_admitnewcomer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_admitnewcomer(), output);
  }

  // optional int32 m_appointAndRemoveVP = 3;
  if (has_m_appointandremovevp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_appointandremovevp(), output);
  }

  // optional int32 m_appointAndRemoveElder = 4;
  if (has_m_appointandremoveelder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_appointandremoveelder(), output);
  }

  // optional int32 m_appointAndRemoveG = 5;
  if (has_m_appointandremoveg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_appointandremoveg(), output);
  }

  // optional int32 m_appointAndRemoveElite = 6;
  if (has_m_appointandremoveelite()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_appointandremoveelite(), output);
  }

  // optional int32 m_expelVP = 7;
  if (has_m_expelvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_expelvp(), output);
  }

  // optional int32 m_expelElder = 8;
  if (has_m_expelelder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_expelelder(), output);
  }

  // optional int32 m_expelG = 9;
  if (has_m_expelg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_expelg(), output);
  }

  // optional int32 m_expelMass = 10;
  if (has_m_expelmass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_expelmass(), output);
  }

  // optional int32 m_announcementEditing = 11;
  if (has_m_announcementediting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_announcementediting(), output);
  }

  // optional int32 m_rName = 12;
  if (has_m_rname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_rname(), output);
  }

  // optional int32 m_joinCondition = 13;
  if (has_m_joincondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_joincondition(), output);
  }

  // optional int32 m_guildActivity = 14;
  if (has_m_guildactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_guildactivity(), output);
  }

  // optional int32 m_dissolveAssignGuild = 15;
  if (has_m_dissolveassignguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_dissolveassignguild(), output);
  }

  // optional int32 m_changeName = 16;
  if (has_m_changename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_changename(), output);
  }

  // optional int32 m_recruitChat = 17;
  if (has_m_recruitchat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_recruitchat(), output);
  }

  // optional int32 m_guildPacket = 18;
  if (has_m_guildpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->m_guildpacket(), output);
  }

  // optional int32 m_UpGuard = 19;
  if (has_m_upguard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->m_upguard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_positionId = 1;
  if (has_m_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_positionid(), target);
  }

  // optional int32 m_admitNewcomer = 2;
  if (has_m_admitnewcomer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_admitnewcomer(), target);
  }

  // optional int32 m_appointAndRemoveVP = 3;
  if (has_m_appointandremovevp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_appointandremovevp(), target);
  }

  // optional int32 m_appointAndRemoveElder = 4;
  if (has_m_appointandremoveelder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_appointandremoveelder(), target);
  }

  // optional int32 m_appointAndRemoveG = 5;
  if (has_m_appointandremoveg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_appointandremoveg(), target);
  }

  // optional int32 m_appointAndRemoveElite = 6;
  if (has_m_appointandremoveelite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_appointandremoveelite(), target);
  }

  // optional int32 m_expelVP = 7;
  if (has_m_expelvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_expelvp(), target);
  }

  // optional int32 m_expelElder = 8;
  if (has_m_expelelder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_expelelder(), target);
  }

  // optional int32 m_expelG = 9;
  if (has_m_expelg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_expelg(), target);
  }

  // optional int32 m_expelMass = 10;
  if (has_m_expelmass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_expelmass(), target);
  }

  // optional int32 m_announcementEditing = 11;
  if (has_m_announcementediting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_announcementediting(), target);
  }

  // optional int32 m_rName = 12;
  if (has_m_rname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_rname(), target);
  }

  // optional int32 m_joinCondition = 13;
  if (has_m_joincondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_joincondition(), target);
  }

  // optional int32 m_guildActivity = 14;
  if (has_m_guildactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_guildactivity(), target);
  }

  // optional int32 m_dissolveAssignGuild = 15;
  if (has_m_dissolveassignguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_dissolveassignguild(), target);
  }

  // optional int32 m_changeName = 16;
  if (has_m_changename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_changename(), target);
  }

  // optional int32 m_recruitChat = 17;
  if (has_m_recruitchat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_recruitchat(), target);
  }

  // optional int32 m_guildPacket = 18;
  if (has_m_guildpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->m_guildpacket(), target);
  }

  // optional int32 m_UpGuard = 19;
  if (has_m_upguard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->m_upguard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_positionId = 1;
    if (has_m_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_positionid());
    }

    // optional int32 m_admitNewcomer = 2;
    if (has_m_admitnewcomer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_admitnewcomer());
    }

    // optional int32 m_appointAndRemoveVP = 3;
    if (has_m_appointandremovevp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_appointandremovevp());
    }

    // optional int32 m_appointAndRemoveElder = 4;
    if (has_m_appointandremoveelder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_appointandremoveelder());
    }

    // optional int32 m_appointAndRemoveG = 5;
    if (has_m_appointandremoveg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_appointandremoveg());
    }

    // optional int32 m_appointAndRemoveElite = 6;
    if (has_m_appointandremoveelite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_appointandremoveelite());
    }

    // optional int32 m_expelVP = 7;
    if (has_m_expelvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expelvp());
    }

    // optional int32 m_expelElder = 8;
    if (has_m_expelelder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expelelder());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_expelG = 9;
    if (has_m_expelg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expelg());
    }

    // optional int32 m_expelMass = 10;
    if (has_m_expelmass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_expelmass());
    }

    // optional int32 m_announcementEditing = 11;
    if (has_m_announcementediting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_announcementediting());
    }

    // optional int32 m_rName = 12;
    if (has_m_rname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rname());
    }

    // optional int32 m_joinCondition = 13;
    if (has_m_joincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_joincondition());
    }

    // optional int32 m_guildActivity = 14;
    if (has_m_guildactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildactivity());
    }

    // optional int32 m_dissolveAssignGuild = 15;
    if (has_m_dissolveassignguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dissolveassignguild());
    }

    // optional int32 m_changeName = 16;
    if (has_m_changename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_changename());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_recruitChat = 17;
    if (has_m_recruitchat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_recruitchat());
    }

    // optional int32 m_guildPacket = 18;
    if (has_m_guildpacket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildpacket());
    }

    // optional int32 m_UpGuard = 19;
    if (has_m_upguard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_upguard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildPosition::MergeFrom(const E_GuildPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_positionid()) {
      set_m_positionid(from.m_positionid());
    }
    if (from.has_m_admitnewcomer()) {
      set_m_admitnewcomer(from.m_admitnewcomer());
    }
    if (from.has_m_appointandremovevp()) {
      set_m_appointandremovevp(from.m_appointandremovevp());
    }
    if (from.has_m_appointandremoveelder()) {
      set_m_appointandremoveelder(from.m_appointandremoveelder());
    }
    if (from.has_m_appointandremoveg()) {
      set_m_appointandremoveg(from.m_appointandremoveg());
    }
    if (from.has_m_appointandremoveelite()) {
      set_m_appointandremoveelite(from.m_appointandremoveelite());
    }
    if (from.has_m_expelvp()) {
      set_m_expelvp(from.m_expelvp());
    }
    if (from.has_m_expelelder()) {
      set_m_expelelder(from.m_expelelder());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_expelg()) {
      set_m_expelg(from.m_expelg());
    }
    if (from.has_m_expelmass()) {
      set_m_expelmass(from.m_expelmass());
    }
    if (from.has_m_announcementediting()) {
      set_m_announcementediting(from.m_announcementediting());
    }
    if (from.has_m_rname()) {
      set_m_rname(from.m_rname());
    }
    if (from.has_m_joincondition()) {
      set_m_joincondition(from.m_joincondition());
    }
    if (from.has_m_guildactivity()) {
      set_m_guildactivity(from.m_guildactivity());
    }
    if (from.has_m_dissolveassignguild()) {
      set_m_dissolveassignguild(from.m_dissolveassignguild());
    }
    if (from.has_m_changename()) {
      set_m_changename(from.m_changename());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_recruitchat()) {
      set_m_recruitchat(from.m_recruitchat());
    }
    if (from.has_m_guildpacket()) {
      set_m_guildpacket(from.m_guildpacket());
    }
    if (from.has_m_upguard()) {
      set_m_upguard(from.m_upguard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildPosition::CopyFrom(const E_GuildPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildPosition::IsInitialized() const {

  return true;
}

void E_GuildPosition::Swap(E_GuildPosition* other) {
  if (other != this) {
    std::swap(m_positionid_, other->m_positionid_);
    std::swap(m_admitnewcomer_, other->m_admitnewcomer_);
    std::swap(m_appointandremovevp_, other->m_appointandremovevp_);
    std::swap(m_appointandremoveelder_, other->m_appointandremoveelder_);
    std::swap(m_appointandremoveg_, other->m_appointandremoveg_);
    std::swap(m_appointandremoveelite_, other->m_appointandremoveelite_);
    std::swap(m_expelvp_, other->m_expelvp_);
    std::swap(m_expelelder_, other->m_expelelder_);
    std::swap(m_expelg_, other->m_expelg_);
    std::swap(m_expelmass_, other->m_expelmass_);
    std::swap(m_announcementediting_, other->m_announcementediting_);
    std::swap(m_rname_, other->m_rname_);
    std::swap(m_joincondition_, other->m_joincondition_);
    std::swap(m_guildactivity_, other->m_guildactivity_);
    std::swap(m_dissolveassignguild_, other->m_dissolveassignguild_);
    std::swap(m_changename_, other->m_changename_);
    std::swap(m_recruitchat_, other->m_recruitchat_);
    std::swap(m_guildpacket_, other->m_guildpacket_);
    std::swap(m_upguard_, other->m_upguard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildPosition_descriptor_;
  metadata.reflection = E_GuildPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildPosition::kEGuildPositionListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildPosition::Sheet_GuildPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildPosition::InitAsDefaultInstance() {
}

Sheet_GuildPosition::Sheet_GuildPosition(const Sheet_GuildPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildPosition::~Sheet_GuildPosition() {
  SharedDtor();
}

void Sheet_GuildPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildPosition_descriptor_;
}

const Sheet_GuildPosition& Sheet_GuildPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildPosition* Sheet_GuildPosition::default_instance_ = NULL;

Sheet_GuildPosition* Sheet_GuildPosition::New() const {
  return new Sheet_GuildPosition;
}

void Sheet_GuildPosition::Clear() {
  e_guildposition_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildPosition E_GuildPosition_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildPosition_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildposition_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildPosition_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildPosition E_GuildPosition_List = 1;
  for (int i = 0; i < this->e_guildposition_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildposition_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildPosition E_GuildPosition_List = 1;
  for (int i = 0; i < this->e_guildposition_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildposition_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildPosition::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildPosition E_GuildPosition_List = 1;
  total_size += 1 * this->e_guildposition_list_size();
  for (int i = 0; i < this->e_guildposition_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildposition_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildPosition::MergeFrom(const Sheet_GuildPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildposition_list_.MergeFrom(from.e_guildposition_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildPosition::CopyFrom(const Sheet_GuildPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildPosition::IsInitialized() const {

  return true;
}

void Sheet_GuildPosition::Swap(Sheet_GuildPosition* other) {
  if (other != this) {
    e_guildposition_list_.Swap(&other->e_guildposition_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildPosition_descriptor_;
  metadata.reflection = Sheet_GuildPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildSalaryRewardDesc::kMNumFieldNumber;
const int E_GuildSalaryRewardDesc::kMItemFieldNumber;
#endif  // !_MSC_VER

E_GuildSalaryRewardDesc::E_GuildSalaryRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildSalaryRewardDesc::InitAsDefaultInstance() {
}

E_GuildSalaryRewardDesc::E_GuildSalaryRewardDesc(const E_GuildSalaryRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildSalaryRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildSalaryRewardDesc::~E_GuildSalaryRewardDesc() {
  SharedDtor();
}

void E_GuildSalaryRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildSalaryRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildSalaryRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildSalaryRewardDesc_descriptor_;
}

const E_GuildSalaryRewardDesc& E_GuildSalaryRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildSalaryRewardDesc* E_GuildSalaryRewardDesc::default_instance_ = NULL;

E_GuildSalaryRewardDesc* E_GuildSalaryRewardDesc::New() const {
  return new E_GuildSalaryRewardDesc;
}

void E_GuildSalaryRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildSalaryRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildSalaryRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildSalaryRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildSalaryRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildSalaryRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildSalaryRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildSalaryRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildSalaryRewardDesc::MergeFrom(const E_GuildSalaryRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildSalaryRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildSalaryRewardDesc::CopyFrom(const E_GuildSalaryRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildSalaryRewardDesc::IsInitialized() const {

  return true;
}

void E_GuildSalaryRewardDesc::Swap(E_GuildSalaryRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_item_, other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildSalaryRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildSalaryRewardDesc_descriptor_;
  metadata.reflection = E_GuildSalaryRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildSalary::kMIDFieldNumber;
const int E_GuildSalary::kMTypeFieldNumber;
const int E_GuildSalary::kMTypeArgFieldNumber;
const int E_GuildSalary::kMTimesFieldNumber;
const int E_GuildSalary::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_GuildSalary::E_GuildSalary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildSalary::InitAsDefaultInstance() {
}

E_GuildSalary::E_GuildSalary(const E_GuildSalary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildSalary::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_typearg_ = 0;
  m_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildSalary::~E_GuildSalary() {
  SharedDtor();
}

void E_GuildSalary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildSalary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildSalary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildSalary_descriptor_;
}

const E_GuildSalary& E_GuildSalary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildSalary* E_GuildSalary::default_instance_ = NULL;

E_GuildSalary* E_GuildSalary::New() const {
  return new E_GuildSalary;
}

void E_GuildSalary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_typearg_ = 0;
    m_times_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildSalary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_typeArg;
        break;
      }

      // optional int32 m_typeArg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typearg_)));
          set_has_m_typearg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_GuildSalaryRewardDesc m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildSalary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_typeArg = 3;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_typearg(), output);
  }

  // optional int32 m_times = 4;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_times(), output);
  }

  // repeated .proto_ff.E_GuildSalaryRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildSalary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_typeArg = 3;
  if (has_m_typearg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_typearg(), target);
  }

  // optional int32 m_times = 4;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_times(), target);
  }

  // repeated .proto_ff.E_GuildSalaryRewardDesc m_reward = 5;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildSalary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_typeArg = 3;
    if (has_m_typearg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typearg());
    }

    // optional int32 m_times = 4;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

  }
  // repeated .proto_ff.E_GuildSalaryRewardDesc m_reward = 5;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildSalary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildSalary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildSalary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildSalary::MergeFrom(const E_GuildSalary& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_typearg()) {
      set_m_typearg(from.m_typearg());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildSalary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildSalary::CopyFrom(const E_GuildSalary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildSalary::IsInitialized() const {

  return true;
}

void E_GuildSalary::Swap(E_GuildSalary* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_typearg_, other->m_typearg_);
    std::swap(m_times_, other->m_times_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildSalary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildSalary_descriptor_;
  metadata.reflection = E_GuildSalary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildSalary::kEGuildSalaryListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildSalary::Sheet_GuildSalary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildSalary::InitAsDefaultInstance() {
}

Sheet_GuildSalary::Sheet_GuildSalary(const Sheet_GuildSalary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildSalary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildSalary::~Sheet_GuildSalary() {
  SharedDtor();
}

void Sheet_GuildSalary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildSalary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildSalary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildSalary_descriptor_;
}

const Sheet_GuildSalary& Sheet_GuildSalary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildSalary* Sheet_GuildSalary::default_instance_ = NULL;

Sheet_GuildSalary* Sheet_GuildSalary::New() const {
  return new Sheet_GuildSalary;
}

void Sheet_GuildSalary::Clear() {
  e_guildsalary_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildSalary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildSalary E_GuildSalary_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildSalary_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildsalary_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildSalary_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildSalary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildSalary E_GuildSalary_List = 1;
  for (int i = 0; i < this->e_guildsalary_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildsalary_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildSalary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildSalary E_GuildSalary_List = 1;
  for (int i = 0; i < this->e_guildsalary_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildsalary_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildSalary::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildSalary E_GuildSalary_List = 1;
  total_size += 1 * this->e_guildsalary_list_size();
  for (int i = 0; i < this->e_guildsalary_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildsalary_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildSalary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildSalary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildSalary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildSalary::MergeFrom(const Sheet_GuildSalary& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildsalary_list_.MergeFrom(from.e_guildsalary_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildSalary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildSalary::CopyFrom(const Sheet_GuildSalary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildSalary::IsInitialized() const {

  return true;
}

void Sheet_GuildSalary::Swap(Sheet_GuildSalary* other) {
  if (other != this) {
    e_guildsalary_list_.Swap(&other->e_guildsalary_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildSalary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildSalary_descriptor_;
  metadata.reflection = Sheet_GuildSalary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildDonateRewardDesc::kMNumFieldNumber;
const int E_GuildDonateRewardDesc::kMItemFieldNumber;
#endif  // !_MSC_VER

E_GuildDonateRewardDesc::E_GuildDonateRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildDonateRewardDesc::InitAsDefaultInstance() {
}

E_GuildDonateRewardDesc::E_GuildDonateRewardDesc(const E_GuildDonateRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildDonateRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildDonateRewardDesc::~E_GuildDonateRewardDesc() {
  SharedDtor();
}

void E_GuildDonateRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildDonateRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildDonateRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildDonateRewardDesc_descriptor_;
}

const E_GuildDonateRewardDesc& E_GuildDonateRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildDonateRewardDesc* E_GuildDonateRewardDesc::default_instance_ = NULL;

E_GuildDonateRewardDesc* E_GuildDonateRewardDesc::New() const {
  return new E_GuildDonateRewardDesc;
}

void E_GuildDonateRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildDonateRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_item;
        break;
      }

      // optional int32 m_item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_item_)));
          set_has_m_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildDonateRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildDonateRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_item = 2;
  if (has_m_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildDonateRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_item = 2;
    if (has_m_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildDonateRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildDonateRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildDonateRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildDonateRewardDesc::MergeFrom(const E_GuildDonateRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_item()) {
      set_m_item(from.m_item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildDonateRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildDonateRewardDesc::CopyFrom(const E_GuildDonateRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildDonateRewardDesc::IsInitialized() const {

  return true;
}

void E_GuildDonateRewardDesc::Swap(E_GuildDonateRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_item_, other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildDonateRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildDonateRewardDesc_descriptor_;
  metadata.reflection = E_GuildDonateRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildDonate::kMIDFieldNumber;
const int E_GuildDonate::kMCostItemFieldNumber;
const int E_GuildDonate::kMCostNumFieldNumber;
const int E_GuildDonate::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_GuildDonate::E_GuildDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildDonate::InitAsDefaultInstance() {
}

E_GuildDonate::E_GuildDonate(const E_GuildDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildDonate::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildDonate::~E_GuildDonate() {
  SharedDtor();
}

void E_GuildDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildDonate_descriptor_;
}

const E_GuildDonate& E_GuildDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildDonate* E_GuildDonate::default_instance_ = NULL;

E_GuildDonate* E_GuildDonate::New() const {
  return new E_GuildDonate;
}

void E_GuildDonate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_costitem_ = 0;
    m_costnum_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_costNum;
        break;
      }

      // optional int32 m_costNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_GuildDonateRewardDesc m_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_costitem(), output);
  }

  // optional int32 m_costNum = 3;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_costnum(), output);
  }

  // repeated .proto_ff.E_GuildDonateRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_costItem = 2;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_costitem(), target);
  }

  // optional int32 m_costNum = 3;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_costnum(), target);
  }

  // repeated .proto_ff.E_GuildDonateRewardDesc m_reward = 4;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_costItem = 2;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_costNum = 3;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

  }
  // repeated .proto_ff.E_GuildDonateRewardDesc m_reward = 4;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildDonate::MergeFrom(const E_GuildDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildDonate::CopyFrom(const E_GuildDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildDonate::IsInitialized() const {

  return true;
}

void E_GuildDonate::Swap(E_GuildDonate* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildDonate_descriptor_;
  metadata.reflection = E_GuildDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildDonate::kEGuildDonateListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildDonate::Sheet_GuildDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildDonate::InitAsDefaultInstance() {
}

Sheet_GuildDonate::Sheet_GuildDonate(const Sheet_GuildDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildDonate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildDonate::~Sheet_GuildDonate() {
  SharedDtor();
}

void Sheet_GuildDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildDonate_descriptor_;
}

const Sheet_GuildDonate& Sheet_GuildDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildDonate* Sheet_GuildDonate::default_instance_ = NULL;

Sheet_GuildDonate* Sheet_GuildDonate::New() const {
  return new Sheet_GuildDonate;
}

void Sheet_GuildDonate::Clear() {
  e_guilddonate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildDonate E_GuildDonate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildDonate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guilddonate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildDonate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildDonate E_GuildDonate_List = 1;
  for (int i = 0; i < this->e_guilddonate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guilddonate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildDonate E_GuildDonate_List = 1;
  for (int i = 0; i < this->e_guilddonate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guilddonate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildDonate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildDonate E_GuildDonate_List = 1;
  total_size += 1 * this->e_guilddonate_list_size();
  for (int i = 0; i < this->e_guilddonate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guilddonate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildDonate::MergeFrom(const Sheet_GuildDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guilddonate_list_.MergeFrom(from.e_guilddonate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildDonate::CopyFrom(const Sheet_GuildDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildDonate::IsInitialized() const {

  return true;
}

void Sheet_GuildDonate::Swap(Sheet_GuildDonate* other) {
  if (other != this) {
    e_guilddonate_list_.Swap(&other->e_guilddonate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildDonate_descriptor_;
  metadata.reflection = Sheet_GuildDonate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildPacket::kMIDFieldNumber;
const int E_GuildPacket::kMBelongTypeFieldNumber;
const int E_GuildPacket::kMTypeFieldNumber;
const int E_GuildPacket::kMTypeArgFieldNumber;
const int E_GuildPacket::kMItemIDFieldNumber;
const int E_GuildPacket::kMItemNumFieldNumber;
const int E_GuildPacket::kMNumFieldNumber;
const int E_GuildPacket::kMPreFieldNumber;
const int E_GuildPacket::kMDailyFieldNumber;
#endif  // !_MSC_VER

E_GuildPacket::E_GuildPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildPacket::InitAsDefaultInstance() {
}

E_GuildPacket::E_GuildPacket(const E_GuildPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildPacket::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_belongtype_ = 0;
  m_type_ = 0;
  m_typearg_ = 0;
  m_itemid_ = 0;
  m_itemnum_ = 0;
  m_num_ = 0;
  m_pre_ = 0;
  m_daily_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildPacket::~E_GuildPacket() {
  SharedDtor();
}

void E_GuildPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildPacket_descriptor_;
}

const E_GuildPacket& E_GuildPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildPacket* E_GuildPacket::default_instance_ = NULL;

E_GuildPacket* E_GuildPacket::New() const {
  return new E_GuildPacket;
}

void E_GuildPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_belongtype_ = 0;
    m_type_ = 0;
    m_typearg_ = 0;
    m_itemid_ = 0;
    m_itemnum_ = 0;
    m_num_ = 0;
    m_pre_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_daily_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_belongType;
        break;
      }

      // optional int32 m_belongType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_belongType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_belongtype_)));
          set_has_m_belongtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_typeArg;
        break;
      }

      // optional int32 m_typeArg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typearg_)));
          set_has_m_typearg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemID;
        break;
      }

      // optional int32 m_itemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemNum;
        break;
      }

      // optional int32 m_itemNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_pre;
        break;
      }

      // optional int32 m_pre = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pre_)));
          set_has_m_pre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_daily;
        break;
      }

      // optional int32 m_daily = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_daily_)));
          set_has_m_daily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_belongType = 2;
  if (has_m_belongtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_belongtype(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_typeArg = 4;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_typearg(), output);
  }

  // optional int32 m_itemID = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemNum = 6;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemnum(), output);
  }

  // optional int32 m_num = 7;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_num(), output);
  }

  // optional int32 m_pre = 8;
  if (has_m_pre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_pre(), output);
  }

  // optional int32 m_daily = 9;
  if (has_m_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_daily(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_belongType = 2;
  if (has_m_belongtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_belongtype(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_typeArg = 4;
  if (has_m_typearg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_typearg(), target);
  }

  // optional int32 m_itemID = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemNum = 6;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemnum(), target);
  }

  // optional int32 m_num = 7;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_num(), target);
  }

  // optional int32 m_pre = 8;
  if (has_m_pre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_pre(), target);
  }

  // optional int32 m_daily = 9;
  if (has_m_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_daily(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildPacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_belongType = 2;
    if (has_m_belongtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_belongtype());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_typeArg = 4;
    if (has_m_typearg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typearg());
    }

    // optional int32 m_itemID = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemNum = 6;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

    // optional int32 m_num = 7;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_pre = 8;
    if (has_m_pre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pre());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_daily = 9;
    if (has_m_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_daily());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildPacket::MergeFrom(const E_GuildPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_belongtype()) {
      set_m_belongtype(from.m_belongtype());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_typearg()) {
      set_m_typearg(from.m_typearg());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_pre()) {
      set_m_pre(from.m_pre());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_daily()) {
      set_m_daily(from.m_daily());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildPacket::CopyFrom(const E_GuildPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildPacket::IsInitialized() const {

  return true;
}

void E_GuildPacket::Swap(E_GuildPacket* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_belongtype_, other->m_belongtype_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_typearg_, other->m_typearg_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_pre_, other->m_pre_);
    std::swap(m_daily_, other->m_daily_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildPacket_descriptor_;
  metadata.reflection = E_GuildPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildPacket::kEGuildPacketListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildPacket::Sheet_GuildPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildPacket::InitAsDefaultInstance() {
}

Sheet_GuildPacket::Sheet_GuildPacket(const Sheet_GuildPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildPacket::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildPacket::~Sheet_GuildPacket() {
  SharedDtor();
}

void Sheet_GuildPacket::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildPacket_descriptor_;
}

const Sheet_GuildPacket& Sheet_GuildPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildPacket* Sheet_GuildPacket::default_instance_ = NULL;

Sheet_GuildPacket* Sheet_GuildPacket::New() const {
  return new Sheet_GuildPacket;
}

void Sheet_GuildPacket::Clear() {
  e_guildpacket_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildPacket E_GuildPacket_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildPacket_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildpacket_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildPacket_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildPacket E_GuildPacket_List = 1;
  for (int i = 0; i < this->e_guildpacket_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildpacket_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildPacket E_GuildPacket_List = 1;
  for (int i = 0; i < this->e_guildpacket_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildpacket_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildPacket::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildPacket E_GuildPacket_List = 1;
  total_size += 1 * this->e_guildpacket_list_size();
  for (int i = 0; i < this->e_guildpacket_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildpacket_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildPacket::MergeFrom(const Sheet_GuildPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildpacket_list_.MergeFrom(from.e_guildpacket_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildPacket::CopyFrom(const Sheet_GuildPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildPacket::IsInitialized() const {

  return true;
}

void Sheet_GuildPacket::Swap(Sheet_GuildPacket* other) {
  if (other != this) {
    e_guildpacket_list_.Swap(&other->e_guildpacket_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildPacket_descriptor_;
  metadata.reflection = Sheet_GuildPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildPrestigetask::kMIDFieldNumber;
const int E_GuildPrestigetask::kMLevelFieldNumber;
const int E_GuildPrestigetask::kMLvMinFieldNumber;
const int E_GuildPrestigetask::kMLvMaxFieldNumber;
const int E_GuildPrestigetask::kMWeightFieldNumber;
const int E_GuildPrestigetask::kMTaskpoolFieldNumber;
const int E_GuildPrestigetask::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_GuildPrestigetask::E_GuildPrestigetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildPrestigetask::InitAsDefaultInstance() {
}

E_GuildPrestigetask::E_GuildPrestigetask(const E_GuildPrestigetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildPrestigetask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_level_ = 0;
  m_lvmin_ = 0;
  m_lvmax_ = 0;
  m_weight_ = 0;
  m_taskpool_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildPrestigetask::~E_GuildPrestigetask() {
  SharedDtor();
}

void E_GuildPrestigetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildPrestigetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildPrestigetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildPrestigetask_descriptor_;
}

const E_GuildPrestigetask& E_GuildPrestigetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildPrestigetask* E_GuildPrestigetask::default_instance_ = NULL;

E_GuildPrestigetask* E_GuildPrestigetask::New() const {
  return new E_GuildPrestigetask;
}

void E_GuildPrestigetask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_level_ = 0;
    m_lvmin_ = 0;
    m_lvmax_ = 0;
    m_weight_ = 0;
    m_taskpool_ = 0;
    m_reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildPrestigetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_lvMin;
        break;
      }

      // optional int32 m_lvMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmin_)));
          set_has_m_lvmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lvMax;
        break;
      }

      // optional int32 m_lvMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmax_)));
          set_has_m_lvmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_taskpool;
        break;
      }

      // optional int32 m_taskpool = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskpool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskpool_)));
          set_has_m_taskpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildPrestigetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_level(), output);
  }

  // optional int32 m_lvMin = 3;
  if (has_m_lvmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_lvmin(), output);
  }

  // optional int32 m_lvMax = 4;
  if (has_m_lvmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lvmax(), output);
  }

  // optional int32 m_weight = 5;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_weight(), output);
  }

  // optional int32 m_taskpool = 6;
  if (has_m_taskpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_taskpool(), output);
  }

  // optional int32 m_reward = 7;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildPrestigetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_ID = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_level = 2;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_level(), target);
  }

  // optional int32 m_lvMin = 3;
  if (has_m_lvmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_lvmin(), target);
  }

  // optional int32 m_lvMax = 4;
  if (has_m_lvmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lvmax(), target);
  }

  // optional int32 m_weight = 5;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_weight(), target);
  }

  // optional int32 m_taskpool = 6;
  if (has_m_taskpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_taskpool(), target);
  }

  // optional int32 m_reward = 7;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildPrestigetask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_ID = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_level = 2;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_lvMin = 3;
    if (has_m_lvmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmin());
    }

    // optional int32 m_lvMax = 4;
    if (has_m_lvmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmax());
    }

    // optional int32 m_weight = 5;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

    // optional int32 m_taskpool = 6;
    if (has_m_taskpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskpool());
    }

    // optional int32 m_reward = 7;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildPrestigetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildPrestigetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildPrestigetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildPrestigetask::MergeFrom(const E_GuildPrestigetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_lvmin()) {
      set_m_lvmin(from.m_lvmin());
    }
    if (from.has_m_lvmax()) {
      set_m_lvmax(from.m_lvmax());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
    if (from.has_m_taskpool()) {
      set_m_taskpool(from.m_taskpool());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildPrestigetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildPrestigetask::CopyFrom(const E_GuildPrestigetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildPrestigetask::IsInitialized() const {

  return true;
}

void E_GuildPrestigetask::Swap(E_GuildPrestigetask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_lvmin_, other->m_lvmin_);
    std::swap(m_lvmax_, other->m_lvmax_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(m_taskpool_, other->m_taskpool_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildPrestigetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildPrestigetask_descriptor_;
  metadata.reflection = E_GuildPrestigetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildPrestigetask::kEGuildPrestigetaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildPrestigetask::Sheet_GuildPrestigetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildPrestigetask::InitAsDefaultInstance() {
}

Sheet_GuildPrestigetask::Sheet_GuildPrestigetask(const Sheet_GuildPrestigetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildPrestigetask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildPrestigetask::~Sheet_GuildPrestigetask() {
  SharedDtor();
}

void Sheet_GuildPrestigetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildPrestigetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildPrestigetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildPrestigetask_descriptor_;
}

const Sheet_GuildPrestigetask& Sheet_GuildPrestigetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildPrestigetask* Sheet_GuildPrestigetask::default_instance_ = NULL;

Sheet_GuildPrestigetask* Sheet_GuildPrestigetask::New() const {
  return new Sheet_GuildPrestigetask;
}

void Sheet_GuildPrestigetask::Clear() {
  e_guildprestigetask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildPrestigetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildPrestigetask E_GuildPrestigetask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildPrestigetask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildprestigetask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildPrestigetask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildPrestigetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildPrestigetask E_GuildPrestigetask_List = 1;
  for (int i = 0; i < this->e_guildprestigetask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildprestigetask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildPrestigetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildPrestigetask E_GuildPrestigetask_List = 1;
  for (int i = 0; i < this->e_guildprestigetask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildprestigetask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildPrestigetask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildPrestigetask E_GuildPrestigetask_List = 1;
  total_size += 1 * this->e_guildprestigetask_list_size();
  for (int i = 0; i < this->e_guildprestigetask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildprestigetask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildPrestigetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildPrestigetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildPrestigetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildPrestigetask::MergeFrom(const Sheet_GuildPrestigetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildprestigetask_list_.MergeFrom(from.e_guildprestigetask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildPrestigetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildPrestigetask::CopyFrom(const Sheet_GuildPrestigetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildPrestigetask::IsInitialized() const {

  return true;
}

void Sheet_GuildPrestigetask::Swap(Sheet_GuildPrestigetask* other) {
  if (other != this) {
    e_guildprestigetask_list_.Swap(&other->e_guildprestigetask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildPrestigetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildPrestigetask_descriptor_;
  metadata.reflection = Sheet_GuildPrestigetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildLvreward::kMLvFieldNumber;
const int E_GuildLvreward::kMPartyExpFieldNumber;
const int E_GuildLvreward::kMPartyEontributionFieldNumber;
const int E_GuildLvreward::kMLinkExpFieldNumber;
#endif  // !_MSC_VER

E_GuildLvreward::E_GuildLvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildLvreward::InitAsDefaultInstance() {
}

E_GuildLvreward::E_GuildLvreward(const E_GuildLvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildLvreward::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_partyexp_ = GOOGLE_LONGLONG(0);
  m_partyeontribution_ = 0;
  m_linkexp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildLvreward::~E_GuildLvreward() {
  SharedDtor();
}

void E_GuildLvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildLvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildLvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildLvreward_descriptor_;
}

const E_GuildLvreward& E_GuildLvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildLvreward* E_GuildLvreward::default_instance_ = NULL;

E_GuildLvreward* E_GuildLvreward::New() const {
  return new E_GuildLvreward;
}

void E_GuildLvreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_partyexp_ = GOOGLE_LONGLONG(0);
    m_partyeontribution_ = 0;
    m_linkexp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildLvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_partyExp;
        break;
      }

      // optional int64 m_partyExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_partyExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_partyexp_)));
          set_has_m_partyexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_partyEontribution;
        break;
      }

      // optional int32 m_partyEontribution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_partyEontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_partyeontribution_)));
          set_has_m_partyeontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_linkExp;
        break;
      }

      // optional int64 m_linkExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_linkexp_)));
          set_has_m_linkexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildLvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int64 m_partyExp = 2;
  if (has_m_partyexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_partyexp(), output);
  }

  // optional int32 m_partyEontribution = 3;
  if (has_m_partyeontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_partyeontribution(), output);
  }

  // optional int64 m_linkExp = 4;
  if (has_m_linkexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_linkexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildLvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int64 m_partyExp = 2;
  if (has_m_partyexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_partyexp(), target);
  }

  // optional int32 m_partyEontribution = 3;
  if (has_m_partyeontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_partyeontribution(), target);
  }

  // optional int64 m_linkExp = 4;
  if (has_m_linkexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_linkexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildLvreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int64 m_partyExp = 2;
    if (has_m_partyexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_partyexp());
    }

    // optional int32 m_partyEontribution = 3;
    if (has_m_partyeontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_partyeontribution());
    }

    // optional int64 m_linkExp = 4;
    if (has_m_linkexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_linkexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildLvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildLvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildLvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildLvreward::MergeFrom(const E_GuildLvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_partyexp()) {
      set_m_partyexp(from.m_partyexp());
    }
    if (from.has_m_partyeontribution()) {
      set_m_partyeontribution(from.m_partyeontribution());
    }
    if (from.has_m_linkexp()) {
      set_m_linkexp(from.m_linkexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildLvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildLvreward::CopyFrom(const E_GuildLvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildLvreward::IsInitialized() const {

  return true;
}

void E_GuildLvreward::Swap(E_GuildLvreward* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_partyexp_, other->m_partyexp_);
    std::swap(m_partyeontribution_, other->m_partyeontribution_);
    std::swap(m_linkexp_, other->m_linkexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildLvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildLvreward_descriptor_;
  metadata.reflection = E_GuildLvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildLvreward::kEGuildLvrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildLvreward::Sheet_GuildLvreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildLvreward::InitAsDefaultInstance() {
}

Sheet_GuildLvreward::Sheet_GuildLvreward(const Sheet_GuildLvreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildLvreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildLvreward::~Sheet_GuildLvreward() {
  SharedDtor();
}

void Sheet_GuildLvreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildLvreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildLvreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildLvreward_descriptor_;
}

const Sheet_GuildLvreward& Sheet_GuildLvreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildLvreward* Sheet_GuildLvreward::default_instance_ = NULL;

Sheet_GuildLvreward* Sheet_GuildLvreward::New() const {
  return new Sheet_GuildLvreward;
}

void Sheet_GuildLvreward::Clear() {
  e_guildlvreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildLvreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildLvreward E_GuildLvreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildLvreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildlvreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildLvreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildLvreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildLvreward E_GuildLvreward_List = 1;
  for (int i = 0; i < this->e_guildlvreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildlvreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildLvreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildLvreward E_GuildLvreward_List = 1;
  for (int i = 0; i < this->e_guildlvreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildlvreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildLvreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildLvreward E_GuildLvreward_List = 1;
  total_size += 1 * this->e_guildlvreward_list_size();
  for (int i = 0; i < this->e_guildlvreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildlvreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildLvreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildLvreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildLvreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildLvreward::MergeFrom(const Sheet_GuildLvreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildlvreward_list_.MergeFrom(from.e_guildlvreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildLvreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildLvreward::CopyFrom(const Sheet_GuildLvreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildLvreward::IsInitialized() const {

  return true;
}

void Sheet_GuildLvreward::Swap(Sheet_GuildLvreward* other) {
  if (other != this) {
    e_guildlvreward_list_.Swap(&other->e_guildlvreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildLvreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildLvreward_descriptor_;
  metadata.reflection = Sheet_GuildLvreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildCollegeAttributeDesc::kMValueFieldNumber;
const int E_GuildCollegeAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_GuildCollegeAttributeDesc::E_GuildCollegeAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildCollegeAttributeDesc::InitAsDefaultInstance() {
}

E_GuildCollegeAttributeDesc::E_GuildCollegeAttributeDesc(const E_GuildCollegeAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildCollegeAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildCollegeAttributeDesc::~E_GuildCollegeAttributeDesc() {
  SharedDtor();
}

void E_GuildCollegeAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildCollegeAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildCollegeAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildCollegeAttributeDesc_descriptor_;
}

const E_GuildCollegeAttributeDesc& E_GuildCollegeAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildCollegeAttributeDesc* E_GuildCollegeAttributeDesc::default_instance_ = NULL;

E_GuildCollegeAttributeDesc* E_GuildCollegeAttributeDesc::New() const {
  return new E_GuildCollegeAttributeDesc;
}

void E_GuildCollegeAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildCollegeAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildCollegeAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildCollegeAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildCollegeAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildCollegeAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildCollegeAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildCollegeAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildCollegeAttributeDesc::MergeFrom(const E_GuildCollegeAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildCollegeAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildCollegeAttributeDesc::CopyFrom(const E_GuildCollegeAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildCollegeAttributeDesc::IsInitialized() const {

  return true;
}

void E_GuildCollegeAttributeDesc::Swap(E_GuildCollegeAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildCollegeAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildCollegeAttributeDesc_descriptor_;
  metadata.reflection = E_GuildCollegeAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildCollege::kMUidFieldNumber;
const int E_GuildCollege::kMSkillidFieldNumber;
const int E_GuildCollege::kMSkillLvFieldNumber;
const int E_GuildCollege::kMGuildLvFieldNumber;
const int E_GuildCollege::kMPlayerLvLimitFieldNumber;
const int E_GuildCollege::kMPreSkillidFieldNumber;
const int E_GuildCollege::kMPreSkillLvFieldNumber;
const int E_GuildCollege::kMCostContributeFieldNumber;
const int E_GuildCollege::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_GuildCollege::E_GuildCollege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildCollege::InitAsDefaultInstance() {
}

E_GuildCollege::E_GuildCollege(const E_GuildCollege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildCollege::SharedCtor() {
  _cached_size_ = 0;
  m_uid_ = 0;
  m_skillid_ = 0;
  m_skilllv_ = 0;
  m_guildlv_ = 0;
  m_playerlvlimit_ = 0;
  m_preskillid_ = 0;
  m_preskilllv_ = 0;
  m_costcontribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildCollege::~E_GuildCollege() {
  SharedDtor();
}

void E_GuildCollege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildCollege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildCollege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildCollege_descriptor_;
}

const E_GuildCollege& E_GuildCollege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildCollege* E_GuildCollege::default_instance_ = NULL;

E_GuildCollege* E_GuildCollege::New() const {
  return new E_GuildCollege;
}

void E_GuildCollege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_uid_ = 0;
    m_skillid_ = 0;
    m_skilllv_ = 0;
    m_guildlv_ = 0;
    m_playerlvlimit_ = 0;
    m_preskillid_ = 0;
    m_preskilllv_ = 0;
    m_costcontribute_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildCollege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_uid_)));
          set_has_m_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_skillLv;
        break;
      }

      // optional int32 m_skillLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skilllv_)));
          set_has_m_skilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_guildLv;
        break;
      }

      // optional int32 m_guildLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_guildLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_guildlv_)));
          set_has_m_guildlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_playerLvLimit;
        break;
      }

      // optional int32 m_playerLvLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playerLvLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playerlvlimit_)));
          set_has_m_playerlvlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_preSkillid;
        break;
      }

      // optional int32 m_preSkillid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_preSkillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_preskillid_)));
          set_has_m_preskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_preSkillLv;
        break;
      }

      // optional int32 m_preSkillLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_preSkillLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_preskilllv_)));
          set_has_m_preskilllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_CostContribute;
        break;
      }

      // optional int32 m_CostContribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_CostContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costcontribute_)));
          set_has_m_costcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_GuildCollegeAttributeDesc m_attribute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildCollege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_uid = 1;
  if (has_m_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_uid(), output);
  }

  // optional int32 m_skillid = 2;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skillid(), output);
  }

  // optional int32 m_skillLv = 3;
  if (has_m_skilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_skilllv(), output);
  }

  // optional int32 m_guildLv = 4;
  if (has_m_guildlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_guildlv(), output);
  }

  // optional int32 m_playerLvLimit = 5;
  if (has_m_playerlvlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_playerlvlimit(), output);
  }

  // optional int32 m_preSkillid = 6;
  if (has_m_preskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_preskillid(), output);
  }

  // optional int32 m_preSkillLv = 7;
  if (has_m_preskilllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_preskilllv(), output);
  }

  // optional int32 m_CostContribute = 8;
  if (has_m_costcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_costcontribute(), output);
  }

  // repeated .proto_ff.E_GuildCollegeAttributeDesc m_attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildCollege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_uid = 1;
  if (has_m_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_uid(), target);
  }

  // optional int32 m_skillid = 2;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skillid(), target);
  }

  // optional int32 m_skillLv = 3;
  if (has_m_skilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_skilllv(), target);
  }

  // optional int32 m_guildLv = 4;
  if (has_m_guildlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_guildlv(), target);
  }

  // optional int32 m_playerLvLimit = 5;
  if (has_m_playerlvlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_playerlvlimit(), target);
  }

  // optional int32 m_preSkillid = 6;
  if (has_m_preskillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_preskillid(), target);
  }

  // optional int32 m_preSkillLv = 7;
  if (has_m_preskilllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_preskilllv(), target);
  }

  // optional int32 m_CostContribute = 8;
  if (has_m_costcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_costcontribute(), target);
  }

  // repeated .proto_ff.E_GuildCollegeAttributeDesc m_attribute = 9;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildCollege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_uid = 1;
    if (has_m_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_uid());
    }

    // optional int32 m_skillid = 2;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_skillLv = 3;
    if (has_m_skilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skilllv());
    }

    // optional int32 m_guildLv = 4;
    if (has_m_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_guildlv());
    }

    // optional int32 m_playerLvLimit = 5;
    if (has_m_playerlvlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playerlvlimit());
    }

    // optional int32 m_preSkillid = 6;
    if (has_m_preskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_preskillid());
    }

    // optional int32 m_preSkillLv = 7;
    if (has_m_preskilllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_preskilllv());
    }

    // optional int32 m_CostContribute = 8;
    if (has_m_costcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costcontribute());
    }

  }
  // repeated .proto_ff.E_GuildCollegeAttributeDesc m_attribute = 9;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildCollege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildCollege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildCollege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildCollege::MergeFrom(const E_GuildCollege& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_uid()) {
      set_m_uid(from.m_uid());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_skilllv()) {
      set_m_skilllv(from.m_skilllv());
    }
    if (from.has_m_guildlv()) {
      set_m_guildlv(from.m_guildlv());
    }
    if (from.has_m_playerlvlimit()) {
      set_m_playerlvlimit(from.m_playerlvlimit());
    }
    if (from.has_m_preskillid()) {
      set_m_preskillid(from.m_preskillid());
    }
    if (from.has_m_preskilllv()) {
      set_m_preskilllv(from.m_preskilllv());
    }
    if (from.has_m_costcontribute()) {
      set_m_costcontribute(from.m_costcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildCollege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildCollege::CopyFrom(const E_GuildCollege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildCollege::IsInitialized() const {

  return true;
}

void E_GuildCollege::Swap(E_GuildCollege* other) {
  if (other != this) {
    std::swap(m_uid_, other->m_uid_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_skilllv_, other->m_skilllv_);
    std::swap(m_guildlv_, other->m_guildlv_);
    std::swap(m_playerlvlimit_, other->m_playerlvlimit_);
    std::swap(m_preskillid_, other->m_preskillid_);
    std::swap(m_preskilllv_, other->m_preskilllv_);
    std::swap(m_costcontribute_, other->m_costcontribute_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildCollege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildCollege_descriptor_;
  metadata.reflection = E_GuildCollege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildCollege::kEGuildCollegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildCollege::Sheet_GuildCollege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildCollege::InitAsDefaultInstance() {
}

Sheet_GuildCollege::Sheet_GuildCollege(const Sheet_GuildCollege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildCollege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildCollege::~Sheet_GuildCollege() {
  SharedDtor();
}

void Sheet_GuildCollege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildCollege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildCollege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildCollege_descriptor_;
}

const Sheet_GuildCollege& Sheet_GuildCollege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildCollege* Sheet_GuildCollege::default_instance_ = NULL;

Sheet_GuildCollege* Sheet_GuildCollege::New() const {
  return new Sheet_GuildCollege;
}

void Sheet_GuildCollege::Clear() {
  e_guildcollege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildCollege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildCollege E_GuildCollege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildCollege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildcollege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildCollege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildCollege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildCollege E_GuildCollege_List = 1;
  for (int i = 0; i < this->e_guildcollege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildcollege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildCollege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildCollege E_GuildCollege_List = 1;
  for (int i = 0; i < this->e_guildcollege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildcollege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildCollege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildCollege E_GuildCollege_List = 1;
  total_size += 1 * this->e_guildcollege_list_size();
  for (int i = 0; i < this->e_guildcollege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildcollege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildCollege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildCollege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildCollege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildCollege::MergeFrom(const Sheet_GuildCollege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildcollege_list_.MergeFrom(from.e_guildcollege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildCollege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildCollege::CopyFrom(const Sheet_GuildCollege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildCollege::IsInitialized() const {

  return true;
}

void Sheet_GuildCollege::Swap(Sheet_GuildCollege* other) {
  if (other != this) {
    e_guildcollege_list_.Swap(&other->e_guildcollege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildCollege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildCollege_descriptor_;
  metadata.reflection = Sheet_GuildCollege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildAnswer::kMIdFieldNumber;
const int E_GuildAnswer::kMAnswerFieldNumber;
#endif  // !_MSC_VER

E_GuildAnswer::E_GuildAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildAnswer::InitAsDefaultInstance() {
}

E_GuildAnswer::E_GuildAnswer(const E_GuildAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildAnswer::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_answer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildAnswer::~E_GuildAnswer() {
  SharedDtor();
}

void E_GuildAnswer::SharedDtor() {
  if (m_answer_ != &::google::protobuf::internal::kEmptyString) {
    delete m_answer_;
  }
  if (this != default_instance_) {
  }
}

void E_GuildAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildAnswer_descriptor_;
}

const E_GuildAnswer& E_GuildAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildAnswer* E_GuildAnswer::default_instance_ = NULL;

E_GuildAnswer* E_GuildAnswer::New() const {
  return new E_GuildAnswer;
}

void E_GuildAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_answer()) {
      if (m_answer_ != &::google::protobuf::internal::kEmptyString) {
        m_answer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_answer;
        break;
      }

      // optional string m_answer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_answer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_answer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_answer().data(), this->m_answer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_answer = 2;
  if (has_m_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_answer().data(), this->m_answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_answer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_answer = 2;
  if (has_m_answer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_answer().data(), this->m_answer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_answer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_answer = 2;
    if (has_m_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_answer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildAnswer::MergeFrom(const E_GuildAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_answer()) {
      set_m_answer(from.m_answer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildAnswer::CopyFrom(const E_GuildAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildAnswer::IsInitialized() const {

  return true;
}

void E_GuildAnswer::Swap(E_GuildAnswer* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_answer_, other->m_answer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildAnswer_descriptor_;
  metadata.reflection = E_GuildAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildAnswer::kEGuildAnswerListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildAnswer::Sheet_GuildAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildAnswer::InitAsDefaultInstance() {
}

Sheet_GuildAnswer::Sheet_GuildAnswer(const Sheet_GuildAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildAnswer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildAnswer::~Sheet_GuildAnswer() {
  SharedDtor();
}

void Sheet_GuildAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildAnswer_descriptor_;
}

const Sheet_GuildAnswer& Sheet_GuildAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildAnswer* Sheet_GuildAnswer::default_instance_ = NULL;

Sheet_GuildAnswer* Sheet_GuildAnswer::New() const {
  return new Sheet_GuildAnswer;
}

void Sheet_GuildAnswer::Clear() {
  e_guildanswer_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildAnswer E_GuildAnswer_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildAnswer_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildanswer_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildAnswer_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildAnswer E_GuildAnswer_List = 1;
  for (int i = 0; i < this->e_guildanswer_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildanswer_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildAnswer E_GuildAnswer_List = 1;
  for (int i = 0; i < this->e_guildanswer_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildanswer_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildAnswer::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildAnswer E_GuildAnswer_List = 1;
  total_size += 1 * this->e_guildanswer_list_size();
  for (int i = 0; i < this->e_guildanswer_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildanswer_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildAnswer::MergeFrom(const Sheet_GuildAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildanswer_list_.MergeFrom(from.e_guildanswer_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildAnswer::CopyFrom(const Sheet_GuildAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildAnswer::IsInitialized() const {

  return true;
}

void Sheet_GuildAnswer::Swap(Sheet_GuildAnswer* other) {
  if (other != this) {
    e_guildanswer_list_.Swap(&other->e_guildanswer_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildAnswer_descriptor_;
  metadata.reflection = Sheet_GuildAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildRank_reward::kMIdFieldNumber;
const int E_GuildRank_reward::kMTypeFieldNumber;
const int E_GuildRank_reward::kMNoteFieldNumber;
const int E_GuildRank_reward::kMRankMinFieldNumber;
const int E_GuildRank_reward::kMRankMaxFieldNumber;
const int E_GuildRank_reward::kMLvMinFieldNumber;
const int E_GuildRank_reward::kMRewardSFieldNumber;
#endif  // !_MSC_VER

E_GuildRank_reward::E_GuildRank_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildRank_reward::InitAsDefaultInstance() {
}

E_GuildRank_reward::E_GuildRank_reward(const E_GuildRank_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildRank_reward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rankmin_ = 0;
  m_rankmax_ = 0;
  m_lvmin_ = 0;
  m_rewards_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildRank_reward::~E_GuildRank_reward() {
  SharedDtor();
}

void E_GuildRank_reward::SharedDtor() {
  if (m_note_ != &::google::protobuf::internal::kEmptyString) {
    delete m_note_;
  }
  if (this != default_instance_) {
  }
}

void E_GuildRank_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildRank_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildRank_reward_descriptor_;
}

const E_GuildRank_reward& E_GuildRank_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildRank_reward* E_GuildRank_reward::default_instance_ = NULL;

E_GuildRank_reward* E_GuildRank_reward::New() const {
  return new E_GuildRank_reward;
}

void E_GuildRank_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    if (has_m_note()) {
      if (m_note_ != &::google::protobuf::internal::kEmptyString) {
        m_note_->clear();
      }
    }
    m_rankmin_ = 0;
    m_rankmax_ = 0;
    m_lvmin_ = 0;
    m_rewards_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildRank_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_note;
        break;
      }

      // optional string m_note = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_note().data(), this->m_note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rankMin;
        break;
      }

      // optional int32 m_rankMin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankmin_)));
          set_has_m_rankmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rankMax;
        break;
      }

      // optional int32 m_rankMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankmax_)));
          set_has_m_rankmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lvMin;
        break;
      }

      // optional int32 m_lvMin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvmin_)));
          set_has_m_lvmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rewardS;
        break;
      }

      // optional int32 m_rewardS = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewards_)));
          set_has_m_rewards();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildRank_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_note = 3;
  if (has_m_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_note().data(), this->m_note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_note(), output);
  }

  // optional int32 m_rankMin = 4;
  if (has_m_rankmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rankmin(), output);
  }

  // optional int32 m_rankMax = 5;
  if (has_m_rankmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rankmax(), output);
  }

  // optional int32 m_lvMin = 6;
  if (has_m_lvmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lvmin(), output);
  }

  // optional int32 m_rewardS = 7;
  if (has_m_rewards()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rewards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildRank_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_note = 3;
  if (has_m_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_note().data(), this->m_note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_note(), target);
  }

  // optional int32 m_rankMin = 4;
  if (has_m_rankmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rankmin(), target);
  }

  // optional int32 m_rankMax = 5;
  if (has_m_rankmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rankmax(), target);
  }

  // optional int32 m_lvMin = 6;
  if (has_m_lvmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lvmin(), target);
  }

  // optional int32 m_rewardS = 7;
  if (has_m_rewards()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rewards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildRank_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_note = 3;
    if (has_m_note()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_note());
    }

    // optional int32 m_rankMin = 4;
    if (has_m_rankmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankmin());
    }

    // optional int32 m_rankMax = 5;
    if (has_m_rankmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankmax());
    }

    // optional int32 m_lvMin = 6;
    if (has_m_lvmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvmin());
    }

    // optional int32 m_rewardS = 7;
    if (has_m_rewards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildRank_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildRank_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildRank_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildRank_reward::MergeFrom(const E_GuildRank_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_note()) {
      set_m_note(from.m_note());
    }
    if (from.has_m_rankmin()) {
      set_m_rankmin(from.m_rankmin());
    }
    if (from.has_m_rankmax()) {
      set_m_rankmax(from.m_rankmax());
    }
    if (from.has_m_lvmin()) {
      set_m_lvmin(from.m_lvmin());
    }
    if (from.has_m_rewards()) {
      set_m_rewards(from.m_rewards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildRank_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildRank_reward::CopyFrom(const E_GuildRank_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildRank_reward::IsInitialized() const {

  return true;
}

void E_GuildRank_reward::Swap(E_GuildRank_reward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_note_, other->m_note_);
    std::swap(m_rankmin_, other->m_rankmin_);
    std::swap(m_rankmax_, other->m_rankmax_);
    std::swap(m_lvmin_, other->m_lvmin_);
    std::swap(m_rewards_, other->m_rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildRank_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildRank_reward_descriptor_;
  metadata.reflection = E_GuildRank_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildRank_reward::kEGuildRankRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildRank_reward::Sheet_GuildRank_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildRank_reward::InitAsDefaultInstance() {
}

Sheet_GuildRank_reward::Sheet_GuildRank_reward(const Sheet_GuildRank_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildRank_reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildRank_reward::~Sheet_GuildRank_reward() {
  SharedDtor();
}

void Sheet_GuildRank_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildRank_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildRank_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildRank_reward_descriptor_;
}

const Sheet_GuildRank_reward& Sheet_GuildRank_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildRank_reward* Sheet_GuildRank_reward::default_instance_ = NULL;

Sheet_GuildRank_reward* Sheet_GuildRank_reward::New() const {
  return new Sheet_GuildRank_reward;
}

void Sheet_GuildRank_reward::Clear() {
  e_guildrank_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildRank_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildRank_reward E_GuildRank_reward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildRank_reward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildrank_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildRank_reward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildRank_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildRank_reward E_GuildRank_reward_List = 1;
  for (int i = 0; i < this->e_guildrank_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildrank_reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildRank_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildRank_reward E_GuildRank_reward_List = 1;
  for (int i = 0; i < this->e_guildrank_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildrank_reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildRank_reward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildRank_reward E_GuildRank_reward_List = 1;
  total_size += 1 * this->e_guildrank_reward_list_size();
  for (int i = 0; i < this->e_guildrank_reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildrank_reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildRank_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildRank_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildRank_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildRank_reward::MergeFrom(const Sheet_GuildRank_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildrank_reward_list_.MergeFrom(from.e_guildrank_reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildRank_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildRank_reward::CopyFrom(const Sheet_GuildRank_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildRank_reward::IsInitialized() const {

  return true;
}

void Sheet_GuildRank_reward::Swap(Sheet_GuildRank_reward* other) {
  if (other != this) {
    e_guildrank_reward_list_.Swap(&other->e_guildrank_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildRank_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildRank_reward_descriptor_;
  metadata.reflection = Sheet_GuildRank_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildShouhskillRewardDesc::kMNumFieldNumber;
const int E_GuildShouhskillRewardDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_GuildShouhskillRewardDesc::E_GuildShouhskillRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildShouhskillRewardDesc::InitAsDefaultInstance() {
}

E_GuildShouhskillRewardDesc::E_GuildShouhskillRewardDesc(const E_GuildShouhskillRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildShouhskillRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildShouhskillRewardDesc::~E_GuildShouhskillRewardDesc() {
  SharedDtor();
}

void E_GuildShouhskillRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildShouhskillRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildShouhskillRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildShouhskillRewardDesc_descriptor_;
}

const E_GuildShouhskillRewardDesc& E_GuildShouhskillRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildShouhskillRewardDesc* E_GuildShouhskillRewardDesc::default_instance_ = NULL;

E_GuildShouhskillRewardDesc* E_GuildShouhskillRewardDesc::New() const {
  return new E_GuildShouhskillRewardDesc;
}

void E_GuildShouhskillRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildShouhskillRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_Id;
        break;
      }

      // optional int32 m_Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildShouhskillRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_Id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildShouhskillRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_Num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_Id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildShouhskillRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_Num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_Id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildShouhskillRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildShouhskillRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildShouhskillRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildShouhskillRewardDesc::MergeFrom(const E_GuildShouhskillRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildShouhskillRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildShouhskillRewardDesc::CopyFrom(const E_GuildShouhskillRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildShouhskillRewardDesc::IsInitialized() const {

  return true;
}

void E_GuildShouhskillRewardDesc::Swap(E_GuildShouhskillRewardDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildShouhskillRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildShouhskillRewardDesc_descriptor_;
  metadata.reflection = E_GuildShouhskillRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildShouhskill::kMIdFieldNumber;
const int E_GuildShouhskill::kMNameFieldNumber;
const int E_GuildShouhskill::kMCostIdFieldNumber;
const int E_GuildShouhskill::kMCostNumFieldNumber;
const int E_GuildShouhskill::kMSkillidFieldNumber;
const int E_GuildShouhskill::kMTimesFieldNumber;
const int E_GuildShouhskill::kMRewardFieldNumber;
#endif  // !_MSC_VER

E_GuildShouhskill::E_GuildShouhskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildShouhskill::InitAsDefaultInstance() {
}

E_GuildShouhskill::E_GuildShouhskill(const E_GuildShouhskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildShouhskill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_costid_ = 0;
  m_costnum_ = 0;
  m_skillid_ = 0;
  m_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildShouhskill::~E_GuildShouhskill() {
  SharedDtor();
}

void E_GuildShouhskill::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (this != default_instance_) {
  }
}

void E_GuildShouhskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildShouhskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildShouhskill_descriptor_;
}

const E_GuildShouhskill& E_GuildShouhskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildShouhskill* E_GuildShouhskill::default_instance_ = NULL;

E_GuildShouhskill* E_GuildShouhskill::New() const {
  return new E_GuildShouhskill;
}

void E_GuildShouhskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_costid_ = 0;
    m_costnum_ = 0;
    m_skillid_ = 0;
    m_times_ = 0;
  }
  m_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildShouhskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_costId;
        break;
      }

      // optional int32 m_costId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costid_)));
          set_has_m_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_costNum;
        break;
      }

      // optional int32 m_costNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_reward;
        break;
      }

      // repeated .proto_ff.E_GuildShouhskillRewardDesc m_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildShouhskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_costId = 3;
  if (has_m_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_costid(), output);
  }

  // optional int32 m_costNum = 4;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_costnum(), output);
  }

  // optional int32 m_skillid = 5;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_skillid(), output);
  }

  // optional int32 m_times = 6;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_times(), output);
  }

  // repeated .proto_ff.E_GuildShouhskillRewardDesc m_reward = 7;
  for (int i = 0; i < this->m_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->m_reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildShouhskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_costId = 3;
  if (has_m_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_costid(), target);
  }

  // optional int32 m_costNum = 4;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_costnum(), target);
  }

  // optional int32 m_skillid = 5;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_skillid(), target);
  }

  // optional int32 m_times = 6;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_times(), target);
  }

  // repeated .proto_ff.E_GuildShouhskillRewardDesc m_reward = 7;
  for (int i = 0; i < this->m_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->m_reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildShouhskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_costId = 3;
    if (has_m_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costid());
    }

    // optional int32 m_costNum = 4;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

    // optional int32 m_skillid = 5;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_times = 6;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

  }
  // repeated .proto_ff.E_GuildShouhskillRewardDesc m_reward = 7;
  total_size += 1 * this->m_reward_size();
  for (int i = 0; i < this->m_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildShouhskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildShouhskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildShouhskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildShouhskill::MergeFrom(const E_GuildShouhskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_reward_.MergeFrom(from.m_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_costid()) {
      set_m_costid(from.m_costid());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildShouhskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildShouhskill::CopyFrom(const E_GuildShouhskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildShouhskill::IsInitialized() const {

  return true;
}

void E_GuildShouhskill::Swap(E_GuildShouhskill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_costid_, other->m_costid_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_times_, other->m_times_);
    m_reward_.Swap(&other->m_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildShouhskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildShouhskill_descriptor_;
  metadata.reflection = E_GuildShouhskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildShouhskill::kEGuildShouhskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildShouhskill::Sheet_GuildShouhskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildShouhskill::InitAsDefaultInstance() {
}

Sheet_GuildShouhskill::Sheet_GuildShouhskill(const Sheet_GuildShouhskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildShouhskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildShouhskill::~Sheet_GuildShouhskill() {
  SharedDtor();
}

void Sheet_GuildShouhskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildShouhskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildShouhskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildShouhskill_descriptor_;
}

const Sheet_GuildShouhskill& Sheet_GuildShouhskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildShouhskill* Sheet_GuildShouhskill::default_instance_ = NULL;

Sheet_GuildShouhskill* Sheet_GuildShouhskill::New() const {
  return new Sheet_GuildShouhskill;
}

void Sheet_GuildShouhskill::Clear() {
  e_guildshouhskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildShouhskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildShouhskill E_GuildShouhskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildShouhskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildshouhskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildShouhskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildShouhskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildShouhskill E_GuildShouhskill_List = 1;
  for (int i = 0; i < this->e_guildshouhskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildshouhskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildShouhskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildShouhskill E_GuildShouhskill_List = 1;
  for (int i = 0; i < this->e_guildshouhskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildshouhskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildShouhskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildShouhskill E_GuildShouhskill_List = 1;
  total_size += 1 * this->e_guildshouhskill_list_size();
  for (int i = 0; i < this->e_guildshouhskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildshouhskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildShouhskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildShouhskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildShouhskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildShouhskill::MergeFrom(const Sheet_GuildShouhskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildshouhskill_list_.MergeFrom(from.e_guildshouhskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildShouhskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildShouhskill::CopyFrom(const Sheet_GuildShouhskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildShouhskill::IsInitialized() const {

  return true;
}

void Sheet_GuildShouhskill::Swap(Sheet_GuildShouhskill* other) {
  if (other != this) {
    e_guildshouhskill_list_.Swap(&other->e_guildshouhskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildShouhskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildShouhskill_descriptor_;
  metadata.reflection = Sheet_GuildShouhskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildGwreward::kMIdFieldNumber;
const int E_GuildGwreward::kMTypeFieldNumber;
const int E_GuildGwreward::kMRewardFieldNumber;
const int E_GuildGwreward::kMCrossrewardFieldNumber;
const int E_GuildGwreward::kMArgFieldNumber;
#endif  // !_MSC_VER

E_GuildGwreward::E_GuildGwreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildGwreward::InitAsDefaultInstance() {
}

E_GuildGwreward::E_GuildGwreward(const E_GuildGwreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildGwreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_reward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_crossreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildGwreward::~E_GuildGwreward() {
  SharedDtor();
}

void E_GuildGwreward::SharedDtor() {
  if (m_reward_ != &::google::protobuf::internal::kEmptyString) {
    delete m_reward_;
  }
  if (m_crossreward_ != &::google::protobuf::internal::kEmptyString) {
    delete m_crossreward_;
  }
  if (this != default_instance_) {
  }
}

void E_GuildGwreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildGwreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildGwreward_descriptor_;
}

const E_GuildGwreward& E_GuildGwreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildGwreward* E_GuildGwreward::default_instance_ = NULL;

E_GuildGwreward* E_GuildGwreward::New() const {
  return new E_GuildGwreward;
}

void E_GuildGwreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    if (has_m_reward()) {
      if (m_reward_ != &::google::protobuf::internal::kEmptyString) {
        m_reward_->clear();
      }
    }
    if (has_m_crossreward()) {
      if (m_crossreward_ != &::google::protobuf::internal::kEmptyString) {
        m_crossreward_->clear();
      }
    }
  }
  m_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildGwreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_reward;
        break;
      }

      // optional string m_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_reward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_reward().data(), this->m_reward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_Crossreward;
        break;
      }

      // optional string m_Crossreward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_Crossreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_crossreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_crossreward().data(), this->m_crossreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_arg;
        break;
      }

      // repeated int32 m_arg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_m_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildGwreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional string m_reward = 3;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reward().data(), this->m_reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_reward(), output);
  }

  // optional string m_Crossreward = 4;
  if (has_m_crossreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_crossreward().data(), this->m_crossreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_crossreward(), output);
  }

  // repeated int32 m_arg = 5;
  for (int i = 0; i < this->m_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->m_arg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildGwreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional string m_reward = 3;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_reward().data(), this->m_reward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_reward(), target);
  }

  // optional string m_Crossreward = 4;
  if (has_m_crossreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_crossreward().data(), this->m_crossreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_crossreward(), target);
  }

  // repeated int32 m_arg = 5;
  for (int i = 0; i < this->m_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->m_arg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildGwreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_reward = 3;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_reward());
    }

    // optional string m_Crossreward = 4;
    if (has_m_crossreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_crossreward());
    }

  }
  // repeated int32 m_arg = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_arg(i));
    }
    total_size += 1 * this->m_arg_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildGwreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildGwreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildGwreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildGwreward::MergeFrom(const E_GuildGwreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_arg_.MergeFrom(from.m_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_crossreward()) {
      set_m_crossreward(from.m_crossreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildGwreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildGwreward::CopyFrom(const E_GuildGwreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildGwreward::IsInitialized() const {

  return true;
}

void E_GuildGwreward::Swap(E_GuildGwreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_crossreward_, other->m_crossreward_);
    m_arg_.Swap(&other->m_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildGwreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildGwreward_descriptor_;
  metadata.reflection = E_GuildGwreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildGwreward::kEGuildGwrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildGwreward::Sheet_GuildGwreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildGwreward::InitAsDefaultInstance() {
}

Sheet_GuildGwreward::Sheet_GuildGwreward(const Sheet_GuildGwreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildGwreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildGwreward::~Sheet_GuildGwreward() {
  SharedDtor();
}

void Sheet_GuildGwreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildGwreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildGwreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildGwreward_descriptor_;
}

const Sheet_GuildGwreward& Sheet_GuildGwreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildGwreward* Sheet_GuildGwreward::default_instance_ = NULL;

Sheet_GuildGwreward* Sheet_GuildGwreward::New() const {
  return new Sheet_GuildGwreward;
}

void Sheet_GuildGwreward::Clear() {
  e_guildgwreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildGwreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildGwreward E_GuildGwreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildGwreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildgwreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildGwreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildGwreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildGwreward E_GuildGwreward_List = 1;
  for (int i = 0; i < this->e_guildgwreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildgwreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildGwreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildGwreward E_GuildGwreward_List = 1;
  for (int i = 0; i < this->e_guildgwreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildgwreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildGwreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildGwreward E_GuildGwreward_List = 1;
  total_size += 1 * this->e_guildgwreward_list_size();
  for (int i = 0; i < this->e_guildgwreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildgwreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildGwreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildGwreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildGwreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildGwreward::MergeFrom(const Sheet_GuildGwreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildgwreward_list_.MergeFrom(from.e_guildgwreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildGwreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildGwreward::CopyFrom(const Sheet_GuildGwreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildGwreward::IsInitialized() const {

  return true;
}

void Sheet_GuildGwreward::Swap(Sheet_GuildGwreward* other) {
  if (other != this) {
    e_guildgwreward_list_.Swap(&other->e_guildgwreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildGwreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildGwreward_descriptor_;
  metadata.reflection = Sheet_GuildGwreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildGwwinstreak::kMIdFieldNumber;
const int E_GuildGwwinstreak::kMWinStreakFieldNumber;
const int E_GuildGwwinstreak::kMWinRewardFieldNumber;
const int E_GuildGwwinstreak::kMEndRewardFieldNumber;
const int E_GuildGwwinstreak::kMChallengeSkillFieldNumber;
#endif  // !_MSC_VER

E_GuildGwwinstreak::E_GuildGwwinstreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildGwwinstreak::InitAsDefaultInstance() {
}

E_GuildGwwinstreak::E_GuildGwwinstreak(const E_GuildGwwinstreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildGwwinstreak::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_winstreak_ = 0;
  m_winreward_ = 0;
  m_endreward_ = 0;
  m_challengeskill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildGwwinstreak::~E_GuildGwwinstreak() {
  SharedDtor();
}

void E_GuildGwwinstreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildGwwinstreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildGwwinstreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildGwwinstreak_descriptor_;
}

const E_GuildGwwinstreak& E_GuildGwwinstreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildGwwinstreak* E_GuildGwwinstreak::default_instance_ = NULL;

E_GuildGwwinstreak* E_GuildGwwinstreak::New() const {
  return new E_GuildGwwinstreak;
}

void E_GuildGwwinstreak::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_winstreak_ = 0;
    m_winreward_ = 0;
    m_endreward_ = 0;
    m_challengeskill_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildGwwinstreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_winStreak;
        break;
      }

      // optional int32 m_winStreak = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winStreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winstreak_)));
          set_has_m_winstreak();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_winReward;
        break;
      }

      // optional int32 m_winReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_winReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_winreward_)));
          set_has_m_winreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_endReward;
        break;
      }

      // optional int32 m_endReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endreward_)));
          set_has_m_endreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_challengeSkill;
        break;
      }

      // optional int32 m_challengeSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_challengeSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_challengeskill_)));
          set_has_m_challengeskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildGwwinstreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_winStreak = 2;
  if (has_m_winstreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_winstreak(), output);
  }

  // optional int32 m_winReward = 3;
  if (has_m_winreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_winreward(), output);
  }

  // optional int32 m_endReward = 4;
  if (has_m_endreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_endreward(), output);
  }

  // optional int32 m_challengeSkill = 5;
  if (has_m_challengeskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_challengeskill(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildGwwinstreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_winStreak = 2;
  if (has_m_winstreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_winstreak(), target);
  }

  // optional int32 m_winReward = 3;
  if (has_m_winreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_winreward(), target);
  }

  // optional int32 m_endReward = 4;
  if (has_m_endreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_endreward(), target);
  }

  // optional int32 m_challengeSkill = 5;
  if (has_m_challengeskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_challengeskill(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildGwwinstreak::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_winStreak = 2;
    if (has_m_winstreak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winstreak());
    }

    // optional int32 m_winReward = 3;
    if (has_m_winreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_winreward());
    }

    // optional int32 m_endReward = 4;
    if (has_m_endreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endreward());
    }

    // optional int32 m_challengeSkill = 5;
    if (has_m_challengeskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_challengeskill());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildGwwinstreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildGwwinstreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildGwwinstreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildGwwinstreak::MergeFrom(const E_GuildGwwinstreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_winstreak()) {
      set_m_winstreak(from.m_winstreak());
    }
    if (from.has_m_winreward()) {
      set_m_winreward(from.m_winreward());
    }
    if (from.has_m_endreward()) {
      set_m_endreward(from.m_endreward());
    }
    if (from.has_m_challengeskill()) {
      set_m_challengeskill(from.m_challengeskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildGwwinstreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildGwwinstreak::CopyFrom(const E_GuildGwwinstreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildGwwinstreak::IsInitialized() const {

  return true;
}

void E_GuildGwwinstreak::Swap(E_GuildGwwinstreak* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_winstreak_, other->m_winstreak_);
    std::swap(m_winreward_, other->m_winreward_);
    std::swap(m_endreward_, other->m_endreward_);
    std::swap(m_challengeskill_, other->m_challengeskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildGwwinstreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildGwwinstreak_descriptor_;
  metadata.reflection = E_GuildGwwinstreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildGwwinstreak::kEGuildGwwinstreakListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildGwwinstreak::Sheet_GuildGwwinstreak()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildGwwinstreak::InitAsDefaultInstance() {
}

Sheet_GuildGwwinstreak::Sheet_GuildGwwinstreak(const Sheet_GuildGwwinstreak& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildGwwinstreak::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildGwwinstreak::~Sheet_GuildGwwinstreak() {
  SharedDtor();
}

void Sheet_GuildGwwinstreak::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildGwwinstreak::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildGwwinstreak::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildGwwinstreak_descriptor_;
}

const Sheet_GuildGwwinstreak& Sheet_GuildGwwinstreak::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildGwwinstreak* Sheet_GuildGwwinstreak::default_instance_ = NULL;

Sheet_GuildGwwinstreak* Sheet_GuildGwwinstreak::New() const {
  return new Sheet_GuildGwwinstreak;
}

void Sheet_GuildGwwinstreak::Clear() {
  e_guildgwwinstreak_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildGwwinstreak::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildGwwinstreak E_GuildGwwinstreak_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildGwwinstreak_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildgwwinstreak_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildGwwinstreak_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildGwwinstreak::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildGwwinstreak E_GuildGwwinstreak_List = 1;
  for (int i = 0; i < this->e_guildgwwinstreak_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildgwwinstreak_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildGwwinstreak::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildGwwinstreak E_GuildGwwinstreak_List = 1;
  for (int i = 0; i < this->e_guildgwwinstreak_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildgwwinstreak_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildGwwinstreak::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildGwwinstreak E_GuildGwwinstreak_List = 1;
  total_size += 1 * this->e_guildgwwinstreak_list_size();
  for (int i = 0; i < this->e_guildgwwinstreak_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildgwwinstreak_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildGwwinstreak::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildGwwinstreak* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildGwwinstreak*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildGwwinstreak::MergeFrom(const Sheet_GuildGwwinstreak& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildgwwinstreak_list_.MergeFrom(from.e_guildgwwinstreak_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildGwwinstreak::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildGwwinstreak::CopyFrom(const Sheet_GuildGwwinstreak& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildGwwinstreak::IsInitialized() const {

  return true;
}

void Sheet_GuildGwwinstreak::Swap(Sheet_GuildGwwinstreak* other) {
  if (other != this) {
    e_guildgwwinstreak_list_.Swap(&other->e_guildgwwinstreak_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildGwwinstreak::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildGwwinstreak_descriptor_;
  metadata.reflection = Sheet_GuildGwwinstreak_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildTtower::kMIdFieldNumber;
const int E_GuildTtower::kMDupidFieldNumber;
const int E_GuildTtower::kMBreakBoxFieldNumber;
const int E_GuildTtower::kMClearBoxFieldNumber;
#endif  // !_MSC_VER

E_GuildTtower::E_GuildTtower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildTtower::InitAsDefaultInstance() {
}

E_GuildTtower::E_GuildTtower(const E_GuildTtower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildTtower::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_dupid_ = 0;
  m_breakbox_ = 0;
  m_clearbox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildTtower::~E_GuildTtower() {
  SharedDtor();
}

void E_GuildTtower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildTtower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildTtower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildTtower_descriptor_;
}

const E_GuildTtower& E_GuildTtower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildTtower* E_GuildTtower::default_instance_ = NULL;

E_GuildTtower* E_GuildTtower::New() const {
  return new E_GuildTtower;
}

void E_GuildTtower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_dupid_ = 0;
    m_breakbox_ = 0;
    m_clearbox_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildTtower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_dupid;
        break;
      }

      // optional int32 m_dupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dupid_)));
          set_has_m_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_breakBox;
        break;
      }

      // optional int32 m_breakBox = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_breakBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_breakbox_)));
          set_has_m_breakbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_clearBox;
        break;
      }

      // optional int32 m_clearBox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_clearBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_clearbox_)));
          set_has_m_clearbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildTtower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_dupid = 2;
  if (has_m_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_dupid(), output);
  }

  // optional int32 m_breakBox = 3;
  if (has_m_breakbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_breakbox(), output);
  }

  // optional int32 m_clearBox = 4;
  if (has_m_clearbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_clearbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildTtower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_dupid = 2;
  if (has_m_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_dupid(), target);
  }

  // optional int32 m_breakBox = 3;
  if (has_m_breakbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_breakbox(), target);
  }

  // optional int32 m_clearBox = 4;
  if (has_m_clearbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_clearbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildTtower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_dupid = 2;
    if (has_m_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dupid());
    }

    // optional int32 m_breakBox = 3;
    if (has_m_breakbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_breakbox());
    }

    // optional int32 m_clearBox = 4;
    if (has_m_clearbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_clearbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildTtower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildTtower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildTtower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildTtower::MergeFrom(const E_GuildTtower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_dupid()) {
      set_m_dupid(from.m_dupid());
    }
    if (from.has_m_breakbox()) {
      set_m_breakbox(from.m_breakbox());
    }
    if (from.has_m_clearbox()) {
      set_m_clearbox(from.m_clearbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildTtower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildTtower::CopyFrom(const E_GuildTtower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildTtower::IsInitialized() const {

  return true;
}

void E_GuildTtower::Swap(E_GuildTtower* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_dupid_, other->m_dupid_);
    std::swap(m_breakbox_, other->m_breakbox_);
    std::swap(m_clearbox_, other->m_clearbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildTtower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildTtower_descriptor_;
  metadata.reflection = E_GuildTtower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildTtower::kEGuildTtowerListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildTtower::Sheet_GuildTtower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildTtower::InitAsDefaultInstance() {
}

Sheet_GuildTtower::Sheet_GuildTtower(const Sheet_GuildTtower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildTtower::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildTtower::~Sheet_GuildTtower() {
  SharedDtor();
}

void Sheet_GuildTtower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildTtower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildTtower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildTtower_descriptor_;
}

const Sheet_GuildTtower& Sheet_GuildTtower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildTtower* Sheet_GuildTtower::default_instance_ = NULL;

Sheet_GuildTtower* Sheet_GuildTtower::New() const {
  return new Sheet_GuildTtower;
}

void Sheet_GuildTtower::Clear() {
  e_guildttower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildTtower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildTtower E_GuildTtower_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildTtower_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildttower_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildTtower_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildTtower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildTtower E_GuildTtower_List = 1;
  for (int i = 0; i < this->e_guildttower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildttower_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildTtower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildTtower E_GuildTtower_List = 1;
  for (int i = 0; i < this->e_guildttower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildttower_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildTtower::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildTtower E_GuildTtower_List = 1;
  total_size += 1 * this->e_guildttower_list_size();
  for (int i = 0; i < this->e_guildttower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildttower_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildTtower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildTtower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildTtower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildTtower::MergeFrom(const Sheet_GuildTtower& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildttower_list_.MergeFrom(from.e_guildttower_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildTtower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildTtower::CopyFrom(const Sheet_GuildTtower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildTtower::IsInitialized() const {

  return true;
}

void Sheet_GuildTtower::Swap(Sheet_GuildTtower* other) {
  if (other != this) {
    e_guildttower_list_.Swap(&other->e_guildttower_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildTtower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildTtower_descriptor_;
  metadata.reflection = Sheet_GuildTtower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildTtowerdevelopAttributeDesc::kMValueFieldNumber;
const int E_GuildTtowerdevelopAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_GuildTtowerdevelopAttributeDesc::E_GuildTtowerdevelopAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildTtowerdevelopAttributeDesc::InitAsDefaultInstance() {
}

E_GuildTtowerdevelopAttributeDesc::E_GuildTtowerdevelopAttributeDesc(const E_GuildTtowerdevelopAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildTtowerdevelopAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildTtowerdevelopAttributeDesc::~E_GuildTtowerdevelopAttributeDesc() {
  SharedDtor();
}

void E_GuildTtowerdevelopAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildTtowerdevelopAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildTtowerdevelopAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildTtowerdevelopAttributeDesc_descriptor_;
}

const E_GuildTtowerdevelopAttributeDesc& E_GuildTtowerdevelopAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildTtowerdevelopAttributeDesc* E_GuildTtowerdevelopAttributeDesc::default_instance_ = NULL;

E_GuildTtowerdevelopAttributeDesc* E_GuildTtowerdevelopAttributeDesc::New() const {
  return new E_GuildTtowerdevelopAttributeDesc;
}

void E_GuildTtowerdevelopAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildTtowerdevelopAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildTtowerdevelopAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildTtowerdevelopAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildTtowerdevelopAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildTtowerdevelopAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildTtowerdevelopAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildTtowerdevelopAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildTtowerdevelopAttributeDesc::MergeFrom(const E_GuildTtowerdevelopAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildTtowerdevelopAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildTtowerdevelopAttributeDesc::CopyFrom(const E_GuildTtowerdevelopAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildTtowerdevelopAttributeDesc::IsInitialized() const {

  return true;
}

void E_GuildTtowerdevelopAttributeDesc::Swap(E_GuildTtowerdevelopAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildTtowerdevelopAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildTtowerdevelopAttributeDesc_descriptor_;
  metadata.reflection = E_GuildTtowerdevelopAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildTtowerdevelop::kMIdFieldNumber;
const int E_GuildTtowerdevelop::kMTypeFieldNumber;
const int E_GuildTtowerdevelop::kMDataGroupFieldNumber;
const int E_GuildTtowerdevelop::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_GuildTtowerdevelop::E_GuildTtowerdevelop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildTtowerdevelop::InitAsDefaultInstance() {
}

E_GuildTtowerdevelop::E_GuildTtowerdevelop(const E_GuildTtowerdevelop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildTtowerdevelop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_datagroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildTtowerdevelop::~E_GuildTtowerdevelop() {
  SharedDtor();
}

void E_GuildTtowerdevelop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildTtowerdevelop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildTtowerdevelop_descriptor_;
}

const E_GuildTtowerdevelop& E_GuildTtowerdevelop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildTtowerdevelop* E_GuildTtowerdevelop::default_instance_ = NULL;

E_GuildTtowerdevelop* E_GuildTtowerdevelop::New() const {
  return new E_GuildTtowerdevelop;
}

void E_GuildTtowerdevelop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_datagroup_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildTtowerdevelop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_dataGroup;
        break;
      }

      // optional int32 m_dataGroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dataGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_datagroup_)));
          set_has_m_datagroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_GuildTtowerdevelopAttributeDesc m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildTtowerdevelop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_dataGroup = 3;
  if (has_m_datagroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_datagroup(), output);
  }

  // repeated .proto_ff.E_GuildTtowerdevelopAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildTtowerdevelop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_dataGroup = 3;
  if (has_m_datagroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_datagroup(), target);
  }

  // repeated .proto_ff.E_GuildTtowerdevelopAttributeDesc m_attribute = 4;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildTtowerdevelop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_dataGroup = 3;
    if (has_m_datagroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_datagroup());
    }

  }
  // repeated .proto_ff.E_GuildTtowerdevelopAttributeDesc m_attribute = 4;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildTtowerdevelop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildTtowerdevelop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildTtowerdevelop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildTtowerdevelop::MergeFrom(const E_GuildTtowerdevelop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_datagroup()) {
      set_m_datagroup(from.m_datagroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildTtowerdevelop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildTtowerdevelop::CopyFrom(const E_GuildTtowerdevelop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildTtowerdevelop::IsInitialized() const {

  return true;
}

void E_GuildTtowerdevelop::Swap(E_GuildTtowerdevelop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_datagroup_, other->m_datagroup_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildTtowerdevelop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildTtowerdevelop_descriptor_;
  metadata.reflection = E_GuildTtowerdevelop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildTtowerdevelop::kEGuildTtowerdevelopListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildTtowerdevelop::Sheet_GuildTtowerdevelop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildTtowerdevelop::InitAsDefaultInstance() {
}

Sheet_GuildTtowerdevelop::Sheet_GuildTtowerdevelop(const Sheet_GuildTtowerdevelop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildTtowerdevelop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildTtowerdevelop::~Sheet_GuildTtowerdevelop() {
  SharedDtor();
}

void Sheet_GuildTtowerdevelop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildTtowerdevelop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildTtowerdevelop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildTtowerdevelop_descriptor_;
}

const Sheet_GuildTtowerdevelop& Sheet_GuildTtowerdevelop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildTtowerdevelop* Sheet_GuildTtowerdevelop::default_instance_ = NULL;

Sheet_GuildTtowerdevelop* Sheet_GuildTtowerdevelop::New() const {
  return new Sheet_GuildTtowerdevelop;
}

void Sheet_GuildTtowerdevelop::Clear() {
  e_guildttowerdevelop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildTtowerdevelop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildTtowerdevelop E_GuildTtowerdevelop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildTtowerdevelop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildttowerdevelop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildTtowerdevelop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildTtowerdevelop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildTtowerdevelop E_GuildTtowerdevelop_List = 1;
  for (int i = 0; i < this->e_guildttowerdevelop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildttowerdevelop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildTtowerdevelop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildTtowerdevelop E_GuildTtowerdevelop_List = 1;
  for (int i = 0; i < this->e_guildttowerdevelop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildttowerdevelop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildTtowerdevelop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildTtowerdevelop E_GuildTtowerdevelop_List = 1;
  total_size += 1 * this->e_guildttowerdevelop_list_size();
  for (int i = 0; i < this->e_guildttowerdevelop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildttowerdevelop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildTtowerdevelop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildTtowerdevelop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildTtowerdevelop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildTtowerdevelop::MergeFrom(const Sheet_GuildTtowerdevelop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildttowerdevelop_list_.MergeFrom(from.e_guildttowerdevelop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildTtowerdevelop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildTtowerdevelop::CopyFrom(const Sheet_GuildTtowerdevelop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildTtowerdevelop::IsInitialized() const {

  return true;
}

void Sheet_GuildTtowerdevelop::Swap(Sheet_GuildTtowerdevelop* other) {
  if (other != this) {
    e_guildttowerdevelop_list_.Swap(&other->e_guildttowerdevelop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildTtowerdevelop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildTtowerdevelop_descriptor_;
  metadata.reflection = Sheet_GuildTtowerdevelop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildTtowerdevelop_dataAttributeDesc::kMValueFieldNumber;
const int E_GuildTtowerdevelop_dataAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_GuildTtowerdevelop_dataAttributeDesc::E_GuildTtowerdevelop_dataAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildTtowerdevelop_dataAttributeDesc::InitAsDefaultInstance() {
}

E_GuildTtowerdevelop_dataAttributeDesc::E_GuildTtowerdevelop_dataAttributeDesc(const E_GuildTtowerdevelop_dataAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildTtowerdevelop_dataAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildTtowerdevelop_dataAttributeDesc::~E_GuildTtowerdevelop_dataAttributeDesc() {
  SharedDtor();
}

void E_GuildTtowerdevelop_dataAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildTtowerdevelop_dataAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop_dataAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildTtowerdevelop_dataAttributeDesc_descriptor_;
}

const E_GuildTtowerdevelop_dataAttributeDesc& E_GuildTtowerdevelop_dataAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildTtowerdevelop_dataAttributeDesc* E_GuildTtowerdevelop_dataAttributeDesc::default_instance_ = NULL;

E_GuildTtowerdevelop_dataAttributeDesc* E_GuildTtowerdevelop_dataAttributeDesc::New() const {
  return new E_GuildTtowerdevelop_dataAttributeDesc;
}

void E_GuildTtowerdevelop_dataAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildTtowerdevelop_dataAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildTtowerdevelop_dataAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildTtowerdevelop_dataAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildTtowerdevelop_dataAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildTtowerdevelop_dataAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildTtowerdevelop_dataAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildTtowerdevelop_dataAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildTtowerdevelop_dataAttributeDesc::MergeFrom(const E_GuildTtowerdevelop_dataAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildTtowerdevelop_dataAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildTtowerdevelop_dataAttributeDesc::CopyFrom(const E_GuildTtowerdevelop_dataAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildTtowerdevelop_dataAttributeDesc::IsInitialized() const {

  return true;
}

void E_GuildTtowerdevelop_dataAttributeDesc::Swap(E_GuildTtowerdevelop_dataAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildTtowerdevelop_dataAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildTtowerdevelop_dataAttributeDesc_descriptor_;
  metadata.reflection = E_GuildTtowerdevelop_dataAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GuildTtowerdevelop_data::kMIdFieldNumber;
const int E_GuildTtowerdevelop_data::kMGroupIDFieldNumber;
const int E_GuildTtowerdevelop_data::kMCostItemFieldNumber;
const int E_GuildTtowerdevelop_data::kMCostnumFieldNumber;
const int E_GuildTtowerdevelop_data::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_GuildTtowerdevelop_data::E_GuildTtowerdevelop_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GuildTtowerdevelop_data::InitAsDefaultInstance() {
}

E_GuildTtowerdevelop_data::E_GuildTtowerdevelop_data(const E_GuildTtowerdevelop_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GuildTtowerdevelop_data::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_costitem_ = 0;
  m_costnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GuildTtowerdevelop_data::~E_GuildTtowerdevelop_data() {
  SharedDtor();
}

void E_GuildTtowerdevelop_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GuildTtowerdevelop_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GuildTtowerdevelop_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GuildTtowerdevelop_data_descriptor_;
}

const E_GuildTtowerdevelop_data& E_GuildTtowerdevelop_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

E_GuildTtowerdevelop_data* E_GuildTtowerdevelop_data::default_instance_ = NULL;

E_GuildTtowerdevelop_data* E_GuildTtowerdevelop_data::New() const {
  return new E_GuildTtowerdevelop_data;
}

void E_GuildTtowerdevelop_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_costitem_ = 0;
    m_costnum_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GuildTtowerdevelop_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_costItem;
        break;
      }

      // optional int32 m_costItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_costnum;
        break;
      }

      // optional int32 m_costnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnum_)));
          set_has_m_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_GuildTtowerdevelop_dataAttributeDesc m_attribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GuildTtowerdevelop_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_costItem = 3;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_costitem(), output);
  }

  // optional int32 m_costnum = 4;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_costnum(), output);
  }

  // repeated .proto_ff.E_GuildTtowerdevelop_dataAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GuildTtowerdevelop_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_costItem = 3;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_costitem(), target);
  }

  // optional int32 m_costnum = 4;
  if (has_m_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_costnum(), target);
  }

  // repeated .proto_ff.E_GuildTtowerdevelop_dataAttributeDesc m_attribute = 5;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GuildTtowerdevelop_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_costItem = 3;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costitem());
    }

    // optional int32 m_costnum = 4;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnum());
    }

  }
  // repeated .proto_ff.E_GuildTtowerdevelop_dataAttributeDesc m_attribute = 5;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GuildTtowerdevelop_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GuildTtowerdevelop_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GuildTtowerdevelop_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GuildTtowerdevelop_data::MergeFrom(const E_GuildTtowerdevelop_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GuildTtowerdevelop_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GuildTtowerdevelop_data::CopyFrom(const E_GuildTtowerdevelop_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GuildTtowerdevelop_data::IsInitialized() const {

  return true;
}

void E_GuildTtowerdevelop_data::Swap(E_GuildTtowerdevelop_data* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_costnum_, other->m_costnum_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GuildTtowerdevelop_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GuildTtowerdevelop_data_descriptor_;
  metadata.reflection = E_GuildTtowerdevelop_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GuildTtowerdevelop_data::kEGuildTtowerdevelopDataListFieldNumber;
#endif  // !_MSC_VER

Sheet_GuildTtowerdevelop_data::Sheet_GuildTtowerdevelop_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GuildTtowerdevelop_data::InitAsDefaultInstance() {
}

Sheet_GuildTtowerdevelop_data::Sheet_GuildTtowerdevelop_data(const Sheet_GuildTtowerdevelop_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GuildTtowerdevelop_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GuildTtowerdevelop_data::~Sheet_GuildTtowerdevelop_data() {
  SharedDtor();
}

void Sheet_GuildTtowerdevelop_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GuildTtowerdevelop_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GuildTtowerdevelop_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GuildTtowerdevelop_data_descriptor_;
}

const Sheet_GuildTtowerdevelop_data& Sheet_GuildTtowerdevelop_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGuild_2eproto();
  return *default_instance_;
}

Sheet_GuildTtowerdevelop_data* Sheet_GuildTtowerdevelop_data::default_instance_ = NULL;

Sheet_GuildTtowerdevelop_data* Sheet_GuildTtowerdevelop_data::New() const {
  return new Sheet_GuildTtowerdevelop_data;
}

void Sheet_GuildTtowerdevelop_data::Clear() {
  e_guildttowerdevelop_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GuildTtowerdevelop_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GuildTtowerdevelop_data E_GuildTtowerdevelop_data_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GuildTtowerdevelop_data_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_guildttowerdevelop_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GuildTtowerdevelop_data_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GuildTtowerdevelop_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GuildTtowerdevelop_data E_GuildTtowerdevelop_data_List = 1;
  for (int i = 0; i < this->e_guildttowerdevelop_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_guildttowerdevelop_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GuildTtowerdevelop_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GuildTtowerdevelop_data E_GuildTtowerdevelop_data_List = 1;
  for (int i = 0; i < this->e_guildttowerdevelop_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_guildttowerdevelop_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GuildTtowerdevelop_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GuildTtowerdevelop_data E_GuildTtowerdevelop_data_List = 1;
  total_size += 1 * this->e_guildttowerdevelop_data_list_size();
  for (int i = 0; i < this->e_guildttowerdevelop_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_guildttowerdevelop_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GuildTtowerdevelop_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GuildTtowerdevelop_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GuildTtowerdevelop_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GuildTtowerdevelop_data::MergeFrom(const Sheet_GuildTtowerdevelop_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_guildttowerdevelop_data_list_.MergeFrom(from.e_guildttowerdevelop_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GuildTtowerdevelop_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GuildTtowerdevelop_data::CopyFrom(const Sheet_GuildTtowerdevelop_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GuildTtowerdevelop_data::IsInitialized() const {

  return true;
}

void Sheet_GuildTtowerdevelop_data::Swap(Sheet_GuildTtowerdevelop_data* other) {
  if (other != this) {
    e_guildttowerdevelop_data_list_.Swap(&other->e_guildttowerdevelop_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GuildTtowerdevelop_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GuildTtowerdevelop_data_descriptor_;
  metadata.reflection = Sheet_GuildTtowerdevelop_data_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
