// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Red.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Red.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RedFetchProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFetchProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedFetchListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFetchListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDetailProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDetailProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedSimpleListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedSimpleListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedWaitProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedWaitProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedWaitListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedWaitListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedNewProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedNewProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedNewListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedNewListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_LoginSyncInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_LoginSyncInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_UpdateRoleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_UpdateRoleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_UpdateRoleWaitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_UpdateRoleWaitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_NewRedNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_NewRedNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_SimpleListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_SimpleListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_SimpleListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_SimpleListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_DetailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_DetailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_DetailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_DetailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_FetchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_FetchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_FetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_FetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_SendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_SendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_SendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_SendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_FetchExtraReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_FetchExtraReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_FetchExtraRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_FetchExtraRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_UpdateSendListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_UpdateSendListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_LCSendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_LCSendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_CLFetchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_CLFetchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_CLSendFailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_CLSendFailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_LCRechargeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_LCRechargeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Red_CLTriggerRedRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Red_CLTriggerRedRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Red_2eproto() {
  protobuf_AddDesc_Red_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Red.proto");
  GOOGLE_CHECK(file != NULL);
  RedFetchProto_descriptor_ = file->message_type(0);
  static const int RedFetchProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, head_),
  };
  RedFetchProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedFetchProto_descriptor_,
      RedFetchProto::default_instance_,
      RedFetchProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedFetchProto));
  RedFetchListProto_descriptor_ = file->message_type(1);
  static const int RedFetchListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListProto, info_),
  };
  RedFetchListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedFetchListProto_descriptor_,
      RedFetchListProto::default_instance_,
      RedFetchListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedFetchListProto));
  RedDetailProto_descriptor_ = file->message_type(2);
  static const int RedDetailProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, sendcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, head_),
  };
  RedDetailProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDetailProto_descriptor_,
      RedDetailProto::default_instance_,
      RedDetailProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDetailProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDetailProto));
  RedListProto_descriptor_ = file->message_type(3);
  static const int RedListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedListProto, info_),
  };
  RedListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedListProto_descriptor_,
      RedListProto::default_instance_,
      RedListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedListProto));
  RedSimpleProto_descriptor_ = file->message_type(4);
  static const int RedSimpleProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, sendcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, head_),
  };
  RedSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedSimpleProto_descriptor_,
      RedSimpleProto::default_instance_,
      RedSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedSimpleProto));
  RedSimpleListProto_descriptor_ = file->message_type(5);
  static const int RedSimpleListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleListProto, info_),
  };
  RedSimpleListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedSimpleListProto_descriptor_,
      RedSimpleListProto::default_instance_,
      RedSimpleListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSimpleListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedSimpleListProto));
  RedWaitProto_descriptor_ = file->message_type(6);
  static const int RedWaitProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitProto, cfgid_),
  };
  RedWaitProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedWaitProto_descriptor_,
      RedWaitProto::default_instance_,
      RedWaitProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedWaitProto));
  RedWaitListProto_descriptor_ = file->message_type(7);
  static const int RedWaitListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitListProto, info_),
  };
  RedWaitListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedWaitListProto_descriptor_,
      RedWaitListProto::default_instance_,
      RedWaitListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedWaitListProto));
  RedNewProto_descriptor_ = file->message_type(8);
  static const int RedNewProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewProto, cfgid_),
  };
  RedNewProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedNewProto_descriptor_,
      RedNewProto::default_instance_,
      RedNewProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedNewProto));
  RedNewListProto_descriptor_ = file->message_type(9);
  static const int RedNewListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewListProto, info_),
  };
  RedNewListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedNewListProto_descriptor_,
      RedNewListProto::default_instance_,
      RedNewListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedNewListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedNewListProto));
  Red_LoginSyncInfoRsp_descriptor_ = file->message_type(10);
  static const int Red_LoginSyncInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, today_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, today_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, today_bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, cfgid_lst_),
  };
  Red_LoginSyncInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_LoginSyncInfoRsp_descriptor_,
      Red_LoginSyncInfoRsp::default_instance_,
      Red_LoginSyncInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LoginSyncInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_LoginSyncInfoRsp));
  Red_UpdateRoleRsp_descriptor_ = file->message_type(11);
  static const int Red_UpdateRoleRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, today_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, today_magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, today_bdia_),
  };
  Red_UpdateRoleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_UpdateRoleRsp_descriptor_,
      Red_UpdateRoleRsp::default_instance_,
      Red_UpdateRoleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_UpdateRoleRsp));
  Red_UpdateRoleWaitRsp_descriptor_ = file->message_type(12);
  static const int Red_UpdateRoleWaitRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleWaitRsp, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleWaitRsp, del_lst_),
  };
  Red_UpdateRoleWaitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_UpdateRoleWaitRsp_descriptor_,
      Red_UpdateRoleWaitRsp::default_instance_,
      Red_UpdateRoleWaitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleWaitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateRoleWaitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_UpdateRoleWaitRsp));
  Red_NewRedNotify_descriptor_ = file->message_type(13);
  static const int Red_NewRedNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_NewRedNotify, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_NewRedNotify, del_lst_),
  };
  Red_NewRedNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_NewRedNotify_descriptor_,
      Red_NewRedNotify::default_instance_,
      Red_NewRedNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_NewRedNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_NewRedNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_NewRedNotify));
  Red_SimpleListReq_descriptor_ = file->message_type(14);
  static const int Red_SimpleListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListReq, type_),
  };
  Red_SimpleListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_SimpleListReq_descriptor_,
      Red_SimpleListReq::default_instance_,
      Red_SimpleListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_SimpleListReq));
  Red_SimpleListRsp_descriptor_ = file->message_type(15);
  static const int Red_SimpleListRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListRsp, simple_),
  };
  Red_SimpleListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_SimpleListRsp_descriptor_,
      Red_SimpleListRsp::default_instance_,
      Red_SimpleListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SimpleListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_SimpleListRsp));
  Red_DetailReq_descriptor_ = file->message_type(16);
  static const int Red_DetailReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailReq, idx_),
  };
  Red_DetailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_DetailReq_descriptor_,
      Red_DetailReq::default_instance_,
      Red_DetailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_DetailReq));
  Red_DetailRsp_descriptor_ = file->message_type(17);
  static const int Red_DetailRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailRsp, detail_),
  };
  Red_DetailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_DetailRsp_descriptor_,
      Red_DetailRsp::default_instance_,
      Red_DetailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_DetailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_DetailRsp));
  Red_FetchReq_descriptor_ = file->message_type(18);
  static const int Red_FetchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchReq, idx_),
  };
  Red_FetchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_FetchReq_descriptor_,
      Red_FetchReq::default_instance_,
      Red_FetchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_FetchReq));
  Red_FetchRsp_descriptor_ = file->message_type(19);
  static const int Red_FetchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchRsp, detail_),
  };
  Red_FetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_FetchRsp_descriptor_,
      Red_FetchRsp::default_instance_,
      Red_FetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_FetchRsp));
  Red_SendReq_descriptor_ = file->message_type(20);
  static const int Red_SendReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, word_),
  };
  Red_SendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_SendReq_descriptor_,
      Red_SendReq::default_instance_,
      Red_SendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_SendReq));
  Red_SendRsp_descriptor_ = file->message_type(21);
  static const int Red_SendRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendRsp, detail_),
  };
  Red_SendRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_SendRsp_descriptor_,
      Red_SendRsp::default_instance_,
      Red_SendRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_SendRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_SendRsp));
  Red_FetchExtraReq_descriptor_ = file->message_type(22);
  static const int Red_FetchExtraReq_offsets_[1] = {
  };
  Red_FetchExtraReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_FetchExtraReq_descriptor_,
      Red_FetchExtraReq::default_instance_,
      Red_FetchExtraReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchExtraReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchExtraReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_FetchExtraReq));
  Red_FetchExtraRsp_descriptor_ = file->message_type(23);
  static const int Red_FetchExtraRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchExtraRsp, ret_),
  };
  Red_FetchExtraRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_FetchExtraRsp_descriptor_,
      Red_FetchExtraRsp::default_instance_,
      Red_FetchExtraRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchExtraRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_FetchExtraRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_FetchExtraRsp));
  Red_UpdateSendListRsp_descriptor_ = file->message_type(24);
  static const int Red_UpdateSendListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateSendListRsp, cfgid_lst_),
  };
  Red_UpdateSendListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_UpdateSendListRsp_descriptor_,
      Red_UpdateSendListRsp::default_instance_,
      Red_UpdateSendListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateSendListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_UpdateSendListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_UpdateSendListRsp));
  Red_LCSendReq_descriptor_ = file->message_type(25);
  static const int Red_LCSendReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, word_),
  };
  Red_LCSendReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_LCSendReq_descriptor_,
      Red_LCSendReq::default_instance_,
      Red_LCSendReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCSendReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_LCSendReq));
  Red_CLFetchRsp_descriptor_ = file->message_type(26);
  static const int Red_CLFetchRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, cfgid_),
  };
  Red_CLFetchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_CLFetchRsp_descriptor_,
      Red_CLFetchRsp::default_instance_,
      Red_CLFetchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLFetchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_CLFetchRsp));
  Red_CLSendFailRsp_descriptor_ = file->message_type(27);
  static const int Red_CLSendFailRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLSendFailRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLSendFailRsp, cfgid_),
  };
  Red_CLSendFailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_CLSendFailRsp_descriptor_,
      Red_CLSendFailRsp::default_instance_,
      Red_CLSendFailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLSendFailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLSendFailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_CLSendFailRsp));
  Red_LCRechargeRsp_descriptor_ = file->message_type(28);
  static const int Red_LCRechargeRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCRechargeRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCRechargeRsp, cfgid_lst_),
  };
  Red_LCRechargeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_LCRechargeRsp_descriptor_,
      Red_LCRechargeRsp::default_instance_,
      Red_LCRechargeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCRechargeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_LCRechargeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_LCRechargeRsp));
  Red_CLTriggerRedRsp_descriptor_ = file->message_type(29);
  static const int Red_CLTriggerRedRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLTriggerRedRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLTriggerRedRsp, cfgid_lst_),
  };
  Red_CLTriggerRedRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Red_CLTriggerRedRsp_descriptor_,
      Red_CLTriggerRedRsp::default_instance_,
      Red_CLTriggerRedRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLTriggerRedRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Red_CLTriggerRedRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Red_CLTriggerRedRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Red_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedFetchProto_descriptor_, &RedFetchProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedFetchListProto_descriptor_, &RedFetchListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDetailProto_descriptor_, &RedDetailProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedListProto_descriptor_, &RedListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedSimpleProto_descriptor_, &RedSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedSimpleListProto_descriptor_, &RedSimpleListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedWaitProto_descriptor_, &RedWaitProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedWaitListProto_descriptor_, &RedWaitListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedNewProto_descriptor_, &RedNewProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedNewListProto_descriptor_, &RedNewListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_LoginSyncInfoRsp_descriptor_, &Red_LoginSyncInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_UpdateRoleRsp_descriptor_, &Red_UpdateRoleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_UpdateRoleWaitRsp_descriptor_, &Red_UpdateRoleWaitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_NewRedNotify_descriptor_, &Red_NewRedNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_SimpleListReq_descriptor_, &Red_SimpleListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_SimpleListRsp_descriptor_, &Red_SimpleListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_DetailReq_descriptor_, &Red_DetailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_DetailRsp_descriptor_, &Red_DetailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_FetchReq_descriptor_, &Red_FetchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_FetchRsp_descriptor_, &Red_FetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_SendReq_descriptor_, &Red_SendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_SendRsp_descriptor_, &Red_SendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_FetchExtraReq_descriptor_, &Red_FetchExtraReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_FetchExtraRsp_descriptor_, &Red_FetchExtraRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_UpdateSendListRsp_descriptor_, &Red_UpdateSendListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_LCSendReq_descriptor_, &Red_LCSendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_CLFetchRsp_descriptor_, &Red_CLFetchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_CLSendFailRsp_descriptor_, &Red_CLSendFailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_LCRechargeRsp_descriptor_, &Red_LCRechargeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Red_CLTriggerRedRsp_descriptor_, &Red_CLTriggerRedRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Red_2eproto() {
  delete RedFetchProto::default_instance_;
  delete RedFetchProto_reflection_;
  delete RedFetchListProto::default_instance_;
  delete RedFetchListProto_reflection_;
  delete RedDetailProto::default_instance_;
  delete RedDetailProto_reflection_;
  delete RedListProto::default_instance_;
  delete RedListProto_reflection_;
  delete RedSimpleProto::default_instance_;
  delete RedSimpleProto_reflection_;
  delete RedSimpleListProto::default_instance_;
  delete RedSimpleListProto_reflection_;
  delete RedWaitProto::default_instance_;
  delete RedWaitProto_reflection_;
  delete RedWaitListProto::default_instance_;
  delete RedWaitListProto_reflection_;
  delete RedNewProto::default_instance_;
  delete RedNewProto_reflection_;
  delete RedNewListProto::default_instance_;
  delete RedNewListProto_reflection_;
  delete Red_LoginSyncInfoRsp::default_instance_;
  delete Red_LoginSyncInfoRsp_reflection_;
  delete Red_UpdateRoleRsp::default_instance_;
  delete Red_UpdateRoleRsp_reflection_;
  delete Red_UpdateRoleWaitRsp::default_instance_;
  delete Red_UpdateRoleWaitRsp_reflection_;
  delete Red_NewRedNotify::default_instance_;
  delete Red_NewRedNotify_reflection_;
  delete Red_SimpleListReq::default_instance_;
  delete Red_SimpleListReq_reflection_;
  delete Red_SimpleListRsp::default_instance_;
  delete Red_SimpleListRsp_reflection_;
  delete Red_DetailReq::default_instance_;
  delete Red_DetailReq_reflection_;
  delete Red_DetailRsp::default_instance_;
  delete Red_DetailRsp_reflection_;
  delete Red_FetchReq::default_instance_;
  delete Red_FetchReq_reflection_;
  delete Red_FetchRsp::default_instance_;
  delete Red_FetchRsp_reflection_;
  delete Red_SendReq::default_instance_;
  delete Red_SendReq_reflection_;
  delete Red_SendRsp::default_instance_;
  delete Red_SendRsp_reflection_;
  delete Red_FetchExtraReq::default_instance_;
  delete Red_FetchExtraReq_reflection_;
  delete Red_FetchExtraRsp::default_instance_;
  delete Red_FetchExtraRsp_reflection_;
  delete Red_UpdateSendListRsp::default_instance_;
  delete Red_UpdateSendListRsp_reflection_;
  delete Red_LCSendReq::default_instance_;
  delete Red_LCSendReq_reflection_;
  delete Red_CLFetchRsp::default_instance_;
  delete Red_CLFetchRsp_reflection_;
  delete Red_CLSendFailRsp::default_instance_;
  delete Red_CLSendFailRsp_reflection_;
  delete Red_LCRechargeRsp::default_instance_;
  delete Red_LCRechargeRsp_reflection_;
  delete Red_CLTriggerRedRsp::default_instance_;
  delete Red_CLTriggerRedRsp_reflection_;
}

void protobuf_AddDesc_Red_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tRed.proto\022\010proto_ff\032\tCom.proto\032\017ComDef"
    "ine.proto\"}\n\rRedFetchProto\022\013\n\003cid\030\001 \001(\004\022"
    "\014\n\004name\030\002 \001(\014\022\014\n\004prof\030\003 \001(\005\022\013\n\003val\030\004 \001(\r"
    "\022\014\n\004time\030\005 \001(\004\022(\n\004head\030\006 \001(\0132\032.proto_ff."
    "RoleHeadPicProto\":\n\021RedFetchListProto\022%\n"
    "\004info\030\001 \003(\0132\027.proto_ff.RedFetchProto\"\323\001\n"
    "\016RedDetailProto\022\013\n\003idx\030\001 \001(\r\022\r\n\005cfgid\030\002 "
    "\001(\r\022\017\n\007sendcid\030\003 \001(\004\022\020\n\010sendname\030\004 \001(\014\022\014"
    "\n\004prof\030\005 \001(\005\022\020\n\010sendtime\030\006 \001(\004\022\014\n\004word\030\007"
    " \001(\014\022*\n\005fetch\030\010 \001(\0132\033.proto_ff.RedFetchL"
    "istProto\022(\n\004head\030\t \001(\0132\032.proto_ff.RoleHe"
    "adPicProto\"6\n\014RedListProto\022&\n\004info\030\001 \003(\013"
    "2\030.proto_ff.RedDetailProto\"\266\001\n\016RedSimple"
    "Proto\022\013\n\003idx\030\001 \001(\r\022\r\n\005cfgid\030\002 \001(\r\022\017\n\007sen"
    "dcid\030\003 \001(\004\022\020\n\010sendname\030\004 \001(\014\022\014\n\004prof\030\005 \001"
    "(\005\022\020\n\010sendtime\030\006 \001(\004\022\014\n\004word\030\007 \001(\014\022\r\n\005st"
    "ate\030\010 \001(\005\022(\n\004head\030\t \001(\0132\032.proto_ff.RoleH"
    "eadPicProto\"<\n\022RedSimpleListProto\022&\n\004inf"
    "o\030\001 \003(\0132\030.proto_ff.RedSimpleProto\"*\n\014Red"
    "WaitProto\022\013\n\003idx\030\001 \001(\r\022\r\n\005cfgid\030\002 \001(\r\"8\n"
    "\020RedWaitListProto\022$\n\004info\030\001 \003(\0132\026.proto_"
    "ff.RedWaitProto\")\n\013RedNewProto\022\013\n\003idx\030\001 "
    "\001(\r\022\r\n\005cfgid\030\002 \001(\r\"6\n\017RedNewListProto\022#\n"
    "\004info\030\001 \003(\0132\025.proto_ff.RedNewProto\"\326\001\n\024R"
    "ed_LoginSyncInfoRsp\022\014\n\004bdia\030\001 \001(\r\022\r\n\005mag"
    "ic\030\002 \001(\r\022\021\n\ttoday_num\030\003 \001(\r\022\023\n\013today_mag"
    "ic\030\004 \001(\r\022\022\n\ntoday_bdia\030\005 \001(\r\022(\n\004wait\030\006 \001"
    "(\0132\032.proto_ff.RedWaitListProto\022(\n\005fetch\030"
    "\007 \001(\0132\031.proto_ff.RedNewListProto\022\021\n\tcfgi"
    "d_lst\030\010 \003(\005\"l\n\021Red_UpdateRoleRsp\022\014\n\004bdia"
    "\030\001 \001(\r\022\r\n\005magic\030\002 \001(\r\022\021\n\ttoday_num\030\003 \001(\r"
    "\022\023\n\013today_magic\030\004 \001(\r\022\022\n\ntoday_bdia\030\005 \001("
    "\r\"R\n\025Red_UpdateRoleWaitRsp\022(\n\004wait\030\001 \001(\013"
    "2\032.proto_ff.RedWaitListProto\022\017\n\007del_lst\030"
    "\002 \003(\r\"M\n\020Red_NewRedNotify\022(\n\005fetch\030\001 \001(\013"
    "2\031.proto_ff.RedNewListProto\022\017\n\007del_lst\030\002"
    " \003(\r\"!\n\021Red_SimpleListReq\022\014\n\004type\030\001 \001(\005\""
    "\\\n\021Red_SimpleListRsp\022\013\n\003ret\030\001 \002(\005\022\014\n\004typ"
    "e\030\002 \001(\005\022,\n\006simple\030\003 \001(\0132\034.proto_ff.RedSi"
    "mpleListProto\"\034\n\rRed_DetailReq\022\013\n\003idx\030\001 "
    "\001(\r\"F\n\rRed_DetailRsp\022\013\n\003ret\030\001 \002(\005\022(\n\006det"
    "ail\030\002 \001(\0132\030.proto_ff.RedDetailProto\"\033\n\014R"
    "ed_FetchReq\022\013\n\003idx\030\001 \001(\r\"E\n\014Red_FetchRsp"
    "\022\013\n\003ret\030\001 \002(\005\022(\n\006detail\030\002 \001(\0132\030.proto_ff"
    ".RedDetailProto\"E\n\013Red_SendReq\022\013\n\003idx\030\001 "
    "\001(\r\022\r\n\005cfgid\030\002 \001(\r\022\014\n\004type\030\003 \001(\005\022\014\n\004word"
    "\030\004 \001(\014\"D\n\013Red_SendRsp\022\013\n\003ret\030\001 \002(\005\022(\n\006de"
    "tail\030\002 \001(\0132\030.proto_ff.RedDetailProto\"\023\n\021"
    "Red_FetchExtraReq\" \n\021Red_FetchExtraRsp\022\013"
    "\n\003ret\030\001 \002(\005\"*\n\025Red_UpdateSendListRsp\022\021\n\t"
    "cfgid_lst\030\001 \003(\005\"F\n\rRed_LCSendReq\022\013\n\003cid\030"
    "\001 \001(\004\022\013\n\003idx\030\002 \001(\r\022\r\n\005cfgid\030\003 \001(\r\022\014\n\004wor"
    "d\030\004 \001(\014\"W\n\016Red_CLFetchRsp\022\013\n\003cid\030\001 \001(\004\022\014"
    "\n\004bdia\030\002 \001(\003\022\r\n\005magic\030\003 \001(\003\022\014\n\004type\030\004 \001("
    "\005\022\r\n\005cfgid\030\005 \001(\005\"/\n\021Red_CLSendFailRsp\022\013\n"
    "\003cid\030\001 \001(\004\022\r\n\005cfgid\030\002 \001(\r\"3\n\021Red_LCRecha"
    "rgeRsp\022\013\n\003cid\030\001 \001(\004\022\021\n\tcfgid_lst\030\002 \003(\r\"5"
    "\n\023Red_CLTriggerRedRsp\022\013\n\003cid\030\001 \001(\004\022\021\n\tcf"
    "gid_lst\030\002 \003(\r", 2333);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Red.proto", &protobuf_RegisterTypes);
  RedFetchProto::default_instance_ = new RedFetchProto();
  RedFetchListProto::default_instance_ = new RedFetchListProto();
  RedDetailProto::default_instance_ = new RedDetailProto();
  RedListProto::default_instance_ = new RedListProto();
  RedSimpleProto::default_instance_ = new RedSimpleProto();
  RedSimpleListProto::default_instance_ = new RedSimpleListProto();
  RedWaitProto::default_instance_ = new RedWaitProto();
  RedWaitListProto::default_instance_ = new RedWaitListProto();
  RedNewProto::default_instance_ = new RedNewProto();
  RedNewListProto::default_instance_ = new RedNewListProto();
  Red_LoginSyncInfoRsp::default_instance_ = new Red_LoginSyncInfoRsp();
  Red_UpdateRoleRsp::default_instance_ = new Red_UpdateRoleRsp();
  Red_UpdateRoleWaitRsp::default_instance_ = new Red_UpdateRoleWaitRsp();
  Red_NewRedNotify::default_instance_ = new Red_NewRedNotify();
  Red_SimpleListReq::default_instance_ = new Red_SimpleListReq();
  Red_SimpleListRsp::default_instance_ = new Red_SimpleListRsp();
  Red_DetailReq::default_instance_ = new Red_DetailReq();
  Red_DetailRsp::default_instance_ = new Red_DetailRsp();
  Red_FetchReq::default_instance_ = new Red_FetchReq();
  Red_FetchRsp::default_instance_ = new Red_FetchRsp();
  Red_SendReq::default_instance_ = new Red_SendReq();
  Red_SendRsp::default_instance_ = new Red_SendRsp();
  Red_FetchExtraReq::default_instance_ = new Red_FetchExtraReq();
  Red_FetchExtraRsp::default_instance_ = new Red_FetchExtraRsp();
  Red_UpdateSendListRsp::default_instance_ = new Red_UpdateSendListRsp();
  Red_LCSendReq::default_instance_ = new Red_LCSendReq();
  Red_CLFetchRsp::default_instance_ = new Red_CLFetchRsp();
  Red_CLSendFailRsp::default_instance_ = new Red_CLSendFailRsp();
  Red_LCRechargeRsp::default_instance_ = new Red_LCRechargeRsp();
  Red_CLTriggerRedRsp::default_instance_ = new Red_CLTriggerRedRsp();
  RedFetchProto::default_instance_->InitAsDefaultInstance();
  RedFetchListProto::default_instance_->InitAsDefaultInstance();
  RedDetailProto::default_instance_->InitAsDefaultInstance();
  RedListProto::default_instance_->InitAsDefaultInstance();
  RedSimpleProto::default_instance_->InitAsDefaultInstance();
  RedSimpleListProto::default_instance_->InitAsDefaultInstance();
  RedWaitProto::default_instance_->InitAsDefaultInstance();
  RedWaitListProto::default_instance_->InitAsDefaultInstance();
  RedNewProto::default_instance_->InitAsDefaultInstance();
  RedNewListProto::default_instance_->InitAsDefaultInstance();
  Red_LoginSyncInfoRsp::default_instance_->InitAsDefaultInstance();
  Red_UpdateRoleRsp::default_instance_->InitAsDefaultInstance();
  Red_UpdateRoleWaitRsp::default_instance_->InitAsDefaultInstance();
  Red_NewRedNotify::default_instance_->InitAsDefaultInstance();
  Red_SimpleListReq::default_instance_->InitAsDefaultInstance();
  Red_SimpleListRsp::default_instance_->InitAsDefaultInstance();
  Red_DetailReq::default_instance_->InitAsDefaultInstance();
  Red_DetailRsp::default_instance_->InitAsDefaultInstance();
  Red_FetchReq::default_instance_->InitAsDefaultInstance();
  Red_FetchRsp::default_instance_->InitAsDefaultInstance();
  Red_SendReq::default_instance_->InitAsDefaultInstance();
  Red_SendRsp::default_instance_->InitAsDefaultInstance();
  Red_FetchExtraReq::default_instance_->InitAsDefaultInstance();
  Red_FetchExtraRsp::default_instance_->InitAsDefaultInstance();
  Red_UpdateSendListRsp::default_instance_->InitAsDefaultInstance();
  Red_LCSendReq::default_instance_->InitAsDefaultInstance();
  Red_CLFetchRsp::default_instance_->InitAsDefaultInstance();
  Red_CLSendFailRsp::default_instance_->InitAsDefaultInstance();
  Red_LCRechargeRsp::default_instance_->InitAsDefaultInstance();
  Red_CLTriggerRedRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Red_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Red_2eproto {
  StaticDescriptorInitializer_Red_2eproto() {
    protobuf_AddDesc_Red_2eproto();
  }
} static_descriptor_initializer_Red_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RedFetchProto::kCidFieldNumber;
const int RedFetchProto::kNameFieldNumber;
const int RedFetchProto::kProfFieldNumber;
const int RedFetchProto::kValFieldNumber;
const int RedFetchProto::kTimeFieldNumber;
const int RedFetchProto::kHeadFieldNumber;
#endif  // !_MSC_VER

RedFetchProto::RedFetchProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedFetchProto::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

RedFetchProto::RedFetchProto(const RedFetchProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedFetchProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  val_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedFetchProto::~RedFetchProto() {
  SharedDtor();
}

void RedFetchProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void RedFetchProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFetchProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFetchProto_descriptor_;
}

const RedFetchProto& RedFetchProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedFetchProto* RedFetchProto::default_instance_ = NULL;

RedFetchProto* RedFetchProto::New() const {
  return new RedFetchProto;
}

void RedFetchProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    val_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedFetchProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional uint32 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedFetchProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional uint32 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->val(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 6;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedFetchProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional uint32 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->val(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 6;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedFetchProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint32 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .proto_ff.RoleHeadPicProto head = 6;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFetchProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedFetchProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedFetchProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedFetchProto::MergeFrom(const RedFetchProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedFetchProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFetchProto::CopyFrom(const RedFetchProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFetchProto::IsInitialized() const {

  return true;
}

void RedFetchProto::Swap(RedFetchProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(val_, other->val_);
    std::swap(time_, other->time_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedFetchProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFetchProto_descriptor_;
  metadata.reflection = RedFetchProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedFetchListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedFetchListProto::RedFetchListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedFetchListProto::InitAsDefaultInstance() {
}

RedFetchListProto::RedFetchListProto(const RedFetchListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedFetchListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedFetchListProto::~RedFetchListProto() {
  SharedDtor();
}

void RedFetchListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedFetchListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFetchListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFetchListProto_descriptor_;
}

const RedFetchListProto& RedFetchListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedFetchListProto* RedFetchListProto::default_instance_ = NULL;

RedFetchListProto* RedFetchListProto::New() const {
  return new RedFetchListProto;
}

void RedFetchListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedFetchListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedFetchProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedFetchListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedFetchProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedFetchListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedFetchProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedFetchListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedFetchProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFetchListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedFetchListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedFetchListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedFetchListProto::MergeFrom(const RedFetchListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedFetchListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFetchListProto::CopyFrom(const RedFetchListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFetchListProto::IsInitialized() const {

  return true;
}

void RedFetchListProto::Swap(RedFetchListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedFetchListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFetchListProto_descriptor_;
  metadata.reflection = RedFetchListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDetailProto::kIdxFieldNumber;
const int RedDetailProto::kCfgidFieldNumber;
const int RedDetailProto::kSendcidFieldNumber;
const int RedDetailProto::kSendnameFieldNumber;
const int RedDetailProto::kProfFieldNumber;
const int RedDetailProto::kSendtimeFieldNumber;
const int RedDetailProto::kWordFieldNumber;
const int RedDetailProto::kFetchFieldNumber;
const int RedDetailProto::kHeadFieldNumber;
#endif  // !_MSC_VER

RedDetailProto::RedDetailProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDetailProto::InitAsDefaultInstance() {
  fetch_ = const_cast< ::proto_ff::RedFetchListProto*>(&::proto_ff::RedFetchListProto::default_instance());
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

RedDetailProto::RedDetailProto(const RedDetailProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDetailProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0u;
  sendcid_ = GOOGLE_ULONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  sendtime_ = GOOGLE_ULONGLONG(0);
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fetch_ = NULL;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDetailProto::~RedDetailProto() {
  SharedDtor();
}

void RedDetailProto::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
    delete fetch_;
    delete head_;
  }
}

void RedDetailProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDetailProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDetailProto_descriptor_;
}

const RedDetailProto& RedDetailProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedDetailProto* RedDetailProto::default_instance_ = NULL;

RedDetailProto* RedDetailProto::New() const {
  return new RedDetailProto;
}

void RedDetailProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0u;
    sendcid_ = GOOGLE_ULONGLONG(0);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    prof_ = 0;
    sendtime_ = GOOGLE_ULONGLONG(0);
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::RedFetchListProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDetailProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendcid;
        break;
      }

      // optional uint64 sendcid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendcid_)));
          set_has_sendcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendname;
        break;
      }

      // optional bytes sendname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }

      // optional int32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sendtime;
        break;
      }

      // optional uint64 sendtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_word;
        break;
      }

      // optional bytes word = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.RedFetchListProto fetch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDetailProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  // optional uint64 sendcid = 3;
  if (has_sendcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendcid(), output);
  }

  // optional bytes sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sendname(), output);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  // optional uint64 sendtime = 6;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sendtime(), output);
  }

  // optional bytes word = 7;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->word(), output);
  }

  // optional .proto_ff.RedFetchListProto fetch = 8;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fetch(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDetailProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  // optional uint64 sendcid = 3;
  if (has_sendcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendcid(), target);
  }

  // optional bytes sendname = 4;
  if (has_sendname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sendname(), target);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  // optional uint64 sendtime = 6;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sendtime(), target);
  }

  // optional bytes word = 7;
  if (has_word()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->word(), target);
  }

  // optional .proto_ff.RedFetchListProto fetch = 8;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fetch(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDetailProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // optional uint64 sendcid = 3;
    if (has_sendcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendcid());
    }

    // optional bytes sendname = 4;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sendname());
    }

    // optional int32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint64 sendtime = 6;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional bytes word = 7;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->word());
    }

    // optional .proto_ff.RedFetchListProto fetch = 8;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.RoleHeadPicProto head = 9;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDetailProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDetailProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDetailProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDetailProto::MergeFrom(const RedDetailProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_sendcid()) {
      set_sendcid(from.sendcid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::RedFetchListProto::MergeFrom(from.fetch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDetailProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDetailProto::CopyFrom(const RedDetailProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDetailProto::IsInitialized() const {

  return true;
}

void RedDetailProto::Swap(RedDetailProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(sendcid_, other->sendcid_);
    std::swap(sendname_, other->sendname_);
    std::swap(prof_, other->prof_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(word_, other->word_);
    std::swap(fetch_, other->fetch_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDetailProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDetailProto_descriptor_;
  metadata.reflection = RedDetailProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedListProto::RedListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedListProto::InitAsDefaultInstance() {
}

RedListProto::RedListProto(const RedListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedListProto::~RedListProto() {
  SharedDtor();
}

void RedListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedListProto_descriptor_;
}

const RedListProto& RedListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedListProto* RedListProto::default_instance_ = NULL;

RedListProto* RedListProto::New() const {
  return new RedListProto;
}

void RedListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedDetailProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedDetailProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedDetailProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedDetailProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedListProto::MergeFrom(const RedListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedListProto::CopyFrom(const RedListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedListProto::IsInitialized() const {

  return true;
}

void RedListProto::Swap(RedListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedListProto_descriptor_;
  metadata.reflection = RedListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedSimpleProto::kIdxFieldNumber;
const int RedSimpleProto::kCfgidFieldNumber;
const int RedSimpleProto::kSendcidFieldNumber;
const int RedSimpleProto::kSendnameFieldNumber;
const int RedSimpleProto::kProfFieldNumber;
const int RedSimpleProto::kSendtimeFieldNumber;
const int RedSimpleProto::kWordFieldNumber;
const int RedSimpleProto::kStateFieldNumber;
const int RedSimpleProto::kHeadFieldNumber;
#endif  // !_MSC_VER

RedSimpleProto::RedSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedSimpleProto::InitAsDefaultInstance() {
  head_ = const_cast< ::proto_ff::RoleHeadPicProto*>(&::proto_ff::RoleHeadPicProto::default_instance());
}

RedSimpleProto::RedSimpleProto(const RedSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0u;
  sendcid_ = GOOGLE_ULONGLONG(0);
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  sendtime_ = GOOGLE_ULONGLONG(0);
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  head_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedSimpleProto::~RedSimpleProto() {
  SharedDtor();
}

void RedSimpleProto::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
    delete head_;
  }
}

void RedSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedSimpleProto_descriptor_;
}

const RedSimpleProto& RedSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedSimpleProto* RedSimpleProto::default_instance_ = NULL;

RedSimpleProto* RedSimpleProto::New() const {
  return new RedSimpleProto;
}

void RedSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0u;
    sendcid_ = GOOGLE_ULONGLONG(0);
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    prof_ = 0;
    sendtime_ = GOOGLE_ULONGLONG(0);
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_head()) {
      if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendcid;
        break;
      }

      // optional uint64 sendcid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendcid_)));
          set_has_sendcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendname;
        break;
      }

      // optional bytes sendname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prof;
        break;
      }

      // optional int32 prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sendtime;
        break;
      }

      // optional uint64 sendtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_word;
        break;
      }

      // optional bytes word = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_head;
        break;
      }

      // optional .proto_ff.RoleHeadPicProto head = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_head:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  // optional uint64 sendcid = 3;
  if (has_sendcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendcid(), output);
  }

  // optional bytes sendname = 4;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sendname(), output);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prof(), output);
  }

  // optional uint64 sendtime = 6;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sendtime(), output);
  }

  // optional bytes word = 7;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->word(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  // optional uint64 sendcid = 3;
  if (has_sendcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendcid(), target);
  }

  // optional bytes sendname = 4;
  if (has_sendname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sendname(), target);
  }

  // optional int32 prof = 5;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prof(), target);
  }

  // optional uint64 sendtime = 6;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sendtime(), target);
  }

  // optional bytes word = 7;
  if (has_word()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->word(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional .proto_ff.RoleHeadPicProto head = 9;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // optional uint64 sendcid = 3;
    if (has_sendcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendcid());
    }

    // optional bytes sendname = 4;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sendname());
    }

    // optional int32 prof = 5;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint64 sendtime = 6;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional bytes word = 7;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->word());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.RoleHeadPicProto head = 9;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedSimpleProto::MergeFrom(const RedSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_sendcid()) {
      set_sendcid(from.sendcid());
    }
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_head()) {
      mutable_head()->::proto_ff::RoleHeadPicProto::MergeFrom(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedSimpleProto::CopyFrom(const RedSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedSimpleProto::IsInitialized() const {

  return true;
}

void RedSimpleProto::Swap(RedSimpleProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(sendcid_, other->sendcid_);
    std::swap(sendname_, other->sendname_);
    std::swap(prof_, other->prof_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(word_, other->word_);
    std::swap(state_, other->state_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedSimpleProto_descriptor_;
  metadata.reflection = RedSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedSimpleListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedSimpleListProto::RedSimpleListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedSimpleListProto::InitAsDefaultInstance() {
}

RedSimpleListProto::RedSimpleListProto(const RedSimpleListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedSimpleListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedSimpleListProto::~RedSimpleListProto() {
  SharedDtor();
}

void RedSimpleListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedSimpleListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedSimpleListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedSimpleListProto_descriptor_;
}

const RedSimpleListProto& RedSimpleListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedSimpleListProto* RedSimpleListProto::default_instance_ = NULL;

RedSimpleListProto* RedSimpleListProto::New() const {
  return new RedSimpleListProto;
}

void RedSimpleListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedSimpleListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedSimpleProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedSimpleListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedSimpleListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedSimpleListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedSimpleProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedSimpleListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedSimpleListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedSimpleListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedSimpleListProto::MergeFrom(const RedSimpleListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedSimpleListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedSimpleListProto::CopyFrom(const RedSimpleListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedSimpleListProto::IsInitialized() const {

  return true;
}

void RedSimpleListProto::Swap(RedSimpleListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedSimpleListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedSimpleListProto_descriptor_;
  metadata.reflection = RedSimpleListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedWaitProto::kIdxFieldNumber;
const int RedWaitProto::kCfgidFieldNumber;
#endif  // !_MSC_VER

RedWaitProto::RedWaitProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedWaitProto::InitAsDefaultInstance() {
}

RedWaitProto::RedWaitProto(const RedWaitProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedWaitProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedWaitProto::~RedWaitProto() {
  SharedDtor();
}

void RedWaitProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedWaitProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedWaitProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedWaitProto_descriptor_;
}

const RedWaitProto& RedWaitProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedWaitProto* RedWaitProto::default_instance_ = NULL;

RedWaitProto* RedWaitProto::New() const {
  return new RedWaitProto;
}

void RedWaitProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedWaitProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedWaitProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedWaitProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedWaitProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedWaitProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedWaitProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedWaitProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedWaitProto::MergeFrom(const RedWaitProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedWaitProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedWaitProto::CopyFrom(const RedWaitProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedWaitProto::IsInitialized() const {

  return true;
}

void RedWaitProto::Swap(RedWaitProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedWaitProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedWaitProto_descriptor_;
  metadata.reflection = RedWaitProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedWaitListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedWaitListProto::RedWaitListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedWaitListProto::InitAsDefaultInstance() {
}

RedWaitListProto::RedWaitListProto(const RedWaitListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedWaitListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedWaitListProto::~RedWaitListProto() {
  SharedDtor();
}

void RedWaitListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedWaitListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedWaitListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedWaitListProto_descriptor_;
}

const RedWaitListProto& RedWaitListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedWaitListProto* RedWaitListProto::default_instance_ = NULL;

RedWaitListProto* RedWaitListProto::New() const {
  return new RedWaitListProto;
}

void RedWaitListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedWaitListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedWaitProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedWaitListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedWaitProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedWaitListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedWaitProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedWaitListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedWaitProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedWaitListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedWaitListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedWaitListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedWaitListProto::MergeFrom(const RedWaitListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedWaitListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedWaitListProto::CopyFrom(const RedWaitListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedWaitListProto::IsInitialized() const {

  return true;
}

void RedWaitListProto::Swap(RedWaitListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedWaitListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedWaitListProto_descriptor_;
  metadata.reflection = RedWaitListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedNewProto::kIdxFieldNumber;
const int RedNewProto::kCfgidFieldNumber;
#endif  // !_MSC_VER

RedNewProto::RedNewProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedNewProto::InitAsDefaultInstance() {
}

RedNewProto::RedNewProto(const RedNewProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedNewProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedNewProto::~RedNewProto() {
  SharedDtor();
}

void RedNewProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedNewProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedNewProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedNewProto_descriptor_;
}

const RedNewProto& RedNewProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedNewProto* RedNewProto::default_instance_ = NULL;

RedNewProto* RedNewProto::New() const {
  return new RedNewProto;
}

void RedNewProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedNewProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedNewProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedNewProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedNewProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedNewProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedNewProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedNewProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedNewProto::MergeFrom(const RedNewProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedNewProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedNewProto::CopyFrom(const RedNewProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedNewProto::IsInitialized() const {

  return true;
}

void RedNewProto::Swap(RedNewProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedNewProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedNewProto_descriptor_;
  metadata.reflection = RedNewProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedNewListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedNewListProto::RedNewListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedNewListProto::InitAsDefaultInstance() {
}

RedNewListProto::RedNewListProto(const RedNewListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedNewListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedNewListProto::~RedNewListProto() {
  SharedDtor();
}

void RedNewListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedNewListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedNewListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedNewListProto_descriptor_;
}

const RedNewListProto& RedNewListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

RedNewListProto* RedNewListProto::default_instance_ = NULL;

RedNewListProto* RedNewListProto::New() const {
  return new RedNewListProto;
}

void RedNewListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedNewListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedNewProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedNewListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedNewProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedNewListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedNewProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedNewListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedNewProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedNewListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedNewListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedNewListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedNewListProto::MergeFrom(const RedNewListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedNewListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedNewListProto::CopyFrom(const RedNewListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedNewListProto::IsInitialized() const {

  return true;
}

void RedNewListProto::Swap(RedNewListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedNewListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedNewListProto_descriptor_;
  metadata.reflection = RedNewListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_LoginSyncInfoRsp::kBdiaFieldNumber;
const int Red_LoginSyncInfoRsp::kMagicFieldNumber;
const int Red_LoginSyncInfoRsp::kTodayNumFieldNumber;
const int Red_LoginSyncInfoRsp::kTodayMagicFieldNumber;
const int Red_LoginSyncInfoRsp::kTodayBdiaFieldNumber;
const int Red_LoginSyncInfoRsp::kWaitFieldNumber;
const int Red_LoginSyncInfoRsp::kFetchFieldNumber;
const int Red_LoginSyncInfoRsp::kCfgidLstFieldNumber;
#endif  // !_MSC_VER

Red_LoginSyncInfoRsp::Red_LoginSyncInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_LoginSyncInfoRsp::InitAsDefaultInstance() {
  wait_ = const_cast< ::proto_ff::RedWaitListProto*>(&::proto_ff::RedWaitListProto::default_instance());
  fetch_ = const_cast< ::proto_ff::RedNewListProto*>(&::proto_ff::RedNewListProto::default_instance());
}

Red_LoginSyncInfoRsp::Red_LoginSyncInfoRsp(const Red_LoginSyncInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_LoginSyncInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  bdia_ = 0u;
  magic_ = 0u;
  today_num_ = 0u;
  today_magic_ = 0u;
  today_bdia_ = 0u;
  wait_ = NULL;
  fetch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_LoginSyncInfoRsp::~Red_LoginSyncInfoRsp() {
  SharedDtor();
}

void Red_LoginSyncInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete wait_;
    delete fetch_;
  }
}

void Red_LoginSyncInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_LoginSyncInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_LoginSyncInfoRsp_descriptor_;
}

const Red_LoginSyncInfoRsp& Red_LoginSyncInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_LoginSyncInfoRsp* Red_LoginSyncInfoRsp::default_instance_ = NULL;

Red_LoginSyncInfoRsp* Red_LoginSyncInfoRsp::New() const {
  return new Red_LoginSyncInfoRsp;
}

void Red_LoginSyncInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bdia_ = 0u;
    magic_ = 0u;
    today_num_ = 0u;
    today_magic_ = 0u;
    today_bdia_ = 0u;
    if (has_wait()) {
      if (wait_ != NULL) wait_->::proto_ff::RedWaitListProto::Clear();
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::RedNewListProto::Clear();
    }
  }
  cfgid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_LoginSyncInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bdia = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic;
        break;
      }

      // optional uint32 magic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_num;
        break;
      }

      // optional uint32 today_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_num_)));
          set_has_today_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_magic;
        break;
      }

      // optional uint32 today_magic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_magic_)));
          set_has_today_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_bdia;
        break;
      }

      // optional uint32 today_bdia = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_bdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_bdia_)));
          set_has_today_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_wait;
        break;
      }

      // optional .proto_ff.RedWaitListProto wait = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.RedNewListProto fetch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cfgid_lst;
        break;
      }

      // repeated int32 cfgid_lst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_cfgid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cfgid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cfgid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_LoginSyncInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bdia(), output);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic(), output);
  }

  // optional uint32 today_num = 3;
  if (has_today_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_num(), output);
  }

  // optional uint32 today_magic = 4;
  if (has_today_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_magic(), output);
  }

  // optional uint32 today_bdia = 5;
  if (has_today_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_bdia(), output);
  }

  // optional .proto_ff.RedWaitListProto wait = 6;
  if (has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->wait(), output);
  }

  // optional .proto_ff.RedNewListProto fetch = 7;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fetch(), output);
  }

  // repeated int32 cfgid_lst = 8;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->cfgid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_LoginSyncInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bdia(), target);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic(), target);
  }

  // optional uint32 today_num = 3;
  if (has_today_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_num(), target);
  }

  // optional uint32 today_magic = 4;
  if (has_today_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_magic(), target);
  }

  // optional uint32 today_bdia = 5;
  if (has_today_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_bdia(), target);
  }

  // optional .proto_ff.RedWaitListProto wait = 6;
  if (has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->wait(), target);
  }

  // optional .proto_ff.RedNewListProto fetch = 7;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fetch(), target);
  }

  // repeated int32 cfgid_lst = 8;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->cfgid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_LoginSyncInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bdia = 1;
    if (has_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bdia());
    }

    // optional uint32 magic = 2;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic());
    }

    // optional uint32 today_num = 3;
    if (has_today_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_num());
    }

    // optional uint32 today_magic = 4;
    if (has_today_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_magic());
    }

    // optional uint32 today_bdia = 5;
    if (has_today_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_bdia());
    }

    // optional .proto_ff.RedWaitListProto wait = 6;
    if (has_wait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait());
    }

    // optional .proto_ff.RedNewListProto fetch = 7;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

  }
  // repeated int32 cfgid_lst = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cfgid_lst(i));
    }
    total_size += 1 * this->cfgid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_LoginSyncInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_LoginSyncInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_LoginSyncInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_LoginSyncInfoRsp::MergeFrom(const Red_LoginSyncInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgid_lst_.MergeFrom(from.cfgid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_today_num()) {
      set_today_num(from.today_num());
    }
    if (from.has_today_magic()) {
      set_today_magic(from.today_magic());
    }
    if (from.has_today_bdia()) {
      set_today_bdia(from.today_bdia());
    }
    if (from.has_wait()) {
      mutable_wait()->::proto_ff::RedWaitListProto::MergeFrom(from.wait());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::RedNewListProto::MergeFrom(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_LoginSyncInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_LoginSyncInfoRsp::CopyFrom(const Red_LoginSyncInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_LoginSyncInfoRsp::IsInitialized() const {

  return true;
}

void Red_LoginSyncInfoRsp::Swap(Red_LoginSyncInfoRsp* other) {
  if (other != this) {
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(today_num_, other->today_num_);
    std::swap(today_magic_, other->today_magic_);
    std::swap(today_bdia_, other->today_bdia_);
    std::swap(wait_, other->wait_);
    std::swap(fetch_, other->fetch_);
    cfgid_lst_.Swap(&other->cfgid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_LoginSyncInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_LoginSyncInfoRsp_descriptor_;
  metadata.reflection = Red_LoginSyncInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_UpdateRoleRsp::kBdiaFieldNumber;
const int Red_UpdateRoleRsp::kMagicFieldNumber;
const int Red_UpdateRoleRsp::kTodayNumFieldNumber;
const int Red_UpdateRoleRsp::kTodayMagicFieldNumber;
const int Red_UpdateRoleRsp::kTodayBdiaFieldNumber;
#endif  // !_MSC_VER

Red_UpdateRoleRsp::Red_UpdateRoleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_UpdateRoleRsp::InitAsDefaultInstance() {
}

Red_UpdateRoleRsp::Red_UpdateRoleRsp(const Red_UpdateRoleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_UpdateRoleRsp::SharedCtor() {
  _cached_size_ = 0;
  bdia_ = 0u;
  magic_ = 0u;
  today_num_ = 0u;
  today_magic_ = 0u;
  today_bdia_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_UpdateRoleRsp::~Red_UpdateRoleRsp() {
  SharedDtor();
}

void Red_UpdateRoleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_UpdateRoleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_UpdateRoleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_UpdateRoleRsp_descriptor_;
}

const Red_UpdateRoleRsp& Red_UpdateRoleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_UpdateRoleRsp* Red_UpdateRoleRsp::default_instance_ = NULL;

Red_UpdateRoleRsp* Red_UpdateRoleRsp::New() const {
  return new Red_UpdateRoleRsp;
}

void Red_UpdateRoleRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bdia_ = 0u;
    magic_ = 0u;
    today_num_ = 0u;
    today_magic_ = 0u;
    today_bdia_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_UpdateRoleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bdia = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic;
        break;
      }

      // optional uint32 magic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_num;
        break;
      }

      // optional uint32 today_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_num_)));
          set_has_today_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_magic;
        break;
      }

      // optional uint32 today_magic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_magic_)));
          set_has_today_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_bdia;
        break;
      }

      // optional uint32 today_bdia = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_bdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_bdia_)));
          set_has_today_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_UpdateRoleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bdia(), output);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic(), output);
  }

  // optional uint32 today_num = 3;
  if (has_today_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_num(), output);
  }

  // optional uint32 today_magic = 4;
  if (has_today_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_magic(), output);
  }

  // optional uint32 today_bdia = 5;
  if (has_today_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_bdia(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_UpdateRoleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bdia(), target);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic(), target);
  }

  // optional uint32 today_num = 3;
  if (has_today_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_num(), target);
  }

  // optional uint32 today_magic = 4;
  if (has_today_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_magic(), target);
  }

  // optional uint32 today_bdia = 5;
  if (has_today_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_bdia(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_UpdateRoleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bdia = 1;
    if (has_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bdia());
    }

    // optional uint32 magic = 2;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic());
    }

    // optional uint32 today_num = 3;
    if (has_today_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_num());
    }

    // optional uint32 today_magic = 4;
    if (has_today_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_magic());
    }

    // optional uint32 today_bdia = 5;
    if (has_today_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_bdia());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_UpdateRoleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_UpdateRoleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_UpdateRoleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_UpdateRoleRsp::MergeFrom(const Red_UpdateRoleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_today_num()) {
      set_today_num(from.today_num());
    }
    if (from.has_today_magic()) {
      set_today_magic(from.today_magic());
    }
    if (from.has_today_bdia()) {
      set_today_bdia(from.today_bdia());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_UpdateRoleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_UpdateRoleRsp::CopyFrom(const Red_UpdateRoleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_UpdateRoleRsp::IsInitialized() const {

  return true;
}

void Red_UpdateRoleRsp::Swap(Red_UpdateRoleRsp* other) {
  if (other != this) {
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(today_num_, other->today_num_);
    std::swap(today_magic_, other->today_magic_);
    std::swap(today_bdia_, other->today_bdia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_UpdateRoleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_UpdateRoleRsp_descriptor_;
  metadata.reflection = Red_UpdateRoleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_UpdateRoleWaitRsp::kWaitFieldNumber;
const int Red_UpdateRoleWaitRsp::kDelLstFieldNumber;
#endif  // !_MSC_VER

Red_UpdateRoleWaitRsp::Red_UpdateRoleWaitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_UpdateRoleWaitRsp::InitAsDefaultInstance() {
  wait_ = const_cast< ::proto_ff::RedWaitListProto*>(&::proto_ff::RedWaitListProto::default_instance());
}

Red_UpdateRoleWaitRsp::Red_UpdateRoleWaitRsp(const Red_UpdateRoleWaitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_UpdateRoleWaitRsp::SharedCtor() {
  _cached_size_ = 0;
  wait_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_UpdateRoleWaitRsp::~Red_UpdateRoleWaitRsp() {
  SharedDtor();
}

void Red_UpdateRoleWaitRsp::SharedDtor() {
  if (this != default_instance_) {
    delete wait_;
  }
}

void Red_UpdateRoleWaitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_UpdateRoleWaitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_UpdateRoleWaitRsp_descriptor_;
}

const Red_UpdateRoleWaitRsp& Red_UpdateRoleWaitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_UpdateRoleWaitRsp* Red_UpdateRoleWaitRsp::default_instance_ = NULL;

Red_UpdateRoleWaitRsp* Red_UpdateRoleWaitRsp::New() const {
  return new Red_UpdateRoleWaitRsp;
}

void Red_UpdateRoleWaitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wait()) {
      if (wait_ != NULL) wait_->::proto_ff::RedWaitListProto::Clear();
    }
  }
  del_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_UpdateRoleWaitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RedWaitListProto wait = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_lst;
        break;
      }

      // repeated uint32 del_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_del_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_UpdateRoleWaitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RedWaitListProto wait = 1;
  if (has_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wait(), output);
  }

  // repeated uint32 del_lst = 2;
  for (int i = 0; i < this->del_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->del_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_UpdateRoleWaitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RedWaitListProto wait = 1;
  if (has_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wait(), target);
  }

  // repeated uint32 del_lst = 2;
  for (int i = 0; i < this->del_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->del_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_UpdateRoleWaitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RedWaitListProto wait = 1;
    if (has_wait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait());
    }

  }
  // repeated uint32 del_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->del_lst(i));
    }
    total_size += 1 * this->del_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_UpdateRoleWaitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_UpdateRoleWaitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_UpdateRoleWaitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_UpdateRoleWaitRsp::MergeFrom(const Red_UpdateRoleWaitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_lst_.MergeFrom(from.del_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wait()) {
      mutable_wait()->::proto_ff::RedWaitListProto::MergeFrom(from.wait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_UpdateRoleWaitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_UpdateRoleWaitRsp::CopyFrom(const Red_UpdateRoleWaitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_UpdateRoleWaitRsp::IsInitialized() const {

  return true;
}

void Red_UpdateRoleWaitRsp::Swap(Red_UpdateRoleWaitRsp* other) {
  if (other != this) {
    std::swap(wait_, other->wait_);
    del_lst_.Swap(&other->del_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_UpdateRoleWaitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_UpdateRoleWaitRsp_descriptor_;
  metadata.reflection = Red_UpdateRoleWaitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_NewRedNotify::kFetchFieldNumber;
const int Red_NewRedNotify::kDelLstFieldNumber;
#endif  // !_MSC_VER

Red_NewRedNotify::Red_NewRedNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_NewRedNotify::InitAsDefaultInstance() {
  fetch_ = const_cast< ::proto_ff::RedNewListProto*>(&::proto_ff::RedNewListProto::default_instance());
}

Red_NewRedNotify::Red_NewRedNotify(const Red_NewRedNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_NewRedNotify::SharedCtor() {
  _cached_size_ = 0;
  fetch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_NewRedNotify::~Red_NewRedNotify() {
  SharedDtor();
}

void Red_NewRedNotify::SharedDtor() {
  if (this != default_instance_) {
    delete fetch_;
  }
}

void Red_NewRedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_NewRedNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_NewRedNotify_descriptor_;
}

const Red_NewRedNotify& Red_NewRedNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_NewRedNotify* Red_NewRedNotify::default_instance_ = NULL;

Red_NewRedNotify* Red_NewRedNotify::New() const {
  return new Red_NewRedNotify;
}

void Red_NewRedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::RedNewListProto::Clear();
    }
  }
  del_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_NewRedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RedNewListProto fetch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_lst;
        break;
      }

      // repeated uint32 del_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_del_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_del_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_NewRedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RedNewListProto fetch = 1;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetch(), output);
  }

  // repeated uint32 del_lst = 2;
  for (int i = 0; i < this->del_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->del_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_NewRedNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RedNewListProto fetch = 1;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetch(), target);
  }

  // repeated uint32 del_lst = 2;
  for (int i = 0; i < this->del_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->del_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_NewRedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RedNewListProto fetch = 1;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

  }
  // repeated uint32 del_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->del_lst(i));
    }
    total_size += 1 * this->del_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_NewRedNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_NewRedNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_NewRedNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_NewRedNotify::MergeFrom(const Red_NewRedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_lst_.MergeFrom(from.del_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::RedNewListProto::MergeFrom(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_NewRedNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_NewRedNotify::CopyFrom(const Red_NewRedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_NewRedNotify::IsInitialized() const {

  return true;
}

void Red_NewRedNotify::Swap(Red_NewRedNotify* other) {
  if (other != this) {
    std::swap(fetch_, other->fetch_);
    del_lst_.Swap(&other->del_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_NewRedNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_NewRedNotify_descriptor_;
  metadata.reflection = Red_NewRedNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_SimpleListReq::kTypeFieldNumber;
#endif  // !_MSC_VER

Red_SimpleListReq::Red_SimpleListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_SimpleListReq::InitAsDefaultInstance() {
}

Red_SimpleListReq::Red_SimpleListReq(const Red_SimpleListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_SimpleListReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_SimpleListReq::~Red_SimpleListReq() {
  SharedDtor();
}

void Red_SimpleListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_SimpleListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_SimpleListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_SimpleListReq_descriptor_;
}

const Red_SimpleListReq& Red_SimpleListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_SimpleListReq* Red_SimpleListReq::default_instance_ = NULL;

Red_SimpleListReq* Red_SimpleListReq::New() const {
  return new Red_SimpleListReq;
}

void Red_SimpleListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_SimpleListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_SimpleListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_SimpleListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_SimpleListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_SimpleListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_SimpleListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_SimpleListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_SimpleListReq::MergeFrom(const Red_SimpleListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_SimpleListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_SimpleListReq::CopyFrom(const Red_SimpleListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_SimpleListReq::IsInitialized() const {

  return true;
}

void Red_SimpleListReq::Swap(Red_SimpleListReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_SimpleListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_SimpleListReq_descriptor_;
  metadata.reflection = Red_SimpleListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_SimpleListRsp::kRetFieldNumber;
const int Red_SimpleListRsp::kTypeFieldNumber;
const int Red_SimpleListRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

Red_SimpleListRsp::Red_SimpleListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_SimpleListRsp::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::RedSimpleListProto*>(&::proto_ff::RedSimpleListProto::default_instance());
}

Red_SimpleListRsp::Red_SimpleListRsp(const Red_SimpleListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_SimpleListRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_SimpleListRsp::~Red_SimpleListRsp() {
  SharedDtor();
}

void Red_SimpleListRsp::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void Red_SimpleListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_SimpleListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_SimpleListRsp_descriptor_;
}

const Red_SimpleListRsp& Red_SimpleListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_SimpleListRsp* Red_SimpleListRsp::default_instance_ = NULL;

Red_SimpleListRsp* Red_SimpleListRsp::New() const {
  return new Red_SimpleListRsp;
}

void Red_SimpleListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::RedSimpleListProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_SimpleListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_simple;
        break;
      }

      // optional .proto_ff.RedSimpleListProto simple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_SimpleListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional .proto_ff.RedSimpleListProto simple = 3;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_SimpleListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional .proto_ff.RedSimpleListProto simple = 3;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_SimpleListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .proto_ff.RedSimpleListProto simple = 3;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_SimpleListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_SimpleListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_SimpleListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_SimpleListRsp::MergeFrom(const Red_SimpleListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::RedSimpleListProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_SimpleListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_SimpleListRsp::CopyFrom(const Red_SimpleListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_SimpleListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Red_SimpleListRsp::Swap(Red_SimpleListRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_SimpleListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_SimpleListRsp_descriptor_;
  metadata.reflection = Red_SimpleListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_DetailReq::kIdxFieldNumber;
#endif  // !_MSC_VER

Red_DetailReq::Red_DetailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_DetailReq::InitAsDefaultInstance() {
}

Red_DetailReq::Red_DetailReq(const Red_DetailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_DetailReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_DetailReq::~Red_DetailReq() {
  SharedDtor();
}

void Red_DetailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_DetailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_DetailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_DetailReq_descriptor_;
}

const Red_DetailReq& Red_DetailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_DetailReq* Red_DetailReq::default_instance_ = NULL;

Red_DetailReq* Red_DetailReq::New() const {
  return new Red_DetailReq;
}

void Red_DetailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_DetailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_DetailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_DetailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_DetailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_DetailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_DetailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_DetailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_DetailReq::MergeFrom(const Red_DetailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_DetailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_DetailReq::CopyFrom(const Red_DetailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_DetailReq::IsInitialized() const {

  return true;
}

void Red_DetailReq::Swap(Red_DetailReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_DetailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_DetailReq_descriptor_;
  metadata.reflection = Red_DetailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_DetailRsp::kRetFieldNumber;
const int Red_DetailRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Red_DetailRsp::Red_DetailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_DetailRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::RedDetailProto*>(&::proto_ff::RedDetailProto::default_instance());
}

Red_DetailRsp::Red_DetailRsp(const Red_DetailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_DetailRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_DetailRsp::~Red_DetailRsp() {
  SharedDtor();
}

void Red_DetailRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Red_DetailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_DetailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_DetailRsp_descriptor_;
}

const Red_DetailRsp& Red_DetailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_DetailRsp* Red_DetailRsp::default_instance_ = NULL;

Red_DetailRsp* Red_DetailRsp::New() const {
  return new Red_DetailRsp;
}

void Red_DetailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_DetailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .proto_ff.RedDetailProto detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_DetailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_DetailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_DetailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.RedDetailProto detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_DetailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_DetailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_DetailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_DetailRsp::MergeFrom(const Red_DetailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::RedDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_DetailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_DetailRsp::CopyFrom(const Red_DetailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_DetailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Red_DetailRsp::Swap(Red_DetailRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_DetailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_DetailRsp_descriptor_;
  metadata.reflection = Red_DetailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_FetchReq::kIdxFieldNumber;
#endif  // !_MSC_VER

Red_FetchReq::Red_FetchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_FetchReq::InitAsDefaultInstance() {
}

Red_FetchReq::Red_FetchReq(const Red_FetchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_FetchReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_FetchReq::~Red_FetchReq() {
  SharedDtor();
}

void Red_FetchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_FetchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_FetchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_FetchReq_descriptor_;
}

const Red_FetchReq& Red_FetchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_FetchReq* Red_FetchReq::default_instance_ = NULL;

Red_FetchReq* Red_FetchReq::New() const {
  return new Red_FetchReq;
}

void Red_FetchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_FetchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_FetchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_FetchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_FetchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_FetchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_FetchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_FetchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_FetchReq::MergeFrom(const Red_FetchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_FetchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_FetchReq::CopyFrom(const Red_FetchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_FetchReq::IsInitialized() const {

  return true;
}

void Red_FetchReq::Swap(Red_FetchReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_FetchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_FetchReq_descriptor_;
  metadata.reflection = Red_FetchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_FetchRsp::kRetFieldNumber;
const int Red_FetchRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Red_FetchRsp::Red_FetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_FetchRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::RedDetailProto*>(&::proto_ff::RedDetailProto::default_instance());
}

Red_FetchRsp::Red_FetchRsp(const Red_FetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_FetchRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_FetchRsp::~Red_FetchRsp() {
  SharedDtor();
}

void Red_FetchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Red_FetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_FetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_FetchRsp_descriptor_;
}

const Red_FetchRsp& Red_FetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_FetchRsp* Red_FetchRsp::default_instance_ = NULL;

Red_FetchRsp* Red_FetchRsp::New() const {
  return new Red_FetchRsp;
}

void Red_FetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_FetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .proto_ff.RedDetailProto detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_FetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_FetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_FetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.RedDetailProto detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_FetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_FetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_FetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_FetchRsp::MergeFrom(const Red_FetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::RedDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_FetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_FetchRsp::CopyFrom(const Red_FetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_FetchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Red_FetchRsp::Swap(Red_FetchRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_FetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_FetchRsp_descriptor_;
  metadata.reflection = Red_FetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_SendReq::kIdxFieldNumber;
const int Red_SendReq::kCfgidFieldNumber;
const int Red_SendReq::kTypeFieldNumber;
const int Red_SendReq::kWordFieldNumber;
#endif  // !_MSC_VER

Red_SendReq::Red_SendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_SendReq::InitAsDefaultInstance() {
}

Red_SendReq::Red_SendReq(const Red_SendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_SendReq::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0u;
  type_ = 0;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_SendReq::~Red_SendReq() {
  SharedDtor();
}

void Red_SendReq::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void Red_SendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_SendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_SendReq_descriptor_;
}

const Red_SendReq& Red_SendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_SendReq* Red_SendReq::default_instance_ = NULL;

Red_SendReq* Red_SendReq::New() const {
  return new Red_SendReq;
}

void Red_SendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0u;
    type_ = 0;
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_SendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_word;
        break;
      }

      // optional bytes word = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_SendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional bytes word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->word(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_SendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional bytes word = 4;
  if (has_word()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->word(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_SendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes word = 4;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->word());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_SendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_SendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_SendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_SendReq::MergeFrom(const Red_SendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_SendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_SendReq::CopyFrom(const Red_SendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_SendReq::IsInitialized() const {

  return true;
}

void Red_SendReq::Swap(Red_SendReq* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(word_, other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_SendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_SendReq_descriptor_;
  metadata.reflection = Red_SendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_SendRsp::kRetFieldNumber;
const int Red_SendRsp::kDetailFieldNumber;
#endif  // !_MSC_VER

Red_SendRsp::Red_SendRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_SendRsp::InitAsDefaultInstance() {
  detail_ = const_cast< ::proto_ff::RedDetailProto*>(&::proto_ff::RedDetailProto::default_instance());
}

Red_SendRsp::Red_SendRsp(const Red_SendRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_SendRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  detail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_SendRsp::~Red_SendRsp() {
  SharedDtor();
}

void Red_SendRsp::SharedDtor() {
  if (this != default_instance_) {
    delete detail_;
  }
}

void Red_SendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_SendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_SendRsp_descriptor_;
}

const Red_SendRsp& Red_SendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_SendRsp* Red_SendRsp::default_instance_ = NULL;

Red_SendRsp* Red_SendRsp::New() const {
  return new Red_SendRsp;
}

void Red_SendRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_detail()) {
      if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_SendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // optional .proto_ff.RedDetailProto detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_SendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_SendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .proto_ff.RedDetailProto detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_SendRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .proto_ff.RedDetailProto detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_SendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_SendRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_SendRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_SendRsp::MergeFrom(const Red_SendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_detail()) {
      mutable_detail()->::proto_ff::RedDetailProto::MergeFrom(from.detail());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_SendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_SendRsp::CopyFrom(const Red_SendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_SendRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Red_SendRsp::Swap(Red_SendRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(detail_, other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_SendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_SendRsp_descriptor_;
  metadata.reflection = Red_SendRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Red_FetchExtraReq::Red_FetchExtraReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_FetchExtraReq::InitAsDefaultInstance() {
}

Red_FetchExtraReq::Red_FetchExtraReq(const Red_FetchExtraReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_FetchExtraReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_FetchExtraReq::~Red_FetchExtraReq() {
  SharedDtor();
}

void Red_FetchExtraReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_FetchExtraReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_FetchExtraReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_FetchExtraReq_descriptor_;
}

const Red_FetchExtraReq& Red_FetchExtraReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_FetchExtraReq* Red_FetchExtraReq::default_instance_ = NULL;

Red_FetchExtraReq* Red_FetchExtraReq::New() const {
  return new Red_FetchExtraReq;
}

void Red_FetchExtraReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_FetchExtraReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Red_FetchExtraReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_FetchExtraReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_FetchExtraReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_FetchExtraReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_FetchExtraReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_FetchExtraReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_FetchExtraReq::MergeFrom(const Red_FetchExtraReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_FetchExtraReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_FetchExtraReq::CopyFrom(const Red_FetchExtraReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_FetchExtraReq::IsInitialized() const {

  return true;
}

void Red_FetchExtraReq::Swap(Red_FetchExtraReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_FetchExtraReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_FetchExtraReq_descriptor_;
  metadata.reflection = Red_FetchExtraReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_FetchExtraRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Red_FetchExtraRsp::Red_FetchExtraRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_FetchExtraRsp::InitAsDefaultInstance() {
}

Red_FetchExtraRsp::Red_FetchExtraRsp(const Red_FetchExtraRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_FetchExtraRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_FetchExtraRsp::~Red_FetchExtraRsp() {
  SharedDtor();
}

void Red_FetchExtraRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_FetchExtraRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_FetchExtraRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_FetchExtraRsp_descriptor_;
}

const Red_FetchExtraRsp& Red_FetchExtraRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_FetchExtraRsp* Red_FetchExtraRsp::default_instance_ = NULL;

Red_FetchExtraRsp* Red_FetchExtraRsp::New() const {
  return new Red_FetchExtraRsp;
}

void Red_FetchExtraRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_FetchExtraRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_FetchExtraRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_FetchExtraRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_FetchExtraRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_FetchExtraRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_FetchExtraRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_FetchExtraRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_FetchExtraRsp::MergeFrom(const Red_FetchExtraRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_FetchExtraRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_FetchExtraRsp::CopyFrom(const Red_FetchExtraRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_FetchExtraRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Red_FetchExtraRsp::Swap(Red_FetchExtraRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_FetchExtraRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_FetchExtraRsp_descriptor_;
  metadata.reflection = Red_FetchExtraRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_UpdateSendListRsp::kCfgidLstFieldNumber;
#endif  // !_MSC_VER

Red_UpdateSendListRsp::Red_UpdateSendListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_UpdateSendListRsp::InitAsDefaultInstance() {
}

Red_UpdateSendListRsp::Red_UpdateSendListRsp(const Red_UpdateSendListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_UpdateSendListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_UpdateSendListRsp::~Red_UpdateSendListRsp() {
  SharedDtor();
}

void Red_UpdateSendListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_UpdateSendListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_UpdateSendListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_UpdateSendListRsp_descriptor_;
}

const Red_UpdateSendListRsp& Red_UpdateSendListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_UpdateSendListRsp* Red_UpdateSendListRsp::default_instance_ = NULL;

Red_UpdateSendListRsp* Red_UpdateSendListRsp::New() const {
  return new Red_UpdateSendListRsp;
}

void Red_UpdateSendListRsp::Clear() {
  cfgid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_UpdateSendListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cfgid_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cfgid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cfgid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cfgid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_UpdateSendListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cfgid_lst = 1;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cfgid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_UpdateSendListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cfgid_lst = 1;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cfgid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_UpdateSendListRsp::ByteSize() const {
  int total_size = 0;

  // repeated int32 cfgid_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cfgid_lst(i));
    }
    total_size += 1 * this->cfgid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_UpdateSendListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_UpdateSendListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_UpdateSendListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_UpdateSendListRsp::MergeFrom(const Red_UpdateSendListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgid_lst_.MergeFrom(from.cfgid_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_UpdateSendListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_UpdateSendListRsp::CopyFrom(const Red_UpdateSendListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_UpdateSendListRsp::IsInitialized() const {

  return true;
}

void Red_UpdateSendListRsp::Swap(Red_UpdateSendListRsp* other) {
  if (other != this) {
    cfgid_lst_.Swap(&other->cfgid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_UpdateSendListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_UpdateSendListRsp_descriptor_;
  metadata.reflection = Red_UpdateSendListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_LCSendReq::kCidFieldNumber;
const int Red_LCSendReq::kIdxFieldNumber;
const int Red_LCSendReq::kCfgidFieldNumber;
const int Red_LCSendReq::kWordFieldNumber;
#endif  // !_MSC_VER

Red_LCSendReq::Red_LCSendReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_LCSendReq::InitAsDefaultInstance() {
}

Red_LCSendReq::Red_LCSendReq(const Red_LCSendReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_LCSendReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  idx_ = 0u;
  cfgid_ = 0u;
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_LCSendReq::~Red_LCSendReq() {
  SharedDtor();
}

void Red_LCSendReq::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
  }
}

void Red_LCSendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_LCSendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_LCSendReq_descriptor_;
}

const Red_LCSendReq& Red_LCSendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_LCSendReq* Red_LCSendReq::default_instance_ = NULL;

Red_LCSendReq* Red_LCSendReq::New() const {
  return new Red_LCSendReq;
}

void Red_LCSendReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    idx_ = 0u;
    cfgid_ = 0u;
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_LCSendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idx;
        break;
      }

      // optional uint32 idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_word;
        break;
      }

      // optional bytes word = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_LCSendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional uint32 cfgid = 3;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cfgid(), output);
  }

  // optional bytes word = 4;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->word(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_LCSendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 idx = 2;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional uint32 cfgid = 3;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cfgid(), target);
  }

  // optional bytes word = 4;
  if (has_word()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->word(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_LCSendReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 idx = 2;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional uint32 cfgid = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // optional bytes word = 4;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->word());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_LCSendReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_LCSendReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_LCSendReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_LCSendReq::MergeFrom(const Red_LCSendReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_LCSendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_LCSendReq::CopyFrom(const Red_LCSendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_LCSendReq::IsInitialized() const {

  return true;
}

void Red_LCSendReq::Swap(Red_LCSendReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(word_, other->word_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_LCSendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_LCSendReq_descriptor_;
  metadata.reflection = Red_LCSendReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_CLFetchRsp::kCidFieldNumber;
const int Red_CLFetchRsp::kBdiaFieldNumber;
const int Red_CLFetchRsp::kMagicFieldNumber;
const int Red_CLFetchRsp::kTypeFieldNumber;
const int Red_CLFetchRsp::kCfgidFieldNumber;
#endif  // !_MSC_VER

Red_CLFetchRsp::Red_CLFetchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_CLFetchRsp::InitAsDefaultInstance() {
}

Red_CLFetchRsp::Red_CLFetchRsp(const Red_CLFetchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_CLFetchRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  bdia_ = GOOGLE_LONGLONG(0);
  magic_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  cfgid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_CLFetchRsp::~Red_CLFetchRsp() {
  SharedDtor();
}

void Red_CLFetchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_CLFetchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_CLFetchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_CLFetchRsp_descriptor_;
}

const Red_CLFetchRsp& Red_CLFetchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_CLFetchRsp* Red_CLFetchRsp::default_instance_ = NULL;

Red_CLFetchRsp* Red_CLFetchRsp::New() const {
  return new Red_CLFetchRsp;
}

void Red_CLFetchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    bdia_ = GOOGLE_LONGLONG(0);
    magic_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    cfgid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_CLFetchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bdia;
        break;
      }

      // optional int64 bdia = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_magic;
        break;
      }

      // optional int64 magic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cfgid;
        break;
      }

      // optional int32 cfgid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_CLFetchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int64 bdia = 2;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bdia(), output);
  }

  // optional int64 magic = 3;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->magic(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 cfgid = 5;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cfgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_CLFetchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int64 bdia = 2;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bdia(), target);
  }

  // optional int64 magic = 3;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->magic(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 cfgid = 5;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cfgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_CLFetchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int64 bdia = 2;
    if (has_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bdia());
    }

    // optional int64 magic = 3;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 cfgid = 5;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_CLFetchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_CLFetchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_CLFetchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_CLFetchRsp::MergeFrom(const Red_CLFetchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_CLFetchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_CLFetchRsp::CopyFrom(const Red_CLFetchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_CLFetchRsp::IsInitialized() const {

  return true;
}

void Red_CLFetchRsp::Swap(Red_CLFetchRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(type_, other->type_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_CLFetchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_CLFetchRsp_descriptor_;
  metadata.reflection = Red_CLFetchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_CLSendFailRsp::kCidFieldNumber;
const int Red_CLSendFailRsp::kCfgidFieldNumber;
#endif  // !_MSC_VER

Red_CLSendFailRsp::Red_CLSendFailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_CLSendFailRsp::InitAsDefaultInstance() {
}

Red_CLSendFailRsp::Red_CLSendFailRsp(const Red_CLSendFailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_CLSendFailRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  cfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_CLSendFailRsp::~Red_CLSendFailRsp() {
  SharedDtor();
}

void Red_CLSendFailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_CLSendFailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_CLSendFailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_CLSendFailRsp_descriptor_;
}

const Red_CLSendFailRsp& Red_CLSendFailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_CLSendFailRsp* Red_CLSendFailRsp::default_instance_ = NULL;

Red_CLSendFailRsp* Red_CLSendFailRsp::New() const {
  return new Red_CLSendFailRsp;
}

void Red_CLSendFailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    cfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_CLSendFailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional uint32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_CLSendFailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_CLSendFailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cfgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_CLSendFailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_CLSendFailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_CLSendFailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_CLSendFailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_CLSendFailRsp::MergeFrom(const Red_CLSendFailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_CLSendFailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_CLSendFailRsp::CopyFrom(const Red_CLSendFailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_CLSendFailRsp::IsInitialized() const {

  return true;
}

void Red_CLSendFailRsp::Swap(Red_CLSendFailRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_CLSendFailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_CLSendFailRsp_descriptor_;
  metadata.reflection = Red_CLSendFailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_LCRechargeRsp::kCidFieldNumber;
const int Red_LCRechargeRsp::kCfgidLstFieldNumber;
#endif  // !_MSC_VER

Red_LCRechargeRsp::Red_LCRechargeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_LCRechargeRsp::InitAsDefaultInstance() {
}

Red_LCRechargeRsp::Red_LCRechargeRsp(const Red_LCRechargeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_LCRechargeRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_LCRechargeRsp::~Red_LCRechargeRsp() {
  SharedDtor();
}

void Red_LCRechargeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_LCRechargeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_LCRechargeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_LCRechargeRsp_descriptor_;
}

const Red_LCRechargeRsp& Red_LCRechargeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_LCRechargeRsp* Red_LCRechargeRsp::default_instance_ = NULL;

Red_LCRechargeRsp* Red_LCRechargeRsp::New() const {
  return new Red_LCRechargeRsp;
}

void Red_LCRechargeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  cfgid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_LCRechargeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid_lst;
        break;
      }

      // repeated uint32 cfgid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cfgid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cfgid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_LCRechargeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated uint32 cfgid_lst = 2;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cfgid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_LCRechargeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated uint32 cfgid_lst = 2;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cfgid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_LCRechargeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated uint32 cfgid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cfgid_lst(i));
    }
    total_size += 1 * this->cfgid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_LCRechargeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_LCRechargeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_LCRechargeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_LCRechargeRsp::MergeFrom(const Red_LCRechargeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgid_lst_.MergeFrom(from.cfgid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_LCRechargeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_LCRechargeRsp::CopyFrom(const Red_LCRechargeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_LCRechargeRsp::IsInitialized() const {

  return true;
}

void Red_LCRechargeRsp::Swap(Red_LCRechargeRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    cfgid_lst_.Swap(&other->cfgid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_LCRechargeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_LCRechargeRsp_descriptor_;
  metadata.reflection = Red_LCRechargeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Red_CLTriggerRedRsp::kCidFieldNumber;
const int Red_CLTriggerRedRsp::kCfgidLstFieldNumber;
#endif  // !_MSC_VER

Red_CLTriggerRedRsp::Red_CLTriggerRedRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Red_CLTriggerRedRsp::InitAsDefaultInstance() {
}

Red_CLTriggerRedRsp::Red_CLTriggerRedRsp(const Red_CLTriggerRedRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Red_CLTriggerRedRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Red_CLTriggerRedRsp::~Red_CLTriggerRedRsp() {
  SharedDtor();
}

void Red_CLTriggerRedRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Red_CLTriggerRedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Red_CLTriggerRedRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Red_CLTriggerRedRsp_descriptor_;
}

const Red_CLTriggerRedRsp& Red_CLTriggerRedRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Red_2eproto();
  return *default_instance_;
}

Red_CLTriggerRedRsp* Red_CLTriggerRedRsp::default_instance_ = NULL;

Red_CLTriggerRedRsp* Red_CLTriggerRedRsp::New() const {
  return new Red_CLTriggerRedRsp;
}

void Red_CLTriggerRedRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  cfgid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Red_CLTriggerRedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid_lst;
        break;
      }

      // repeated uint32 cfgid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cfgid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cfgid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Red_CLTriggerRedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated uint32 cfgid_lst = 2;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cfgid_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Red_CLTriggerRedRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated uint32 cfgid_lst = 2;
  for (int i = 0; i < this->cfgid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cfgid_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Red_CLTriggerRedRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated uint32 cfgid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cfgid_lst(i));
    }
    total_size += 1 * this->cfgid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Red_CLTriggerRedRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Red_CLTriggerRedRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Red_CLTriggerRedRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Red_CLTriggerRedRsp::MergeFrom(const Red_CLTriggerRedRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgid_lst_.MergeFrom(from.cfgid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Red_CLTriggerRedRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Red_CLTriggerRedRsp::CopyFrom(const Red_CLTriggerRedRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Red_CLTriggerRedRsp::IsInitialized() const {

  return true;
}

void Red_CLTriggerRedRsp::Swap(Red_CLTriggerRedRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    cfgid_lst_.Swap(&other->cfgid_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Red_CLTriggerRedRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Red_CLTriggerRedRsp_descriptor_;
  metadata.reflection = Red_CLTriggerRedRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
