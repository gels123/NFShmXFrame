// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Festival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Festival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FestivalFestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalFestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalFestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalFestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_love_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_love_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_love_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_love_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_love_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_love_rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_love_rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_love_rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_love_rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_love_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_love_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_love_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_love_taskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_love_taskreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_taskreward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_love_taskreward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalPeriodindex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalPeriodindex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalPeriodindex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalPeriodindex_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_bossfristkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_bossfristkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_bossfristkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_bossfristkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_severrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_severrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_severrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_severrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_severrank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_severrank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_severrank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_severrank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_collectwordCostDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_collectwordCostDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_collectword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_collectword_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_collectword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_collectword_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_sign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_sign_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_rechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_rechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rechange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_rechange_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_leiji_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_leiji_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_leiji_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_leiji_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_zadan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_zadan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_zadan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_zadan_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalZadanconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalZadanconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalZadanconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalZadanconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_turntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_turntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable_pool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_turntable_pool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable_pool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_turntable_pool_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_turntable_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_turntable_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_donate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_donate_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_sever_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_donate_sever_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_sever_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_donate_sever_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_donate_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_single_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_donate_single_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_donate_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_donate_task_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_online_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_online_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_online_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_online_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_rturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_rturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable_recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_rturntable_recharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable_recharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_rturntable_recharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable_recharge_ratio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_rturntable_recharge_ratio_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_rturntable_recharge_ratio_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_drawpize_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_drawpize_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize_pool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_drawpize_pool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize_pool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_drawpize_pool_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize_total_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_drawpize_total_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize_total_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_drawpize_total_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_totalrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_totalrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_totalrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_totalrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_dailytotalrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_dailytotalrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_dailytotalrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_dailytotalrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_play_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_play_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_play_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_play_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_reward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_play_reward_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_play_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_play_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_play_game_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FestivalMuban_play_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FestivalMuban_play_score_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FestivalMuban_play_score_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fFestival_2eproto() {
  protobuf_AddDesc_E_5fFestival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Festival.proto");
  GOOGLE_CHECK(file != NULL);
  E_FestivalFestival_descriptor_ = file->message_type(0);
  static const int E_FestivalFestival_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalFestival, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalFestival, m_type_),
  };
  E_FestivalFestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalFestival_descriptor_,
      E_FestivalFestival::default_instance_,
      E_FestivalFestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalFestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalFestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalFestival));
  Sheet_FestivalFestival_descriptor_ = file->message_type(1);
  static const int Sheet_FestivalFestival_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalFestival, e_festivalfestival_list_),
  };
  Sheet_FestivalFestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalFestival_descriptor_,
      Sheet_FestivalFestival::default_instance_,
      Sheet_FestivalFestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalFestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalFestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalFestival));
  E_FestivalTemplate_descriptor_ = file->message_type(2);
  static const int E_FestivalTemplate_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_festivalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_rechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_severtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_typearg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_periodtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_ifopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, m_timearg_),
  };
  E_FestivalTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalTemplate_descriptor_,
      E_FestivalTemplate::default_instance_,
      E_FestivalTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalTemplate));
  Sheet_FestivalTemplate_descriptor_ = file->message_type(3);
  static const int Sheet_FestivalTemplate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalTemplate, e_festivaltemplate_list_),
  };
  Sheet_FestivalTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalTemplate_descriptor_,
      Sheet_FestivalTemplate::default_instance_,
      Sheet_FestivalTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalTemplate));
  E_FestivalMuban_love_descriptor_ = file->message_type(4);
  static const int E_FestivalMuban_love_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_taskpointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_rankgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_taskgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, m_taskrewardgroup_),
  };
  E_FestivalMuban_love_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_love_descriptor_,
      E_FestivalMuban_love::default_instance_,
      E_FestivalMuban_love_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_love));
  Sheet_FestivalMuban_love_descriptor_ = file->message_type(5);
  static const int Sheet_FestivalMuban_love_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love, e_festivalmuban_love_list_),
  };
  Sheet_FestivalMuban_love_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_love_descriptor_,
      Sheet_FestivalMuban_love::default_instance_,
      Sheet_FestivalMuban_love_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_love));
  E_FestivalMuban_love_rank_descriptor_ = file->message_type(6);
  static const int E_FestivalMuban_love_rank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, m_rewardshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, m_datagroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, m_ranktype_),
  };
  E_FestivalMuban_love_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_love_rank_descriptor_,
      E_FestivalMuban_love_rank::default_instance_,
      E_FestivalMuban_love_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_love_rank));
  Sheet_FestivalMuban_love_rank_descriptor_ = file->message_type(7);
  static const int Sheet_FestivalMuban_love_rank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank, e_festivalmuban_love_rank_list_),
  };
  Sheet_FestivalMuban_love_rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_love_rank_descriptor_,
      Sheet_FestivalMuban_love_rank::default_instance_,
      Sheet_FestivalMuban_love_rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_love_rank));
  E_FestivalMuban_love_rank_data_descriptor_ = file->message_type(8);
  static const int E_FestivalMuban_love_rank_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_rankvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, m_boxid_),
  };
  E_FestivalMuban_love_rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_love_rank_data_descriptor_,
      E_FestivalMuban_love_rank_data::default_instance_,
      E_FestivalMuban_love_rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_love_rank_data));
  Sheet_FestivalMuban_love_rank_data_descriptor_ = file->message_type(9);
  static const int Sheet_FestivalMuban_love_rank_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank_data, e_festivalmuban_love_rank_data_list_),
  };
  Sheet_FestivalMuban_love_rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_love_rank_data_descriptor_,
      Sheet_FestivalMuban_love_rank_data::default_instance_,
      Sheet_FestivalMuban_love_rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_love_rank_data));
  E_FestivalMuban_love_task_descriptor_ = file->message_type(10);
  static const int E_FestivalMuban_love_task_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_rewardtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, m_param_),
  };
  E_FestivalMuban_love_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_love_task_descriptor_,
      E_FestivalMuban_love_task::default_instance_,
      E_FestivalMuban_love_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_love_task));
  Sheet_FestivalMuban_love_task_descriptor_ = file->message_type(11);
  static const int Sheet_FestivalMuban_love_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_task, e_festivalmuban_love_task_list_),
  };
  Sheet_FestivalMuban_love_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_love_task_descriptor_,
      Sheet_FestivalMuban_love_task::default_instance_,
      Sheet_FestivalMuban_love_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_love_task));
  E_FestivalMuban_love_taskreward_descriptor_ = file->message_type(12);
  static const int E_FestivalMuban_love_taskreward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, m_box_),
  };
  E_FestivalMuban_love_taskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_love_taskreward_descriptor_,
      E_FestivalMuban_love_taskreward::default_instance_,
      E_FestivalMuban_love_taskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_love_taskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_love_taskreward));
  Sheet_FestivalMuban_love_taskreward_descriptor_ = file->message_type(13);
  static const int Sheet_FestivalMuban_love_taskreward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_taskreward, e_festivalmuban_love_taskreward_list_),
  };
  Sheet_FestivalMuban_love_taskreward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_love_taskreward_descriptor_,
      Sheet_FestivalMuban_love_taskreward::default_instance_,
      Sheet_FestivalMuban_love_taskreward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_taskreward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_love_taskreward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_love_taskreward));
  E_FestivalPeriodindex_descriptor_ = file->message_type(14);
  static const int E_FestivalPeriodindex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalPeriodindex, m_minorigalday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalPeriodindex, m_period_),
  };
  E_FestivalPeriodindex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalPeriodindex_descriptor_,
      E_FestivalPeriodindex::default_instance_,
      E_FestivalPeriodindex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalPeriodindex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalPeriodindex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalPeriodindex));
  Sheet_FestivalPeriodindex_descriptor_ = file->message_type(15);
  static const int Sheet_FestivalPeriodindex_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalPeriodindex, e_festivalperiodindex_list_),
  };
  Sheet_FestivalPeriodindex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalPeriodindex_descriptor_,
      Sheet_FestivalPeriodindex::default_instance_,
      Sheet_FestivalPeriodindex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalPeriodindex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalPeriodindex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalPeriodindex));
  E_FestivalMuban_bossfristkill_descriptor_ = file->message_type(16);
  static const int E_FestivalMuban_bossfristkill_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_fristkillreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_killreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, m_fristkillpacket_),
  };
  E_FestivalMuban_bossfristkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_bossfristkill_descriptor_,
      E_FestivalMuban_bossfristkill::default_instance_,
      E_FestivalMuban_bossfristkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_bossfristkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_bossfristkill));
  Sheet_FestivalMuban_bossfristkill_descriptor_ = file->message_type(17);
  static const int Sheet_FestivalMuban_bossfristkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_bossfristkill, e_festivalmuban_bossfristkill_list_),
  };
  Sheet_FestivalMuban_bossfristkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_bossfristkill_descriptor_,
      Sheet_FestivalMuban_bossfristkill::default_instance_,
      Sheet_FestivalMuban_bossfristkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_bossfristkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_bossfristkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_bossfristkill));
  E_FestivalMuban_severrank_descriptor_ = file->message_type(18);
  static const int E_FestivalMuban_severrank_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_openday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_closeday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_championtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_rewardshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_datagroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_ranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_rankgift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_gifticon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_giftitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_originalprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_ratioshow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, m_redpointbox_),
  };
  E_FestivalMuban_severrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_severrank_descriptor_,
      E_FestivalMuban_severrank::default_instance_,
      E_FestivalMuban_severrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_severrank));
  Sheet_FestivalMuban_severrank_descriptor_ = file->message_type(19);
  static const int Sheet_FestivalMuban_severrank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank, e_festivalmuban_severrank_list_),
  };
  Sheet_FestivalMuban_severrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_severrank_descriptor_,
      Sheet_FestivalMuban_severrank::default_instance_,
      Sheet_FestivalMuban_severrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_severrank));
  E_FestivalMuban_severrank_data_descriptor_ = file->message_type(20);
  static const int E_FestivalMuban_severrank_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_maxrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_minrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_rankvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, m_boxid_),
  };
  E_FestivalMuban_severrank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_severrank_data_descriptor_,
      E_FestivalMuban_severrank_data::default_instance_,
      E_FestivalMuban_severrank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_severrank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_severrank_data));
  Sheet_FestivalMuban_severrank_data_descriptor_ = file->message_type(21);
  static const int Sheet_FestivalMuban_severrank_data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank_data, e_festivalmuban_severrank_data_list_),
  };
  Sheet_FestivalMuban_severrank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_severrank_data_descriptor_,
      Sheet_FestivalMuban_severrank_data::default_instance_,
      Sheet_FestivalMuban_severrank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_severrank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_severrank_data));
  E_FestivalMuban_collectwordCostDesc_descriptor_ = file->message_type(22);
  static const int E_FestivalMuban_collectwordCostDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectwordCostDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectwordCostDesc, m_id_),
  };
  E_FestivalMuban_collectwordCostDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_collectwordCostDesc_descriptor_,
      E_FestivalMuban_collectwordCostDesc::default_instance_,
      E_FestivalMuban_collectwordCostDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectwordCostDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectwordCostDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_collectwordCostDesc));
  E_FestivalMuban_collectword_descriptor_ = file->message_type(23);
  static const int E_FestivalMuban_collectword_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_exchange_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_exchange_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, m_cost_),
  };
  E_FestivalMuban_collectword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_collectword_descriptor_,
      E_FestivalMuban_collectword::default_instance_,
      E_FestivalMuban_collectword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_collectword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_collectword));
  Sheet_FestivalMuban_collectword_descriptor_ = file->message_type(24);
  static const int Sheet_FestivalMuban_collectword_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_collectword, e_festivalmuban_collectword_list_),
  };
  Sheet_FestivalMuban_collectword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_collectword_descriptor_,
      Sheet_FestivalMuban_collectword::default_instance_,
      Sheet_FestivalMuban_collectword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_collectword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_collectword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_collectword));
  E_FestivalMuban_sign_descriptor_ = file->message_type(25);
  static const int E_FestivalMuban_sign_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_sign, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_sign, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_sign, m_boxid_),
  };
  E_FestivalMuban_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_sign_descriptor_,
      E_FestivalMuban_sign::default_instance_,
      E_FestivalMuban_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_sign));
  Sheet_FestivalMuban_sign_descriptor_ = file->message_type(26);
  static const int Sheet_FestivalMuban_sign_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_sign, e_festivalmuban_sign_list_),
  };
  Sheet_FestivalMuban_sign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_sign_descriptor_,
      Sheet_FestivalMuban_sign::default_instance_,
      Sheet_FestivalMuban_sign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_sign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_sign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_sign));
  E_FestivalMuban_shop_descriptor_ = file->message_type(27);
  static const int E_FestivalMuban_shop_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_box_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_startime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, m_durtime_),
  };
  E_FestivalMuban_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_shop_descriptor_,
      E_FestivalMuban_shop::default_instance_,
      E_FestivalMuban_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_shop));
  Sheet_FestivalMuban_shop_descriptor_ = file->message_type(28);
  static const int Sheet_FestivalMuban_shop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_shop, e_festivalmuban_shop_list_),
  };
  Sheet_FestivalMuban_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_shop_descriptor_,
      Sheet_FestivalMuban_shop::default_instance_,
      Sheet_FestivalMuban_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_shop));
  E_FestivalMuban_rechange_descriptor_ = file->message_type(29);
  static const int E_FestivalMuban_rechange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_rebate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, m_typer_),
  };
  E_FestivalMuban_rechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_rechange_descriptor_,
      E_FestivalMuban_rechange::default_instance_,
      E_FestivalMuban_rechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_rechange));
  Sheet_FestivalMuban_rechange_descriptor_ = file->message_type(30);
  static const int Sheet_FestivalMuban_rechange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rechange, e_festivalmuban_rechange_list_),
  };
  Sheet_FestivalMuban_rechange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_rechange_descriptor_,
      Sheet_FestivalMuban_rechange::default_instance_,
      Sheet_FestivalMuban_rechange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rechange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rechange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_rechange));
  E_FestivalMuban_leiji_descriptor_ = file->message_type(31);
  static const int E_FestivalMuban_leiji_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, m_leiji_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, m_boxid_),
  };
  E_FestivalMuban_leiji_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_leiji_descriptor_,
      E_FestivalMuban_leiji::default_instance_,
      E_FestivalMuban_leiji_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_leiji, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_leiji));
  Sheet_FestivalMuban_leiji_descriptor_ = file->message_type(32);
  static const int Sheet_FestivalMuban_leiji_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_leiji, e_festivalmuban_leiji_list_),
  };
  Sheet_FestivalMuban_leiji_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_leiji_descriptor_,
      Sheet_FestivalMuban_leiji::default_instance_,
      Sheet_FestivalMuban_leiji_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_leiji, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_leiji, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_leiji));
  E_FestivalMuban_zadan_descriptor_ = file->message_type(33);
  static const int E_FestivalMuban_zadan_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, m_probability_),
  };
  E_FestivalMuban_zadan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_zadan_descriptor_,
      E_FestivalMuban_zadan::default_instance_,
      E_FestivalMuban_zadan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_zadan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_zadan));
  Sheet_FestivalMuban_zadan_descriptor_ = file->message_type(34);
  static const int Sheet_FestivalMuban_zadan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_zadan, e_festivalmuban_zadan_list_),
  };
  Sheet_FestivalMuban_zadan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_zadan_descriptor_,
      Sheet_FestivalMuban_zadan::default_instance_,
      Sheet_FestivalMuban_zadan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_zadan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_zadan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_zadan));
  E_FestivalZadanconstant_descriptor_ = file->message_type(35);
  static const int E_FestivalZadanconstant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, m_costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, m_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, m_free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, m_currency_),
  };
  E_FestivalZadanconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalZadanconstant_descriptor_,
      E_FestivalZadanconstant::default_instance_,
      E_FestivalZadanconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalZadanconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalZadanconstant));
  Sheet_FestivalZadanconstant_descriptor_ = file->message_type(36);
  static const int Sheet_FestivalZadanconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalZadanconstant, e_festivalzadanconstant_list_),
  };
  Sheet_FestivalZadanconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalZadanconstant_descriptor_,
      Sheet_FestivalZadanconstant::default_instance_,
      Sheet_FestivalZadanconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalZadanconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalZadanconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalZadanconstant));
  E_FestivalMuban_turntable_descriptor_ = file->message_type(37);
  static const int E_FestivalMuban_turntable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, m_poolgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, m_taskgroup_),
  };
  E_FestivalMuban_turntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_turntable_descriptor_,
      E_FestivalMuban_turntable::default_instance_,
      E_FestivalMuban_turntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_turntable));
  Sheet_FestivalMuban_turntable_descriptor_ = file->message_type(38);
  static const int Sheet_FestivalMuban_turntable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable, e_festivalmuban_turntable_list_),
  };
  Sheet_FestivalMuban_turntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_turntable_descriptor_,
      Sheet_FestivalMuban_turntable::default_instance_,
      Sheet_FestivalMuban_turntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_turntable));
  E_FestivalMuban_turntable_pool_descriptor_ = file->message_type(39);
  static const int E_FestivalMuban_turntable_pool_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, m_weight_),
  };
  E_FestivalMuban_turntable_pool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_turntable_pool_descriptor_,
      E_FestivalMuban_turntable_pool::default_instance_,
      E_FestivalMuban_turntable_pool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_pool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_turntable_pool));
  Sheet_FestivalMuban_turntable_pool_descriptor_ = file->message_type(40);
  static const int Sheet_FestivalMuban_turntable_pool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_pool, e_festivalmuban_turntable_pool_list_),
  };
  Sheet_FestivalMuban_turntable_pool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_turntable_pool_descriptor_,
      Sheet_FestivalMuban_turntable_pool::default_instance_,
      Sheet_FestivalMuban_turntable_pool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_pool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_pool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_turntable_pool));
  E_FestivalMuban_turntable_task_descriptor_ = file->message_type(41);
  static const int E_FestivalMuban_turntable_task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_link_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_rewardtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, m_param_),
  };
  E_FestivalMuban_turntable_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_turntable_task_descriptor_,
      E_FestivalMuban_turntable_task::default_instance_,
      E_FestivalMuban_turntable_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_turntable_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_turntable_task));
  Sheet_FestivalMuban_turntable_task_descriptor_ = file->message_type(42);
  static const int Sheet_FestivalMuban_turntable_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_task, e_festivalmuban_turntable_task_list_),
  };
  Sheet_FestivalMuban_turntable_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_turntable_task_descriptor_,
      Sheet_FestivalMuban_turntable_task::default_instance_,
      Sheet_FestivalMuban_turntable_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_turntable_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_turntable_task));
  E_FestivalMuban_donate_descriptor_ = file->message_type(43);
  static const int E_FestivalMuban_donate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_donateitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_donatereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_severreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_singlereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, m_taskgroupid_),
  };
  E_FestivalMuban_donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_donate_descriptor_,
      E_FestivalMuban_donate::default_instance_,
      E_FestivalMuban_donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_donate));
  Sheet_FestivalMuban_donate_descriptor_ = file->message_type(44);
  static const int Sheet_FestivalMuban_donate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate, e_festivalmuban_donate_list_),
  };
  Sheet_FestivalMuban_donate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_donate_descriptor_,
      Sheet_FestivalMuban_donate::default_instance_,
      Sheet_FestivalMuban_donate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_donate));
  E_FestivalMuban_donate_sever_descriptor_ = file->message_type(45);
  static const int E_FestivalMuban_donate_sever_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_typearg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, m_num_),
  };
  E_FestivalMuban_donate_sever_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_donate_sever_descriptor_,
      E_FestivalMuban_donate_sever::default_instance_,
      E_FestivalMuban_donate_sever_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_sever, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_donate_sever));
  Sheet_FestivalMuban_donate_sever_descriptor_ = file->message_type(46);
  static const int Sheet_FestivalMuban_donate_sever_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_sever, e_festivalmuban_donate_sever_list_),
  };
  Sheet_FestivalMuban_donate_sever_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_donate_sever_descriptor_,
      Sheet_FestivalMuban_donate_sever::default_instance_,
      Sheet_FestivalMuban_donate_sever_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_sever, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_sever, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_donate_sever));
  E_FestivalMuban_donate_single_descriptor_ = file->message_type(47);
  static const int E_FestivalMuban_donate_single_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, m_num_),
  };
  E_FestivalMuban_donate_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_donate_single_descriptor_,
      E_FestivalMuban_donate_single::default_instance_,
      E_FestivalMuban_donate_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_donate_single));
  Sheet_FestivalMuban_donate_single_descriptor_ = file->message_type(48);
  static const int Sheet_FestivalMuban_donate_single_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_single, e_festivalmuban_donate_single_list_),
  };
  Sheet_FestivalMuban_donate_single_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_donate_single_descriptor_,
      Sheet_FestivalMuban_donate_single::default_instance_,
      Sheet_FestivalMuban_donate_single_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_single, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_single, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_donate_single));
  E_FestivalMuban_donate_task_descriptor_ = file->message_type(49);
  static const int E_FestivalMuban_donate_task_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, m_param_),
  };
  E_FestivalMuban_donate_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_donate_task_descriptor_,
      E_FestivalMuban_donate_task::default_instance_,
      E_FestivalMuban_donate_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_donate_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_donate_task));
  Sheet_FestivalMuban_donate_task_descriptor_ = file->message_type(50);
  static const int Sheet_FestivalMuban_donate_task_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_task, e_festivalmuban_donate_task_list_),
  };
  Sheet_FestivalMuban_donate_task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_donate_task_descriptor_,
      Sheet_FestivalMuban_donate_task::default_instance_,
      Sheet_FestivalMuban_donate_task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_donate_task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_donate_task));
  E_FestivalMuban_online_descriptor_ = file->message_type(51);
  static const int E_FestivalMuban_online_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_timestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_timeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, m_vip_),
  };
  E_FestivalMuban_online_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_online_descriptor_,
      E_FestivalMuban_online::default_instance_,
      E_FestivalMuban_online_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_online, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_online));
  Sheet_FestivalMuban_online_descriptor_ = file->message_type(52);
  static const int Sheet_FestivalMuban_online_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_online, e_festivalmuban_online_list_),
  };
  Sheet_FestivalMuban_online_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_online_descriptor_,
      Sheet_FestivalMuban_online::default_instance_,
      Sheet_FestivalMuban_online_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_online, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_online, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_online));
  E_FestivalMuban_rturntable_descriptor_ = file->message_type(53);
  static const int E_FestivalMuban_rturntable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable, m_rechargegroupid_),
  };
  E_FestivalMuban_rturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_rturntable_descriptor_,
      E_FestivalMuban_rturntable::default_instance_,
      E_FestivalMuban_rturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_rturntable));
  Sheet_FestivalMuban_rturntable_descriptor_ = file->message_type(54);
  static const int Sheet_FestivalMuban_rturntable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable, e_festivalmuban_rturntable_list_),
  };
  Sheet_FestivalMuban_rturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_rturntable_descriptor_,
      Sheet_FestivalMuban_rturntable::default_instance_,
      Sheet_FestivalMuban_rturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_rturntable));
  E_FestivalMuban_rturntable_recharge_descriptor_ = file->message_type(55);
  static const int E_FestivalMuban_rturntable_recharge_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, m_rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, m_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, m_ratiogroupid_),
  };
  E_FestivalMuban_rturntable_recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_rturntable_recharge_descriptor_,
      E_FestivalMuban_rturntable_recharge::default_instance_,
      E_FestivalMuban_rturntable_recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_rturntable_recharge));
  Sheet_FestivalMuban_rturntable_recharge_descriptor_ = file->message_type(56);
  static const int Sheet_FestivalMuban_rturntable_recharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge, e_festivalmuban_rturntable_recharge_list_),
  };
  Sheet_FestivalMuban_rturntable_recharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_rturntable_recharge_descriptor_,
      Sheet_FestivalMuban_rturntable_recharge::default_instance_,
      Sheet_FestivalMuban_rturntable_recharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_rturntable_recharge));
  E_FestivalMuban_rturntable_recharge_ratio_descriptor_ = file->message_type(57);
  static const int E_FestivalMuban_rturntable_recharge_ratio_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, m_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, m_weight_),
  };
  E_FestivalMuban_rturntable_recharge_ratio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_rturntable_recharge_ratio_descriptor_,
      E_FestivalMuban_rturntable_recharge_ratio::default_instance_,
      E_FestivalMuban_rturntable_recharge_ratio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_rturntable_recharge_ratio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_rturntable_recharge_ratio));
  Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_ = file->message_type(58);
  static const int Sheet_FestivalMuban_rturntable_recharge_ratio_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge_ratio, e_festivalmuban_rturntable_recharge_ratio_list_),
  };
  Sheet_FestivalMuban_rturntable_recharge_ratio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_,
      Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance_,
      Sheet_FestivalMuban_rturntable_recharge_ratio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge_ratio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_rturntable_recharge_ratio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_rturntable_recharge_ratio));
  E_FestivalMuban_drawpize_descriptor_ = file->message_type(59);
  static const int E_FestivalMuban_drawpize_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_poolgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_totalgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_severlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, m_protecttime_),
  };
  E_FestivalMuban_drawpize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_drawpize_descriptor_,
      E_FestivalMuban_drawpize::default_instance_,
      E_FestivalMuban_drawpize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_drawpize));
  Sheet_FestivalMuban_drawpize_descriptor_ = file->message_type(60);
  static const int Sheet_FestivalMuban_drawpize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize, e_festivalmuban_drawpize_list_),
  };
  Sheet_FestivalMuban_drawpize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_drawpize_descriptor_,
      Sheet_FestivalMuban_drawpize::default_instance_,
      Sheet_FestivalMuban_drawpize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_drawpize));
  E_FestivalMuban_drawpize_pool_descriptor_ = file->message_type(61);
  static const int E_FestivalMuban_drawpize_pool_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_proweights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_timelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, m_record_),
  };
  E_FestivalMuban_drawpize_pool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_drawpize_pool_descriptor_,
      E_FestivalMuban_drawpize_pool::default_instance_,
      E_FestivalMuban_drawpize_pool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_pool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_drawpize_pool));
  Sheet_FestivalMuban_drawpize_pool_descriptor_ = file->message_type(62);
  static const int Sheet_FestivalMuban_drawpize_pool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_pool, e_festivalmuban_drawpize_pool_list_),
  };
  Sheet_FestivalMuban_drawpize_pool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_drawpize_pool_descriptor_,
      Sheet_FestivalMuban_drawpize_pool::default_instance_,
      Sheet_FestivalMuban_drawpize_pool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_pool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_pool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_drawpize_pool));
  E_FestivalMuban_drawpize_total_descriptor_ = file->message_type(63);
  static const int E_FestivalMuban_drawpize_total_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, m_num_),
  };
  E_FestivalMuban_drawpize_total_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_drawpize_total_descriptor_,
      E_FestivalMuban_drawpize_total::default_instance_,
      E_FestivalMuban_drawpize_total_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_drawpize_total, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_drawpize_total));
  Sheet_FestivalMuban_drawpize_total_descriptor_ = file->message_type(64);
  static const int Sheet_FestivalMuban_drawpize_total_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_total, e_festivalmuban_drawpize_total_list_),
  };
  Sheet_FestivalMuban_drawpize_total_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_drawpize_total_descriptor_,
      Sheet_FestivalMuban_drawpize_total::default_instance_,
      Sheet_FestivalMuban_drawpize_total_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_total, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_drawpize_total, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_drawpize_total));
  E_FestivalMuban_totalrecharge_descriptor_ = file->message_type(65);
  static const int E_FestivalMuban_totalrecharge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, m_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, m_boxid_),
  };
  E_FestivalMuban_totalrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_totalrecharge_descriptor_,
      E_FestivalMuban_totalrecharge::default_instance_,
      E_FestivalMuban_totalrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_totalrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_totalrecharge));
  Sheet_FestivalMuban_totalrecharge_descriptor_ = file->message_type(66);
  static const int Sheet_FestivalMuban_totalrecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_totalrecharge, e_festivalmuban_totalrecharge_list_),
  };
  Sheet_FestivalMuban_totalrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_totalrecharge_descriptor_,
      Sheet_FestivalMuban_totalrecharge::default_instance_,
      Sheet_FestivalMuban_totalrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_totalrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_totalrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_totalrecharge));
  E_FestivalMuban_dailytotalrecharge_descriptor_ = file->message_type(67);
  static const int E_FestivalMuban_dailytotalrecharge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, m_boxid_),
  };
  E_FestivalMuban_dailytotalrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_dailytotalrecharge_descriptor_,
      E_FestivalMuban_dailytotalrecharge::default_instance_,
      E_FestivalMuban_dailytotalrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_dailytotalrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_dailytotalrecharge));
  Sheet_FestivalMuban_dailytotalrecharge_descriptor_ = file->message_type(68);
  static const int Sheet_FestivalMuban_dailytotalrecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_dailytotalrecharge, e_festivalmuban_dailytotalrecharge_list_),
  };
  Sheet_FestivalMuban_dailytotalrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_dailytotalrecharge_descriptor_,
      Sheet_FestivalMuban_dailytotalrecharge::default_instance_,
      Sheet_FestivalMuban_dailytotalrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_dailytotalrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_dailytotalrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_dailytotalrecharge));
  E_FestivalMuban_play_descriptor_ = file->message_type(69);
  static const int E_FestivalMuban_play_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, m_period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, m_rewardgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, m_gamegroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, m_opentime_),
  };
  E_FestivalMuban_play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_play_descriptor_,
      E_FestivalMuban_play::default_instance_,
      E_FestivalMuban_play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_play));
  Sheet_FestivalMuban_play_descriptor_ = file->message_type(70);
  static const int Sheet_FestivalMuban_play_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play, e_festivalmuban_play_list_),
  };
  Sheet_FestivalMuban_play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_play_descriptor_,
      Sheet_FestivalMuban_play::default_instance_,
      Sheet_FestivalMuban_play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_play));
  E_FestivalMuban_play_reward_descriptor_ = file->message_type(71);
  static const int E_FestivalMuban_play_reward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, m_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, m_boxid_),
  };
  E_FestivalMuban_play_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_play_reward_descriptor_,
      E_FestivalMuban_play_reward::default_instance_,
      E_FestivalMuban_play_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_play_reward));
  Sheet_FestivalMuban_play_reward_descriptor_ = file->message_type(72);
  static const int Sheet_FestivalMuban_play_reward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_reward, e_festivalmuban_play_reward_list_),
  };
  Sheet_FestivalMuban_play_reward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_play_reward_descriptor_,
      Sheet_FestivalMuban_play_reward::default_instance_,
      Sheet_FestivalMuban_play_reward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_reward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_reward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_play_reward));
  E_FestivalMuban_play_game_descriptor_ = file->message_type(73);
  static const int E_FestivalMuban_play_game_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_playtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_rewardbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_pretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, m_playarg_),
  };
  E_FestivalMuban_play_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_play_game_descriptor_,
      E_FestivalMuban_play_game::default_instance_,
      E_FestivalMuban_play_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_play_game));
  Sheet_FestivalMuban_play_game_descriptor_ = file->message_type(74);
  static const int Sheet_FestivalMuban_play_game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_game, e_festivalmuban_play_game_list_),
  };
  Sheet_FestivalMuban_play_game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_play_game_descriptor_,
      Sheet_FestivalMuban_play_game::default_instance_,
      Sheet_FestivalMuban_play_game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_play_game));
  E_FestivalMuban_play_score_descriptor_ = file->message_type(75);
  static const int E_FestivalMuban_play_score_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, m_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, m_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, m_point_),
  };
  E_FestivalMuban_play_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FestivalMuban_play_score_descriptor_,
      E_FestivalMuban_play_score::default_instance_,
      E_FestivalMuban_play_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FestivalMuban_play_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FestivalMuban_play_score));
  Sheet_FestivalMuban_play_score_descriptor_ = file->message_type(76);
  static const int Sheet_FestivalMuban_play_score_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_score, e_festivalmuban_play_score_list_),
  };
  Sheet_FestivalMuban_play_score_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FestivalMuban_play_score_descriptor_,
      Sheet_FestivalMuban_play_score::default_instance_,
      Sheet_FestivalMuban_play_score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_score, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FestivalMuban_play_score, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FestivalMuban_play_score));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fFestival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalFestival_descriptor_, &E_FestivalFestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalFestival_descriptor_, &Sheet_FestivalFestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalTemplate_descriptor_, &E_FestivalTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalTemplate_descriptor_, &Sheet_FestivalTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_love_descriptor_, &E_FestivalMuban_love::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_love_descriptor_, &Sheet_FestivalMuban_love::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_love_rank_descriptor_, &E_FestivalMuban_love_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_love_rank_descriptor_, &Sheet_FestivalMuban_love_rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_love_rank_data_descriptor_, &E_FestivalMuban_love_rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_love_rank_data_descriptor_, &Sheet_FestivalMuban_love_rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_love_task_descriptor_, &E_FestivalMuban_love_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_love_task_descriptor_, &Sheet_FestivalMuban_love_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_love_taskreward_descriptor_, &E_FestivalMuban_love_taskreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_love_taskreward_descriptor_, &Sheet_FestivalMuban_love_taskreward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalPeriodindex_descriptor_, &E_FestivalPeriodindex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalPeriodindex_descriptor_, &Sheet_FestivalPeriodindex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_bossfristkill_descriptor_, &E_FestivalMuban_bossfristkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_bossfristkill_descriptor_, &Sheet_FestivalMuban_bossfristkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_severrank_descriptor_, &E_FestivalMuban_severrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_severrank_descriptor_, &Sheet_FestivalMuban_severrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_severrank_data_descriptor_, &E_FestivalMuban_severrank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_severrank_data_descriptor_, &Sheet_FestivalMuban_severrank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_collectwordCostDesc_descriptor_, &E_FestivalMuban_collectwordCostDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_collectword_descriptor_, &E_FestivalMuban_collectword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_collectword_descriptor_, &Sheet_FestivalMuban_collectword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_sign_descriptor_, &E_FestivalMuban_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_sign_descriptor_, &Sheet_FestivalMuban_sign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_shop_descriptor_, &E_FestivalMuban_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_shop_descriptor_, &Sheet_FestivalMuban_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_rechange_descriptor_, &E_FestivalMuban_rechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_rechange_descriptor_, &Sheet_FestivalMuban_rechange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_leiji_descriptor_, &E_FestivalMuban_leiji::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_leiji_descriptor_, &Sheet_FestivalMuban_leiji::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_zadan_descriptor_, &E_FestivalMuban_zadan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_zadan_descriptor_, &Sheet_FestivalMuban_zadan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalZadanconstant_descriptor_, &E_FestivalZadanconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalZadanconstant_descriptor_, &Sheet_FestivalZadanconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_turntable_descriptor_, &E_FestivalMuban_turntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_turntable_descriptor_, &Sheet_FestivalMuban_turntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_turntable_pool_descriptor_, &E_FestivalMuban_turntable_pool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_turntable_pool_descriptor_, &Sheet_FestivalMuban_turntable_pool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_turntable_task_descriptor_, &E_FestivalMuban_turntable_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_turntable_task_descriptor_, &Sheet_FestivalMuban_turntable_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_donate_descriptor_, &E_FestivalMuban_donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_donate_descriptor_, &Sheet_FestivalMuban_donate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_donate_sever_descriptor_, &E_FestivalMuban_donate_sever::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_donate_sever_descriptor_, &Sheet_FestivalMuban_donate_sever::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_donate_single_descriptor_, &E_FestivalMuban_donate_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_donate_single_descriptor_, &Sheet_FestivalMuban_donate_single::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_donate_task_descriptor_, &E_FestivalMuban_donate_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_donate_task_descriptor_, &Sheet_FestivalMuban_donate_task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_online_descriptor_, &E_FestivalMuban_online::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_online_descriptor_, &Sheet_FestivalMuban_online::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_rturntable_descriptor_, &E_FestivalMuban_rturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_rturntable_descriptor_, &Sheet_FestivalMuban_rturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_rturntable_recharge_descriptor_, &E_FestivalMuban_rturntable_recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_rturntable_recharge_descriptor_, &Sheet_FestivalMuban_rturntable_recharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_rturntable_recharge_ratio_descriptor_, &E_FestivalMuban_rturntable_recharge_ratio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_, &Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_drawpize_descriptor_, &E_FestivalMuban_drawpize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_drawpize_descriptor_, &Sheet_FestivalMuban_drawpize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_drawpize_pool_descriptor_, &E_FestivalMuban_drawpize_pool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_drawpize_pool_descriptor_, &Sheet_FestivalMuban_drawpize_pool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_drawpize_total_descriptor_, &E_FestivalMuban_drawpize_total::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_drawpize_total_descriptor_, &Sheet_FestivalMuban_drawpize_total::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_totalrecharge_descriptor_, &E_FestivalMuban_totalrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_totalrecharge_descriptor_, &Sheet_FestivalMuban_totalrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_dailytotalrecharge_descriptor_, &E_FestivalMuban_dailytotalrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_dailytotalrecharge_descriptor_, &Sheet_FestivalMuban_dailytotalrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_play_descriptor_, &E_FestivalMuban_play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_play_descriptor_, &Sheet_FestivalMuban_play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_play_reward_descriptor_, &E_FestivalMuban_play_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_play_reward_descriptor_, &Sheet_FestivalMuban_play_reward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_play_game_descriptor_, &E_FestivalMuban_play_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_play_game_descriptor_, &Sheet_FestivalMuban_play_game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FestivalMuban_play_score_descriptor_, &E_FestivalMuban_play_score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FestivalMuban_play_score_descriptor_, &Sheet_FestivalMuban_play_score::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fFestival_2eproto() {
  delete E_FestivalFestival::default_instance_;
  delete E_FestivalFestival_reflection_;
  delete Sheet_FestivalFestival::default_instance_;
  delete Sheet_FestivalFestival_reflection_;
  delete E_FestivalTemplate::default_instance_;
  delete E_FestivalTemplate_reflection_;
  delete Sheet_FestivalTemplate::default_instance_;
  delete Sheet_FestivalTemplate_reflection_;
  delete E_FestivalMuban_love::default_instance_;
  delete E_FestivalMuban_love_reflection_;
  delete Sheet_FestivalMuban_love::default_instance_;
  delete Sheet_FestivalMuban_love_reflection_;
  delete E_FestivalMuban_love_rank::default_instance_;
  delete E_FestivalMuban_love_rank_reflection_;
  delete Sheet_FestivalMuban_love_rank::default_instance_;
  delete Sheet_FestivalMuban_love_rank_reflection_;
  delete E_FestivalMuban_love_rank_data::default_instance_;
  delete E_FestivalMuban_love_rank_data_reflection_;
  delete Sheet_FestivalMuban_love_rank_data::default_instance_;
  delete Sheet_FestivalMuban_love_rank_data_reflection_;
  delete E_FestivalMuban_love_task::default_instance_;
  delete E_FestivalMuban_love_task_reflection_;
  delete Sheet_FestivalMuban_love_task::default_instance_;
  delete Sheet_FestivalMuban_love_task_reflection_;
  delete E_FestivalMuban_love_taskreward::default_instance_;
  delete E_FestivalMuban_love_taskreward_reflection_;
  delete Sheet_FestivalMuban_love_taskreward::default_instance_;
  delete Sheet_FestivalMuban_love_taskreward_reflection_;
  delete E_FestivalPeriodindex::default_instance_;
  delete E_FestivalPeriodindex_reflection_;
  delete Sheet_FestivalPeriodindex::default_instance_;
  delete Sheet_FestivalPeriodindex_reflection_;
  delete E_FestivalMuban_bossfristkill::default_instance_;
  delete E_FestivalMuban_bossfristkill_reflection_;
  delete Sheet_FestivalMuban_bossfristkill::default_instance_;
  delete Sheet_FestivalMuban_bossfristkill_reflection_;
  delete E_FestivalMuban_severrank::default_instance_;
  delete E_FestivalMuban_severrank_reflection_;
  delete Sheet_FestivalMuban_severrank::default_instance_;
  delete Sheet_FestivalMuban_severrank_reflection_;
  delete E_FestivalMuban_severrank_data::default_instance_;
  delete E_FestivalMuban_severrank_data_reflection_;
  delete Sheet_FestivalMuban_severrank_data::default_instance_;
  delete Sheet_FestivalMuban_severrank_data_reflection_;
  delete E_FestivalMuban_collectwordCostDesc::default_instance_;
  delete E_FestivalMuban_collectwordCostDesc_reflection_;
  delete E_FestivalMuban_collectword::default_instance_;
  delete E_FestivalMuban_collectword_reflection_;
  delete Sheet_FestivalMuban_collectword::default_instance_;
  delete Sheet_FestivalMuban_collectword_reflection_;
  delete E_FestivalMuban_sign::default_instance_;
  delete E_FestivalMuban_sign_reflection_;
  delete Sheet_FestivalMuban_sign::default_instance_;
  delete Sheet_FestivalMuban_sign_reflection_;
  delete E_FestivalMuban_shop::default_instance_;
  delete E_FestivalMuban_shop_reflection_;
  delete Sheet_FestivalMuban_shop::default_instance_;
  delete Sheet_FestivalMuban_shop_reflection_;
  delete E_FestivalMuban_rechange::default_instance_;
  delete E_FestivalMuban_rechange_reflection_;
  delete Sheet_FestivalMuban_rechange::default_instance_;
  delete Sheet_FestivalMuban_rechange_reflection_;
  delete E_FestivalMuban_leiji::default_instance_;
  delete E_FestivalMuban_leiji_reflection_;
  delete Sheet_FestivalMuban_leiji::default_instance_;
  delete Sheet_FestivalMuban_leiji_reflection_;
  delete E_FestivalMuban_zadan::default_instance_;
  delete E_FestivalMuban_zadan_reflection_;
  delete Sheet_FestivalMuban_zadan::default_instance_;
  delete Sheet_FestivalMuban_zadan_reflection_;
  delete E_FestivalZadanconstant::default_instance_;
  delete E_FestivalZadanconstant_reflection_;
  delete Sheet_FestivalZadanconstant::default_instance_;
  delete Sheet_FestivalZadanconstant_reflection_;
  delete E_FestivalMuban_turntable::default_instance_;
  delete E_FestivalMuban_turntable_reflection_;
  delete Sheet_FestivalMuban_turntable::default_instance_;
  delete Sheet_FestivalMuban_turntable_reflection_;
  delete E_FestivalMuban_turntable_pool::default_instance_;
  delete E_FestivalMuban_turntable_pool_reflection_;
  delete Sheet_FestivalMuban_turntable_pool::default_instance_;
  delete Sheet_FestivalMuban_turntable_pool_reflection_;
  delete E_FestivalMuban_turntable_task::default_instance_;
  delete E_FestivalMuban_turntable_task_reflection_;
  delete Sheet_FestivalMuban_turntable_task::default_instance_;
  delete Sheet_FestivalMuban_turntable_task_reflection_;
  delete E_FestivalMuban_donate::default_instance_;
  delete E_FestivalMuban_donate_reflection_;
  delete Sheet_FestivalMuban_donate::default_instance_;
  delete Sheet_FestivalMuban_donate_reflection_;
  delete E_FestivalMuban_donate_sever::default_instance_;
  delete E_FestivalMuban_donate_sever_reflection_;
  delete Sheet_FestivalMuban_donate_sever::default_instance_;
  delete Sheet_FestivalMuban_donate_sever_reflection_;
  delete E_FestivalMuban_donate_single::default_instance_;
  delete E_FestivalMuban_donate_single_reflection_;
  delete Sheet_FestivalMuban_donate_single::default_instance_;
  delete Sheet_FestivalMuban_donate_single_reflection_;
  delete E_FestivalMuban_donate_task::default_instance_;
  delete E_FestivalMuban_donate_task_reflection_;
  delete Sheet_FestivalMuban_donate_task::default_instance_;
  delete Sheet_FestivalMuban_donate_task_reflection_;
  delete E_FestivalMuban_online::default_instance_;
  delete E_FestivalMuban_online_reflection_;
  delete Sheet_FestivalMuban_online::default_instance_;
  delete Sheet_FestivalMuban_online_reflection_;
  delete E_FestivalMuban_rturntable::default_instance_;
  delete E_FestivalMuban_rturntable_reflection_;
  delete Sheet_FestivalMuban_rturntable::default_instance_;
  delete Sheet_FestivalMuban_rturntable_reflection_;
  delete E_FestivalMuban_rturntable_recharge::default_instance_;
  delete E_FestivalMuban_rturntable_recharge_reflection_;
  delete Sheet_FestivalMuban_rturntable_recharge::default_instance_;
  delete Sheet_FestivalMuban_rturntable_recharge_reflection_;
  delete E_FestivalMuban_rturntable_recharge_ratio::default_instance_;
  delete E_FestivalMuban_rturntable_recharge_ratio_reflection_;
  delete Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance_;
  delete Sheet_FestivalMuban_rturntable_recharge_ratio_reflection_;
  delete E_FestivalMuban_drawpize::default_instance_;
  delete E_FestivalMuban_drawpize_reflection_;
  delete Sheet_FestivalMuban_drawpize::default_instance_;
  delete Sheet_FestivalMuban_drawpize_reflection_;
  delete E_FestivalMuban_drawpize_pool::default_instance_;
  delete E_FestivalMuban_drawpize_pool_reflection_;
  delete Sheet_FestivalMuban_drawpize_pool::default_instance_;
  delete Sheet_FestivalMuban_drawpize_pool_reflection_;
  delete E_FestivalMuban_drawpize_total::default_instance_;
  delete E_FestivalMuban_drawpize_total_reflection_;
  delete Sheet_FestivalMuban_drawpize_total::default_instance_;
  delete Sheet_FestivalMuban_drawpize_total_reflection_;
  delete E_FestivalMuban_totalrecharge::default_instance_;
  delete E_FestivalMuban_totalrecharge_reflection_;
  delete Sheet_FestivalMuban_totalrecharge::default_instance_;
  delete Sheet_FestivalMuban_totalrecharge_reflection_;
  delete E_FestivalMuban_dailytotalrecharge::default_instance_;
  delete E_FestivalMuban_dailytotalrecharge_reflection_;
  delete Sheet_FestivalMuban_dailytotalrecharge::default_instance_;
  delete Sheet_FestivalMuban_dailytotalrecharge_reflection_;
  delete E_FestivalMuban_play::default_instance_;
  delete E_FestivalMuban_play_reflection_;
  delete Sheet_FestivalMuban_play::default_instance_;
  delete Sheet_FestivalMuban_play_reflection_;
  delete E_FestivalMuban_play_reward::default_instance_;
  delete E_FestivalMuban_play_reward_reflection_;
  delete Sheet_FestivalMuban_play_reward::default_instance_;
  delete Sheet_FestivalMuban_play_reward_reflection_;
  delete E_FestivalMuban_play_game::default_instance_;
  delete E_FestivalMuban_play_game_reflection_;
  delete Sheet_FestivalMuban_play_game::default_instance_;
  delete Sheet_FestivalMuban_play_game_reflection_;
  delete E_FestivalMuban_play_score::default_instance_;
  delete E_FestivalMuban_play_score_reflection_;
  delete Sheet_FestivalMuban_play_score::default_instance_;
  delete Sheet_FestivalMuban_play_score_reflection_;
}

void protobuf_AddDesc_E_5fFestival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020E_Festival.proto\022\010proto_ff\032\025yd_fieldop"
    "tions.proto\"R\n\022E_FestivalFestival\022\032\n\004m_i"
    "d\030\001 \001(\005B\014\302\377\024\010\350\212\202\346\227\245ID\022 \n\006m_type\030\002 \001(\005B\020\302"
    "\377\024\014\346\264\273\345\212\250\347\261\273\345\236\213\"]\n\026Sheet_FestivalFestiva"
    "l\022C\n\027E_FestivalFestival_List\030\001 \003(\0132\034.pro"
    "to_ff.E_FestivalFestivalB\004\210\301\024\020\"\252\004\n\022E_Fes"
    "tivalTemplate\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\346\264\273\345\212\250I"
    "D\022$\n\006m_name\030\002 \001(\tB\024\302\377\024\014\346\250\241\346\235\277\345\220\215\347\247\260\220\301\024@\022"
    "&\n\014m_festivalid\030\003 \001(\005B\020\302\377\024\014\345\274\225\347\224\250\344\270\273\344\275\223\022"
    "$\n\nm_timetype\030\004 \001(\005B\020\302\377\024\014\346\227\266\351\227\264\347\261\273\345\236\213\022!\n"
    "\007m_level\030\005 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\350\246\201\346\261\202\022\'\n\nm_vi"
    "plevel\030\006 \001(\005B\023\302\377\024\017vip\347\255\211\347\272\247\350\246\201\346\261\202\022<\n\nm_r"
    "echange\030\007 \001(\005B(\302\377\024$\345\205\205\345\200\274\350\246\201\346\261\202\351\253\230\347\272\247\350\277\220"
    "\350\220\245\346\264\273\345\212\250\350\256\241\346\225\260\022.\n\013m_severtype\030\010 \001(\005B\031\302\377"
    "\024\025\346\234\215\345\212\241\345\231\250\346\264\273\345\212\250\347\261\273\345\236\213\022-\n\tm_typearg\030\t \001"
    "(\tB\032\302\377\024\022\346\250\241\346\235\277\347\211\271\346\256\212\345\217\202\346\225\260\220\301\024@\022&\n\014m_peri"
    "odtype\030\n \001(\005B\020\302\377\024\014\346\234\237\346\225\260\347\261\273\345\236\213\022\"\n\010m_peri"
    "od\030\013 \001(\005B\020\302\377\024\014\346\234\237\346\225\260\345\217\202\346\225\260\022\"\n\010m_ifopen\030\014"
    " \001(\005B\020\302\377\024\014\346\264\273\345\212\250\345\274\200\345\205\263\022+\n\tm_timearg\030\r \003("
    "\tB\030\302\377\024\014\346\227\266\351\227\264\345\217\202\346\225\260\210\301\024\003\220\301\024@\"]\n\026Sheet_Fes"
    "tivalTemplate\022C\n\027E_FestivalTemplate_List"
    "\030\001 \003(\0132\034.proto_ff.E_FestivalTemplateB\004\210\301"
    "\024@\"\363\001\n\024E_FestivalMuban_love\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022"
    "/\n\rm_taskpointid\030\003 \001(\005B\030\302\377\024\024\344\273\273\345\212\241\350\277\233\345\272\246"
    "\351\201\223\345\205\267id\022\"\n\013m_rankgroup\030\004 \001(\005B\r\302\377\024\t\346\216\222\350\241"
    "\214\347\273\204\022\"\n\013m_taskgroup\030\005 \001(\005B\r\302\377\024\t\344\273\273\345\212\241\347\273\204"
    "\022.\n\021m_taskrewardgroup\030\006 \001(\005B\023\302\377\024\017\344\273\273\345\212\241\345"
    "\245\226\345\212\261\347\273\204\"c\n\030Sheet_FestivalMuban_love\022G\n\031"
    "E_FestivalMuban_love_List\030\001 \003(\0132\036.proto_"
    "ff.E_FestivalMuban_loveB\004\210\301\024\010\"\327\001\n\031E_Fest"
    "ivalMuban_love_rank\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002i"
    "d\022\034\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204ID\0222\n\014m_rew"
    "ardshow\030\003 \001(\005B\034\302\377\024\030\347\254\254\344\270\200\345\220\215\347\232\204\345\261\225\347\244\272\350\265\204"
    "\346\272\220\022,\n\rm_datagroupid\030\004 \001(\005B\025\302\377\024\021\346\216\222\350\241\214\346\225"
    "\260\346\215\256\347\273\204id\022$\n\nm_ranktype\030\005 \001(\005B\020\302\377\024\014\346\216\222\350\241"
    "\214\347\261\273\345\236\213\"r\n\035Sheet_FestivalMuban_love_rank"
    "\022Q\n\036E_FestivalMuban_love_rank_List\030\001 \003(\013"
    "2#.proto_ff.E_FestivalMuban_love_rankB\004\210"
    "\301\024\002\"\367\001\n\036E_FestivalMuban_love_rank_data\022\024"
    "\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_groupid\030\002 \001(\005B"
    "\t\302\377\024\005\347\273\204id\022#\n\tm_maxrank\030\003 \001(\005B\020\302\377\024\014\346\216\222\345\220"
    "\215\344\270\212\351\231\220\022#\n\tm_minrank\030\004 \001(\005B\020\302\377\024\014\346\216\222\345\220\215\344\270"
    "\213\351\231\220\0224\n\013m_rankvalue\030\005 \001(\005B\037\302\377\024\033\346\234\200\344\275\216\346\216\222"
    "\350\241\214\345\200\274\346\225\260\345\200\274\350\246\201\346\261\202\022!\n\007m_boxid\030\006 \001(\005B\020\302\377\024"
    "\014\345\245\226\345\212\261\345\206\205\345\256\271\"\201\001\n\"Sheet_FestivalMuban_lo"
    "ve_rank_data\022[\n#E_FestivalMuban_love_ran"
    "k_data_List\030\001 \003(\0132(.proto_ff.E_FestivalM"
    "uban_love_rank_dataB\004\210\301\024\010\"\261\002\n\031E_Festival"
    "Muban_love_task\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n"
    "\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022%\n\013m_eventty"
    "pe\030\003 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014m_reachpri"
    "ce\030\004 \001(\005B\r\302\377\024\t\350\276\276\346\210\220\345\200\274\022\032\n\006m_link\030\005 \001(\005B"
    "\n\302\377\024\006\350\277\236\346\216\245\022\'\n\rm_rewardtimes\030\006 \001(\005B\020\302\377\024\014"
    "\345\245\226\345\212\261\345\277\203\346\225\260\022\"\n\010m_reward\030\007 \001(\005B\020\302\377\024\014\345\245\226\345"
    "\212\261\345\206\205\345\256\271\022+\n\007m_param\030\010 \003(\005B\032\302\377\024\022\344\272\213\344\273\266\345\256\214"
    "\346\210\220\345\217\202\346\225\260\210\301\024\002\"r\n\035Sheet_FestivalMuban_lov"
    "e_task\022Q\n\036E_FestivalMuban_love_task_List"
    "\030\001 \003(\0132#.proto_ff.E_FestivalMuban_love_t"
    "askB\004\210\301\024\020\"\220\001\n\037E_FestivalMuban_love_taskr"
    "eward\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_groupid"
    "\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\036\n\007m_value\030\003 \001(\005B\r\302\377\024\t"
    "\350\277\233\345\272\246\345\200\274\022\031\n\005m_box\030\004 \001(\005B\n\302\377\024\006\345\245\226\345\212\261\"\204\001\n"
    "#Sheet_FestivalMuban_love_taskreward\022]\n$"
    "E_FestivalMuban_love_taskreward_List\030\001 \003"
    "(\0132).proto_ff.E_FestivalMuban_love_taskr"
    "ewardB\004\210\301\024\010\"u\n\025E_FestivalPeriodindex\0224\n\016"
    "m_minorigalday\030\001 \001(\005B\034\302\377\024\030\346\234\200\345\260\217\345\216\237\345\247\213\345\274"
    "\200\346\234\215\346\227\266\351\227\264\022&\n\010m_period\030\002 \003(\005B\024\302\377\024\014\346\234\237\346\225\260"
    "\347\261\273\345\236\213\210\301\024\017\"f\n\031Sheet_FestivalPeriodindex\022"
    "I\n\032E_FestivalPeriodindex_List\030\001 \003(\0132\037.pr"
    "oto_ff.E_FestivalPeriodindexB\004\210\301\024@\"\217\002\n\035E"
    "_FestivalMuban_bossfristkill\022\024\n\004m_id\030\001 \001"
    "(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260"
    "\022\032\n\006m_type\030\003 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\034\n\010m_bossid"
    "\030\004 \001(\005B\n\302\377\024\006bossid\022+\n\021m_fristkillreward\030"
    "\005 \001(\005B\020\302\377\024\014\351\246\226\346\235\200\345\245\226\345\212\261\022&\n\014m_killreward\030"
    "\006 \001(\005B\020\302\377\024\014\345\207\273\346\235\200\345\245\226\345\212\261\022+\n\021m_fristkillpa"
    "cket\030\007 \001(\005B\020\302\377\024\014\351\246\226\346\235\200\347\272\242\345\214\205\"~\n!Sheet_Fe"
    "stivalMuban_bossfristkill\022Y\n\"E_FestivalM"
    "uban_bossfristkill_List\030\001 \003(\0132\'.proto_ff"
    ".E_FestivalMuban_bossfristkillB\004\210\301\024@\"\276\005\n"
    "\031E_FestivalMuban_severrank\022\024\n\004m_id\030\001 \001(\005"
    "B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022\037"
    "\n\007m_order\030\003 \001(\tB\016\302\377\024\006\346\216\222\345\272\217\220\301\024@\022\036\n\006m_nam"
    "e\030\004 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024@\022#\n\tm_openday\030\005 \001"
    "(\005B\020\302\377\024\014\345\274\200\346\224\276\345\244\251\346\225\260\022$\n\nm_closeday\030\006 \001(\005"
    "B\020\302\377\024\014\347\273\223\346\235\237\345\244\251\346\225\260\0222\n\017m_championtitle\030\007 "
    "\001(\tB\031\302\377\024\021\347\254\254\344\270\200\345\220\215\347\232\204title\220\301\024@\0222\n\014m_rewa"
    "rdshow\030\010 \001(\005B\034\302\377\024\030\347\254\254\344\270\200\345\220\215\347\232\204\345\261\225\347\244\272\350\265\204\346"
    "\272\220\022,\n\rm_datagroupid\030\t \001(\005B\025\302\377\024\021\346\216\222\350\241\214\346\225\260"
    "\346\215\256\347\273\204id\022$\n\nm_ranktype\030\n \001(\005B\020\302\377\024\014\346\216\222\350\241\214"
    "\347\261\273\345\236\213\022.\n\nm_rankgift\030\013 \001(\tB\032\302\377\024\022\345\206\262\346\246\234\345\256"
    "\235\347\256\261\345\220\215\347\247\260\220\301\024@\022&\n\nm_gifticon\030\014 \001(\tB\022\302\377\024\n"
    "\345\256\235\347\256\261Icon\220\301\024@\022&\n\014m_giftitemid\030\r \001(\005B\020\302\377"
    "\024\014\345\256\235\347\256\261itemid\022)\n\017m_originalprice\030\016 \001(\005B"
    "\020\302\377\024\014\345\256\235\347\256\261\345\216\237\344\273\267\022!\n\007m_price\030\017 \001(\005B\020\302\377\024\014"
    "\345\256\235\347\256\261\347\216\260\344\273\267\022%\n\013m_ratioshow\030\020 \001(\005B\020\302\377\024\014\345"
    "\256\235\347\256\261\345\200\215\347\216\207\0220\n\rm_redpointbox\030\021 \001(\005B\031\302\377\024\025"
    "\347\272\242\347\202\271\347\244\274\345\214\205\345\245\226\345\212\261box\"s\n\035Sheet_FestivalM"
    "uban_severrank\022R\n\036E_FestivalMuban_severr"
    "ank_List\030\001 \003(\0132#.proto_ff.E_FestivalMuba"
    "n_severrankB\005\210\301\024\200\001\"\367\001\n\036E_FestivalMuban_s"
    "everrank_data\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm"
    "_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022#\n\tm_maxrank\030\003"
    " \001(\005B\020\302\377\024\014\346\216\222\345\220\215\344\270\212\351\231\220\022#\n\tm_minrank\030\004 \001("
    "\005B\020\302\377\024\014\346\216\222\345\220\215\344\270\213\351\231\220\0224\n\013m_rankvalue\030\005 \001(\005"
    "B\037\302\377\024\033\346\234\200\344\275\216\346\216\222\350\241\214\345\200\274\346\225\260\345\200\274\350\246\201\346\261\202\022!\n\007m_b"
    "oxid\030\006 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\"\201\001\n\"Sheet_F"
    "estivalMuban_severrank_data\022[\n#E_Festiva"
    "lMuban_severrank_data_List\030\001 \003(\0132(.proto"
    "_ff.E_FestivalMuban_severrank_dataB\004\210\301\024@"
    "\"V\n#E_FestivalMuban_collectwordCostDesc\022"
    "\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005"
    "B\006\302\377\024\002id\"\243\002\n\033E_FestivalMuban_collectword"
    "\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\036\n\010m_period\030\002 \001(\005"
    "B\014\302\377\024\010\346\234\237\346\225\260id\022)\n\rm_exchange_id\030\003 \001(\005B\022\302"
    "\377\024\016\345\205\221\346\215\242\351\201\223\345\205\267id\022.\n\016m_exchange_num\030\004 \001("
    "\005B\026\302\377\024\022\345\205\221\346\215\242\351\201\223\345\205\267\346\225\260\351\207\217\022$\n\007m_times\030\005 \001"
    "(\005B\023\302\377\024\017\345\217\257\345\205\221\346\215\242\346\254\241\346\225\260\022M\n\006m_cost\030\006 \003(\0132"
    "-.proto_ff.E_FestivalMuban_collectwordCo"
    "stDescB\016\302\377\024\006\350\212\261\350\264\271\210\301\024\005\"x\n\037Sheet_Festival"
    "Muban_collectword\022U\n E_FestivalMuban_col"
    "lectword_List\030\001 \003(\0132%.proto_ff.E_Festiva"
    "lMuban_collectwordB\004\210\301\024\020\"m\n\024E_FestivalMu"
    "ban_sign\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_peri"
    "od\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022!\n\007m_boxid\030\003 \001(\005B\020\302"
    "\377\024\014\347\244\274\345\214\205\345\206\205\345\256\271\"c\n\030Sheet_FestivalMuban_s"
    "ign\022G\n\031E_FestivalMuban_sign_List\030\001 \003(\0132\036"
    ".proto_ff.E_FestivalMuban_signB\004\210\301\024\002\"\326\002\n"
    "\024E_FestivalMuban_shop\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022\'\n\nm_v"
    "iplevel\030\003 \001(\005B\023\302\377\024\017\345\210\244\346\226\255vip\347\255\211\347\272\247\022\037\n\005m_"
    "box\030\004 \001(\005B\020\302\377\024\014\347\244\274\345\214\205\345\206\205\345\256\271\022%\n\013m_timelim"
    "it\030\005 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\022!\n\007m_price\030\006 "
    "\001(\005B\020\302\377\024\014\344\273\267\346\240\274\345\217\202\346\225\260\022%\n\013m_pricetype\030\007 \001"
    "(\005B\020\302\377\024\014\344\273\267\346\240\274\347\261\273\345\236\213\022*\n\nm_startime\030\010 \001(\005"
    "B\026\302\377\024\022\347\244\274\345\214\205\345\207\272\347\216\260\346\227\266\351\227\264\022#\n\tm_durtime\030\t "
    "\001(\005B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\"c\n\030Sheet_FestivalM"
    "uban_shop\022G\n\031E_FestivalMuban_shop_List\030\001"
    " \003(\0132\036.proto_ff.E_FestivalMuban_shopB\004\210\301"
    "\024 \"\331\001\n\030E_FestivalMuban_rechange\022\024\n\004m_id\030"
    "\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237"
    "\346\225\260\022\034\n\010m_rebate\030\003 \001(\005B\n\302\377\024\006\350\277\224\345\210\251\022%\n\013m_t"
    "imelimit\030\004 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\022!\n\007m_pr"
    "ice\030\005 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\345\217\202\346\225\260\022!\n\007m_typer\030\006"
    " \001(\005B\020\302\377\024\014\347\244\274\345\214\205\347\261\273\345\236\213\"o\n\034Sheet_Festival"
    "Muban_rechange\022O\n\035E_FestivalMuban_rechan"
    "ge_List\030\001 \003(\0132\".proto_ff.E_FestivalMuban"
    "_rechangeB\004\210\301\024\020\"\215\001\n\025E_FestivalMuban_leij"
    "i\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001("
    "\005B\n\302\377\024\006\346\234\237\346\225\260\022!\n\007m_leiji\030\003 \001(\005B\020\302\377\024\014\344\274\244\345"
    "\256\263\347\264\257\350\256\241\022\035\n\007m_boxid\030\004 \001(\005B\014\302\377\024\010\345\245\226\345\212\261ID\""
    "f\n\031Sheet_FestivalMuban_leiji\022I\n\032E_Festiv"
    "alMuban_leiji_List\030\001 \003(\0132\037.proto_ff.E_Fe"
    "stivalMuban_leijiB\004\210\301\024\020\"\317\001\n\025E_FestivalMu"
    "ban_zadan\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_per"
    "iod\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022\034\n\010m_itemid\030\003 \001(\003B"
    "\n\302\377\024\006\347\211\251\345\223\201\022\031\n\005m_num\030\004 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022 "
    "\n\006m_type\030\005 \001(\005B\020\302\377\024\014\345\245\226\346\261\240\347\261\273\345\236\213\022\'\n\rm_pr"
    "obability\030\006 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207\215\"f\n\031She"
    "et_FestivalMuban_zadan\022I\n\032E_FestivalMuba"
    "n_zadan_List\030\001 \003(\0132\037.proto_ff.E_Festival"
    "Muban_zadanB\004\210\301\024@\"\335\001\n\027E_FestivalZadancon"
    "stant\022\034\n\010m_period\030\001 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022,\n\nm"
    "_costitem\030\002 \001(\003B\030\302\377\024\024\346\212\275\345\245\226\346\266\210\350\200\227\347\232\204\347\211\251i"
    "d\022\"\n\010m_number\030\003 \001(\005B\020\302\377\024\014\347\211\251\345\223\201\346\225\260\351\207\217\022&\n"
    "\006m_free\030\004 \001(\005B\026\302\377\024\022\345\205\215\350\264\271\351\207\215\347\275\256\346\254\241\346\225\260\022*\n"
    "\nm_currency\030\005 \001(\005B\026\302\377\024\022\346\266\210\350\200\227\351\222\273\347\237\263\351\207\215\347\275"
    "\256\"l\n\033Sheet_FestivalZadanconstant\022M\n\034E_Fe"
    "stivalZadanconstant_List\030\001 \003(\0132!.proto_f"
    "f.E_FestivalZadanconstantB\004\210\301\024 \"\227\001\n\031E_Fe"
    "stivalMuban_turntable\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022\"\n\013m_p"
    "oolgroup\030\003 \001(\005B\r\302\377\024\t\345\245\226\346\261\240\347\273\204\022\"\n\013m_taskg"
    "roup\030\004 \001(\005B\r\302\377\024\t\344\273\273\345\212\241\347\273\204\"r\n\035Sheet_Festi"
    "valMuban_turntable\022Q\n\036E_FestivalMuban_tu"
    "rntable_List\030\001 \003(\0132#.proto_ff.E_Festival"
    "Muban_turntableB\004\210\301\024\002\"\253\001\n\036E_FestivalMuba"
    "n_turntable_pool\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034"
    "\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204ID\022\034\n\010m_itemid"
    "\030\003 \001(\005B\n\302\377\024\006\347\211\251\345\223\201\022\031\n\005m_num\030\004 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\022\034\n\010m_weight\030\005 \001(\005B\n\302\377\024\006\346\235\203\351\207\215\"\201\001\n\""
    "Sheet_FestivalMuban_turntable_pool\022[\n#E_"
    "FestivalMuban_turntable_pool_List\030\001 \003(\0132"
    "(.proto_ff.E_FestivalMuban_turntable_poo"
    "lB\004\210\301\024\020\"\222\002\n\036E_FestivalMuban_turntable_ta"
    "sk\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_groupid\030\002 "
    "\001(\005B\t\302\377\024\005\347\273\204id\022%\n\013m_eventtype\030\003 \001(\005B\020\302\377\024"
    "\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014m_reachprice\030\004 \001(\005B\r\302\377\024"
    "\t\350\276\276\346\210\220\345\200\274\022\032\n\006m_link\030\005 \001(\005B\n\302\377\024\006\350\277\236\346\216\245\022\'"
    "\n\rm_rewardtimes\030\006 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\346\254\241\346\225\260\022"
    "+\n\007m_param\030\007 \003(\005B\032\302\377\024\022\344\272\213\344\273\266\345\256\214\346\210\220\345\217\202\346\225\260"
    "\210\301\024\002\"\201\001\n\"Sheet_FestivalMuban_turntable_t"
    "ask\022[\n#E_FestivalMuban_turntable_task_Li"
    "st\030\001 \003(\0132(.proto_ff.E_FestivalMuban_turn"
    "table_taskB\004\210\301\024\020\"\246\002\n\026E_FestivalMuban_don"
    "ate\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 "
    "\001(\005B\n\302\377\024\006\346\234\237\346\225\260\022&\n\014m_donateitem\030\003 \001(\005B\020\302"
    "\377\024\014\346\215\220\347\214\256\351\201\223\345\205\267\022.\n\016m_donatereward\030\004 \001(\005B"
    "\026\302\377\024\022\346\215\220\347\214\256\350\216\267\345\276\227\345\245\226\345\212\261\022-\n\rm_severreward"
    "\030\005 \001(\005B\026\302\377\024\022\346\234\215\345\212\241\345\231\250\345\245\226\345\212\261\347\273\204\022+\n\016m_sing"
    "lereward\030\006 \001(\005B\023\302\377\024\017\344\270\252\344\272\272\345\245\226\345\212\261\347\273\204\022$\n\rm"
    "_taskgroupid\030\007 \001(\005B\r\302\377\024\t\344\273\273\345\212\241\347\273\204\"i\n\032She"
    "et_FestivalMuban_donate\022K\n\033E_FestivalMub"
    "an_donate_List\030\001 \003(\0132 .proto_ff.E_Festiv"
    "alMuban_donateB\004\210\301\024\002\"\367\001\n\034E_FestivalMuban"
    "_donate_sever\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm"
    "_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\036\n\007m_value\030\003 \001"
    "(\005B\r\302\377\024\t\350\277\233\345\272\246\345\200\274\022 \n\006m_type\030\004 \001(\005B\020\302\377\024\014\345"
    "\245\226\345\212\261\347\261\273\345\236\213\022\'\n\tm_typearg\030\005 \001(\tB\024\302\377\024\014\345\245\226\345"
    "\212\261\345\217\202\346\225\260\220\301\024@\022\035\n\005m_pro\030\006 \001(\tB\016\302\377\024\006\350\201\214\344\270\232\220"
    "\301\024@\022\031\n\005m_num\030\007 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"{\n Sheet_"
    "FestivalMuban_donate_sever\022W\n!E_Festival"
    "Muban_donate_sever_List\030\001 \003(\0132&.proto_ff"
    ".E_FestivalMuban_donate_severB\004\210\301\024@\"\321\001\n\035"
    "E_FestivalMuban_donate_single\022\024\n\004m_id\030\001 "
    "\001(\005B\006\302\377\024\002id\022\034\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204i"
    "d\022\036\n\007m_value\030\003 \001(\005B\r\302\377\024\t\350\277\233\345\272\246\345\200\274\022\"\n\010m_i"
    "temid\030\004 \001(\tB\020\302\377\024\010\347\211\251\345\223\201ID\220\301\024@\022\035\n\005m_pro\030\005"
    " \001(\tB\016\302\377\024\006\350\201\214\344\270\232\220\301\024@\022\031\n\005m_num\030\006 \001(\005B\n\302\377\024"
    "\006\346\225\260\351\207\217\"~\n!Sheet_FestivalMuban_donate_si"
    "ngle\022Y\n\"E_FestivalMuban_donate_single_Li"
    "st\030\001 \003(\0132\'.proto_ff.E_FestivalMuban_dona"
    "te_singleB\004\210\301\024\010\"\233\002\n\033E_FestivalMuban_dona"
    "te_task\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_group"
    "id\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022%\n\013m_eventtype\030\003 \001(\005"
    "B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014m_reachprice\030\004 \001(\005"
    "B\r\302\377\024\t\350\276\276\346\210\220\345\200\274\022$\n\010m_itemid\030\005 \001(\005B\022\302\377\024\016\345"
    "\245\226\345\212\261\351\201\223\345\205\267id\022)\n\tm_itemnum\030\006 \001(\005B\026\302\377\024\022\345\245"
    "\226\345\212\261\351\201\223\345\205\267\346\225\260\351\207\217\022+\n\007m_param\030\007 \003(\005B\032\302\377\024\022\344"
    "\272\213\344\273\266\345\256\214\346\210\220\345\217\202\346\225\260\210\301\024\002\"x\n\037Sheet_FestivalM"
    "uban_donate_task\022U\n E_FestivalMuban_dona"
    "te_task_List\030\001 \003(\0132%.proto_ff.E_Festival"
    "Muban_donate_taskB\004\210\301\024\010\"\223\002\n\026E_FestivalMu"
    "ban_online\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_pe"
    "riod\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022)\n\013m_timestart\030\003 "
    "\001(\tB\024\302\377\024\014\345\274\200\345\247\213\346\227\266\351\227\264\220\301\024@\022\'\n\tm_timeend\030\004"
    " \001(\tB\024\302\377\024\014\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024@\022\"\n\010m_itemid\030\005"
    " \001(\005B\020\302\377\024\014\345\245\226\345\212\261\351\201\223\345\205\267\022#\n\tm_itemnum\030\006 \001("
    "\005B\020\302\377\024\014\345\245\226\345\212\261\346\225\260\351\207\217\022(\n\005m_vip\030\007 \001(\005B\031\302\377\024\025"
    "\350\241\245\351\242\206\350\246\201\346\261\202vip\347\255\211\347\272\247\"i\n\032Sheet_FestivalM"
    "uban_online\022K\n\033E_FestivalMuban_online_Li"
    "st\030\001 \003(\0132 .proto_ff.E_FestivalMuban_onli"
    "neB\004\210\301\024\004\"|\n\032E_FestivalMuban_rturntable\022\024"
    "\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n"
    "\302\377\024\006\346\234\237\346\225\260\022*\n\021m_rechargegroupid\030\003 \001(\005B\017\302"
    "\377\024\013\345\205\205\345\200\274\347\273\204ID\"u\n\036Sheet_FestivalMuban_rt"
    "urntable\022S\n\037E_FestivalMuban_rturntable_L"
    "ist\030\001 \003(\0132$.proto_ff.E_FestivalMuban_rtu"
    "rntableB\004\210\301\024\002\"\325\001\n#E_FestivalMuban_rturnt"
    "able_recharge\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\tm"
    "_groupid\030\002 \001(\005B\007\302\377\024\003\347\273\204\022&\n\014m_rechargeid\030"
    "\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\346\241\243\344\275\215\022!\n\007m_limit\030\004 \001(\005"
    "B\020\302\377\024\014\351\231\220\345\210\266\346\254\241\346\225\260\0221\n\016m_ratiogroupid\030\005 \001"
    "(\005B\031\302\377\024\025\344\275\277\347\224\250\345\205\205\345\200\274\345\200\215\347\216\207\347\273\204\"\220\001\n\'Sheet_"
    "FestivalMuban_rturntable_recharge\022e\n(E_F"
    "estivalMuban_rturntable_recharge_List\030\001 "
    "\003(\0132-.proto_ff.E_FestivalMuban_rturntabl"
    "e_rechargeB\004\210\301\024\020\"\230\001\n)E_FestivalMuban_rtu"
    "rntable_recharge_ratio\022\024\n\004m_id\030\001 \001(\005B\006\302\377"
    "\024\002id\022\032\n\tm_groupid\030\002 \001(\005B\007\302\377\024\003\347\273\204\022\033\n\007m_ra"
    "tio\030\003 \001(\005B\n\302\377\024\006\345\200\215\347\216\207\022\034\n\010m_weight\030\004 \001(\005B"
    "\n\302\377\024\006\346\235\203\351\207\215\"\242\001\n-Sheet_FestivalMuban_rtur"
    "ntable_recharge_ratio\022q\n.E_FestivalMuban"
    "_rturntable_recharge_ratio_List\030\001 \003(\01323."
    "proto_ff.E_FestivalMuban_rturntable_rech"
    "arge_ratioB\004\210\301\024@\"\313\002\n\030E_FestivalMuban_dra"
    "wpize\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030"
    "\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022\036\n\010m_costid\030\003 \001(\003B\014\302\377\024"
    "\010\351\201\223\345\205\267id\022\'\n\tm_costnum\030\004 \001(\tB\024\302\377\024\014\346\212\275\345\245\226"
    "\346\266\210\350\200\227\220\301\024@\022#\n\rm_poolgroupid\030\005 \001(\005B\014\302\377\024\010\345"
    "\245\226\346\261\240id\0220\n\016m_totalgroupid\030\006 \001(\005B\030\302\377\024\024\347\264\257"
    "\350\256\241\346\254\241\346\225\260\345\245\226\345\212\261id\022,\n\014m_severlimit\030\007 \001(\005B"
    "\026\302\377\024\022\345\205\250\346\234\215\346\254\241\346\225\260\351\231\220\345\210\266\022-\n\rm_protecttime"
    "\030\010 \001(\005B\026\302\377\024\022\344\277\235\345\272\225\345\245\226\346\261\240\346\254\241\346\225\260\"o\n\034Sheet_"
    "FestivalMuban_drawpize\022O\n\035E_FestivalMuba"
    "n_drawpize_List\030\001 \003(\0132\".proto_ff.E_Festi"
    "valMuban_drawpizeB\004\210\301\024\004\"\333\002\n\035E_FestivalMu"
    "ban_drawpize_pool\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022"
    "\"\n\tm_groupid\030\002 \001(\005B\017\302\377\024\013\345\245\226\346\261\240\347\273\204ID\022\034\n\010m"
    "_itemid\030\003 \001(\003B\n\302\377\024\006\347\211\251\345\223\201\022\031\n\005m_num\030\004 \001(\005"
    "B\n\302\377\024\006\346\225\260\351\207\217\022\032\n\006m_prof\030\005 \001(\005B\n\302\377\024\006\350\201\214\344\270\232"
    "\022#\n\tm_weights\030\006 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207\215\022,\n"
    "\014m_proweights\030\007 \001(\005B\026\302\377\024\022\344\277\235\345\272\225\346\216\211\350\220\275\346\235\203"
    "\351\207\215\022+\n\013m_timelimit\030\010 \001(\005B\026\302\377\024\022\351\231\220\345\210\266\346\212\275\345"
    "\245\226\346\254\241\346\225\260\022+\n\010m_record\030\t \001(\005B\031\302\377\024\025\345\245\226\345\212\261\350\256"
    "\260\345\275\225\347\250\200\346\234\211\345\272\246\"~\n!Sheet_FestivalMuban_dra"
    "wpize_pool\022Y\n\"E_FestivalMuban_drawpize_p"
    "ool_List\030\001 \003(\0132\'.proto_ff.E_FestivalMuba"
    "n_drawpize_poolB\004\210\301\024@\"\301\001\n\036E_FestivalMuba"
    "n_drawpize_total\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034"
    "\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\036\n\007m_value\030"
    "\003 \001(\005B\r\302\377\024\t\346\235\241\344\273\266\345\200\274\022$\n\010m_itemid\030\004 \001(\005B\022"
    "\302\377\024\016\345\245\226\345\212\261\351\201\223\345\205\267id\022%\n\005m_num\030\005 \001(\005B\026\302\377\024\022\345"
    "\245\226\345\212\261\351\201\223\345\205\267\346\225\260\351\207\217\"\201\001\n\"Sheet_FestivalMuba"
    "n_drawpize_total\022[\n#E_FestivalMuban_draw"
    "pize_total_List\030\001 \003(\0132(.proto_ff.E_Festi"
    "valMuban_drawpize_totalB\004\210\301\024@\"\224\001\n\035E_Fest"
    "ivalMuban_totalrecharge\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002id\022\027\n\003m_a\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022!\n\007m_valu"
    "e\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\022!\n\007m_boxid\030\004 \001"
    "(\005B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\"~\n!Sheet_FestivalMu"
    "ban_totalrecharge\022Y\n\"E_FestivalMuban_tot"
    "alrecharge_List\030\001 \003(\0132\'.proto_ff.E_Festi"
    "valMuban_totalrechargeB\004\210\301\024\020\"\236\001\n\"E_Festi"
    "valMuban_dailytotalrecharge\022\024\n\004m_id\030\001 \001("
    "\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n\302\377\024\006\346\234\237\346\225\260\022"
    "!\n\007m_value\030\003 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\351\242\235\345\272\246\022!\n\007m_"
    "boxid\030\004 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\"\215\001\n&Sheet_"
    "FestivalMuban_dailytotalrecharge\022c\n\'E_Fe"
    "stivalMuban_dailytotalrecharge_List\030\001 \003("
    "\0132,.proto_ff.E_FestivalMuban_dailytotalr"
    "echargeB\004\210\301\024\010\"\302\001\n\024E_FestivalMuban_play\022\024"
    "\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\010m_period\030\002 \001(\005B\n"
    "\302\377\024\006\346\234\237\346\225\260\022$\n\rm_rewardgroup\030\003 \001(\005B\r\302\377\024\t\345"
    "\245\226\345\212\261\347\273\204\022\"\n\013m_gamegroup\030\004 \001(\005B\r\302\377\024\t\347\216\251\346\263"
    "\225\347\273\204\022,\n\nm_opentime\030\005 \003(\tB\030\302\377\024\014\345\274\200\345\220\257\346\227\266\351"
    "\227\264\210\301\024\002\220\301\024@\"c\n\030Sheet_FestivalMuban_play\022G"
    "\n\031E_FestivalMuban_play_List\030\001 \003(\0132\036.prot"
    "o_ff.E_FestivalMuban_playB\004\210\301\024\002\"\233\001\n\033E_Fe"
    "stivalMuban_play_reward\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002ID\022\"\n\tm_groupid\030\002 \001(\005B\017\302\377\024\013\345\245\226\345\212\261\347\273\204i"
    "d\022\"\n\010m_points\030\003 \001(\005B\020\302\377\024\014\347\247\257\345\210\206\350\246\201\346\261\202\022\036\n"
    "\007m_boxid\030\004 \001(\005B\r\302\377\024\t\345\245\226\345\212\261box\"x\n\037Sheet_F"
    "estivalMuban_play_reward\022U\n E_FestivalMu"
    "ban_play_reward_List\030\001 \003(\0132%.proto_ff.E_"
    "FestivalMuban_play_rewardB\004\210\301\024\010\"\311\002\n\031E_Fe"
    "stivalMuban_play_game\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024"
    "\002ID\022\"\n\tm_groupid\030\002 \001(\005B\017\302\377\024\013\347\216\251\346\263\225\347\273\204id\022"
    "!\n\007m_order\030\003 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\346\216\222\345\272\217\022$\n\nm_"
    "playtype\030\004 \001(\005B\020\302\377\024\014\347\216\251\346\263\225\347\261\273\345\236\213\022#\n\005m_ar"
    "g\030\005 \001(\tB\024\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\220\301\024@\022%\n\013m_rewar"
    "dbox\030\006 \001(\005B\020\302\377\024\014\346\264\273\345\212\250\345\245\226\345\212\261\022/\n\tm_pretim"
    "e\030\007 \001(\005B\034\302\377\024\030\346\264\273\345\212\250\345\274\200\345\247\213\345\207\206\345\244\207\346\227\266\351\227\264\022,\n"
    "\tm_playarg\030\010 \003(\tB\031\302\377\024\014\347\216\251\346\263\225\345\217\202\346\225\260\210\301\024\005\220\301"
    "\024\200\001\"r\n\035Sheet_FestivalMuban_play_game\022Q\n\036"
    "E_FestivalMuban_play_game_List\030\001 \003(\0132#.p"
    "roto_ff.E_FestivalMuban_play_gameB\004\210\301\024@\""
    "\231\001\n\032E_FestivalMuban_play_score\022\024\n\004m_id\030\001"
    " \001(\005B\006\302\377\024\002ID\022\033\n\007m_score\030\002 \001(\005B\n\302\377\024\006\345\210\206\346\225"
    "\260\022\037\n\007m_image\030\003 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024@\022\'\n\007m_"
    "point\030\004 \001(\005B\026\302\377\024\022\350\216\267\345\276\227\345\243\260\346\234\233\347\247\257\345\210\206\"u\n\036S"
    "heet_FestivalMuban_play_score\022S\n\037E_Festi"
    "valMuban_play_score_List\030\001 \003(\0132$.proto_f"
    "f.E_FestivalMuban_play_scoreB\004\210\301\024\010", 13834);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Festival.proto", &protobuf_RegisterTypes);
  E_FestivalFestival::default_instance_ = new E_FestivalFestival();
  Sheet_FestivalFestival::default_instance_ = new Sheet_FestivalFestival();
  E_FestivalTemplate::default_instance_ = new E_FestivalTemplate();
  Sheet_FestivalTemplate::default_instance_ = new Sheet_FestivalTemplate();
  E_FestivalMuban_love::default_instance_ = new E_FestivalMuban_love();
  Sheet_FestivalMuban_love::default_instance_ = new Sheet_FestivalMuban_love();
  E_FestivalMuban_love_rank::default_instance_ = new E_FestivalMuban_love_rank();
  Sheet_FestivalMuban_love_rank::default_instance_ = new Sheet_FestivalMuban_love_rank();
  E_FestivalMuban_love_rank_data::default_instance_ = new E_FestivalMuban_love_rank_data();
  Sheet_FestivalMuban_love_rank_data::default_instance_ = new Sheet_FestivalMuban_love_rank_data();
  E_FestivalMuban_love_task::default_instance_ = new E_FestivalMuban_love_task();
  Sheet_FestivalMuban_love_task::default_instance_ = new Sheet_FestivalMuban_love_task();
  E_FestivalMuban_love_taskreward::default_instance_ = new E_FestivalMuban_love_taskreward();
  Sheet_FestivalMuban_love_taskreward::default_instance_ = new Sheet_FestivalMuban_love_taskreward();
  E_FestivalPeriodindex::default_instance_ = new E_FestivalPeriodindex();
  Sheet_FestivalPeriodindex::default_instance_ = new Sheet_FestivalPeriodindex();
  E_FestivalMuban_bossfristkill::default_instance_ = new E_FestivalMuban_bossfristkill();
  Sheet_FestivalMuban_bossfristkill::default_instance_ = new Sheet_FestivalMuban_bossfristkill();
  E_FestivalMuban_severrank::default_instance_ = new E_FestivalMuban_severrank();
  Sheet_FestivalMuban_severrank::default_instance_ = new Sheet_FestivalMuban_severrank();
  E_FestivalMuban_severrank_data::default_instance_ = new E_FestivalMuban_severrank_data();
  Sheet_FestivalMuban_severrank_data::default_instance_ = new Sheet_FestivalMuban_severrank_data();
  E_FestivalMuban_collectwordCostDesc::default_instance_ = new E_FestivalMuban_collectwordCostDesc();
  E_FestivalMuban_collectword::default_instance_ = new E_FestivalMuban_collectword();
  Sheet_FestivalMuban_collectword::default_instance_ = new Sheet_FestivalMuban_collectword();
  E_FestivalMuban_sign::default_instance_ = new E_FestivalMuban_sign();
  Sheet_FestivalMuban_sign::default_instance_ = new Sheet_FestivalMuban_sign();
  E_FestivalMuban_shop::default_instance_ = new E_FestivalMuban_shop();
  Sheet_FestivalMuban_shop::default_instance_ = new Sheet_FestivalMuban_shop();
  E_FestivalMuban_rechange::default_instance_ = new E_FestivalMuban_rechange();
  Sheet_FestivalMuban_rechange::default_instance_ = new Sheet_FestivalMuban_rechange();
  E_FestivalMuban_leiji::default_instance_ = new E_FestivalMuban_leiji();
  Sheet_FestivalMuban_leiji::default_instance_ = new Sheet_FestivalMuban_leiji();
  E_FestivalMuban_zadan::default_instance_ = new E_FestivalMuban_zadan();
  Sheet_FestivalMuban_zadan::default_instance_ = new Sheet_FestivalMuban_zadan();
  E_FestivalZadanconstant::default_instance_ = new E_FestivalZadanconstant();
  Sheet_FestivalZadanconstant::default_instance_ = new Sheet_FestivalZadanconstant();
  E_FestivalMuban_turntable::default_instance_ = new E_FestivalMuban_turntable();
  Sheet_FestivalMuban_turntable::default_instance_ = new Sheet_FestivalMuban_turntable();
  E_FestivalMuban_turntable_pool::default_instance_ = new E_FestivalMuban_turntable_pool();
  Sheet_FestivalMuban_turntable_pool::default_instance_ = new Sheet_FestivalMuban_turntable_pool();
  E_FestivalMuban_turntable_task::default_instance_ = new E_FestivalMuban_turntable_task();
  Sheet_FestivalMuban_turntable_task::default_instance_ = new Sheet_FestivalMuban_turntable_task();
  E_FestivalMuban_donate::default_instance_ = new E_FestivalMuban_donate();
  Sheet_FestivalMuban_donate::default_instance_ = new Sheet_FestivalMuban_donate();
  E_FestivalMuban_donate_sever::default_instance_ = new E_FestivalMuban_donate_sever();
  Sheet_FestivalMuban_donate_sever::default_instance_ = new Sheet_FestivalMuban_donate_sever();
  E_FestivalMuban_donate_single::default_instance_ = new E_FestivalMuban_donate_single();
  Sheet_FestivalMuban_donate_single::default_instance_ = new Sheet_FestivalMuban_donate_single();
  E_FestivalMuban_donate_task::default_instance_ = new E_FestivalMuban_donate_task();
  Sheet_FestivalMuban_donate_task::default_instance_ = new Sheet_FestivalMuban_donate_task();
  E_FestivalMuban_online::default_instance_ = new E_FestivalMuban_online();
  Sheet_FestivalMuban_online::default_instance_ = new Sheet_FestivalMuban_online();
  E_FestivalMuban_rturntable::default_instance_ = new E_FestivalMuban_rturntable();
  Sheet_FestivalMuban_rturntable::default_instance_ = new Sheet_FestivalMuban_rturntable();
  E_FestivalMuban_rturntable_recharge::default_instance_ = new E_FestivalMuban_rturntable_recharge();
  Sheet_FestivalMuban_rturntable_recharge::default_instance_ = new Sheet_FestivalMuban_rturntable_recharge();
  E_FestivalMuban_rturntable_recharge_ratio::default_instance_ = new E_FestivalMuban_rturntable_recharge_ratio();
  Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance_ = new Sheet_FestivalMuban_rturntable_recharge_ratio();
  E_FestivalMuban_drawpize::default_instance_ = new E_FestivalMuban_drawpize();
  Sheet_FestivalMuban_drawpize::default_instance_ = new Sheet_FestivalMuban_drawpize();
  E_FestivalMuban_drawpize_pool::default_instance_ = new E_FestivalMuban_drawpize_pool();
  Sheet_FestivalMuban_drawpize_pool::default_instance_ = new Sheet_FestivalMuban_drawpize_pool();
  E_FestivalMuban_drawpize_total::default_instance_ = new E_FestivalMuban_drawpize_total();
  Sheet_FestivalMuban_drawpize_total::default_instance_ = new Sheet_FestivalMuban_drawpize_total();
  E_FestivalMuban_totalrecharge::default_instance_ = new E_FestivalMuban_totalrecharge();
  Sheet_FestivalMuban_totalrecharge::default_instance_ = new Sheet_FestivalMuban_totalrecharge();
  E_FestivalMuban_dailytotalrecharge::default_instance_ = new E_FestivalMuban_dailytotalrecharge();
  Sheet_FestivalMuban_dailytotalrecharge::default_instance_ = new Sheet_FestivalMuban_dailytotalrecharge();
  E_FestivalMuban_play::default_instance_ = new E_FestivalMuban_play();
  Sheet_FestivalMuban_play::default_instance_ = new Sheet_FestivalMuban_play();
  E_FestivalMuban_play_reward::default_instance_ = new E_FestivalMuban_play_reward();
  Sheet_FestivalMuban_play_reward::default_instance_ = new Sheet_FestivalMuban_play_reward();
  E_FestivalMuban_play_game::default_instance_ = new E_FestivalMuban_play_game();
  Sheet_FestivalMuban_play_game::default_instance_ = new Sheet_FestivalMuban_play_game();
  E_FestivalMuban_play_score::default_instance_ = new E_FestivalMuban_play_score();
  Sheet_FestivalMuban_play_score::default_instance_ = new Sheet_FestivalMuban_play_score();
  E_FestivalFestival::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalFestival::default_instance_->InitAsDefaultInstance();
  E_FestivalTemplate::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalTemplate::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_love::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_love::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_love_rank::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_love_rank::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_love_rank_data::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_love_rank_data::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_love_task::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_love_task::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_love_taskreward::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_love_taskreward::default_instance_->InitAsDefaultInstance();
  E_FestivalPeriodindex::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalPeriodindex::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_bossfristkill::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_bossfristkill::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_severrank::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_severrank::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_severrank_data::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_severrank_data::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_collectwordCostDesc::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_collectword::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_collectword::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_sign::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_sign::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_shop::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_shop::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_rechange::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_rechange::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_leiji::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_leiji::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_zadan::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_zadan::default_instance_->InitAsDefaultInstance();
  E_FestivalZadanconstant::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalZadanconstant::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_turntable::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_turntable::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_turntable_pool::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_turntable_pool::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_turntable_task::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_turntable_task::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_donate::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_donate::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_donate_sever::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_donate_sever::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_donate_single::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_donate_single::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_donate_task::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_donate_task::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_online::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_online::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_rturntable::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_rturntable::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_rturntable_recharge::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_rturntable_recharge::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_rturntable_recharge_ratio::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_drawpize::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_drawpize::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_drawpize_pool::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_drawpize_pool::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_drawpize_total::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_drawpize_total::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_totalrecharge::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_totalrecharge::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_dailytotalrecharge::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_dailytotalrecharge::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_play::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_play::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_play_reward::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_play_reward::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_play_game::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_play_game::default_instance_->InitAsDefaultInstance();
  E_FestivalMuban_play_score::default_instance_->InitAsDefaultInstance();
  Sheet_FestivalMuban_play_score::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fFestival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fFestival_2eproto {
  StaticDescriptorInitializer_E_5fFestival_2eproto() {
    protobuf_AddDesc_E_5fFestival_2eproto();
  }
} static_descriptor_initializer_E_5fFestival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FestivalFestival::kMIdFieldNumber;
const int E_FestivalFestival::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_FestivalFestival::E_FestivalFestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalFestival::InitAsDefaultInstance() {
}

E_FestivalFestival::E_FestivalFestival(const E_FestivalFestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalFestival::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalFestival::~E_FestivalFestival() {
  SharedDtor();
}

void E_FestivalFestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalFestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalFestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalFestival_descriptor_;
}

const E_FestivalFestival& E_FestivalFestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalFestival* E_FestivalFestival::default_instance_ = NULL;

E_FestivalFestival* E_FestivalFestival::New() const {
  return new E_FestivalFestival;
}

void E_FestivalFestival::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalFestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalFestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalFestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalFestival::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalFestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalFestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalFestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalFestival::MergeFrom(const E_FestivalFestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalFestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalFestival::CopyFrom(const E_FestivalFestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalFestival::IsInitialized() const {

  return true;
}

void E_FestivalFestival::Swap(E_FestivalFestival* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalFestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalFestival_descriptor_;
  metadata.reflection = E_FestivalFestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalFestival::kEFestivalFestivalListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalFestival::Sheet_FestivalFestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalFestival::InitAsDefaultInstance() {
}

Sheet_FestivalFestival::Sheet_FestivalFestival(const Sheet_FestivalFestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalFestival::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalFestival::~Sheet_FestivalFestival() {
  SharedDtor();
}

void Sheet_FestivalFestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalFestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalFestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalFestival_descriptor_;
}

const Sheet_FestivalFestival& Sheet_FestivalFestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalFestival* Sheet_FestivalFestival::default_instance_ = NULL;

Sheet_FestivalFestival* Sheet_FestivalFestival::New() const {
  return new Sheet_FestivalFestival;
}

void Sheet_FestivalFestival::Clear() {
  e_festivalfestival_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalFestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalFestival_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalfestival_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalFestival_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalFestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
  for (int i = 0; i < this->e_festivalfestival_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalfestival_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalFestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
  for (int i = 0; i < this->e_festivalfestival_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalfestival_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalFestival::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalFestival E_FestivalFestival_List = 1;
  total_size += 1 * this->e_festivalfestival_list_size();
  for (int i = 0; i < this->e_festivalfestival_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalfestival_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalFestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalFestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalFestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalFestival::MergeFrom(const Sheet_FestivalFestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalfestival_list_.MergeFrom(from.e_festivalfestival_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalFestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalFestival::CopyFrom(const Sheet_FestivalFestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalFestival::IsInitialized() const {

  return true;
}

void Sheet_FestivalFestival::Swap(Sheet_FestivalFestival* other) {
  if (other != this) {
    e_festivalfestival_list_.Swap(&other->e_festivalfestival_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalFestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalFestival_descriptor_;
  metadata.reflection = Sheet_FestivalFestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalTemplate::kMIdFieldNumber;
const int E_FestivalTemplate::kMNameFieldNumber;
const int E_FestivalTemplate::kMFestivalidFieldNumber;
const int E_FestivalTemplate::kMTimetypeFieldNumber;
const int E_FestivalTemplate::kMLevelFieldNumber;
const int E_FestivalTemplate::kMViplevelFieldNumber;
const int E_FestivalTemplate::kMRechangeFieldNumber;
const int E_FestivalTemplate::kMSevertypeFieldNumber;
const int E_FestivalTemplate::kMTypeargFieldNumber;
const int E_FestivalTemplate::kMPeriodtypeFieldNumber;
const int E_FestivalTemplate::kMPeriodFieldNumber;
const int E_FestivalTemplate::kMIfopenFieldNumber;
const int E_FestivalTemplate::kMTimeargFieldNumber;
#endif  // !_MSC_VER

E_FestivalTemplate::E_FestivalTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalTemplate::InitAsDefaultInstance() {
}

E_FestivalTemplate::E_FestivalTemplate(const E_FestivalTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalTemplate::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_festivalid_ = 0;
  m_timetype_ = 0;
  m_level_ = 0;
  m_viplevel_ = 0;
  m_rechange_ = 0;
  m_severtype_ = 0;
  m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_periodtype_ = 0;
  m_period_ = 0;
  m_ifopen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalTemplate::~E_FestivalTemplate() {
  SharedDtor();
}

void E_FestivalTemplate::SharedDtor() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typearg_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalTemplate_descriptor_;
}

const E_FestivalTemplate& E_FestivalTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalTemplate* E_FestivalTemplate::default_instance_ = NULL;

E_FestivalTemplate* E_FestivalTemplate::New() const {
  return new E_FestivalTemplate;
}

void E_FestivalTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_festivalid_ = 0;
    m_timetype_ = 0;
    m_level_ = 0;
    m_viplevel_ = 0;
    m_rechange_ = 0;
    m_severtype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_m_typearg()) {
      if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
        m_typearg_->clear();
      }
    }
    m_periodtype_ = 0;
    m_period_ = 0;
    m_ifopen_ = 0;
  }
  m_timearg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_name;
        break;
      }

      // optional string m_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_festivalid;
        break;
      }

      // optional int32 m_festivalid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_festivalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_festivalid_)));
          set_has_m_festivalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_timetype;
        break;
      }

      // optional int32 m_timetype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timetype_)));
          set_has_m_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_level;
        break;
      }

      // optional int32 m_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_level_)));
          set_has_m_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_rechange;
        break;
      }

      // optional int32 m_rechange = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechange_)));
          set_has_m_rechange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_severtype;
        break;
      }

      // optional int32 m_severtype = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_severtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_severtype_)));
          set_has_m_severtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_m_typearg;
        break;
      }

      // optional string m_typearg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_typearg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typearg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typearg().data(), this->m_typearg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_periodtype;
        break;
      }

      // optional int32 m_periodtype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_periodtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_periodtype_)));
          set_has_m_periodtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_ifopen;
        break;
      }

      // optional int32 m_ifopen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ifopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ifopen_)));
          set_has_m_ifopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_timearg;
        break;
      }

      // repeated string m_timearg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_timearg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_timearg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_timearg(this->m_timearg_size() - 1).data(),
            this->m_timearg(this->m_timearg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_m_timearg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_name(), output);
  }

  // optional int32 m_festivalid = 3;
  if (has_m_festivalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_festivalid(), output);
  }

  // optional int32 m_timetype = 4;
  if (has_m_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_timetype(), output);
  }

  // optional int32 m_level = 5;
  if (has_m_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_level(), output);
  }

  // optional int32 m_viplevel = 6;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_viplevel(), output);
  }

  // optional int32 m_rechange = 7;
  if (has_m_rechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_rechange(), output);
  }

  // optional int32 m_severtype = 8;
  if (has_m_severtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_severtype(), output);
  }

  // optional string m_typearg = 9;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typearg().data(), this->m_typearg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->m_typearg(), output);
  }

  // optional int32 m_periodtype = 10;
  if (has_m_periodtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_periodtype(), output);
  }

  // optional int32 m_period = 11;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_period(), output);
  }

  // optional int32 m_ifopen = 12;
  if (has_m_ifopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_ifopen(), output);
  }

  // repeated string m_timearg = 13;
  for (int i = 0; i < this->m_timearg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_timearg(i).data(), this->m_timearg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->m_timearg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional string m_name = 2;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_name(), target);
  }

  // optional int32 m_festivalid = 3;
  if (has_m_festivalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_festivalid(), target);
  }

  // optional int32 m_timetype = 4;
  if (has_m_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_timetype(), target);
  }

  // optional int32 m_level = 5;
  if (has_m_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_level(), target);
  }

  // optional int32 m_viplevel = 6;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_viplevel(), target);
  }

  // optional int32 m_rechange = 7;
  if (has_m_rechange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_rechange(), target);
  }

  // optional int32 m_severtype = 8;
  if (has_m_severtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_severtype(), target);
  }

  // optional string m_typearg = 9;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typearg().data(), this->m_typearg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m_typearg(), target);
  }

  // optional int32 m_periodtype = 10;
  if (has_m_periodtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_periodtype(), target);
  }

  // optional int32 m_period = 11;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_period(), target);
  }

  // optional int32 m_ifopen = 12;
  if (has_m_ifopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_ifopen(), target);
  }

  // repeated string m_timearg = 13;
  for (int i = 0; i < this->m_timearg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_timearg(i).data(), this->m_timearg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->m_timearg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalTemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional string m_name = 2;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_festivalid = 3;
    if (has_m_festivalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_festivalid());
    }

    // optional int32 m_timetype = 4;
    if (has_m_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timetype());
    }

    // optional int32 m_level = 5;
    if (has_m_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_level());
    }

    // optional int32 m_viplevel = 6;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_rechange = 7;
    if (has_m_rechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechange());
    }

    // optional int32 m_severtype = 8;
    if (has_m_severtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_severtype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string m_typearg = 9;
    if (has_m_typearg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typearg());
    }

    // optional int32 m_periodtype = 10;
    if (has_m_periodtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_periodtype());
    }

    // optional int32 m_period = 11;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_ifopen = 12;
    if (has_m_ifopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ifopen());
    }

  }
  // repeated string m_timearg = 13;
  total_size += 1 * this->m_timearg_size();
  for (int i = 0; i < this->m_timearg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_timearg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalTemplate::MergeFrom(const E_FestivalTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_timearg_.MergeFrom(from.m_timearg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_festivalid()) {
      set_m_festivalid(from.m_festivalid());
    }
    if (from.has_m_timetype()) {
      set_m_timetype(from.m_timetype());
    }
    if (from.has_m_level()) {
      set_m_level(from.m_level());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_rechange()) {
      set_m_rechange(from.m_rechange());
    }
    if (from.has_m_severtype()) {
      set_m_severtype(from.m_severtype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_typearg()) {
      set_m_typearg(from.m_typearg());
    }
    if (from.has_m_periodtype()) {
      set_m_periodtype(from.m_periodtype());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_ifopen()) {
      set_m_ifopen(from.m_ifopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalTemplate::CopyFrom(const E_FestivalTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalTemplate::IsInitialized() const {

  return true;
}

void E_FestivalTemplate::Swap(E_FestivalTemplate* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_festivalid_, other->m_festivalid_);
    std::swap(m_timetype_, other->m_timetype_);
    std::swap(m_level_, other->m_level_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_rechange_, other->m_rechange_);
    std::swap(m_severtype_, other->m_severtype_);
    std::swap(m_typearg_, other->m_typearg_);
    std::swap(m_periodtype_, other->m_periodtype_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_ifopen_, other->m_ifopen_);
    m_timearg_.Swap(&other->m_timearg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalTemplate_descriptor_;
  metadata.reflection = E_FestivalTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalTemplate::kEFestivalTemplateListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalTemplate::Sheet_FestivalTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalTemplate::InitAsDefaultInstance() {
}

Sheet_FestivalTemplate::Sheet_FestivalTemplate(const Sheet_FestivalTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalTemplate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalTemplate::~Sheet_FestivalTemplate() {
  SharedDtor();
}

void Sheet_FestivalTemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalTemplate_descriptor_;
}

const Sheet_FestivalTemplate& Sheet_FestivalTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalTemplate* Sheet_FestivalTemplate::default_instance_ = NULL;

Sheet_FestivalTemplate* Sheet_FestivalTemplate::New() const {
  return new Sheet_FestivalTemplate;
}

void Sheet_FestivalTemplate::Clear() {
  e_festivaltemplate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalTemplate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivaltemplate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalTemplate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
  for (int i = 0; i < this->e_festivaltemplate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivaltemplate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
  for (int i = 0; i < this->e_festivaltemplate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivaltemplate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalTemplate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalTemplate E_FestivalTemplate_List = 1;
  total_size += 1 * this->e_festivaltemplate_list_size();
  for (int i = 0; i < this->e_festivaltemplate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivaltemplate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalTemplate::MergeFrom(const Sheet_FestivalTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivaltemplate_list_.MergeFrom(from.e_festivaltemplate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalTemplate::CopyFrom(const Sheet_FestivalTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalTemplate::IsInitialized() const {

  return true;
}

void Sheet_FestivalTemplate::Swap(Sheet_FestivalTemplate* other) {
  if (other != this) {
    e_festivaltemplate_list_.Swap(&other->e_festivaltemplate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalTemplate_descriptor_;
  metadata.reflection = Sheet_FestivalTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_love::kMIdFieldNumber;
const int E_FestivalMuban_love::kMPeriodFieldNumber;
const int E_FestivalMuban_love::kMTaskpointidFieldNumber;
const int E_FestivalMuban_love::kMRankgroupFieldNumber;
const int E_FestivalMuban_love::kMTaskgroupFieldNumber;
const int E_FestivalMuban_love::kMTaskrewardgroupFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_love::E_FestivalMuban_love()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_love::InitAsDefaultInstance() {
}

E_FestivalMuban_love::E_FestivalMuban_love(const E_FestivalMuban_love& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_love::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_taskpointid_ = 0;
  m_rankgroup_ = 0;
  m_taskgroup_ = 0;
  m_taskrewardgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_love::~E_FestivalMuban_love() {
  SharedDtor();
}

void E_FestivalMuban_love::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_love::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_love::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_love_descriptor_;
}

const E_FestivalMuban_love& E_FestivalMuban_love::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_love* E_FestivalMuban_love::default_instance_ = NULL;

E_FestivalMuban_love* E_FestivalMuban_love::New() const {
  return new E_FestivalMuban_love;
}

void E_FestivalMuban_love::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_taskpointid_ = 0;
    m_rankgroup_ = 0;
    m_taskgroup_ = 0;
    m_taskrewardgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_love::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_taskpointid;
        break;
      }

      // optional int32 m_taskpointid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskpointid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskpointid_)));
          set_has_m_taskpointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rankgroup;
        break;
      }

      // optional int32 m_rankgroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankgroup_)));
          set_has_m_rankgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_taskgroup;
        break;
      }

      // optional int32 m_taskgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskgroup_)));
          set_has_m_taskgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_taskrewardgroup;
        break;
      }

      // optional int32 m_taskrewardgroup = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskrewardgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskrewardgroup_)));
          set_has_m_taskrewardgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_love::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_taskpointid = 3;
  if (has_m_taskpointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_taskpointid(), output);
  }

  // optional int32 m_rankgroup = 4;
  if (has_m_rankgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rankgroup(), output);
  }

  // optional int32 m_taskgroup = 5;
  if (has_m_taskgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_taskgroup(), output);
  }

  // optional int32 m_taskrewardgroup = 6;
  if (has_m_taskrewardgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_taskrewardgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_love::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_taskpointid = 3;
  if (has_m_taskpointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_taskpointid(), target);
  }

  // optional int32 m_rankgroup = 4;
  if (has_m_rankgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rankgroup(), target);
  }

  // optional int32 m_taskgroup = 5;
  if (has_m_taskgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_taskgroup(), target);
  }

  // optional int32 m_taskrewardgroup = 6;
  if (has_m_taskrewardgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_taskrewardgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_love::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_taskpointid = 3;
    if (has_m_taskpointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskpointid());
    }

    // optional int32 m_rankgroup = 4;
    if (has_m_rankgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankgroup());
    }

    // optional int32 m_taskgroup = 5;
    if (has_m_taskgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskgroup());
    }

    // optional int32 m_taskrewardgroup = 6;
    if (has_m_taskrewardgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskrewardgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_love::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_love* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_love*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_love::MergeFrom(const E_FestivalMuban_love& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_taskpointid()) {
      set_m_taskpointid(from.m_taskpointid());
    }
    if (from.has_m_rankgroup()) {
      set_m_rankgroup(from.m_rankgroup());
    }
    if (from.has_m_taskgroup()) {
      set_m_taskgroup(from.m_taskgroup());
    }
    if (from.has_m_taskrewardgroup()) {
      set_m_taskrewardgroup(from.m_taskrewardgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_love::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_love::CopyFrom(const E_FestivalMuban_love& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_love::IsInitialized() const {

  return true;
}

void E_FestivalMuban_love::Swap(E_FestivalMuban_love* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_taskpointid_, other->m_taskpointid_);
    std::swap(m_rankgroup_, other->m_rankgroup_);
    std::swap(m_taskgroup_, other->m_taskgroup_);
    std::swap(m_taskrewardgroup_, other->m_taskrewardgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_love::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_love_descriptor_;
  metadata.reflection = E_FestivalMuban_love_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_love::kEFestivalMubanLoveListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_love::Sheet_FestivalMuban_love()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_love::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_love::Sheet_FestivalMuban_love(const Sheet_FestivalMuban_love& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_love::~Sheet_FestivalMuban_love() {
  SharedDtor();
}

void Sheet_FestivalMuban_love::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_love::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_love_descriptor_;
}

const Sheet_FestivalMuban_love& Sheet_FestivalMuban_love::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_love* Sheet_FestivalMuban_love::default_instance_ = NULL;

Sheet_FestivalMuban_love* Sheet_FestivalMuban_love::New() const {
  return new Sheet_FestivalMuban_love;
}

void Sheet_FestivalMuban_love::Clear() {
  e_festivalmuban_love_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_love::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_love_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_love_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_love_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_love::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_love_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_love::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_love_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_love::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_love E_FestivalMuban_love_List = 1;
  total_size += 1 * this->e_festivalmuban_love_list_size();
  for (int i = 0; i < this->e_festivalmuban_love_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_love_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_love::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_love* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_love*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_love::MergeFrom(const Sheet_FestivalMuban_love& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_love_list_.MergeFrom(from.e_festivalmuban_love_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_love::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love::CopyFrom(const Sheet_FestivalMuban_love& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_love::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_love::Swap(Sheet_FestivalMuban_love* other) {
  if (other != this) {
    e_festivalmuban_love_list_.Swap(&other->e_festivalmuban_love_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_love::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_love_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_love_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_love_rank::kMIdFieldNumber;
const int E_FestivalMuban_love_rank::kMGroupidFieldNumber;
const int E_FestivalMuban_love_rank::kMRewardshowFieldNumber;
const int E_FestivalMuban_love_rank::kMDatagroupidFieldNumber;
const int E_FestivalMuban_love_rank::kMRanktypeFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_love_rank::E_FestivalMuban_love_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_love_rank::InitAsDefaultInstance() {
}

E_FestivalMuban_love_rank::E_FestivalMuban_love_rank(const E_FestivalMuban_love_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_love_rank::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_rewardshow_ = 0;
  m_datagroupid_ = 0;
  m_ranktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_love_rank::~E_FestivalMuban_love_rank() {
  SharedDtor();
}

void E_FestivalMuban_love_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_love_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_love_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_love_rank_descriptor_;
}

const E_FestivalMuban_love_rank& E_FestivalMuban_love_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_love_rank* E_FestivalMuban_love_rank::default_instance_ = NULL;

E_FestivalMuban_love_rank* E_FestivalMuban_love_rank::New() const {
  return new E_FestivalMuban_love_rank;
}

void E_FestivalMuban_love_rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_rewardshow_ = 0;
    m_datagroupid_ = 0;
    m_ranktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_love_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rewardshow;
        break;
      }

      // optional int32 m_rewardshow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardshow_)));
          set_has_m_rewardshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_datagroupid;
        break;
      }

      // optional int32 m_datagroupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_datagroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_datagroupid_)));
          set_has_m_datagroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_ranktype;
        break;
      }

      // optional int32 m_ranktype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ranktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ranktype_)));
          set_has_m_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_love_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_rewardshow = 3;
  if (has_m_rewardshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rewardshow(), output);
  }

  // optional int32 m_datagroupid = 4;
  if (has_m_datagroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_datagroupid(), output);
  }

  // optional int32 m_ranktype = 5;
  if (has_m_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ranktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_love_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_rewardshow = 3;
  if (has_m_rewardshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rewardshow(), target);
  }

  // optional int32 m_datagroupid = 4;
  if (has_m_datagroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_datagroupid(), target);
  }

  // optional int32 m_ranktype = 5;
  if (has_m_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ranktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_love_rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_rewardshow = 3;
    if (has_m_rewardshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardshow());
    }

    // optional int32 m_datagroupid = 4;
    if (has_m_datagroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_datagroupid());
    }

    // optional int32 m_ranktype = 5;
    if (has_m_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ranktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_love_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_love_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_love_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_love_rank::MergeFrom(const E_FestivalMuban_love_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_rewardshow()) {
      set_m_rewardshow(from.m_rewardshow());
    }
    if (from.has_m_datagroupid()) {
      set_m_datagroupid(from.m_datagroupid());
    }
    if (from.has_m_ranktype()) {
      set_m_ranktype(from.m_ranktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_love_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_love_rank::CopyFrom(const E_FestivalMuban_love_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_love_rank::IsInitialized() const {

  return true;
}

void E_FestivalMuban_love_rank::Swap(E_FestivalMuban_love_rank* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_rewardshow_, other->m_rewardshow_);
    std::swap(m_datagroupid_, other->m_datagroupid_);
    std::swap(m_ranktype_, other->m_ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_love_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_love_rank_descriptor_;
  metadata.reflection = E_FestivalMuban_love_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_love_rank::kEFestivalMubanLoveRankListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_love_rank::Sheet_FestivalMuban_love_rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_love_rank::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_love_rank::Sheet_FestivalMuban_love_rank(const Sheet_FestivalMuban_love_rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_rank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_love_rank::~Sheet_FestivalMuban_love_rank() {
  SharedDtor();
}

void Sheet_FestivalMuban_love_rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_love_rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_love_rank_descriptor_;
}

const Sheet_FestivalMuban_love_rank& Sheet_FestivalMuban_love_rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_love_rank* Sheet_FestivalMuban_love_rank::default_instance_ = NULL;

Sheet_FestivalMuban_love_rank* Sheet_FestivalMuban_love_rank::New() const {
  return new Sheet_FestivalMuban_love_rank;
}

void Sheet_FestivalMuban_love_rank::Clear() {
  e_festivalmuban_love_rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_love_rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_love_rank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_love_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_love_rank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_love_rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_love_rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_love_rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_love_rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_love_rank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_love_rank E_FestivalMuban_love_rank_List = 1;
  total_size += 1 * this->e_festivalmuban_love_rank_list_size();
  for (int i = 0; i < this->e_festivalmuban_love_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_love_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_love_rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_love_rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_love_rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_love_rank::MergeFrom(const Sheet_FestivalMuban_love_rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_love_rank_list_.MergeFrom(from.e_festivalmuban_love_rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_love_rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_rank::CopyFrom(const Sheet_FestivalMuban_love_rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_love_rank::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_love_rank::Swap(Sheet_FestivalMuban_love_rank* other) {
  if (other != this) {
    e_festivalmuban_love_rank_list_.Swap(&other->e_festivalmuban_love_rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_love_rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_love_rank_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_love_rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_love_rank_data::kMIdFieldNumber;
const int E_FestivalMuban_love_rank_data::kMGroupidFieldNumber;
const int E_FestivalMuban_love_rank_data::kMMaxrankFieldNumber;
const int E_FestivalMuban_love_rank_data::kMMinrankFieldNumber;
const int E_FestivalMuban_love_rank_data::kMRankvalueFieldNumber;
const int E_FestivalMuban_love_rank_data::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_love_rank_data::E_FestivalMuban_love_rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_love_rank_data::InitAsDefaultInstance() {
}

E_FestivalMuban_love_rank_data::E_FestivalMuban_love_rank_data(const E_FestivalMuban_love_rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_love_rank_data::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_maxrank_ = 0;
  m_minrank_ = 0;
  m_rankvalue_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_love_rank_data::~E_FestivalMuban_love_rank_data() {
  SharedDtor();
}

void E_FestivalMuban_love_rank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_love_rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_love_rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_love_rank_data_descriptor_;
}

const E_FestivalMuban_love_rank_data& E_FestivalMuban_love_rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_love_rank_data* E_FestivalMuban_love_rank_data::default_instance_ = NULL;

E_FestivalMuban_love_rank_data* E_FestivalMuban_love_rank_data::New() const {
  return new E_FestivalMuban_love_rank_data;
}

void E_FestivalMuban_love_rank_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_maxrank_ = 0;
    m_minrank_ = 0;
    m_rankvalue_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_love_rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_maxrank;
        break;
      }

      // optional int32 m_maxrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxrank_)));
          set_has_m_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_minrank;
        break;
      }

      // optional int32 m_minrank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minrank_)));
          set_has_m_minrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rankvalue;
        break;
      }

      // optional int32 m_rankvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankvalue_)));
          set_has_m_rankvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_love_rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_maxrank = 3;
  if (has_m_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_maxrank(), output);
  }

  // optional int32 m_minrank = 4;
  if (has_m_minrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_minrank(), output);
  }

  // optional int32 m_rankvalue = 5;
  if (has_m_rankvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rankvalue(), output);
  }

  // optional int32 m_boxid = 6;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_love_rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_maxrank = 3;
  if (has_m_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_maxrank(), target);
  }

  // optional int32 m_minrank = 4;
  if (has_m_minrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_minrank(), target);
  }

  // optional int32 m_rankvalue = 5;
  if (has_m_rankvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rankvalue(), target);
  }

  // optional int32 m_boxid = 6;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_love_rank_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_maxrank = 3;
    if (has_m_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxrank());
    }

    // optional int32 m_minrank = 4;
    if (has_m_minrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minrank());
    }

    // optional int32 m_rankvalue = 5;
    if (has_m_rankvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankvalue());
    }

    // optional int32 m_boxid = 6;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_love_rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_love_rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_love_rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_love_rank_data::MergeFrom(const E_FestivalMuban_love_rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_maxrank()) {
      set_m_maxrank(from.m_maxrank());
    }
    if (from.has_m_minrank()) {
      set_m_minrank(from.m_minrank());
    }
    if (from.has_m_rankvalue()) {
      set_m_rankvalue(from.m_rankvalue());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_love_rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_love_rank_data::CopyFrom(const E_FestivalMuban_love_rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_love_rank_data::IsInitialized() const {

  return true;
}

void E_FestivalMuban_love_rank_data::Swap(E_FestivalMuban_love_rank_data* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_maxrank_, other->m_maxrank_);
    std::swap(m_minrank_, other->m_minrank_);
    std::swap(m_rankvalue_, other->m_rankvalue_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_love_rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_love_rank_data_descriptor_;
  metadata.reflection = E_FestivalMuban_love_rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_love_rank_data::kEFestivalMubanLoveRankDataListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_love_rank_data::Sheet_FestivalMuban_love_rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_love_rank_data::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_love_rank_data::Sheet_FestivalMuban_love_rank_data(const Sheet_FestivalMuban_love_rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_rank_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_love_rank_data::~Sheet_FestivalMuban_love_rank_data() {
  SharedDtor();
}

void Sheet_FestivalMuban_love_rank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_love_rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_love_rank_data_descriptor_;
}

const Sheet_FestivalMuban_love_rank_data& Sheet_FestivalMuban_love_rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_love_rank_data* Sheet_FestivalMuban_love_rank_data::default_instance_ = NULL;

Sheet_FestivalMuban_love_rank_data* Sheet_FestivalMuban_love_rank_data::New() const {
  return new Sheet_FestivalMuban_love_rank_data;
}

void Sheet_FestivalMuban_love_rank_data::Clear() {
  e_festivalmuban_love_rank_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_love_rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_love_rank_data_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_love_rank_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_love_rank_data_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_love_rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_rank_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_love_rank_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_love_rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_rank_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_love_rank_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_love_rank_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_love_rank_data E_FestivalMuban_love_rank_data_List = 1;
  total_size += 1 * this->e_festivalmuban_love_rank_data_list_size();
  for (int i = 0; i < this->e_festivalmuban_love_rank_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_love_rank_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_love_rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_love_rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_love_rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_love_rank_data::MergeFrom(const Sheet_FestivalMuban_love_rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_love_rank_data_list_.MergeFrom(from.e_festivalmuban_love_rank_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_love_rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_rank_data::CopyFrom(const Sheet_FestivalMuban_love_rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_love_rank_data::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_love_rank_data::Swap(Sheet_FestivalMuban_love_rank_data* other) {
  if (other != this) {
    e_festivalmuban_love_rank_data_list_.Swap(&other->e_festivalmuban_love_rank_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_love_rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_love_rank_data_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_love_rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_love_task::kMIdFieldNumber;
const int E_FestivalMuban_love_task::kMGroupidFieldNumber;
const int E_FestivalMuban_love_task::kMEventtypeFieldNumber;
const int E_FestivalMuban_love_task::kMReachpriceFieldNumber;
const int E_FestivalMuban_love_task::kMLinkFieldNumber;
const int E_FestivalMuban_love_task::kMRewardtimesFieldNumber;
const int E_FestivalMuban_love_task::kMRewardFieldNumber;
const int E_FestivalMuban_love_task::kMParamFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_love_task::E_FestivalMuban_love_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_love_task::InitAsDefaultInstance() {
}

E_FestivalMuban_love_task::E_FestivalMuban_love_task(const E_FestivalMuban_love_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_love_task::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_link_ = 0;
  m_rewardtimes_ = 0;
  m_reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_love_task::~E_FestivalMuban_love_task() {
  SharedDtor();
}

void E_FestivalMuban_love_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_love_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_love_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_love_task_descriptor_;
}

const E_FestivalMuban_love_task& E_FestivalMuban_love_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_love_task* E_FestivalMuban_love_task::default_instance_ = NULL;

E_FestivalMuban_love_task* E_FestivalMuban_love_task::New() const {
  return new E_FestivalMuban_love_task;
}

void E_FestivalMuban_love_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_link_ = 0;
    m_rewardtimes_ = 0;
    m_reward_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_love_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_link;
        break;
      }

      // optional int32 m_link = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_link_)));
          set_has_m_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rewardtimes;
        break;
      }

      // optional int32 m_rewardtimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardtimes_)));
          set_has_m_rewardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_love_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_link = 5;
  if (has_m_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_link(), output);
  }

  // optional int32 m_rewardtimes = 6;
  if (has_m_rewardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rewardtimes(), output);
  }

  // optional int32 m_reward = 7;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_reward(), output);
  }

  // repeated int32 m_param = 8;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_love_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_link = 5;
  if (has_m_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_link(), target);
  }

  // optional int32 m_rewardtimes = 6;
  if (has_m_rewardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rewardtimes(), target);
  }

  // optional int32 m_reward = 7;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_reward(), target);
  }

  // repeated int32 m_param = 8;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_love_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_eventtype = 3;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_link = 5;
    if (has_m_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_link());
    }

    // optional int32 m_rewardtimes = 6;
    if (has_m_rewardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardtimes());
    }

    // optional int32 m_reward = 7;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

  }
  // repeated int32 m_param = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_love_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_love_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_love_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_love_task::MergeFrom(const E_FestivalMuban_love_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_link()) {
      set_m_link(from.m_link());
    }
    if (from.has_m_rewardtimes()) {
      set_m_rewardtimes(from.m_rewardtimes());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_love_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_love_task::CopyFrom(const E_FestivalMuban_love_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_love_task::IsInitialized() const {

  return true;
}

void E_FestivalMuban_love_task::Swap(E_FestivalMuban_love_task* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_link_, other->m_link_);
    std::swap(m_rewardtimes_, other->m_rewardtimes_);
    std::swap(m_reward_, other->m_reward_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_love_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_love_task_descriptor_;
  metadata.reflection = E_FestivalMuban_love_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_love_task::kEFestivalMubanLoveTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_love_task::Sheet_FestivalMuban_love_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_love_task::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_love_task::Sheet_FestivalMuban_love_task(const Sheet_FestivalMuban_love_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_task::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_love_task::~Sheet_FestivalMuban_love_task() {
  SharedDtor();
}

void Sheet_FestivalMuban_love_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_love_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_love_task_descriptor_;
}

const Sheet_FestivalMuban_love_task& Sheet_FestivalMuban_love_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_love_task* Sheet_FestivalMuban_love_task::default_instance_ = NULL;

Sheet_FestivalMuban_love_task* Sheet_FestivalMuban_love_task::New() const {
  return new Sheet_FestivalMuban_love_task;
}

void Sheet_FestivalMuban_love_task::Clear() {
  e_festivalmuban_love_task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_love_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_love_task_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_love_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_love_task_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_love_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_love_task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_love_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_love_task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_love_task::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_love_task E_FestivalMuban_love_task_List = 1;
  total_size += 1 * this->e_festivalmuban_love_task_list_size();
  for (int i = 0; i < this->e_festivalmuban_love_task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_love_task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_love_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_love_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_love_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_love_task::MergeFrom(const Sheet_FestivalMuban_love_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_love_task_list_.MergeFrom(from.e_festivalmuban_love_task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_love_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_task::CopyFrom(const Sheet_FestivalMuban_love_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_love_task::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_love_task::Swap(Sheet_FestivalMuban_love_task* other) {
  if (other != this) {
    e_festivalmuban_love_task_list_.Swap(&other->e_festivalmuban_love_task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_love_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_love_task_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_love_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_love_taskreward::kMIdFieldNumber;
const int E_FestivalMuban_love_taskreward::kMGroupidFieldNumber;
const int E_FestivalMuban_love_taskreward::kMValueFieldNumber;
const int E_FestivalMuban_love_taskreward::kMBoxFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_love_taskreward::E_FestivalMuban_love_taskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_love_taskreward::InitAsDefaultInstance() {
}

E_FestivalMuban_love_taskreward::E_FestivalMuban_love_taskreward(const E_FestivalMuban_love_taskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_love_taskreward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_value_ = 0;
  m_box_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_love_taskreward::~E_FestivalMuban_love_taskreward() {
  SharedDtor();
}

void E_FestivalMuban_love_taskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_love_taskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_love_taskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_love_taskreward_descriptor_;
}

const E_FestivalMuban_love_taskreward& E_FestivalMuban_love_taskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_love_taskreward* E_FestivalMuban_love_taskreward::default_instance_ = NULL;

E_FestivalMuban_love_taskreward* E_FestivalMuban_love_taskreward::New() const {
  return new E_FestivalMuban_love_taskreward;
}

void E_FestivalMuban_love_taskreward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_value_ = 0;
    m_box_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_love_taskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_box;
        break;
      }

      // optional int32 m_box = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_box_)));
          set_has_m_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_love_taskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional int32 m_box = 4;
  if (has_m_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_box(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_love_taskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional int32 m_box = 4;
  if (has_m_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_box(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_love_taskreward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_box = 4;
    if (has_m_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_box());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_love_taskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_love_taskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_love_taskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_love_taskreward::MergeFrom(const E_FestivalMuban_love_taskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_box()) {
      set_m_box(from.m_box());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_love_taskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_love_taskreward::CopyFrom(const E_FestivalMuban_love_taskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_love_taskreward::IsInitialized() const {

  return true;
}

void E_FestivalMuban_love_taskreward::Swap(E_FestivalMuban_love_taskreward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_box_, other->m_box_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_love_taskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_love_taskreward_descriptor_;
  metadata.reflection = E_FestivalMuban_love_taskreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_love_taskreward::kEFestivalMubanLoveTaskrewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_love_taskreward::Sheet_FestivalMuban_love_taskreward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_love_taskreward::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_love_taskreward::Sheet_FestivalMuban_love_taskreward(const Sheet_FestivalMuban_love_taskreward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_taskreward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_love_taskreward::~Sheet_FestivalMuban_love_taskreward() {
  SharedDtor();
}

void Sheet_FestivalMuban_love_taskreward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_love_taskreward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_love_taskreward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_love_taskreward_descriptor_;
}

const Sheet_FestivalMuban_love_taskreward& Sheet_FestivalMuban_love_taskreward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_love_taskreward* Sheet_FestivalMuban_love_taskreward::default_instance_ = NULL;

Sheet_FestivalMuban_love_taskreward* Sheet_FestivalMuban_love_taskreward::New() const {
  return new Sheet_FestivalMuban_love_taskreward;
}

void Sheet_FestivalMuban_love_taskreward::Clear() {
  e_festivalmuban_love_taskreward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_love_taskreward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_love_taskreward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_love_taskreward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_love_taskreward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_love_taskreward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_taskreward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_love_taskreward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_love_taskreward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
  for (int i = 0; i < this->e_festivalmuban_love_taskreward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_love_taskreward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_love_taskreward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_love_taskreward E_FestivalMuban_love_taskreward_List = 1;
  total_size += 1 * this->e_festivalmuban_love_taskreward_list_size();
  for (int i = 0; i < this->e_festivalmuban_love_taskreward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_love_taskreward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_love_taskreward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_love_taskreward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_love_taskreward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_love_taskreward::MergeFrom(const Sheet_FestivalMuban_love_taskreward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_love_taskreward_list_.MergeFrom(from.e_festivalmuban_love_taskreward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_love_taskreward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_love_taskreward::CopyFrom(const Sheet_FestivalMuban_love_taskreward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_love_taskreward::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_love_taskreward::Swap(Sheet_FestivalMuban_love_taskreward* other) {
  if (other != this) {
    e_festivalmuban_love_taskreward_list_.Swap(&other->e_festivalmuban_love_taskreward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_love_taskreward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_love_taskreward_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_love_taskreward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalPeriodindex::kMMinorigaldayFieldNumber;
const int E_FestivalPeriodindex::kMPeriodFieldNumber;
#endif  // !_MSC_VER

E_FestivalPeriodindex::E_FestivalPeriodindex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalPeriodindex::InitAsDefaultInstance() {
}

E_FestivalPeriodindex::E_FestivalPeriodindex(const E_FestivalPeriodindex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalPeriodindex::SharedCtor() {
  _cached_size_ = 0;
  m_minorigalday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalPeriodindex::~E_FestivalPeriodindex() {
  SharedDtor();
}

void E_FestivalPeriodindex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalPeriodindex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalPeriodindex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalPeriodindex_descriptor_;
}

const E_FestivalPeriodindex& E_FestivalPeriodindex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalPeriodindex* E_FestivalPeriodindex::default_instance_ = NULL;

E_FestivalPeriodindex* E_FestivalPeriodindex::New() const {
  return new E_FestivalPeriodindex;
}

void E_FestivalPeriodindex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_minorigalday_ = 0;
  }
  m_period_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalPeriodindex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_minorigalday = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minorigalday_)));
          set_has_m_minorigalday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // repeated int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_m_period())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_period())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalPeriodindex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_minorigalday = 1;
  if (has_m_minorigalday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_minorigalday(), output);
  }

  // repeated int32 m_period = 2;
  for (int i = 0; i < this->m_period_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->m_period(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalPeriodindex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_minorigalday = 1;
  if (has_m_minorigalday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_minorigalday(), target);
  }

  // repeated int32 m_period = 2;
  for (int i = 0; i < this->m_period_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->m_period(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalPeriodindex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_minorigalday = 1;
    if (has_m_minorigalday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minorigalday());
    }

  }
  // repeated int32 m_period = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_period_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_period(i));
    }
    total_size += 1 * this->m_period_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalPeriodindex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalPeriodindex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalPeriodindex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalPeriodindex::MergeFrom(const E_FestivalPeriodindex& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_period_.MergeFrom(from.m_period_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_minorigalday()) {
      set_m_minorigalday(from.m_minorigalday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalPeriodindex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalPeriodindex::CopyFrom(const E_FestivalPeriodindex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalPeriodindex::IsInitialized() const {

  return true;
}

void E_FestivalPeriodindex::Swap(E_FestivalPeriodindex* other) {
  if (other != this) {
    std::swap(m_minorigalday_, other->m_minorigalday_);
    m_period_.Swap(&other->m_period_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalPeriodindex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalPeriodindex_descriptor_;
  metadata.reflection = E_FestivalPeriodindex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalPeriodindex::kEFestivalPeriodindexListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalPeriodindex::Sheet_FestivalPeriodindex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalPeriodindex::InitAsDefaultInstance() {
}

Sheet_FestivalPeriodindex::Sheet_FestivalPeriodindex(const Sheet_FestivalPeriodindex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalPeriodindex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalPeriodindex::~Sheet_FestivalPeriodindex() {
  SharedDtor();
}

void Sheet_FestivalPeriodindex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalPeriodindex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalPeriodindex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalPeriodindex_descriptor_;
}

const Sheet_FestivalPeriodindex& Sheet_FestivalPeriodindex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalPeriodindex* Sheet_FestivalPeriodindex::default_instance_ = NULL;

Sheet_FestivalPeriodindex* Sheet_FestivalPeriodindex::New() const {
  return new Sheet_FestivalPeriodindex;
}

void Sheet_FestivalPeriodindex::Clear() {
  e_festivalperiodindex_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalPeriodindex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalPeriodindex_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalperiodindex_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalPeriodindex_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalPeriodindex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
  for (int i = 0; i < this->e_festivalperiodindex_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalperiodindex_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalPeriodindex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
  for (int i = 0; i < this->e_festivalperiodindex_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalperiodindex_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalPeriodindex::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalPeriodindex E_FestivalPeriodindex_List = 1;
  total_size += 1 * this->e_festivalperiodindex_list_size();
  for (int i = 0; i < this->e_festivalperiodindex_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalperiodindex_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalPeriodindex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalPeriodindex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalPeriodindex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalPeriodindex::MergeFrom(const Sheet_FestivalPeriodindex& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalperiodindex_list_.MergeFrom(from.e_festivalperiodindex_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalPeriodindex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalPeriodindex::CopyFrom(const Sheet_FestivalPeriodindex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalPeriodindex::IsInitialized() const {

  return true;
}

void Sheet_FestivalPeriodindex::Swap(Sheet_FestivalPeriodindex* other) {
  if (other != this) {
    e_festivalperiodindex_list_.Swap(&other->e_festivalperiodindex_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalPeriodindex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalPeriodindex_descriptor_;
  metadata.reflection = Sheet_FestivalPeriodindex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_bossfristkill::kMIdFieldNumber;
const int E_FestivalMuban_bossfristkill::kMPeriodFieldNumber;
const int E_FestivalMuban_bossfristkill::kMTypeFieldNumber;
const int E_FestivalMuban_bossfristkill::kMBossidFieldNumber;
const int E_FestivalMuban_bossfristkill::kMFristkillrewardFieldNumber;
const int E_FestivalMuban_bossfristkill::kMKillrewardFieldNumber;
const int E_FestivalMuban_bossfristkill::kMFristkillpacketFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_bossfristkill::E_FestivalMuban_bossfristkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_bossfristkill::InitAsDefaultInstance() {
}

E_FestivalMuban_bossfristkill::E_FestivalMuban_bossfristkill(const E_FestivalMuban_bossfristkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_bossfristkill::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_type_ = 0;
  m_bossid_ = 0;
  m_fristkillreward_ = 0;
  m_killreward_ = 0;
  m_fristkillpacket_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_bossfristkill::~E_FestivalMuban_bossfristkill() {
  SharedDtor();
}

void E_FestivalMuban_bossfristkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_bossfristkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_bossfristkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_bossfristkill_descriptor_;
}

const E_FestivalMuban_bossfristkill& E_FestivalMuban_bossfristkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_bossfristkill* E_FestivalMuban_bossfristkill::default_instance_ = NULL;

E_FestivalMuban_bossfristkill* E_FestivalMuban_bossfristkill::New() const {
  return new E_FestivalMuban_bossfristkill;
}

void E_FestivalMuban_bossfristkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_type_ = 0;
    m_bossid_ = 0;
    m_fristkillreward_ = 0;
    m_killreward_ = 0;
    m_fristkillpacket_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_bossfristkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_bossid;
        break;
      }

      // optional int32 m_bossid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_bossid_)));
          set_has_m_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_fristkillreward;
        break;
      }

      // optional int32 m_fristkillreward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fristkillreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fristkillreward_)));
          set_has_m_fristkillreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_killreward;
        break;
      }

      // optional int32 m_killreward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_killreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_killreward_)));
          set_has_m_killreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_fristkillpacket;
        break;
      }

      // optional int32 m_fristkillpacket = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_fristkillpacket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_fristkillpacket_)));
          set_has_m_fristkillpacket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_bossfristkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_bossid = 4;
  if (has_m_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_bossid(), output);
  }

  // optional int32 m_fristkillreward = 5;
  if (has_m_fristkillreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_fristkillreward(), output);
  }

  // optional int32 m_killreward = 6;
  if (has_m_killreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_killreward(), output);
  }

  // optional int32 m_fristkillpacket = 7;
  if (has_m_fristkillpacket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_fristkillpacket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_bossfristkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_bossid = 4;
  if (has_m_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_bossid(), target);
  }

  // optional int32 m_fristkillreward = 5;
  if (has_m_fristkillreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_fristkillreward(), target);
  }

  // optional int32 m_killreward = 6;
  if (has_m_killreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_killreward(), target);
  }

  // optional int32 m_fristkillpacket = 7;
  if (has_m_fristkillpacket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_fristkillpacket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_bossfristkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_bossid = 4;
    if (has_m_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_bossid());
    }

    // optional int32 m_fristkillreward = 5;
    if (has_m_fristkillreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fristkillreward());
    }

    // optional int32 m_killreward = 6;
    if (has_m_killreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_killreward());
    }

    // optional int32 m_fristkillpacket = 7;
    if (has_m_fristkillpacket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_fristkillpacket());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_bossfristkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_bossfristkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_bossfristkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_bossfristkill::MergeFrom(const E_FestivalMuban_bossfristkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_bossid()) {
      set_m_bossid(from.m_bossid());
    }
    if (from.has_m_fristkillreward()) {
      set_m_fristkillreward(from.m_fristkillreward());
    }
    if (from.has_m_killreward()) {
      set_m_killreward(from.m_killreward());
    }
    if (from.has_m_fristkillpacket()) {
      set_m_fristkillpacket(from.m_fristkillpacket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_bossfristkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_bossfristkill::CopyFrom(const E_FestivalMuban_bossfristkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_bossfristkill::IsInitialized() const {

  return true;
}

void E_FestivalMuban_bossfristkill::Swap(E_FestivalMuban_bossfristkill* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_bossid_, other->m_bossid_);
    std::swap(m_fristkillreward_, other->m_fristkillreward_);
    std::swap(m_killreward_, other->m_killreward_);
    std::swap(m_fristkillpacket_, other->m_fristkillpacket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_bossfristkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_bossfristkill_descriptor_;
  metadata.reflection = E_FestivalMuban_bossfristkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_bossfristkill::kEFestivalMubanBossfristkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_bossfristkill::Sheet_FestivalMuban_bossfristkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_bossfristkill::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_bossfristkill::Sheet_FestivalMuban_bossfristkill(const Sheet_FestivalMuban_bossfristkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_bossfristkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_bossfristkill::~Sheet_FestivalMuban_bossfristkill() {
  SharedDtor();
}

void Sheet_FestivalMuban_bossfristkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_bossfristkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_bossfristkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_bossfristkill_descriptor_;
}

const Sheet_FestivalMuban_bossfristkill& Sheet_FestivalMuban_bossfristkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_bossfristkill* Sheet_FestivalMuban_bossfristkill::default_instance_ = NULL;

Sheet_FestivalMuban_bossfristkill* Sheet_FestivalMuban_bossfristkill::New() const {
  return new Sheet_FestivalMuban_bossfristkill;
}

void Sheet_FestivalMuban_bossfristkill::Clear() {
  e_festivalmuban_bossfristkill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_bossfristkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_bossfristkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_bossfristkill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_bossfristkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_bossfristkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
  for (int i = 0; i < this->e_festivalmuban_bossfristkill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_bossfristkill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_bossfristkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
  for (int i = 0; i < this->e_festivalmuban_bossfristkill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_bossfristkill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_bossfristkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_bossfristkill E_FestivalMuban_bossfristkill_List = 1;
  total_size += 1 * this->e_festivalmuban_bossfristkill_list_size();
  for (int i = 0; i < this->e_festivalmuban_bossfristkill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_bossfristkill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_bossfristkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_bossfristkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_bossfristkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_bossfristkill::MergeFrom(const Sheet_FestivalMuban_bossfristkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_bossfristkill_list_.MergeFrom(from.e_festivalmuban_bossfristkill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_bossfristkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_bossfristkill::CopyFrom(const Sheet_FestivalMuban_bossfristkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_bossfristkill::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_bossfristkill::Swap(Sheet_FestivalMuban_bossfristkill* other) {
  if (other != this) {
    e_festivalmuban_bossfristkill_list_.Swap(&other->e_festivalmuban_bossfristkill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_bossfristkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_bossfristkill_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_bossfristkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_severrank::kMIdFieldNumber;
const int E_FestivalMuban_severrank::kMPeriodFieldNumber;
const int E_FestivalMuban_severrank::kMOrderFieldNumber;
const int E_FestivalMuban_severrank::kMNameFieldNumber;
const int E_FestivalMuban_severrank::kMOpendayFieldNumber;
const int E_FestivalMuban_severrank::kMClosedayFieldNumber;
const int E_FestivalMuban_severrank::kMChampiontitleFieldNumber;
const int E_FestivalMuban_severrank::kMRewardshowFieldNumber;
const int E_FestivalMuban_severrank::kMDatagroupidFieldNumber;
const int E_FestivalMuban_severrank::kMRanktypeFieldNumber;
const int E_FestivalMuban_severrank::kMRankgiftFieldNumber;
const int E_FestivalMuban_severrank::kMGifticonFieldNumber;
const int E_FestivalMuban_severrank::kMGiftitemidFieldNumber;
const int E_FestivalMuban_severrank::kMOriginalpriceFieldNumber;
const int E_FestivalMuban_severrank::kMPriceFieldNumber;
const int E_FestivalMuban_severrank::kMRatioshowFieldNumber;
const int E_FestivalMuban_severrank::kMRedpointboxFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_severrank::E_FestivalMuban_severrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_severrank::InitAsDefaultInstance() {
}

E_FestivalMuban_severrank::E_FestivalMuban_severrank(const E_FestivalMuban_severrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_severrank::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_openday_ = 0;
  m_closeday_ = 0;
  m_championtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rewardshow_ = 0;
  m_datagroupid_ = 0;
  m_ranktype_ = 0;
  m_rankgift_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gifticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_giftitemid_ = 0;
  m_originalprice_ = 0;
  m_price_ = 0;
  m_ratioshow_ = 0;
  m_redpointbox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_severrank::~E_FestivalMuban_severrank() {
  SharedDtor();
}

void E_FestivalMuban_severrank::SharedDtor() {
  if (m_order_ != &::google::protobuf::internal::kEmptyString) {
    delete m_order_;
  }
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_championtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete m_championtitle_;
  }
  if (m_rankgift_ != &::google::protobuf::internal::kEmptyString) {
    delete m_rankgift_;
  }
  if (m_gifticon_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gifticon_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_severrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_severrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_severrank_descriptor_;
}

const E_FestivalMuban_severrank& E_FestivalMuban_severrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_severrank* E_FestivalMuban_severrank::default_instance_ = NULL;

E_FestivalMuban_severrank* E_FestivalMuban_severrank::New() const {
  return new E_FestivalMuban_severrank;
}

void E_FestivalMuban_severrank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    if (has_m_order()) {
      if (m_order_ != &::google::protobuf::internal::kEmptyString) {
        m_order_->clear();
      }
    }
    if (has_m_name()) {
      if (m_name_ != &::google::protobuf::internal::kEmptyString) {
        m_name_->clear();
      }
    }
    m_openday_ = 0;
    m_closeday_ = 0;
    if (has_m_championtitle()) {
      if (m_championtitle_ != &::google::protobuf::internal::kEmptyString) {
        m_championtitle_->clear();
      }
    }
    m_rewardshow_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_datagroupid_ = 0;
    m_ranktype_ = 0;
    if (has_m_rankgift()) {
      if (m_rankgift_ != &::google::protobuf::internal::kEmptyString) {
        m_rankgift_->clear();
      }
    }
    if (has_m_gifticon()) {
      if (m_gifticon_ != &::google::protobuf::internal::kEmptyString) {
        m_gifticon_->clear();
      }
    }
    m_giftitemid_ = 0;
    m_originalprice_ = 0;
    m_price_ = 0;
    m_ratioshow_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_redpointbox_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_severrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_order;
        break;
      }

      // optional string m_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_order().data(), this->m_order().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_name;
        break;
      }

      // optional string m_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_name().data(), this->m_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_openday;
        break;
      }

      // optional int32 m_openday = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_openday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_openday_)));
          set_has_m_openday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_closeday;
        break;
      }

      // optional int32 m_closeday = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_closeday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_closeday_)));
          set_has_m_closeday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_championtitle;
        break;
      }

      // optional string m_championtitle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_championtitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_championtitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_championtitle().data(), this->m_championtitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_rewardshow;
        break;
      }

      // optional int32 m_rewardshow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardshow_)));
          set_has_m_rewardshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_datagroupid;
        break;
      }

      // optional int32 m_datagroupid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_datagroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_datagroupid_)));
          set_has_m_datagroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_ranktype;
        break;
      }

      // optional int32 m_ranktype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ranktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ranktype_)));
          set_has_m_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_m_rankgift;
        break;
      }

      // optional string m_rankgift = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_rankgift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_rankgift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_rankgift().data(), this->m_rankgift().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_m_gifticon;
        break;
      }

      // optional string m_gifticon = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gifticon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gifticon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gifticon().data(), this->m_gifticon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_giftitemid;
        break;
      }

      // optional int32 m_giftitemid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giftitemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftitemid_)));
          set_has_m_giftitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_originalprice;
        break;
      }

      // optional int32 m_originalprice = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_originalprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_originalprice_)));
          set_has_m_originalprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_ratioshow;
        break;
      }

      // optional int32 m_ratioshow = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratioshow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratioshow_)));
          set_has_m_ratioshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_redpointbox;
        break;
      }

      // optional int32 m_redpointbox = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_redpointbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_redpointbox_)));
          set_has_m_redpointbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_severrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional string m_order = 3;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_order().data(), this->m_order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_order(), output);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_name(), output);
  }

  // optional int32 m_openday = 5;
  if (has_m_openday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_openday(), output);
  }

  // optional int32 m_closeday = 6;
  if (has_m_closeday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_closeday(), output);
  }

  // optional string m_championtitle = 7;
  if (has_m_championtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_championtitle().data(), this->m_championtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_championtitle(), output);
  }

  // optional int32 m_rewardshow = 8;
  if (has_m_rewardshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_rewardshow(), output);
  }

  // optional int32 m_datagroupid = 9;
  if (has_m_datagroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_datagroupid(), output);
  }

  // optional int32 m_ranktype = 10;
  if (has_m_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_ranktype(), output);
  }

  // optional string m_rankgift = 11;
  if (has_m_rankgift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rankgift().data(), this->m_rankgift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->m_rankgift(), output);
  }

  // optional string m_gifticon = 12;
  if (has_m_gifticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gifticon().data(), this->m_gifticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->m_gifticon(), output);
  }

  // optional int32 m_giftitemid = 13;
  if (has_m_giftitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_giftitemid(), output);
  }

  // optional int32 m_originalprice = 14;
  if (has_m_originalprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_originalprice(), output);
  }

  // optional int32 m_price = 15;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_price(), output);
  }

  // optional int32 m_ratioshow = 16;
  if (has_m_ratioshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_ratioshow(), output);
  }

  // optional int32 m_redpointbox = 17;
  if (has_m_redpointbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_redpointbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_severrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional string m_order = 3;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_order().data(), this->m_order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_order(), target);
  }

  // optional string m_name = 4;
  if (has_m_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_name().data(), this->m_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_name(), target);
  }

  // optional int32 m_openday = 5;
  if (has_m_openday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_openday(), target);
  }

  // optional int32 m_closeday = 6;
  if (has_m_closeday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_closeday(), target);
  }

  // optional string m_championtitle = 7;
  if (has_m_championtitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_championtitle().data(), this->m_championtitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_championtitle(), target);
  }

  // optional int32 m_rewardshow = 8;
  if (has_m_rewardshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_rewardshow(), target);
  }

  // optional int32 m_datagroupid = 9;
  if (has_m_datagroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_datagroupid(), target);
  }

  // optional int32 m_ranktype = 10;
  if (has_m_ranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_ranktype(), target);
  }

  // optional string m_rankgift = 11;
  if (has_m_rankgift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_rankgift().data(), this->m_rankgift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m_rankgift(), target);
  }

  // optional string m_gifticon = 12;
  if (has_m_gifticon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gifticon().data(), this->m_gifticon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m_gifticon(), target);
  }

  // optional int32 m_giftitemid = 13;
  if (has_m_giftitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_giftitemid(), target);
  }

  // optional int32 m_originalprice = 14;
  if (has_m_originalprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_originalprice(), target);
  }

  // optional int32 m_price = 15;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_price(), target);
  }

  // optional int32 m_ratioshow = 16;
  if (has_m_ratioshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_ratioshow(), target);
  }

  // optional int32 m_redpointbox = 17;
  if (has_m_redpointbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_redpointbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_severrank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional string m_order = 3;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_order());
    }

    // optional string m_name = 4;
    if (has_m_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_name());
    }

    // optional int32 m_openday = 5;
    if (has_m_openday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_openday());
    }

    // optional int32 m_closeday = 6;
    if (has_m_closeday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_closeday());
    }

    // optional string m_championtitle = 7;
    if (has_m_championtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_championtitle());
    }

    // optional int32 m_rewardshow = 8;
    if (has_m_rewardshow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardshow());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_datagroupid = 9;
    if (has_m_datagroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_datagroupid());
    }

    // optional int32 m_ranktype = 10;
    if (has_m_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ranktype());
    }

    // optional string m_rankgift = 11;
    if (has_m_rankgift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_rankgift());
    }

    // optional string m_gifticon = 12;
    if (has_m_gifticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gifticon());
    }

    // optional int32 m_giftitemid = 13;
    if (has_m_giftitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftitemid());
    }

    // optional int32 m_originalprice = 14;
    if (has_m_originalprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_originalprice());
    }

    // optional int32 m_price = 15;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_ratioshow = 16;
    if (has_m_ratioshow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratioshow());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_redpointbox = 17;
    if (has_m_redpointbox()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_redpointbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_severrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_severrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_severrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_severrank::MergeFrom(const E_FestivalMuban_severrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_name()) {
      set_m_name(from.m_name());
    }
    if (from.has_m_openday()) {
      set_m_openday(from.m_openday());
    }
    if (from.has_m_closeday()) {
      set_m_closeday(from.m_closeday());
    }
    if (from.has_m_championtitle()) {
      set_m_championtitle(from.m_championtitle());
    }
    if (from.has_m_rewardshow()) {
      set_m_rewardshow(from.m_rewardshow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_datagroupid()) {
      set_m_datagroupid(from.m_datagroupid());
    }
    if (from.has_m_ranktype()) {
      set_m_ranktype(from.m_ranktype());
    }
    if (from.has_m_rankgift()) {
      set_m_rankgift(from.m_rankgift());
    }
    if (from.has_m_gifticon()) {
      set_m_gifticon(from.m_gifticon());
    }
    if (from.has_m_giftitemid()) {
      set_m_giftitemid(from.m_giftitemid());
    }
    if (from.has_m_originalprice()) {
      set_m_originalprice(from.m_originalprice());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_ratioshow()) {
      set_m_ratioshow(from.m_ratioshow());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_redpointbox()) {
      set_m_redpointbox(from.m_redpointbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_severrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_severrank::CopyFrom(const E_FestivalMuban_severrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_severrank::IsInitialized() const {

  return true;
}

void E_FestivalMuban_severrank::Swap(E_FestivalMuban_severrank* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_name_, other->m_name_);
    std::swap(m_openday_, other->m_openday_);
    std::swap(m_closeday_, other->m_closeday_);
    std::swap(m_championtitle_, other->m_championtitle_);
    std::swap(m_rewardshow_, other->m_rewardshow_);
    std::swap(m_datagroupid_, other->m_datagroupid_);
    std::swap(m_ranktype_, other->m_ranktype_);
    std::swap(m_rankgift_, other->m_rankgift_);
    std::swap(m_gifticon_, other->m_gifticon_);
    std::swap(m_giftitemid_, other->m_giftitemid_);
    std::swap(m_originalprice_, other->m_originalprice_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_ratioshow_, other->m_ratioshow_);
    std::swap(m_redpointbox_, other->m_redpointbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_severrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_severrank_descriptor_;
  metadata.reflection = E_FestivalMuban_severrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_severrank::kEFestivalMubanSeverrankListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_severrank::Sheet_FestivalMuban_severrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_severrank::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_severrank::Sheet_FestivalMuban_severrank(const Sheet_FestivalMuban_severrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_severrank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_severrank::~Sheet_FestivalMuban_severrank() {
  SharedDtor();
}

void Sheet_FestivalMuban_severrank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_severrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_severrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_severrank_descriptor_;
}

const Sheet_FestivalMuban_severrank& Sheet_FestivalMuban_severrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_severrank* Sheet_FestivalMuban_severrank::default_instance_ = NULL;

Sheet_FestivalMuban_severrank* Sheet_FestivalMuban_severrank::New() const {
  return new Sheet_FestivalMuban_severrank;
}

void Sheet_FestivalMuban_severrank::Clear() {
  e_festivalmuban_severrank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_severrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_severrank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_severrank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_severrank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_severrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
  for (int i = 0; i < this->e_festivalmuban_severrank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_severrank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_severrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
  for (int i = 0; i < this->e_festivalmuban_severrank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_severrank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_severrank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_severrank E_FestivalMuban_severrank_List = 1;
  total_size += 1 * this->e_festivalmuban_severrank_list_size();
  for (int i = 0; i < this->e_festivalmuban_severrank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_severrank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_severrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_severrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_severrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_severrank::MergeFrom(const Sheet_FestivalMuban_severrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_severrank_list_.MergeFrom(from.e_festivalmuban_severrank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_severrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_severrank::CopyFrom(const Sheet_FestivalMuban_severrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_severrank::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_severrank::Swap(Sheet_FestivalMuban_severrank* other) {
  if (other != this) {
    e_festivalmuban_severrank_list_.Swap(&other->e_festivalmuban_severrank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_severrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_severrank_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_severrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_severrank_data::kMIdFieldNumber;
const int E_FestivalMuban_severrank_data::kMGroupidFieldNumber;
const int E_FestivalMuban_severrank_data::kMMaxrankFieldNumber;
const int E_FestivalMuban_severrank_data::kMMinrankFieldNumber;
const int E_FestivalMuban_severrank_data::kMRankvalueFieldNumber;
const int E_FestivalMuban_severrank_data::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_severrank_data::E_FestivalMuban_severrank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_severrank_data::InitAsDefaultInstance() {
}

E_FestivalMuban_severrank_data::E_FestivalMuban_severrank_data(const E_FestivalMuban_severrank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_severrank_data::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_maxrank_ = 0;
  m_minrank_ = 0;
  m_rankvalue_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_severrank_data::~E_FestivalMuban_severrank_data() {
  SharedDtor();
}

void E_FestivalMuban_severrank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_severrank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_severrank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_severrank_data_descriptor_;
}

const E_FestivalMuban_severrank_data& E_FestivalMuban_severrank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_severrank_data* E_FestivalMuban_severrank_data::default_instance_ = NULL;

E_FestivalMuban_severrank_data* E_FestivalMuban_severrank_data::New() const {
  return new E_FestivalMuban_severrank_data;
}

void E_FestivalMuban_severrank_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_maxrank_ = 0;
    m_minrank_ = 0;
    m_rankvalue_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_severrank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_maxrank;
        break;
      }

      // optional int32 m_maxrank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_maxrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_maxrank_)));
          set_has_m_maxrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_minrank;
        break;
      }

      // optional int32 m_minrank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_minrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_minrank_)));
          set_has_m_minrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_rankvalue;
        break;
      }

      // optional int32 m_rankvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rankvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rankvalue_)));
          set_has_m_rankvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_severrank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_maxrank = 3;
  if (has_m_maxrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_maxrank(), output);
  }

  // optional int32 m_minrank = 4;
  if (has_m_minrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_minrank(), output);
  }

  // optional int32 m_rankvalue = 5;
  if (has_m_rankvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_rankvalue(), output);
  }

  // optional int32 m_boxid = 6;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_severrank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_maxrank = 3;
  if (has_m_maxrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_maxrank(), target);
  }

  // optional int32 m_minrank = 4;
  if (has_m_minrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_minrank(), target);
  }

  // optional int32 m_rankvalue = 5;
  if (has_m_rankvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_rankvalue(), target);
  }

  // optional int32 m_boxid = 6;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_severrank_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_maxrank = 3;
    if (has_m_maxrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_maxrank());
    }

    // optional int32 m_minrank = 4;
    if (has_m_minrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_minrank());
    }

    // optional int32 m_rankvalue = 5;
    if (has_m_rankvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rankvalue());
    }

    // optional int32 m_boxid = 6;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_severrank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_severrank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_severrank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_severrank_data::MergeFrom(const E_FestivalMuban_severrank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_maxrank()) {
      set_m_maxrank(from.m_maxrank());
    }
    if (from.has_m_minrank()) {
      set_m_minrank(from.m_minrank());
    }
    if (from.has_m_rankvalue()) {
      set_m_rankvalue(from.m_rankvalue());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_severrank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_severrank_data::CopyFrom(const E_FestivalMuban_severrank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_severrank_data::IsInitialized() const {

  return true;
}

void E_FestivalMuban_severrank_data::Swap(E_FestivalMuban_severrank_data* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_maxrank_, other->m_maxrank_);
    std::swap(m_minrank_, other->m_minrank_);
    std::swap(m_rankvalue_, other->m_rankvalue_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_severrank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_severrank_data_descriptor_;
  metadata.reflection = E_FestivalMuban_severrank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_severrank_data::kEFestivalMubanSeverrankDataListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_severrank_data::Sheet_FestivalMuban_severrank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_severrank_data::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_severrank_data::Sheet_FestivalMuban_severrank_data(const Sheet_FestivalMuban_severrank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_severrank_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_severrank_data::~Sheet_FestivalMuban_severrank_data() {
  SharedDtor();
}

void Sheet_FestivalMuban_severrank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_severrank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_severrank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_severrank_data_descriptor_;
}

const Sheet_FestivalMuban_severrank_data& Sheet_FestivalMuban_severrank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_severrank_data* Sheet_FestivalMuban_severrank_data::default_instance_ = NULL;

Sheet_FestivalMuban_severrank_data* Sheet_FestivalMuban_severrank_data::New() const {
  return new Sheet_FestivalMuban_severrank_data;
}

void Sheet_FestivalMuban_severrank_data::Clear() {
  e_festivalmuban_severrank_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_severrank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_severrank_data_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_severrank_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_severrank_data_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_severrank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
  for (int i = 0; i < this->e_festivalmuban_severrank_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_severrank_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_severrank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
  for (int i = 0; i < this->e_festivalmuban_severrank_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_severrank_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_severrank_data::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_severrank_data E_FestivalMuban_severrank_data_List = 1;
  total_size += 1 * this->e_festivalmuban_severrank_data_list_size();
  for (int i = 0; i < this->e_festivalmuban_severrank_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_severrank_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_severrank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_severrank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_severrank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_severrank_data::MergeFrom(const Sheet_FestivalMuban_severrank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_severrank_data_list_.MergeFrom(from.e_festivalmuban_severrank_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_severrank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_severrank_data::CopyFrom(const Sheet_FestivalMuban_severrank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_severrank_data::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_severrank_data::Swap(Sheet_FestivalMuban_severrank_data* other) {
  if (other != this) {
    e_festivalmuban_severrank_data_list_.Swap(&other->e_festivalmuban_severrank_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_severrank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_severrank_data_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_severrank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_collectwordCostDesc::kMNumFieldNumber;
const int E_FestivalMuban_collectwordCostDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_collectwordCostDesc::E_FestivalMuban_collectwordCostDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_collectwordCostDesc::InitAsDefaultInstance() {
}

E_FestivalMuban_collectwordCostDesc::E_FestivalMuban_collectwordCostDesc(const E_FestivalMuban_collectwordCostDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_collectwordCostDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_collectwordCostDesc::~E_FestivalMuban_collectwordCostDesc() {
  SharedDtor();
}

void E_FestivalMuban_collectwordCostDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_collectwordCostDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_collectwordCostDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_collectwordCostDesc_descriptor_;
}

const E_FestivalMuban_collectwordCostDesc& E_FestivalMuban_collectwordCostDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_collectwordCostDesc* E_FestivalMuban_collectwordCostDesc::default_instance_ = NULL;

E_FestivalMuban_collectwordCostDesc* E_FestivalMuban_collectwordCostDesc::New() const {
  return new E_FestivalMuban_collectwordCostDesc;
}

void E_FestivalMuban_collectwordCostDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_collectwordCostDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_collectwordCostDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_collectwordCostDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_collectwordCostDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_collectwordCostDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_collectwordCostDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_collectwordCostDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_collectwordCostDesc::MergeFrom(const E_FestivalMuban_collectwordCostDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_collectwordCostDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_collectwordCostDesc::CopyFrom(const E_FestivalMuban_collectwordCostDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_collectwordCostDesc::IsInitialized() const {

  return true;
}

void E_FestivalMuban_collectwordCostDesc::Swap(E_FestivalMuban_collectwordCostDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_collectwordCostDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_collectwordCostDesc_descriptor_;
  metadata.reflection = E_FestivalMuban_collectwordCostDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_collectword::kMIdFieldNumber;
const int E_FestivalMuban_collectword::kMPeriodFieldNumber;
const int E_FestivalMuban_collectword::kMExchangeIdFieldNumber;
const int E_FestivalMuban_collectword::kMExchangeNumFieldNumber;
const int E_FestivalMuban_collectword::kMTimesFieldNumber;
const int E_FestivalMuban_collectword::kMCostFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_collectword::E_FestivalMuban_collectword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_collectword::InitAsDefaultInstance() {
}

E_FestivalMuban_collectword::E_FestivalMuban_collectword(const E_FestivalMuban_collectword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_collectword::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_exchange_id_ = 0;
  m_exchange_num_ = 0;
  m_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_collectword::~E_FestivalMuban_collectword() {
  SharedDtor();
}

void E_FestivalMuban_collectword::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_collectword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_collectword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_collectword_descriptor_;
}

const E_FestivalMuban_collectword& E_FestivalMuban_collectword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_collectword* E_FestivalMuban_collectword::default_instance_ = NULL;

E_FestivalMuban_collectword* E_FestivalMuban_collectword::New() const {
  return new E_FestivalMuban_collectword;
}

void E_FestivalMuban_collectword::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_exchange_id_ = 0;
    m_exchange_num_ = 0;
    m_times_ = 0;
  }
  m_cost_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_collectword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_exchange_id;
        break;
      }

      // optional int32 m_exchange_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exchange_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exchange_id_)));
          set_has_m_exchange_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_exchange_num;
        break;
      }

      // optional int32 m_exchange_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exchange_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exchange_num_)));
          set_has_m_exchange_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_cost;
        break;
      }

      // repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_cost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_cost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_cost;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_collectword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_exchange_id = 3;
  if (has_m_exchange_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_exchange_id(), output);
  }

  // optional int32 m_exchange_num = 4;
  if (has_m_exchange_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_exchange_num(), output);
  }

  // optional int32 m_times = 5;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_times(), output);
  }

  // repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
  for (int i = 0; i < this->m_cost_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_cost(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_collectword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_exchange_id = 3;
  if (has_m_exchange_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_exchange_id(), target);
  }

  // optional int32 m_exchange_num = 4;
  if (has_m_exchange_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_exchange_num(), target);
  }

  // optional int32 m_times = 5;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_times(), target);
  }

  // repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
  for (int i = 0; i < this->m_cost_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_cost(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_collectword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_exchange_id = 3;
    if (has_m_exchange_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exchange_id());
    }

    // optional int32 m_exchange_num = 4;
    if (has_m_exchange_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exchange_num());
    }

    // optional int32 m_times = 5;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

  }
  // repeated .proto_ff.E_FestivalMuban_collectwordCostDesc m_cost = 6;
  total_size += 1 * this->m_cost_size();
  for (int i = 0; i < this->m_cost_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_cost(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_collectword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_collectword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_collectword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_collectword::MergeFrom(const E_FestivalMuban_collectword& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_cost_.MergeFrom(from.m_cost_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_exchange_id()) {
      set_m_exchange_id(from.m_exchange_id());
    }
    if (from.has_m_exchange_num()) {
      set_m_exchange_num(from.m_exchange_num());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_collectword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_collectword::CopyFrom(const E_FestivalMuban_collectword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_collectword::IsInitialized() const {

  return true;
}

void E_FestivalMuban_collectword::Swap(E_FestivalMuban_collectword* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_exchange_id_, other->m_exchange_id_);
    std::swap(m_exchange_num_, other->m_exchange_num_);
    std::swap(m_times_, other->m_times_);
    m_cost_.Swap(&other->m_cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_collectword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_collectword_descriptor_;
  metadata.reflection = E_FestivalMuban_collectword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_collectword::kEFestivalMubanCollectwordListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_collectword::Sheet_FestivalMuban_collectword()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_collectword::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_collectword::Sheet_FestivalMuban_collectword(const Sheet_FestivalMuban_collectword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_collectword::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_collectword::~Sheet_FestivalMuban_collectword() {
  SharedDtor();
}

void Sheet_FestivalMuban_collectword::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_collectword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_collectword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_collectword_descriptor_;
}

const Sheet_FestivalMuban_collectword& Sheet_FestivalMuban_collectword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_collectword* Sheet_FestivalMuban_collectword::default_instance_ = NULL;

Sheet_FestivalMuban_collectword* Sheet_FestivalMuban_collectword::New() const {
  return new Sheet_FestivalMuban_collectword;
}

void Sheet_FestivalMuban_collectword::Clear() {
  e_festivalmuban_collectword_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_collectword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_collectword_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_collectword_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_collectword_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_collectword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
  for (int i = 0; i < this->e_festivalmuban_collectword_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_collectword_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_collectword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
  for (int i = 0; i < this->e_festivalmuban_collectword_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_collectword_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_collectword::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_collectword E_FestivalMuban_collectword_List = 1;
  total_size += 1 * this->e_festivalmuban_collectword_list_size();
  for (int i = 0; i < this->e_festivalmuban_collectword_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_collectword_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_collectword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_collectword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_collectword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_collectword::MergeFrom(const Sheet_FestivalMuban_collectword& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_collectword_list_.MergeFrom(from.e_festivalmuban_collectword_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_collectword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_collectword::CopyFrom(const Sheet_FestivalMuban_collectword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_collectword::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_collectword::Swap(Sheet_FestivalMuban_collectword* other) {
  if (other != this) {
    e_festivalmuban_collectword_list_.Swap(&other->e_festivalmuban_collectword_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_collectword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_collectword_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_collectword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_sign::kMIdFieldNumber;
const int E_FestivalMuban_sign::kMPeriodFieldNumber;
const int E_FestivalMuban_sign::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_sign::E_FestivalMuban_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_sign::InitAsDefaultInstance() {
}

E_FestivalMuban_sign::E_FestivalMuban_sign(const E_FestivalMuban_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_sign::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_sign::~E_FestivalMuban_sign() {
  SharedDtor();
}

void E_FestivalMuban_sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_sign_descriptor_;
}

const E_FestivalMuban_sign& E_FestivalMuban_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_sign* E_FestivalMuban_sign::default_instance_ = NULL;

E_FestivalMuban_sign* E_FestivalMuban_sign::New() const {
  return new E_FestivalMuban_sign;
}

void E_FestivalMuban_sign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_boxid = 3;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_boxid = 3;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_sign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_boxid = 3;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_sign::MergeFrom(const E_FestivalMuban_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_sign::CopyFrom(const E_FestivalMuban_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_sign::IsInitialized() const {

  return true;
}

void E_FestivalMuban_sign::Swap(E_FestivalMuban_sign* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_sign_descriptor_;
  metadata.reflection = E_FestivalMuban_sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_sign::kEFestivalMubanSignListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_sign::Sheet_FestivalMuban_sign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_sign::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_sign::Sheet_FestivalMuban_sign(const Sheet_FestivalMuban_sign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_sign::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_sign::~Sheet_FestivalMuban_sign() {
  SharedDtor();
}

void Sheet_FestivalMuban_sign::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_sign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_sign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_sign_descriptor_;
}

const Sheet_FestivalMuban_sign& Sheet_FestivalMuban_sign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_sign* Sheet_FestivalMuban_sign::default_instance_ = NULL;

Sheet_FestivalMuban_sign* Sheet_FestivalMuban_sign::New() const {
  return new Sheet_FestivalMuban_sign;
}

void Sheet_FestivalMuban_sign::Clear() {
  e_festivalmuban_sign_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_sign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_sign_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_sign_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_sign_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_sign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
  for (int i = 0; i < this->e_festivalmuban_sign_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_sign_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_sign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
  for (int i = 0; i < this->e_festivalmuban_sign_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_sign_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_sign::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_sign E_FestivalMuban_sign_List = 1;
  total_size += 1 * this->e_festivalmuban_sign_list_size();
  for (int i = 0; i < this->e_festivalmuban_sign_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_sign_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_sign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_sign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_sign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_sign::MergeFrom(const Sheet_FestivalMuban_sign& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_sign_list_.MergeFrom(from.e_festivalmuban_sign_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_sign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_sign::CopyFrom(const Sheet_FestivalMuban_sign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_sign::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_sign::Swap(Sheet_FestivalMuban_sign* other) {
  if (other != this) {
    e_festivalmuban_sign_list_.Swap(&other->e_festivalmuban_sign_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_sign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_sign_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_sign_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_shop::kMIdFieldNumber;
const int E_FestivalMuban_shop::kMPeriodFieldNumber;
const int E_FestivalMuban_shop::kMViplevelFieldNumber;
const int E_FestivalMuban_shop::kMBoxFieldNumber;
const int E_FestivalMuban_shop::kMTimelimitFieldNumber;
const int E_FestivalMuban_shop::kMPriceFieldNumber;
const int E_FestivalMuban_shop::kMPricetypeFieldNumber;
const int E_FestivalMuban_shop::kMStartimeFieldNumber;
const int E_FestivalMuban_shop::kMDurtimeFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_shop::E_FestivalMuban_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_shop::InitAsDefaultInstance() {
}

E_FestivalMuban_shop::E_FestivalMuban_shop(const E_FestivalMuban_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_shop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_viplevel_ = 0;
  m_box_ = 0;
  m_timelimit_ = 0;
  m_price_ = 0;
  m_pricetype_ = 0;
  m_startime_ = 0;
  m_durtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_shop::~E_FestivalMuban_shop() {
  SharedDtor();
}

void E_FestivalMuban_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_shop_descriptor_;
}

const E_FestivalMuban_shop& E_FestivalMuban_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_shop* E_FestivalMuban_shop::default_instance_ = NULL;

E_FestivalMuban_shop* E_FestivalMuban_shop::New() const {
  return new E_FestivalMuban_shop;
}

void E_FestivalMuban_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_viplevel_ = 0;
    m_box_ = 0;
    m_timelimit_ = 0;
    m_price_ = 0;
    m_pricetype_ = 0;
    m_startime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_durtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_viplevel;
        break;
      }

      // optional int32 m_viplevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_box;
        break;
      }

      // optional int32 m_box = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_box:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_box_)));
          set_has_m_box();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_timelimit;
        break;
      }

      // optional int32 m_timelimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timelimit_)));
          set_has_m_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_pricetype;
        break;
      }

      // optional int32 m_pricetype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pricetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pricetype_)));
          set_has_m_pricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_startime;
        break;
      }

      // optional int32 m_startime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_startime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_startime_)));
          set_has_m_startime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_durtime;
        break;
      }

      // optional int32 m_durtime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_durtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_durtime_)));
          set_has_m_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_viplevel = 3;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_viplevel(), output);
  }

  // optional int32 m_box = 4;
  if (has_m_box()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_box(), output);
  }

  // optional int32 m_timelimit = 5;
  if (has_m_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_timelimit(), output);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_price(), output);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_pricetype(), output);
  }

  // optional int32 m_startime = 8;
  if (has_m_startime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_startime(), output);
  }

  // optional int32 m_durtime = 9;
  if (has_m_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_durtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_viplevel = 3;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_viplevel(), target);
  }

  // optional int32 m_box = 4;
  if (has_m_box()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_box(), target);
  }

  // optional int32 m_timelimit = 5;
  if (has_m_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_timelimit(), target);
  }

  // optional int32 m_price = 6;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_price(), target);
  }

  // optional int32 m_pricetype = 7;
  if (has_m_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_pricetype(), target);
  }

  // optional int32 m_startime = 8;
  if (has_m_startime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_startime(), target);
  }

  // optional int32 m_durtime = 9;
  if (has_m_durtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_durtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_viplevel = 3;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

    // optional int32 m_box = 4;
    if (has_m_box()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_box());
    }

    // optional int32 m_timelimit = 5;
    if (has_m_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timelimit());
    }

    // optional int32 m_price = 6;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_pricetype = 7;
    if (has_m_pricetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pricetype());
    }

    // optional int32 m_startime = 8;
    if (has_m_startime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_startime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_durtime = 9;
    if (has_m_durtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_durtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_shop::MergeFrom(const E_FestivalMuban_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
    if (from.has_m_box()) {
      set_m_box(from.m_box());
    }
    if (from.has_m_timelimit()) {
      set_m_timelimit(from.m_timelimit());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_pricetype()) {
      set_m_pricetype(from.m_pricetype());
    }
    if (from.has_m_startime()) {
      set_m_startime(from.m_startime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_durtime()) {
      set_m_durtime(from.m_durtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_shop::CopyFrom(const E_FestivalMuban_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_shop::IsInitialized() const {

  return true;
}

void E_FestivalMuban_shop::Swap(E_FestivalMuban_shop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(m_box_, other->m_box_);
    std::swap(m_timelimit_, other->m_timelimit_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_pricetype_, other->m_pricetype_);
    std::swap(m_startime_, other->m_startime_);
    std::swap(m_durtime_, other->m_durtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_shop_descriptor_;
  metadata.reflection = E_FestivalMuban_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_shop::kEFestivalMubanShopListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_shop::Sheet_FestivalMuban_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_shop::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_shop::Sheet_FestivalMuban_shop(const Sheet_FestivalMuban_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_shop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_shop::~Sheet_FestivalMuban_shop() {
  SharedDtor();
}

void Sheet_FestivalMuban_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_shop_descriptor_;
}

const Sheet_FestivalMuban_shop& Sheet_FestivalMuban_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_shop* Sheet_FestivalMuban_shop::default_instance_ = NULL;

Sheet_FestivalMuban_shop* Sheet_FestivalMuban_shop::New() const {
  return new Sheet_FestivalMuban_shop;
}

void Sheet_FestivalMuban_shop::Clear() {
  e_festivalmuban_shop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_shop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_shop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_shop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
  for (int i = 0; i < this->e_festivalmuban_shop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_shop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
  for (int i = 0; i < this->e_festivalmuban_shop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_shop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_shop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_shop E_FestivalMuban_shop_List = 1;
  total_size += 1 * this->e_festivalmuban_shop_list_size();
  for (int i = 0; i < this->e_festivalmuban_shop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_shop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_shop::MergeFrom(const Sheet_FestivalMuban_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_shop_list_.MergeFrom(from.e_festivalmuban_shop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_shop::CopyFrom(const Sheet_FestivalMuban_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_shop::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_shop::Swap(Sheet_FestivalMuban_shop* other) {
  if (other != this) {
    e_festivalmuban_shop_list_.Swap(&other->e_festivalmuban_shop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_shop_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_rechange::kMIdFieldNumber;
const int E_FestivalMuban_rechange::kMPeriodFieldNumber;
const int E_FestivalMuban_rechange::kMRebateFieldNumber;
const int E_FestivalMuban_rechange::kMTimelimitFieldNumber;
const int E_FestivalMuban_rechange::kMPriceFieldNumber;
const int E_FestivalMuban_rechange::kMTyperFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_rechange::E_FestivalMuban_rechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_rechange::InitAsDefaultInstance() {
}

E_FestivalMuban_rechange::E_FestivalMuban_rechange(const E_FestivalMuban_rechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_rechange::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_rebate_ = 0;
  m_timelimit_ = 0;
  m_price_ = 0;
  m_typer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_rechange::~E_FestivalMuban_rechange() {
  SharedDtor();
}

void E_FestivalMuban_rechange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_rechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_rechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_rechange_descriptor_;
}

const E_FestivalMuban_rechange& E_FestivalMuban_rechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_rechange* E_FestivalMuban_rechange::default_instance_ = NULL;

E_FestivalMuban_rechange* E_FestivalMuban_rechange::New() const {
  return new E_FestivalMuban_rechange;
}

void E_FestivalMuban_rechange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_rebate_ = 0;
    m_timelimit_ = 0;
    m_price_ = 0;
    m_typer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_rechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rebate;
        break;
      }

      // optional int32 m_rebate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rebate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rebate_)));
          set_has_m_rebate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_timelimit;
        break;
      }

      // optional int32 m_timelimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timelimit_)));
          set_has_m_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_typer;
        break;
      }

      // optional int32 m_typer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typer_)));
          set_has_m_typer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_rechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_rebate = 3;
  if (has_m_rebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rebate(), output);
  }

  // optional int32 m_timelimit = 4;
  if (has_m_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_timelimit(), output);
  }

  // optional int32 m_price = 5;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_price(), output);
  }

  // optional int32 m_typer = 6;
  if (has_m_typer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_typer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_rechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_rebate = 3;
  if (has_m_rebate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rebate(), target);
  }

  // optional int32 m_timelimit = 4;
  if (has_m_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_timelimit(), target);
  }

  // optional int32 m_price = 5;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_price(), target);
  }

  // optional int32 m_typer = 6;
  if (has_m_typer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_typer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_rechange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_rebate = 3;
    if (has_m_rebate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rebate());
    }

    // optional int32 m_timelimit = 4;
    if (has_m_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timelimit());
    }

    // optional int32 m_price = 5;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_typer = 6;
    if (has_m_typer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_rechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_rechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_rechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_rechange::MergeFrom(const E_FestivalMuban_rechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_rebate()) {
      set_m_rebate(from.m_rebate());
    }
    if (from.has_m_timelimit()) {
      set_m_timelimit(from.m_timelimit());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_typer()) {
      set_m_typer(from.m_typer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_rechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_rechange::CopyFrom(const E_FestivalMuban_rechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_rechange::IsInitialized() const {

  return true;
}

void E_FestivalMuban_rechange::Swap(E_FestivalMuban_rechange* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_rebate_, other->m_rebate_);
    std::swap(m_timelimit_, other->m_timelimit_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_typer_, other->m_typer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_rechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_rechange_descriptor_;
  metadata.reflection = E_FestivalMuban_rechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_rechange::kEFestivalMubanRechangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_rechange::Sheet_FestivalMuban_rechange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_rechange::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_rechange::Sheet_FestivalMuban_rechange(const Sheet_FestivalMuban_rechange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rechange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_rechange::~Sheet_FestivalMuban_rechange() {
  SharedDtor();
}

void Sheet_FestivalMuban_rechange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_rechange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rechange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_rechange_descriptor_;
}

const Sheet_FestivalMuban_rechange& Sheet_FestivalMuban_rechange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_rechange* Sheet_FestivalMuban_rechange::default_instance_ = NULL;

Sheet_FestivalMuban_rechange* Sheet_FestivalMuban_rechange::New() const {
  return new Sheet_FestivalMuban_rechange;
}

void Sheet_FestivalMuban_rechange::Clear() {
  e_festivalmuban_rechange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_rechange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_rechange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_rechange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_rechange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_rechange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rechange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_rechange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_rechange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rechange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_rechange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_rechange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_rechange E_FestivalMuban_rechange_List = 1;
  total_size += 1 * this->e_festivalmuban_rechange_list_size();
  for (int i = 0; i < this->e_festivalmuban_rechange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_rechange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_rechange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_rechange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_rechange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_rechange::MergeFrom(const Sheet_FestivalMuban_rechange& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_rechange_list_.MergeFrom(from.e_festivalmuban_rechange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_rechange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rechange::CopyFrom(const Sheet_FestivalMuban_rechange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_rechange::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_rechange::Swap(Sheet_FestivalMuban_rechange* other) {
  if (other != this) {
    e_festivalmuban_rechange_list_.Swap(&other->e_festivalmuban_rechange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_rechange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_rechange_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_rechange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_leiji::kMIdFieldNumber;
const int E_FestivalMuban_leiji::kMPeriodFieldNumber;
const int E_FestivalMuban_leiji::kMLeijiFieldNumber;
const int E_FestivalMuban_leiji::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_leiji::E_FestivalMuban_leiji()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_leiji::InitAsDefaultInstance() {
}

E_FestivalMuban_leiji::E_FestivalMuban_leiji(const E_FestivalMuban_leiji& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_leiji::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_leiji_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_leiji::~E_FestivalMuban_leiji() {
  SharedDtor();
}

void E_FestivalMuban_leiji::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_leiji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_leiji::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_leiji_descriptor_;
}

const E_FestivalMuban_leiji& E_FestivalMuban_leiji::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_leiji* E_FestivalMuban_leiji::default_instance_ = NULL;

E_FestivalMuban_leiji* E_FestivalMuban_leiji::New() const {
  return new E_FestivalMuban_leiji;
}

void E_FestivalMuban_leiji::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_leiji_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_leiji::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_leiji;
        break;
      }

      // optional int32 m_leiji = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_leiji:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_leiji_)));
          set_has_m_leiji();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_leiji::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_leiji = 3;
  if (has_m_leiji()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_leiji(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_leiji::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_leiji = 3;
  if (has_m_leiji()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_leiji(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_leiji::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_leiji = 3;
    if (has_m_leiji()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_leiji());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_leiji::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_leiji* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_leiji*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_leiji::MergeFrom(const E_FestivalMuban_leiji& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_leiji()) {
      set_m_leiji(from.m_leiji());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_leiji::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_leiji::CopyFrom(const E_FestivalMuban_leiji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_leiji::IsInitialized() const {

  return true;
}

void E_FestivalMuban_leiji::Swap(E_FestivalMuban_leiji* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_leiji_, other->m_leiji_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_leiji::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_leiji_descriptor_;
  metadata.reflection = E_FestivalMuban_leiji_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_leiji::kEFestivalMubanLeijiListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_leiji::Sheet_FestivalMuban_leiji()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_leiji::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_leiji::Sheet_FestivalMuban_leiji(const Sheet_FestivalMuban_leiji& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_leiji::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_leiji::~Sheet_FestivalMuban_leiji() {
  SharedDtor();
}

void Sheet_FestivalMuban_leiji::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_leiji::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_leiji::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_leiji_descriptor_;
}

const Sheet_FestivalMuban_leiji& Sheet_FestivalMuban_leiji::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_leiji* Sheet_FestivalMuban_leiji::default_instance_ = NULL;

Sheet_FestivalMuban_leiji* Sheet_FestivalMuban_leiji::New() const {
  return new Sheet_FestivalMuban_leiji;
}

void Sheet_FestivalMuban_leiji::Clear() {
  e_festivalmuban_leiji_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_leiji::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_leiji_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_leiji_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_leiji_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_leiji::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
  for (int i = 0; i < this->e_festivalmuban_leiji_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_leiji_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_leiji::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
  for (int i = 0; i < this->e_festivalmuban_leiji_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_leiji_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_leiji::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_leiji E_FestivalMuban_leiji_List = 1;
  total_size += 1 * this->e_festivalmuban_leiji_list_size();
  for (int i = 0; i < this->e_festivalmuban_leiji_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_leiji_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_leiji::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_leiji* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_leiji*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_leiji::MergeFrom(const Sheet_FestivalMuban_leiji& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_leiji_list_.MergeFrom(from.e_festivalmuban_leiji_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_leiji::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_leiji::CopyFrom(const Sheet_FestivalMuban_leiji& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_leiji::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_leiji::Swap(Sheet_FestivalMuban_leiji* other) {
  if (other != this) {
    e_festivalmuban_leiji_list_.Swap(&other->e_festivalmuban_leiji_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_leiji::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_leiji_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_leiji_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_zadan::kMIdFieldNumber;
const int E_FestivalMuban_zadan::kMPeriodFieldNumber;
const int E_FestivalMuban_zadan::kMItemidFieldNumber;
const int E_FestivalMuban_zadan::kMNumFieldNumber;
const int E_FestivalMuban_zadan::kMTypeFieldNumber;
const int E_FestivalMuban_zadan::kMProbabilityFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_zadan::E_FestivalMuban_zadan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_zadan::InitAsDefaultInstance() {
}

E_FestivalMuban_zadan::E_FestivalMuban_zadan(const E_FestivalMuban_zadan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_zadan::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_num_ = 0;
  m_type_ = 0;
  m_probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_zadan::~E_FestivalMuban_zadan() {
  SharedDtor();
}

void E_FestivalMuban_zadan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_zadan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_zadan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_zadan_descriptor_;
}

const E_FestivalMuban_zadan& E_FestivalMuban_zadan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_zadan* E_FestivalMuban_zadan::default_instance_ = NULL;

E_FestivalMuban_zadan* E_FestivalMuban_zadan::New() const {
  return new E_FestivalMuban_zadan;
}

void E_FestivalMuban_zadan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_itemid_ = GOOGLE_LONGLONG(0);
    m_num_ = 0;
    m_type_ = 0;
    m_probability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_zadan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemid;
        break;
      }

      // optional int64 m_itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_probability;
        break;
      }

      // optional int32 m_probability = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_probability_)));
          set_has_m_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_zadan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int64 m_itemid = 3;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_itemid(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_type(), output);
  }

  // optional int32 m_probability = 6;
  if (has_m_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_probability(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_zadan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int64 m_itemid = 3;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_itemid(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_type(), target);
  }

  // optional int32 m_probability = 6;
  if (has_m_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_probability(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_zadan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int64 m_itemid = 3;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_type = 5;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_probability = 6;
    if (has_m_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_probability());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_zadan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_zadan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_zadan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_zadan::MergeFrom(const E_FestivalMuban_zadan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_probability()) {
      set_m_probability(from.m_probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_zadan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_zadan::CopyFrom(const E_FestivalMuban_zadan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_zadan::IsInitialized() const {

  return true;
}

void E_FestivalMuban_zadan::Swap(E_FestivalMuban_zadan* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_probability_, other->m_probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_zadan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_zadan_descriptor_;
  metadata.reflection = E_FestivalMuban_zadan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_zadan::kEFestivalMubanZadanListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_zadan::Sheet_FestivalMuban_zadan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_zadan::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_zadan::Sheet_FestivalMuban_zadan(const Sheet_FestivalMuban_zadan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_zadan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_zadan::~Sheet_FestivalMuban_zadan() {
  SharedDtor();
}

void Sheet_FestivalMuban_zadan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_zadan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_zadan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_zadan_descriptor_;
}

const Sheet_FestivalMuban_zadan& Sheet_FestivalMuban_zadan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_zadan* Sheet_FestivalMuban_zadan::default_instance_ = NULL;

Sheet_FestivalMuban_zadan* Sheet_FestivalMuban_zadan::New() const {
  return new Sheet_FestivalMuban_zadan;
}

void Sheet_FestivalMuban_zadan::Clear() {
  e_festivalmuban_zadan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_zadan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_zadan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_zadan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_zadan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_zadan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
  for (int i = 0; i < this->e_festivalmuban_zadan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_zadan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_zadan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
  for (int i = 0; i < this->e_festivalmuban_zadan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_zadan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_zadan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_zadan E_FestivalMuban_zadan_List = 1;
  total_size += 1 * this->e_festivalmuban_zadan_list_size();
  for (int i = 0; i < this->e_festivalmuban_zadan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_zadan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_zadan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_zadan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_zadan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_zadan::MergeFrom(const Sheet_FestivalMuban_zadan& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_zadan_list_.MergeFrom(from.e_festivalmuban_zadan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_zadan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_zadan::CopyFrom(const Sheet_FestivalMuban_zadan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_zadan::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_zadan::Swap(Sheet_FestivalMuban_zadan* other) {
  if (other != this) {
    e_festivalmuban_zadan_list_.Swap(&other->e_festivalmuban_zadan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_zadan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_zadan_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_zadan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalZadanconstant::kMPeriodFieldNumber;
const int E_FestivalZadanconstant::kMCostitemFieldNumber;
const int E_FestivalZadanconstant::kMNumberFieldNumber;
const int E_FestivalZadanconstant::kMFreeFieldNumber;
const int E_FestivalZadanconstant::kMCurrencyFieldNumber;
#endif  // !_MSC_VER

E_FestivalZadanconstant::E_FestivalZadanconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalZadanconstant::InitAsDefaultInstance() {
}

E_FestivalZadanconstant::E_FestivalZadanconstant(const E_FestivalZadanconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalZadanconstant::SharedCtor() {
  _cached_size_ = 0;
  m_period_ = 0;
  m_costitem_ = GOOGLE_LONGLONG(0);
  m_number_ = 0;
  m_free_ = 0;
  m_currency_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalZadanconstant::~E_FestivalZadanconstant() {
  SharedDtor();
}

void E_FestivalZadanconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalZadanconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalZadanconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalZadanconstant_descriptor_;
}

const E_FestivalZadanconstant& E_FestivalZadanconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalZadanconstant* E_FestivalZadanconstant::default_instance_ = NULL;

E_FestivalZadanconstant* E_FestivalZadanconstant::New() const {
  return new E_FestivalZadanconstant;
}

void E_FestivalZadanconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_period_ = 0;
    m_costitem_ = GOOGLE_LONGLONG(0);
    m_number_ = 0;
    m_free_ = 0;
    m_currency_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalZadanconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_period = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_costitem;
        break;
      }

      // optional int64 m_costitem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_costitem_)));
          set_has_m_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_number;
        break;
      }

      // optional int32 m_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_number_)));
          set_has_m_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_free;
        break;
      }

      // optional int32 m_free = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_free_)));
          set_has_m_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_currency;
        break;
      }

      // optional int32 m_currency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_currency_)));
          set_has_m_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalZadanconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_period = 1;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_period(), output);
  }

  // optional int64 m_costitem = 2;
  if (has_m_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_costitem(), output);
  }

  // optional int32 m_number = 3;
  if (has_m_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_number(), output);
  }

  // optional int32 m_free = 4;
  if (has_m_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_free(), output);
  }

  // optional int32 m_currency = 5;
  if (has_m_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_currency(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalZadanconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_period = 1;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_period(), target);
  }

  // optional int64 m_costitem = 2;
  if (has_m_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_costitem(), target);
  }

  // optional int32 m_number = 3;
  if (has_m_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_number(), target);
  }

  // optional int32 m_free = 4;
  if (has_m_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_free(), target);
  }

  // optional int32 m_currency = 5;
  if (has_m_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_currency(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalZadanconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_period = 1;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int64 m_costitem = 2;
    if (has_m_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_costitem());
    }

    // optional int32 m_number = 3;
    if (has_m_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_number());
    }

    // optional int32 m_free = 4;
    if (has_m_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_free());
    }

    // optional int32 m_currency = 5;
    if (has_m_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_currency());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalZadanconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalZadanconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalZadanconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalZadanconstant::MergeFrom(const E_FestivalZadanconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_costitem()) {
      set_m_costitem(from.m_costitem());
    }
    if (from.has_m_number()) {
      set_m_number(from.m_number());
    }
    if (from.has_m_free()) {
      set_m_free(from.m_free());
    }
    if (from.has_m_currency()) {
      set_m_currency(from.m_currency());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalZadanconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalZadanconstant::CopyFrom(const E_FestivalZadanconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalZadanconstant::IsInitialized() const {

  return true;
}

void E_FestivalZadanconstant::Swap(E_FestivalZadanconstant* other) {
  if (other != this) {
    std::swap(m_period_, other->m_period_);
    std::swap(m_costitem_, other->m_costitem_);
    std::swap(m_number_, other->m_number_);
    std::swap(m_free_, other->m_free_);
    std::swap(m_currency_, other->m_currency_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalZadanconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalZadanconstant_descriptor_;
  metadata.reflection = E_FestivalZadanconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalZadanconstant::kEFestivalZadanconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalZadanconstant::Sheet_FestivalZadanconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalZadanconstant::InitAsDefaultInstance() {
}

Sheet_FestivalZadanconstant::Sheet_FestivalZadanconstant(const Sheet_FestivalZadanconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalZadanconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalZadanconstant::~Sheet_FestivalZadanconstant() {
  SharedDtor();
}

void Sheet_FestivalZadanconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalZadanconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalZadanconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalZadanconstant_descriptor_;
}

const Sheet_FestivalZadanconstant& Sheet_FestivalZadanconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalZadanconstant* Sheet_FestivalZadanconstant::default_instance_ = NULL;

Sheet_FestivalZadanconstant* Sheet_FestivalZadanconstant::New() const {
  return new Sheet_FestivalZadanconstant;
}

void Sheet_FestivalZadanconstant::Clear() {
  e_festivalzadanconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalZadanconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalZadanconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalzadanconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalZadanconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalZadanconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
  for (int i = 0; i < this->e_festivalzadanconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalzadanconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalZadanconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
  for (int i = 0; i < this->e_festivalzadanconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalzadanconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalZadanconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalZadanconstant E_FestivalZadanconstant_List = 1;
  total_size += 1 * this->e_festivalzadanconstant_list_size();
  for (int i = 0; i < this->e_festivalzadanconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalzadanconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalZadanconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalZadanconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalZadanconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalZadanconstant::MergeFrom(const Sheet_FestivalZadanconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalzadanconstant_list_.MergeFrom(from.e_festivalzadanconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalZadanconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalZadanconstant::CopyFrom(const Sheet_FestivalZadanconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalZadanconstant::IsInitialized() const {

  return true;
}

void Sheet_FestivalZadanconstant::Swap(Sheet_FestivalZadanconstant* other) {
  if (other != this) {
    e_festivalzadanconstant_list_.Swap(&other->e_festivalzadanconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalZadanconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalZadanconstant_descriptor_;
  metadata.reflection = Sheet_FestivalZadanconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_turntable::kMIdFieldNumber;
const int E_FestivalMuban_turntable::kMPeriodFieldNumber;
const int E_FestivalMuban_turntable::kMPoolgroupFieldNumber;
const int E_FestivalMuban_turntable::kMTaskgroupFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_turntable::E_FestivalMuban_turntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_turntable::InitAsDefaultInstance() {
}

E_FestivalMuban_turntable::E_FestivalMuban_turntable(const E_FestivalMuban_turntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_turntable::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_poolgroup_ = 0;
  m_taskgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_turntable::~E_FestivalMuban_turntable() {
  SharedDtor();
}

void E_FestivalMuban_turntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_turntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_turntable_descriptor_;
}

const E_FestivalMuban_turntable& E_FestivalMuban_turntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_turntable* E_FestivalMuban_turntable::default_instance_ = NULL;

E_FestivalMuban_turntable* E_FestivalMuban_turntable::New() const {
  return new E_FestivalMuban_turntable;
}

void E_FestivalMuban_turntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_poolgroup_ = 0;
    m_taskgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_turntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_poolgroup;
        break;
      }

      // optional int32 m_poolgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_poolgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_poolgroup_)));
          set_has_m_poolgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_taskgroup;
        break;
      }

      // optional int32 m_taskgroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskgroup_)));
          set_has_m_taskgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_turntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_poolgroup = 3;
  if (has_m_poolgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_poolgroup(), output);
  }

  // optional int32 m_taskgroup = 4;
  if (has_m_taskgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_taskgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_turntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_poolgroup = 3;
  if (has_m_poolgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_poolgroup(), target);
  }

  // optional int32 m_taskgroup = 4;
  if (has_m_taskgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_taskgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_turntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_poolgroup = 3;
    if (has_m_poolgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_poolgroup());
    }

    // optional int32 m_taskgroup = 4;
    if (has_m_taskgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_turntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_turntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_turntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_turntable::MergeFrom(const E_FestivalMuban_turntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_poolgroup()) {
      set_m_poolgroup(from.m_poolgroup());
    }
    if (from.has_m_taskgroup()) {
      set_m_taskgroup(from.m_taskgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_turntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_turntable::CopyFrom(const E_FestivalMuban_turntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_turntable::IsInitialized() const {

  return true;
}

void E_FestivalMuban_turntable::Swap(E_FestivalMuban_turntable* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_poolgroup_, other->m_poolgroup_);
    std::swap(m_taskgroup_, other->m_taskgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_turntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_turntable_descriptor_;
  metadata.reflection = E_FestivalMuban_turntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_turntable::kEFestivalMubanTurntableListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_turntable::Sheet_FestivalMuban_turntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_turntable::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_turntable::Sheet_FestivalMuban_turntable(const Sheet_FestivalMuban_turntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_turntable::~Sheet_FestivalMuban_turntable() {
  SharedDtor();
}

void Sheet_FestivalMuban_turntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_turntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_turntable_descriptor_;
}

const Sheet_FestivalMuban_turntable& Sheet_FestivalMuban_turntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_turntable* Sheet_FestivalMuban_turntable::default_instance_ = NULL;

Sheet_FestivalMuban_turntable* Sheet_FestivalMuban_turntable::New() const {
  return new Sheet_FestivalMuban_turntable;
}

void Sheet_FestivalMuban_turntable::Clear() {
  e_festivalmuban_turntable_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_turntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_turntable_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_turntable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_turntable_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_turntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_turntable_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_turntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_turntable_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_turntable::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_turntable E_FestivalMuban_turntable_List = 1;
  total_size += 1 * this->e_festivalmuban_turntable_list_size();
  for (int i = 0; i < this->e_festivalmuban_turntable_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_turntable_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_turntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_turntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_turntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_turntable::MergeFrom(const Sheet_FestivalMuban_turntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_turntable_list_.MergeFrom(from.e_festivalmuban_turntable_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_turntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable::CopyFrom(const Sheet_FestivalMuban_turntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_turntable::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_turntable::Swap(Sheet_FestivalMuban_turntable* other) {
  if (other != this) {
    e_festivalmuban_turntable_list_.Swap(&other->e_festivalmuban_turntable_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_turntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_turntable_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_turntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_turntable_pool::kMIdFieldNumber;
const int E_FestivalMuban_turntable_pool::kMGroupidFieldNumber;
const int E_FestivalMuban_turntable_pool::kMItemidFieldNumber;
const int E_FestivalMuban_turntable_pool::kMNumFieldNumber;
const int E_FestivalMuban_turntable_pool::kMWeightFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_turntable_pool::E_FestivalMuban_turntable_pool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_turntable_pool::InitAsDefaultInstance() {
}

E_FestivalMuban_turntable_pool::E_FestivalMuban_turntable_pool(const E_FestivalMuban_turntable_pool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_turntable_pool::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  m_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_turntable_pool::~E_FestivalMuban_turntable_pool() {
  SharedDtor();
}

void E_FestivalMuban_turntable_pool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_turntable_pool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable_pool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_turntable_pool_descriptor_;
}

const E_FestivalMuban_turntable_pool& E_FestivalMuban_turntable_pool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_turntable_pool* E_FestivalMuban_turntable_pool::default_instance_ = NULL;

E_FestivalMuban_turntable_pool* E_FestivalMuban_turntable_pool::New() const {
  return new E_FestivalMuban_turntable_pool;
}

void E_FestivalMuban_turntable_pool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
    m_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_turntable_pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_turntable_pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_itemid = 3;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itemid(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  // optional int32 m_weight = 5;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_turntable_pool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_itemid = 3;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itemid(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  // optional int32 m_weight = 5;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_turntable_pool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_itemid = 3;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_weight = 5;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_turntable_pool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_turntable_pool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_turntable_pool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_turntable_pool::MergeFrom(const E_FestivalMuban_turntable_pool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_turntable_pool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_turntable_pool::CopyFrom(const E_FestivalMuban_turntable_pool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_turntable_pool::IsInitialized() const {

  return true;
}

void E_FestivalMuban_turntable_pool::Swap(E_FestivalMuban_turntable_pool* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_turntable_pool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_turntable_pool_descriptor_;
  metadata.reflection = E_FestivalMuban_turntable_pool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_turntable_pool::kEFestivalMubanTurntablePoolListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_turntable_pool::Sheet_FestivalMuban_turntable_pool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_turntable_pool::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_turntable_pool::Sheet_FestivalMuban_turntable_pool(const Sheet_FestivalMuban_turntable_pool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable_pool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_turntable_pool::~Sheet_FestivalMuban_turntable_pool() {
  SharedDtor();
}

void Sheet_FestivalMuban_turntable_pool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_turntable_pool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable_pool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_turntable_pool_descriptor_;
}

const Sheet_FestivalMuban_turntable_pool& Sheet_FestivalMuban_turntable_pool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_turntable_pool* Sheet_FestivalMuban_turntable_pool::default_instance_ = NULL;

Sheet_FestivalMuban_turntable_pool* Sheet_FestivalMuban_turntable_pool::New() const {
  return new Sheet_FestivalMuban_turntable_pool;
}

void Sheet_FestivalMuban_turntable_pool::Clear() {
  e_festivalmuban_turntable_pool_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_turntable_pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_turntable_pool_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_turntable_pool_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_turntable_pool_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_turntable_pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_pool_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_turntable_pool_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_turntable_pool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_pool_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_turntable_pool_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_turntable_pool::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_turntable_pool E_FestivalMuban_turntable_pool_List = 1;
  total_size += 1 * this->e_festivalmuban_turntable_pool_list_size();
  for (int i = 0; i < this->e_festivalmuban_turntable_pool_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_turntable_pool_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_turntable_pool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_turntable_pool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_turntable_pool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_turntable_pool::MergeFrom(const Sheet_FestivalMuban_turntable_pool& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_turntable_pool_list_.MergeFrom(from.e_festivalmuban_turntable_pool_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_turntable_pool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable_pool::CopyFrom(const Sheet_FestivalMuban_turntable_pool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_turntable_pool::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_turntable_pool::Swap(Sheet_FestivalMuban_turntable_pool* other) {
  if (other != this) {
    e_festivalmuban_turntable_pool_list_.Swap(&other->e_festivalmuban_turntable_pool_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_turntable_pool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_turntable_pool_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_turntable_pool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_turntable_task::kMIdFieldNumber;
const int E_FestivalMuban_turntable_task::kMGroupidFieldNumber;
const int E_FestivalMuban_turntable_task::kMEventtypeFieldNumber;
const int E_FestivalMuban_turntable_task::kMReachpriceFieldNumber;
const int E_FestivalMuban_turntable_task::kMLinkFieldNumber;
const int E_FestivalMuban_turntable_task::kMRewardtimesFieldNumber;
const int E_FestivalMuban_turntable_task::kMParamFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_turntable_task::E_FestivalMuban_turntable_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_turntable_task::InitAsDefaultInstance() {
}

E_FestivalMuban_turntable_task::E_FestivalMuban_turntable_task(const E_FestivalMuban_turntable_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_turntable_task::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_link_ = 0;
  m_rewardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_turntable_task::~E_FestivalMuban_turntable_task() {
  SharedDtor();
}

void E_FestivalMuban_turntable_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_turntable_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_turntable_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_turntable_task_descriptor_;
}

const E_FestivalMuban_turntable_task& E_FestivalMuban_turntable_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_turntable_task* E_FestivalMuban_turntable_task::default_instance_ = NULL;

E_FestivalMuban_turntable_task* E_FestivalMuban_turntable_task::New() const {
  return new E_FestivalMuban_turntable_task;
}

void E_FestivalMuban_turntable_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_link_ = 0;
    m_rewardtimes_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_turntable_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_link;
        break;
      }

      // optional int32 m_link = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_link:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_link_)));
          set_has_m_link();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rewardtimes;
        break;
      }

      // optional int32 m_rewardtimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardtimes_)));
          set_has_m_rewardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_turntable_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_link = 5;
  if (has_m_link()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_link(), output);
  }

  // optional int32 m_rewardtimes = 6;
  if (has_m_rewardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rewardtimes(), output);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_turntable_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_link = 5;
  if (has_m_link()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_link(), target);
  }

  // optional int32 m_rewardtimes = 6;
  if (has_m_rewardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rewardtimes(), target);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_turntable_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_eventtype = 3;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_link = 5;
    if (has_m_link()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_link());
    }

    // optional int32 m_rewardtimes = 6;
    if (has_m_rewardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardtimes());
    }

  }
  // repeated int32 m_param = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_turntable_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_turntable_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_turntable_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_turntable_task::MergeFrom(const E_FestivalMuban_turntable_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_link()) {
      set_m_link(from.m_link());
    }
    if (from.has_m_rewardtimes()) {
      set_m_rewardtimes(from.m_rewardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_turntable_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_turntable_task::CopyFrom(const E_FestivalMuban_turntable_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_turntable_task::IsInitialized() const {

  return true;
}

void E_FestivalMuban_turntable_task::Swap(E_FestivalMuban_turntable_task* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_link_, other->m_link_);
    std::swap(m_rewardtimes_, other->m_rewardtimes_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_turntable_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_turntable_task_descriptor_;
  metadata.reflection = E_FestivalMuban_turntable_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_turntable_task::kEFestivalMubanTurntableTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_turntable_task::Sheet_FestivalMuban_turntable_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_turntable_task::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_turntable_task::Sheet_FestivalMuban_turntable_task(const Sheet_FestivalMuban_turntable_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable_task::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_turntable_task::~Sheet_FestivalMuban_turntable_task() {
  SharedDtor();
}

void Sheet_FestivalMuban_turntable_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_turntable_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_turntable_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_turntable_task_descriptor_;
}

const Sheet_FestivalMuban_turntable_task& Sheet_FestivalMuban_turntable_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_turntable_task* Sheet_FestivalMuban_turntable_task::default_instance_ = NULL;

Sheet_FestivalMuban_turntable_task* Sheet_FestivalMuban_turntable_task::New() const {
  return new Sheet_FestivalMuban_turntable_task;
}

void Sheet_FestivalMuban_turntable_task::Clear() {
  e_festivalmuban_turntable_task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_turntable_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_turntable_task_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_turntable_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_turntable_task_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_turntable_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_turntable_task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_turntable_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_turntable_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_turntable_task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_turntable_task::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_turntable_task E_FestivalMuban_turntable_task_List = 1;
  total_size += 1 * this->e_festivalmuban_turntable_task_list_size();
  for (int i = 0; i < this->e_festivalmuban_turntable_task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_turntable_task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_turntable_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_turntable_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_turntable_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_turntable_task::MergeFrom(const Sheet_FestivalMuban_turntable_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_turntable_task_list_.MergeFrom(from.e_festivalmuban_turntable_task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_turntable_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_turntable_task::CopyFrom(const Sheet_FestivalMuban_turntable_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_turntable_task::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_turntable_task::Swap(Sheet_FestivalMuban_turntable_task* other) {
  if (other != this) {
    e_festivalmuban_turntable_task_list_.Swap(&other->e_festivalmuban_turntable_task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_turntable_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_turntable_task_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_turntable_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_donate::kMIdFieldNumber;
const int E_FestivalMuban_donate::kMPeriodFieldNumber;
const int E_FestivalMuban_donate::kMDonateitemFieldNumber;
const int E_FestivalMuban_donate::kMDonaterewardFieldNumber;
const int E_FestivalMuban_donate::kMSeverrewardFieldNumber;
const int E_FestivalMuban_donate::kMSinglerewardFieldNumber;
const int E_FestivalMuban_donate::kMTaskgroupidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_donate::E_FestivalMuban_donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_donate::InitAsDefaultInstance() {
}

E_FestivalMuban_donate::E_FestivalMuban_donate(const E_FestivalMuban_donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_donate::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_donateitem_ = 0;
  m_donatereward_ = 0;
  m_severreward_ = 0;
  m_singlereward_ = 0;
  m_taskgroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_donate::~E_FestivalMuban_donate() {
  SharedDtor();
}

void E_FestivalMuban_donate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_donate_descriptor_;
}

const E_FestivalMuban_donate& E_FestivalMuban_donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_donate* E_FestivalMuban_donate::default_instance_ = NULL;

E_FestivalMuban_donate* E_FestivalMuban_donate::New() const {
  return new E_FestivalMuban_donate;
}

void E_FestivalMuban_donate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_donateitem_ = 0;
    m_donatereward_ = 0;
    m_severreward_ = 0;
    m_singlereward_ = 0;
    m_taskgroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_donateitem;
        break;
      }

      // optional int32 m_donateitem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_donateitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_donateitem_)));
          set_has_m_donateitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_donatereward;
        break;
      }

      // optional int32 m_donatereward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_donatereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_donatereward_)));
          set_has_m_donatereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_severreward;
        break;
      }

      // optional int32 m_severreward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_severreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_severreward_)));
          set_has_m_severreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_singlereward;
        break;
      }

      // optional int32 m_singlereward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_singlereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_singlereward_)));
          set_has_m_singlereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_taskgroupid;
        break;
      }

      // optional int32 m_taskgroupid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_taskgroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_taskgroupid_)));
          set_has_m_taskgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_donateitem = 3;
  if (has_m_donateitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_donateitem(), output);
  }

  // optional int32 m_donatereward = 4;
  if (has_m_donatereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_donatereward(), output);
  }

  // optional int32 m_severreward = 5;
  if (has_m_severreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_severreward(), output);
  }

  // optional int32 m_singlereward = 6;
  if (has_m_singlereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_singlereward(), output);
  }

  // optional int32 m_taskgroupid = 7;
  if (has_m_taskgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_taskgroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_donateitem = 3;
  if (has_m_donateitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_donateitem(), target);
  }

  // optional int32 m_donatereward = 4;
  if (has_m_donatereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_donatereward(), target);
  }

  // optional int32 m_severreward = 5;
  if (has_m_severreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_severreward(), target);
  }

  // optional int32 m_singlereward = 6;
  if (has_m_singlereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_singlereward(), target);
  }

  // optional int32 m_taskgroupid = 7;
  if (has_m_taskgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_taskgroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_donate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_donateitem = 3;
    if (has_m_donateitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_donateitem());
    }

    // optional int32 m_donatereward = 4;
    if (has_m_donatereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_donatereward());
    }

    // optional int32 m_severreward = 5;
    if (has_m_severreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_severreward());
    }

    // optional int32 m_singlereward = 6;
    if (has_m_singlereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_singlereward());
    }

    // optional int32 m_taskgroupid = 7;
    if (has_m_taskgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_taskgroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_donate::MergeFrom(const E_FestivalMuban_donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_donateitem()) {
      set_m_donateitem(from.m_donateitem());
    }
    if (from.has_m_donatereward()) {
      set_m_donatereward(from.m_donatereward());
    }
    if (from.has_m_severreward()) {
      set_m_severreward(from.m_severreward());
    }
    if (from.has_m_singlereward()) {
      set_m_singlereward(from.m_singlereward());
    }
    if (from.has_m_taskgroupid()) {
      set_m_taskgroupid(from.m_taskgroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_donate::CopyFrom(const E_FestivalMuban_donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_donate::IsInitialized() const {

  return true;
}

void E_FestivalMuban_donate::Swap(E_FestivalMuban_donate* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_donateitem_, other->m_donateitem_);
    std::swap(m_donatereward_, other->m_donatereward_);
    std::swap(m_severreward_, other->m_severreward_);
    std::swap(m_singlereward_, other->m_singlereward_);
    std::swap(m_taskgroupid_, other->m_taskgroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_donate_descriptor_;
  metadata.reflection = E_FestivalMuban_donate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_donate::kEFestivalMubanDonateListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_donate::Sheet_FestivalMuban_donate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_donate::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_donate::Sheet_FestivalMuban_donate(const Sheet_FestivalMuban_donate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_donate::~Sheet_FestivalMuban_donate() {
  SharedDtor();
}

void Sheet_FestivalMuban_donate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_donate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_donate_descriptor_;
}

const Sheet_FestivalMuban_donate& Sheet_FestivalMuban_donate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_donate* Sheet_FestivalMuban_donate::default_instance_ = NULL;

Sheet_FestivalMuban_donate* Sheet_FestivalMuban_donate::New() const {
  return new Sheet_FestivalMuban_donate;
}

void Sheet_FestivalMuban_donate::Clear() {
  e_festivalmuban_donate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_donate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_donate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_donate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_donate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_donate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_donate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_donate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_donate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_donate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_donate E_FestivalMuban_donate_List = 1;
  total_size += 1 * this->e_festivalmuban_donate_list_size();
  for (int i = 0; i < this->e_festivalmuban_donate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_donate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_donate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_donate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_donate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_donate::MergeFrom(const Sheet_FestivalMuban_donate& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_donate_list_.MergeFrom(from.e_festivalmuban_donate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_donate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate::CopyFrom(const Sheet_FestivalMuban_donate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_donate::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_donate::Swap(Sheet_FestivalMuban_donate* other) {
  if (other != this) {
    e_festivalmuban_donate_list_.Swap(&other->e_festivalmuban_donate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_donate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_donate_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_donate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_donate_sever::kMIdFieldNumber;
const int E_FestivalMuban_donate_sever::kMGroupidFieldNumber;
const int E_FestivalMuban_donate_sever::kMValueFieldNumber;
const int E_FestivalMuban_donate_sever::kMTypeFieldNumber;
const int E_FestivalMuban_donate_sever::kMTypeargFieldNumber;
const int E_FestivalMuban_donate_sever::kMProFieldNumber;
const int E_FestivalMuban_donate_sever::kMNumFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_donate_sever::E_FestivalMuban_donate_sever()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_donate_sever::InitAsDefaultInstance() {
}

E_FestivalMuban_donate_sever::E_FestivalMuban_donate_sever(const E_FestivalMuban_donate_sever& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_donate_sever::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  m_typearg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_donate_sever::~E_FestivalMuban_donate_sever() {
  SharedDtor();
}

void E_FestivalMuban_donate_sever::SharedDtor() {
  if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typearg_;
  }
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pro_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_donate_sever::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_sever::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_donate_sever_descriptor_;
}

const E_FestivalMuban_donate_sever& E_FestivalMuban_donate_sever::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_donate_sever* E_FestivalMuban_donate_sever::default_instance_ = NULL;

E_FestivalMuban_donate_sever* E_FestivalMuban_donate_sever::New() const {
  return new E_FestivalMuban_donate_sever;
}

void E_FestivalMuban_donate_sever::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_value_ = 0;
    m_type_ = 0;
    if (has_m_typearg()) {
      if (m_typearg_ != &::google::protobuf::internal::kEmptyString) {
        m_typearg_->clear();
      }
    }
    if (has_m_pro()) {
      if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
        m_pro_->clear();
      }
    }
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_donate_sever::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_typearg;
        break;
      }

      // optional string m_typearg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_typearg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typearg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typearg().data(), this->m_typearg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_pro;
        break;
      }

      // optional string m_pro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pro().data(), this->m_pro().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_donate_sever::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_type(), output);
  }

  // optional string m_typearg = 5;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typearg().data(), this->m_typearg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_typearg(), output);
  }

  // optional string m_pro = 6;
  if (has_m_pro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pro().data(), this->m_pro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_pro(), output);
  }

  // optional int32 m_num = 7;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_donate_sever::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional int32 m_type = 4;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_type(), target);
  }

  // optional string m_typearg = 5;
  if (has_m_typearg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typearg().data(), this->m_typearg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_typearg(), target);
  }

  // optional string m_pro = 6;
  if (has_m_pro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pro().data(), this->m_pro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_pro(), target);
  }

  // optional int32 m_num = 7;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_donate_sever::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 4;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_typearg = 5;
    if (has_m_typearg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typearg());
    }

    // optional string m_pro = 6;
    if (has_m_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pro());
    }

    // optional int32 m_num = 7;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_donate_sever::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_donate_sever* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_donate_sever*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_donate_sever::MergeFrom(const E_FestivalMuban_donate_sever& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_typearg()) {
      set_m_typearg(from.m_typearg());
    }
    if (from.has_m_pro()) {
      set_m_pro(from.m_pro());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_donate_sever::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_donate_sever::CopyFrom(const E_FestivalMuban_donate_sever& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_donate_sever::IsInitialized() const {

  return true;
}

void E_FestivalMuban_donate_sever::Swap(E_FestivalMuban_donate_sever* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_typearg_, other->m_typearg_);
    std::swap(m_pro_, other->m_pro_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_donate_sever::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_donate_sever_descriptor_;
  metadata.reflection = E_FestivalMuban_donate_sever_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_donate_sever::kEFestivalMubanDonateSeverListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_donate_sever::Sheet_FestivalMuban_donate_sever()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_donate_sever::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_donate_sever::Sheet_FestivalMuban_donate_sever(const Sheet_FestivalMuban_donate_sever& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_sever::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_donate_sever::~Sheet_FestivalMuban_donate_sever() {
  SharedDtor();
}

void Sheet_FestivalMuban_donate_sever::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_donate_sever::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_sever::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_donate_sever_descriptor_;
}

const Sheet_FestivalMuban_donate_sever& Sheet_FestivalMuban_donate_sever::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_donate_sever* Sheet_FestivalMuban_donate_sever::default_instance_ = NULL;

Sheet_FestivalMuban_donate_sever* Sheet_FestivalMuban_donate_sever::New() const {
  return new Sheet_FestivalMuban_donate_sever;
}

void Sheet_FestivalMuban_donate_sever::Clear() {
  e_festivalmuban_donate_sever_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_donate_sever::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_donate_sever_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_donate_sever_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_donate_sever_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_donate_sever::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_sever_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_donate_sever_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_donate_sever::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_sever_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_donate_sever_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_donate_sever::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_donate_sever E_FestivalMuban_donate_sever_List = 1;
  total_size += 1 * this->e_festivalmuban_donate_sever_list_size();
  for (int i = 0; i < this->e_festivalmuban_donate_sever_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_donate_sever_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_donate_sever::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_donate_sever* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_donate_sever*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_donate_sever::MergeFrom(const Sheet_FestivalMuban_donate_sever& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_donate_sever_list_.MergeFrom(from.e_festivalmuban_donate_sever_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_donate_sever::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_sever::CopyFrom(const Sheet_FestivalMuban_donate_sever& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_donate_sever::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_donate_sever::Swap(Sheet_FestivalMuban_donate_sever* other) {
  if (other != this) {
    e_festivalmuban_donate_sever_list_.Swap(&other->e_festivalmuban_donate_sever_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_donate_sever::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_donate_sever_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_donate_sever_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_donate_single::kMIdFieldNumber;
const int E_FestivalMuban_donate_single::kMGroupidFieldNumber;
const int E_FestivalMuban_donate_single::kMValueFieldNumber;
const int E_FestivalMuban_donate_single::kMItemidFieldNumber;
const int E_FestivalMuban_donate_single::kMProFieldNumber;
const int E_FestivalMuban_donate_single::kMNumFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_donate_single::E_FestivalMuban_donate_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_donate_single::InitAsDefaultInstance() {
}

E_FestivalMuban_donate_single::E_FestivalMuban_donate_single(const E_FestivalMuban_donate_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_donate_single::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_value_ = 0;
  m_itemid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_donate_single::~E_FestivalMuban_donate_single() {
  SharedDtor();
}

void E_FestivalMuban_donate_single::SharedDtor() {
  if (m_itemid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemid_;
  }
  if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete m_pro_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_donate_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_donate_single_descriptor_;
}

const E_FestivalMuban_donate_single& E_FestivalMuban_donate_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_donate_single* E_FestivalMuban_donate_single::default_instance_ = NULL;

E_FestivalMuban_donate_single* E_FestivalMuban_donate_single::New() const {
  return new E_FestivalMuban_donate_single;
}

void E_FestivalMuban_donate_single::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_value_ = 0;
    if (has_m_itemid()) {
      if (m_itemid_ != &::google::protobuf::internal::kEmptyString) {
        m_itemid_->clear();
      }
    }
    if (has_m_pro()) {
      if (m_pro_ != &::google::protobuf::internal::kEmptyString) {
        m_pro_->clear();
      }
    }
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_donate_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_itemid;
        break;
      }

      // optional string m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_itemid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_itemid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_itemid().data(), this->m_itemid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_pro;
        break;
      }

      // optional string m_pro = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_pro()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_pro().data(), this->m_pro().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_donate_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional string m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemid().data(), this->m_itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_itemid(), output);
  }

  // optional string m_pro = 5;
  if (has_m_pro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pro().data(), this->m_pro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_pro(), output);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_donate_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional string m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_itemid().data(), this->m_itemid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_itemid(), target);
  }

  // optional string m_pro = 5;
  if (has_m_pro()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_pro().data(), this->m_pro().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_pro(), target);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_donate_single::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional string m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_itemid());
    }

    // optional string m_pro = 5;
    if (has_m_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_pro());
    }

    // optional int32 m_num = 6;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_donate_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_donate_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_donate_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_donate_single::MergeFrom(const E_FestivalMuban_donate_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_pro()) {
      set_m_pro(from.m_pro());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_donate_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_donate_single::CopyFrom(const E_FestivalMuban_donate_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_donate_single::IsInitialized() const {

  return true;
}

void E_FestivalMuban_donate_single::Swap(E_FestivalMuban_donate_single* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_pro_, other->m_pro_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_donate_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_donate_single_descriptor_;
  metadata.reflection = E_FestivalMuban_donate_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_donate_single::kEFestivalMubanDonateSingleListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_donate_single::Sheet_FestivalMuban_donate_single()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_donate_single::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_donate_single::Sheet_FestivalMuban_donate_single(const Sheet_FestivalMuban_donate_single& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_single::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_donate_single::~Sheet_FestivalMuban_donate_single() {
  SharedDtor();
}

void Sheet_FestivalMuban_donate_single::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_donate_single::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_single::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_donate_single_descriptor_;
}

const Sheet_FestivalMuban_donate_single& Sheet_FestivalMuban_donate_single::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_donate_single* Sheet_FestivalMuban_donate_single::default_instance_ = NULL;

Sheet_FestivalMuban_donate_single* Sheet_FestivalMuban_donate_single::New() const {
  return new Sheet_FestivalMuban_donate_single;
}

void Sheet_FestivalMuban_donate_single::Clear() {
  e_festivalmuban_donate_single_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_donate_single::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_donate_single_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_donate_single_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_donate_single_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_donate_single::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_single_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_donate_single_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_donate_single::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_single_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_donate_single_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_donate_single::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_donate_single E_FestivalMuban_donate_single_List = 1;
  total_size += 1 * this->e_festivalmuban_donate_single_list_size();
  for (int i = 0; i < this->e_festivalmuban_donate_single_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_donate_single_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_donate_single::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_donate_single* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_donate_single*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_donate_single::MergeFrom(const Sheet_FestivalMuban_donate_single& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_donate_single_list_.MergeFrom(from.e_festivalmuban_donate_single_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_donate_single::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_single::CopyFrom(const Sheet_FestivalMuban_donate_single& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_donate_single::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_donate_single::Swap(Sheet_FestivalMuban_donate_single* other) {
  if (other != this) {
    e_festivalmuban_donate_single_list_.Swap(&other->e_festivalmuban_donate_single_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_donate_single::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_donate_single_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_donate_single_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_donate_task::kMIdFieldNumber;
const int E_FestivalMuban_donate_task::kMGroupidFieldNumber;
const int E_FestivalMuban_donate_task::kMEventtypeFieldNumber;
const int E_FestivalMuban_donate_task::kMReachpriceFieldNumber;
const int E_FestivalMuban_donate_task::kMItemidFieldNumber;
const int E_FestivalMuban_donate_task::kMItemnumFieldNumber;
const int E_FestivalMuban_donate_task::kMParamFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_donate_task::E_FestivalMuban_donate_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_donate_task::InitAsDefaultInstance() {
}

E_FestivalMuban_donate_task::E_FestivalMuban_donate_task(const E_FestivalMuban_donate_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_donate_task::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_itemid_ = 0;
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_donate_task::~E_FestivalMuban_donate_task() {
  SharedDtor();
}

void E_FestivalMuban_donate_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_donate_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_donate_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_donate_task_descriptor_;
}

const E_FestivalMuban_donate_task& E_FestivalMuban_donate_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_donate_task* E_FestivalMuban_donate_task::default_instance_ = NULL;

E_FestivalMuban_donate_task* E_FestivalMuban_donate_task::New() const {
  return new E_FestivalMuban_donate_task;
}

void E_FestivalMuban_donate_task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_itemid_ = 0;
    m_itemnum_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_donate_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_donate_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemnum(), output);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_donate_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemnum(), target);
  }

  // repeated int32 m_param = 7;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_donate_task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_eventtype = 3;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_itemid = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemnum = 6;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  // repeated int32 m_param = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_donate_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_donate_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_donate_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_donate_task::MergeFrom(const E_FestivalMuban_donate_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_donate_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_donate_task::CopyFrom(const E_FestivalMuban_donate_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_donate_task::IsInitialized() const {

  return true;
}

void E_FestivalMuban_donate_task::Swap(E_FestivalMuban_donate_task* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_donate_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_donate_task_descriptor_;
  metadata.reflection = E_FestivalMuban_donate_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_donate_task::kEFestivalMubanDonateTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_donate_task::Sheet_FestivalMuban_donate_task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_donate_task::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_donate_task::Sheet_FestivalMuban_donate_task(const Sheet_FestivalMuban_donate_task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_task::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_donate_task::~Sheet_FestivalMuban_donate_task() {
  SharedDtor();
}

void Sheet_FestivalMuban_donate_task::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_donate_task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_donate_task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_donate_task_descriptor_;
}

const Sheet_FestivalMuban_donate_task& Sheet_FestivalMuban_donate_task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_donate_task* Sheet_FestivalMuban_donate_task::default_instance_ = NULL;

Sheet_FestivalMuban_donate_task* Sheet_FestivalMuban_donate_task::New() const {
  return new Sheet_FestivalMuban_donate_task;
}

void Sheet_FestivalMuban_donate_task::Clear() {
  e_festivalmuban_donate_task_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_donate_task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_donate_task_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_donate_task_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_donate_task_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_donate_task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_task_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_donate_task_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_donate_task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
  for (int i = 0; i < this->e_festivalmuban_donate_task_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_donate_task_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_donate_task::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_donate_task E_FestivalMuban_donate_task_List = 1;
  total_size += 1 * this->e_festivalmuban_donate_task_list_size();
  for (int i = 0; i < this->e_festivalmuban_donate_task_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_donate_task_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_donate_task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_donate_task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_donate_task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_donate_task::MergeFrom(const Sheet_FestivalMuban_donate_task& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_donate_task_list_.MergeFrom(from.e_festivalmuban_donate_task_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_donate_task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_donate_task::CopyFrom(const Sheet_FestivalMuban_donate_task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_donate_task::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_donate_task::Swap(Sheet_FestivalMuban_donate_task* other) {
  if (other != this) {
    e_festivalmuban_donate_task_list_.Swap(&other->e_festivalmuban_donate_task_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_donate_task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_donate_task_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_donate_task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_online::kMIdFieldNumber;
const int E_FestivalMuban_online::kMPeriodFieldNumber;
const int E_FestivalMuban_online::kMTimestartFieldNumber;
const int E_FestivalMuban_online::kMTimeendFieldNumber;
const int E_FestivalMuban_online::kMItemidFieldNumber;
const int E_FestivalMuban_online::kMItemnumFieldNumber;
const int E_FestivalMuban_online::kMVipFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_online::E_FestivalMuban_online()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_online::InitAsDefaultInstance() {
}

E_FestivalMuban_online::E_FestivalMuban_online(const E_FestivalMuban_online& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_online::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_timestart_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_timeend_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_itemid_ = 0;
  m_itemnum_ = 0;
  m_vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_online::~E_FestivalMuban_online() {
  SharedDtor();
}

void E_FestivalMuban_online::SharedDtor() {
  if (m_timestart_ != &::google::protobuf::internal::kEmptyString) {
    delete m_timestart_;
  }
  if (m_timeend_ != &::google::protobuf::internal::kEmptyString) {
    delete m_timeend_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_online::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_online_descriptor_;
}

const E_FestivalMuban_online& E_FestivalMuban_online::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_online* E_FestivalMuban_online::default_instance_ = NULL;

E_FestivalMuban_online* E_FestivalMuban_online::New() const {
  return new E_FestivalMuban_online;
}

void E_FestivalMuban_online::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    if (has_m_timestart()) {
      if (m_timestart_ != &::google::protobuf::internal::kEmptyString) {
        m_timestart_->clear();
      }
    }
    if (has_m_timeend()) {
      if (m_timeend_ != &::google::protobuf::internal::kEmptyString) {
        m_timeend_->clear();
      }
    }
    m_itemid_ = 0;
    m_itemnum_ = 0;
    m_vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_timestart;
        break;
      }

      // optional string m_timestart = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_timestart:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_timestart()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_timestart().data(), this->m_timestart().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_timeend;
        break;
      }

      // optional string m_timeend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_timeend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_timeend()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_timeend().data(), this->m_timeend().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_itemnum;
        break;
      }

      // optional int32 m_itemnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_vip;
        break;
      }

      // optional int32 m_vip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_vip_)));
          set_has_m_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional string m_timestart = 3;
  if (has_m_timestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_timestart().data(), this->m_timestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_timestart(), output);
  }

  // optional string m_timeend = 4;
  if (has_m_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_timeend().data(), this->m_timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_timeend(), output);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemid(), output);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_itemnum(), output);
  }

  // optional int32 m_vip = 7;
  if (has_m_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_online::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional string m_timestart = 3;
  if (has_m_timestart()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_timestart().data(), this->m_timestart().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_timestart(), target);
  }

  // optional string m_timeend = 4;
  if (has_m_timeend()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_timeend().data(), this->m_timeend().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_timeend(), target);
  }

  // optional int32 m_itemid = 5;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemid(), target);
  }

  // optional int32 m_itemnum = 6;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_itemnum(), target);
  }

  // optional int32 m_vip = 7;
  if (has_m_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_online::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional string m_timestart = 3;
    if (has_m_timestart()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_timestart());
    }

    // optional string m_timeend = 4;
    if (has_m_timeend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_timeend());
    }

    // optional int32 m_itemid = 5;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_itemnum = 6;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

    // optional int32 m_vip = 7;
    if (has_m_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_online::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_online* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_online*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_online::MergeFrom(const E_FestivalMuban_online& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_timestart()) {
      set_m_timestart(from.m_timestart());
    }
    if (from.has_m_timeend()) {
      set_m_timeend(from.m_timeend());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
    if (from.has_m_vip()) {
      set_m_vip(from.m_vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_online::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_online::CopyFrom(const E_FestivalMuban_online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_online::IsInitialized() const {

  return true;
}

void E_FestivalMuban_online::Swap(E_FestivalMuban_online* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_timestart_, other->m_timestart_);
    std::swap(m_timeend_, other->m_timeend_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(m_vip_, other->m_vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_online::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_online_descriptor_;
  metadata.reflection = E_FestivalMuban_online_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_online::kEFestivalMubanOnlineListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_online::Sheet_FestivalMuban_online()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_online::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_online::Sheet_FestivalMuban_online(const Sheet_FestivalMuban_online& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_online::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_online::~Sheet_FestivalMuban_online() {
  SharedDtor();
}

void Sheet_FestivalMuban_online::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_online::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_online::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_online_descriptor_;
}

const Sheet_FestivalMuban_online& Sheet_FestivalMuban_online::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_online* Sheet_FestivalMuban_online::default_instance_ = NULL;

Sheet_FestivalMuban_online* Sheet_FestivalMuban_online::New() const {
  return new Sheet_FestivalMuban_online;
}

void Sheet_FestivalMuban_online::Clear() {
  e_festivalmuban_online_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_online::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_online_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_online_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_online_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_online::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
  for (int i = 0; i < this->e_festivalmuban_online_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_online_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_online::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
  for (int i = 0; i < this->e_festivalmuban_online_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_online_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_online::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_online E_FestivalMuban_online_List = 1;
  total_size += 1 * this->e_festivalmuban_online_list_size();
  for (int i = 0; i < this->e_festivalmuban_online_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_online_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_online::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_online* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_online*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_online::MergeFrom(const Sheet_FestivalMuban_online& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_online_list_.MergeFrom(from.e_festivalmuban_online_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_online::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_online::CopyFrom(const Sheet_FestivalMuban_online& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_online::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_online::Swap(Sheet_FestivalMuban_online* other) {
  if (other != this) {
    e_festivalmuban_online_list_.Swap(&other->e_festivalmuban_online_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_online::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_online_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_online_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_rturntable::kMIdFieldNumber;
const int E_FestivalMuban_rturntable::kMPeriodFieldNumber;
const int E_FestivalMuban_rturntable::kMRechargegroupidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_rturntable::E_FestivalMuban_rturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_rturntable::InitAsDefaultInstance() {
}

E_FestivalMuban_rturntable::E_FestivalMuban_rturntable(const E_FestivalMuban_rturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_rechargegroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_rturntable::~E_FestivalMuban_rturntable() {
  SharedDtor();
}

void E_FestivalMuban_rturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_rturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_rturntable_descriptor_;
}

const E_FestivalMuban_rturntable& E_FestivalMuban_rturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_rturntable* E_FestivalMuban_rturntable::default_instance_ = NULL;

E_FestivalMuban_rturntable* E_FestivalMuban_rturntable::New() const {
  return new E_FestivalMuban_rturntable;
}

void E_FestivalMuban_rturntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_rechargegroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_rturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rechargegroupid;
        break;
      }

      // optional int32 m_rechargegroupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargegroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargegroupid_)));
          set_has_m_rechargegroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_rturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_rechargegroupid = 3;
  if (has_m_rechargegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rechargegroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_rturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_rechargegroupid = 3;
  if (has_m_rechargegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rechargegroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_rturntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_rechargegroupid = 3;
    if (has_m_rechargegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargegroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_rturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_rturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_rturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_rturntable::MergeFrom(const E_FestivalMuban_rturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_rechargegroupid()) {
      set_m_rechargegroupid(from.m_rechargegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_rturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable::CopyFrom(const E_FestivalMuban_rturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_rturntable::IsInitialized() const {

  return true;
}

void E_FestivalMuban_rturntable::Swap(E_FestivalMuban_rturntable* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_rechargegroupid_, other->m_rechargegroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_rturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_rturntable_descriptor_;
  metadata.reflection = E_FestivalMuban_rturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_rturntable::kEFestivalMubanRturntableListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_rturntable::Sheet_FestivalMuban_rturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_rturntable::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_rturntable::Sheet_FestivalMuban_rturntable(const Sheet_FestivalMuban_rturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_rturntable::~Sheet_FestivalMuban_rturntable() {
  SharedDtor();
}

void Sheet_FestivalMuban_rturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_rturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_rturntable_descriptor_;
}

const Sheet_FestivalMuban_rturntable& Sheet_FestivalMuban_rturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_rturntable* Sheet_FestivalMuban_rturntable::default_instance_ = NULL;

Sheet_FestivalMuban_rturntable* Sheet_FestivalMuban_rturntable::New() const {
  return new Sheet_FestivalMuban_rturntable;
}

void Sheet_FestivalMuban_rturntable::Clear() {
  e_festivalmuban_rturntable_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_rturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_rturntable_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_rturntable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_rturntable_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_rturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_rturntable_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_rturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_rturntable_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_rturntable::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_rturntable E_FestivalMuban_rturntable_List = 1;
  total_size += 1 * this->e_festivalmuban_rturntable_list_size();
  for (int i = 0; i < this->e_festivalmuban_rturntable_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_rturntable_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_rturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_rturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_rturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_rturntable::MergeFrom(const Sheet_FestivalMuban_rturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_rturntable_list_.MergeFrom(from.e_festivalmuban_rturntable_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_rturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable::CopyFrom(const Sheet_FestivalMuban_rturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_rturntable::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_rturntable::Swap(Sheet_FestivalMuban_rturntable* other) {
  if (other != this) {
    e_festivalmuban_rturntable_list_.Swap(&other->e_festivalmuban_rturntable_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_rturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_rturntable_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_rturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_rturntable_recharge::kMIdFieldNumber;
const int E_FestivalMuban_rturntable_recharge::kMGroupidFieldNumber;
const int E_FestivalMuban_rturntable_recharge::kMRechargeidFieldNumber;
const int E_FestivalMuban_rturntable_recharge::kMLimitFieldNumber;
const int E_FestivalMuban_rturntable_recharge::kMRatiogroupidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_rturntable_recharge::E_FestivalMuban_rturntable_recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_rturntable_recharge::InitAsDefaultInstance() {
}

E_FestivalMuban_rturntable_recharge::E_FestivalMuban_rturntable_recharge(const E_FestivalMuban_rturntable_recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable_recharge::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_rechargeid_ = 0;
  m_limit_ = 0;
  m_ratiogroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_rturntable_recharge::~E_FestivalMuban_rturntable_recharge() {
  SharedDtor();
}

void E_FestivalMuban_rturntable_recharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_rturntable_recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable_recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_rturntable_recharge_descriptor_;
}

const E_FestivalMuban_rturntable_recharge& E_FestivalMuban_rturntable_recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_rturntable_recharge* E_FestivalMuban_rturntable_recharge::default_instance_ = NULL;

E_FestivalMuban_rturntable_recharge* E_FestivalMuban_rturntable_recharge::New() const {
  return new E_FestivalMuban_rturntable_recharge;
}

void E_FestivalMuban_rturntable_recharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_rechargeid_ = 0;
    m_limit_ = 0;
    m_ratiogroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_rturntable_recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rechargeid;
        break;
      }

      // optional int32 m_rechargeid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_limit;
        break;
      }

      // optional int32 m_limit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_limit_)));
          set_has_m_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_ratiogroupid;
        break;
      }

      // optional int32 m_ratiogroupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratiogroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratiogroupid_)));
          set_has_m_ratiogroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_rturntable_recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_rechargeid = 3;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rechargeid(), output);
  }

  // optional int32 m_limit = 4;
  if (has_m_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_limit(), output);
  }

  // optional int32 m_ratiogroupid = 5;
  if (has_m_ratiogroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_ratiogroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_rturntable_recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_rechargeid = 3;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rechargeid(), target);
  }

  // optional int32 m_limit = 4;
  if (has_m_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_limit(), target);
  }

  // optional int32 m_ratiogroupid = 5;
  if (has_m_ratiogroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_ratiogroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_rturntable_recharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_rechargeid = 3;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

    // optional int32 m_limit = 4;
    if (has_m_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_limit());
    }

    // optional int32 m_ratiogroupid = 5;
    if (has_m_ratiogroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratiogroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_rturntable_recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_rturntable_recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_rturntable_recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_rturntable_recharge::MergeFrom(const E_FestivalMuban_rturntable_recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
    if (from.has_m_limit()) {
      set_m_limit(from.m_limit());
    }
    if (from.has_m_ratiogroupid()) {
      set_m_ratiogroupid(from.m_ratiogroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_rturntable_recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable_recharge::CopyFrom(const E_FestivalMuban_rturntable_recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_rturntable_recharge::IsInitialized() const {

  return true;
}

void E_FestivalMuban_rturntable_recharge::Swap(E_FestivalMuban_rturntable_recharge* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(m_limit_, other->m_limit_);
    std::swap(m_ratiogroupid_, other->m_ratiogroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_rturntable_recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_rturntable_recharge_descriptor_;
  metadata.reflection = E_FestivalMuban_rturntable_recharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_rturntable_recharge::kEFestivalMubanRturntableRechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_rturntable_recharge::Sheet_FestivalMuban_rturntable_recharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_rturntable_recharge::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_rturntable_recharge::Sheet_FestivalMuban_rturntable_recharge(const Sheet_FestivalMuban_rturntable_recharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable_recharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_rturntable_recharge::~Sheet_FestivalMuban_rturntable_recharge() {
  SharedDtor();
}

void Sheet_FestivalMuban_rturntable_recharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_rturntable_recharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable_recharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_rturntable_recharge_descriptor_;
}

const Sheet_FestivalMuban_rturntable_recharge& Sheet_FestivalMuban_rturntable_recharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_rturntable_recharge* Sheet_FestivalMuban_rturntable_recharge::default_instance_ = NULL;

Sheet_FestivalMuban_rturntable_recharge* Sheet_FestivalMuban_rturntable_recharge::New() const {
  return new Sheet_FestivalMuban_rturntable_recharge;
}

void Sheet_FestivalMuban_rturntable_recharge::Clear() {
  e_festivalmuban_rturntable_recharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_rturntable_recharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_rturntable_recharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_rturntable_recharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_rturntable_recharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_rturntable_recharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_rturntable_recharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_rturntable_recharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_rturntable_recharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_rturntable_recharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge E_FestivalMuban_rturntable_recharge_List = 1;
  total_size += 1 * this->e_festivalmuban_rturntable_recharge_list_size();
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_rturntable_recharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_rturntable_recharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_rturntable_recharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_rturntable_recharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_rturntable_recharge::MergeFrom(const Sheet_FestivalMuban_rturntable_recharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_rturntable_recharge_list_.MergeFrom(from.e_festivalmuban_rturntable_recharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_rturntable_recharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable_recharge::CopyFrom(const Sheet_FestivalMuban_rturntable_recharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_rturntable_recharge::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_rturntable_recharge::Swap(Sheet_FestivalMuban_rturntable_recharge* other) {
  if (other != this) {
    e_festivalmuban_rturntable_recharge_list_.Swap(&other->e_festivalmuban_rturntable_recharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_rturntable_recharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_rturntable_recharge_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_rturntable_recharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_rturntable_recharge_ratio::kMIdFieldNumber;
const int E_FestivalMuban_rturntable_recharge_ratio::kMGroupidFieldNumber;
const int E_FestivalMuban_rturntable_recharge_ratio::kMRatioFieldNumber;
const int E_FestivalMuban_rturntable_recharge_ratio::kMWeightFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_rturntable_recharge_ratio::E_FestivalMuban_rturntable_recharge_ratio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_rturntable_recharge_ratio::InitAsDefaultInstance() {
}

E_FestivalMuban_rturntable_recharge_ratio::E_FestivalMuban_rturntable_recharge_ratio(const E_FestivalMuban_rturntable_recharge_ratio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable_recharge_ratio::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_ratio_ = 0;
  m_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_rturntable_recharge_ratio::~E_FestivalMuban_rturntable_recharge_ratio() {
  SharedDtor();
}

void E_FestivalMuban_rturntable_recharge_ratio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_rturntable_recharge_ratio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_rturntable_recharge_ratio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_rturntable_recharge_ratio_descriptor_;
}

const E_FestivalMuban_rturntable_recharge_ratio& E_FestivalMuban_rturntable_recharge_ratio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_rturntable_recharge_ratio* E_FestivalMuban_rturntable_recharge_ratio::default_instance_ = NULL;

E_FestivalMuban_rturntable_recharge_ratio* E_FestivalMuban_rturntable_recharge_ratio::New() const {
  return new E_FestivalMuban_rturntable_recharge_ratio;
}

void E_FestivalMuban_rturntable_recharge_ratio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_ratio_ = 0;
    m_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_rturntable_recharge_ratio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_ratio;
        break;
      }

      // optional int32 m_ratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ratio_)));
          set_has_m_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_weight;
        break;
      }

      // optional int32 m_weight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weight_)));
          set_has_m_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_rturntable_recharge_ratio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_ratio = 3;
  if (has_m_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ratio(), output);
  }

  // optional int32 m_weight = 4;
  if (has_m_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_rturntable_recharge_ratio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_ratio = 3;
  if (has_m_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_ratio(), target);
  }

  // optional int32 m_weight = 4;
  if (has_m_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_rturntable_recharge_ratio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_ratio = 3;
    if (has_m_ratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ratio());
    }

    // optional int32 m_weight = 4;
    if (has_m_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_rturntable_recharge_ratio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_rturntable_recharge_ratio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_rturntable_recharge_ratio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_rturntable_recharge_ratio::MergeFrom(const E_FestivalMuban_rturntable_recharge_ratio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_ratio()) {
      set_m_ratio(from.m_ratio());
    }
    if (from.has_m_weight()) {
      set_m_weight(from.m_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_rturntable_recharge_ratio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_rturntable_recharge_ratio::CopyFrom(const E_FestivalMuban_rturntable_recharge_ratio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_rturntable_recharge_ratio::IsInitialized() const {

  return true;
}

void E_FestivalMuban_rturntable_recharge_ratio::Swap(E_FestivalMuban_rturntable_recharge_ratio* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_ratio_, other->m_ratio_);
    std::swap(m_weight_, other->m_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_rturntable_recharge_ratio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_rturntable_recharge_ratio_descriptor_;
  metadata.reflection = E_FestivalMuban_rturntable_recharge_ratio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_rturntable_recharge_ratio::kEFestivalMubanRturntableRechargeRatioListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_rturntable_recharge_ratio::Sheet_FestivalMuban_rturntable_recharge_ratio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_rturntable_recharge_ratio::Sheet_FestivalMuban_rturntable_recharge_ratio(const Sheet_FestivalMuban_rturntable_recharge_ratio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_rturntable_recharge_ratio::~Sheet_FestivalMuban_rturntable_recharge_ratio() {
  SharedDtor();
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_rturntable_recharge_ratio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_;
}

const Sheet_FestivalMuban_rturntable_recharge_ratio& Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_rturntable_recharge_ratio* Sheet_FestivalMuban_rturntable_recharge_ratio::default_instance_ = NULL;

Sheet_FestivalMuban_rturntable_recharge_ratio* Sheet_FestivalMuban_rturntable_recharge_ratio::New() const {
  return new Sheet_FestivalMuban_rturntable_recharge_ratio;
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::Clear() {
  e_festivalmuban_rturntable_recharge_ratio_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_rturntable_recharge_ratio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_rturntable_recharge_ratio_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_rturntable_recharge_ratio_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_rturntable_recharge_ratio_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_ratio_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_rturntable_recharge_ratio_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_rturntable_recharge_ratio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_ratio_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_rturntable_recharge_ratio_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_rturntable_recharge_ratio::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_rturntable_recharge_ratio E_FestivalMuban_rturntable_recharge_ratio_List = 1;
  total_size += 1 * this->e_festivalmuban_rturntable_recharge_ratio_list_size();
  for (int i = 0; i < this->e_festivalmuban_rturntable_recharge_ratio_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_rturntable_recharge_ratio_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_rturntable_recharge_ratio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_rturntable_recharge_ratio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::MergeFrom(const Sheet_FestivalMuban_rturntable_recharge_ratio& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_rturntable_recharge_ratio_list_.MergeFrom(from.e_festivalmuban_rturntable_recharge_ratio_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::CopyFrom(const Sheet_FestivalMuban_rturntable_recharge_ratio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_rturntable_recharge_ratio::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_rturntable_recharge_ratio::Swap(Sheet_FestivalMuban_rturntable_recharge_ratio* other) {
  if (other != this) {
    e_festivalmuban_rturntable_recharge_ratio_list_.Swap(&other->e_festivalmuban_rturntable_recharge_ratio_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_rturntable_recharge_ratio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_rturntable_recharge_ratio_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_rturntable_recharge_ratio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_drawpize::kMIdFieldNumber;
const int E_FestivalMuban_drawpize::kMPeriodFieldNumber;
const int E_FestivalMuban_drawpize::kMCostidFieldNumber;
const int E_FestivalMuban_drawpize::kMCostnumFieldNumber;
const int E_FestivalMuban_drawpize::kMPoolgroupidFieldNumber;
const int E_FestivalMuban_drawpize::kMTotalgroupidFieldNumber;
const int E_FestivalMuban_drawpize::kMSeverlimitFieldNumber;
const int E_FestivalMuban_drawpize::kMProtecttimeFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_drawpize::E_FestivalMuban_drawpize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_drawpize::InitAsDefaultInstance() {
}

E_FestivalMuban_drawpize::E_FestivalMuban_drawpize(const E_FestivalMuban_drawpize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_costid_ = GOOGLE_LONGLONG(0);
  m_costnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_poolgroupid_ = 0;
  m_totalgroupid_ = 0;
  m_severlimit_ = 0;
  m_protecttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_drawpize::~E_FestivalMuban_drawpize() {
  SharedDtor();
}

void E_FestivalMuban_drawpize::SharedDtor() {
  if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_costnum_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_drawpize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_drawpize_descriptor_;
}

const E_FestivalMuban_drawpize& E_FestivalMuban_drawpize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_drawpize* E_FestivalMuban_drawpize::default_instance_ = NULL;

E_FestivalMuban_drawpize* E_FestivalMuban_drawpize::New() const {
  return new E_FestivalMuban_drawpize;
}

void E_FestivalMuban_drawpize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_costid_ = GOOGLE_LONGLONG(0);
    if (has_m_costnum()) {
      if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
        m_costnum_->clear();
      }
    }
    m_poolgroupid_ = 0;
    m_totalgroupid_ = 0;
    m_severlimit_ = 0;
    m_protecttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_drawpize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_costid;
        break;
      }

      // optional int64 m_costid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_costid_)));
          set_has_m_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_costnum;
        break;
      }

      // optional string m_costnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_costnum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_costnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_costnum().data(), this->m_costnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_poolgroupid;
        break;
      }

      // optional int32 m_poolgroupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_poolgroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_poolgroupid_)));
          set_has_m_poolgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_totalgroupid;
        break;
      }

      // optional int32 m_totalgroupid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalgroupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalgroupid_)));
          set_has_m_totalgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_severlimit;
        break;
      }

      // optional int32 m_severlimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_severlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_severlimit_)));
          set_has_m_severlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_protecttime;
        break;
      }

      // optional int32 m_protecttime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_protecttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_protecttime_)));
          set_has_m_protecttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_drawpize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int64 m_costid = 3;
  if (has_m_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_costid(), output);
  }

  // optional string m_costnum = 4;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_costnum().data(), this->m_costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_costnum(), output);
  }

  // optional int32 m_poolgroupid = 5;
  if (has_m_poolgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_poolgroupid(), output);
  }

  // optional int32 m_totalgroupid = 6;
  if (has_m_totalgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_totalgroupid(), output);
  }

  // optional int32 m_severlimit = 7;
  if (has_m_severlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_severlimit(), output);
  }

  // optional int32 m_protecttime = 8;
  if (has_m_protecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_protecttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_drawpize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int64 m_costid = 3;
  if (has_m_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_costid(), target);
  }

  // optional string m_costnum = 4;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_costnum().data(), this->m_costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_costnum(), target);
  }

  // optional int32 m_poolgroupid = 5;
  if (has_m_poolgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_poolgroupid(), target);
  }

  // optional int32 m_totalgroupid = 6;
  if (has_m_totalgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_totalgroupid(), target);
  }

  // optional int32 m_severlimit = 7;
  if (has_m_severlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_severlimit(), target);
  }

  // optional int32 m_protecttime = 8;
  if (has_m_protecttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_protecttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_drawpize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int64 m_costid = 3;
    if (has_m_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_costid());
    }

    // optional string m_costnum = 4;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_costnum());
    }

    // optional int32 m_poolgroupid = 5;
    if (has_m_poolgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_poolgroupid());
    }

    // optional int32 m_totalgroupid = 6;
    if (has_m_totalgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalgroupid());
    }

    // optional int32 m_severlimit = 7;
    if (has_m_severlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_severlimit());
    }

    // optional int32 m_protecttime = 8;
    if (has_m_protecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_protecttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_drawpize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_drawpize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_drawpize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_drawpize::MergeFrom(const E_FestivalMuban_drawpize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_costid()) {
      set_m_costid(from.m_costid());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
    if (from.has_m_poolgroupid()) {
      set_m_poolgroupid(from.m_poolgroupid());
    }
    if (from.has_m_totalgroupid()) {
      set_m_totalgroupid(from.m_totalgroupid());
    }
    if (from.has_m_severlimit()) {
      set_m_severlimit(from.m_severlimit());
    }
    if (from.has_m_protecttime()) {
      set_m_protecttime(from.m_protecttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_drawpize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize::CopyFrom(const E_FestivalMuban_drawpize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_drawpize::IsInitialized() const {

  return true;
}

void E_FestivalMuban_drawpize::Swap(E_FestivalMuban_drawpize* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_costid_, other->m_costid_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(m_poolgroupid_, other->m_poolgroupid_);
    std::swap(m_totalgroupid_, other->m_totalgroupid_);
    std::swap(m_severlimit_, other->m_severlimit_);
    std::swap(m_protecttime_, other->m_protecttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_drawpize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_drawpize_descriptor_;
  metadata.reflection = E_FestivalMuban_drawpize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_drawpize::kEFestivalMubanDrawpizeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_drawpize::Sheet_FestivalMuban_drawpize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_drawpize::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_drawpize::Sheet_FestivalMuban_drawpize(const Sheet_FestivalMuban_drawpize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_drawpize::~Sheet_FestivalMuban_drawpize() {
  SharedDtor();
}

void Sheet_FestivalMuban_drawpize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_drawpize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_drawpize_descriptor_;
}

const Sheet_FestivalMuban_drawpize& Sheet_FestivalMuban_drawpize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_drawpize* Sheet_FestivalMuban_drawpize::default_instance_ = NULL;

Sheet_FestivalMuban_drawpize* Sheet_FestivalMuban_drawpize::New() const {
  return new Sheet_FestivalMuban_drawpize;
}

void Sheet_FestivalMuban_drawpize::Clear() {
  e_festivalmuban_drawpize_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_drawpize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_drawpize_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_drawpize_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_drawpize_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_drawpize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_drawpize_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_drawpize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_drawpize_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_drawpize::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_drawpize E_FestivalMuban_drawpize_List = 1;
  total_size += 1 * this->e_festivalmuban_drawpize_list_size();
  for (int i = 0; i < this->e_festivalmuban_drawpize_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_drawpize_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_drawpize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_drawpize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_drawpize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_drawpize::MergeFrom(const Sheet_FestivalMuban_drawpize& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_drawpize_list_.MergeFrom(from.e_festivalmuban_drawpize_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_drawpize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize::CopyFrom(const Sheet_FestivalMuban_drawpize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_drawpize::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_drawpize::Swap(Sheet_FestivalMuban_drawpize* other) {
  if (other != this) {
    e_festivalmuban_drawpize_list_.Swap(&other->e_festivalmuban_drawpize_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_drawpize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_drawpize_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_drawpize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_drawpize_pool::kMIdFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMGroupidFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMItemidFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMNumFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMProfFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMWeightsFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMProweightsFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMTimelimitFieldNumber;
const int E_FestivalMuban_drawpize_pool::kMRecordFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_drawpize_pool::E_FestivalMuban_drawpize_pool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_drawpize_pool::InitAsDefaultInstance() {
}

E_FestivalMuban_drawpize_pool::E_FestivalMuban_drawpize_pool(const E_FestivalMuban_drawpize_pool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize_pool::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_num_ = 0;
  m_prof_ = 0;
  m_weights_ = 0;
  m_proweights_ = 0;
  m_timelimit_ = 0;
  m_record_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_drawpize_pool::~E_FestivalMuban_drawpize_pool() {
  SharedDtor();
}

void E_FestivalMuban_drawpize_pool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_drawpize_pool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize_pool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_drawpize_pool_descriptor_;
}

const E_FestivalMuban_drawpize_pool& E_FestivalMuban_drawpize_pool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_drawpize_pool* E_FestivalMuban_drawpize_pool::default_instance_ = NULL;

E_FestivalMuban_drawpize_pool* E_FestivalMuban_drawpize_pool::New() const {
  return new E_FestivalMuban_drawpize_pool;
}

void E_FestivalMuban_drawpize_pool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_itemid_ = GOOGLE_LONGLONG(0);
    m_num_ = 0;
    m_prof_ = 0;
    m_weights_ = 0;
    m_proweights_ = 0;
    m_timelimit_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_record_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_drawpize_pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemid;
        break;
      }

      // optional int64 m_itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_prof;
        break;
      }

      // optional int32 m_prof = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prof_)));
          set_has_m_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_weights;
        break;
      }

      // optional int32 m_weights = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weights_)));
          set_has_m_weights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_proweights;
        break;
      }

      // optional int32 m_proweights = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_proweights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_proweights_)));
          set_has_m_proweights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_timelimit;
        break;
      }

      // optional int32 m_timelimit = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_timelimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_timelimit_)));
          set_has_m_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_record;
        break;
      }

      // optional int32 m_record = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_record_)));
          set_has_m_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_drawpize_pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int64 m_itemid = 3;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_itemid(), output);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_num(), output);
  }

  // optional int32 m_prof = 5;
  if (has_m_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_prof(), output);
  }

  // optional int32 m_weights = 6;
  if (has_m_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_weights(), output);
  }

  // optional int32 m_proweights = 7;
  if (has_m_proweights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_proweights(), output);
  }

  // optional int32 m_timelimit = 8;
  if (has_m_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_timelimit(), output);
  }

  // optional int32 m_record = 9;
  if (has_m_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_drawpize_pool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int64 m_itemid = 3;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_itemid(), target);
  }

  // optional int32 m_num = 4;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_num(), target);
  }

  // optional int32 m_prof = 5;
  if (has_m_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_prof(), target);
  }

  // optional int32 m_weights = 6;
  if (has_m_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_weights(), target);
  }

  // optional int32 m_proweights = 7;
  if (has_m_proweights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_proweights(), target);
  }

  // optional int32 m_timelimit = 8;
  if (has_m_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_timelimit(), target);
  }

  // optional int32 m_record = 9;
  if (has_m_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_drawpize_pool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int64 m_itemid = 3;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional int32 m_num = 4;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_prof = 5;
    if (has_m_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prof());
    }

    // optional int32 m_weights = 6;
    if (has_m_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weights());
    }

    // optional int32 m_proweights = 7;
    if (has_m_proweights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_proweights());
    }

    // optional int32 m_timelimit = 8;
    if (has_m_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_timelimit());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_record = 9;
    if (has_m_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_drawpize_pool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_drawpize_pool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_drawpize_pool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_drawpize_pool::MergeFrom(const E_FestivalMuban_drawpize_pool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_prof()) {
      set_m_prof(from.m_prof());
    }
    if (from.has_m_weights()) {
      set_m_weights(from.m_weights());
    }
    if (from.has_m_proweights()) {
      set_m_proweights(from.m_proweights());
    }
    if (from.has_m_timelimit()) {
      set_m_timelimit(from.m_timelimit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_record()) {
      set_m_record(from.m_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_drawpize_pool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize_pool::CopyFrom(const E_FestivalMuban_drawpize_pool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_drawpize_pool::IsInitialized() const {

  return true;
}

void E_FestivalMuban_drawpize_pool::Swap(E_FestivalMuban_drawpize_pool* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_prof_, other->m_prof_);
    std::swap(m_weights_, other->m_weights_);
    std::swap(m_proweights_, other->m_proweights_);
    std::swap(m_timelimit_, other->m_timelimit_);
    std::swap(m_record_, other->m_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_drawpize_pool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_drawpize_pool_descriptor_;
  metadata.reflection = E_FestivalMuban_drawpize_pool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_drawpize_pool::kEFestivalMubanDrawpizePoolListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_drawpize_pool::Sheet_FestivalMuban_drawpize_pool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_drawpize_pool::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_drawpize_pool::Sheet_FestivalMuban_drawpize_pool(const Sheet_FestivalMuban_drawpize_pool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize_pool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_drawpize_pool::~Sheet_FestivalMuban_drawpize_pool() {
  SharedDtor();
}

void Sheet_FestivalMuban_drawpize_pool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_drawpize_pool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize_pool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_drawpize_pool_descriptor_;
}

const Sheet_FestivalMuban_drawpize_pool& Sheet_FestivalMuban_drawpize_pool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_drawpize_pool* Sheet_FestivalMuban_drawpize_pool::default_instance_ = NULL;

Sheet_FestivalMuban_drawpize_pool* Sheet_FestivalMuban_drawpize_pool::New() const {
  return new Sheet_FestivalMuban_drawpize_pool;
}

void Sheet_FestivalMuban_drawpize_pool::Clear() {
  e_festivalmuban_drawpize_pool_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_drawpize_pool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_drawpize_pool_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_drawpize_pool_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_drawpize_pool_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_drawpize_pool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_pool_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_drawpize_pool_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_drawpize_pool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_pool_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_drawpize_pool_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_drawpize_pool::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_drawpize_pool E_FestivalMuban_drawpize_pool_List = 1;
  total_size += 1 * this->e_festivalmuban_drawpize_pool_list_size();
  for (int i = 0; i < this->e_festivalmuban_drawpize_pool_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_drawpize_pool_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_drawpize_pool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_drawpize_pool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_drawpize_pool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_drawpize_pool::MergeFrom(const Sheet_FestivalMuban_drawpize_pool& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_drawpize_pool_list_.MergeFrom(from.e_festivalmuban_drawpize_pool_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_drawpize_pool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize_pool::CopyFrom(const Sheet_FestivalMuban_drawpize_pool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_drawpize_pool::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_drawpize_pool::Swap(Sheet_FestivalMuban_drawpize_pool* other) {
  if (other != this) {
    e_festivalmuban_drawpize_pool_list_.Swap(&other->e_festivalmuban_drawpize_pool_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_drawpize_pool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_drawpize_pool_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_drawpize_pool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_drawpize_total::kMIdFieldNumber;
const int E_FestivalMuban_drawpize_total::kMGroupidFieldNumber;
const int E_FestivalMuban_drawpize_total::kMValueFieldNumber;
const int E_FestivalMuban_drawpize_total::kMItemidFieldNumber;
const int E_FestivalMuban_drawpize_total::kMNumFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_drawpize_total::E_FestivalMuban_drawpize_total()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_drawpize_total::InitAsDefaultInstance() {
}

E_FestivalMuban_drawpize_total::E_FestivalMuban_drawpize_total(const E_FestivalMuban_drawpize_total& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize_total::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_value_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_drawpize_total::~E_FestivalMuban_drawpize_total() {
  SharedDtor();
}

void E_FestivalMuban_drawpize_total::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_drawpize_total::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_drawpize_total::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_drawpize_total_descriptor_;
}

const E_FestivalMuban_drawpize_total& E_FestivalMuban_drawpize_total::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_drawpize_total* E_FestivalMuban_drawpize_total::default_instance_ = NULL;

E_FestivalMuban_drawpize_total* E_FestivalMuban_drawpize_total::New() const {
  return new E_FestivalMuban_drawpize_total;
}

void E_FestivalMuban_drawpize_total::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_value_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_drawpize_total::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_drawpize_total::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_drawpize_total::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_drawpize_total::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_drawpize_total::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_drawpize_total* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_drawpize_total*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_drawpize_total::MergeFrom(const E_FestivalMuban_drawpize_total& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_drawpize_total::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_drawpize_total::CopyFrom(const E_FestivalMuban_drawpize_total& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_drawpize_total::IsInitialized() const {

  return true;
}

void E_FestivalMuban_drawpize_total::Swap(E_FestivalMuban_drawpize_total* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_drawpize_total::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_drawpize_total_descriptor_;
  metadata.reflection = E_FestivalMuban_drawpize_total_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_drawpize_total::kEFestivalMubanDrawpizeTotalListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_drawpize_total::Sheet_FestivalMuban_drawpize_total()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_drawpize_total::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_drawpize_total::Sheet_FestivalMuban_drawpize_total(const Sheet_FestivalMuban_drawpize_total& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize_total::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_drawpize_total::~Sheet_FestivalMuban_drawpize_total() {
  SharedDtor();
}

void Sheet_FestivalMuban_drawpize_total::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_drawpize_total::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_drawpize_total::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_drawpize_total_descriptor_;
}

const Sheet_FestivalMuban_drawpize_total& Sheet_FestivalMuban_drawpize_total::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_drawpize_total* Sheet_FestivalMuban_drawpize_total::default_instance_ = NULL;

Sheet_FestivalMuban_drawpize_total* Sheet_FestivalMuban_drawpize_total::New() const {
  return new Sheet_FestivalMuban_drawpize_total;
}

void Sheet_FestivalMuban_drawpize_total::Clear() {
  e_festivalmuban_drawpize_total_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_drawpize_total::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_drawpize_total_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_drawpize_total_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_drawpize_total_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_drawpize_total::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_total_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_drawpize_total_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_drawpize_total::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
  for (int i = 0; i < this->e_festivalmuban_drawpize_total_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_drawpize_total_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_drawpize_total::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_drawpize_total E_FestivalMuban_drawpize_total_List = 1;
  total_size += 1 * this->e_festivalmuban_drawpize_total_list_size();
  for (int i = 0; i < this->e_festivalmuban_drawpize_total_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_drawpize_total_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_drawpize_total::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_drawpize_total* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_drawpize_total*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_drawpize_total::MergeFrom(const Sheet_FestivalMuban_drawpize_total& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_drawpize_total_list_.MergeFrom(from.e_festivalmuban_drawpize_total_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_drawpize_total::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_drawpize_total::CopyFrom(const Sheet_FestivalMuban_drawpize_total& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_drawpize_total::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_drawpize_total::Swap(Sheet_FestivalMuban_drawpize_total* other) {
  if (other != this) {
    e_festivalmuban_drawpize_total_list_.Swap(&other->e_festivalmuban_drawpize_total_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_drawpize_total::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_drawpize_total_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_drawpize_total_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_totalrecharge::kMIdFieldNumber;
const int E_FestivalMuban_totalrecharge::kMAFieldNumber;
const int E_FestivalMuban_totalrecharge::kMValueFieldNumber;
const int E_FestivalMuban_totalrecharge::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_totalrecharge::E_FestivalMuban_totalrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_totalrecharge::InitAsDefaultInstance() {
}

E_FestivalMuban_totalrecharge::E_FestivalMuban_totalrecharge(const E_FestivalMuban_totalrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_totalrecharge::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_a_ = 0;
  m_value_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_totalrecharge::~E_FestivalMuban_totalrecharge() {
  SharedDtor();
}

void E_FestivalMuban_totalrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_totalrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_totalrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_totalrecharge_descriptor_;
}

const E_FestivalMuban_totalrecharge& E_FestivalMuban_totalrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_totalrecharge* E_FestivalMuban_totalrecharge::default_instance_ = NULL;

E_FestivalMuban_totalrecharge* E_FestivalMuban_totalrecharge::New() const {
  return new E_FestivalMuban_totalrecharge;
}

void E_FestivalMuban_totalrecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_a_ = 0;
    m_value_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_totalrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_a;
        break;
      }

      // optional int32 m_a = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_a_)));
          set_has_m_a();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_totalrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_a = 2;
  if (has_m_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_a(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_totalrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_a = 2;
  if (has_m_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_a(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_totalrecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_a = 2;
    if (has_m_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_a());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_totalrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_totalrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_totalrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_totalrecharge::MergeFrom(const E_FestivalMuban_totalrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_a()) {
      set_m_a(from.m_a());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_totalrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_totalrecharge::CopyFrom(const E_FestivalMuban_totalrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_totalrecharge::IsInitialized() const {

  return true;
}

void E_FestivalMuban_totalrecharge::Swap(E_FestivalMuban_totalrecharge* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_a_, other->m_a_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_totalrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_totalrecharge_descriptor_;
  metadata.reflection = E_FestivalMuban_totalrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_totalrecharge::kEFestivalMubanTotalrechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_totalrecharge::Sheet_FestivalMuban_totalrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_totalrecharge::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_totalrecharge::Sheet_FestivalMuban_totalrecharge(const Sheet_FestivalMuban_totalrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_totalrecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_totalrecharge::~Sheet_FestivalMuban_totalrecharge() {
  SharedDtor();
}

void Sheet_FestivalMuban_totalrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_totalrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_totalrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_totalrecharge_descriptor_;
}

const Sheet_FestivalMuban_totalrecharge& Sheet_FestivalMuban_totalrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_totalrecharge* Sheet_FestivalMuban_totalrecharge::default_instance_ = NULL;

Sheet_FestivalMuban_totalrecharge* Sheet_FestivalMuban_totalrecharge::New() const {
  return new Sheet_FestivalMuban_totalrecharge;
}

void Sheet_FestivalMuban_totalrecharge::Clear() {
  e_festivalmuban_totalrecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_totalrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_totalrecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_totalrecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_totalrecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_totalrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_totalrecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_totalrecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_totalrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_totalrecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_totalrecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_totalrecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_totalrecharge E_FestivalMuban_totalrecharge_List = 1;
  total_size += 1 * this->e_festivalmuban_totalrecharge_list_size();
  for (int i = 0; i < this->e_festivalmuban_totalrecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_totalrecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_totalrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_totalrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_totalrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_totalrecharge::MergeFrom(const Sheet_FestivalMuban_totalrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_totalrecharge_list_.MergeFrom(from.e_festivalmuban_totalrecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_totalrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_totalrecharge::CopyFrom(const Sheet_FestivalMuban_totalrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_totalrecharge::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_totalrecharge::Swap(Sheet_FestivalMuban_totalrecharge* other) {
  if (other != this) {
    e_festivalmuban_totalrecharge_list_.Swap(&other->e_festivalmuban_totalrecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_totalrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_totalrecharge_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_totalrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_dailytotalrecharge::kMIdFieldNumber;
const int E_FestivalMuban_dailytotalrecharge::kMPeriodFieldNumber;
const int E_FestivalMuban_dailytotalrecharge::kMValueFieldNumber;
const int E_FestivalMuban_dailytotalrecharge::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_dailytotalrecharge::E_FestivalMuban_dailytotalrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_dailytotalrecharge::InitAsDefaultInstance() {
}

E_FestivalMuban_dailytotalrecharge::E_FestivalMuban_dailytotalrecharge(const E_FestivalMuban_dailytotalrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_dailytotalrecharge::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_value_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_dailytotalrecharge::~E_FestivalMuban_dailytotalrecharge() {
  SharedDtor();
}

void E_FestivalMuban_dailytotalrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_dailytotalrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_dailytotalrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_dailytotalrecharge_descriptor_;
}

const E_FestivalMuban_dailytotalrecharge& E_FestivalMuban_dailytotalrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_dailytotalrecharge* E_FestivalMuban_dailytotalrecharge::default_instance_ = NULL;

E_FestivalMuban_dailytotalrecharge* E_FestivalMuban_dailytotalrecharge::New() const {
  return new E_FestivalMuban_dailytotalrecharge;
}

void E_FestivalMuban_dailytotalrecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_value_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_dailytotalrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_dailytotalrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_value(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_dailytotalrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_value = 3;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_value(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_dailytotalrecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_value = 3;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_dailytotalrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_dailytotalrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_dailytotalrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_dailytotalrecharge::MergeFrom(const E_FestivalMuban_dailytotalrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_dailytotalrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_dailytotalrecharge::CopyFrom(const E_FestivalMuban_dailytotalrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_dailytotalrecharge::IsInitialized() const {

  return true;
}

void E_FestivalMuban_dailytotalrecharge::Swap(E_FestivalMuban_dailytotalrecharge* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_dailytotalrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_dailytotalrecharge_descriptor_;
  metadata.reflection = E_FestivalMuban_dailytotalrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_dailytotalrecharge::kEFestivalMubanDailytotalrechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_dailytotalrecharge::Sheet_FestivalMuban_dailytotalrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_dailytotalrecharge::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_dailytotalrecharge::Sheet_FestivalMuban_dailytotalrecharge(const Sheet_FestivalMuban_dailytotalrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_dailytotalrecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_dailytotalrecharge::~Sheet_FestivalMuban_dailytotalrecharge() {
  SharedDtor();
}

void Sheet_FestivalMuban_dailytotalrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_dailytotalrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_dailytotalrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_dailytotalrecharge_descriptor_;
}

const Sheet_FestivalMuban_dailytotalrecharge& Sheet_FestivalMuban_dailytotalrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_dailytotalrecharge* Sheet_FestivalMuban_dailytotalrecharge::default_instance_ = NULL;

Sheet_FestivalMuban_dailytotalrecharge* Sheet_FestivalMuban_dailytotalrecharge::New() const {
  return new Sheet_FestivalMuban_dailytotalrecharge;
}

void Sheet_FestivalMuban_dailytotalrecharge::Clear() {
  e_festivalmuban_dailytotalrecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_dailytotalrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_dailytotalrecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_dailytotalrecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_dailytotalrecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_dailytotalrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_dailytotalrecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_dailytotalrecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_dailytotalrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
  for (int i = 0; i < this->e_festivalmuban_dailytotalrecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_dailytotalrecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_dailytotalrecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_dailytotalrecharge E_FestivalMuban_dailytotalrecharge_List = 1;
  total_size += 1 * this->e_festivalmuban_dailytotalrecharge_list_size();
  for (int i = 0; i < this->e_festivalmuban_dailytotalrecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_dailytotalrecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_dailytotalrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_dailytotalrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_dailytotalrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_dailytotalrecharge::MergeFrom(const Sheet_FestivalMuban_dailytotalrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_dailytotalrecharge_list_.MergeFrom(from.e_festivalmuban_dailytotalrecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_dailytotalrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_dailytotalrecharge::CopyFrom(const Sheet_FestivalMuban_dailytotalrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_dailytotalrecharge::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_dailytotalrecharge::Swap(Sheet_FestivalMuban_dailytotalrecharge* other) {
  if (other != this) {
    e_festivalmuban_dailytotalrecharge_list_.Swap(&other->e_festivalmuban_dailytotalrecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_dailytotalrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_dailytotalrecharge_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_dailytotalrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_play::kMIdFieldNumber;
const int E_FestivalMuban_play::kMPeriodFieldNumber;
const int E_FestivalMuban_play::kMRewardgroupFieldNumber;
const int E_FestivalMuban_play::kMGamegroupFieldNumber;
const int E_FestivalMuban_play::kMOpentimeFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_play::E_FestivalMuban_play()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_play::InitAsDefaultInstance() {
}

E_FestivalMuban_play::E_FestivalMuban_play(const E_FestivalMuban_play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_play::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_period_ = 0;
  m_rewardgroup_ = 0;
  m_gamegroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_play::~E_FestivalMuban_play() {
  SharedDtor();
}

void E_FestivalMuban_play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_play_descriptor_;
}

const E_FestivalMuban_play& E_FestivalMuban_play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_play* E_FestivalMuban_play::default_instance_ = NULL;

E_FestivalMuban_play* E_FestivalMuban_play::New() const {
  return new E_FestivalMuban_play;
}

void E_FestivalMuban_play::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_period_ = 0;
    m_rewardgroup_ = 0;
    m_gamegroup_ = 0;
  }
  m_opentime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_period;
        break;
      }

      // optional int32 m_period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_period_)));
          set_has_m_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_rewardgroup;
        break;
      }

      // optional int32 m_rewardgroup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardgroup_)));
          set_has_m_rewardgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_gamegroup;
        break;
      }

      // optional int32 m_gamegroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gamegroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gamegroup_)));
          set_has_m_gamegroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_opentime;
        break;
      }

      // repeated string m_opentime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_opentime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_opentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_opentime(this->m_opentime_size() - 1).data(),
            this->m_opentime(this->m_opentime_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_opentime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_period(), output);
  }

  // optional int32 m_rewardgroup = 3;
  if (has_m_rewardgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_rewardgroup(), output);
  }

  // optional int32 m_gamegroup = 4;
  if (has_m_gamegroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_gamegroup(), output);
  }

  // repeated string m_opentime = 5;
  for (int i = 0; i < this->m_opentime_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_opentime(i).data(), this->m_opentime(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_opentime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_period = 2;
  if (has_m_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_period(), target);
  }

  // optional int32 m_rewardgroup = 3;
  if (has_m_rewardgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_rewardgroup(), target);
  }

  // optional int32 m_gamegroup = 4;
  if (has_m_gamegroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_gamegroup(), target);
  }

  // repeated string m_opentime = 5;
  for (int i = 0; i < this->m_opentime_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_opentime(i).data(), this->m_opentime(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->m_opentime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_play::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_period = 2;
    if (has_m_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_period());
    }

    // optional int32 m_rewardgroup = 3;
    if (has_m_rewardgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardgroup());
    }

    // optional int32 m_gamegroup = 4;
    if (has_m_gamegroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gamegroup());
    }

  }
  // repeated string m_opentime = 5;
  total_size += 1 * this->m_opentime_size();
  for (int i = 0; i < this->m_opentime_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_opentime(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_play::MergeFrom(const E_FestivalMuban_play& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_opentime_.MergeFrom(from.m_opentime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_period()) {
      set_m_period(from.m_period());
    }
    if (from.has_m_rewardgroup()) {
      set_m_rewardgroup(from.m_rewardgroup());
    }
    if (from.has_m_gamegroup()) {
      set_m_gamegroup(from.m_gamegroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_play::CopyFrom(const E_FestivalMuban_play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_play::IsInitialized() const {

  return true;
}

void E_FestivalMuban_play::Swap(E_FestivalMuban_play* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_period_, other->m_period_);
    std::swap(m_rewardgroup_, other->m_rewardgroup_);
    std::swap(m_gamegroup_, other->m_gamegroup_);
    m_opentime_.Swap(&other->m_opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_play_descriptor_;
  metadata.reflection = E_FestivalMuban_play_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_play::kEFestivalMubanPlayListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_play::Sheet_FestivalMuban_play()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_play::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_play::Sheet_FestivalMuban_play(const Sheet_FestivalMuban_play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_play::~Sheet_FestivalMuban_play() {
  SharedDtor();
}

void Sheet_FestivalMuban_play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_play_descriptor_;
}

const Sheet_FestivalMuban_play& Sheet_FestivalMuban_play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_play* Sheet_FestivalMuban_play::default_instance_ = NULL;

Sheet_FestivalMuban_play* Sheet_FestivalMuban_play::New() const {
  return new Sheet_FestivalMuban_play;
}

void Sheet_FestivalMuban_play::Clear() {
  e_festivalmuban_play_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_play_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_play_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_play_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_play_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_play_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_play::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_play E_FestivalMuban_play_List = 1;
  total_size += 1 * this->e_festivalmuban_play_list_size();
  for (int i = 0; i < this->e_festivalmuban_play_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_play_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_play::MergeFrom(const Sheet_FestivalMuban_play& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_play_list_.MergeFrom(from.e_festivalmuban_play_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play::CopyFrom(const Sheet_FestivalMuban_play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_play::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_play::Swap(Sheet_FestivalMuban_play* other) {
  if (other != this) {
    e_festivalmuban_play_list_.Swap(&other->e_festivalmuban_play_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_play_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_play_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_play_reward::kMIdFieldNumber;
const int E_FestivalMuban_play_reward::kMGroupidFieldNumber;
const int E_FestivalMuban_play_reward::kMPointsFieldNumber;
const int E_FestivalMuban_play_reward::kMBoxidFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_play_reward::E_FestivalMuban_play_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_play_reward::InitAsDefaultInstance() {
}

E_FestivalMuban_play_reward::E_FestivalMuban_play_reward(const E_FestivalMuban_play_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_play_reward::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_points_ = 0;
  m_boxid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_play_reward::~E_FestivalMuban_play_reward() {
  SharedDtor();
}

void E_FestivalMuban_play_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_play_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_play_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_play_reward_descriptor_;
}

const E_FestivalMuban_play_reward& E_FestivalMuban_play_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_play_reward* E_FestivalMuban_play_reward::default_instance_ = NULL;

E_FestivalMuban_play_reward* E_FestivalMuban_play_reward::New() const {
  return new E_FestivalMuban_play_reward;
}

void E_FestivalMuban_play_reward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_points_ = 0;
    m_boxid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_play_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_points;
        break;
      }

      // optional int32 m_points = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_points_)));
          set_has_m_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_play_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_points = 3;
  if (has_m_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_points(), output);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_play_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_points = 3;
  if (has_m_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_points(), target);
  }

  // optional int32 m_boxid = 4;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_play_reward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_points = 3;
    if (has_m_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_points());
    }

    // optional int32 m_boxid = 4;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_play_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_play_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_play_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_play_reward::MergeFrom(const E_FestivalMuban_play_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_points()) {
      set_m_points(from.m_points());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_play_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_play_reward::CopyFrom(const E_FestivalMuban_play_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_play_reward::IsInitialized() const {

  return true;
}

void E_FestivalMuban_play_reward::Swap(E_FestivalMuban_play_reward* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_points_, other->m_points_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_play_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_play_reward_descriptor_;
  metadata.reflection = E_FestivalMuban_play_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_play_reward::kEFestivalMubanPlayRewardListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_play_reward::Sheet_FestivalMuban_play_reward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_play_reward::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_play_reward::Sheet_FestivalMuban_play_reward(const Sheet_FestivalMuban_play_reward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_reward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_play_reward::~Sheet_FestivalMuban_play_reward() {
  SharedDtor();
}

void Sheet_FestivalMuban_play_reward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_play_reward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_reward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_play_reward_descriptor_;
}

const Sheet_FestivalMuban_play_reward& Sheet_FestivalMuban_play_reward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_play_reward* Sheet_FestivalMuban_play_reward::default_instance_ = NULL;

Sheet_FestivalMuban_play_reward* Sheet_FestivalMuban_play_reward::New() const {
  return new Sheet_FestivalMuban_play_reward;
}

void Sheet_FestivalMuban_play_reward::Clear() {
  e_festivalmuban_play_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_play_reward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_play_reward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_play_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_play_reward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_play_reward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_play_reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_play_reward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_play_reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_play_reward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_play_reward E_FestivalMuban_play_reward_List = 1;
  total_size += 1 * this->e_festivalmuban_play_reward_list_size();
  for (int i = 0; i < this->e_festivalmuban_play_reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_play_reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_play_reward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_play_reward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_play_reward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_play_reward::MergeFrom(const Sheet_FestivalMuban_play_reward& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_play_reward_list_.MergeFrom(from.e_festivalmuban_play_reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_play_reward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_reward::CopyFrom(const Sheet_FestivalMuban_play_reward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_play_reward::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_play_reward::Swap(Sheet_FestivalMuban_play_reward* other) {
  if (other != this) {
    e_festivalmuban_play_reward_list_.Swap(&other->e_festivalmuban_play_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_play_reward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_play_reward_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_play_reward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_play_game::kMIdFieldNumber;
const int E_FestivalMuban_play_game::kMGroupidFieldNumber;
const int E_FestivalMuban_play_game::kMOrderFieldNumber;
const int E_FestivalMuban_play_game::kMPlaytypeFieldNumber;
const int E_FestivalMuban_play_game::kMArgFieldNumber;
const int E_FestivalMuban_play_game::kMRewardboxFieldNumber;
const int E_FestivalMuban_play_game::kMPretimeFieldNumber;
const int E_FestivalMuban_play_game::kMPlayargFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_play_game::E_FestivalMuban_play_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_play_game::InitAsDefaultInstance() {
}

E_FestivalMuban_play_game::E_FestivalMuban_play_game(const E_FestivalMuban_play_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_play_game::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_order_ = 0;
  m_playtype_ = 0;
  m_arg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_rewardbox_ = 0;
  m_pretime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_play_game::~E_FestivalMuban_play_game() {
  SharedDtor();
}

void E_FestivalMuban_play_game::SharedDtor() {
  if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
    delete m_arg_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_play_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_play_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_play_game_descriptor_;
}

const E_FestivalMuban_play_game& E_FestivalMuban_play_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_play_game* E_FestivalMuban_play_game::default_instance_ = NULL;

E_FestivalMuban_play_game* E_FestivalMuban_play_game::New() const {
  return new E_FestivalMuban_play_game;
}

void E_FestivalMuban_play_game::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_order_ = 0;
    m_playtype_ = 0;
    if (has_m_arg()) {
      if (m_arg_ != &::google::protobuf::internal::kEmptyString) {
        m_arg_->clear();
      }
    }
    m_rewardbox_ = 0;
    m_pretime_ = 0;
  }
  m_playarg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_play_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_order;
        break;
      }

      // optional int32 m_order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_order_)));
          set_has_m_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_playtype;
        break;
      }

      // optional int32 m_playtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playtype_)));
          set_has_m_playtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_arg;
        break;
      }

      // optional string m_arg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_arg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_arg().data(), this->m_arg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_rewardbox;
        break;
      }

      // optional int32 m_rewardbox = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardbox_)));
          set_has_m_rewardbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_pretime;
        break;
      }

      // optional int32 m_pretime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_pretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pretime_)));
          set_has_m_pretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_playarg;
        break;
      }

      // repeated string m_playarg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_playarg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_m_playarg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_playarg(this->m_playarg_size() - 1).data(),
            this->m_playarg(this->m_playarg_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_playarg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_play_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_order(), output);
  }

  // optional int32 m_playtype = 4;
  if (has_m_playtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_playtype(), output);
  }

  // optional string m_arg = 5;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_arg().data(), this->m_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_arg(), output);
  }

  // optional int32 m_rewardbox = 6;
  if (has_m_rewardbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_rewardbox(), output);
  }

  // optional int32 m_pretime = 7;
  if (has_m_pretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_pretime(), output);
  }

  // repeated string m_playarg = 8;
  for (int i = 0; i < this->m_playarg_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->m_playarg(i).data(), this->m_playarg(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->m_playarg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_play_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_order = 3;
  if (has_m_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_order(), target);
  }

  // optional int32 m_playtype = 4;
  if (has_m_playtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_playtype(), target);
  }

  // optional string m_arg = 5;
  if (has_m_arg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_arg().data(), this->m_arg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_arg(), target);
  }

  // optional int32 m_rewardbox = 6;
  if (has_m_rewardbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_rewardbox(), target);
  }

  // optional int32 m_pretime = 7;
  if (has_m_pretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_pretime(), target);
  }

  // repeated string m_playarg = 8;
  for (int i = 0; i < this->m_playarg_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_playarg(i).data(), this->m_playarg(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->m_playarg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_play_game::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_order = 3;
    if (has_m_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_order());
    }

    // optional int32 m_playtype = 4;
    if (has_m_playtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playtype());
    }

    // optional string m_arg = 5;
    if (has_m_arg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_arg());
    }

    // optional int32 m_rewardbox = 6;
    if (has_m_rewardbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardbox());
    }

    // optional int32 m_pretime = 7;
    if (has_m_pretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pretime());
    }

  }
  // repeated string m_playarg = 8;
  total_size += 1 * this->m_playarg_size();
  for (int i = 0; i < this->m_playarg_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->m_playarg(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_play_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_play_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_play_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_play_game::MergeFrom(const E_FestivalMuban_play_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_playarg_.MergeFrom(from.m_playarg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_order()) {
      set_m_order(from.m_order());
    }
    if (from.has_m_playtype()) {
      set_m_playtype(from.m_playtype());
    }
    if (from.has_m_arg()) {
      set_m_arg(from.m_arg());
    }
    if (from.has_m_rewardbox()) {
      set_m_rewardbox(from.m_rewardbox());
    }
    if (from.has_m_pretime()) {
      set_m_pretime(from.m_pretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_play_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_play_game::CopyFrom(const E_FestivalMuban_play_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_play_game::IsInitialized() const {

  return true;
}

void E_FestivalMuban_play_game::Swap(E_FestivalMuban_play_game* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_order_, other->m_order_);
    std::swap(m_playtype_, other->m_playtype_);
    std::swap(m_arg_, other->m_arg_);
    std::swap(m_rewardbox_, other->m_rewardbox_);
    std::swap(m_pretime_, other->m_pretime_);
    m_playarg_.Swap(&other->m_playarg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_play_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_play_game_descriptor_;
  metadata.reflection = E_FestivalMuban_play_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_play_game::kEFestivalMubanPlayGameListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_play_game::Sheet_FestivalMuban_play_game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_play_game::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_play_game::Sheet_FestivalMuban_play_game(const Sheet_FestivalMuban_play_game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_game::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_play_game::~Sheet_FestivalMuban_play_game() {
  SharedDtor();
}

void Sheet_FestivalMuban_play_game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_play_game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_play_game_descriptor_;
}

const Sheet_FestivalMuban_play_game& Sheet_FestivalMuban_play_game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_play_game* Sheet_FestivalMuban_play_game::default_instance_ = NULL;

Sheet_FestivalMuban_play_game* Sheet_FestivalMuban_play_game::New() const {
  return new Sheet_FestivalMuban_play_game;
}

void Sheet_FestivalMuban_play_game::Clear() {
  e_festivalmuban_play_game_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_play_game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_play_game_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_play_game_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_play_game_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_play_game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_game_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_play_game_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_play_game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_game_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_play_game_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_play_game::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_play_game E_FestivalMuban_play_game_List = 1;
  total_size += 1 * this->e_festivalmuban_play_game_list_size();
  for (int i = 0; i < this->e_festivalmuban_play_game_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_play_game_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_play_game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_play_game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_play_game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_play_game::MergeFrom(const Sheet_FestivalMuban_play_game& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_play_game_list_.MergeFrom(from.e_festivalmuban_play_game_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_play_game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_game::CopyFrom(const Sheet_FestivalMuban_play_game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_play_game::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_play_game::Swap(Sheet_FestivalMuban_play_game* other) {
  if (other != this) {
    e_festivalmuban_play_game_list_.Swap(&other->e_festivalmuban_play_game_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_play_game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_play_game_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_play_game_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FestivalMuban_play_score::kMIdFieldNumber;
const int E_FestivalMuban_play_score::kMScoreFieldNumber;
const int E_FestivalMuban_play_score::kMImageFieldNumber;
const int E_FestivalMuban_play_score::kMPointFieldNumber;
#endif  // !_MSC_VER

E_FestivalMuban_play_score::E_FestivalMuban_play_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FestivalMuban_play_score::InitAsDefaultInstance() {
}

E_FestivalMuban_play_score::E_FestivalMuban_play_score(const E_FestivalMuban_play_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FestivalMuban_play_score::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_score_ = 0;
  m_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FestivalMuban_play_score::~E_FestivalMuban_play_score() {
  SharedDtor();
}

void E_FestivalMuban_play_score::SharedDtor() {
  if (m_image_ != &::google::protobuf::internal::kEmptyString) {
    delete m_image_;
  }
  if (this != default_instance_) {
  }
}

void E_FestivalMuban_play_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FestivalMuban_play_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FestivalMuban_play_score_descriptor_;
}

const E_FestivalMuban_play_score& E_FestivalMuban_play_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

E_FestivalMuban_play_score* E_FestivalMuban_play_score::default_instance_ = NULL;

E_FestivalMuban_play_score* E_FestivalMuban_play_score::New() const {
  return new E_FestivalMuban_play_score;
}

void E_FestivalMuban_play_score::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_score_ = 0;
    if (has_m_image()) {
      if (m_image_ != &::google::protobuf::internal::kEmptyString) {
        m_image_->clear();
      }
    }
    m_point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FestivalMuban_play_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_score;
        break;
      }

      // optional int32 m_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_score_)));
          set_has_m_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_image;
        break;
      }

      // optional string m_image = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_image().data(), this->m_image().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_point;
        break;
      }

      // optional int32 m_point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_point_)));
          set_has_m_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FestivalMuban_play_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_score = 2;
  if (has_m_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_score(), output);
  }

  // optional string m_image = 3;
  if (has_m_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_image().data(), this->m_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_image(), output);
  }

  // optional int32 m_point = 4;
  if (has_m_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FestivalMuban_play_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_score = 2;
  if (has_m_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_score(), target);
  }

  // optional string m_image = 3;
  if (has_m_image()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_image().data(), this->m_image().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_image(), target);
  }

  // optional int32 m_point = 4;
  if (has_m_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FestivalMuban_play_score::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_score = 2;
    if (has_m_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_score());
    }

    // optional string m_image = 3;
    if (has_m_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_image());
    }

    // optional int32 m_point = 4;
    if (has_m_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FestivalMuban_play_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FestivalMuban_play_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FestivalMuban_play_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FestivalMuban_play_score::MergeFrom(const E_FestivalMuban_play_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_score()) {
      set_m_score(from.m_score());
    }
    if (from.has_m_image()) {
      set_m_image(from.m_image());
    }
    if (from.has_m_point()) {
      set_m_point(from.m_point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FestivalMuban_play_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FestivalMuban_play_score::CopyFrom(const E_FestivalMuban_play_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FestivalMuban_play_score::IsInitialized() const {

  return true;
}

void E_FestivalMuban_play_score::Swap(E_FestivalMuban_play_score* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_score_, other->m_score_);
    std::swap(m_image_, other->m_image_);
    std::swap(m_point_, other->m_point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FestivalMuban_play_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FestivalMuban_play_score_descriptor_;
  metadata.reflection = E_FestivalMuban_play_score_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FestivalMuban_play_score::kEFestivalMubanPlayScoreListFieldNumber;
#endif  // !_MSC_VER

Sheet_FestivalMuban_play_score::Sheet_FestivalMuban_play_score()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FestivalMuban_play_score::InitAsDefaultInstance() {
}

Sheet_FestivalMuban_play_score::Sheet_FestivalMuban_play_score(const Sheet_FestivalMuban_play_score& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_score::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FestivalMuban_play_score::~Sheet_FestivalMuban_play_score() {
  SharedDtor();
}

void Sheet_FestivalMuban_play_score::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FestivalMuban_play_score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FestivalMuban_play_score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FestivalMuban_play_score_descriptor_;
}

const Sheet_FestivalMuban_play_score& Sheet_FestivalMuban_play_score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFestival_2eproto();
  return *default_instance_;
}

Sheet_FestivalMuban_play_score* Sheet_FestivalMuban_play_score::default_instance_ = NULL;

Sheet_FestivalMuban_play_score* Sheet_FestivalMuban_play_score::New() const {
  return new Sheet_FestivalMuban_play_score;
}

void Sheet_FestivalMuban_play_score::Clear() {
  e_festivalmuban_play_score_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FestivalMuban_play_score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FestivalMuban_play_score_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_festivalmuban_play_score_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FestivalMuban_play_score_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FestivalMuban_play_score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_festivalmuban_play_score_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FestivalMuban_play_score::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
  for (int i = 0; i < this->e_festivalmuban_play_score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_festivalmuban_play_score_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FestivalMuban_play_score::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FestivalMuban_play_score E_FestivalMuban_play_score_List = 1;
  total_size += 1 * this->e_festivalmuban_play_score_list_size();
  for (int i = 0; i < this->e_festivalmuban_play_score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_festivalmuban_play_score_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FestivalMuban_play_score::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FestivalMuban_play_score* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FestivalMuban_play_score*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FestivalMuban_play_score::MergeFrom(const Sheet_FestivalMuban_play_score& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_festivalmuban_play_score_list_.MergeFrom(from.e_festivalmuban_play_score_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FestivalMuban_play_score::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FestivalMuban_play_score::CopyFrom(const Sheet_FestivalMuban_play_score& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FestivalMuban_play_score::IsInitialized() const {

  return true;
}

void Sheet_FestivalMuban_play_score::Swap(Sheet_FestivalMuban_play_score* other) {
  if (other != this) {
    e_festivalmuban_play_score_list_.Swap(&other->e_festivalmuban_play_score_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FestivalMuban_play_score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FestivalMuban_play_score_descriptor_;
  metadata.reflection = Sheet_FestivalMuban_play_score_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
