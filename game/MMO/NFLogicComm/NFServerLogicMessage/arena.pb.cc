// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: arena.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "arena.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* arenarobotattrDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenarobotattrDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenarobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenarobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_arenarobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_arenarobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenaarenAwardRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenaarenAwardRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenaarenAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenaarenAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_arenaarenAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_arenaarenAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenarankawardRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenarankawardRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenarankaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenarankaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_arenarankaward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_arenarankaward_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenafirstrankRewardDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenafirstrankRewardDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenafirstrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenafirstrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_arenafirstrank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_arenafirstrank_reflection_ = NULL;
const ::google::protobuf::Descriptor* arenabuychallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arenabuychallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_arenabuychallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_arenabuychallenge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_arena_2eproto() {
  protobuf_AddDesc_arena_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "arena.proto");
  GOOGLE_CHECK(file != NULL);
  arenarobotattrDesc_descriptor_ = file->message_type(0);
  static const int arenarobotattrDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobotattrDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobotattrDesc, val_),
  };
  arenarobotattrDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenarobotattrDesc_descriptor_,
      arenarobotattrDesc::default_instance_,
      arenarobotattrDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobotattrDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobotattrDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenarobotattrDesc));
  arenarobot_descriptor_ = file->message_type(1);
  static const int arenarobot_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, arenaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, robotname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, aiid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, rankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, robotprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, robotlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, sword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, occupationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, attr_),
  };
  arenarobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenarobot_descriptor_,
      arenarobot::default_instance_,
      arenarobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenarobot));
  Sheet_arenarobot_descriptor_ = file->message_type(2);
  static const int Sheet_arenarobot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarobot, arenarobot_list_),
  };
  Sheet_arenarobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_arenarobot_descriptor_,
      Sheet_arenarobot::default_instance_,
      Sheet_arenarobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_arenarobot));
  arenaarenAwardRewardDesc_descriptor_ = file->message_type(3);
  static const int arenaarenAwardRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAwardRewardDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAwardRewardDesc, value_),
  };
  arenaarenAwardRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenaarenAwardRewardDesc_descriptor_,
      arenaarenAwardRewardDesc::default_instance_,
      arenaarenAwardRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAwardRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAwardRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenaarenAwardRewardDesc));
  arenaarenAward_descriptor_ = file->message_type(4);
  static const int arenaarenAward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, lvdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, lvup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, reward_),
  };
  arenaarenAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenaarenAward_descriptor_,
      arenaarenAward::default_instance_,
      arenaarenAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenaarenAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenaarenAward));
  Sheet_arenaarenAward_descriptor_ = file->message_type(5);
  static const int Sheet_arenaarenAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenaarenAward, arenaarenaward_list_),
  };
  Sheet_arenaarenAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_arenaarenAward_descriptor_,
      Sheet_arenaarenAward::default_instance_,
      Sheet_arenaarenAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenaarenAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenaarenAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_arenaarenAward));
  arenarankawardRewardDesc_descriptor_ = file->message_type(6);
  static const int arenarankawardRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankawardRewardDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankawardRewardDesc, value_),
  };
  arenarankawardRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenarankawardRewardDesc_descriptor_,
      arenarankawardRewardDesc::default_instance_,
      arenarankawardRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankawardRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankawardRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenarankawardRewardDesc));
  arenarankaward_descriptor_ = file->message_type(7);
  static const int arenarankaward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, arenadown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, arenaup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, reward_),
  };
  arenarankaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenarankaward_descriptor_,
      arenarankaward::default_instance_,
      arenarankaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenarankaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenarankaward));
  Sheet_arenarankaward_descriptor_ = file->message_type(8);
  static const int Sheet_arenarankaward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarankaward, arenarankaward_list_),
  };
  Sheet_arenarankaward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_arenarankaward_descriptor_,
      Sheet_arenarankaward::default_instance_,
      Sheet_arenarankaward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarankaward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenarankaward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_arenarankaward));
  arenafirstrankRewardDesc_descriptor_ = file->message_type(9);
  static const int arenafirstrankRewardDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrankRewardDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrankRewardDesc, value_),
  };
  arenafirstrankRewardDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenafirstrankRewardDesc_descriptor_,
      arenafirstrankRewardDesc::default_instance_,
      arenafirstrankRewardDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrankRewardDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrankRewardDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenafirstrankRewardDesc));
  arenafirstrank_descriptor_ = file->message_type(10);
  static const int arenafirstrank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, rankdown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, rankup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, reward_),
  };
  arenafirstrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenafirstrank_descriptor_,
      arenafirstrank::default_instance_,
      arenafirstrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenafirstrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenafirstrank));
  Sheet_arenafirstrank_descriptor_ = file->message_type(11);
  static const int Sheet_arenafirstrank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenafirstrank, arenafirstrank_list_),
  };
  Sheet_arenafirstrank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_arenafirstrank_descriptor_,
      Sheet_arenafirstrank::default_instance_,
      Sheet_arenafirstrank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenafirstrank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenafirstrank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_arenafirstrank));
  arenabuychallenge_descriptor_ = file->message_type(12);
  static const int arenabuychallenge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenabuychallenge, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenabuychallenge, costtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenabuychallenge, cost_),
  };
  arenabuychallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arenabuychallenge_descriptor_,
      arenabuychallenge::default_instance_,
      arenabuychallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenabuychallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arenabuychallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arenabuychallenge));
  Sheet_arenabuychallenge_descriptor_ = file->message_type(13);
  static const int Sheet_arenabuychallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenabuychallenge, arenabuychallenge_list_),
  };
  Sheet_arenabuychallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_arenabuychallenge_descriptor_,
      Sheet_arenabuychallenge::default_instance_,
      Sheet_arenabuychallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenabuychallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_arenabuychallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_arenabuychallenge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_arena_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenarobotattrDesc_descriptor_, &arenarobotattrDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenarobot_descriptor_, &arenarobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_arenarobot_descriptor_, &Sheet_arenarobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenaarenAwardRewardDesc_descriptor_, &arenaarenAwardRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenaarenAward_descriptor_, &arenaarenAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_arenaarenAward_descriptor_, &Sheet_arenaarenAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenarankawardRewardDesc_descriptor_, &arenarankawardRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenarankaward_descriptor_, &arenarankaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_arenarankaward_descriptor_, &Sheet_arenarankaward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenafirstrankRewardDesc_descriptor_, &arenafirstrankRewardDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenafirstrank_descriptor_, &arenafirstrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_arenafirstrank_descriptor_, &Sheet_arenafirstrank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arenabuychallenge_descriptor_, &arenabuychallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_arenabuychallenge_descriptor_, &Sheet_arenabuychallenge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_arena_2eproto() {
  delete arenarobotattrDesc::default_instance_;
  delete arenarobotattrDesc_reflection_;
  delete arenarobot::default_instance_;
  delete arenarobot_reflection_;
  delete Sheet_arenarobot::default_instance_;
  delete Sheet_arenarobot_reflection_;
  delete arenaarenAwardRewardDesc::default_instance_;
  delete arenaarenAwardRewardDesc_reflection_;
  delete arenaarenAward::default_instance_;
  delete arenaarenAward_reflection_;
  delete Sheet_arenaarenAward::default_instance_;
  delete Sheet_arenaarenAward_reflection_;
  delete arenarankawardRewardDesc::default_instance_;
  delete arenarankawardRewardDesc_reflection_;
  delete arenarankaward::default_instance_;
  delete arenarankaward_reflection_;
  delete Sheet_arenarankaward::default_instance_;
  delete Sheet_arenarankaward_reflection_;
  delete arenafirstrankRewardDesc::default_instance_;
  delete arenafirstrankRewardDesc_reflection_;
  delete arenafirstrank::default_instance_;
  delete arenafirstrank_reflection_;
  delete Sheet_arenafirstrank::default_instance_;
  delete Sheet_arenafirstrank_reflection_;
  delete arenabuychallenge::default_instance_;
  delete arenabuychallenge_reflection_;
  delete Sheet_arenabuychallenge::default_instance_;
  delete Sheet_arenabuychallenge_reflection_;
}

void protobuf_AddDesc_arena_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013arena.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"D\n\022arenarobotattrDesc\022\030\n\004type\030\001 \001"
    "(\005B\n\302\377\024\006\347\261\273\345\236\213\022\024\n\003val\030\002 \001(\005B\007\302\377\024\003\345\200\274\"\345\002\n"
    "\narenarobot\022&\n\007arenaId\030\001 \001(\005B\025\302\377\024\021\347\253\236\346\212\200"
    "\345\234\272\346\216\222\345\220\215ID\022*\n\trobotname\030\002 \001(\tB\027\302\377\024\017\346\234\272\345"
    "\231\250\344\272\272\345\220\215\347\247\260\220\301\024<\022\026\n\004aiId\030\003 \001(\005B\010\302\377\024\004aiID\022"
    "\034\n\006rankId\030\004 \001(\005B\014\302\377\024\010\346\216\222\345\220\215id\022,\n\017robotPr"
    "ofession\030\005 \001(\005B\023\302\377\024\017\346\234\272\345\231\250\344\272\272\350\201\214\344\270\232\022$\n\007r"
    "obotLv\030\006 \001(\005B\023\302\377\024\017\346\234\272\345\231\250\344\272\272\347\255\211\347\272\247\022\031\n\005swo"
    "rd\030\007 \001(\005B\n\302\377\024\006\346\210\230\345\212\233\022\"\n\014occupationID\030\010 \001"
    "(\005B\014\302\377\024\010\350\275\254\350\201\214ID\022:\n\004attr\030\t \003(\0132\034.proto_f"
    "f.arenarobotattrDescB\016\302\377\024\006\345\261\236\346\200\247\210\301\024F\"H\n\020"
    "Sheet_arenarobot\0224\n\017arenarobot_List\030\001 \003("
    "\0132\024.proto_ff.arenarobotB\005\210\301\024\360.\"I\n\030arenaa"
    "renAwardRewardDesc\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022\031"
    "\n\005Value\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\"\260\001\n\016arenaarenA"
    "ward\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022 \n\006lvDown\030\002 \001(\005"
    "B\020\302\377\024\014\344\270\213\351\231\220\347\255\211\347\272\247\022\036\n\004lvUp\030\003 \001(\005B\020\302\377\024\014\344\270"
    "\212\351\231\220\347\255\211\347\272\247\022H\n\006Reward\030\004 \003(\0132\".proto_ff.ar"
    "enaarenAwardRewardDescB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201"
    "\210\301\024\005\"T\n\024Sheet_arenaarenAward\022<\n\023arenaare"
    "nAward_List\030\001 \003(\0132\030.proto_ff.arenaarenAw"
    "ardB\005\210\301\024\320\017\"I\n\030arenarankawardRewardDesc\022\022"
    "\n\002ID\030\001 \001(\005B\006\302\377\024\002ID\022\031\n\005Value\030\002 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\"\301\001\n\016arenarankaward\022\035\n\007PrizeId\030\001 \001("
    "\005B\014\302\377\024\010\345\245\226\345\212\261ID\022#\n\tarenaDown\030\002 \001(\005B\020\302\377\024\014"
    "\344\270\213\351\231\220\346\216\222\345\220\215\022!\n\007arenaUp\030\003 \001(\005B\020\302\377\024\014\344\270\212\351\231"
    "\220\346\216\222\345\220\215\022H\n\006Reward\030\004 \003(\0132\".proto_ff.arena"
    "rankawardRewardDescB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301\024"
    "\005\"S\n\024Sheet_arenarankaward\022;\n\023arenarankaw"
    "ard_List\030\001 \003(\0132\030.proto_ff.arenarankaward"
    "B\004\210\301\024\024\"I\n\030arenafirstrankRewardDesc\022\022\n\002ID"
    "\030\001 \001(\005B\006\302\377\024\002ID\022\031\n\005Value\030\002 \001(\005B\n\302\377\024\006\346\225\260\351\207"
    "\217\"\264\001\n\016arenafirstrank\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id"
    "\022\"\n\010rankDown\030\002 \001(\005B\020\302\377\024\014\344\270\213\351\231\220\346\216\222\345\220\215\022 \n\006"
    "rankUp\030\003 \001(\005B\020\302\377\024\014\344\270\212\351\231\220\346\216\222\345\220\215\022H\n\006Reward"
    "\030\004 \003(\0132\".proto_ff.arenafirstrankRewardDe"
    "scB\024\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301\024\005\"S\n\024Sheet_arenaf"
    "irstrank\022;\n\023arenafirstrank_List\030\001 \003(\0132\030."
    "proto_ff.arenafirstrankB\004\210\301\024\024\"r\n\021arenabu"
    "ychallenge\022\037\n\005count\030\001 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\350\256\241"
    "\346\254\241\022\"\n\010costType\030\002 \001(\005B\020\302\377\024\014\350\212\261\350\264\271\347\261\273\345\236\213\022"
    "\030\n\004cost\030\003 \001(\005B\n\302\377\024\006\350\212\261\350\264\271\"\\\n\027Sheet_arena"
    "buychallenge\022A\n\026arenabuychallenge_List\030\001"
    " \003(\0132\033.proto_ff.arenabuychallengeB\004\210\301\024\024", 1799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "arena.proto", &protobuf_RegisterTypes);
  arenarobotattrDesc::default_instance_ = new arenarobotattrDesc();
  arenarobot::default_instance_ = new arenarobot();
  Sheet_arenarobot::default_instance_ = new Sheet_arenarobot();
  arenaarenAwardRewardDesc::default_instance_ = new arenaarenAwardRewardDesc();
  arenaarenAward::default_instance_ = new arenaarenAward();
  Sheet_arenaarenAward::default_instance_ = new Sheet_arenaarenAward();
  arenarankawardRewardDesc::default_instance_ = new arenarankawardRewardDesc();
  arenarankaward::default_instance_ = new arenarankaward();
  Sheet_arenarankaward::default_instance_ = new Sheet_arenarankaward();
  arenafirstrankRewardDesc::default_instance_ = new arenafirstrankRewardDesc();
  arenafirstrank::default_instance_ = new arenafirstrank();
  Sheet_arenafirstrank::default_instance_ = new Sheet_arenafirstrank();
  arenabuychallenge::default_instance_ = new arenabuychallenge();
  Sheet_arenabuychallenge::default_instance_ = new Sheet_arenabuychallenge();
  arenarobotattrDesc::default_instance_->InitAsDefaultInstance();
  arenarobot::default_instance_->InitAsDefaultInstance();
  Sheet_arenarobot::default_instance_->InitAsDefaultInstance();
  arenaarenAwardRewardDesc::default_instance_->InitAsDefaultInstance();
  arenaarenAward::default_instance_->InitAsDefaultInstance();
  Sheet_arenaarenAward::default_instance_->InitAsDefaultInstance();
  arenarankawardRewardDesc::default_instance_->InitAsDefaultInstance();
  arenarankaward::default_instance_->InitAsDefaultInstance();
  Sheet_arenarankaward::default_instance_->InitAsDefaultInstance();
  arenafirstrankRewardDesc::default_instance_->InitAsDefaultInstance();
  arenafirstrank::default_instance_->InitAsDefaultInstance();
  Sheet_arenafirstrank::default_instance_->InitAsDefaultInstance();
  arenabuychallenge::default_instance_->InitAsDefaultInstance();
  Sheet_arenabuychallenge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_arena_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_arena_2eproto {
  StaticDescriptorInitializer_arena_2eproto() {
    protobuf_AddDesc_arena_2eproto();
  }
} static_descriptor_initializer_arena_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int arenarobotattrDesc::kTypeFieldNumber;
const int arenarobotattrDesc::kValFieldNumber;
#endif  // !_MSC_VER

arenarobotattrDesc::arenarobotattrDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenarobotattrDesc::InitAsDefaultInstance() {
}

arenarobotattrDesc::arenarobotattrDesc(const arenarobotattrDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenarobotattrDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenarobotattrDesc::~arenarobotattrDesc() {
  SharedDtor();
}

void arenarobotattrDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenarobotattrDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenarobotattrDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenarobotattrDesc_descriptor_;
}

const arenarobotattrDesc& arenarobotattrDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenarobotattrDesc* arenarobotattrDesc::default_instance_ = NULL;

arenarobotattrDesc* arenarobotattrDesc::New() const {
  return new arenarobotattrDesc;
}

void arenarobotattrDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenarobotattrDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional int32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenarobotattrDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenarobotattrDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenarobotattrDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenarobotattrDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenarobotattrDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenarobotattrDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenarobotattrDesc::MergeFrom(const arenarobotattrDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenarobotattrDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenarobotattrDesc::CopyFrom(const arenarobotattrDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenarobotattrDesc::IsInitialized() const {

  return true;
}

void arenarobotattrDesc::Swap(arenarobotattrDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenarobotattrDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenarobotattrDesc_descriptor_;
  metadata.reflection = arenarobotattrDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenarobot::kArenaIdFieldNumber;
const int arenarobot::kRobotnameFieldNumber;
const int arenarobot::kAiIdFieldNumber;
const int arenarobot::kRankIdFieldNumber;
const int arenarobot::kRobotProfessionFieldNumber;
const int arenarobot::kRobotLvFieldNumber;
const int arenarobot::kSwordFieldNumber;
const int arenarobot::kOccupationIDFieldNumber;
const int arenarobot::kAttrFieldNumber;
#endif  // !_MSC_VER

arenarobot::arenarobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenarobot::InitAsDefaultInstance() {
}

arenarobot::arenarobot(const arenarobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenarobot::SharedCtor() {
  _cached_size_ = 0;
  arenaid_ = 0;
  robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  aiid_ = 0;
  rankid_ = 0;
  robotprofession_ = 0;
  robotlv_ = 0;
  sword_ = 0;
  occupationid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenarobot::~arenarobot() {
  SharedDtor();
}

void arenarobot::SharedDtor() {
  if (robotname_ != &::google::protobuf::internal::kEmptyString) {
    delete robotname_;
  }
  if (this != default_instance_) {
  }
}

void arenarobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenarobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenarobot_descriptor_;
}

const arenarobot& arenarobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenarobot* arenarobot::default_instance_ = NULL;

arenarobot* arenarobot::New() const {
  return new arenarobot;
}

void arenarobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    arenaid_ = 0;
    if (has_robotname()) {
      if (robotname_ != &::google::protobuf::internal::kEmptyString) {
        robotname_->clear();
      }
    }
    aiid_ = 0;
    rankid_ = 0;
    robotprofession_ = 0;
    robotlv_ = 0;
    sword_ = 0;
    occupationid_ = 0;
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenarobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 arenaId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenaid_)));
          set_has_arenaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_robotname;
        break;
      }

      // optional string robotname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_robotname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robotname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->robotname().data(), this->robotname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aiId;
        break;
      }

      // optional int32 aiId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rankId;
        break;
      }

      // optional int32 rankId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_robotProfession;
        break;
      }

      // optional int32 robotProfession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotprofession_)));
          set_has_robotprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_robotLv;
        break;
      }

      // optional int32 robotLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotlv_)));
          set_has_robotlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sword;
        break;
      }

      // optional int32 sword = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sword:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sword_)));
          set_has_sword();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_occupationID;
        break;
      }

      // optional int32 occupationID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupationID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupationid_)));
          set_has_occupationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.arenarobotattrDesc attr = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenarobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 arenaId = 1;
  if (has_arenaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arenaid(), output);
  }

  // optional string robotname = 2;
  if (has_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robotname().data(), this->robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->robotname(), output);
  }

  // optional int32 aiId = 3;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->aiid(), output);
  }

  // optional int32 rankId = 4;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rankid(), output);
  }

  // optional int32 robotProfession = 5;
  if (has_robotprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->robotprofession(), output);
  }

  // optional int32 robotLv = 6;
  if (has_robotlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->robotlv(), output);
  }

  // optional int32 sword = 7;
  if (has_sword()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sword(), output);
  }

  // optional int32 occupationID = 8;
  if (has_occupationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->occupationid(), output);
  }

  // repeated .proto_ff.arenarobotattrDesc attr = 9;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenarobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 arenaId = 1;
  if (has_arenaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arenaid(), target);
  }

  // optional string robotname = 2;
  if (has_robotname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->robotname().data(), this->robotname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->robotname(), target);
  }

  // optional int32 aiId = 3;
  if (has_aiid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->aiid(), target);
  }

  // optional int32 rankId = 4;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rankid(), target);
  }

  // optional int32 robotProfession = 5;
  if (has_robotprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->robotprofession(), target);
  }

  // optional int32 robotLv = 6;
  if (has_robotlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->robotlv(), target);
  }

  // optional int32 sword = 7;
  if (has_sword()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sword(), target);
  }

  // optional int32 occupationID = 8;
  if (has_occupationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->occupationid(), target);
  }

  // repeated .proto_ff.arenarobotattrDesc attr = 9;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenarobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 arenaId = 1;
    if (has_arenaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenaid());
    }

    // optional string robotname = 2;
    if (has_robotname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->robotname());
    }

    // optional int32 aiId = 3;
    if (has_aiid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aiid());
    }

    // optional int32 rankId = 4;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankid());
    }

    // optional int32 robotProfession = 5;
    if (has_robotprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotprofession());
    }

    // optional int32 robotLv = 6;
    if (has_robotlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotlv());
    }

    // optional int32 sword = 7;
    if (has_sword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sword());
    }

    // optional int32 occupationID = 8;
    if (has_occupationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupationid());
    }

  }
  // repeated .proto_ff.arenarobotattrDesc attr = 9;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenarobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenarobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenarobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenarobot::MergeFrom(const arenarobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arenaid()) {
      set_arenaid(from.arenaid());
    }
    if (from.has_robotname()) {
      set_robotname(from.robotname());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
    if (from.has_robotprofession()) {
      set_robotprofession(from.robotprofession());
    }
    if (from.has_robotlv()) {
      set_robotlv(from.robotlv());
    }
    if (from.has_sword()) {
      set_sword(from.sword());
    }
    if (from.has_occupationid()) {
      set_occupationid(from.occupationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenarobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenarobot::CopyFrom(const arenarobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenarobot::IsInitialized() const {

  return true;
}

void arenarobot::Swap(arenarobot* other) {
  if (other != this) {
    std::swap(arenaid_, other->arenaid_);
    std::swap(robotname_, other->robotname_);
    std::swap(aiid_, other->aiid_);
    std::swap(rankid_, other->rankid_);
    std::swap(robotprofession_, other->robotprofession_);
    std::swap(robotlv_, other->robotlv_);
    std::swap(sword_, other->sword_);
    std::swap(occupationid_, other->occupationid_);
    attr_.Swap(&other->attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenarobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenarobot_descriptor_;
  metadata.reflection = arenarobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_arenarobot::kArenarobotListFieldNumber;
#endif  // !_MSC_VER

Sheet_arenarobot::Sheet_arenarobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_arenarobot::InitAsDefaultInstance() {
}

Sheet_arenarobot::Sheet_arenarobot(const Sheet_arenarobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_arenarobot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_arenarobot::~Sheet_arenarobot() {
  SharedDtor();
}

void Sheet_arenarobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_arenarobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_arenarobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_arenarobot_descriptor_;
}

const Sheet_arenarobot& Sheet_arenarobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_arenarobot* Sheet_arenarobot::default_instance_ = NULL;

Sheet_arenarobot* Sheet_arenarobot::New() const {
  return new Sheet_arenarobot;
}

void Sheet_arenarobot::Clear() {
  arenarobot_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_arenarobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.arenarobot arenarobot_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenarobot_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarobot_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenarobot_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_arenarobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.arenarobot arenarobot_List = 1;
  for (int i = 0; i < this->arenarobot_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenarobot_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_arenarobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.arenarobot arenarobot_List = 1;
  for (int i = 0; i < this->arenarobot_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenarobot_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_arenarobot::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.arenarobot arenarobot_List = 1;
  total_size += 1 * this->arenarobot_list_size();
  for (int i = 0; i < this->arenarobot_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarobot_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_arenarobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_arenarobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_arenarobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_arenarobot::MergeFrom(const Sheet_arenarobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarobot_list_.MergeFrom(from.arenarobot_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_arenarobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_arenarobot::CopyFrom(const Sheet_arenarobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_arenarobot::IsInitialized() const {

  return true;
}

void Sheet_arenarobot::Swap(Sheet_arenarobot* other) {
  if (other != this) {
    arenarobot_list_.Swap(&other->arenarobot_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_arenarobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_arenarobot_descriptor_;
  metadata.reflection = Sheet_arenarobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenaarenAwardRewardDesc::kIDFieldNumber;
const int arenaarenAwardRewardDesc::kValueFieldNumber;
#endif  // !_MSC_VER

arenaarenAwardRewardDesc::arenaarenAwardRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenaarenAwardRewardDesc::InitAsDefaultInstance() {
}

arenaarenAwardRewardDesc::arenaarenAwardRewardDesc(const arenaarenAwardRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenaarenAwardRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenaarenAwardRewardDesc::~arenaarenAwardRewardDesc() {
  SharedDtor();
}

void arenaarenAwardRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenaarenAwardRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenaarenAwardRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenaarenAwardRewardDesc_descriptor_;
}

const arenaarenAwardRewardDesc& arenaarenAwardRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenaarenAwardRewardDesc* arenaarenAwardRewardDesc::default_instance_ = NULL;

arenaarenAwardRewardDesc* arenaarenAwardRewardDesc::New() const {
  return new arenaarenAwardRewardDesc;
}

void arenaarenAwardRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenaarenAwardRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenaarenAwardRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenaarenAwardRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenaarenAwardRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenaarenAwardRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenaarenAwardRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenaarenAwardRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenaarenAwardRewardDesc::MergeFrom(const arenaarenAwardRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenaarenAwardRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenaarenAwardRewardDesc::CopyFrom(const arenaarenAwardRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenaarenAwardRewardDesc::IsInitialized() const {

  return true;
}

void arenaarenAwardRewardDesc::Swap(arenaarenAwardRewardDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenaarenAwardRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenaarenAwardRewardDesc_descriptor_;
  metadata.reflection = arenaarenAwardRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenaarenAward::kIdFieldNumber;
const int arenaarenAward::kLvDownFieldNumber;
const int arenaarenAward::kLvUpFieldNumber;
const int arenaarenAward::kRewardFieldNumber;
#endif  // !_MSC_VER

arenaarenAward::arenaarenAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenaarenAward::InitAsDefaultInstance() {
}

arenaarenAward::arenaarenAward(const arenaarenAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenaarenAward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lvdown_ = 0;
  lvup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenaarenAward::~arenaarenAward() {
  SharedDtor();
}

void arenaarenAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenaarenAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenaarenAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenaarenAward_descriptor_;
}

const arenaarenAward& arenaarenAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenaarenAward* arenaarenAward::default_instance_ = NULL;

arenaarenAward* arenaarenAward::New() const {
  return new arenaarenAward;
}

void arenaarenAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lvdown_ = 0;
    lvup_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenaarenAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvDown;
        break;
      }

      // optional int32 lvDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvdown_)));
          set_has_lvdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lvUp;
        break;
      }

      // optional int32 lvUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvup_)));
          set_has_lvup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        break;
      }

      // repeated .proto_ff.arenaarenAwardRewardDesc Reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenaarenAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 lvDown = 2;
  if (has_lvdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lvdown(), output);
  }

  // optional int32 lvUp = 3;
  if (has_lvup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lvup(), output);
  }

  // repeated .proto_ff.arenaarenAwardRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenaarenAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 lvDown = 2;
  if (has_lvdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lvdown(), target);
  }

  // optional int32 lvUp = 3;
  if (has_lvup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lvup(), target);
  }

  // repeated .proto_ff.arenaarenAwardRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenaarenAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lvDown = 2;
    if (has_lvdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvdown());
    }

    // optional int32 lvUp = 3;
    if (has_lvup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvup());
    }

  }
  // repeated .proto_ff.arenaarenAwardRewardDesc Reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenaarenAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenaarenAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenaarenAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenaarenAward::MergeFrom(const arenaarenAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lvdown()) {
      set_lvdown(from.lvdown());
    }
    if (from.has_lvup()) {
      set_lvup(from.lvup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenaarenAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenaarenAward::CopyFrom(const arenaarenAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenaarenAward::IsInitialized() const {

  return true;
}

void arenaarenAward::Swap(arenaarenAward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lvdown_, other->lvdown_);
    std::swap(lvup_, other->lvup_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenaarenAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenaarenAward_descriptor_;
  metadata.reflection = arenaarenAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_arenaarenAward::kArenaarenAwardListFieldNumber;
#endif  // !_MSC_VER

Sheet_arenaarenAward::Sheet_arenaarenAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_arenaarenAward::InitAsDefaultInstance() {
}

Sheet_arenaarenAward::Sheet_arenaarenAward(const Sheet_arenaarenAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_arenaarenAward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_arenaarenAward::~Sheet_arenaarenAward() {
  SharedDtor();
}

void Sheet_arenaarenAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_arenaarenAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_arenaarenAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_arenaarenAward_descriptor_;
}

const Sheet_arenaarenAward& Sheet_arenaarenAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_arenaarenAward* Sheet_arenaarenAward::default_instance_ = NULL;

Sheet_arenaarenAward* Sheet_arenaarenAward::New() const {
  return new Sheet_arenaarenAward;
}

void Sheet_arenaarenAward::Clear() {
  arenaarenaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_arenaarenAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.arenaarenAward arenaarenAward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaarenAward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenaarenaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenaarenAward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_arenaarenAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.arenaarenAward arenaarenAward_List = 1;
  for (int i = 0; i < this->arenaarenaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenaarenaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_arenaarenAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.arenaarenAward arenaarenAward_List = 1;
  for (int i = 0; i < this->arenaarenaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenaarenaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_arenaarenAward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.arenaarenAward arenaarenAward_List = 1;
  total_size += 1 * this->arenaarenaward_list_size();
  for (int i = 0; i < this->arenaarenaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenaarenaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_arenaarenAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_arenaarenAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_arenaarenAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_arenaarenAward::MergeFrom(const Sheet_arenaarenAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenaarenaward_list_.MergeFrom(from.arenaarenaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_arenaarenAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_arenaarenAward::CopyFrom(const Sheet_arenaarenAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_arenaarenAward::IsInitialized() const {

  return true;
}

void Sheet_arenaarenAward::Swap(Sheet_arenaarenAward* other) {
  if (other != this) {
    arenaarenaward_list_.Swap(&other->arenaarenaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_arenaarenAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_arenaarenAward_descriptor_;
  metadata.reflection = Sheet_arenaarenAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenarankawardRewardDesc::kIDFieldNumber;
const int arenarankawardRewardDesc::kValueFieldNumber;
#endif  // !_MSC_VER

arenarankawardRewardDesc::arenarankawardRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenarankawardRewardDesc::InitAsDefaultInstance() {
}

arenarankawardRewardDesc::arenarankawardRewardDesc(const arenarankawardRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenarankawardRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenarankawardRewardDesc::~arenarankawardRewardDesc() {
  SharedDtor();
}

void arenarankawardRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenarankawardRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenarankawardRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenarankawardRewardDesc_descriptor_;
}

const arenarankawardRewardDesc& arenarankawardRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenarankawardRewardDesc* arenarankawardRewardDesc::default_instance_ = NULL;

arenarankawardRewardDesc* arenarankawardRewardDesc::New() const {
  return new arenarankawardRewardDesc;
}

void arenarankawardRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenarankawardRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenarankawardRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenarankawardRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenarankawardRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenarankawardRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenarankawardRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenarankawardRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenarankawardRewardDesc::MergeFrom(const arenarankawardRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenarankawardRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenarankawardRewardDesc::CopyFrom(const arenarankawardRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenarankawardRewardDesc::IsInitialized() const {

  return true;
}

void arenarankawardRewardDesc::Swap(arenarankawardRewardDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenarankawardRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenarankawardRewardDesc_descriptor_;
  metadata.reflection = arenarankawardRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenarankaward::kPrizeIdFieldNumber;
const int arenarankaward::kArenaDownFieldNumber;
const int arenarankaward::kArenaUpFieldNumber;
const int arenarankaward::kRewardFieldNumber;
#endif  // !_MSC_VER

arenarankaward::arenarankaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenarankaward::InitAsDefaultInstance() {
}

arenarankaward::arenarankaward(const arenarankaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenarankaward::SharedCtor() {
  _cached_size_ = 0;
  prizeid_ = 0;
  arenadown_ = 0;
  arenaup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenarankaward::~arenarankaward() {
  SharedDtor();
}

void arenarankaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenarankaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenarankaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenarankaward_descriptor_;
}

const arenarankaward& arenarankaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenarankaward* arenarankaward::default_instance_ = NULL;

arenarankaward* arenarankaward::New() const {
  return new arenarankaward;
}

void arenarankaward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prizeid_ = 0;
    arenadown_ = 0;
    arenaup_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenarankaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 PrizeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_arenaDown;
        break;
      }

      // optional int32 arenaDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenadown_)));
          set_has_arenadown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_arenaUp;
        break;
      }

      // optional int32 arenaUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenaup_)));
          set_has_arenaup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        break;
      }

      // repeated .proto_ff.arenarankawardRewardDesc Reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenarankaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 PrizeId = 1;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prizeid(), output);
  }

  // optional int32 arenaDown = 2;
  if (has_arenadown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arenadown(), output);
  }

  // optional int32 arenaUp = 3;
  if (has_arenaup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arenaup(), output);
  }

  // repeated .proto_ff.arenarankawardRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenarankaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 PrizeId = 1;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prizeid(), target);
  }

  // optional int32 arenaDown = 2;
  if (has_arenadown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->arenadown(), target);
  }

  // optional int32 arenaUp = 3;
  if (has_arenaup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->arenaup(), target);
  }

  // repeated .proto_ff.arenarankawardRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenarankaward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 PrizeId = 1;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizeid());
    }

    // optional int32 arenaDown = 2;
    if (has_arenadown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenadown());
    }

    // optional int32 arenaUp = 3;
    if (has_arenaup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenaup());
    }

  }
  // repeated .proto_ff.arenarankawardRewardDesc Reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenarankaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenarankaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenarankaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenarankaward::MergeFrom(const arenarankaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_arenadown()) {
      set_arenadown(from.arenadown());
    }
    if (from.has_arenaup()) {
      set_arenaup(from.arenaup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenarankaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenarankaward::CopyFrom(const arenarankaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenarankaward::IsInitialized() const {

  return true;
}

void arenarankaward::Swap(arenarankaward* other) {
  if (other != this) {
    std::swap(prizeid_, other->prizeid_);
    std::swap(arenadown_, other->arenadown_);
    std::swap(arenaup_, other->arenaup_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenarankaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenarankaward_descriptor_;
  metadata.reflection = arenarankaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_arenarankaward::kArenarankawardListFieldNumber;
#endif  // !_MSC_VER

Sheet_arenarankaward::Sheet_arenarankaward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_arenarankaward::InitAsDefaultInstance() {
}

Sheet_arenarankaward::Sheet_arenarankaward(const Sheet_arenarankaward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_arenarankaward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_arenarankaward::~Sheet_arenarankaward() {
  SharedDtor();
}

void Sheet_arenarankaward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_arenarankaward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_arenarankaward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_arenarankaward_descriptor_;
}

const Sheet_arenarankaward& Sheet_arenarankaward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_arenarankaward* Sheet_arenarankaward::default_instance_ = NULL;

Sheet_arenarankaward* Sheet_arenarankaward::New() const {
  return new Sheet_arenarankaward;
}

void Sheet_arenarankaward::Clear() {
  arenarankaward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_arenarankaward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.arenarankaward arenarankaward_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenarankaward_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarankaward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenarankaward_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_arenarankaward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.arenarankaward arenarankaward_List = 1;
  for (int i = 0; i < this->arenarankaward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenarankaward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_arenarankaward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.arenarankaward arenarankaward_List = 1;
  for (int i = 0; i < this->arenarankaward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenarankaward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_arenarankaward::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.arenarankaward arenarankaward_List = 1;
  total_size += 1 * this->arenarankaward_list_size();
  for (int i = 0; i < this->arenarankaward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarankaward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_arenarankaward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_arenarankaward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_arenarankaward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_arenarankaward::MergeFrom(const Sheet_arenarankaward& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarankaward_list_.MergeFrom(from.arenarankaward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_arenarankaward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_arenarankaward::CopyFrom(const Sheet_arenarankaward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_arenarankaward::IsInitialized() const {

  return true;
}

void Sheet_arenarankaward::Swap(Sheet_arenarankaward* other) {
  if (other != this) {
    arenarankaward_list_.Swap(&other->arenarankaward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_arenarankaward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_arenarankaward_descriptor_;
  metadata.reflection = Sheet_arenarankaward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenafirstrankRewardDesc::kIDFieldNumber;
const int arenafirstrankRewardDesc::kValueFieldNumber;
#endif  // !_MSC_VER

arenafirstrankRewardDesc::arenafirstrankRewardDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenafirstrankRewardDesc::InitAsDefaultInstance() {
}

arenafirstrankRewardDesc::arenafirstrankRewardDesc(const arenafirstrankRewardDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenafirstrankRewardDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenafirstrankRewardDesc::~arenafirstrankRewardDesc() {
  SharedDtor();
}

void arenafirstrankRewardDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenafirstrankRewardDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenafirstrankRewardDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenafirstrankRewardDesc_descriptor_;
}

const arenafirstrankRewardDesc& arenafirstrankRewardDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenafirstrankRewardDesc* arenafirstrankRewardDesc::default_instance_ = NULL;

arenafirstrankRewardDesc* arenafirstrankRewardDesc::New() const {
  return new arenafirstrankRewardDesc;
}

void arenafirstrankRewardDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenafirstrankRewardDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional int32 Value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenafirstrankRewardDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenafirstrankRewardDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenafirstrankRewardDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenafirstrankRewardDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenafirstrankRewardDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenafirstrankRewardDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenafirstrankRewardDesc::MergeFrom(const arenafirstrankRewardDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenafirstrankRewardDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenafirstrankRewardDesc::CopyFrom(const arenafirstrankRewardDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenafirstrankRewardDesc::IsInitialized() const {

  return true;
}

void arenafirstrankRewardDesc::Swap(arenafirstrankRewardDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenafirstrankRewardDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenafirstrankRewardDesc_descriptor_;
  metadata.reflection = arenafirstrankRewardDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenafirstrank::kIdFieldNumber;
const int arenafirstrank::kRankDownFieldNumber;
const int arenafirstrank::kRankUpFieldNumber;
const int arenafirstrank::kRewardFieldNumber;
#endif  // !_MSC_VER

arenafirstrank::arenafirstrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenafirstrank::InitAsDefaultInstance() {
}

arenafirstrank::arenafirstrank(const arenafirstrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenafirstrank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rankdown_ = 0;
  rankup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenafirstrank::~arenafirstrank() {
  SharedDtor();
}

void arenafirstrank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenafirstrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenafirstrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenafirstrank_descriptor_;
}

const arenafirstrank& arenafirstrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenafirstrank* arenafirstrank::default_instance_ = NULL;

arenafirstrank* arenafirstrank::New() const {
  return new arenafirstrank;
}

void arenafirstrank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    rankdown_ = 0;
    rankup_ = 0;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenafirstrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankDown;
        break;
      }

      // optional int32 rankDown = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankdown_)));
          set_has_rankdown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankUp;
        break;
      }

      // optional int32 rankUp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankup_)));
          set_has_rankup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        break;
      }

      // repeated .proto_ff.arenafirstrankRewardDesc Reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenafirstrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rankDown = 2;
  if (has_rankdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rankdown(), output);
  }

  // optional int32 rankUp = 3;
  if (has_rankup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rankup(), output);
  }

  // repeated .proto_ff.arenafirstrankRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenafirstrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rankDown = 2;
  if (has_rankdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rankdown(), target);
  }

  // optional int32 rankUp = 3;
  if (has_rankup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rankup(), target);
  }

  // repeated .proto_ff.arenafirstrankRewardDesc Reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenafirstrank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 rankDown = 2;
    if (has_rankdown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankdown());
    }

    // optional int32 rankUp = 3;
    if (has_rankup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankup());
    }

  }
  // repeated .proto_ff.arenafirstrankRewardDesc Reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenafirstrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenafirstrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenafirstrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenafirstrank::MergeFrom(const arenafirstrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rankdown()) {
      set_rankdown(from.rankdown());
    }
    if (from.has_rankup()) {
      set_rankup(from.rankup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenafirstrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenafirstrank::CopyFrom(const arenafirstrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenafirstrank::IsInitialized() const {

  return true;
}

void arenafirstrank::Swap(arenafirstrank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rankdown_, other->rankdown_);
    std::swap(rankup_, other->rankup_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenafirstrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenafirstrank_descriptor_;
  metadata.reflection = arenafirstrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_arenafirstrank::kArenafirstrankListFieldNumber;
#endif  // !_MSC_VER

Sheet_arenafirstrank::Sheet_arenafirstrank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_arenafirstrank::InitAsDefaultInstance() {
}

Sheet_arenafirstrank::Sheet_arenafirstrank(const Sheet_arenafirstrank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_arenafirstrank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_arenafirstrank::~Sheet_arenafirstrank() {
  SharedDtor();
}

void Sheet_arenafirstrank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_arenafirstrank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_arenafirstrank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_arenafirstrank_descriptor_;
}

const Sheet_arenafirstrank& Sheet_arenafirstrank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_arenafirstrank* Sheet_arenafirstrank::default_instance_ = NULL;

Sheet_arenafirstrank* Sheet_arenafirstrank::New() const {
  return new Sheet_arenafirstrank;
}

void Sheet_arenafirstrank::Clear() {
  arenafirstrank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_arenafirstrank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.arenafirstrank arenafirstrank_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenafirstrank_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenafirstrank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenafirstrank_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_arenafirstrank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.arenafirstrank arenafirstrank_List = 1;
  for (int i = 0; i < this->arenafirstrank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenafirstrank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_arenafirstrank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.arenafirstrank arenafirstrank_List = 1;
  for (int i = 0; i < this->arenafirstrank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenafirstrank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_arenafirstrank::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.arenafirstrank arenafirstrank_List = 1;
  total_size += 1 * this->arenafirstrank_list_size();
  for (int i = 0; i < this->arenafirstrank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenafirstrank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_arenafirstrank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_arenafirstrank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_arenafirstrank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_arenafirstrank::MergeFrom(const Sheet_arenafirstrank& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenafirstrank_list_.MergeFrom(from.arenafirstrank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_arenafirstrank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_arenafirstrank::CopyFrom(const Sheet_arenafirstrank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_arenafirstrank::IsInitialized() const {

  return true;
}

void Sheet_arenafirstrank::Swap(Sheet_arenafirstrank* other) {
  if (other != this) {
    arenafirstrank_list_.Swap(&other->arenafirstrank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_arenafirstrank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_arenafirstrank_descriptor_;
  metadata.reflection = Sheet_arenafirstrank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arenabuychallenge::kCountFieldNumber;
const int arenabuychallenge::kCostTypeFieldNumber;
const int arenabuychallenge::kCostFieldNumber;
#endif  // !_MSC_VER

arenabuychallenge::arenabuychallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void arenabuychallenge::InitAsDefaultInstance() {
}

arenabuychallenge::arenabuychallenge(const arenabuychallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void arenabuychallenge::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  costtype_ = 0;
  cost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arenabuychallenge::~arenabuychallenge() {
  SharedDtor();
}

void arenabuychallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arenabuychallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arenabuychallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arenabuychallenge_descriptor_;
}

const arenabuychallenge& arenabuychallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

arenabuychallenge* arenabuychallenge::default_instance_ = NULL;

arenabuychallenge* arenabuychallenge::New() const {
  return new arenabuychallenge;
}

void arenabuychallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    costtype_ = 0;
    cost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arenabuychallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costType;
        break;
      }

      // optional int32 costType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costtype_)));
          set_has_costtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional int32 cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void arenabuychallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int32 costType = 2;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->costtype(), output);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* arenabuychallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int32 costType = 2;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->costtype(), target);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int arenabuychallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 costType = 2;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costtype());
    }

    // optional int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arenabuychallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arenabuychallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arenabuychallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arenabuychallenge::MergeFrom(const arenabuychallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arenabuychallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arenabuychallenge::CopyFrom(const arenabuychallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arenabuychallenge::IsInitialized() const {

  return true;
}

void arenabuychallenge::Swap(arenabuychallenge* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(costtype_, other->costtype_);
    std::swap(cost_, other->cost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arenabuychallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arenabuychallenge_descriptor_;
  metadata.reflection = arenabuychallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_arenabuychallenge::kArenabuychallengeListFieldNumber;
#endif  // !_MSC_VER

Sheet_arenabuychallenge::Sheet_arenabuychallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_arenabuychallenge::InitAsDefaultInstance() {
}

Sheet_arenabuychallenge::Sheet_arenabuychallenge(const Sheet_arenabuychallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_arenabuychallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_arenabuychallenge::~Sheet_arenabuychallenge() {
  SharedDtor();
}

void Sheet_arenabuychallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_arenabuychallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_arenabuychallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_arenabuychallenge_descriptor_;
}

const Sheet_arenabuychallenge& Sheet_arenabuychallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_arena_2eproto();
  return *default_instance_;
}

Sheet_arenabuychallenge* Sheet_arenabuychallenge::default_instance_ = NULL;

Sheet_arenabuychallenge* Sheet_arenabuychallenge::New() const {
  return new Sheet_arenabuychallenge;
}

void Sheet_arenabuychallenge::Clear() {
  arenabuychallenge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_arenabuychallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.arenabuychallenge arenabuychallenge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenabuychallenge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenabuychallenge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenabuychallenge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_arenabuychallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.arenabuychallenge arenabuychallenge_List = 1;
  for (int i = 0; i < this->arenabuychallenge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arenabuychallenge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_arenabuychallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.arenabuychallenge arenabuychallenge_List = 1;
  for (int i = 0; i < this->arenabuychallenge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arenabuychallenge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_arenabuychallenge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.arenabuychallenge arenabuychallenge_List = 1;
  total_size += 1 * this->arenabuychallenge_list_size();
  for (int i = 0; i < this->arenabuychallenge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenabuychallenge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_arenabuychallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_arenabuychallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_arenabuychallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_arenabuychallenge::MergeFrom(const Sheet_arenabuychallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenabuychallenge_list_.MergeFrom(from.arenabuychallenge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_arenabuychallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_arenabuychallenge::CopyFrom(const Sheet_arenabuychallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_arenabuychallenge::IsInitialized() const {

  return true;
}

void Sheet_arenabuychallenge::Swap(Sheet_arenabuychallenge* other) {
  if (other != this) {
    arenabuychallenge_list_.Swap(&other->arenabuychallenge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_arenabuychallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_arenabuychallenge_descriptor_;
  metadata.reflection = Sheet_arenabuychallenge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
