// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teleport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "teleport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* teleportborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  teleportborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_teleportborn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_teleportborn_reflection_ = NULL;
const ::google::protobuf::Descriptor* teleportteleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  teleportteleport_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_teleportteleport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_teleportteleport_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_teleport_2eproto() {
  protobuf_AddDesc_teleport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "teleport.proto");
  GOOGLE_CHECK(file != NULL);
  teleportborn_descriptor_ = file->message_type(0);
  static const int teleportborn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, rolebornrange_),
  };
  teleportborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      teleportborn_descriptor_,
      teleportborn::default_instance_,
      teleportborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(teleportborn));
  Sheet_teleportborn_descriptor_ = file->message_type(1);
  static const int Sheet_teleportborn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportborn, teleportborn_list_),
  };
  Sheet_teleportborn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_teleportborn_descriptor_,
      Sheet_teleportborn::default_instance_,
      Sheet_teleportborn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportborn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportborn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_teleportborn));
  teleportteleport_descriptor_ = file->message_type(2);
  static const int teleportteleport_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, teleportid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, teleporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, showcondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, conditionvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, canenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, showpathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, topathid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, toduplicateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, entercost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, trigrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, livingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, openchatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, progresschatid_),
  };
  teleportteleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      teleportteleport_descriptor_,
      teleportteleport::default_instance_,
      teleportteleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(teleportteleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(teleportteleport));
  Sheet_teleportteleport_descriptor_ = file->message_type(3);
  static const int Sheet_teleportteleport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportteleport, teleportteleport_list_),
  };
  Sheet_teleportteleport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_teleportteleport_descriptor_,
      Sheet_teleportteleport::default_instance_,
      Sheet_teleportteleport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportteleport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_teleportteleport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_teleportteleport));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_teleport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    teleportborn_descriptor_, &teleportborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_teleportborn_descriptor_, &Sheet_teleportborn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    teleportteleport_descriptor_, &teleportteleport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_teleportteleport_descriptor_, &Sheet_teleportteleport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_teleport_2eproto() {
  delete teleportborn::default_instance_;
  delete teleportborn_reflection_;
  delete Sheet_teleportborn::default_instance_;
  delete Sheet_teleportborn_reflection_;
  delete teleportteleport::default_instance_;
  delete teleportteleport_reflection_;
  delete Sheet_teleportteleport::default_instance_;
  delete Sheet_teleportteleport_reflection_;
}

void protobuf_AddDesc_teleport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016teleport.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\222\001\n\014teleportborn\022\025\n\002id\030\001 \001(\003B\t"
    "\302\377\024\005\347\202\271ID\022\033\n\004type\030\002 \001(\005B\r\302\377\024\t\347\202\271\347\261\273\345\236\213\022\037"
    "\n\005scene\030\003 \001(\003B\020\302\377\024\014\346\211\200\345\261\236\345\234\272\346\231\257\022-\n\rroleB"
    "ornRange\030\004 \001(\005B\026\302\377\024\022\350\247\222\350\211\262\345\207\272\347\224\237\350\214\203\345\233\264\"N"
    "\n\022Sheet_teleportborn\0228\n\021teleportborn_Lis"
    "t\030\001 \003(\0132\026.proto_ff.teleportbornB\005\210\301\024\352\002\"\222"
    "\005\n\020teleportteleport\022#\n\nteleportID\030\001 \001(\003B"
    "\017\302\377\024\013\344\274\240\351\200\201\347\202\271ID\022)\n\014teleportType\030\002 \001(\005B\023"
    "\302\377\024\017\344\274\240\351\200\201\351\227\250\347\261\273\345\236\213\022%\n\004name\030\003 \001(\tB\027\302\377\024\017\344"
    "\274\240\351\200\201\347\202\271\345\220\215\347\247\260\220\301\024 \022(\n\tmonsterId\030\004 \001(\003B\025\302"
    "\377\024\021\344\274\240\351\200\201\351\227\250\346\200\252\347\211\251ID\022\'\n\rshowCondition\030\005 "
    "\001(\005B\020\302\377\024\014\345\207\272\347\216\260\346\235\241\344\273\266\022,\n\016conditionValue\030"
    "\006 \001(\tB\024\302\377\024\014\346\235\241\344\273\266\345\217\202\346\225\260\220\301\024)\022\"\n\010canEnter\030"
    "\007 \001(\005B\020\302\377\024\014\350\277\233\345\205\245\346\235\203\351\231\220\022\'\n\nshowPathID\030\010 "
    "\001(\003B\023\302\377\024\017\351\273\230\350\256\244\344\275\215\347\275\256\347\202\271\022+\n\010toPathID\030\t \001"
    "(\003B\031\302\377\024\025\344\274\240\351\200\201\347\233\256\347\232\204\344\275\215\347\275\256\347\202\271\022)\n\rtoDupli"
    "cateId\030\n \001(\003B\022\302\377\024\016\344\274\240\351\200\201\345\211\257\346\234\254ID\022-\n\tente"
    "rCost\030\013 \001(\tB\032\302\377\024\022\350\277\233\345\205\245\351\201\223\345\205\267\346\266\210\350\200\227\220\301\024 \022"
    "#\n\ttrigRange\030\014 \001(\005B\020\302\377\024\014\350\247\246\345\217\221\350\214\203\345\233\264\022-\n\n"
    "livingTime\030\r \001(\005B\031\302\377\024\025\344\274\240\351\200\201\351\227\250\345\255\230\345\234\250\346\227\266"
    "\351\227\264\022/\n\nopenChatId\030\016 \001(\003B\033\302\377\024\027\345\274\200\345\220\257\346\227\266\347\232"
    "\204\350\267\221\351\251\254\347\201\257ID\022-\n\016progressChatId\030\017 \001(\003B\025\302\377"
    "\024\021\350\277\233\345\272\246\350\267\221\351\251\254\347\201\257ID\"Y\n\026Sheet_teleporttel"
    "eport\022\?\n\025teleportteleport_List\030\001 \003(\0132\032.p"
    "roto_ff.teleportteleportB\004\210\301\024~", 1030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "teleport.proto", &protobuf_RegisterTypes);
  teleportborn::default_instance_ = new teleportborn();
  Sheet_teleportborn::default_instance_ = new Sheet_teleportborn();
  teleportteleport::default_instance_ = new teleportteleport();
  Sheet_teleportteleport::default_instance_ = new Sheet_teleportteleport();
  teleportborn::default_instance_->InitAsDefaultInstance();
  Sheet_teleportborn::default_instance_->InitAsDefaultInstance();
  teleportteleport::default_instance_->InitAsDefaultInstance();
  Sheet_teleportteleport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_teleport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_teleport_2eproto {
  StaticDescriptorInitializer_teleport_2eproto() {
    protobuf_AddDesc_teleport_2eproto();
  }
} static_descriptor_initializer_teleport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int teleportborn::kIdFieldNumber;
const int teleportborn::kTypeFieldNumber;
const int teleportborn::kSceneFieldNumber;
const int teleportborn::kRoleBornRangeFieldNumber;
#endif  // !_MSC_VER

teleportborn::teleportborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void teleportborn::InitAsDefaultInstance() {
}

teleportborn::teleportborn(const teleportborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void teleportborn::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  scene_ = GOOGLE_LONGLONG(0);
  rolebornrange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

teleportborn::~teleportborn() {
  SharedDtor();
}

void teleportborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void teleportborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* teleportborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return teleportborn_descriptor_;
}

const teleportborn& teleportborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teleport_2eproto();
  return *default_instance_;
}

teleportborn* teleportborn::default_instance_ = NULL;

teleportborn* teleportborn::New() const {
  return new teleportborn;
}

void teleportborn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    scene_ = GOOGLE_LONGLONG(0);
    rolebornrange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool teleportborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_scene;
        break;
      }

      // optional int64 scene = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scene_)));
          set_has_scene();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_roleBornRange;
        break;
      }

      // optional int32 roleBornRange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleBornRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rolebornrange_)));
          set_has_rolebornrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void teleportborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 scene = 3;
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->scene(), output);
  }

  // optional int32 roleBornRange = 4;
  if (has_rolebornrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rolebornrange(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* teleportborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 scene = 3;
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->scene(), target);
  }

  // optional int32 roleBornRange = 4;
  if (has_rolebornrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rolebornrange(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int teleportborn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 scene = 3;
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scene());
    }

    // optional int32 roleBornRange = 4;
    if (has_rolebornrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rolebornrange());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void teleportborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const teleportborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const teleportborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void teleportborn::MergeFrom(const teleportborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_rolebornrange()) {
      set_rolebornrange(from.rolebornrange());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void teleportborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void teleportborn::CopyFrom(const teleportborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool teleportborn::IsInitialized() const {

  return true;
}

void teleportborn::Swap(teleportborn* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(scene_, other->scene_);
    std::swap(rolebornrange_, other->rolebornrange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata teleportborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = teleportborn_descriptor_;
  metadata.reflection = teleportborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_teleportborn::kTeleportbornListFieldNumber;
#endif  // !_MSC_VER

Sheet_teleportborn::Sheet_teleportborn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_teleportborn::InitAsDefaultInstance() {
}

Sheet_teleportborn::Sheet_teleportborn(const Sheet_teleportborn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_teleportborn::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_teleportborn::~Sheet_teleportborn() {
  SharedDtor();
}

void Sheet_teleportborn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_teleportborn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_teleportborn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_teleportborn_descriptor_;
}

const Sheet_teleportborn& Sheet_teleportborn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teleport_2eproto();
  return *default_instance_;
}

Sheet_teleportborn* Sheet_teleportborn::default_instance_ = NULL;

Sheet_teleportborn* Sheet_teleportborn::New() const {
  return new Sheet_teleportborn;
}

void Sheet_teleportborn::Clear() {
  teleportborn_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_teleportborn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.teleportborn teleportborn_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teleportborn_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teleportborn_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teleportborn_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_teleportborn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.teleportborn teleportborn_List = 1;
  for (int i = 0; i < this->teleportborn_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teleportborn_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_teleportborn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.teleportborn teleportborn_List = 1;
  for (int i = 0; i < this->teleportborn_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teleportborn_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_teleportborn::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.teleportborn teleportborn_List = 1;
  total_size += 1 * this->teleportborn_list_size();
  for (int i = 0; i < this->teleportborn_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teleportborn_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_teleportborn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_teleportborn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_teleportborn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_teleportborn::MergeFrom(const Sheet_teleportborn& from) {
  GOOGLE_CHECK_NE(&from, this);
  teleportborn_list_.MergeFrom(from.teleportborn_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_teleportborn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_teleportborn::CopyFrom(const Sheet_teleportborn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_teleportborn::IsInitialized() const {

  return true;
}

void Sheet_teleportborn::Swap(Sheet_teleportborn* other) {
  if (other != this) {
    teleportborn_list_.Swap(&other->teleportborn_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_teleportborn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_teleportborn_descriptor_;
  metadata.reflection = Sheet_teleportborn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int teleportteleport::kTeleportIDFieldNumber;
const int teleportteleport::kTeleportTypeFieldNumber;
const int teleportteleport::kNameFieldNumber;
const int teleportteleport::kMonsterIdFieldNumber;
const int teleportteleport::kShowConditionFieldNumber;
const int teleportteleport::kConditionValueFieldNumber;
const int teleportteleport::kCanEnterFieldNumber;
const int teleportteleport::kShowPathIDFieldNumber;
const int teleportteleport::kToPathIDFieldNumber;
const int teleportteleport::kToDuplicateIdFieldNumber;
const int teleportteleport::kEnterCostFieldNumber;
const int teleportteleport::kTrigRangeFieldNumber;
const int teleportteleport::kLivingTimeFieldNumber;
const int teleportteleport::kOpenChatIdFieldNumber;
const int teleportteleport::kProgressChatIdFieldNumber;
#endif  // !_MSC_VER

teleportteleport::teleportteleport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void teleportteleport::InitAsDefaultInstance() {
}

teleportteleport::teleportteleport(const teleportteleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void teleportteleport::SharedCtor() {
  _cached_size_ = 0;
  teleportid_ = GOOGLE_LONGLONG(0);
  teleporttype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monsterid_ = GOOGLE_LONGLONG(0);
  showcondition_ = 0;
  conditionvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  canenter_ = 0;
  showpathid_ = GOOGLE_LONGLONG(0);
  topathid_ = GOOGLE_LONGLONG(0);
  toduplicateid_ = GOOGLE_LONGLONG(0);
  entercost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trigrange_ = 0;
  livingtime_ = 0;
  openchatid_ = GOOGLE_LONGLONG(0);
  progresschatid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

teleportteleport::~teleportteleport() {
  SharedDtor();
}

void teleportteleport::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (conditionvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete conditionvalue_;
  }
  if (entercost_ != &::google::protobuf::internal::kEmptyString) {
    delete entercost_;
  }
  if (this != default_instance_) {
  }
}

void teleportteleport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* teleportteleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return teleportteleport_descriptor_;
}

const teleportteleport& teleportteleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teleport_2eproto();
  return *default_instance_;
}

teleportteleport* teleportteleport::default_instance_ = NULL;

teleportteleport* teleportteleport::New() const {
  return new teleportteleport;
}

void teleportteleport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teleportid_ = GOOGLE_LONGLONG(0);
    teleporttype_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    monsterid_ = GOOGLE_LONGLONG(0);
    showcondition_ = 0;
    if (has_conditionvalue()) {
      if (conditionvalue_ != &::google::protobuf::internal::kEmptyString) {
        conditionvalue_->clear();
      }
    }
    canenter_ = 0;
    showpathid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    topathid_ = GOOGLE_LONGLONG(0);
    toduplicateid_ = GOOGLE_LONGLONG(0);
    if (has_entercost()) {
      if (entercost_ != &::google::protobuf::internal::kEmptyString) {
        entercost_->clear();
      }
    }
    trigrange_ = 0;
    livingtime_ = 0;
    openchatid_ = GOOGLE_LONGLONG(0);
    progresschatid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool teleportteleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 teleportID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teleportid_)));
          set_has_teleportid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teleportType;
        break;
      }

      // optional int32 teleportType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teleportType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teleporttype_)));
          set_has_teleporttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monsterId;
        break;
      }

      // optional int64 monsterId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showCondition;
        break;
      }

      // optional int32 showCondition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showcondition_)));
          set_has_showcondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_conditionValue;
        break;
      }

      // optional string conditionValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conditionValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conditionvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conditionvalue().data(), this->conditionvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_canEnter;
        break;
      }

      // optional int32 canEnter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canenter_)));
          set_has_canenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_showPathID;
        break;
      }

      // optional int64 showPathID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showPathID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &showpathid_)));
          set_has_showpathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_toPathID;
        break;
      }

      // optional int64 toPathID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPathID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &topathid_)));
          set_has_topathid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_toDuplicateId;
        break;
      }

      // optional int64 toDuplicateId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toDuplicateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &toduplicateid_)));
          set_has_toduplicateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_enterCost;
        break;
      }

      // optional string enterCost = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enterCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entercost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entercost().data(), this->entercost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_trigRange;
        break;
      }

      // optional int32 trigRange = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trigRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigrange_)));
          set_has_trigrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_livingTime;
        break;
      }

      // optional int32 livingTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_livingTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &livingtime_)));
          set_has_livingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_openChatId;
        break;
      }

      // optional int64 openChatId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openChatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &openchatid_)));
          set_has_openchatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_progressChatId;
        break;
      }

      // optional int64 progressChatId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progressChatId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &progresschatid_)));
          set_has_progresschatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void teleportteleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 teleportID = 1;
  if (has_teleportid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teleportid(), output);
  }

  // optional int32 teleportType = 2;
  if (has_teleporttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teleporttype(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int64 monsterId = 4;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->monsterid(), output);
  }

  // optional int32 showCondition = 5;
  if (has_showcondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showcondition(), output);
  }

  // optional string conditionValue = 6;
  if (has_conditionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conditionvalue().data(), this->conditionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->conditionvalue(), output);
  }

  // optional int32 canEnter = 7;
  if (has_canenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->canenter(), output);
  }

  // optional int64 showPathID = 8;
  if (has_showpathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->showpathid(), output);
  }

  // optional int64 toPathID = 9;
  if (has_topathid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->topathid(), output);
  }

  // optional int64 toDuplicateId = 10;
  if (has_toduplicateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->toduplicateid(), output);
  }

  // optional string enterCost = 11;
  if (has_entercost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entercost().data(), this->entercost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->entercost(), output);
  }

  // optional int32 trigRange = 12;
  if (has_trigrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->trigrange(), output);
  }

  // optional int32 livingTime = 13;
  if (has_livingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->livingtime(), output);
  }

  // optional int64 openChatId = 14;
  if (has_openchatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->openchatid(), output);
  }

  // optional int64 progressChatId = 15;
  if (has_progresschatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->progresschatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* teleportteleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 teleportID = 1;
  if (has_teleportid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teleportid(), target);
  }

  // optional int32 teleportType = 2;
  if (has_teleporttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teleporttype(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int64 monsterId = 4;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->monsterid(), target);
  }

  // optional int32 showCondition = 5;
  if (has_showcondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->showcondition(), target);
  }

  // optional string conditionValue = 6;
  if (has_conditionvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conditionvalue().data(), this->conditionvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->conditionvalue(), target);
  }

  // optional int32 canEnter = 7;
  if (has_canenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->canenter(), target);
  }

  // optional int64 showPathID = 8;
  if (has_showpathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->showpathid(), target);
  }

  // optional int64 toPathID = 9;
  if (has_topathid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->topathid(), target);
  }

  // optional int64 toDuplicateId = 10;
  if (has_toduplicateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->toduplicateid(), target);
  }

  // optional string enterCost = 11;
  if (has_entercost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entercost().data(), this->entercost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->entercost(), target);
  }

  // optional int32 trigRange = 12;
  if (has_trigrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->trigrange(), target);
  }

  // optional int32 livingTime = 13;
  if (has_livingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->livingtime(), target);
  }

  // optional int64 openChatId = 14;
  if (has_openchatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->openchatid(), target);
  }

  // optional int64 progressChatId = 15;
  if (has_progresschatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->progresschatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int teleportteleport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 teleportID = 1;
    if (has_teleportid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teleportid());
    }

    // optional int32 teleportType = 2;
    if (has_teleporttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teleporttype());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 monsterId = 4;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional int32 showCondition = 5;
    if (has_showcondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showcondition());
    }

    // optional string conditionValue = 6;
    if (has_conditionvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conditionvalue());
    }

    // optional int32 canEnter = 7;
    if (has_canenter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canenter());
    }

    // optional int64 showPathID = 8;
    if (has_showpathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->showpathid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 toPathID = 9;
    if (has_topathid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->topathid());
    }

    // optional int64 toDuplicateId = 10;
    if (has_toduplicateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->toduplicateid());
    }

    // optional string enterCost = 11;
    if (has_entercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entercost());
    }

    // optional int32 trigRange = 12;
    if (has_trigrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigrange());
    }

    // optional int32 livingTime = 13;
    if (has_livingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->livingtime());
    }

    // optional int64 openChatId = 14;
    if (has_openchatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->openchatid());
    }

    // optional int64 progressChatId = 15;
    if (has_progresschatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->progresschatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void teleportteleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const teleportteleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const teleportteleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void teleportteleport::MergeFrom(const teleportteleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teleportid()) {
      set_teleportid(from.teleportid());
    }
    if (from.has_teleporttype()) {
      set_teleporttype(from.teleporttype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_showcondition()) {
      set_showcondition(from.showcondition());
    }
    if (from.has_conditionvalue()) {
      set_conditionvalue(from.conditionvalue());
    }
    if (from.has_canenter()) {
      set_canenter(from.canenter());
    }
    if (from.has_showpathid()) {
      set_showpathid(from.showpathid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topathid()) {
      set_topathid(from.topathid());
    }
    if (from.has_toduplicateid()) {
      set_toduplicateid(from.toduplicateid());
    }
    if (from.has_entercost()) {
      set_entercost(from.entercost());
    }
    if (from.has_trigrange()) {
      set_trigrange(from.trigrange());
    }
    if (from.has_livingtime()) {
      set_livingtime(from.livingtime());
    }
    if (from.has_openchatid()) {
      set_openchatid(from.openchatid());
    }
    if (from.has_progresschatid()) {
      set_progresschatid(from.progresschatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void teleportteleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void teleportteleport::CopyFrom(const teleportteleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool teleportteleport::IsInitialized() const {

  return true;
}

void teleportteleport::Swap(teleportteleport* other) {
  if (other != this) {
    std::swap(teleportid_, other->teleportid_);
    std::swap(teleporttype_, other->teleporttype_);
    std::swap(name_, other->name_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(showcondition_, other->showcondition_);
    std::swap(conditionvalue_, other->conditionvalue_);
    std::swap(canenter_, other->canenter_);
    std::swap(showpathid_, other->showpathid_);
    std::swap(topathid_, other->topathid_);
    std::swap(toduplicateid_, other->toduplicateid_);
    std::swap(entercost_, other->entercost_);
    std::swap(trigrange_, other->trigrange_);
    std::swap(livingtime_, other->livingtime_);
    std::swap(openchatid_, other->openchatid_);
    std::swap(progresschatid_, other->progresschatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata teleportteleport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = teleportteleport_descriptor_;
  metadata.reflection = teleportteleport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_teleportteleport::kTeleportteleportListFieldNumber;
#endif  // !_MSC_VER

Sheet_teleportteleport::Sheet_teleportteleport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_teleportteleport::InitAsDefaultInstance() {
}

Sheet_teleportteleport::Sheet_teleportteleport(const Sheet_teleportteleport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_teleportteleport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_teleportteleport::~Sheet_teleportteleport() {
  SharedDtor();
}

void Sheet_teleportteleport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_teleportteleport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_teleportteleport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_teleportteleport_descriptor_;
}

const Sheet_teleportteleport& Sheet_teleportteleport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_teleport_2eproto();
  return *default_instance_;
}

Sheet_teleportteleport* Sheet_teleportteleport::default_instance_ = NULL;

Sheet_teleportteleport* Sheet_teleportteleport::New() const {
  return new Sheet_teleportteleport;
}

void Sheet_teleportteleport::Clear() {
  teleportteleport_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_teleportteleport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.teleportteleport teleportteleport_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teleportteleport_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teleportteleport_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teleportteleport_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_teleportteleport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.teleportteleport teleportteleport_List = 1;
  for (int i = 0; i < this->teleportteleport_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teleportteleport_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_teleportteleport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.teleportteleport teleportteleport_List = 1;
  for (int i = 0; i < this->teleportteleport_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teleportteleport_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_teleportteleport::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.teleportteleport teleportteleport_List = 1;
  total_size += 1 * this->teleportteleport_list_size();
  for (int i = 0; i < this->teleportteleport_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teleportteleport_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_teleportteleport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_teleportteleport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_teleportteleport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_teleportteleport::MergeFrom(const Sheet_teleportteleport& from) {
  GOOGLE_CHECK_NE(&from, this);
  teleportteleport_list_.MergeFrom(from.teleportteleport_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_teleportteleport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_teleportteleport::CopyFrom(const Sheet_teleportteleport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_teleportteleport::IsInitialized() const {

  return true;
}

void Sheet_teleportteleport::Swap(Sheet_teleportteleport* other) {
  if (other != this) {
    teleportteleport_list_.Swap(&other->teleportteleport_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_teleportteleport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_teleportteleport_descriptor_;
  metadata.reflection = Sheet_teleportteleport_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
