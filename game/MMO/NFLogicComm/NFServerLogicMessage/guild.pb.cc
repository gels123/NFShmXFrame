// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: guild.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "guild.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* guildconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildlevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildlevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildlevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildlevel_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildcollege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildcollege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildcollege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildcollege_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildposition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildposition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildposition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildposition_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildhouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildhouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildhouse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildhouse_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildguildance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildguildance_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildguildance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildguildance_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildwarconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildwarconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildwarconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildwarconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildwarmorale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildwarmorale_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildwarmorale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildwarmorale_reflection_ = NULL;
const ::google::protobuf::Descriptor* guildwarrevive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  guildwarrevive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_guildwarrevive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_guildwarrevive_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_guild_2eproto() {
  protobuf_AddDesc_guild_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "guild.proto");
  GOOGLE_CHECK(file != NULL);
  guildconstant_descriptor_ = file->message_type(0);
  static const int guildconstant_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, setdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, editrequirelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, leavecoolingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, houselimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, expid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, housescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, giftcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, autocleancellnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, dismiss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, transferguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, initialautocleanqs_),
  };
  guildconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildconstant_descriptor_,
      guildconstant::default_instance_,
      guildconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildconstant));
  Sheet_guildconstant_descriptor_ = file->message_type(1);
  static const int Sheet_guildconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildconstant, guildconstant_list_),
  };
  Sheet_guildconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildconstant_descriptor_,
      Sheet_guildconstant::default_instance_,
      Sheet_guildconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildconstant));
  guildlevel_descriptor_ = file->message_type(2);
  static const int guildlevel_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, guildlevel_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, guildlevel_member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, guildlevel_vp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, guildlevel_np_),
  };
  guildlevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildlevel_descriptor_,
      guildlevel::default_instance_,
      guildlevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildlevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildlevel));
  Sheet_guildlevel_descriptor_ = file->message_type(3);
  static const int Sheet_guildlevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildlevel, guildlevel_list_),
  };
  Sheet_guildlevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildlevel_descriptor_,
      Sheet_guildlevel::default_instance_,
      Sheet_guildlevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildlevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildlevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildlevel));
  guildcollege_descriptor_ = file->message_type(4);
  static const int guildcollege_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, practiceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, practicetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, learningneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, practicelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, playerlevellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, attributeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, attributegain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, costcontribute_),
  };
  guildcollege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildcollege_descriptor_,
      guildcollege::default_instance_,
      guildcollege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildcollege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildcollege));
  Sheet_guildcollege_descriptor_ = file->message_type(5);
  static const int Sheet_guildcollege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildcollege, guildcollege_list_),
  };
  Sheet_guildcollege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildcollege_descriptor_,
      Sheet_guildcollege::default_instance_,
      Sheet_guildcollege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildcollege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildcollege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildcollege));
  guildposition_descriptor_ = file->message_type(6);
  static const int guildposition_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, allotmaterials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, admitnewcomer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, appointandremovevp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, appointandremoveelder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, expelvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, expelelder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, expelmass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, announcementediting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, joincondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, guildactivity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, dissolveassignguild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, changename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, automaticcleandisplay_),
  };
  guildposition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildposition_descriptor_,
      guildposition::default_instance_,
      guildposition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildposition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildposition));
  Sheet_guildposition_descriptor_ = file->message_type(7);
  static const int Sheet_guildposition_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildposition, guildposition_list_),
  };
  Sheet_guildposition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildposition_descriptor_,
      Sheet_guildposition::default_instance_,
      Sheet_guildposition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildposition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildposition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildposition));
  guildhouse_descriptor_ = file->message_type(8);
  static const int guildhouse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, housescore_),
  };
  guildhouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildhouse_descriptor_,
      guildhouse::default_instance_,
      guildhouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildhouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildhouse));
  Sheet_guildhouse_descriptor_ = file->message_type(9);
  static const int Sheet_guildhouse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildhouse, guildhouse_list_),
  };
  Sheet_guildhouse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildhouse_descriptor_,
      Sheet_guildhouse::default_instance_,
      Sheet_guildhouse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildhouse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildhouse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildhouse));
  guildgift_descriptor_ = file->message_type(10);
  static const int guildgift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, num_),
  };
  guildgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildgift_descriptor_,
      guildgift::default_instance_,
      guildgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildgift));
  Sheet_guildgift_descriptor_ = file->message_type(11);
  static const int Sheet_guildgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildgift, guildgift_list_),
  };
  Sheet_guildgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildgift_descriptor_,
      Sheet_guildgift::default_instance_,
      Sheet_guildgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildgift));
  guildguildance_descriptor_ = file->message_type(12);
  static const int guildguildance_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, guidanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, guidancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, triggertpye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, cognatenpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, cognateui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, cognateactiveid_),
  };
  guildguildance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildguildance_descriptor_,
      guildguildance::default_instance_,
      guildguildance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildguildance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildguildance));
  Sheet_guildguildance_descriptor_ = file->message_type(13);
  static const int Sheet_guildguildance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildguildance, guildguildance_list_),
  };
  Sheet_guildguildance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildguildance_descriptor_,
      Sheet_guildguildance::default_instance_,
      Sheet_guildguildance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildguildance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildguildance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildguildance));
  guildwarconstant_descriptor_ = file->message_type(14);
  static const int guildwarconstant_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, warid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, signopencycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, signopentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, signclosedcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, signclosedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, enteropencycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, enteropentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, enterclosedcycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, enterclosedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarbasescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarwinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarlosescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwardrawscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, maxmaterial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, soldiercostmaterial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, soldiernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, soldiercd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, renewbasecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, renewbasehp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, renewbasecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, revivecd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarwinitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarloseitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarlosenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwardrawitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwardrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, materialid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, materialconversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, guildwarexp_),
  };
  guildwarconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildwarconstant_descriptor_,
      guildwarconstant::default_instance_,
      guildwarconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildwarconstant));
  Sheet_guildwarconstant_descriptor_ = file->message_type(15);
  static const int Sheet_guildwarconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarconstant, guildwarconstant_list_),
  };
  Sheet_guildwarconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildwarconstant_descriptor_,
      Sheet_guildwarconstant::default_instance_,
      Sheet_guildwarconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildwarconstant));
  guildwarmorale_descriptor_ = file->message_type(16);
  static const int guildwarmorale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, moralelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, costmaterial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, skilllevel_),
  };
  guildwarmorale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildwarmorale_descriptor_,
      guildwarmorale::default_instance_,
      guildwarmorale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarmorale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildwarmorale));
  Sheet_guildwarmorale_descriptor_ = file->message_type(17);
  static const int Sheet_guildwarmorale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarmorale, guildwarmorale_list_),
  };
  Sheet_guildwarmorale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildwarmorale_descriptor_,
      Sheet_guildwarmorale::default_instance_,
      Sheet_guildwarmorale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarmorale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarmorale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildwarmorale));
  guildwarrevive_descriptor_ = file->message_type(18);
  static const int guildwarrevive_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarrevive, revivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarrevive, revivecost_),
  };
  guildwarrevive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      guildwarrevive_descriptor_,
      guildwarrevive::default_instance_,
      guildwarrevive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarrevive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(guildwarrevive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(guildwarrevive));
  Sheet_guildwarrevive_descriptor_ = file->message_type(19);
  static const int Sheet_guildwarrevive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarrevive, guildwarrevive_list_),
  };
  Sheet_guildwarrevive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_guildwarrevive_descriptor_,
      Sheet_guildwarrevive::default_instance_,
      Sheet_guildwarrevive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarrevive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_guildwarrevive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_guildwarrevive));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_guild_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildconstant_descriptor_, &guildconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildconstant_descriptor_, &Sheet_guildconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildlevel_descriptor_, &guildlevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildlevel_descriptor_, &Sheet_guildlevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildcollege_descriptor_, &guildcollege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildcollege_descriptor_, &Sheet_guildcollege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildposition_descriptor_, &guildposition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildposition_descriptor_, &Sheet_guildposition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildhouse_descriptor_, &guildhouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildhouse_descriptor_, &Sheet_guildhouse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildgift_descriptor_, &guildgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildgift_descriptor_, &Sheet_guildgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildguildance_descriptor_, &guildguildance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildguildance_descriptor_, &Sheet_guildguildance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildwarconstant_descriptor_, &guildwarconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildwarconstant_descriptor_, &Sheet_guildwarconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildwarmorale_descriptor_, &guildwarmorale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildwarmorale_descriptor_, &Sheet_guildwarmorale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    guildwarrevive_descriptor_, &guildwarrevive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_guildwarrevive_descriptor_, &Sheet_guildwarrevive::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_guild_2eproto() {
  delete guildconstant::default_instance_;
  delete guildconstant_reflection_;
  delete Sheet_guildconstant::default_instance_;
  delete Sheet_guildconstant_reflection_;
  delete guildlevel::default_instance_;
  delete guildlevel_reflection_;
  delete Sheet_guildlevel::default_instance_;
  delete Sheet_guildlevel_reflection_;
  delete guildcollege::default_instance_;
  delete guildcollege_reflection_;
  delete Sheet_guildcollege::default_instance_;
  delete Sheet_guildcollege_reflection_;
  delete guildposition::default_instance_;
  delete guildposition_reflection_;
  delete Sheet_guildposition::default_instance_;
  delete Sheet_guildposition_reflection_;
  delete guildhouse::default_instance_;
  delete guildhouse_reflection_;
  delete Sheet_guildhouse::default_instance_;
  delete Sheet_guildhouse_reflection_;
  delete guildgift::default_instance_;
  delete guildgift_reflection_;
  delete Sheet_guildgift::default_instance_;
  delete Sheet_guildgift_reflection_;
  delete guildguildance::default_instance_;
  delete guildguildance_reflection_;
  delete Sheet_guildguildance::default_instance_;
  delete Sheet_guildguildance_reflection_;
  delete guildwarconstant::default_instance_;
  delete guildwarconstant_reflection_;
  delete Sheet_guildwarconstant::default_instance_;
  delete Sheet_guildwarconstant_reflection_;
  delete guildwarmorale::default_instance_;
  delete guildwarmorale_reflection_;
  delete Sheet_guildwarmorale::default_instance_;
  delete Sheet_guildwarmorale_reflection_;
  delete guildwarrevive::default_instance_;
  delete guildwarrevive_reflection_;
  delete Sheet_guildwarrevive::default_instance_;
  delete Sheet_guildwarrevive_reflection_;
}

void protobuf_AddDesc_guild_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013guild.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"\250\005\n\rguildconstant\022 \n\nconstantid\030\001"
    " \001(\003B\014\302\377\024\010\351\205\215\347\275\256id\0220\n\nsetDiamond\030\002 \001(\005B\034"
    "\302\377\024\030\345\210\233\345\273\272\345\205\254\344\274\232\351\234\200\350\246\201\351\222\273\347\237\263\0221\n\013offlineT"
    "ime\030\003 \001(\005B\034\302\377\024\030\346\257\217\346\227\245\351\242\206\345\217\226\345\206\245\346\203\263\346\227\266\351\225\277\022"
    "\?\n\rEditRequireLV\030\004 \001(\005B(\302\377\024$\344\277\256\346\224\271\345\205\254\344\274\232"
    "\345\205\254\345\221\212\350\246\201\346\261\202\345\205\254\345\221\212\347\255\211\347\272\247\022\?\n\020leaveCooling"
    "time\030\005 \001(\005B%\302\377\024!\345\206\215\346\254\241\345\212\240\345\205\245\345\205\254\344\274\232\347\232\204\345\206\267"
    "\345\215\264\346\227\266\351\227\264\022*\n\nhouseLimit\030\006 \001(\005B\026\302\377\024\022\344\273\223\345\272"
    "\223\347\211\251\345\223\201\344\270\212\351\231\220\022$\n\005expID\030\007 \001(\003B\025\302\377\024\021\345\245\221\347\201\265"
    "\347\273\217\351\252\214\344\270\271ID\0226\n\nhouseScore\030\010 \001(\005B\"\302\377\024\036\345\245\221"
    "\347\201\265\347\273\217\351\252\214\344\270\271\347\232\204\344\273\223\345\272\223\347\247\257\345\210\206\022&\n\006giftCD\030\t "
    "\001(\005B\026\302\377\024\022\347\272\242\345\214\205\346\270\205\347\220\206\346\227\266\351\227\264\022\?\n\020autoClean"
    "CellNum\030\n \001(\005B%\302\377\024!\350\247\246\345\217\221\350\207\252\345\212\250\346\270\205\347\220\206\344\275\231"
    "\346\240\274\345\255\220\346\225\260\351\207\217\022\'\n\007dismiss\030\013 \001(\005B\026\302\377\024\022\350\247\243\346\225"
    "\243\345\205\254\344\274\232\346\227\266\351\227\264\022-\n\rtransferGuild\030\014 \001(\005B\026\302\377"
    "\024\022\350\275\254\347\247\273\344\274\232\351\225\277\346\227\266\351\227\264\022C\n\022initialAutoClean"
    "QS\030\r \003(\tB\'\302\377\024\033\351\273\230\350\256\244\346\270\205\347\220\206\347\232\204\345\223\201\350\264\250\346\230\237\347\272"
    "\247\210\301\024\002\220\301\024<\"P\n\023Sheet_guildconstant\0229\n\022guil"
    "dconstant_List\030\001 \003(\0132\027.proto_ff.guildcon"
    "stantB\004\210\301\024\024\"\366\001\n\nguildlevel\022$\n\nguildLevel"
    "\030\001 \001(\005B\020\302\377\024\014\345\205\254\344\274\232\347\255\211\347\272\247\022.\n\016guildLevel_E"
    "XP\030\002 \001(\005B\026\302\377\024\022\345\205\254\344\274\232\345\215\207\347\272\247\347\273\217\351\252\214\0224\n\021guil"
    "dLevel_member\030\003 \001(\005B\031\302\377\024\025\345\205\254\344\274\232\346\210\220\345\221\230\346\200\273"
    "\344\272\272\346\225\260\0220\n\rguildLevel_VP\030\004 \001(\005B\031\302\377\024\025\345\205\254\344\274"
    "\232\345\211\257\344\274\232\351\225\277\344\272\272\346\225\260\022*\n\rguildLevel_NP\030\005 \001(\005B"
    "\023\302\377\024\017\345\205\254\344\274\232\351\225\277\350\200\201\346\225\260\"G\n\020Sheet_guildlevel"
    "\0223\n\017guildlevel_List\030\001 \003(\0132\024.proto_ff.gui"
    "ldlevelB\004\210\301\024\024\"\371\002\n\014guildcollege\022$\n\npracti"
    "ceId\030\001 \001(\003B\020\302\377\024\014\345\277\203\346\263\225\347\274\226\345\217\267\022&\n\014practice"
    "Type\030\002 \001(\005B\020\302\377\024\014\345\277\203\346\263\225\347\261\273\345\236\213\0228\n\014learning"
    "Need\030\003 \001(\005B\"\302\377\024\036\345\274\200\346\224\276\345\255\246\344\271\240\351\234\200\346\261\202\345\205\254\344\274\232"
    "\347\255\211\347\272\247\022\'\n\rpracticeLevel\030\004 \001(\005B\020\302\377\024\014\345\277\203\346\263"
    "\225\347\255\211\347\272\247\0220\n\020playerLevelLimit\030\005 \001(\005B\026\302\377\024\022\350"
    "\246\201\346\261\202\347\216\251\345\256\266\347\255\211\347\272\247\022\'\n\013attributeId\030\006 \001(\005B\022"
    "\302\377\024\016\345\277\203\346\263\225\345\261\236\346\200\247ID\022-\n\rattributeGain\030\007 \001("
    "\005B\026\302\377\024\022\345\277\203\346\263\225\345\261\236\346\200\247\345\242\236\347\233\212\022.\n\016CostContrib"
    "ute\030\010 \001(\005B\026\302\377\024\022\345\277\203\346\263\225\346\266\210\350\200\227\350\264\241\347\214\256\"N\n\022She"
    "et_guildcollege\0228\n\021guildcollege_List\030\001 \003"
    "(\0132\026.proto_ff.guildcollegeB\005\210\301\024\360.\"\346\005\n\rgu"
    "ildposition\022 \n\npositionId\030\001 \001(\003B\014\302\377\024\010\350\201\214"
    "\344\275\215ID\022&\n\014positionType\030\002 \001(\005B\020\302\377\024\014\350\201\214\344\275\215\347"
    "\261\273\345\236\213\0221\n\016allotMaterials\030\003 \001(\005B\031\302\377\024\025\345\210\206\351\205"
    "\215\345\205\254\344\274\232\346\210\230\345\210\251\345\223\201\022*\n\radmitNewcomer\030\004 \001(\005B"
    "\023\302\377\024\017\346\216\245\346\224\266\346\226\260\346\210\220\345\221\230\0226\n\022appointAndRemove"
    "VP\030\005 \001(\005B\032\302\377\024\026\344\273\273\345\221\275/\350\247\243\351\231\244\345\211\257\344\274\232\351\225\277\0226\n\025"
    "appointAndRemoveElder\030\006 \001(\005B\027\302\377\024\023\344\273\273\345\221\275/"
    "\350\247\243\351\231\244\351\225\277\350\200\201\022$\n\007expelVP\030\007 \001(\005B\023\302\377\024\017\350\270\242\345\207"
    "\272\345\211\257\344\274\232\351\225\277\022$\n\nexpelElder\030\010 \001(\005B\020\302\377\024\014\350\270\242\345"
    "\207\272\351\225\277\350\200\201\022)\n\texpelMass\030\t \001(\005B\026\302\377\024\022\350\270\242\345\207\272\346"
    "\231\256\351\200\232\346\210\220\345\221\230\022-\n\023announcementEditing\030\n \001(\005"
    "B\020\302\377\024\014\347\274\226\350\276\221\345\205\254\345\221\212\022-\n\rjoinCondition\030\013 \001("
    "\005B\026\302\377\024\022\350\256\276\347\275\256\345\212\240\345\205\245\346\226\271\345\274\217\022-\n\rguildActivi"
    "ty\030\014 \001(\005B\026\302\377\024\022\345\274\200\345\220\257\345\205\254\344\274\232\347\216\251\346\263\225\0224\n\023diss"
    "olveAssignGuild\030\r \001(\005B\027\302\377\024\023\350\247\243\346\225\243/\350\275\254\350\256\251"
    "\345\205\254\344\274\232\022\037\n\005clear\030\016 \001(\005B\020\302\377\024\014\346\270\205\347\220\206\344\273\223\345\272\223\022"
    "$\n\nchangeName\030\017 \001(\005B\020\302\377\024\014\346\224\271\345\220\215\346\235\203\351\231\220\022;\n"
    "\025automaticCleanDisplay\030\020 \001(\005B\034\302\377\024\030\350\207\252\345\212\250"
    "\346\270\205\347\220\206\350\256\276\347\275\256\346\235\203\351\231\220\"P\n\023Sheet_guildpositio"
    "n\0229\n\022guildposition_List\030\001 \003(\0132\027.proto_ff"
    ".guildpositionB\004\210\301\024\024\"\226\001\n\nguildhouse\022\030\n\002I"
    "D\030\001 \001(\003B\014\302\377\024\010\345\205\221\346\215\242ID\022%\n\013wearQuality\030\002 \001"
    "(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022!\n\007quality\030\003 \001(\005B\020\302"
    "\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\022$\n\nhouseScore\030\004 \001(\005B\020\302\377\024"
    "\014\344\273\223\345\272\223\347\247\257\345\210\206\"H\n\020Sheet_guildhouse\0224\n\017gui"
    "ldhouse_List\030\001 \003(\0132\024.proto_ff.guildhouse"
    "B\005\210\301\024\310\001\"\205\001\n\tguildgift\022\030\n\002ID\030\001 \001(\003B\014\302\377\024\010\347"
    "\272\242\345\214\205ID\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\347\272\242\345\214\205\347\261\273\345\236\213\022"
    "\037\n\005money\030\003 \001(\005B\020\302\377\024\014\347\272\242\345\214\205\351\207\221\351\242\235\022\035\n\003num\030"
    "\004 \001(\005B\020\302\377\024\014\347\272\242\345\214\205\344\273\275\346\225\260\"D\n\017Sheet_guildgi"
    "ft\0221\n\016guildgift_List\030\001 \003(\0132\023.proto_ff.gu"
    "ildgiftB\004\210\301\024(\"\236\002\n\016guildguildance\022 \n\nguid"
    "anceId\030\001 \001(\005B\014\302\377\024\010\346\214\207\345\274\225ID\022&\n\014guidanceTy"
    "pe\030\002 \001(\005B\020\302\377\024\014\346\214\207\345\274\225\347\261\273\345\236\213\022$\n\nlevelLimit"
    "\030\003 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\351\231\220\345\210\266\022%\n\013triggerTpye\030"
    "\004 \001(\005B\020\302\377\024\014\350\247\246\345\217\221\347\261\273\345\236\213\022#\n\014cognateNpcId\030"
    "\005 \001(\005B\r\302\377\024\t\345\205\263\350\201\224NPC\022#\n\tcognateUI\030\006 \001(\005B"
    "\020\302\377\024\014\345\205\263\350\201\224\351\235\242\346\235\277\022+\n\017cognateActiveId\030\007 \001"
    "(\005B\022\302\377\024\016\345\205\263\350\201\224\346\264\273\345\212\250ID\"S\n\024Sheet_guildgui"
    "ldance\022;\n\023guildguildance_List\030\001 \003(\0132\030.pr"
    "oto_ff.guildguildanceB\004\210\301\024\024\"\372\r\n\020guildwar"
    "constant\022\033\n\005warid\030\001 \001(\003B\014\302\377\024\010\351\205\215\347\275\256id\0226\n"
    "\rsignopenCycle\030\002 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\346\212\245\345\220"
    "\215\345\274\200\345\220\257\346\227\245\346\234\237\0229\n\014signopenTime\030\003 \001(\tB#\302\377\024"
    "\033\345\205\254\344\274\232\346\210\230\346\212\245\345\220\215\345\274\200\345\220\257\346\227\266\351\227\264\220\301\024<\0228\n\017sign"
    "closedCycle\030\004 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\346\212\245\345\220\215\347\273"
    "\223\346\235\237\346\227\245\346\234\237\022;\n\016signclosedTime\030\005 \001(\tB#\302\377\024\033"
    "\345\205\254\344\274\232\346\210\230\346\212\245\345\220\215\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024<\022-\n\rguild"
    "Position\030\006 \001(\005B\026\302\377\024\022\350\246\201\346\261\202\345\205\254\344\274\232\350\201\214\344\275\215\022("
    "\n\010guildNum\030\007 \001(\005B\026\302\377\024\022\350\246\201\346\261\202\345\205\254\344\274\232\344\272\272\346\225\260"
    "\022*\n\nguildLevel\030\010 \001(\005B\026\302\377\024\022\350\246\201\346\261\202\345\205\254\344\274\232\347\255"
    "\211\347\272\247\0227\n\016enteropenCycle\030\t \001(\005B\037\302\377\024\033\345\205\254\344\274\232"
    "\346\210\230\350\277\233\345\205\245\345\274\200\345\220\257\346\227\245\346\234\237\022:\n\renteropenTime\030\n"
    " \001(\tB#\302\377\024\033\345\205\254\344\274\232\346\210\230\350\277\233\345\205\245\345\274\200\345\220\257\346\227\266\351\227\264\220\301\024"
    "<\0229\n\020enterclosedCycle\030\013 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346"
    "\210\230\350\277\233\345\205\245\347\273\223\346\235\237\346\227\245\346\234\237\022<\n\017enterclosedTime\030"
    "\014 \001(\tB#\302\377\024\033\345\205\254\344\274\232\346\210\230\350\277\233\345\205\245\347\273\223\346\235\237\346\227\266\351\227\264\220\301"
    "\024<\0224\n\021guildwarBaseScore\030\r \001(\005B\031\302\377\024\025\345\205\254\344\274"
    "\232\346\210\230\345\210\235\345\247\213\345\210\206\346\225\260\0229\n\020guildwarWinScore\030\016 \001"
    "(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\350\203\234\345\210\251\350\216\267\345\276\227\345\210\206\346\225\260\022:\n\021g"
    "uildwarLoseScore\030\017 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\345\244\261"
    "\350\264\245\350\216\267\345\276\227\345\210\206\346\225\260\022:\n\021guildwarDrawScore\030\020 \001"
    "(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\345\271\263\345\261\200\350\216\267\345\276\227\345\210\206\346\225\260\022+\n\013m"
    "axMaterial\030\021 \001(\005B\026\302\377\024\022\347\211\251\350\265\204\345\255\230\345\202\250\344\270\212\351\231\220"
    "\0229\n\023soldierCostMaterial\030\022 \001(\005B\034\302\377\024\030\345\207\272\345\205"
    "\265\346\266\210\350\200\227\347\211\251\350\265\204\346\225\260\351\207\217\022*\n\nsoldierNum\030\023 \001(\005B"
    "\026\302\377\024\022\345\215\225\346\254\241\345\207\272\345\205\265\346\225\260\351\207\217\022)\n\tsoldierCD\030\024 \001"
    "(\005B\026\302\377\024\022\345\207\272\345\205\265\345\206\267\345\215\264\346\227\266\351\227\264\022-\n\rrenewBaseC"
    "ost\030\025 \001(\005B\026\302\377\024\022\346\201\242\345\244\215\345\237\272\345\234\260\346\266\210\350\200\227\0224\n\013ren"
    "ewBaseHP\030\026 \001(\005B\037\302\377\024\033\346\201\242\345\244\215\345\237\272\345\234\260\350\241\200\351\207\217\347\231"
    "\276\345\210\206\346\257\224\0221\n\013renewBaseCD\030\027 \001(\005B\034\302\377\024\030\345\237\272\345\234\260"
    "\346\201\242\345\244\215\345\206\267\345\215\264\346\227\266\351\227\264\022.\n\010reviveCD\030\030 \001(\005B\034\302\377"
    "\024\030\350\247\222\350\211\262\345\244\215\346\264\273\347\255\211\345\276\205\346\227\266\351\227\264\0228\n\017guildwarWi"
    "nItem\030\031 \001(\003B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\350\203\234\345\210\251\345\245\226\345\212\261\347\211"
    "\251\345\223\201\0227\n\016guildwarWinNum\030\032 \001(\005B\037\302\377\024\033\345\205\254\344\274\232"
    "\346\210\230\350\203\234\345\210\251\345\245\226\345\212\261\346\225\260\351\207\217\0229\n\020guildwarLoseIte"
    "m\030\033 \001(\003B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\345\244\261\350\264\245\345\245\226\345\212\261\347\211\251\345\223\201"
    "\0228\n\017guildwarLoseNum\030\034 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230"
    "\345\244\261\350\264\245\345\245\226\345\212\261\346\225\260\351\207\217\0229\n\020guildwarDrawItem\030\035"
    " \001(\003B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\345\271\263\345\261\200\345\245\226\345\212\261\347\211\251\345\223\201\0228\n"
    "\017guildwarDrawNum\030\036 \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\345\271\263"
    "\345\261\200\345\245\226\345\212\261\346\225\260\351\207\217\022)\n\nMaterialId\030\037 \001(\003B\025\302\377\024"
    "\021\345\205\254\344\274\232\346\210\230\350\265\204\346\272\220ID\022;\n\022MaterialConversion"
    "\030  \001(\005B\037\302\377\024\033\345\205\254\344\274\232\346\210\230\350\265\204\346\272\220\346\217\220\344\272\244\346\257\224\344\276\213\022"
    "7\n\013GuildWarExp\030! \001(\005B\"\302\377\024\036\345\205\254\344\274\232\346\210\230\345\245\226\345\212"
    "\261\347\273\217\351\252\214\344\270\207\345\210\206\346\257\224\"Y\n\026Sheet_guildwarconsta"
    "nt\022\?\n\025guildwarconstant_List\030\001 \003(\0132\032.prot"
    "o_ff.guildwarconstantB\004\210\301\024\024\"\252\001\n\016guildwar"
    "morale\022%\n\013moraleLevel\030\001 \001(\003B\020\302\377\024\014\345\243\253\346\260\224\347"
    "\255\211\347\272\247\022,\n\014costMaterial\030\002 \001(\005B\026\302\377\024\022\346\266\210\350\200\227\347"
    "\211\251\350\265\204\346\225\260\351\207\217\022\035\n\007skillId\030\003 \001(\003B\014\302\377\024\010\346\212\200\350\203\275"
    "ID\022$\n\nskillLevel\030\004 \001(\005B\020\302\377\024\014\346\212\200\350\203\275\347\255\211\347\272\247"
    "\"S\n\024Sheet_guildwarmorale\022;\n\023guildwarmora"
    "le_List\030\001 \003(\0132\030.proto_ff.guildwarmoraleB"
    "\004\210\301\024\024\"a\n\016guildwarrevive\022#\n\treviveNum\030\001 \001"
    "(\005B\020\302\377\024\014\345\244\215\346\264\273\346\254\241\346\225\260\022*\n\nreviveCost\030\002 \001(\005"
    "B\026\302\377\024\022\344\273\230\350\264\271\345\244\215\346\264\273\346\266\210\350\200\227\"S\n\024Sheet_guildw"
    "arrevive\022;\n\023guildwarrevive_List\030\001 \003(\0132\030."
    "proto_ff.guildwarreviveB\004\210\301\024\024", 5549);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "guild.proto", &protobuf_RegisterTypes);
  guildconstant::default_instance_ = new guildconstant();
  Sheet_guildconstant::default_instance_ = new Sheet_guildconstant();
  guildlevel::default_instance_ = new guildlevel();
  Sheet_guildlevel::default_instance_ = new Sheet_guildlevel();
  guildcollege::default_instance_ = new guildcollege();
  Sheet_guildcollege::default_instance_ = new Sheet_guildcollege();
  guildposition::default_instance_ = new guildposition();
  Sheet_guildposition::default_instance_ = new Sheet_guildposition();
  guildhouse::default_instance_ = new guildhouse();
  Sheet_guildhouse::default_instance_ = new Sheet_guildhouse();
  guildgift::default_instance_ = new guildgift();
  Sheet_guildgift::default_instance_ = new Sheet_guildgift();
  guildguildance::default_instance_ = new guildguildance();
  Sheet_guildguildance::default_instance_ = new Sheet_guildguildance();
  guildwarconstant::default_instance_ = new guildwarconstant();
  Sheet_guildwarconstant::default_instance_ = new Sheet_guildwarconstant();
  guildwarmorale::default_instance_ = new guildwarmorale();
  Sheet_guildwarmorale::default_instance_ = new Sheet_guildwarmorale();
  guildwarrevive::default_instance_ = new guildwarrevive();
  Sheet_guildwarrevive::default_instance_ = new Sheet_guildwarrevive();
  guildconstant::default_instance_->InitAsDefaultInstance();
  Sheet_guildconstant::default_instance_->InitAsDefaultInstance();
  guildlevel::default_instance_->InitAsDefaultInstance();
  Sheet_guildlevel::default_instance_->InitAsDefaultInstance();
  guildcollege::default_instance_->InitAsDefaultInstance();
  Sheet_guildcollege::default_instance_->InitAsDefaultInstance();
  guildposition::default_instance_->InitAsDefaultInstance();
  Sheet_guildposition::default_instance_->InitAsDefaultInstance();
  guildhouse::default_instance_->InitAsDefaultInstance();
  Sheet_guildhouse::default_instance_->InitAsDefaultInstance();
  guildgift::default_instance_->InitAsDefaultInstance();
  Sheet_guildgift::default_instance_->InitAsDefaultInstance();
  guildguildance::default_instance_->InitAsDefaultInstance();
  Sheet_guildguildance::default_instance_->InitAsDefaultInstance();
  guildwarconstant::default_instance_->InitAsDefaultInstance();
  Sheet_guildwarconstant::default_instance_->InitAsDefaultInstance();
  guildwarmorale::default_instance_->InitAsDefaultInstance();
  Sheet_guildwarmorale::default_instance_->InitAsDefaultInstance();
  guildwarrevive::default_instance_->InitAsDefaultInstance();
  Sheet_guildwarrevive::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_guild_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_guild_2eproto {
  StaticDescriptorInitializer_guild_2eproto() {
    protobuf_AddDesc_guild_2eproto();
  }
} static_descriptor_initializer_guild_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int guildconstant::kConstantidFieldNumber;
const int guildconstant::kSetDiamondFieldNumber;
const int guildconstant::kOfflineTimeFieldNumber;
const int guildconstant::kEditRequireLVFieldNumber;
const int guildconstant::kLeaveCoolingtimeFieldNumber;
const int guildconstant::kHouseLimitFieldNumber;
const int guildconstant::kExpIDFieldNumber;
const int guildconstant::kHouseScoreFieldNumber;
const int guildconstant::kGiftCDFieldNumber;
const int guildconstant::kAutoCleanCellNumFieldNumber;
const int guildconstant::kDismissFieldNumber;
const int guildconstant::kTransferGuildFieldNumber;
const int guildconstant::kInitialAutoCleanQSFieldNumber;
#endif  // !_MSC_VER

guildconstant::guildconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildconstant::InitAsDefaultInstance() {
}

guildconstant::guildconstant(const guildconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildconstant::SharedCtor() {
  _cached_size_ = 0;
  constantid_ = GOOGLE_LONGLONG(0);
  setdiamond_ = 0;
  offlinetime_ = 0;
  editrequirelv_ = 0;
  leavecoolingtime_ = 0;
  houselimit_ = 0;
  expid_ = GOOGLE_LONGLONG(0);
  housescore_ = 0;
  giftcd_ = 0;
  autocleancellnum_ = 0;
  dismiss_ = 0;
  transferguild_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildconstant::~guildconstant() {
  SharedDtor();
}

void guildconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildconstant_descriptor_;
}

const guildconstant& guildconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildconstant* guildconstant::default_instance_ = NULL;

guildconstant* guildconstant::New() const {
  return new guildconstant;
}

void guildconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    constantid_ = GOOGLE_LONGLONG(0);
    setdiamond_ = 0;
    offlinetime_ = 0;
    editrequirelv_ = 0;
    leavecoolingtime_ = 0;
    houselimit_ = 0;
    expid_ = GOOGLE_LONGLONG(0);
    housescore_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    giftcd_ = 0;
    autocleancellnum_ = 0;
    dismiss_ = 0;
    transferguild_ = 0;
  }
  initialautocleanqs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantid_)));
          set_has_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_setDiamond;
        break;
      }

      // optional int32 setDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_setDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &setdiamond_)));
          set_has_setdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offlineTime;
        break;
      }

      // optional int32 offlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EditRequireLV;
        break;
      }

      // optional int32 EditRequireLV = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EditRequireLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &editrequirelv_)));
          set_has_editrequirelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leaveCoolingtime;
        break;
      }

      // optional int32 leaveCoolingtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaveCoolingtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leavecoolingtime_)));
          set_has_leavecoolingtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_houseLimit;
        break;
      }

      // optional int32 houseLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_houseLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &houselimit_)));
          set_has_houselimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expID;
        break;
      }

      // optional int64 expID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expid_)));
          set_has_expid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_houseScore;
        break;
      }

      // optional int32 houseScore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_houseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &housescore_)));
          set_has_housescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_giftCD;
        break;
      }

      // optional int32 giftCD = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giftCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftcd_)));
          set_has_giftcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_autoCleanCellNum;
        break;
      }

      // optional int32 autoCleanCellNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autoCleanCellNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &autocleancellnum_)));
          set_has_autocleancellnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dismiss;
        break;
      }

      // optional int32 dismiss = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dismiss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dismiss_)));
          set_has_dismiss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_transferGuild;
        break;
      }

      // optional int32 transferGuild = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transferGuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transferguild_)));
          set_has_transferguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_initialAutoCleanQS;
        break;
      }

      // repeated string initialAutoCleanQS = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initialAutoCleanQS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_initialautocleanqs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->initialautocleanqs(this->initialautocleanqs_size() - 1).data(),
            this->initialautocleanqs(this->initialautocleanqs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_initialAutoCleanQS;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->constantid(), output);
  }

  // optional int32 setDiamond = 2;
  if (has_setdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->setdiamond(), output);
  }

  // optional int32 offlineTime = 3;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offlinetime(), output);
  }

  // optional int32 EditRequireLV = 4;
  if (has_editrequirelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->editrequirelv(), output);
  }

  // optional int32 leaveCoolingtime = 5;
  if (has_leavecoolingtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->leavecoolingtime(), output);
  }

  // optional int32 houseLimit = 6;
  if (has_houselimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->houselimit(), output);
  }

  // optional int64 expID = 7;
  if (has_expid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expid(), output);
  }

  // optional int32 houseScore = 8;
  if (has_housescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->housescore(), output);
  }

  // optional int32 giftCD = 9;
  if (has_giftcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->giftcd(), output);
  }

  // optional int32 autoCleanCellNum = 10;
  if (has_autocleancellnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->autocleancellnum(), output);
  }

  // optional int32 dismiss = 11;
  if (has_dismiss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dismiss(), output);
  }

  // optional int32 transferGuild = 12;
  if (has_transferguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->transferguild(), output);
  }

  // repeated string initialAutoCleanQS = 13;
  for (int i = 0; i < this->initialautocleanqs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->initialautocleanqs(i).data(), this->initialautocleanqs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->initialautocleanqs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->constantid(), target);
  }

  // optional int32 setDiamond = 2;
  if (has_setdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->setdiamond(), target);
  }

  // optional int32 offlineTime = 3;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offlinetime(), target);
  }

  // optional int32 EditRequireLV = 4;
  if (has_editrequirelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->editrequirelv(), target);
  }

  // optional int32 leaveCoolingtime = 5;
  if (has_leavecoolingtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->leavecoolingtime(), target);
  }

  // optional int32 houseLimit = 6;
  if (has_houselimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->houselimit(), target);
  }

  // optional int64 expID = 7;
  if (has_expid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expid(), target);
  }

  // optional int32 houseScore = 8;
  if (has_housescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->housescore(), target);
  }

  // optional int32 giftCD = 9;
  if (has_giftcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->giftcd(), target);
  }

  // optional int32 autoCleanCellNum = 10;
  if (has_autocleancellnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->autocleancellnum(), target);
  }

  // optional int32 dismiss = 11;
  if (has_dismiss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dismiss(), target);
  }

  // optional int32 transferGuild = 12;
  if (has_transferguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->transferguild(), target);
  }

  // repeated string initialAutoCleanQS = 13;
  for (int i = 0; i < this->initialautocleanqs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->initialautocleanqs(i).data(), this->initialautocleanqs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(13, this->initialautocleanqs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 constantid = 1;
    if (has_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantid());
    }

    // optional int32 setDiamond = 2;
    if (has_setdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->setdiamond());
    }

    // optional int32 offlineTime = 3;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinetime());
    }

    // optional int32 EditRequireLV = 4;
    if (has_editrequirelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->editrequirelv());
    }

    // optional int32 leaveCoolingtime = 5;
    if (has_leavecoolingtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leavecoolingtime());
    }

    // optional int32 houseLimit = 6;
    if (has_houselimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->houselimit());
    }

    // optional int64 expID = 7;
    if (has_expid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expid());
    }

    // optional int32 houseScore = 8;
    if (has_housescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->housescore());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 giftCD = 9;
    if (has_giftcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftcd());
    }

    // optional int32 autoCleanCellNum = 10;
    if (has_autocleancellnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->autocleancellnum());
    }

    // optional int32 dismiss = 11;
    if (has_dismiss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dismiss());
    }

    // optional int32 transferGuild = 12;
    if (has_transferguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transferguild());
    }

  }
  // repeated string initialAutoCleanQS = 13;
  total_size += 1 * this->initialautocleanqs_size();
  for (int i = 0; i < this->initialautocleanqs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->initialautocleanqs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildconstant::MergeFrom(const guildconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialautocleanqs_.MergeFrom(from.initialautocleanqs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constantid()) {
      set_constantid(from.constantid());
    }
    if (from.has_setdiamond()) {
      set_setdiamond(from.setdiamond());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_editrequirelv()) {
      set_editrequirelv(from.editrequirelv());
    }
    if (from.has_leavecoolingtime()) {
      set_leavecoolingtime(from.leavecoolingtime());
    }
    if (from.has_houselimit()) {
      set_houselimit(from.houselimit());
    }
    if (from.has_expid()) {
      set_expid(from.expid());
    }
    if (from.has_housescore()) {
      set_housescore(from.housescore());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_giftcd()) {
      set_giftcd(from.giftcd());
    }
    if (from.has_autocleancellnum()) {
      set_autocleancellnum(from.autocleancellnum());
    }
    if (from.has_dismiss()) {
      set_dismiss(from.dismiss());
    }
    if (from.has_transferguild()) {
      set_transferguild(from.transferguild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildconstant::CopyFrom(const guildconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildconstant::IsInitialized() const {

  return true;
}

void guildconstant::Swap(guildconstant* other) {
  if (other != this) {
    std::swap(constantid_, other->constantid_);
    std::swap(setdiamond_, other->setdiamond_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(editrequirelv_, other->editrequirelv_);
    std::swap(leavecoolingtime_, other->leavecoolingtime_);
    std::swap(houselimit_, other->houselimit_);
    std::swap(expid_, other->expid_);
    std::swap(housescore_, other->housescore_);
    std::swap(giftcd_, other->giftcd_);
    std::swap(autocleancellnum_, other->autocleancellnum_);
    std::swap(dismiss_, other->dismiss_);
    std::swap(transferguild_, other->transferguild_);
    initialautocleanqs_.Swap(&other->initialautocleanqs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildconstant_descriptor_;
  metadata.reflection = guildconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildconstant::kGuildconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildconstant::Sheet_guildconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildconstant::InitAsDefaultInstance() {
}

Sheet_guildconstant::Sheet_guildconstant(const Sheet_guildconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildconstant::~Sheet_guildconstant() {
  SharedDtor();
}

void Sheet_guildconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildconstant_descriptor_;
}

const Sheet_guildconstant& Sheet_guildconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildconstant* Sheet_guildconstant::default_instance_ = NULL;

Sheet_guildconstant* Sheet_guildconstant::New() const {
  return new Sheet_guildconstant;
}

void Sheet_guildconstant::Clear() {
  guildconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildconstant guildconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildconstant guildconstant_List = 1;
  for (int i = 0; i < this->guildconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildconstant guildconstant_List = 1;
  for (int i = 0; i < this->guildconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildconstant guildconstant_List = 1;
  total_size += 1 * this->guildconstant_list_size();
  for (int i = 0; i < this->guildconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildconstant::MergeFrom(const Sheet_guildconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildconstant_list_.MergeFrom(from.guildconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildconstant::CopyFrom(const Sheet_guildconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildconstant::IsInitialized() const {

  return true;
}

void Sheet_guildconstant::Swap(Sheet_guildconstant* other) {
  if (other != this) {
    guildconstant_list_.Swap(&other->guildconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildconstant_descriptor_;
  metadata.reflection = Sheet_guildconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildlevel::kGuildLevelFieldNumber;
const int guildlevel::kGuildLevelEXPFieldNumber;
const int guildlevel::kGuildLevelMemberFieldNumber;
const int guildlevel::kGuildLevelVPFieldNumber;
const int guildlevel::kGuildLevelNPFieldNumber;
#endif  // !_MSC_VER

guildlevel::guildlevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildlevel::InitAsDefaultInstance() {
}

guildlevel::guildlevel(const guildlevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildlevel::SharedCtor() {
  _cached_size_ = 0;
  guildlevel_ = 0;
  guildlevel_exp_ = 0;
  guildlevel_member_ = 0;
  guildlevel_vp_ = 0;
  guildlevel_np_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildlevel::~guildlevel() {
  SharedDtor();
}

void guildlevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildlevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildlevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildlevel_descriptor_;
}

const guildlevel& guildlevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildlevel* guildlevel::default_instance_ = NULL;

guildlevel* guildlevel::New() const {
  return new guildlevel;
}

void guildlevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildlevel_ = 0;
    guildlevel_exp_ = 0;
    guildlevel_member_ = 0;
    guildlevel_vp_ = 0;
    guildlevel_np_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildlevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guildLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildLevel_EXP;
        break;
      }

      // optional int32 guildLevel_EXP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLevel_EXP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_exp_)));
          set_has_guildlevel_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildLevel_member;
        break;
      }

      // optional int32 guildLevel_member = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLevel_member:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_member_)));
          set_has_guildlevel_member();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildLevel_VP;
        break;
      }

      // optional int32 guildLevel_VP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLevel_VP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_vp_)));
          set_has_guildlevel_vp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_guildLevel_NP;
        break;
      }

      // optional int32 guildLevel_NP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLevel_NP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_np_)));
          set_has_guildlevel_np();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildlevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guildLevel = 1;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guildlevel(), output);
  }

  // optional int32 guildLevel_EXP = 2;
  if (has_guildlevel_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guildlevel_exp(), output);
  }

  // optional int32 guildLevel_member = 3;
  if (has_guildlevel_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guildlevel_member(), output);
  }

  // optional int32 guildLevel_VP = 4;
  if (has_guildlevel_vp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->guildlevel_vp(), output);
  }

  // optional int32 guildLevel_NP = 5;
  if (has_guildlevel_np()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->guildlevel_np(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildlevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guildLevel = 1;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guildlevel(), target);
  }

  // optional int32 guildLevel_EXP = 2;
  if (has_guildlevel_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guildlevel_exp(), target);
  }

  // optional int32 guildLevel_member = 3;
  if (has_guildlevel_member()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guildlevel_member(), target);
  }

  // optional int32 guildLevel_VP = 4;
  if (has_guildlevel_vp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->guildlevel_vp(), target);
  }

  // optional int32 guildLevel_NP = 5;
  if (has_guildlevel_np()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->guildlevel_np(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildlevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guildLevel = 1;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

    // optional int32 guildLevel_EXP = 2;
    if (has_guildlevel_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel_exp());
    }

    // optional int32 guildLevel_member = 3;
    if (has_guildlevel_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel_member());
    }

    // optional int32 guildLevel_VP = 4;
    if (has_guildlevel_vp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel_vp());
    }

    // optional int32 guildLevel_NP = 5;
    if (has_guildlevel_np()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel_np());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildlevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildlevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildlevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildlevel::MergeFrom(const guildlevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
    if (from.has_guildlevel_exp()) {
      set_guildlevel_exp(from.guildlevel_exp());
    }
    if (from.has_guildlevel_member()) {
      set_guildlevel_member(from.guildlevel_member());
    }
    if (from.has_guildlevel_vp()) {
      set_guildlevel_vp(from.guildlevel_vp());
    }
    if (from.has_guildlevel_np()) {
      set_guildlevel_np(from.guildlevel_np());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildlevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildlevel::CopyFrom(const guildlevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildlevel::IsInitialized() const {

  return true;
}

void guildlevel::Swap(guildlevel* other) {
  if (other != this) {
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(guildlevel_exp_, other->guildlevel_exp_);
    std::swap(guildlevel_member_, other->guildlevel_member_);
    std::swap(guildlevel_vp_, other->guildlevel_vp_);
    std::swap(guildlevel_np_, other->guildlevel_np_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildlevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildlevel_descriptor_;
  metadata.reflection = guildlevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildlevel::kGuildlevelListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildlevel::Sheet_guildlevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildlevel::InitAsDefaultInstance() {
}

Sheet_guildlevel::Sheet_guildlevel(const Sheet_guildlevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildlevel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildlevel::~Sheet_guildlevel() {
  SharedDtor();
}

void Sheet_guildlevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildlevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildlevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildlevel_descriptor_;
}

const Sheet_guildlevel& Sheet_guildlevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildlevel* Sheet_guildlevel::default_instance_ = NULL;

Sheet_guildlevel* Sheet_guildlevel::New() const {
  return new Sheet_guildlevel;
}

void Sheet_guildlevel::Clear() {
  guildlevel_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildlevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildlevel guildlevel_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildlevel_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildlevel_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildlevel_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildlevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildlevel guildlevel_List = 1;
  for (int i = 0; i < this->guildlevel_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildlevel_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildlevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildlevel guildlevel_List = 1;
  for (int i = 0; i < this->guildlevel_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildlevel_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildlevel::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildlevel guildlevel_List = 1;
  total_size += 1 * this->guildlevel_list_size();
  for (int i = 0; i < this->guildlevel_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildlevel_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildlevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildlevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildlevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildlevel::MergeFrom(const Sheet_guildlevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildlevel_list_.MergeFrom(from.guildlevel_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildlevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildlevel::CopyFrom(const Sheet_guildlevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildlevel::IsInitialized() const {

  return true;
}

void Sheet_guildlevel::Swap(Sheet_guildlevel* other) {
  if (other != this) {
    guildlevel_list_.Swap(&other->guildlevel_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildlevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildlevel_descriptor_;
  metadata.reflection = Sheet_guildlevel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildcollege::kPracticeIdFieldNumber;
const int guildcollege::kPracticeTypeFieldNumber;
const int guildcollege::kLearningNeedFieldNumber;
const int guildcollege::kPracticeLevelFieldNumber;
const int guildcollege::kPlayerLevelLimitFieldNumber;
const int guildcollege::kAttributeIdFieldNumber;
const int guildcollege::kAttributeGainFieldNumber;
const int guildcollege::kCostContributeFieldNumber;
#endif  // !_MSC_VER

guildcollege::guildcollege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildcollege::InitAsDefaultInstance() {
}

guildcollege::guildcollege(const guildcollege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildcollege::SharedCtor() {
  _cached_size_ = 0;
  practiceid_ = GOOGLE_LONGLONG(0);
  practicetype_ = 0;
  learningneed_ = 0;
  practicelevel_ = 0;
  playerlevellimit_ = 0;
  attributeid_ = 0;
  attributegain_ = 0;
  costcontribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildcollege::~guildcollege() {
  SharedDtor();
}

void guildcollege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildcollege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildcollege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildcollege_descriptor_;
}

const guildcollege& guildcollege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildcollege* guildcollege::default_instance_ = NULL;

guildcollege* guildcollege::New() const {
  return new guildcollege;
}

void guildcollege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    practiceid_ = GOOGLE_LONGLONG(0);
    practicetype_ = 0;
    learningneed_ = 0;
    practicelevel_ = 0;
    playerlevellimit_ = 0;
    attributeid_ = 0;
    attributegain_ = 0;
    costcontribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildcollege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 practiceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &practiceid_)));
          set_has_practiceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_practiceType;
        break;
      }

      // optional int32 practiceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practiceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practicetype_)));
          set_has_practicetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_learningNeed;
        break;
      }

      // optional int32 learningNeed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learningNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &learningneed_)));
          set_has_learningneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_practiceLevel;
        break;
      }

      // optional int32 practiceLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practiceLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practicelevel_)));
          set_has_practicelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerLevelLimit;
        break;
      }

      // optional int32 playerLevelLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerLevelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerlevellimit_)));
          set_has_playerlevellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_attributeId;
        break;
      }

      // optional int32 attributeId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributeid_)));
          set_has_attributeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_attributeGain;
        break;
      }

      // optional int32 attributeGain = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeGain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attributegain_)));
          set_has_attributegain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CostContribute;
        break;
      }

      // optional int32 CostContribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costcontribute_)));
          set_has_costcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildcollege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 practiceId = 1;
  if (has_practiceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->practiceid(), output);
  }

  // optional int32 practiceType = 2;
  if (has_practicetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->practicetype(), output);
  }

  // optional int32 learningNeed = 3;
  if (has_learningneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->learningneed(), output);
  }

  // optional int32 practiceLevel = 4;
  if (has_practicelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->practicelevel(), output);
  }

  // optional int32 playerLevelLimit = 5;
  if (has_playerlevellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->playerlevellimit(), output);
  }

  // optional int32 attributeId = 6;
  if (has_attributeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->attributeid(), output);
  }

  // optional int32 attributeGain = 7;
  if (has_attributegain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->attributegain(), output);
  }

  // optional int32 CostContribute = 8;
  if (has_costcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->costcontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildcollege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 practiceId = 1;
  if (has_practiceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->practiceid(), target);
  }

  // optional int32 practiceType = 2;
  if (has_practicetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->practicetype(), target);
  }

  // optional int32 learningNeed = 3;
  if (has_learningneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->learningneed(), target);
  }

  // optional int32 practiceLevel = 4;
  if (has_practicelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->practicelevel(), target);
  }

  // optional int32 playerLevelLimit = 5;
  if (has_playerlevellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->playerlevellimit(), target);
  }

  // optional int32 attributeId = 6;
  if (has_attributeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->attributeid(), target);
  }

  // optional int32 attributeGain = 7;
  if (has_attributegain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->attributegain(), target);
  }

  // optional int32 CostContribute = 8;
  if (has_costcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->costcontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildcollege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 practiceId = 1;
    if (has_practiceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->practiceid());
    }

    // optional int32 practiceType = 2;
    if (has_practicetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practicetype());
    }

    // optional int32 learningNeed = 3;
    if (has_learningneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->learningneed());
    }

    // optional int32 practiceLevel = 4;
    if (has_practicelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practicelevel());
    }

    // optional int32 playerLevelLimit = 5;
    if (has_playerlevellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerlevellimit());
    }

    // optional int32 attributeId = 6;
    if (has_attributeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributeid());
    }

    // optional int32 attributeGain = 7;
    if (has_attributegain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attributegain());
    }

    // optional int32 CostContribute = 8;
    if (has_costcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costcontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildcollege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildcollege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildcollege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildcollege::MergeFrom(const guildcollege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_practiceid()) {
      set_practiceid(from.practiceid());
    }
    if (from.has_practicetype()) {
      set_practicetype(from.practicetype());
    }
    if (from.has_learningneed()) {
      set_learningneed(from.learningneed());
    }
    if (from.has_practicelevel()) {
      set_practicelevel(from.practicelevel());
    }
    if (from.has_playerlevellimit()) {
      set_playerlevellimit(from.playerlevellimit());
    }
    if (from.has_attributeid()) {
      set_attributeid(from.attributeid());
    }
    if (from.has_attributegain()) {
      set_attributegain(from.attributegain());
    }
    if (from.has_costcontribute()) {
      set_costcontribute(from.costcontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildcollege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildcollege::CopyFrom(const guildcollege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildcollege::IsInitialized() const {

  return true;
}

void guildcollege::Swap(guildcollege* other) {
  if (other != this) {
    std::swap(practiceid_, other->practiceid_);
    std::swap(practicetype_, other->practicetype_);
    std::swap(learningneed_, other->learningneed_);
    std::swap(practicelevel_, other->practicelevel_);
    std::swap(playerlevellimit_, other->playerlevellimit_);
    std::swap(attributeid_, other->attributeid_);
    std::swap(attributegain_, other->attributegain_);
    std::swap(costcontribute_, other->costcontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildcollege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildcollege_descriptor_;
  metadata.reflection = guildcollege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildcollege::kGuildcollegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildcollege::Sheet_guildcollege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildcollege::InitAsDefaultInstance() {
}

Sheet_guildcollege::Sheet_guildcollege(const Sheet_guildcollege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildcollege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildcollege::~Sheet_guildcollege() {
  SharedDtor();
}

void Sheet_guildcollege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildcollege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildcollege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildcollege_descriptor_;
}

const Sheet_guildcollege& Sheet_guildcollege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildcollege* Sheet_guildcollege::default_instance_ = NULL;

Sheet_guildcollege* Sheet_guildcollege::New() const {
  return new Sheet_guildcollege;
}

void Sheet_guildcollege::Clear() {
  guildcollege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildcollege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildcollege guildcollege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildcollege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildcollege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildcollege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildcollege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildcollege guildcollege_List = 1;
  for (int i = 0; i < this->guildcollege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildcollege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildcollege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildcollege guildcollege_List = 1;
  for (int i = 0; i < this->guildcollege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildcollege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildcollege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildcollege guildcollege_List = 1;
  total_size += 1 * this->guildcollege_list_size();
  for (int i = 0; i < this->guildcollege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildcollege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildcollege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildcollege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildcollege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildcollege::MergeFrom(const Sheet_guildcollege& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildcollege_list_.MergeFrom(from.guildcollege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildcollege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildcollege::CopyFrom(const Sheet_guildcollege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildcollege::IsInitialized() const {

  return true;
}

void Sheet_guildcollege::Swap(Sheet_guildcollege* other) {
  if (other != this) {
    guildcollege_list_.Swap(&other->guildcollege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildcollege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildcollege_descriptor_;
  metadata.reflection = Sheet_guildcollege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildposition::kPositionIdFieldNumber;
const int guildposition::kPositionTypeFieldNumber;
const int guildposition::kAllotMaterialsFieldNumber;
const int guildposition::kAdmitNewcomerFieldNumber;
const int guildposition::kAppointAndRemoveVPFieldNumber;
const int guildposition::kAppointAndRemoveElderFieldNumber;
const int guildposition::kExpelVPFieldNumber;
const int guildposition::kExpelElderFieldNumber;
const int guildposition::kExpelMassFieldNumber;
const int guildposition::kAnnouncementEditingFieldNumber;
const int guildposition::kJoinConditionFieldNumber;
const int guildposition::kGuildActivityFieldNumber;
const int guildposition::kDissolveAssignGuildFieldNumber;
const int guildposition::kClearFieldNumber;
const int guildposition::kChangeNameFieldNumber;
const int guildposition::kAutomaticCleanDisplayFieldNumber;
#endif  // !_MSC_VER

guildposition::guildposition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildposition::InitAsDefaultInstance() {
}

guildposition::guildposition(const guildposition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildposition::SharedCtor() {
  _cached_size_ = 0;
  positionid_ = GOOGLE_LONGLONG(0);
  positiontype_ = 0;
  allotmaterials_ = 0;
  admitnewcomer_ = 0;
  appointandremovevp_ = 0;
  appointandremoveelder_ = 0;
  expelvp_ = 0;
  expelelder_ = 0;
  expelmass_ = 0;
  announcementediting_ = 0;
  joincondition_ = 0;
  guildactivity_ = 0;
  dissolveassignguild_ = 0;
  clear_ = 0;
  changename_ = 0;
  automaticcleandisplay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildposition::~guildposition() {
  SharedDtor();
}

void guildposition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildposition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildposition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildposition_descriptor_;
}

const guildposition& guildposition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildposition* guildposition::default_instance_ = NULL;

guildposition* guildposition::New() const {
  return new guildposition;
}

void guildposition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    positionid_ = GOOGLE_LONGLONG(0);
    positiontype_ = 0;
    allotmaterials_ = 0;
    admitnewcomer_ = 0;
    appointandremovevp_ = 0;
    appointandremoveelder_ = 0;
    expelvp_ = 0;
    expelelder_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    expelmass_ = 0;
    announcementediting_ = 0;
    joincondition_ = 0;
    guildactivity_ = 0;
    dissolveassignguild_ = 0;
    clear_ = 0;
    changename_ = 0;
    automaticcleandisplay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildposition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 positionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &positionid_)));
          set_has_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_positionType;
        break;
      }

      // optional int32 positionType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiontype_)));
          set_has_positiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allotMaterials;
        break;
      }

      // optional int32 allotMaterials = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allotMaterials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allotmaterials_)));
          set_has_allotmaterials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_admitNewcomer;
        break;
      }

      // optional int32 admitNewcomer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_admitNewcomer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &admitnewcomer_)));
          set_has_admitnewcomer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_appointAndRemoveVP;
        break;
      }

      // optional int32 appointAndRemoveVP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointAndRemoveVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointandremovevp_)));
          set_has_appointandremovevp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_appointAndRemoveElder;
        break;
      }

      // optional int32 appointAndRemoveElder = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_appointAndRemoveElder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &appointandremoveelder_)));
          set_has_appointandremoveelder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expelVP;
        break;
      }

      // optional int32 expelVP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expelVP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expelvp_)));
          set_has_expelvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_expelElder;
        break;
      }

      // optional int32 expelElder = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expelElder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expelelder_)));
          set_has_expelelder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_expelMass;
        break;
      }

      // optional int32 expelMass = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expelMass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expelmass_)));
          set_has_expelmass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_announcementEditing;
        break;
      }

      // optional int32 announcementEditing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_announcementEditing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &announcementediting_)));
          set_has_announcementediting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_joinCondition;
        break;
      }

      // optional int32 joinCondition = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &joincondition_)));
          set_has_joincondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_guildActivity;
        break;
      }

      // optional int32 guildActivity = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildActivity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildactivity_)));
          set_has_guildactivity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_dissolveAssignGuild;
        break;
      }

      // optional int32 dissolveAssignGuild = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dissolveAssignGuild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dissolveassignguild_)));
          set_has_dissolveassignguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_clear;
        break;
      }

      // optional int32 clear = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clear_)));
          set_has_clear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_changeName;
        break;
      }

      // optional int32 changeName = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_changeName:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &changename_)));
          set_has_changename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_automaticCleanDisplay;
        break;
      }

      // optional int32 automaticCleanDisplay = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_automaticCleanDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &automaticcleandisplay_)));
          set_has_automaticcleandisplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildposition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 positionId = 1;
  if (has_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->positionid(), output);
  }

  // optional int32 positionType = 2;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->positiontype(), output);
  }

  // optional int32 allotMaterials = 3;
  if (has_allotmaterials()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allotmaterials(), output);
  }

  // optional int32 admitNewcomer = 4;
  if (has_admitnewcomer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->admitnewcomer(), output);
  }

  // optional int32 appointAndRemoveVP = 5;
  if (has_appointandremovevp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->appointandremovevp(), output);
  }

  // optional int32 appointAndRemoveElder = 6;
  if (has_appointandremoveelder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->appointandremoveelder(), output);
  }

  // optional int32 expelVP = 7;
  if (has_expelvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->expelvp(), output);
  }

  // optional int32 expelElder = 8;
  if (has_expelelder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->expelelder(), output);
  }

  // optional int32 expelMass = 9;
  if (has_expelmass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->expelmass(), output);
  }

  // optional int32 announcementEditing = 10;
  if (has_announcementediting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->announcementediting(), output);
  }

  // optional int32 joinCondition = 11;
  if (has_joincondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->joincondition(), output);
  }

  // optional int32 guildActivity = 12;
  if (has_guildactivity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->guildactivity(), output);
  }

  // optional int32 dissolveAssignGuild = 13;
  if (has_dissolveassignguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dissolveassignguild(), output);
  }

  // optional int32 clear = 14;
  if (has_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->clear(), output);
  }

  // optional int32 changeName = 15;
  if (has_changename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->changename(), output);
  }

  // optional int32 automaticCleanDisplay = 16;
  if (has_automaticcleandisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->automaticcleandisplay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildposition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 positionId = 1;
  if (has_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->positionid(), target);
  }

  // optional int32 positionType = 2;
  if (has_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->positiontype(), target);
  }

  // optional int32 allotMaterials = 3;
  if (has_allotmaterials()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allotmaterials(), target);
  }

  // optional int32 admitNewcomer = 4;
  if (has_admitnewcomer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->admitnewcomer(), target);
  }

  // optional int32 appointAndRemoveVP = 5;
  if (has_appointandremovevp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->appointandremovevp(), target);
  }

  // optional int32 appointAndRemoveElder = 6;
  if (has_appointandremoveelder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->appointandremoveelder(), target);
  }

  // optional int32 expelVP = 7;
  if (has_expelvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->expelvp(), target);
  }

  // optional int32 expelElder = 8;
  if (has_expelelder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->expelelder(), target);
  }

  // optional int32 expelMass = 9;
  if (has_expelmass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->expelmass(), target);
  }

  // optional int32 announcementEditing = 10;
  if (has_announcementediting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->announcementediting(), target);
  }

  // optional int32 joinCondition = 11;
  if (has_joincondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->joincondition(), target);
  }

  // optional int32 guildActivity = 12;
  if (has_guildactivity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->guildactivity(), target);
  }

  // optional int32 dissolveAssignGuild = 13;
  if (has_dissolveassignguild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dissolveassignguild(), target);
  }

  // optional int32 clear = 14;
  if (has_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->clear(), target);
  }

  // optional int32 changeName = 15;
  if (has_changename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->changename(), target);
  }

  // optional int32 automaticCleanDisplay = 16;
  if (has_automaticcleandisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->automaticcleandisplay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildposition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 positionId = 1;
    if (has_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->positionid());
    }

    // optional int32 positionType = 2;
    if (has_positiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiontype());
    }

    // optional int32 allotMaterials = 3;
    if (has_allotmaterials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allotmaterials());
    }

    // optional int32 admitNewcomer = 4;
    if (has_admitnewcomer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->admitnewcomer());
    }

    // optional int32 appointAndRemoveVP = 5;
    if (has_appointandremovevp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointandremovevp());
    }

    // optional int32 appointAndRemoveElder = 6;
    if (has_appointandremoveelder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->appointandremoveelder());
    }

    // optional int32 expelVP = 7;
    if (has_expelvp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expelvp());
    }

    // optional int32 expelElder = 8;
    if (has_expelelder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expelelder());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 expelMass = 9;
    if (has_expelmass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expelmass());
    }

    // optional int32 announcementEditing = 10;
    if (has_announcementediting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->announcementediting());
    }

    // optional int32 joinCondition = 11;
    if (has_joincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->joincondition());
    }

    // optional int32 guildActivity = 12;
    if (has_guildactivity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildactivity());
    }

    // optional int32 dissolveAssignGuild = 13;
    if (has_dissolveassignguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dissolveassignguild());
    }

    // optional int32 clear = 14;
    if (has_clear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clear());
    }

    // optional int32 changeName = 15;
    if (has_changename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->changename());
    }

    // optional int32 automaticCleanDisplay = 16;
    if (has_automaticcleandisplay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->automaticcleandisplay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildposition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildposition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildposition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildposition::MergeFrom(const guildposition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionid()) {
      set_positionid(from.positionid());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_allotmaterials()) {
      set_allotmaterials(from.allotmaterials());
    }
    if (from.has_admitnewcomer()) {
      set_admitnewcomer(from.admitnewcomer());
    }
    if (from.has_appointandremovevp()) {
      set_appointandremovevp(from.appointandremovevp());
    }
    if (from.has_appointandremoveelder()) {
      set_appointandremoveelder(from.appointandremoveelder());
    }
    if (from.has_expelvp()) {
      set_expelvp(from.expelvp());
    }
    if (from.has_expelelder()) {
      set_expelelder(from.expelelder());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_expelmass()) {
      set_expelmass(from.expelmass());
    }
    if (from.has_announcementediting()) {
      set_announcementediting(from.announcementediting());
    }
    if (from.has_joincondition()) {
      set_joincondition(from.joincondition());
    }
    if (from.has_guildactivity()) {
      set_guildactivity(from.guildactivity());
    }
    if (from.has_dissolveassignguild()) {
      set_dissolveassignguild(from.dissolveassignguild());
    }
    if (from.has_clear()) {
      set_clear(from.clear());
    }
    if (from.has_changename()) {
      set_changename(from.changename());
    }
    if (from.has_automaticcleandisplay()) {
      set_automaticcleandisplay(from.automaticcleandisplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildposition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildposition::CopyFrom(const guildposition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildposition::IsInitialized() const {

  return true;
}

void guildposition::Swap(guildposition* other) {
  if (other != this) {
    std::swap(positionid_, other->positionid_);
    std::swap(positiontype_, other->positiontype_);
    std::swap(allotmaterials_, other->allotmaterials_);
    std::swap(admitnewcomer_, other->admitnewcomer_);
    std::swap(appointandremovevp_, other->appointandremovevp_);
    std::swap(appointandremoveelder_, other->appointandremoveelder_);
    std::swap(expelvp_, other->expelvp_);
    std::swap(expelelder_, other->expelelder_);
    std::swap(expelmass_, other->expelmass_);
    std::swap(announcementediting_, other->announcementediting_);
    std::swap(joincondition_, other->joincondition_);
    std::swap(guildactivity_, other->guildactivity_);
    std::swap(dissolveassignguild_, other->dissolveassignguild_);
    std::swap(clear_, other->clear_);
    std::swap(changename_, other->changename_);
    std::swap(automaticcleandisplay_, other->automaticcleandisplay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildposition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildposition_descriptor_;
  metadata.reflection = guildposition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildposition::kGuildpositionListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildposition::Sheet_guildposition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildposition::InitAsDefaultInstance() {
}

Sheet_guildposition::Sheet_guildposition(const Sheet_guildposition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildposition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildposition::~Sheet_guildposition() {
  SharedDtor();
}

void Sheet_guildposition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildposition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildposition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildposition_descriptor_;
}

const Sheet_guildposition& Sheet_guildposition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildposition* Sheet_guildposition::default_instance_ = NULL;

Sheet_guildposition* Sheet_guildposition::New() const {
  return new Sheet_guildposition;
}

void Sheet_guildposition::Clear() {
  guildposition_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildposition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildposition guildposition_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildposition_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildposition_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildposition_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildposition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildposition guildposition_List = 1;
  for (int i = 0; i < this->guildposition_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildposition_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildposition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildposition guildposition_List = 1;
  for (int i = 0; i < this->guildposition_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildposition_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildposition::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildposition guildposition_List = 1;
  total_size += 1 * this->guildposition_list_size();
  for (int i = 0; i < this->guildposition_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildposition_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildposition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildposition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildposition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildposition::MergeFrom(const Sheet_guildposition& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildposition_list_.MergeFrom(from.guildposition_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildposition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildposition::CopyFrom(const Sheet_guildposition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildposition::IsInitialized() const {

  return true;
}

void Sheet_guildposition::Swap(Sheet_guildposition* other) {
  if (other != this) {
    guildposition_list_.Swap(&other->guildposition_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildposition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildposition_descriptor_;
  metadata.reflection = Sheet_guildposition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildhouse::kIDFieldNumber;
const int guildhouse::kWearQualityFieldNumber;
const int guildhouse::kQualityFieldNumber;
const int guildhouse::kHouseScoreFieldNumber;
#endif  // !_MSC_VER

guildhouse::guildhouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildhouse::InitAsDefaultInstance() {
}

guildhouse::guildhouse(const guildhouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildhouse::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  wearquality_ = 0;
  quality_ = 0;
  housescore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildhouse::~guildhouse() {
  SharedDtor();
}

void guildhouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildhouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildhouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildhouse_descriptor_;
}

const guildhouse& guildhouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildhouse* guildhouse::default_instance_ = NULL;

guildhouse* guildhouse::New() const {
  return new guildhouse;
}

void guildhouse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    wearquality_ = 0;
    quality_ = 0;
    housescore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildhouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional int32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_houseScore;
        break;
      }

      // optional int32 houseScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_houseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &housescore_)));
          set_has_housescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildhouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 wearQuality = 2;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->wearquality(), output);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->quality(), output);
  }

  // optional int32 houseScore = 4;
  if (has_housescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->housescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildhouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 wearQuality = 2;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->wearquality(), target);
  }

  // optional int32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->quality(), target);
  }

  // optional int32 houseScore = 4;
  if (has_housescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->housescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildhouse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 wearQuality = 2;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 houseScore = 4;
    if (has_housescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->housescore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildhouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildhouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildhouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildhouse::MergeFrom(const guildhouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_housescore()) {
      set_housescore(from.housescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildhouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildhouse::CopyFrom(const guildhouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildhouse::IsInitialized() const {

  return true;
}

void guildhouse::Swap(guildhouse* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(quality_, other->quality_);
    std::swap(housescore_, other->housescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildhouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildhouse_descriptor_;
  metadata.reflection = guildhouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildhouse::kGuildhouseListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildhouse::Sheet_guildhouse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildhouse::InitAsDefaultInstance() {
}

Sheet_guildhouse::Sheet_guildhouse(const Sheet_guildhouse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildhouse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildhouse::~Sheet_guildhouse() {
  SharedDtor();
}

void Sheet_guildhouse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildhouse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildhouse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildhouse_descriptor_;
}

const Sheet_guildhouse& Sheet_guildhouse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildhouse* Sheet_guildhouse::default_instance_ = NULL;

Sheet_guildhouse* Sheet_guildhouse::New() const {
  return new Sheet_guildhouse;
}

void Sheet_guildhouse::Clear() {
  guildhouse_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildhouse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildhouse guildhouse_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildhouse_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildhouse_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildhouse_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildhouse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildhouse guildhouse_List = 1;
  for (int i = 0; i < this->guildhouse_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildhouse_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildhouse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildhouse guildhouse_List = 1;
  for (int i = 0; i < this->guildhouse_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildhouse_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildhouse::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildhouse guildhouse_List = 1;
  total_size += 1 * this->guildhouse_list_size();
  for (int i = 0; i < this->guildhouse_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildhouse_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildhouse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildhouse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildhouse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildhouse::MergeFrom(const Sheet_guildhouse& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildhouse_list_.MergeFrom(from.guildhouse_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildhouse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildhouse::CopyFrom(const Sheet_guildhouse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildhouse::IsInitialized() const {

  return true;
}

void Sheet_guildhouse::Swap(Sheet_guildhouse* other) {
  if (other != this) {
    guildhouse_list_.Swap(&other->guildhouse_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildhouse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildhouse_descriptor_;
  metadata.reflection = Sheet_guildhouse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildgift::kIDFieldNumber;
const int guildgift::kTypeFieldNumber;
const int guildgift::kMoneyFieldNumber;
const int guildgift::kNumFieldNumber;
#endif  // !_MSC_VER

guildgift::guildgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildgift::InitAsDefaultInstance() {
}

guildgift::guildgift(const guildgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildgift::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  money_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildgift::~guildgift() {
  SharedDtor();
}

void guildgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildgift_descriptor_;
}

const guildgift& guildgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildgift* guildgift::default_instance_ = NULL;

guildgift* guildgift::New() const {
  return new guildgift;
}

void guildgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    money_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildgift::MergeFrom(const guildgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildgift::CopyFrom(const guildgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildgift::IsInitialized() const {

  return true;
}

void guildgift::Swap(guildgift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(money_, other->money_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildgift_descriptor_;
  metadata.reflection = guildgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildgift::kGuildgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildgift::Sheet_guildgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildgift::InitAsDefaultInstance() {
}

Sheet_guildgift::Sheet_guildgift(const Sheet_guildgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildgift::~Sheet_guildgift() {
  SharedDtor();
}

void Sheet_guildgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildgift_descriptor_;
}

const Sheet_guildgift& Sheet_guildgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildgift* Sheet_guildgift::default_instance_ = NULL;

Sheet_guildgift* Sheet_guildgift::New() const {
  return new Sheet_guildgift;
}

void Sheet_guildgift::Clear() {
  guildgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildgift guildgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildgift guildgift_List = 1;
  for (int i = 0; i < this->guildgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildgift guildgift_List = 1;
  for (int i = 0; i < this->guildgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildgift guildgift_List = 1;
  total_size += 1 * this->guildgift_list_size();
  for (int i = 0; i < this->guildgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildgift::MergeFrom(const Sheet_guildgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildgift_list_.MergeFrom(from.guildgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildgift::CopyFrom(const Sheet_guildgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildgift::IsInitialized() const {

  return true;
}

void Sheet_guildgift::Swap(Sheet_guildgift* other) {
  if (other != this) {
    guildgift_list_.Swap(&other->guildgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildgift_descriptor_;
  metadata.reflection = Sheet_guildgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildguildance::kGuidanceIdFieldNumber;
const int guildguildance::kGuidanceTypeFieldNumber;
const int guildguildance::kLevelLimitFieldNumber;
const int guildguildance::kTriggerTpyeFieldNumber;
const int guildguildance::kCognateNpcIdFieldNumber;
const int guildguildance::kCognateUIFieldNumber;
const int guildguildance::kCognateActiveIdFieldNumber;
#endif  // !_MSC_VER

guildguildance::guildguildance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildguildance::InitAsDefaultInstance() {
}

guildguildance::guildguildance(const guildguildance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildguildance::SharedCtor() {
  _cached_size_ = 0;
  guidanceid_ = 0;
  guidancetype_ = 0;
  levellimit_ = 0;
  triggertpye_ = 0;
  cognatenpcid_ = 0;
  cognateui_ = 0;
  cognateactiveid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildguildance::~guildguildance() {
  SharedDtor();
}

void guildguildance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildguildance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildguildance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildguildance_descriptor_;
}

const guildguildance& guildguildance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildguildance* guildguildance::default_instance_ = NULL;

guildguildance* guildguildance::New() const {
  return new guildguildance;
}

void guildguildance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guidanceid_ = 0;
    guidancetype_ = 0;
    levellimit_ = 0;
    triggertpye_ = 0;
    cognatenpcid_ = 0;
    cognateui_ = 0;
    cognateactiveid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildguildance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 guidanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidanceid_)));
          set_has_guidanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guidanceType;
        break;
      }

      // optional int32 guidanceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guidanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guidancetype_)));
          set_has_guidancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_triggerTpye;
        break;
      }

      // optional int32 triggerTpye = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_triggerTpye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &triggertpye_)));
          set_has_triggertpye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cognateNpcId;
        break;
      }

      // optional int32 cognateNpcId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cognateNpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cognatenpcid_)));
          set_has_cognatenpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cognateUI;
        break;
      }

      // optional int32 cognateUI = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cognateUI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cognateui_)));
          set_has_cognateui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cognateActiveId;
        break;
      }

      // optional int32 cognateActiveId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cognateActiveId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cognateactiveid_)));
          set_has_cognateactiveid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildguildance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 guidanceId = 1;
  if (has_guidanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->guidanceid(), output);
  }

  // optional int32 guidanceType = 2;
  if (has_guidancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guidancetype(), output);
  }

  // optional int32 levelLimit = 3;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->levellimit(), output);
  }

  // optional int32 triggerTpye = 4;
  if (has_triggertpye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->triggertpye(), output);
  }

  // optional int32 cognateNpcId = 5;
  if (has_cognatenpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cognatenpcid(), output);
  }

  // optional int32 cognateUI = 6;
  if (has_cognateui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cognateui(), output);
  }

  // optional int32 cognateActiveId = 7;
  if (has_cognateactiveid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cognateactiveid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildguildance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 guidanceId = 1;
  if (has_guidanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->guidanceid(), target);
  }

  // optional int32 guidanceType = 2;
  if (has_guidancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->guidancetype(), target);
  }

  // optional int32 levelLimit = 3;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->levellimit(), target);
  }

  // optional int32 triggerTpye = 4;
  if (has_triggertpye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->triggertpye(), target);
  }

  // optional int32 cognateNpcId = 5;
  if (has_cognatenpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cognatenpcid(), target);
  }

  // optional int32 cognateUI = 6;
  if (has_cognateui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cognateui(), target);
  }

  // optional int32 cognateActiveId = 7;
  if (has_cognateactiveid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cognateactiveid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildguildance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 guidanceId = 1;
    if (has_guidanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidanceid());
    }

    // optional int32 guidanceType = 2;
    if (has_guidancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guidancetype());
    }

    // optional int32 levelLimit = 3;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // optional int32 triggerTpye = 4;
    if (has_triggertpye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->triggertpye());
    }

    // optional int32 cognateNpcId = 5;
    if (has_cognatenpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cognatenpcid());
    }

    // optional int32 cognateUI = 6;
    if (has_cognateui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cognateui());
    }

    // optional int32 cognateActiveId = 7;
    if (has_cognateactiveid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cognateactiveid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildguildance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildguildance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildguildance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildguildance::MergeFrom(const guildguildance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guidanceid()) {
      set_guidanceid(from.guidanceid());
    }
    if (from.has_guidancetype()) {
      set_guidancetype(from.guidancetype());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_triggertpye()) {
      set_triggertpye(from.triggertpye());
    }
    if (from.has_cognatenpcid()) {
      set_cognatenpcid(from.cognatenpcid());
    }
    if (from.has_cognateui()) {
      set_cognateui(from.cognateui());
    }
    if (from.has_cognateactiveid()) {
      set_cognateactiveid(from.cognateactiveid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildguildance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildguildance::CopyFrom(const guildguildance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildguildance::IsInitialized() const {

  return true;
}

void guildguildance::Swap(guildguildance* other) {
  if (other != this) {
    std::swap(guidanceid_, other->guidanceid_);
    std::swap(guidancetype_, other->guidancetype_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(triggertpye_, other->triggertpye_);
    std::swap(cognatenpcid_, other->cognatenpcid_);
    std::swap(cognateui_, other->cognateui_);
    std::swap(cognateactiveid_, other->cognateactiveid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildguildance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildguildance_descriptor_;
  metadata.reflection = guildguildance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildguildance::kGuildguildanceListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildguildance::Sheet_guildguildance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildguildance::InitAsDefaultInstance() {
}

Sheet_guildguildance::Sheet_guildguildance(const Sheet_guildguildance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildguildance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildguildance::~Sheet_guildguildance() {
  SharedDtor();
}

void Sheet_guildguildance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildguildance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildguildance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildguildance_descriptor_;
}

const Sheet_guildguildance& Sheet_guildguildance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildguildance* Sheet_guildguildance::default_instance_ = NULL;

Sheet_guildguildance* Sheet_guildguildance::New() const {
  return new Sheet_guildguildance;
}

void Sheet_guildguildance::Clear() {
  guildguildance_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildguildance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildguildance guildguildance_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildguildance_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildguildance_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildguildance_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildguildance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildguildance guildguildance_List = 1;
  for (int i = 0; i < this->guildguildance_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildguildance_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildguildance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildguildance guildguildance_List = 1;
  for (int i = 0; i < this->guildguildance_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildguildance_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildguildance::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildguildance guildguildance_List = 1;
  total_size += 1 * this->guildguildance_list_size();
  for (int i = 0; i < this->guildguildance_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildguildance_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildguildance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildguildance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildguildance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildguildance::MergeFrom(const Sheet_guildguildance& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildguildance_list_.MergeFrom(from.guildguildance_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildguildance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildguildance::CopyFrom(const Sheet_guildguildance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildguildance::IsInitialized() const {

  return true;
}

void Sheet_guildguildance::Swap(Sheet_guildguildance* other) {
  if (other != this) {
    guildguildance_list_.Swap(&other->guildguildance_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildguildance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildguildance_descriptor_;
  metadata.reflection = Sheet_guildguildance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildwarconstant::kWaridFieldNumber;
const int guildwarconstant::kSignopenCycleFieldNumber;
const int guildwarconstant::kSignopenTimeFieldNumber;
const int guildwarconstant::kSignclosedCycleFieldNumber;
const int guildwarconstant::kSignclosedTimeFieldNumber;
const int guildwarconstant::kGuildPositionFieldNumber;
const int guildwarconstant::kGuildNumFieldNumber;
const int guildwarconstant::kGuildLevelFieldNumber;
const int guildwarconstant::kEnteropenCycleFieldNumber;
const int guildwarconstant::kEnteropenTimeFieldNumber;
const int guildwarconstant::kEnterclosedCycleFieldNumber;
const int guildwarconstant::kEnterclosedTimeFieldNumber;
const int guildwarconstant::kGuildwarBaseScoreFieldNumber;
const int guildwarconstant::kGuildwarWinScoreFieldNumber;
const int guildwarconstant::kGuildwarLoseScoreFieldNumber;
const int guildwarconstant::kGuildwarDrawScoreFieldNumber;
const int guildwarconstant::kMaxMaterialFieldNumber;
const int guildwarconstant::kSoldierCostMaterialFieldNumber;
const int guildwarconstant::kSoldierNumFieldNumber;
const int guildwarconstant::kSoldierCDFieldNumber;
const int guildwarconstant::kRenewBaseCostFieldNumber;
const int guildwarconstant::kRenewBaseHPFieldNumber;
const int guildwarconstant::kRenewBaseCDFieldNumber;
const int guildwarconstant::kReviveCDFieldNumber;
const int guildwarconstant::kGuildwarWinItemFieldNumber;
const int guildwarconstant::kGuildwarWinNumFieldNumber;
const int guildwarconstant::kGuildwarLoseItemFieldNumber;
const int guildwarconstant::kGuildwarLoseNumFieldNumber;
const int guildwarconstant::kGuildwarDrawItemFieldNumber;
const int guildwarconstant::kGuildwarDrawNumFieldNumber;
const int guildwarconstant::kMaterialIdFieldNumber;
const int guildwarconstant::kMaterialConversionFieldNumber;
const int guildwarconstant::kGuildWarExpFieldNumber;
#endif  // !_MSC_VER

guildwarconstant::guildwarconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildwarconstant::InitAsDefaultInstance() {
}

guildwarconstant::guildwarconstant(const guildwarconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildwarconstant::SharedCtor() {
  _cached_size_ = 0;
  warid_ = GOOGLE_LONGLONG(0);
  signopencycle_ = 0;
  signopentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signclosedcycle_ = 0;
  signclosedtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildposition_ = 0;
  guildnum_ = 0;
  guildlevel_ = 0;
  enteropencycle_ = 0;
  enteropentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enterclosedcycle_ = 0;
  enterclosedtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildwarbasescore_ = 0;
  guildwarwinscore_ = 0;
  guildwarlosescore_ = 0;
  guildwardrawscore_ = 0;
  maxmaterial_ = 0;
  soldiercostmaterial_ = 0;
  soldiernum_ = 0;
  soldiercd_ = 0;
  renewbasecost_ = 0;
  renewbasehp_ = 0;
  renewbasecd_ = 0;
  revivecd_ = 0;
  guildwarwinitem_ = GOOGLE_LONGLONG(0);
  guildwarwinnum_ = 0;
  guildwarloseitem_ = GOOGLE_LONGLONG(0);
  guildwarlosenum_ = 0;
  guildwardrawitem_ = GOOGLE_LONGLONG(0);
  guildwardrawnum_ = 0;
  materialid_ = GOOGLE_LONGLONG(0);
  materialconversion_ = 0;
  guildwarexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildwarconstant::~guildwarconstant() {
  SharedDtor();
}

void guildwarconstant::SharedDtor() {
  if (signopentime_ != &::google::protobuf::internal::kEmptyString) {
    delete signopentime_;
  }
  if (signclosedtime_ != &::google::protobuf::internal::kEmptyString) {
    delete signclosedtime_;
  }
  if (enteropentime_ != &::google::protobuf::internal::kEmptyString) {
    delete enteropentime_;
  }
  if (enterclosedtime_ != &::google::protobuf::internal::kEmptyString) {
    delete enterclosedtime_;
  }
  if (this != default_instance_) {
  }
}

void guildwarconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildwarconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildwarconstant_descriptor_;
}

const guildwarconstant& guildwarconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildwarconstant* guildwarconstant::default_instance_ = NULL;

guildwarconstant* guildwarconstant::New() const {
  return new guildwarconstant;
}

void guildwarconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warid_ = GOOGLE_LONGLONG(0);
    signopencycle_ = 0;
    if (has_signopentime()) {
      if (signopentime_ != &::google::protobuf::internal::kEmptyString) {
        signopentime_->clear();
      }
    }
    signclosedcycle_ = 0;
    if (has_signclosedtime()) {
      if (signclosedtime_ != &::google::protobuf::internal::kEmptyString) {
        signclosedtime_->clear();
      }
    }
    guildposition_ = 0;
    guildnum_ = 0;
    guildlevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    enteropencycle_ = 0;
    if (has_enteropentime()) {
      if (enteropentime_ != &::google::protobuf::internal::kEmptyString) {
        enteropentime_->clear();
      }
    }
    enterclosedcycle_ = 0;
    if (has_enterclosedtime()) {
      if (enterclosedtime_ != &::google::protobuf::internal::kEmptyString) {
        enterclosedtime_->clear();
      }
    }
    guildwarbasescore_ = 0;
    guildwarwinscore_ = 0;
    guildwarlosescore_ = 0;
    guildwardrawscore_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    maxmaterial_ = 0;
    soldiercostmaterial_ = 0;
    soldiernum_ = 0;
    soldiercd_ = 0;
    renewbasecost_ = 0;
    renewbasehp_ = 0;
    renewbasecd_ = 0;
    revivecd_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    guildwarwinitem_ = GOOGLE_LONGLONG(0);
    guildwarwinnum_ = 0;
    guildwarloseitem_ = GOOGLE_LONGLONG(0);
    guildwarlosenum_ = 0;
    guildwardrawitem_ = GOOGLE_LONGLONG(0);
    guildwardrawnum_ = 0;
    materialid_ = GOOGLE_LONGLONG(0);
    materialconversion_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    guildwarexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildwarconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 warid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_signopenCycle;
        break;
      }

      // optional int32 signopenCycle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signopenCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signopencycle_)));
          set_has_signopencycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signopenTime;
        break;
      }

      // optional string signopenTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signopenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signopentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signopentime().data(), this->signopentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_signclosedCycle;
        break;
      }

      // optional int32 signclosedCycle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_signclosedCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signclosedcycle_)));
          set_has_signclosedcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_signclosedTime;
        break;
      }

      // optional string signclosedTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signclosedTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signclosedtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->signclosedtime().data(), this->signclosedtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guildPosition;
        break;
      }

      // optional int32 guildPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildposition_)));
          set_has_guildposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guildNum;
        break;
      }

      // optional int32 guildNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildnum_)));
          set_has_guildnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guildLevel;
        break;
      }

      // optional int32 guildLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildlevel_)));
          set_has_guildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_enteropenCycle;
        break;
      }

      // optional int32 enteropenCycle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enteropenCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enteropencycle_)));
          set_has_enteropencycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_enteropenTime;
        break;
      }

      // optional string enteropenTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enteropenTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enteropentime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enteropentime().data(), this->enteropentime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enterclosedCycle;
        break;
      }

      // optional int32 enterclosedCycle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterclosedCycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enterclosedcycle_)));
          set_has_enterclosedcycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_enterclosedTime;
        break;
      }

      // optional string enterclosedTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enterclosedTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_enterclosedtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->enterclosedtime().data(), this->enterclosedtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guildwarBaseScore;
        break;
      }

      // optional int32 guildwarBaseScore = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarBaseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarbasescore_)));
          set_has_guildwarbasescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_guildwarWinScore;
        break;
      }

      // optional int32 guildwarWinScore = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarwinscore_)));
          set_has_guildwarwinscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_guildwarLoseScore;
        break;
      }

      // optional int32 guildwarLoseScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarLoseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarlosescore_)));
          set_has_guildwarlosescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_guildwarDrawScore;
        break;
      }

      // optional int32 guildwarDrawScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarDrawScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwardrawscore_)));
          set_has_guildwardrawscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_maxMaterial;
        break;
      }

      // optional int32 maxMaterial = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxMaterial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxmaterial_)));
          set_has_maxmaterial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_soldierCostMaterial;
        break;
      }

      // optional int32 soldierCostMaterial = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierCostMaterial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiercostmaterial_)));
          set_has_soldiercostmaterial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_soldierNum;
        break;
      }

      // optional int32 soldierNum = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiernum_)));
          set_has_soldiernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_soldierCD;
        break;
      }

      // optional int32 soldierCD = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_soldierCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &soldiercd_)));
          set_has_soldiercd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_renewBaseCost;
        break;
      }

      // optional int32 renewBaseCost = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renewBaseCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renewbasecost_)));
          set_has_renewbasecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_renewBaseHP;
        break;
      }

      // optional int32 renewBaseHP = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renewBaseHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renewbasehp_)));
          set_has_renewbasehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_renewBaseCD;
        break;
      }

      // optional int32 renewBaseCD = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renewBaseCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &renewbasecd_)));
          set_has_renewbasecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_reviveCD;
        break;
      }

      // optional int32 reviveCD = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivecd_)));
          set_has_revivecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_guildwarWinItem;
        break;
      }

      // optional int64 guildwarWinItem = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarWinItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildwarwinitem_)));
          set_has_guildwarwinitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_guildwarWinNum;
        break;
      }

      // optional int32 guildwarWinNum = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarwinnum_)));
          set_has_guildwarwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_guildwarLoseItem;
        break;
      }

      // optional int64 guildwarLoseItem = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarLoseItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildwarloseitem_)));
          set_has_guildwarloseitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_guildwarLoseNum;
        break;
      }

      // optional int32 guildwarLoseNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarLoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarlosenum_)));
          set_has_guildwarlosenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_guildwarDrawItem;
        break;
      }

      // optional int64 guildwarDrawItem = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarDrawItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guildwardrawitem_)));
          set_has_guildwardrawitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_guildwarDrawNum;
        break;
      }

      // optional int32 guildwarDrawNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildwarDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwardrawnum_)));
          set_has_guildwardrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_MaterialId;
        break;
      }

      // optional int64 MaterialId = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &materialid_)));
          set_has_materialid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_MaterialConversion;
        break;
      }

      // optional int32 MaterialConversion = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaterialConversion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &materialconversion_)));
          set_has_materialconversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_GuildWarExp;
        break;
      }

      // optional int32 GuildWarExp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildWarExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildwarexp_)));
          set_has_guildwarexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildwarconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 warid = 1;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->warid(), output);
  }

  // optional int32 signopenCycle = 2;
  if (has_signopencycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->signopencycle(), output);
  }

  // optional string signopenTime = 3;
  if (has_signopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signopentime().data(), this->signopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->signopentime(), output);
  }

  // optional int32 signclosedCycle = 4;
  if (has_signclosedcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->signclosedcycle(), output);
  }

  // optional string signclosedTime = 5;
  if (has_signclosedtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signclosedtime().data(), this->signclosedtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->signclosedtime(), output);
  }

  // optional int32 guildPosition = 6;
  if (has_guildposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->guildposition(), output);
  }

  // optional int32 guildNum = 7;
  if (has_guildnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->guildnum(), output);
  }

  // optional int32 guildLevel = 8;
  if (has_guildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->guildlevel(), output);
  }

  // optional int32 enteropenCycle = 9;
  if (has_enteropencycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->enteropencycle(), output);
  }

  // optional string enteropenTime = 10;
  if (has_enteropentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enteropentime().data(), this->enteropentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->enteropentime(), output);
  }

  // optional int32 enterclosedCycle = 11;
  if (has_enterclosedcycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->enterclosedcycle(), output);
  }

  // optional string enterclosedTime = 12;
  if (has_enterclosedtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enterclosedtime().data(), this->enterclosedtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->enterclosedtime(), output);
  }

  // optional int32 guildwarBaseScore = 13;
  if (has_guildwarbasescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->guildwarbasescore(), output);
  }

  // optional int32 guildwarWinScore = 14;
  if (has_guildwarwinscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->guildwarwinscore(), output);
  }

  // optional int32 guildwarLoseScore = 15;
  if (has_guildwarlosescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->guildwarlosescore(), output);
  }

  // optional int32 guildwarDrawScore = 16;
  if (has_guildwardrawscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->guildwardrawscore(), output);
  }

  // optional int32 maxMaterial = 17;
  if (has_maxmaterial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->maxmaterial(), output);
  }

  // optional int32 soldierCostMaterial = 18;
  if (has_soldiercostmaterial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->soldiercostmaterial(), output);
  }

  // optional int32 soldierNum = 19;
  if (has_soldiernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->soldiernum(), output);
  }

  // optional int32 soldierCD = 20;
  if (has_soldiercd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->soldiercd(), output);
  }

  // optional int32 renewBaseCost = 21;
  if (has_renewbasecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->renewbasecost(), output);
  }

  // optional int32 renewBaseHP = 22;
  if (has_renewbasehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->renewbasehp(), output);
  }

  // optional int32 renewBaseCD = 23;
  if (has_renewbasecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->renewbasecd(), output);
  }

  // optional int32 reviveCD = 24;
  if (has_revivecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->revivecd(), output);
  }

  // optional int64 guildwarWinItem = 25;
  if (has_guildwarwinitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->guildwarwinitem(), output);
  }

  // optional int32 guildwarWinNum = 26;
  if (has_guildwarwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->guildwarwinnum(), output);
  }

  // optional int64 guildwarLoseItem = 27;
  if (has_guildwarloseitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->guildwarloseitem(), output);
  }

  // optional int32 guildwarLoseNum = 28;
  if (has_guildwarlosenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->guildwarlosenum(), output);
  }

  // optional int64 guildwarDrawItem = 29;
  if (has_guildwardrawitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->guildwardrawitem(), output);
  }

  // optional int32 guildwarDrawNum = 30;
  if (has_guildwardrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->guildwardrawnum(), output);
  }

  // optional int64 MaterialId = 31;
  if (has_materialid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->materialid(), output);
  }

  // optional int32 MaterialConversion = 32;
  if (has_materialconversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->materialconversion(), output);
  }

  // optional int32 GuildWarExp = 33;
  if (has_guildwarexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->guildwarexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildwarconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 warid = 1;
  if (has_warid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->warid(), target);
  }

  // optional int32 signopenCycle = 2;
  if (has_signopencycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->signopencycle(), target);
  }

  // optional string signopenTime = 3;
  if (has_signopentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signopentime().data(), this->signopentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->signopentime(), target);
  }

  // optional int32 signclosedCycle = 4;
  if (has_signclosedcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->signclosedcycle(), target);
  }

  // optional string signclosedTime = 5;
  if (has_signclosedtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->signclosedtime().data(), this->signclosedtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->signclosedtime(), target);
  }

  // optional int32 guildPosition = 6;
  if (has_guildposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->guildposition(), target);
  }

  // optional int32 guildNum = 7;
  if (has_guildnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->guildnum(), target);
  }

  // optional int32 guildLevel = 8;
  if (has_guildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->guildlevel(), target);
  }

  // optional int32 enteropenCycle = 9;
  if (has_enteropencycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->enteropencycle(), target);
  }

  // optional string enteropenTime = 10;
  if (has_enteropentime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enteropentime().data(), this->enteropentime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->enteropentime(), target);
  }

  // optional int32 enterclosedCycle = 11;
  if (has_enterclosedcycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->enterclosedcycle(), target);
  }

  // optional string enterclosedTime = 12;
  if (has_enterclosedtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->enterclosedtime().data(), this->enterclosedtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->enterclosedtime(), target);
  }

  // optional int32 guildwarBaseScore = 13;
  if (has_guildwarbasescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->guildwarbasescore(), target);
  }

  // optional int32 guildwarWinScore = 14;
  if (has_guildwarwinscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->guildwarwinscore(), target);
  }

  // optional int32 guildwarLoseScore = 15;
  if (has_guildwarlosescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->guildwarlosescore(), target);
  }

  // optional int32 guildwarDrawScore = 16;
  if (has_guildwardrawscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->guildwardrawscore(), target);
  }

  // optional int32 maxMaterial = 17;
  if (has_maxmaterial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->maxmaterial(), target);
  }

  // optional int32 soldierCostMaterial = 18;
  if (has_soldiercostmaterial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->soldiercostmaterial(), target);
  }

  // optional int32 soldierNum = 19;
  if (has_soldiernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->soldiernum(), target);
  }

  // optional int32 soldierCD = 20;
  if (has_soldiercd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->soldiercd(), target);
  }

  // optional int32 renewBaseCost = 21;
  if (has_renewbasecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->renewbasecost(), target);
  }

  // optional int32 renewBaseHP = 22;
  if (has_renewbasehp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->renewbasehp(), target);
  }

  // optional int32 renewBaseCD = 23;
  if (has_renewbasecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->renewbasecd(), target);
  }

  // optional int32 reviveCD = 24;
  if (has_revivecd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->revivecd(), target);
  }

  // optional int64 guildwarWinItem = 25;
  if (has_guildwarwinitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->guildwarwinitem(), target);
  }

  // optional int32 guildwarWinNum = 26;
  if (has_guildwarwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->guildwarwinnum(), target);
  }

  // optional int64 guildwarLoseItem = 27;
  if (has_guildwarloseitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->guildwarloseitem(), target);
  }

  // optional int32 guildwarLoseNum = 28;
  if (has_guildwarlosenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->guildwarlosenum(), target);
  }

  // optional int64 guildwarDrawItem = 29;
  if (has_guildwardrawitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->guildwardrawitem(), target);
  }

  // optional int32 guildwarDrawNum = 30;
  if (has_guildwardrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->guildwardrawnum(), target);
  }

  // optional int64 MaterialId = 31;
  if (has_materialid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->materialid(), target);
  }

  // optional int32 MaterialConversion = 32;
  if (has_materialconversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->materialconversion(), target);
  }

  // optional int32 GuildWarExp = 33;
  if (has_guildwarexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->guildwarexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildwarconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 warid = 1;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->warid());
    }

    // optional int32 signopenCycle = 2;
    if (has_signopencycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signopencycle());
    }

    // optional string signopenTime = 3;
    if (has_signopentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signopentime());
    }

    // optional int32 signclosedCycle = 4;
    if (has_signclosedcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signclosedcycle());
    }

    // optional string signclosedTime = 5;
    if (has_signclosedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signclosedtime());
    }

    // optional int32 guildPosition = 6;
    if (has_guildposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildposition());
    }

    // optional int32 guildNum = 7;
    if (has_guildnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildnum());
    }

    // optional int32 guildLevel = 8;
    if (has_guildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildlevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 enteropenCycle = 9;
    if (has_enteropencycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enteropencycle());
    }

    // optional string enteropenTime = 10;
    if (has_enteropentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enteropentime());
    }

    // optional int32 enterclosedCycle = 11;
    if (has_enterclosedcycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enterclosedcycle());
    }

    // optional string enterclosedTime = 12;
    if (has_enterclosedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->enterclosedtime());
    }

    // optional int32 guildwarBaseScore = 13;
    if (has_guildwarbasescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarbasescore());
    }

    // optional int32 guildwarWinScore = 14;
    if (has_guildwarwinscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarwinscore());
    }

    // optional int32 guildwarLoseScore = 15;
    if (has_guildwarlosescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarlosescore());
    }

    // optional int32 guildwarDrawScore = 16;
    if (has_guildwardrawscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwardrawscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 maxMaterial = 17;
    if (has_maxmaterial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxmaterial());
    }

    // optional int32 soldierCostMaterial = 18;
    if (has_soldiercostmaterial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiercostmaterial());
    }

    // optional int32 soldierNum = 19;
    if (has_soldiernum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiernum());
    }

    // optional int32 soldierCD = 20;
    if (has_soldiercd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->soldiercd());
    }

    // optional int32 renewBaseCost = 21;
    if (has_renewbasecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renewbasecost());
    }

    // optional int32 renewBaseHP = 22;
    if (has_renewbasehp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renewbasehp());
    }

    // optional int32 renewBaseCD = 23;
    if (has_renewbasecd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->renewbasecd());
    }

    // optional int32 reviveCD = 24;
    if (has_revivecd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivecd());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 guildwarWinItem = 25;
    if (has_guildwarwinitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildwarwinitem());
    }

    // optional int32 guildwarWinNum = 26;
    if (has_guildwarwinnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarwinnum());
    }

    // optional int64 guildwarLoseItem = 27;
    if (has_guildwarloseitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildwarloseitem());
    }

    // optional int32 guildwarLoseNum = 28;
    if (has_guildwarlosenum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarlosenum());
    }

    // optional int64 guildwarDrawItem = 29;
    if (has_guildwardrawitem()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guildwardrawitem());
    }

    // optional int32 guildwarDrawNum = 30;
    if (has_guildwardrawnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwardrawnum());
    }

    // optional int64 MaterialId = 31;
    if (has_materialid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->materialid());
    }

    // optional int32 MaterialConversion = 32;
    if (has_materialconversion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->materialconversion());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 GuildWarExp = 33;
    if (has_guildwarexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildwarexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildwarconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildwarconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildwarconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildwarconstant::MergeFrom(const guildwarconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_signopencycle()) {
      set_signopencycle(from.signopencycle());
    }
    if (from.has_signopentime()) {
      set_signopentime(from.signopentime());
    }
    if (from.has_signclosedcycle()) {
      set_signclosedcycle(from.signclosedcycle());
    }
    if (from.has_signclosedtime()) {
      set_signclosedtime(from.signclosedtime());
    }
    if (from.has_guildposition()) {
      set_guildposition(from.guildposition());
    }
    if (from.has_guildnum()) {
      set_guildnum(from.guildnum());
    }
    if (from.has_guildlevel()) {
      set_guildlevel(from.guildlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enteropencycle()) {
      set_enteropencycle(from.enteropencycle());
    }
    if (from.has_enteropentime()) {
      set_enteropentime(from.enteropentime());
    }
    if (from.has_enterclosedcycle()) {
      set_enterclosedcycle(from.enterclosedcycle());
    }
    if (from.has_enterclosedtime()) {
      set_enterclosedtime(from.enterclosedtime());
    }
    if (from.has_guildwarbasescore()) {
      set_guildwarbasescore(from.guildwarbasescore());
    }
    if (from.has_guildwarwinscore()) {
      set_guildwarwinscore(from.guildwarwinscore());
    }
    if (from.has_guildwarlosescore()) {
      set_guildwarlosescore(from.guildwarlosescore());
    }
    if (from.has_guildwardrawscore()) {
      set_guildwardrawscore(from.guildwardrawscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_maxmaterial()) {
      set_maxmaterial(from.maxmaterial());
    }
    if (from.has_soldiercostmaterial()) {
      set_soldiercostmaterial(from.soldiercostmaterial());
    }
    if (from.has_soldiernum()) {
      set_soldiernum(from.soldiernum());
    }
    if (from.has_soldiercd()) {
      set_soldiercd(from.soldiercd());
    }
    if (from.has_renewbasecost()) {
      set_renewbasecost(from.renewbasecost());
    }
    if (from.has_renewbasehp()) {
      set_renewbasehp(from.renewbasehp());
    }
    if (from.has_renewbasecd()) {
      set_renewbasecd(from.renewbasecd());
    }
    if (from.has_revivecd()) {
      set_revivecd(from.revivecd());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_guildwarwinitem()) {
      set_guildwarwinitem(from.guildwarwinitem());
    }
    if (from.has_guildwarwinnum()) {
      set_guildwarwinnum(from.guildwarwinnum());
    }
    if (from.has_guildwarloseitem()) {
      set_guildwarloseitem(from.guildwarloseitem());
    }
    if (from.has_guildwarlosenum()) {
      set_guildwarlosenum(from.guildwarlosenum());
    }
    if (from.has_guildwardrawitem()) {
      set_guildwardrawitem(from.guildwardrawitem());
    }
    if (from.has_guildwardrawnum()) {
      set_guildwardrawnum(from.guildwardrawnum());
    }
    if (from.has_materialid()) {
      set_materialid(from.materialid());
    }
    if (from.has_materialconversion()) {
      set_materialconversion(from.materialconversion());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_guildwarexp()) {
      set_guildwarexp(from.guildwarexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildwarconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildwarconstant::CopyFrom(const guildwarconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildwarconstant::IsInitialized() const {

  return true;
}

void guildwarconstant::Swap(guildwarconstant* other) {
  if (other != this) {
    std::swap(warid_, other->warid_);
    std::swap(signopencycle_, other->signopencycle_);
    std::swap(signopentime_, other->signopentime_);
    std::swap(signclosedcycle_, other->signclosedcycle_);
    std::swap(signclosedtime_, other->signclosedtime_);
    std::swap(guildposition_, other->guildposition_);
    std::swap(guildnum_, other->guildnum_);
    std::swap(guildlevel_, other->guildlevel_);
    std::swap(enteropencycle_, other->enteropencycle_);
    std::swap(enteropentime_, other->enteropentime_);
    std::swap(enterclosedcycle_, other->enterclosedcycle_);
    std::swap(enterclosedtime_, other->enterclosedtime_);
    std::swap(guildwarbasescore_, other->guildwarbasescore_);
    std::swap(guildwarwinscore_, other->guildwarwinscore_);
    std::swap(guildwarlosescore_, other->guildwarlosescore_);
    std::swap(guildwardrawscore_, other->guildwardrawscore_);
    std::swap(maxmaterial_, other->maxmaterial_);
    std::swap(soldiercostmaterial_, other->soldiercostmaterial_);
    std::swap(soldiernum_, other->soldiernum_);
    std::swap(soldiercd_, other->soldiercd_);
    std::swap(renewbasecost_, other->renewbasecost_);
    std::swap(renewbasehp_, other->renewbasehp_);
    std::swap(renewbasecd_, other->renewbasecd_);
    std::swap(revivecd_, other->revivecd_);
    std::swap(guildwarwinitem_, other->guildwarwinitem_);
    std::swap(guildwarwinnum_, other->guildwarwinnum_);
    std::swap(guildwarloseitem_, other->guildwarloseitem_);
    std::swap(guildwarlosenum_, other->guildwarlosenum_);
    std::swap(guildwardrawitem_, other->guildwardrawitem_);
    std::swap(guildwardrawnum_, other->guildwardrawnum_);
    std::swap(materialid_, other->materialid_);
    std::swap(materialconversion_, other->materialconversion_);
    std::swap(guildwarexp_, other->guildwarexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildwarconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildwarconstant_descriptor_;
  metadata.reflection = guildwarconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildwarconstant::kGuildwarconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildwarconstant::Sheet_guildwarconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildwarconstant::InitAsDefaultInstance() {
}

Sheet_guildwarconstant::Sheet_guildwarconstant(const Sheet_guildwarconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildwarconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildwarconstant::~Sheet_guildwarconstant() {
  SharedDtor();
}

void Sheet_guildwarconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildwarconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildwarconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildwarconstant_descriptor_;
}

const Sheet_guildwarconstant& Sheet_guildwarconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildwarconstant* Sheet_guildwarconstant::default_instance_ = NULL;

Sheet_guildwarconstant* Sheet_guildwarconstant::New() const {
  return new Sheet_guildwarconstant;
}

void Sheet_guildwarconstant::Clear() {
  guildwarconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildwarconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildwarconstant guildwarconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildwarconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildwarconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildwarconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildwarconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildwarconstant guildwarconstant_List = 1;
  for (int i = 0; i < this->guildwarconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildwarconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildwarconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildwarconstant guildwarconstant_List = 1;
  for (int i = 0; i < this->guildwarconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildwarconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildwarconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildwarconstant guildwarconstant_List = 1;
  total_size += 1 * this->guildwarconstant_list_size();
  for (int i = 0; i < this->guildwarconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildwarconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildwarconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildwarconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildwarconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildwarconstant::MergeFrom(const Sheet_guildwarconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildwarconstant_list_.MergeFrom(from.guildwarconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildwarconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildwarconstant::CopyFrom(const Sheet_guildwarconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildwarconstant::IsInitialized() const {

  return true;
}

void Sheet_guildwarconstant::Swap(Sheet_guildwarconstant* other) {
  if (other != this) {
    guildwarconstant_list_.Swap(&other->guildwarconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildwarconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildwarconstant_descriptor_;
  metadata.reflection = Sheet_guildwarconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildwarmorale::kMoraleLevelFieldNumber;
const int guildwarmorale::kCostMaterialFieldNumber;
const int guildwarmorale::kSkillIdFieldNumber;
const int guildwarmorale::kSkillLevelFieldNumber;
#endif  // !_MSC_VER

guildwarmorale::guildwarmorale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildwarmorale::InitAsDefaultInstance() {
}

guildwarmorale::guildwarmorale(const guildwarmorale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildwarmorale::SharedCtor() {
  _cached_size_ = 0;
  moralelevel_ = GOOGLE_LONGLONG(0);
  costmaterial_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  skilllevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildwarmorale::~guildwarmorale() {
  SharedDtor();
}

void guildwarmorale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildwarmorale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildwarmorale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildwarmorale_descriptor_;
}

const guildwarmorale& guildwarmorale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildwarmorale* guildwarmorale::default_instance_ = NULL;

guildwarmorale* guildwarmorale::New() const {
  return new guildwarmorale;
}

void guildwarmorale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moralelevel_ = GOOGLE_LONGLONG(0);
    costmaterial_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
    skilllevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildwarmorale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 moraleLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &moralelevel_)));
          set_has_moralelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costMaterial;
        break;
      }

      // optional int32 costMaterial = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costMaterial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costmaterial_)));
          set_has_costmaterial();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillId;
        break;
      }

      // optional int64 skillId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skillLevel;
        break;
      }

      // optional int32 skillLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
          set_has_skilllevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildwarmorale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 moraleLevel = 1;
  if (has_moralelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->moralelevel(), output);
  }

  // optional int32 costMaterial = 2;
  if (has_costmaterial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->costmaterial(), output);
  }

  // optional int64 skillId = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->skillid(), output);
  }

  // optional int32 skillLevel = 4;
  if (has_skilllevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skilllevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildwarmorale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 moraleLevel = 1;
  if (has_moralelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->moralelevel(), target);
  }

  // optional int32 costMaterial = 2;
  if (has_costmaterial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->costmaterial(), target);
  }

  // optional int64 skillId = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->skillid(), target);
  }

  // optional int32 skillLevel = 4;
  if (has_skilllevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skilllevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildwarmorale::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 moraleLevel = 1;
    if (has_moralelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->moralelevel());
    }

    // optional int32 costMaterial = 2;
    if (has_costmaterial()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costmaterial());
    }

    // optional int64 skillId = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

    // optional int32 skillLevel = 4;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildwarmorale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildwarmorale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildwarmorale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildwarmorale::MergeFrom(const guildwarmorale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moralelevel()) {
      set_moralelevel(from.moralelevel());
    }
    if (from.has_costmaterial()) {
      set_costmaterial(from.costmaterial());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllevel()) {
      set_skilllevel(from.skilllevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildwarmorale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildwarmorale::CopyFrom(const guildwarmorale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildwarmorale::IsInitialized() const {

  return true;
}

void guildwarmorale::Swap(guildwarmorale* other) {
  if (other != this) {
    std::swap(moralelevel_, other->moralelevel_);
    std::swap(costmaterial_, other->costmaterial_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllevel_, other->skilllevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildwarmorale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildwarmorale_descriptor_;
  metadata.reflection = guildwarmorale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildwarmorale::kGuildwarmoraleListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildwarmorale::Sheet_guildwarmorale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildwarmorale::InitAsDefaultInstance() {
}

Sheet_guildwarmorale::Sheet_guildwarmorale(const Sheet_guildwarmorale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildwarmorale::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildwarmorale::~Sheet_guildwarmorale() {
  SharedDtor();
}

void Sheet_guildwarmorale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildwarmorale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildwarmorale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildwarmorale_descriptor_;
}

const Sheet_guildwarmorale& Sheet_guildwarmorale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildwarmorale* Sheet_guildwarmorale::default_instance_ = NULL;

Sheet_guildwarmorale* Sheet_guildwarmorale::New() const {
  return new Sheet_guildwarmorale;
}

void Sheet_guildwarmorale::Clear() {
  guildwarmorale_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildwarmorale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildwarmorale guildwarmorale_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildwarmorale_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildwarmorale_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildwarmorale_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildwarmorale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildwarmorale guildwarmorale_List = 1;
  for (int i = 0; i < this->guildwarmorale_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildwarmorale_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildwarmorale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildwarmorale guildwarmorale_List = 1;
  for (int i = 0; i < this->guildwarmorale_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildwarmorale_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildwarmorale::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildwarmorale guildwarmorale_List = 1;
  total_size += 1 * this->guildwarmorale_list_size();
  for (int i = 0; i < this->guildwarmorale_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildwarmorale_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildwarmorale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildwarmorale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildwarmorale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildwarmorale::MergeFrom(const Sheet_guildwarmorale& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildwarmorale_list_.MergeFrom(from.guildwarmorale_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildwarmorale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildwarmorale::CopyFrom(const Sheet_guildwarmorale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildwarmorale::IsInitialized() const {

  return true;
}

void Sheet_guildwarmorale::Swap(Sheet_guildwarmorale* other) {
  if (other != this) {
    guildwarmorale_list_.Swap(&other->guildwarmorale_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildwarmorale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildwarmorale_descriptor_;
  metadata.reflection = Sheet_guildwarmorale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int guildwarrevive::kReviveNumFieldNumber;
const int guildwarrevive::kReviveCostFieldNumber;
#endif  // !_MSC_VER

guildwarrevive::guildwarrevive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void guildwarrevive::InitAsDefaultInstance() {
}

guildwarrevive::guildwarrevive(const guildwarrevive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void guildwarrevive::SharedCtor() {
  _cached_size_ = 0;
  revivenum_ = 0;
  revivecost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

guildwarrevive::~guildwarrevive() {
  SharedDtor();
}

void guildwarrevive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void guildwarrevive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* guildwarrevive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return guildwarrevive_descriptor_;
}

const guildwarrevive& guildwarrevive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

guildwarrevive* guildwarrevive::default_instance_ = NULL;

guildwarrevive* guildwarrevive::New() const {
  return new guildwarrevive;
}

void guildwarrevive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    revivenum_ = 0;
    revivecost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool guildwarrevive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reviveNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivenum_)));
          set_has_revivenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reviveCost;
        break;
      }

      // optional int32 reviveCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reviveCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &revivecost_)));
          set_has_revivecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void guildwarrevive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 reviveNum = 1;
  if (has_revivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->revivenum(), output);
  }

  // optional int32 reviveCost = 2;
  if (has_revivecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->revivecost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* guildwarrevive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 reviveNum = 1;
  if (has_revivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->revivenum(), target);
  }

  // optional int32 reviveCost = 2;
  if (has_revivecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->revivecost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int guildwarrevive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 reviveNum = 1;
    if (has_revivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivenum());
    }

    // optional int32 reviveCost = 2;
    if (has_revivecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->revivecost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void guildwarrevive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const guildwarrevive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const guildwarrevive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void guildwarrevive::MergeFrom(const guildwarrevive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_revivenum()) {
      set_revivenum(from.revivenum());
    }
    if (from.has_revivecost()) {
      set_revivecost(from.revivecost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void guildwarrevive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void guildwarrevive::CopyFrom(const guildwarrevive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool guildwarrevive::IsInitialized() const {

  return true;
}

void guildwarrevive::Swap(guildwarrevive* other) {
  if (other != this) {
    std::swap(revivenum_, other->revivenum_);
    std::swap(revivecost_, other->revivecost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata guildwarrevive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = guildwarrevive_descriptor_;
  metadata.reflection = guildwarrevive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_guildwarrevive::kGuildwarreviveListFieldNumber;
#endif  // !_MSC_VER

Sheet_guildwarrevive::Sheet_guildwarrevive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_guildwarrevive::InitAsDefaultInstance() {
}

Sheet_guildwarrevive::Sheet_guildwarrevive(const Sheet_guildwarrevive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_guildwarrevive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_guildwarrevive::~Sheet_guildwarrevive() {
  SharedDtor();
}

void Sheet_guildwarrevive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_guildwarrevive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_guildwarrevive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_guildwarrevive_descriptor_;
}

const Sheet_guildwarrevive& Sheet_guildwarrevive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_guild_2eproto();
  return *default_instance_;
}

Sheet_guildwarrevive* Sheet_guildwarrevive::default_instance_ = NULL;

Sheet_guildwarrevive* Sheet_guildwarrevive::New() const {
  return new Sheet_guildwarrevive;
}

void Sheet_guildwarrevive::Clear() {
  guildwarrevive_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_guildwarrevive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.guildwarrevive guildwarrevive_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildwarrevive_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildwarrevive_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildwarrevive_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_guildwarrevive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.guildwarrevive guildwarrevive_List = 1;
  for (int i = 0; i < this->guildwarrevive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildwarrevive_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_guildwarrevive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.guildwarrevive guildwarrevive_List = 1;
  for (int i = 0; i < this->guildwarrevive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildwarrevive_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_guildwarrevive::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.guildwarrevive guildwarrevive_List = 1;
  total_size += 1 * this->guildwarrevive_list_size();
  for (int i = 0; i < this->guildwarrevive_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildwarrevive_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_guildwarrevive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_guildwarrevive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_guildwarrevive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_guildwarrevive::MergeFrom(const Sheet_guildwarrevive& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildwarrevive_list_.MergeFrom(from.guildwarrevive_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_guildwarrevive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_guildwarrevive::CopyFrom(const Sheet_guildwarrevive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_guildwarrevive::IsInitialized() const {

  return true;
}

void Sheet_guildwarrevive::Swap(Sheet_guildwarrevive* other) {
  if (other != this) {
    guildwarrevive_list_.Swap(&other->guildwarrevive_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_guildwarrevive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_guildwarrevive_descriptor_;
  metadata.reflection = Sheet_guildwarrevive_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
