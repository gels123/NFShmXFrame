// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operate.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "operate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* operateoperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateoperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateoperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateoperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatetutor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatetutor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatetutor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatetutor_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatejiangli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatejiangli_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatejiangli_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatejiangli_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatehoroscope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatehoroscope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatehoroscope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatehoroscope_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatehoroscopePool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatehoroscopePool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatehoroscopePool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatehoroscopePool_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatehoroscopeExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatehoroscopeExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatehoroscopeExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatehoroscopeExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* operateconst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateconst_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateconst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateconst_reflection_ = NULL;
const ::google::protobuf::Descriptor* operateunlimited_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateunlimited_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateunlimited_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateunlimited_reflection_ = NULL;
const ::google::protobuf::Descriptor* operaterand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operaterand_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operaterand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operaterand_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatemooncard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatemooncard_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatemooncard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatemooncard_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatefund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatefund_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatefund_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatefund_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* operateshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* operatewish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operatewish_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operatewish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operatewish_reflection_ = NULL;
const ::google::protobuf::Descriptor* operateturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateturntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateturntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* operateturntableTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  operateturntableTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_operateturntableTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_operateturntableTask_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_operate_2eproto() {
  protobuf_AddDesc_operate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "operate.proto");
  GOOGLE_CHECK(file != NULL);
  operateoperate_descriptor_ = file->message_type(0);
  static const int operateoperate_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, huodong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, nameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, tiaojian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, timea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, timeb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, miaosu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, ifopen_),
  };
  operateoperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateoperate_descriptor_,
      operateoperate::default_instance_,
      operateoperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateoperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateoperate));
  Sheet_operateoperate_descriptor_ = file->message_type(1);
  static const int Sheet_operateoperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateoperate, operateoperate_list_),
  };
  Sheet_operateoperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateoperate_descriptor_,
      Sheet_operateoperate::default_instance_,
      Sheet_operateoperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateoperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateoperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateoperate));
  operatetutor_descriptor_ = file->message_type(2);
  static const int operatetutor_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, conditionparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, conditionparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, teach_),
  };
  operatetutor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatetutor_descriptor_,
      operatetutor::default_instance_,
      operatetutor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetutor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatetutor));
  Sheet_operatetutor_descriptor_ = file->message_type(3);
  static const int Sheet_operatetutor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetutor, operatetutor_list_),
  };
  Sheet_operatetutor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatetutor_descriptor_,
      Sheet_operatetutor::default_instance_,
      Sheet_operatetutor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetutor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetutor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatetutor));
  operatejiangli_descriptor_ = file->message_type(4);
  static const int operatejiangli_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, tiaojianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, huodong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, downnu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, upnu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, miaoshuadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, tiaojian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, sdboxid_),
  };
  operatejiangli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatejiangli_descriptor_,
      operatejiangli::default_instance_,
      operatejiangli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatejiangli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatejiangli));
  Sheet_operatejiangli_descriptor_ = file->message_type(5);
  static const int Sheet_operatejiangli_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatejiangli, operatejiangli_list_),
  };
  Sheet_operatejiangli_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatejiangli_descriptor_,
      Sheet_operatejiangli::default_instance_,
      Sheet_operatejiangli_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatejiangli, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatejiangli, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatejiangli));
  operatehoroscope_descriptor_ = file->message_type(6);
  static const int operatehoroscope_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, daojuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, daojuprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, cycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, poolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, wheeltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, exchangegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, luckid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, fateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, felicityid_),
  };
  operatehoroscope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatehoroscope_descriptor_,
      operatehoroscope::default_instance_,
      operatehoroscope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatehoroscope));
  Sheet_operatehoroscope_descriptor_ = file->message_type(7);
  static const int Sheet_operatehoroscope_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscope, operatehoroscope_list_),
  };
  Sheet_operatehoroscope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatehoroscope_descriptor_,
      Sheet_operatehoroscope::default_instance_,
      Sheet_operatehoroscope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatehoroscope));
  operatehoroscopePool_descriptor_ = file->message_type(8);
  static const int operatehoroscopePool_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, levellimita_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, levellimitb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, typeparma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, order_),
  };
  operatehoroscopePool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatehoroscopePool_descriptor_,
      operatehoroscopePool::default_instance_,
      operatehoroscopePool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopePool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatehoroscopePool));
  Sheet_operatehoroscopePool_descriptor_ = file->message_type(9);
  static const int Sheet_operatehoroscopePool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopePool, operatehoroscopepool_list_),
  };
  Sheet_operatehoroscopePool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatehoroscopePool_descriptor_,
      Sheet_operatehoroscopePool::default_instance_,
      Sheet_operatehoroscopePool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopePool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopePool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatehoroscopePool));
  operatehoroscopeExchange_descriptor_ = file->message_type(10);
  static const int operatehoroscopeExchange_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, horoscopeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, prizenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, luckneed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, times_),
  };
  operatehoroscopeExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatehoroscopeExchange_descriptor_,
      operatehoroscopeExchange::default_instance_,
      operatehoroscopeExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatehoroscopeExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatehoroscopeExchange));
  Sheet_operatehoroscopeExchange_descriptor_ = file->message_type(11);
  static const int Sheet_operatehoroscopeExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopeExchange, operatehoroscopeexchange_list_),
  };
  Sheet_operatehoroscopeExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatehoroscopeExchange_descriptor_,
      Sheet_operatehoroscopeExchange::default_instance_,
      Sheet_operatehoroscopeExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopeExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatehoroscopeExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatehoroscopeExchange));
  operateconst_descriptor_ = file->message_type(12);
  static const int operateconst_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateconst, constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateconst, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateconst, stringdata_),
  };
  operateconst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateconst_descriptor_,
      operateconst::default_instance_,
      operateconst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateconst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateconst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateconst));
  Sheet_operateconst_descriptor_ = file->message_type(13);
  static const int Sheet_operateconst_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateconst, operateconst_list_),
  };
  Sheet_operateconst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateconst_descriptor_,
      Sheet_operateconst::default_instance_,
      Sheet_operateconst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateconst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateconst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateconst));
  operateunlimited_descriptor_ = file->message_type(14);
  static const int operateunlimited_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, severprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, num_),
  };
  operateunlimited_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateunlimited_descriptor_,
      operateunlimited::default_instance_,
      operateunlimited_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateunlimited, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateunlimited));
  Sheet_operateunlimited_descriptor_ = file->message_type(15);
  static const int Sheet_operateunlimited_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateunlimited, operateunlimited_list_),
  };
  Sheet_operateunlimited_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateunlimited_descriptor_,
      Sheet_operateunlimited::default_instance_,
      Sheet_operateunlimited_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateunlimited, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateunlimited, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateunlimited));
  operaterand_descriptor_ = file->message_type(16);
  static const int operaterand_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, randtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, canshu_),
  };
  operaterand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operaterand_descriptor_,
      operaterand::default_instance_,
      operaterand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operaterand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operaterand));
  Sheet_operaterand_descriptor_ = file->message_type(17);
  static const int Sheet_operaterand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operaterand, operaterand_list_),
  };
  Sheet_operaterand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operaterand_descriptor_,
      Sheet_operaterand::default_instance_,
      Sheet_operaterand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operaterand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operaterand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operaterand));
  operatemooncard_descriptor_ = file->message_type(18);
  static const int operatemooncard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatemooncard, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatemooncard, payback_),
  };
  operatemooncard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatemooncard_descriptor_,
      operatemooncard::default_instance_,
      operatemooncard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatemooncard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatemooncard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatemooncard));
  Sheet_operatemooncard_descriptor_ = file->message_type(19);
  static const int Sheet_operatemooncard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatemooncard, operatemooncard_list_),
  };
  Sheet_operatemooncard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatemooncard_descriptor_,
      Sheet_operatemooncard::default_instance_,
      Sheet_operatemooncard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatemooncard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatemooncard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatemooncard));
  operatefund_descriptor_ = file->message_type(20);
  static const int operatefund_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, rebates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, rebatel_),
  };
  operatefund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatefund_descriptor_,
      operatefund::default_instance_,
      operatefund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatefund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatefund));
  Sheet_operatefund_descriptor_ = file->message_type(21);
  static const int Sheet_operatefund_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatefund, operatefund_list_),
  };
  Sheet_operatefund_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatefund_descriptor_,
      Sheet_operatefund::default_instance_,
      Sheet_operatefund_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatefund, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatefund, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatefund));
  operatetask_descriptor_ = file->message_type(22);
  static const int operatetask_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, tasknan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, num_),
  };
  operatetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatetask_descriptor_,
      operatetask::default_instance_,
      operatetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatetask));
  Sheet_operatetask_descriptor_ = file->message_type(23);
  static const int Sheet_operatetask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetask, operatetask_list_),
  };
  Sheet_operatetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatetask_descriptor_,
      Sheet_operatetask::default_instance_,
      Sheet_operatetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatetask));
  operateshop_descriptor_ = file->message_type(24);
  static const int operateshop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, dprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, timelimit_),
  };
  operateshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateshop_descriptor_,
      operateshop::default_instance_,
      operateshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateshop));
  Sheet_operateshop_descriptor_ = file->message_type(25);
  static const int Sheet_operateshop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateshop, operateshop_list_),
  };
  Sheet_operateshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateshop_descriptor_,
      Sheet_operateshop::default_instance_,
      Sheet_operateshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateshop));
  operatewish_descriptor_ = file->message_type(26);
  static const int operatewish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatewish, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatewish, exp_),
  };
  operatewish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operatewish_descriptor_,
      operatewish::default_instance_,
      operatewish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatewish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operatewish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operatewish));
  Sheet_operatewish_descriptor_ = file->message_type(27);
  static const int Sheet_operatewish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatewish, operatewish_list_),
  };
  Sheet_operatewish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operatewish_descriptor_,
      Sheet_operatewish::default_instance_,
      Sheet_operatewish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatewish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operatewish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operatewish));
  operateturntable_descriptor_ = file->message_type(28);
  static const int operateturntable_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, prizelevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, relation_),
  };
  operateturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateturntable_descriptor_,
      operateturntable::default_instance_,
      operateturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateturntable));
  Sheet_operateturntable_descriptor_ = file->message_type(29);
  static const int Sheet_operateturntable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntable, operateturntable_list_),
  };
  Sheet_operateturntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateturntable_descriptor_,
      Sheet_operateturntable::default_instance_,
      Sheet_operateturntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateturntable));
  operateturntableTask_descriptor_ = file->message_type(30);
  static const int operateturntableTask_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, taskparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, itemcount_),
  };
  operateturntableTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      operateturntableTask_descriptor_,
      operateturntableTask::default_instance_,
      operateturntableTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(operateturntableTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(operateturntableTask));
  Sheet_operateturntableTask_descriptor_ = file->message_type(31);
  static const int Sheet_operateturntableTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntableTask, operateturntabletask_list_),
  };
  Sheet_operateturntableTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_operateturntableTask_descriptor_,
      Sheet_operateturntableTask::default_instance_,
      Sheet_operateturntableTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntableTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_operateturntableTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_operateturntableTask));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_operate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateoperate_descriptor_, &operateoperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateoperate_descriptor_, &Sheet_operateoperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatetutor_descriptor_, &operatetutor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatetutor_descriptor_, &Sheet_operatetutor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatejiangli_descriptor_, &operatejiangli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatejiangli_descriptor_, &Sheet_operatejiangli::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatehoroscope_descriptor_, &operatehoroscope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatehoroscope_descriptor_, &Sheet_operatehoroscope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatehoroscopePool_descriptor_, &operatehoroscopePool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatehoroscopePool_descriptor_, &Sheet_operatehoroscopePool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatehoroscopeExchange_descriptor_, &operatehoroscopeExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatehoroscopeExchange_descriptor_, &Sheet_operatehoroscopeExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateconst_descriptor_, &operateconst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateconst_descriptor_, &Sheet_operateconst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateunlimited_descriptor_, &operateunlimited::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateunlimited_descriptor_, &Sheet_operateunlimited::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operaterand_descriptor_, &operaterand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operaterand_descriptor_, &Sheet_operaterand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatemooncard_descriptor_, &operatemooncard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatemooncard_descriptor_, &Sheet_operatemooncard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatefund_descriptor_, &operatefund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatefund_descriptor_, &Sheet_operatefund::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatetask_descriptor_, &operatetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatetask_descriptor_, &Sheet_operatetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateshop_descriptor_, &operateshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateshop_descriptor_, &Sheet_operateshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operatewish_descriptor_, &operatewish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operatewish_descriptor_, &Sheet_operatewish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateturntable_descriptor_, &operateturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateturntable_descriptor_, &Sheet_operateturntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    operateturntableTask_descriptor_, &operateturntableTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_operateturntableTask_descriptor_, &Sheet_operateturntableTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_operate_2eproto() {
  delete operateoperate::default_instance_;
  delete operateoperate_reflection_;
  delete Sheet_operateoperate::default_instance_;
  delete Sheet_operateoperate_reflection_;
  delete operatetutor::default_instance_;
  delete operatetutor_reflection_;
  delete Sheet_operatetutor::default_instance_;
  delete Sheet_operatetutor_reflection_;
  delete operatejiangli::default_instance_;
  delete operatejiangli_reflection_;
  delete Sheet_operatejiangli::default_instance_;
  delete Sheet_operatejiangli_reflection_;
  delete operatehoroscope::default_instance_;
  delete operatehoroscope_reflection_;
  delete Sheet_operatehoroscope::default_instance_;
  delete Sheet_operatehoroscope_reflection_;
  delete operatehoroscopePool::default_instance_;
  delete operatehoroscopePool_reflection_;
  delete Sheet_operatehoroscopePool::default_instance_;
  delete Sheet_operatehoroscopePool_reflection_;
  delete operatehoroscopeExchange::default_instance_;
  delete operatehoroscopeExchange_reflection_;
  delete Sheet_operatehoroscopeExchange::default_instance_;
  delete Sheet_operatehoroscopeExchange_reflection_;
  delete operateconst::default_instance_;
  delete operateconst_reflection_;
  delete Sheet_operateconst::default_instance_;
  delete Sheet_operateconst_reflection_;
  delete operateunlimited::default_instance_;
  delete operateunlimited_reflection_;
  delete Sheet_operateunlimited::default_instance_;
  delete Sheet_operateunlimited_reflection_;
  delete operaterand::default_instance_;
  delete operaterand_reflection_;
  delete Sheet_operaterand::default_instance_;
  delete Sheet_operaterand_reflection_;
  delete operatemooncard::default_instance_;
  delete operatemooncard_reflection_;
  delete Sheet_operatemooncard::default_instance_;
  delete Sheet_operatemooncard_reflection_;
  delete operatefund::default_instance_;
  delete operatefund_reflection_;
  delete Sheet_operatefund::default_instance_;
  delete Sheet_operatefund_reflection_;
  delete operatetask::default_instance_;
  delete operatetask_reflection_;
  delete Sheet_operatetask::default_instance_;
  delete Sheet_operatetask_reflection_;
  delete operateshop::default_instance_;
  delete operateshop_reflection_;
  delete Sheet_operateshop::default_instance_;
  delete Sheet_operateshop_reflection_;
  delete operatewish::default_instance_;
  delete operatewish_reflection_;
  delete Sheet_operatewish::default_instance_;
  delete Sheet_operatewish_reflection_;
  delete operateturntable::default_instance_;
  delete operateturntable_reflection_;
  delete Sheet_operateturntable::default_instance_;
  delete Sheet_operateturntable_reflection_;
  delete operateturntableTask::default_instance_;
  delete operateturntableTask_reflection_;
  delete Sheet_operateturntableTask::default_instance_;
  delete Sheet_operateturntableTask_reflection_;
}

void protobuf_AddDesc_operate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\roperate.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\241\003\n\016operateoperate\022\030\n\002id\030\001 \001(\003B"
    "\014\302\377\024\010\346\264\273\345\212\250ID\022!\n\007huoDong\030\002 \001(\005B\020\302\377\024\014\346\211\200\345"
    "\261\236\346\264\273\345\212\250\022\"\n\004name\030\003 \001(\tB\024\302\377\024\014\346\264\273\345\212\250\345\220\215\347\247\260"
    "\220\301\024 \022&\n\006nameId\030\004 \001(\005B\026\302\377\024\022\346\264\273\345\212\250\347\273\206\345\210\206\347\261"
    "\273\345\236\213\022\'\n\010tiaoJian\030\005 \001(\tB\025\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266"
    "\220\301\024\365\001\022\'\n\nservertype\030\006 \001(\005B\023\302\377\024\017\346\234\215\345\212\241\345\231\250"
    "\347\261\273\345\236\213\022#\n\005timeA\030\007 \001(\tB\024\302\377\024\014\345\274\200\345\247\213\346\227\266\351\227\264\220"
    "\301\024 \022#\n\005timeB\030\010 \001(\tB\024\302\377\024\014\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024 "
    "\022\"\n\010timeType\030\t \001(\005B\020\302\377\024\014\346\227\266\351\227\264\347\261\273\345\236\213\022$\n\006"
    "miaoSu\030\n \001(\tB\024\302\377\024\014\350\247\204\345\210\231\346\217\217\350\277\260\220\301\024`\022 \n\006if"
    "Open\030\013 \001(\005B\020\302\377\024\014\346\264\273\345\212\250\345\274\200\345\205\263\"T\n\024Sheet_op"
    "erateoperate\022<\n\023operateoperate_List\030\001 \003("
    "\0132\030.proto_ff.operateoperateB\005\210\301\024\201\001\"\354\001\n\014o"
    "peratetutor\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002ID\022\030\n\004type\030"
    "\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\035\n\tcondition\030\003 \001(\005B\n\302\377"
    "\024\006\346\235\241\344\273\266\022)\n\017conditionParam1\030\004 \001(\005B\020\302\377\024\014\346"
    "\235\241\344\273\266\345\217\202\346\225\260\022)\n\017conditionParam2\030\005 \001(\005B\020\302\377"
    "\024\014\346\235\241\344\273\266\345\217\202\346\225\260\022\033\n\005boxId\030\006 \001(\003B\014\302\377\024\010\345\245\226\345\212"
    "\261ID\022\034\n\005teach\030\007 \001(\005B\r\302\377\024\t\346\225\231\350\257\262\345\200\274\"N\n\022She"
    "et_operatetutor\0228\n\021operatetutor_List\030\001 \003"
    "(\0132\026.proto_ff.operatetutorB\005\210\301\024\231\001\"\332\002\n\016op"
    "eratejiangli\022$\n\ntiaoJianId\030\001 \001(\003B\020\302\377\024\014\350\276"
    "\276\346\210\220\346\235\241\344\273\266\022+\n\007huoDong\030\002 \001(\tB\032\302\377\024\022\346\211\200\345\261\236\346"
    "\264\273\345\212\250\345\220\215\347\247\260\220\301\024 \022!\n\006downNu\030\003 \001(\tB\021\302\377\024\t\345\217\202"
    "\346\225\260\344\270\200\220\301\024 \022\037\n\004upNu\030\004 \001(\tB\021\302\377\024\t\345\217\202\346\225\260\344\272\214\220"
    "\301\024 \022\037\n\007miaoshu\030\005 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022(\n\n"
    "miaoshuAdd\030\006 \001(\tB\024\302\377\024\014\351\231\204\345\212\240\346\217\217\350\277\260\220\301\024\"\022&"
    "\n\010tiaoJian\030\007 \001(\tB\024\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266\220\301\024@\022\033"
    "\n\005boxId\030\010 \001(\003B\014\302\377\024\010\345\245\226\345\212\261ID\022!\n\007sdboxid\030\t"
    " \001(\003B\020\302\377\024\014\345\233\260\351\232\276\345\245\226\345\212\261\"T\n\024Sheet_operatej"
    "iangli\022<\n\023operatejiangli_List\030\001 \003(\0132\030.pr"
    "oto_ff.operatejiangliB\005\210\301\024\232\002\"\302\003\n\020operate"
    "horoscope\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\345\245\226\346\261\240id\022\035\n\007d"
    "aojuId\030\002 \001(\003B\014\302\377\024\010\351\201\223\345\205\267id\022*\n\ndaojuPrice"
    "\030\003 \001(\005B\026\302\377\024\022\351\201\223\345\205\267\345\215\225\346\212\275\344\273\267\346\240\274\022+\n\005cycle\030"
    "\004 \001(\005B\034\302\377\024\030\345\205\215\350\264\271\346\254\241\346\225\260\345\210\267\346\226\260\346\227\266\351\227\264\022 \n\006p"
    "oolid\030\005 \001(\tB\020\302\377\024\010\345\245\226\346\261\240ID\220\301\024 \022(\n\twheelTi"
    "me\030\006 \001(\005B\025\302\377\024\021\350\275\256\347\216\257\346\227\266\351\227\264(\345\244\251)\022,\n\017Excha"
    "ngeGroupID\030\007 \001(\tB\023\302\377\024\013\345\205\221\346\215\242\347\273\204id\220\301\024\'\022$\n"
    "\005boxid\030\010 \001(\tB\025\302\377\024\014\346\200\273\345\245\226\346\261\240box\220\301\024\215\001\022#\n\006l"
    "uckid\030\t \001(\003B\023\302\377\024\017\345\271\270\350\277\220\345\245\226\346\261\240box\022-\n\006fate"
    "id\030\n \001(\tB\035\302\377\024\025\347\264\257\350\256\241\345\271\270\350\277\220\345\200\274\345\245\226\345\212\261\220\301\024#\022"
    "(\n\nfelicityid\030\013 \001(\tB\024\302\377\024\014\347\246\217\346\260\224\345\245\226\345\212\261\220\301\024"
    "/\"Y\n\026Sheet_operatehoroscope\022\?\n\025operateho"
    "roscope_List\030\001 \003(\0132\032.proto_ff.operatehor"
    "oscopeB\004\210\301\024o\"\202\003\n\024operatehoroscopePool\022\022\n"
    "\002id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006itemid\030\002 \001(\003B\n\302\377\024\006\347"
    "\211\251\345\223\201\022\027\n\003num\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004prof\030\004"
    " \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022+\n\013levelLimitA\030\005 \001(\005B\026\302"
    "\377\024\022\351\231\220\345\210\266\347\255\211\347\272\247\346\256\265\344\270\213\022+\n\013levelLimitB\030\006 \001"
    "(\005B\026\302\377\024\022\351\231\220\345\210\266\347\255\211\347\272\247\346\256\265\344\270\212\022\036\n\004type\030\007 \001(\005"
    "B\020\302\377\024\014\345\245\226\346\261\240\347\261\273\345\236\213\022#\n\ttypeParma\030\010 \001(\005B\020\302"
    "\377\024\014\345\245\226\346\261\240\345\217\202\346\225\260\022%\n\013probability\030\t \001(\005B\020\302\377"
    "\024\014\346\216\211\350\220\275\346\235\203\351\207\215\022 \n\007groupID\030\n \001(\003B\017\302\377\024\013\345\245\226"
    "\346\261\240\347\273\204ID\022\037\n\005order\030\013 \001(\005B\020\302\377\024\014\346\230\276\347\244\272\346\216\222\345\272"
    "\217\"f\n\032Sheet_operatehoroscopePool\022H\n\031opera"
    "tehoroscopePool_List\030\001 \003(\0132\036.proto_ff.op"
    "eratehoroscopePoolB\005\210\301\024\215\010\"\376\001\n\030operatehor"
    "oscopeExchange\022\022\n\002ID\030\001 \001(\005B\006\302\377\024\002id\022%\n\013ho"
    "roscopeId\030\002 \001(\005B\020\302\377\024\014\346\211\200\345\261\236\345\215\240\346\230\237\022!\n\007pri"
    "zeId\030\003 \001(\003B\020\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\022\030\n\004prof\030\004 \001"
    "(\005B\n\302\377\024\006\350\201\214\344\270\232\022\"\n\010prizeNum\030\005 \001(\005B\020\302\377\024\014\345\245"
    "\226\345\212\261\346\225\260\351\207\217\022%\n\010luckNeed\030\006 \001(\005B\023\302\377\024\017\347\246\217\346\260\224"
    "\345\200\274\346\225\260\351\207\217\022\037\n\005times\030\007 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346"
    "\225\260\"r\n\036Sheet_operatehoroscopeExchange\022P\n\035"
    "operatehoroscopeExchange_List\030\001 \003(\0132\".pr"
    "oto_ff.operatehoroscopeExchangeB\005\210\301\024\336\001\"\177"
    "\n\014operateconst\022 \n\nconstantid\030\001 \001(\003B\014\302\377\024\010"
    "\351\205\215\347\275\256id\022 \n\014constantdata\030\002 \001(\003B\n\302\377\024\006\346\225\260\346"
    "\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377\024\017\345\255\227\347\254\246\344\270\262\346\225\260"
    "\346\215\256\220\301\024c\"N\n\022Sheet_operateconst\0228\n\021operate"
    "const_List\030\001 \003(\0132\026.proto_ff.operateconst"
    "B\005\210\301\024\241\001\"\311\001\n\020operateunlimited\022\030\n\002ID\030\001 \001(\005"
    "B\014\302\377\024\010\351\205\215\347\275\256id\022\031\n\005price\030\002 \001(\005B\n\302\377\024\006\344\273\267\346\240"
    "\274\022+\n\nseverPrice\030\003 \001(\tB\027\302\377\024\017\350\247\243\351\224\201\350\256\241\350\264\271\347"
    "\202\271\220\301\024 \022%\n\006itemId\030\004 \001(\003B\025\302\377\024\021\351\242\206\345\217\226\347\232\204\347\211\251"
    "\345\223\201ID\022,\n\003num\030\005 \001(\003B\037\302\377\024\033\345\215\225\346\254\241\351\242\206\345\217\226\347\232\204\347"
    "\211\251\345\223\201\346\225\260\351\207\217\"Y\n\026Sheet_operateunlimited\022\?\n"
    "\025operateunlimited_List\030\001 \003(\0132\032.proto_ff."
    "operateunlimitedB\004\210\301\024k\"\202\001\n\013operaterand\022\022"
    "\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\010randtype\030\002 \001(\005B\020\302\377"
    "\024\014\345\206\262\346\246\234\347\261\273\345\236\213\022\033\n\005boxid\030\003 \001(\003B\014\302\377\024\010\345\245\226\345\212"
    "\261id\022\036\n\006canshu\030\004 \003(\tB\016\302\377\024\006\345\217\202\346\225\260\210\301\024 \"K\n\021S"
    "heet_operaterand\0226\n\020operaterand_List\030\001 \003"
    "(\0132\025.proto_ff.operaterandB\005\210\301\024\213\001\"P\n\017oper"
    "atemooncard\022\032\n\006dayNum\030\001 \001(\005B\n\302\377\024\006\345\244\251\346\225\260\022"
    "!\n\007payBack\030\002 \001(\005B\020\302\377\024\014\350\277\224\345\210\251\347\264\253\351\222\273\"W\n\025Sh"
    "eet_operatemooncard\022>\n\024operatemooncard_L"
    "ist\030\001 \003(\0132\031.proto_ff.operatemooncardB\005\210\301"
    "\024\207\001\"\210\001\n\013operatefund\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022"
    "\037\n\005level\030\002 \001(\005B\020\302\377\024\014\350\276\276\346\210\220\347\255\211\347\272\247\022!\n\007reba"
    "teS\030\003 \001(\005B\020\302\377\024\014\346\231\256\351\200\232\350\277\224\350\277\230\022!\n\007rebateL\030\004"
    " \001(\005B\020\302\377\024\014\350\266\205\345\200\274\350\277\224\350\277\230\"K\n\021Sheet_operatef"
    "und\0226\n\020operatefund_List\030\001 \003(\0132\025.proto_ff"
    ".operatefundB\005\210\301\024\217\001\"\221\001\n\013operatetask\022\030\n\002i"
    "d\030\001 \001(\005B\014\302\377\024\010\344\273\273\345\212\241id\022!\n\007taskNan\030\002 \001(\005B\020"
    "\302\377\024\014\344\273\273\345\212\241\351\232\276\345\272\246\022\"\n\010taskType\030\003 \001(\005B\020\302\377\024\014"
    "\344\273\273\345\212\241\347\261\273\345\236\213\022!\n\003num\030\004 \001(\tB\024\302\377\024\014\346\240\274\345\274\217\345\217\202"
    "\346\225\260\220\301\024 \"K\n\021Sheet_operatetask\0226\n\020operatet"
    "ask_List\030\001 \003(\0132\025.proto_ff.operatetaskB\005\210"
    "\301\024\257\001\"\337\001\n\013operateshop\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id"
    "\022\034\n\006itemid\030\002 \001(\003B\014\302\377\024\010\345\225\206\345\223\201id\022\031\n\005price\030"
    "\003 \001(\005B\n\302\377\024\006\345\216\237\344\273\267\022\035\n\006dPrice\030\004 \001(\005B\r\302\377\024\t\346"
    "\212\230\346\211\243\344\273\267\022#\n\tmoneyType\030\005 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\347"
    "\261\273\345\236\213\022\037\n\005times\030\006 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\022\036"
    "\n\ttimeLimit\030\007 \001(\005B\013\302\377\024\007\346\227\266\351\227\264h\"K\n\021Sheet_"
    "operateshop\0226\n\020operateshop_List\030\001 \003(\0132\025."
    "proto_ff.operateshopB\005\210\301\024\251\001\"G\n\013operatewi"
    "sh\022\031\n\005level\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022\035\n\003exp\030\002 \001"
    "(\003B\020\302\377\024\014\347\273\217\351\252\214\347\245\210\346\204\277\"K\n\021Sheet_operatewis"
    "h\0226\n\020operatewish_List\030\001 \003(\0132\025.proto_ff.o"
    "peratewishB\005\210\301\024\304\014\"\264\002\n\020operateturntable\022\022"
    "\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\006itemId\030\002 \001(\003B\014\302\377\024\010"
    "\347\211\251\345\223\201ID\022\037\n\005count\030\003 \001(\005B\020\302\377\024\014\347\211\251\345\223\201\346\225\260\351\207"
    "\217\022\030\n\004prof\030\004 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022$\n\nprizeLeve"
    "l\030\005 \001(\005B\020\302\377\024\014\345\245\226\345\223\201\347\255\211\347\272\247\022\032\n\006weight\030\006 \001("
    "\005B\n\302\377\024\006\346\235\203\351\207\215\022,\n\tbroadcast\030\007 \001(\005B\031\302\377\024\025\346\230"
    "\257\345\220\246\346\222\255\346\224\276\350\267\221\351\251\254\347\201\257\022\037\n\005order\030\010 \001(\005B\020\302\377\024\014"
    "\346\230\276\347\244\272\346\216\222\345\272\217\022\"\n\010relation\030\t \001(\003B\020\302\377\024\014\345\205\263\350"
    "\201\224\351\241\265\347\255\276\"Y\n\026Sheet_operateturntable\022\?\n\025op"
    "erateturntable_List\030\001 \003(\0132\032.proto_ff.ope"
    "rateturntableB\004\210\301\024p\"\310\001\n\024operateturntable"
    "Task\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\344\273\273\345\212\241id\022\"\n\010taskTy"
    "pe\030\002 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022#\n\ttaskParam\030"
    "\003 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\345\217\202\346\225\260\022\"\n\006itemId\030\004 \001(\003B"
    "\022\302\377\024\016\345\245\226\345\212\261\347\211\251\345\223\201id\022)\n\titemCount\030\005 \001(\005B\026"
    "\302\377\024\022\345\245\226\345\212\261\347\211\251\345\223\201\346\225\260\351\207\217\"e\n\032Sheet_operatet"
    "urntableTask\022G\n\031operateturntableTask_Lis"
    "t\030\001 \003(\0132\036.proto_ff.operateturntableTaskB"
    "\004\210\301\024l", 5205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "operate.proto", &protobuf_RegisterTypes);
  operateoperate::default_instance_ = new operateoperate();
  Sheet_operateoperate::default_instance_ = new Sheet_operateoperate();
  operatetutor::default_instance_ = new operatetutor();
  Sheet_operatetutor::default_instance_ = new Sheet_operatetutor();
  operatejiangli::default_instance_ = new operatejiangli();
  Sheet_operatejiangli::default_instance_ = new Sheet_operatejiangli();
  operatehoroscope::default_instance_ = new operatehoroscope();
  Sheet_operatehoroscope::default_instance_ = new Sheet_operatehoroscope();
  operatehoroscopePool::default_instance_ = new operatehoroscopePool();
  Sheet_operatehoroscopePool::default_instance_ = new Sheet_operatehoroscopePool();
  operatehoroscopeExchange::default_instance_ = new operatehoroscopeExchange();
  Sheet_operatehoroscopeExchange::default_instance_ = new Sheet_operatehoroscopeExchange();
  operateconst::default_instance_ = new operateconst();
  Sheet_operateconst::default_instance_ = new Sheet_operateconst();
  operateunlimited::default_instance_ = new operateunlimited();
  Sheet_operateunlimited::default_instance_ = new Sheet_operateunlimited();
  operaterand::default_instance_ = new operaterand();
  Sheet_operaterand::default_instance_ = new Sheet_operaterand();
  operatemooncard::default_instance_ = new operatemooncard();
  Sheet_operatemooncard::default_instance_ = new Sheet_operatemooncard();
  operatefund::default_instance_ = new operatefund();
  Sheet_operatefund::default_instance_ = new Sheet_operatefund();
  operatetask::default_instance_ = new operatetask();
  Sheet_operatetask::default_instance_ = new Sheet_operatetask();
  operateshop::default_instance_ = new operateshop();
  Sheet_operateshop::default_instance_ = new Sheet_operateshop();
  operatewish::default_instance_ = new operatewish();
  Sheet_operatewish::default_instance_ = new Sheet_operatewish();
  operateturntable::default_instance_ = new operateturntable();
  Sheet_operateturntable::default_instance_ = new Sheet_operateturntable();
  operateturntableTask::default_instance_ = new operateturntableTask();
  Sheet_operateturntableTask::default_instance_ = new Sheet_operateturntableTask();
  operateoperate::default_instance_->InitAsDefaultInstance();
  Sheet_operateoperate::default_instance_->InitAsDefaultInstance();
  operatetutor::default_instance_->InitAsDefaultInstance();
  Sheet_operatetutor::default_instance_->InitAsDefaultInstance();
  operatejiangli::default_instance_->InitAsDefaultInstance();
  Sheet_operatejiangli::default_instance_->InitAsDefaultInstance();
  operatehoroscope::default_instance_->InitAsDefaultInstance();
  Sheet_operatehoroscope::default_instance_->InitAsDefaultInstance();
  operatehoroscopePool::default_instance_->InitAsDefaultInstance();
  Sheet_operatehoroscopePool::default_instance_->InitAsDefaultInstance();
  operatehoroscopeExchange::default_instance_->InitAsDefaultInstance();
  Sheet_operatehoroscopeExchange::default_instance_->InitAsDefaultInstance();
  operateconst::default_instance_->InitAsDefaultInstance();
  Sheet_operateconst::default_instance_->InitAsDefaultInstance();
  operateunlimited::default_instance_->InitAsDefaultInstance();
  Sheet_operateunlimited::default_instance_->InitAsDefaultInstance();
  operaterand::default_instance_->InitAsDefaultInstance();
  Sheet_operaterand::default_instance_->InitAsDefaultInstance();
  operatemooncard::default_instance_->InitAsDefaultInstance();
  Sheet_operatemooncard::default_instance_->InitAsDefaultInstance();
  operatefund::default_instance_->InitAsDefaultInstance();
  Sheet_operatefund::default_instance_->InitAsDefaultInstance();
  operatetask::default_instance_->InitAsDefaultInstance();
  Sheet_operatetask::default_instance_->InitAsDefaultInstance();
  operateshop::default_instance_->InitAsDefaultInstance();
  Sheet_operateshop::default_instance_->InitAsDefaultInstance();
  operatewish::default_instance_->InitAsDefaultInstance();
  Sheet_operatewish::default_instance_->InitAsDefaultInstance();
  operateturntable::default_instance_->InitAsDefaultInstance();
  Sheet_operateturntable::default_instance_->InitAsDefaultInstance();
  operateturntableTask::default_instance_->InitAsDefaultInstance();
  Sheet_operateturntableTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_operate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_operate_2eproto {
  StaticDescriptorInitializer_operate_2eproto() {
    protobuf_AddDesc_operate_2eproto();
  }
} static_descriptor_initializer_operate_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int operateoperate::kIdFieldNumber;
const int operateoperate::kHuoDongFieldNumber;
const int operateoperate::kNameFieldNumber;
const int operateoperate::kNameIdFieldNumber;
const int operateoperate::kTiaoJianFieldNumber;
const int operateoperate::kServertypeFieldNumber;
const int operateoperate::kTimeAFieldNumber;
const int operateoperate::kTimeBFieldNumber;
const int operateoperate::kTimeTypeFieldNumber;
const int operateoperate::kMiaoSuFieldNumber;
const int operateoperate::kIfOpenFieldNumber;
#endif  // !_MSC_VER

operateoperate::operateoperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateoperate::InitAsDefaultInstance() {
}

operateoperate::operateoperate(const operateoperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateoperate::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  huodong_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nameid_ = 0;
  tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0;
  timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetype_ = 0;
  miaosu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifopen_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateoperate::~operateoperate() {
  SharedDtor();
}

void operateoperate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    delete tiaojian_;
  }
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (miaosu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaosu_;
  }
  if (this != default_instance_) {
  }
}

void operateoperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateoperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateoperate_descriptor_;
}

const operateoperate& operateoperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateoperate* operateoperate::default_instance_ = NULL;

operateoperate* operateoperate::New() const {
  return new operateoperate;
}

void operateoperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    huodong_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    nameid_ = 0;
    if (has_tiaojian()) {
      if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
        tiaojian_->clear();
      }
    }
    servertype_ = 0;
    if (has_timea()) {
      if (timea_ != &::google::protobuf::internal::kEmptyString) {
        timea_->clear();
      }
    }
    if (has_timeb()) {
      if (timeb_ != &::google::protobuf::internal::kEmptyString) {
        timeb_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    timetype_ = 0;
    if (has_miaosu()) {
      if (miaosu_ != &::google::protobuf::internal::kEmptyString) {
        miaosu_->clear();
      }
    }
    ifopen_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateoperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_huoDong;
        break;
      }

      // optional int32 huoDong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huoDong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huodong_)));
          set_has_huodong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nameId;
        break;
      }

      // optional int32 nameId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tiaoJian;
        break;
      }

      // optional string tiaoJian = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiaoJian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiaojian()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiaojian().data(), this->tiaojian().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_servertype;
        break;
      }

      // optional int32 servertype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_timeA;
        break;
      }

      // optional string timeA = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timea().data(), this->timea().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timeB;
        break;
      }

      // optional string timeB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timeb().data(), this->timeb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_timeType;
        break;
      }

      // optional int32 timeType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_miaoSu;
        break;
      }

      // optional string miaoSu = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoSu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaosu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaosu().data(), this->miaosu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ifOpen;
        break;
      }

      // optional int32 ifOpen = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ifOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifopen_)));
          set_has_ifopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateoperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 huoDong = 2;
  if (has_huodong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huodong(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 nameId = 4;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nameid(), output);
  }

  // optional string tiaoJian = 5;
  if (has_tiaojian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojian().data(), this->tiaojian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tiaojian(), output);
  }

  // optional int32 servertype = 6;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->servertype(), output);
  }

  // optional string timeA = 7;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->timea(), output);
  }

  // optional string timeB = 8;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timeb(), output);
  }

  // optional int32 timeType = 9;
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timetype(), output);
  }

  // optional string miaoSu = 10;
  if (has_miaosu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaosu().data(), this->miaosu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->miaosu(), output);
  }

  // optional int32 ifOpen = 11;
  if (has_ifopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ifopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateoperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 huoDong = 2;
  if (has_huodong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huodong(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 nameId = 4;
  if (has_nameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nameid(), target);
  }

  // optional string tiaoJian = 5;
  if (has_tiaojian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojian().data(), this->tiaojian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tiaojian(), target);
  }

  // optional int32 servertype = 6;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->servertype(), target);
  }

  // optional string timeA = 7;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timea(), target);
  }

  // optional string timeB = 8;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timeb(), target);
  }

  // optional int32 timeType = 9;
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timetype(), target);
  }

  // optional string miaoSu = 10;
  if (has_miaosu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaosu().data(), this->miaosu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->miaosu(), target);
  }

  // optional int32 ifOpen = 11;
  if (has_ifopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ifopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateoperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 huoDong = 2;
    if (has_huodong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huodong());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 nameId = 4;
    if (has_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nameid());
    }

    // optional string tiaoJian = 5;
    if (has_tiaojian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiaojian());
    }

    // optional int32 servertype = 6;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional string timeA = 7;
    if (has_timea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timea());
    }

    // optional string timeB = 8;
    if (has_timeb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 timeType = 9;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

    // optional string miaoSu = 10;
    if (has_miaosu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaosu());
    }

    // optional int32 ifOpen = 11;
    if (has_ifopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifopen());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateoperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateoperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateoperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateoperate::MergeFrom(const operateoperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_huodong()) {
      set_huodong(from.huodong());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
    if (from.has_tiaojian()) {
      set_tiaojian(from.tiaojian());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_timea()) {
      set_timea(from.timea());
    }
    if (from.has_timeb()) {
      set_timeb(from.timeb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
    if (from.has_miaosu()) {
      set_miaosu(from.miaosu());
    }
    if (from.has_ifopen()) {
      set_ifopen(from.ifopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateoperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateoperate::CopyFrom(const operateoperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateoperate::IsInitialized() const {

  return true;
}

void operateoperate::Swap(operateoperate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(huodong_, other->huodong_);
    std::swap(name_, other->name_);
    std::swap(nameid_, other->nameid_);
    std::swap(tiaojian_, other->tiaojian_);
    std::swap(servertype_, other->servertype_);
    std::swap(timea_, other->timea_);
    std::swap(timeb_, other->timeb_);
    std::swap(timetype_, other->timetype_);
    std::swap(miaosu_, other->miaosu_);
    std::swap(ifopen_, other->ifopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateoperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateoperate_descriptor_;
  metadata.reflection = operateoperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateoperate::kOperateoperateListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateoperate::Sheet_operateoperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateoperate::InitAsDefaultInstance() {
}

Sheet_operateoperate::Sheet_operateoperate(const Sheet_operateoperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateoperate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateoperate::~Sheet_operateoperate() {
  SharedDtor();
}

void Sheet_operateoperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateoperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateoperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateoperate_descriptor_;
}

const Sheet_operateoperate& Sheet_operateoperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateoperate* Sheet_operateoperate::default_instance_ = NULL;

Sheet_operateoperate* Sheet_operateoperate::New() const {
  return new Sheet_operateoperate;
}

void Sheet_operateoperate::Clear() {
  operateoperate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateoperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateoperate operateoperate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateoperate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateoperate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateoperate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateoperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateoperate operateoperate_List = 1;
  for (int i = 0; i < this->operateoperate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateoperate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateoperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateoperate operateoperate_List = 1;
  for (int i = 0; i < this->operateoperate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateoperate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateoperate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateoperate operateoperate_List = 1;
  total_size += 1 * this->operateoperate_list_size();
  for (int i = 0; i < this->operateoperate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateoperate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateoperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateoperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateoperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateoperate::MergeFrom(const Sheet_operateoperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateoperate_list_.MergeFrom(from.operateoperate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateoperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateoperate::CopyFrom(const Sheet_operateoperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateoperate::IsInitialized() const {

  return true;
}

void Sheet_operateoperate::Swap(Sheet_operateoperate* other) {
  if (other != this) {
    operateoperate_list_.Swap(&other->operateoperate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateoperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateoperate_descriptor_;
  metadata.reflection = Sheet_operateoperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatetutor::kIdFieldNumber;
const int operatetutor::kTypeFieldNumber;
const int operatetutor::kConditionFieldNumber;
const int operatetutor::kConditionParam1FieldNumber;
const int operatetutor::kConditionParam2FieldNumber;
const int operatetutor::kBoxIdFieldNumber;
const int operatetutor::kTeachFieldNumber;
#endif  // !_MSC_VER

operatetutor::operatetutor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatetutor::InitAsDefaultInstance() {
}

operatetutor::operatetutor(const operatetutor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatetutor::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  condition_ = 0;
  conditionparam1_ = 0;
  conditionparam2_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  teach_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatetutor::~operatetutor() {
  SharedDtor();
}

void operatetutor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatetutor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatetutor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatetutor_descriptor_;
}

const operatetutor& operatetutor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatetutor* operatetutor::default_instance_ = NULL;

operatetutor* operatetutor::New() const {
  return new operatetutor;
}

void operatetutor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    condition_ = 0;
    conditionparam1_ = 0;
    conditionparam2_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    teach_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatetutor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // optional int32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conditionParam1;
        break;
      }

      // optional int32 conditionParam1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditionparam1_)));
          set_has_conditionparam1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_conditionParam2;
        break;
      }

      // optional int32 conditionParam2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditionparam2_)));
          set_has_conditionparam2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_teach;
        break;
      }

      // optional int32 teach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teach_)));
          set_has_teach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatetutor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->condition(), output);
  }

  // optional int32 conditionParam1 = 4;
  if (has_conditionparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conditionparam1(), output);
  }

  // optional int32 conditionParam2 = 5;
  if (has_conditionparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->conditionparam2(), output);
  }

  // optional int64 boxId = 6;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->boxid(), output);
  }

  // optional int32 teach = 7;
  if (has_teach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->teach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatetutor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 condition = 3;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->condition(), target);
  }

  // optional int32 conditionParam1 = 4;
  if (has_conditionparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conditionparam1(), target);
  }

  // optional int32 conditionParam2 = 5;
  if (has_conditionparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->conditionparam2(), target);
  }

  // optional int64 boxId = 6;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->boxid(), target);
  }

  // optional int32 teach = 7;
  if (has_teach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->teach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatetutor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional int32 conditionParam1 = 4;
    if (has_conditionparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditionparam1());
    }

    // optional int32 conditionParam2 = 5;
    if (has_conditionparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditionparam2());
    }

    // optional int64 boxId = 6;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 teach = 7;
    if (has_teach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teach());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatetutor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatetutor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatetutor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatetutor::MergeFrom(const operatetutor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_conditionparam1()) {
      set_conditionparam1(from.conditionparam1());
    }
    if (from.has_conditionparam2()) {
      set_conditionparam2(from.conditionparam2());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_teach()) {
      set_teach(from.teach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatetutor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatetutor::CopyFrom(const operatetutor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatetutor::IsInitialized() const {

  return true;
}

void operatetutor::Swap(operatetutor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(condition_, other->condition_);
    std::swap(conditionparam1_, other->conditionparam1_);
    std::swap(conditionparam2_, other->conditionparam2_);
    std::swap(boxid_, other->boxid_);
    std::swap(teach_, other->teach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatetutor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatetutor_descriptor_;
  metadata.reflection = operatetutor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatetutor::kOperatetutorListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatetutor::Sheet_operatetutor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatetutor::InitAsDefaultInstance() {
}

Sheet_operatetutor::Sheet_operatetutor(const Sheet_operatetutor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatetutor::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatetutor::~Sheet_operatetutor() {
  SharedDtor();
}

void Sheet_operatetutor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatetutor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatetutor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatetutor_descriptor_;
}

const Sheet_operatetutor& Sheet_operatetutor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatetutor* Sheet_operatetutor::default_instance_ = NULL;

Sheet_operatetutor* Sheet_operatetutor::New() const {
  return new Sheet_operatetutor;
}

void Sheet_operatetutor::Clear() {
  operatetutor_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatetutor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatetutor operatetutor_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatetutor_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatetutor_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatetutor_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatetutor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatetutor operatetutor_List = 1;
  for (int i = 0; i < this->operatetutor_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatetutor_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatetutor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatetutor operatetutor_List = 1;
  for (int i = 0; i < this->operatetutor_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatetutor_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatetutor::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatetutor operatetutor_List = 1;
  total_size += 1 * this->operatetutor_list_size();
  for (int i = 0; i < this->operatetutor_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatetutor_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatetutor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatetutor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatetutor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatetutor::MergeFrom(const Sheet_operatetutor& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatetutor_list_.MergeFrom(from.operatetutor_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatetutor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatetutor::CopyFrom(const Sheet_operatetutor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatetutor::IsInitialized() const {

  return true;
}

void Sheet_operatetutor::Swap(Sheet_operatetutor* other) {
  if (other != this) {
    operatetutor_list_.Swap(&other->operatetutor_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatetutor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatetutor_descriptor_;
  metadata.reflection = Sheet_operatetutor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatejiangli::kTiaoJianIdFieldNumber;
const int operatejiangli::kHuoDongFieldNumber;
const int operatejiangli::kDownNuFieldNumber;
const int operatejiangli::kUpNuFieldNumber;
const int operatejiangli::kMiaoshuFieldNumber;
const int operatejiangli::kMiaoshuAddFieldNumber;
const int operatejiangli::kTiaoJianFieldNumber;
const int operatejiangli::kBoxIdFieldNumber;
const int operatejiangli::kSdboxidFieldNumber;
#endif  // !_MSC_VER

operatejiangli::operatejiangli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatejiangli::InitAsDefaultInstance() {
}

operatejiangli::operatejiangli(const operatejiangli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatejiangli::SharedCtor() {
  _cached_size_ = 0;
  tiaojianid_ = GOOGLE_LONGLONG(0);
  huodong_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  downnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upnu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  miaoshuadd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tiaojian_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = GOOGLE_LONGLONG(0);
  sdboxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatejiangli::~operatejiangli() {
  SharedDtor();
}

void operatejiangli::SharedDtor() {
  if (huodong_ != &::google::protobuf::internal::kEmptyString) {
    delete huodong_;
  }
  if (downnu_ != &::google::protobuf::internal::kEmptyString) {
    delete downnu_;
  }
  if (upnu_ != &::google::protobuf::internal::kEmptyString) {
    delete upnu_;
  }
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (miaoshuadd_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshuadd_;
  }
  if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
    delete tiaojian_;
  }
  if (this != default_instance_) {
  }
}

void operatejiangli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatejiangli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatejiangli_descriptor_;
}

const operatejiangli& operatejiangli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatejiangli* operatejiangli::default_instance_ = NULL;

operatejiangli* operatejiangli::New() const {
  return new operatejiangli;
}

void operatejiangli::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tiaojianid_ = GOOGLE_LONGLONG(0);
    if (has_huodong()) {
      if (huodong_ != &::google::protobuf::internal::kEmptyString) {
        huodong_->clear();
      }
    }
    if (has_downnu()) {
      if (downnu_ != &::google::protobuf::internal::kEmptyString) {
        downnu_->clear();
      }
    }
    if (has_upnu()) {
      if (upnu_ != &::google::protobuf::internal::kEmptyString) {
        upnu_->clear();
      }
    }
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    if (has_miaoshuadd()) {
      if (miaoshuadd_ != &::google::protobuf::internal::kEmptyString) {
        miaoshuadd_->clear();
      }
    }
    if (has_tiaojian()) {
      if (tiaojian_ != &::google::protobuf::internal::kEmptyString) {
        tiaojian_->clear();
      }
    }
    boxid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sdboxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatejiangli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tiaoJianId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tiaojianid_)));
          set_has_tiaojianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_huoDong;
        break;
      }

      // optional string huoDong = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_huoDong:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_huodong()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->huodong().data(), this->huodong().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_downNu;
        break;
      }

      // optional string downNu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_downNu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_downnu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->downnu().data(), this->downnu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_upNu;
        break;
      }

      // optional string upNu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upNu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upnu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->upnu().data(), this->upnu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_miaoshuAdd;
        break;
      }

      // optional string miaoshuAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshuAdd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshuadd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshuadd().data(), this->miaoshuadd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tiaoJian;
        break;
      }

      // optional string tiaoJian = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tiaoJian:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tiaojian()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tiaojian().data(), this->tiaojian().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sdboxid;
        break;
      }

      // optional int64 sdboxid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdboxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sdboxid_)));
          set_has_sdboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatejiangli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tiaoJianId = 1;
  if (has_tiaojianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tiaojianid(), output);
  }

  // optional string huoDong = 2;
  if (has_huodong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->huodong().data(), this->huodong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->huodong(), output);
  }

  // optional string downNu = 3;
  if (has_downnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downnu().data(), this->downnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->downnu(), output);
  }

  // optional string upNu = 4;
  if (has_upnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upnu().data(), this->upnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->upnu(), output);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->miaoshu(), output);
  }

  // optional string miaoshuAdd = 6;
  if (has_miaoshuadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshuadd().data(), this->miaoshuadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->miaoshuadd(), output);
  }

  // optional string tiaoJian = 7;
  if (has_tiaojian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojian().data(), this->tiaojian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->tiaojian(), output);
  }

  // optional int64 boxId = 8;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->boxid(), output);
  }

  // optional int64 sdboxid = 9;
  if (has_sdboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->sdboxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatejiangli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tiaoJianId = 1;
  if (has_tiaojianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tiaojianid(), target);
  }

  // optional string huoDong = 2;
  if (has_huodong()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->huodong().data(), this->huodong().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->huodong(), target);
  }

  // optional string downNu = 3;
  if (has_downnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->downnu().data(), this->downnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->downnu(), target);
  }

  // optional string upNu = 4;
  if (has_upnu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->upnu().data(), this->upnu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->upnu(), target);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->miaoshu(), target);
  }

  // optional string miaoshuAdd = 6;
  if (has_miaoshuadd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshuadd().data(), this->miaoshuadd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->miaoshuadd(), target);
  }

  // optional string tiaoJian = 7;
  if (has_tiaojian()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tiaojian().data(), this->tiaojian().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->tiaojian(), target);
  }

  // optional int64 boxId = 8;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->boxid(), target);
  }

  // optional int64 sdboxid = 9;
  if (has_sdboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->sdboxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatejiangli::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tiaoJianId = 1;
    if (has_tiaojianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tiaojianid());
    }

    // optional string huoDong = 2;
    if (has_huodong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->huodong());
    }

    // optional string downNu = 3;
    if (has_downnu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->downnu());
    }

    // optional string upNu = 4;
    if (has_upnu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->upnu());
    }

    // optional string miaoshu = 5;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional string miaoshuAdd = 6;
    if (has_miaoshuadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshuadd());
    }

    // optional string tiaoJian = 7;
    if (has_tiaojian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tiaojian());
    }

    // optional int64 boxId = 8;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 sdboxid = 9;
    if (has_sdboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sdboxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatejiangli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatejiangli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatejiangli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatejiangli::MergeFrom(const operatejiangli& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiaojianid()) {
      set_tiaojianid(from.tiaojianid());
    }
    if (from.has_huodong()) {
      set_huodong(from.huodong());
    }
    if (from.has_downnu()) {
      set_downnu(from.downnu());
    }
    if (from.has_upnu()) {
      set_upnu(from.upnu());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_miaoshuadd()) {
      set_miaoshuadd(from.miaoshuadd());
    }
    if (from.has_tiaojian()) {
      set_tiaojian(from.tiaojian());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sdboxid()) {
      set_sdboxid(from.sdboxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatejiangli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatejiangli::CopyFrom(const operatejiangli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatejiangli::IsInitialized() const {

  return true;
}

void operatejiangli::Swap(operatejiangli* other) {
  if (other != this) {
    std::swap(tiaojianid_, other->tiaojianid_);
    std::swap(huodong_, other->huodong_);
    std::swap(downnu_, other->downnu_);
    std::swap(upnu_, other->upnu_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(miaoshuadd_, other->miaoshuadd_);
    std::swap(tiaojian_, other->tiaojian_);
    std::swap(boxid_, other->boxid_);
    std::swap(sdboxid_, other->sdboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatejiangli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatejiangli_descriptor_;
  metadata.reflection = operatejiangli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatejiangli::kOperatejiangliListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatejiangli::Sheet_operatejiangli()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatejiangli::InitAsDefaultInstance() {
}

Sheet_operatejiangli::Sheet_operatejiangli(const Sheet_operatejiangli& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatejiangli::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatejiangli::~Sheet_operatejiangli() {
  SharedDtor();
}

void Sheet_operatejiangli::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatejiangli::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatejiangli::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatejiangli_descriptor_;
}

const Sheet_operatejiangli& Sheet_operatejiangli::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatejiangli* Sheet_operatejiangli::default_instance_ = NULL;

Sheet_operatejiangli* Sheet_operatejiangli::New() const {
  return new Sheet_operatejiangli;
}

void Sheet_operatejiangli::Clear() {
  operatejiangli_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatejiangli::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatejiangli operatejiangli_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatejiangli_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatejiangli_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatejiangli_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatejiangli::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatejiangli operatejiangli_List = 1;
  for (int i = 0; i < this->operatejiangli_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatejiangli_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatejiangli::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatejiangli operatejiangli_List = 1;
  for (int i = 0; i < this->operatejiangli_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatejiangli_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatejiangli::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatejiangli operatejiangli_List = 1;
  total_size += 1 * this->operatejiangli_list_size();
  for (int i = 0; i < this->operatejiangli_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatejiangli_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatejiangli::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatejiangli* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatejiangli*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatejiangli::MergeFrom(const Sheet_operatejiangli& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatejiangli_list_.MergeFrom(from.operatejiangli_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatejiangli::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatejiangli::CopyFrom(const Sheet_operatejiangli& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatejiangli::IsInitialized() const {

  return true;
}

void Sheet_operatejiangli::Swap(Sheet_operatejiangli* other) {
  if (other != this) {
    operatejiangli_list_.Swap(&other->operatejiangli_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatejiangli::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatejiangli_descriptor_;
  metadata.reflection = Sheet_operatejiangli_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatehoroscope::kIdFieldNumber;
const int operatehoroscope::kDaojuIdFieldNumber;
const int operatehoroscope::kDaojuPriceFieldNumber;
const int operatehoroscope::kCycleFieldNumber;
const int operatehoroscope::kPoolidFieldNumber;
const int operatehoroscope::kWheelTimeFieldNumber;
const int operatehoroscope::kExchangeGroupIDFieldNumber;
const int operatehoroscope::kBoxidFieldNumber;
const int operatehoroscope::kLuckidFieldNumber;
const int operatehoroscope::kFateidFieldNumber;
const int operatehoroscope::kFelicityidFieldNumber;
#endif  // !_MSC_VER

operatehoroscope::operatehoroscope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatehoroscope::InitAsDefaultInstance() {
}

operatehoroscope::operatehoroscope(const operatehoroscope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatehoroscope::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  daojuid_ = GOOGLE_LONGLONG(0);
  daojuprice_ = 0;
  cycle_ = 0;
  poolid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wheeltime_ = 0;
  exchangegroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  luckid_ = GOOGLE_LONGLONG(0);
  fateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  felicityid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatehoroscope::~operatehoroscope() {
  SharedDtor();
}

void operatehoroscope::SharedDtor() {
  if (poolid_ != &::google::protobuf::internal::kEmptyString) {
    delete poolid_;
  }
  if (exchangegroupid_ != &::google::protobuf::internal::kEmptyString) {
    delete exchangegroupid_;
  }
  if (boxid_ != &::google::protobuf::internal::kEmptyString) {
    delete boxid_;
  }
  if (fateid_ != &::google::protobuf::internal::kEmptyString) {
    delete fateid_;
  }
  if (felicityid_ != &::google::protobuf::internal::kEmptyString) {
    delete felicityid_;
  }
  if (this != default_instance_) {
  }
}

void operatehoroscope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatehoroscope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatehoroscope_descriptor_;
}

const operatehoroscope& operatehoroscope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatehoroscope* operatehoroscope::default_instance_ = NULL;

operatehoroscope* operatehoroscope::New() const {
  return new operatehoroscope;
}

void operatehoroscope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    daojuid_ = GOOGLE_LONGLONG(0);
    daojuprice_ = 0;
    cycle_ = 0;
    if (has_poolid()) {
      if (poolid_ != &::google::protobuf::internal::kEmptyString) {
        poolid_->clear();
      }
    }
    wheeltime_ = 0;
    if (has_exchangegroupid()) {
      if (exchangegroupid_ != &::google::protobuf::internal::kEmptyString) {
        exchangegroupid_->clear();
      }
    }
    if (has_boxid()) {
      if (boxid_ != &::google::protobuf::internal::kEmptyString) {
        boxid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    luckid_ = GOOGLE_LONGLONG(0);
    if (has_fateid()) {
      if (fateid_ != &::google::protobuf::internal::kEmptyString) {
        fateid_->clear();
      }
    }
    if (has_felicityid()) {
      if (felicityid_ != &::google::protobuf::internal::kEmptyString) {
        felicityid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatehoroscope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daojuId;
        break;
      }

      // optional int64 daojuId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daojuId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &daojuid_)));
          set_has_daojuid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daojuPrice;
        break;
      }

      // optional int32 daojuPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daojuPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daojuprice_)));
          set_has_daojuprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cycle;
        break;
      }

      // optional int32 cycle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cycle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cycle_)));
          set_has_cycle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poolid;
        break;
      }

      // optional string poolid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poolid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poolid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poolid().data(), this->poolid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wheelTime;
        break;
      }

      // optional int32 wheelTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wheelTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wheeltime_)));
          set_has_wheeltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ExchangeGroupID;
        break;
      }

      // optional string ExchangeGroupID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExchangeGroupID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchangegroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exchangegroupid().data(), this->exchangegroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_boxid;
        break;
      }

      // optional string boxid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_boxid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->boxid().data(), this->boxid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_luckid;
        break;
      }

      // optional int64 luckid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luckid_)));
          set_has_luckid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fateid;
        break;
      }

      // optional string fateid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fateid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fateid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fateid().data(), this->fateid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_felicityid;
        break;
      }

      // optional string felicityid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_felicityid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_felicityid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->felicityid().data(), this->felicityid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatehoroscope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 daojuId = 2;
  if (has_daojuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->daojuid(), output);
  }

  // optional int32 daojuPrice = 3;
  if (has_daojuprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->daojuprice(), output);
  }

  // optional int32 cycle = 4;
  if (has_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cycle(), output);
  }

  // optional string poolid = 5;
  if (has_poolid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolid().data(), this->poolid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poolid(), output);
  }

  // optional int32 wheelTime = 6;
  if (has_wheeltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wheeltime(), output);
  }

  // optional string ExchangeGroupID = 7;
  if (has_exchangegroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangegroupid().data(), this->exchangegroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->exchangegroupid(), output);
  }

  // optional string boxid = 8;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->boxid(), output);
  }

  // optional int64 luckid = 9;
  if (has_luckid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->luckid(), output);
  }

  // optional string fateid = 10;
  if (has_fateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fateid().data(), this->fateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fateid(), output);
  }

  // optional string felicityid = 11;
  if (has_felicityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->felicityid().data(), this->felicityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->felicityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatehoroscope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 daojuId = 2;
  if (has_daojuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->daojuid(), target);
  }

  // optional int32 daojuPrice = 3;
  if (has_daojuprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->daojuprice(), target);
  }

  // optional int32 cycle = 4;
  if (has_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cycle(), target);
  }

  // optional string poolid = 5;
  if (has_poolid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolid().data(), this->poolid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poolid(), target);
  }

  // optional int32 wheelTime = 6;
  if (has_wheeltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wheeltime(), target);
  }

  // optional string ExchangeGroupID = 7;
  if (has_exchangegroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exchangegroupid().data(), this->exchangegroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->exchangegroupid(), target);
  }

  // optional string boxid = 8;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->boxid().data(), this->boxid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->boxid(), target);
  }

  // optional int64 luckid = 9;
  if (has_luckid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->luckid(), target);
  }

  // optional string fateid = 10;
  if (has_fateid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fateid().data(), this->fateid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->fateid(), target);
  }

  // optional string felicityid = 11;
  if (has_felicityid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->felicityid().data(), this->felicityid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->felicityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatehoroscope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 daojuId = 2;
    if (has_daojuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->daojuid());
    }

    // optional int32 daojuPrice = 3;
    if (has_daojuprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daojuprice());
    }

    // optional int32 cycle = 4;
    if (has_cycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cycle());
    }

    // optional string poolid = 5;
    if (has_poolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poolid());
    }

    // optional int32 wheelTime = 6;
    if (has_wheeltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wheeltime());
    }

    // optional string ExchangeGroupID = 7;
    if (has_exchangegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exchangegroupid());
    }

    // optional string boxid = 8;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->boxid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 luckid = 9;
    if (has_luckid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luckid());
    }

    // optional string fateid = 10;
    if (has_fateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fateid());
    }

    // optional string felicityid = 11;
    if (has_felicityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->felicityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatehoroscope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatehoroscope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatehoroscope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatehoroscope::MergeFrom(const operatehoroscope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_daojuid()) {
      set_daojuid(from.daojuid());
    }
    if (from.has_daojuprice()) {
      set_daojuprice(from.daojuprice());
    }
    if (from.has_cycle()) {
      set_cycle(from.cycle());
    }
    if (from.has_poolid()) {
      set_poolid(from.poolid());
    }
    if (from.has_wheeltime()) {
      set_wheeltime(from.wheeltime());
    }
    if (from.has_exchangegroupid()) {
      set_exchangegroupid(from.exchangegroupid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_luckid()) {
      set_luckid(from.luckid());
    }
    if (from.has_fateid()) {
      set_fateid(from.fateid());
    }
    if (from.has_felicityid()) {
      set_felicityid(from.felicityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatehoroscope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatehoroscope::CopyFrom(const operatehoroscope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatehoroscope::IsInitialized() const {

  return true;
}

void operatehoroscope::Swap(operatehoroscope* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(daojuid_, other->daojuid_);
    std::swap(daojuprice_, other->daojuprice_);
    std::swap(cycle_, other->cycle_);
    std::swap(poolid_, other->poolid_);
    std::swap(wheeltime_, other->wheeltime_);
    std::swap(exchangegroupid_, other->exchangegroupid_);
    std::swap(boxid_, other->boxid_);
    std::swap(luckid_, other->luckid_);
    std::swap(fateid_, other->fateid_);
    std::swap(felicityid_, other->felicityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatehoroscope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatehoroscope_descriptor_;
  metadata.reflection = operatehoroscope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatehoroscope::kOperatehoroscopeListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatehoroscope::Sheet_operatehoroscope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatehoroscope::InitAsDefaultInstance() {
}

Sheet_operatehoroscope::Sheet_operatehoroscope(const Sheet_operatehoroscope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatehoroscope::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatehoroscope::~Sheet_operatehoroscope() {
  SharedDtor();
}

void Sheet_operatehoroscope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatehoroscope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatehoroscope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatehoroscope_descriptor_;
}

const Sheet_operatehoroscope& Sheet_operatehoroscope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatehoroscope* Sheet_operatehoroscope::default_instance_ = NULL;

Sheet_operatehoroscope* Sheet_operatehoroscope::New() const {
  return new Sheet_operatehoroscope;
}

void Sheet_operatehoroscope::Clear() {
  operatehoroscope_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatehoroscope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatehoroscope_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatehoroscope_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatehoroscope_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatehoroscope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
  for (int i = 0; i < this->operatehoroscope_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatehoroscope_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatehoroscope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
  for (int i = 0; i < this->operatehoroscope_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatehoroscope_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatehoroscope::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatehoroscope operatehoroscope_List = 1;
  total_size += 1 * this->operatehoroscope_list_size();
  for (int i = 0; i < this->operatehoroscope_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatehoroscope_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatehoroscope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatehoroscope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatehoroscope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatehoroscope::MergeFrom(const Sheet_operatehoroscope& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatehoroscope_list_.MergeFrom(from.operatehoroscope_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatehoroscope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatehoroscope::CopyFrom(const Sheet_operatehoroscope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatehoroscope::IsInitialized() const {

  return true;
}

void Sheet_operatehoroscope::Swap(Sheet_operatehoroscope* other) {
  if (other != this) {
    operatehoroscope_list_.Swap(&other->operatehoroscope_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatehoroscope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatehoroscope_descriptor_;
  metadata.reflection = Sheet_operatehoroscope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatehoroscopePool::kIdFieldNumber;
const int operatehoroscopePool::kItemidFieldNumber;
const int operatehoroscopePool::kNumFieldNumber;
const int operatehoroscopePool::kProfFieldNumber;
const int operatehoroscopePool::kLevelLimitAFieldNumber;
const int operatehoroscopePool::kLevelLimitBFieldNumber;
const int operatehoroscopePool::kTypeFieldNumber;
const int operatehoroscopePool::kTypeParmaFieldNumber;
const int operatehoroscopePool::kProbabilityFieldNumber;
const int operatehoroscopePool::kGroupIDFieldNumber;
const int operatehoroscopePool::kOrderFieldNumber;
#endif  // !_MSC_VER

operatehoroscopePool::operatehoroscopePool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatehoroscopePool::InitAsDefaultInstance() {
}

operatehoroscopePool::operatehoroscopePool(const operatehoroscopePool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatehoroscopePool::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  prof_ = 0;
  levellimita_ = 0;
  levellimitb_ = 0;
  type_ = 0;
  typeparma_ = 0;
  probability_ = 0;
  groupid_ = GOOGLE_LONGLONG(0);
  order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatehoroscopePool::~operatehoroscopePool() {
  SharedDtor();
}

void operatehoroscopePool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatehoroscopePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatehoroscopePool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatehoroscopePool_descriptor_;
}

const operatehoroscopePool& operatehoroscopePool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatehoroscopePool* operatehoroscopePool::default_instance_ = NULL;

operatehoroscopePool* operatehoroscopePool::New() const {
  return new operatehoroscopePool;
}

void operatehoroscopePool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    prof_ = 0;
    levellimita_ = 0;
    levellimitb_ = 0;
    type_ = 0;
    typeparma_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    probability_ = 0;
    groupid_ = GOOGLE_LONGLONG(0);
    order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatehoroscopePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_levelLimitA;
        break;
      }

      // optional int32 levelLimitA = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimitA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimita_)));
          set_has_levellimita();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_levelLimitB;
        break;
      }

      // optional int32 levelLimitB = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimitB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimitb_)));
          set_has_levellimitb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional int32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_typeParma;
        break;
      }

      // optional int32 typeParma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeParma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparma_)));
          set_has_typeparma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_probability;
        break;
      }

      // optional int32 probability = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_groupID;
        break;
      }

      // optional int64 groupID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_order;
        break;
      }

      // optional int32 order = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatehoroscopePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 levelLimitA = 5;
  if (has_levellimita()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->levellimita(), output);
  }

  // optional int32 levelLimitB = 6;
  if (has_levellimitb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->levellimitb(), output);
  }

  // optional int32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->type(), output);
  }

  // optional int32 typeParma = 8;
  if (has_typeparma()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->typeparma(), output);
  }

  // optional int32 probability = 9;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->probability(), output);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->groupid(), output);
  }

  // optional int32 order = 11;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->order(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatehoroscopePool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 levelLimitA = 5;
  if (has_levellimita()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->levellimita(), target);
  }

  // optional int32 levelLimitB = 6;
  if (has_levellimitb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->levellimitb(), target);
  }

  // optional int32 type = 7;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->type(), target);
  }

  // optional int32 typeParma = 8;
  if (has_typeparma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->typeparma(), target);
  }

  // optional int32 probability = 9;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->probability(), target);
  }

  // optional int64 groupID = 10;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->groupid(), target);
  }

  // optional int32 order = 11;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->order(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatehoroscopePool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 levelLimitA = 5;
    if (has_levellimita()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimita());
    }

    // optional int32 levelLimitB = 6;
    if (has_levellimitb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimitb());
    }

    // optional int32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 typeParma = 8;
    if (has_typeparma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparma());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 probability = 9;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int64 groupID = 10;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->groupid());
    }

    // optional int32 order = 11;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatehoroscopePool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatehoroscopePool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatehoroscopePool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatehoroscopePool::MergeFrom(const operatehoroscopePool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_levellimita()) {
      set_levellimita(from.levellimita());
    }
    if (from.has_levellimitb()) {
      set_levellimitb(from.levellimitb());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typeparma()) {
      set_typeparma(from.typeparma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatehoroscopePool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatehoroscopePool::CopyFrom(const operatehoroscopePool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatehoroscopePool::IsInitialized() const {

  return true;
}

void operatehoroscopePool::Swap(operatehoroscopePool* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(prof_, other->prof_);
    std::swap(levellimita_, other->levellimita_);
    std::swap(levellimitb_, other->levellimitb_);
    std::swap(type_, other->type_);
    std::swap(typeparma_, other->typeparma_);
    std::swap(probability_, other->probability_);
    std::swap(groupid_, other->groupid_);
    std::swap(order_, other->order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatehoroscopePool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatehoroscopePool_descriptor_;
  metadata.reflection = operatehoroscopePool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatehoroscopePool::kOperatehoroscopePoolListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatehoroscopePool::Sheet_operatehoroscopePool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatehoroscopePool::InitAsDefaultInstance() {
}

Sheet_operatehoroscopePool::Sheet_operatehoroscopePool(const Sheet_operatehoroscopePool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatehoroscopePool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatehoroscopePool::~Sheet_operatehoroscopePool() {
  SharedDtor();
}

void Sheet_operatehoroscopePool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatehoroscopePool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatehoroscopePool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatehoroscopePool_descriptor_;
}

const Sheet_operatehoroscopePool& Sheet_operatehoroscopePool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatehoroscopePool* Sheet_operatehoroscopePool::default_instance_ = NULL;

Sheet_operatehoroscopePool* Sheet_operatehoroscopePool::New() const {
  return new Sheet_operatehoroscopePool;
}

void Sheet_operatehoroscopePool::Clear() {
  operatehoroscopepool_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatehoroscopePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatehoroscopePool_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatehoroscopepool_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatehoroscopePool_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatehoroscopePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
  for (int i = 0; i < this->operatehoroscopepool_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatehoroscopepool_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatehoroscopePool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
  for (int i = 0; i < this->operatehoroscopepool_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatehoroscopepool_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatehoroscopePool::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatehoroscopePool operatehoroscopePool_List = 1;
  total_size += 1 * this->operatehoroscopepool_list_size();
  for (int i = 0; i < this->operatehoroscopepool_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatehoroscopepool_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatehoroscopePool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatehoroscopePool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatehoroscopePool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatehoroscopePool::MergeFrom(const Sheet_operatehoroscopePool& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatehoroscopepool_list_.MergeFrom(from.operatehoroscopepool_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatehoroscopePool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatehoroscopePool::CopyFrom(const Sheet_operatehoroscopePool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatehoroscopePool::IsInitialized() const {

  return true;
}

void Sheet_operatehoroscopePool::Swap(Sheet_operatehoroscopePool* other) {
  if (other != this) {
    operatehoroscopepool_list_.Swap(&other->operatehoroscopepool_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatehoroscopePool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatehoroscopePool_descriptor_;
  metadata.reflection = Sheet_operatehoroscopePool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatehoroscopeExchange::kIDFieldNumber;
const int operatehoroscopeExchange::kHoroscopeIdFieldNumber;
const int operatehoroscopeExchange::kPrizeIdFieldNumber;
const int operatehoroscopeExchange::kProfFieldNumber;
const int operatehoroscopeExchange::kPrizeNumFieldNumber;
const int operatehoroscopeExchange::kLuckNeedFieldNumber;
const int operatehoroscopeExchange::kTimesFieldNumber;
#endif  // !_MSC_VER

operatehoroscopeExchange::operatehoroscopeExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatehoroscopeExchange::InitAsDefaultInstance() {
}

operatehoroscopeExchange::operatehoroscopeExchange(const operatehoroscopeExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatehoroscopeExchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  horoscopeid_ = 0;
  prizeid_ = GOOGLE_LONGLONG(0);
  prof_ = 0;
  prizenum_ = 0;
  luckneed_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatehoroscopeExchange::~operatehoroscopeExchange() {
  SharedDtor();
}

void operatehoroscopeExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatehoroscopeExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatehoroscopeExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatehoroscopeExchange_descriptor_;
}

const operatehoroscopeExchange& operatehoroscopeExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatehoroscopeExchange* operatehoroscopeExchange::default_instance_ = NULL;

operatehoroscopeExchange* operatehoroscopeExchange::New() const {
  return new operatehoroscopeExchange;
}

void operatehoroscopeExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    horoscopeid_ = 0;
    prizeid_ = GOOGLE_LONGLONG(0);
    prof_ = 0;
    prizenum_ = 0;
    luckneed_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatehoroscopeExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_horoscopeId;
        break;
      }

      // optional int32 horoscopeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horoscopeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horoscopeid_)));
          set_has_horoscopeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prizeId;
        break;
      }

      // optional int64 prizeId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prizeNum;
        break;
      }

      // optional int32 prizeNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizenum_)));
          set_has_prizenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_luckNeed;
        break;
      }

      // optional int32 luckNeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_luckNeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &luckneed_)));
          set_has_luckneed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatehoroscopeExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 horoscopeId = 2;
  if (has_horoscopeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->horoscopeid(), output);
  }

  // optional int64 prizeId = 3;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->prizeid(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 prizeNum = 5;
  if (has_prizenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prizenum(), output);
  }

  // optional int32 luckNeed = 6;
  if (has_luckneed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->luckneed(), output);
  }

  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatehoroscopeExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 horoscopeId = 2;
  if (has_horoscopeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->horoscopeid(), target);
  }

  // optional int64 prizeId = 3;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->prizeid(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 prizeNum = 5;
  if (has_prizenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prizenum(), target);
  }

  // optional int32 luckNeed = 6;
  if (has_luckneed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->luckneed(), target);
  }

  // optional int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatehoroscopeExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 horoscopeId = 2;
    if (has_horoscopeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horoscopeid());
    }

    // optional int64 prizeId = 3;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prizeid());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 prizeNum = 5;
    if (has_prizenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizenum());
    }

    // optional int32 luckNeed = 6;
    if (has_luckneed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->luckneed());
    }

    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatehoroscopeExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatehoroscopeExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatehoroscopeExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatehoroscopeExchange::MergeFrom(const operatehoroscopeExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_horoscopeid()) {
      set_horoscopeid(from.horoscopeid());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_prizenum()) {
      set_prizenum(from.prizenum());
    }
    if (from.has_luckneed()) {
      set_luckneed(from.luckneed());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatehoroscopeExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatehoroscopeExchange::CopyFrom(const operatehoroscopeExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatehoroscopeExchange::IsInitialized() const {

  return true;
}

void operatehoroscopeExchange::Swap(operatehoroscopeExchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(horoscopeid_, other->horoscopeid_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(prof_, other->prof_);
    std::swap(prizenum_, other->prizenum_);
    std::swap(luckneed_, other->luckneed_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatehoroscopeExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatehoroscopeExchange_descriptor_;
  metadata.reflection = operatehoroscopeExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatehoroscopeExchange::kOperatehoroscopeExchangeListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatehoroscopeExchange::Sheet_operatehoroscopeExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatehoroscopeExchange::InitAsDefaultInstance() {
}

Sheet_operatehoroscopeExchange::Sheet_operatehoroscopeExchange(const Sheet_operatehoroscopeExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatehoroscopeExchange::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatehoroscopeExchange::~Sheet_operatehoroscopeExchange() {
  SharedDtor();
}

void Sheet_operatehoroscopeExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatehoroscopeExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatehoroscopeExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatehoroscopeExchange_descriptor_;
}

const Sheet_operatehoroscopeExchange& Sheet_operatehoroscopeExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatehoroscopeExchange* Sheet_operatehoroscopeExchange::default_instance_ = NULL;

Sheet_operatehoroscopeExchange* Sheet_operatehoroscopeExchange::New() const {
  return new Sheet_operatehoroscopeExchange;
}

void Sheet_operatehoroscopeExchange::Clear() {
  operatehoroscopeexchange_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatehoroscopeExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatehoroscopeExchange_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatehoroscopeexchange_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatehoroscopeExchange_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatehoroscopeExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
  for (int i = 0; i < this->operatehoroscopeexchange_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatehoroscopeexchange_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatehoroscopeExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
  for (int i = 0; i < this->operatehoroscopeexchange_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatehoroscopeexchange_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatehoroscopeExchange::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatehoroscopeExchange operatehoroscopeExchange_List = 1;
  total_size += 1 * this->operatehoroscopeexchange_list_size();
  for (int i = 0; i < this->operatehoroscopeexchange_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatehoroscopeexchange_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatehoroscopeExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatehoroscopeExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatehoroscopeExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatehoroscopeExchange::MergeFrom(const Sheet_operatehoroscopeExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatehoroscopeexchange_list_.MergeFrom(from.operatehoroscopeexchange_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatehoroscopeExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatehoroscopeExchange::CopyFrom(const Sheet_operatehoroscopeExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatehoroscopeExchange::IsInitialized() const {

  return true;
}

void Sheet_operatehoroscopeExchange::Swap(Sheet_operatehoroscopeExchange* other) {
  if (other != this) {
    operatehoroscopeexchange_list_.Swap(&other->operatehoroscopeexchange_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatehoroscopeExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatehoroscopeExchange_descriptor_;
  metadata.reflection = Sheet_operatehoroscopeExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operateconst::kConstantidFieldNumber;
const int operateconst::kConstantdataFieldNumber;
const int operateconst::kStringdataFieldNumber;
#endif  // !_MSC_VER

operateconst::operateconst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateconst::InitAsDefaultInstance() {
}

operateconst::operateconst(const operateconst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateconst::SharedCtor() {
  _cached_size_ = 0;
  constantid_ = GOOGLE_LONGLONG(0);
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateconst::~operateconst() {
  SharedDtor();
}

void operateconst::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void operateconst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateconst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateconst_descriptor_;
}

const operateconst& operateconst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateconst* operateconst::default_instance_ = NULL;

operateconst* operateconst::New() const {
  return new operateconst;
}

void operateconst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    constantid_ = GOOGLE_LONGLONG(0);
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateconst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantid_)));
          set_has_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateconst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->constantid(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateconst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->constantid(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateconst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 constantid = 1;
    if (has_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantid());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateconst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateconst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateconst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateconst::MergeFrom(const operateconst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constantid()) {
      set_constantid(from.constantid());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateconst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateconst::CopyFrom(const operateconst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateconst::IsInitialized() const {

  return true;
}

void operateconst::Swap(operateconst* other) {
  if (other != this) {
    std::swap(constantid_, other->constantid_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateconst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateconst_descriptor_;
  metadata.reflection = operateconst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateconst::kOperateconstListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateconst::Sheet_operateconst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateconst::InitAsDefaultInstance() {
}

Sheet_operateconst::Sheet_operateconst(const Sheet_operateconst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateconst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateconst::~Sheet_operateconst() {
  SharedDtor();
}

void Sheet_operateconst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateconst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateconst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateconst_descriptor_;
}

const Sheet_operateconst& Sheet_operateconst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateconst* Sheet_operateconst::default_instance_ = NULL;

Sheet_operateconst* Sheet_operateconst::New() const {
  return new Sheet_operateconst;
}

void Sheet_operateconst::Clear() {
  operateconst_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateconst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateconst operateconst_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateconst_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateconst_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateconst_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateconst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateconst operateconst_List = 1;
  for (int i = 0; i < this->operateconst_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateconst_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateconst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateconst operateconst_List = 1;
  for (int i = 0; i < this->operateconst_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateconst_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateconst::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateconst operateconst_List = 1;
  total_size += 1 * this->operateconst_list_size();
  for (int i = 0; i < this->operateconst_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateconst_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateconst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateconst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateconst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateconst::MergeFrom(const Sheet_operateconst& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateconst_list_.MergeFrom(from.operateconst_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateconst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateconst::CopyFrom(const Sheet_operateconst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateconst::IsInitialized() const {

  return true;
}

void Sheet_operateconst::Swap(Sheet_operateconst* other) {
  if (other != this) {
    operateconst_list_.Swap(&other->operateconst_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateconst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateconst_descriptor_;
  metadata.reflection = Sheet_operateconst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operateunlimited::kIDFieldNumber;
const int operateunlimited::kPriceFieldNumber;
const int operateunlimited::kSeverPriceFieldNumber;
const int operateunlimited::kItemIdFieldNumber;
const int operateunlimited::kNumFieldNumber;
#endif  // !_MSC_VER

operateunlimited::operateunlimited()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateunlimited::InitAsDefaultInstance() {
}

operateunlimited::operateunlimited(const operateunlimited& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateunlimited::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  price_ = 0;
  severprice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateunlimited::~operateunlimited() {
  SharedDtor();
}

void operateunlimited::SharedDtor() {
  if (severprice_ != &::google::protobuf::internal::kEmptyString) {
    delete severprice_;
  }
  if (this != default_instance_) {
  }
}

void operateunlimited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateunlimited::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateunlimited_descriptor_;
}

const operateunlimited& operateunlimited::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateunlimited* operateunlimited::default_instance_ = NULL;

operateunlimited* operateunlimited::New() const {
  return new operateunlimited;
}

void operateunlimited::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    price_ = 0;
    if (has_severprice()) {
      if (severprice_ != &::google::protobuf::internal::kEmptyString) {
        severprice_->clear();
      }
    }
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateunlimited::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // optional int32 price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_severPrice;
        break;
      }

      // optional string severPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_severPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_severprice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->severprice().data(), this->severprice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int64 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateunlimited::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->price(), output);
  }

  // optional string severPrice = 3;
  if (has_severprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->severprice().data(), this->severprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->severprice(), output);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->itemid(), output);
  }

  // optional int64 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateunlimited::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->price(), target);
  }

  // optional string severPrice = 3;
  if (has_severprice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->severprice().data(), this->severprice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->severprice(), target);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->itemid(), target);
  }

  // optional int64 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateunlimited::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 price = 2;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional string severPrice = 3;
    if (has_severprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->severprice());
    }

    // optional int64 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int64 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateunlimited::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateunlimited* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateunlimited*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateunlimited::MergeFrom(const operateunlimited& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_severprice()) {
      set_severprice(from.severprice());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateunlimited::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateunlimited::CopyFrom(const operateunlimited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateunlimited::IsInitialized() const {

  return true;
}

void operateunlimited::Swap(operateunlimited* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(price_, other->price_);
    std::swap(severprice_, other->severprice_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateunlimited::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateunlimited_descriptor_;
  metadata.reflection = operateunlimited_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateunlimited::kOperateunlimitedListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateunlimited::Sheet_operateunlimited()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateunlimited::InitAsDefaultInstance() {
}

Sheet_operateunlimited::Sheet_operateunlimited(const Sheet_operateunlimited& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateunlimited::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateunlimited::~Sheet_operateunlimited() {
  SharedDtor();
}

void Sheet_operateunlimited::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateunlimited::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateunlimited::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateunlimited_descriptor_;
}

const Sheet_operateunlimited& Sheet_operateunlimited::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateunlimited* Sheet_operateunlimited::default_instance_ = NULL;

Sheet_operateunlimited* Sheet_operateunlimited::New() const {
  return new Sheet_operateunlimited;
}

void Sheet_operateunlimited::Clear() {
  operateunlimited_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateunlimited::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateunlimited operateunlimited_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateunlimited_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateunlimited_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateunlimited_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateunlimited::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateunlimited operateunlimited_List = 1;
  for (int i = 0; i < this->operateunlimited_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateunlimited_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateunlimited::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateunlimited operateunlimited_List = 1;
  for (int i = 0; i < this->operateunlimited_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateunlimited_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateunlimited::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateunlimited operateunlimited_List = 1;
  total_size += 1 * this->operateunlimited_list_size();
  for (int i = 0; i < this->operateunlimited_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateunlimited_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateunlimited::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateunlimited* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateunlimited*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateunlimited::MergeFrom(const Sheet_operateunlimited& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateunlimited_list_.MergeFrom(from.operateunlimited_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateunlimited::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateunlimited::CopyFrom(const Sheet_operateunlimited& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateunlimited::IsInitialized() const {

  return true;
}

void Sheet_operateunlimited::Swap(Sheet_operateunlimited* other) {
  if (other != this) {
    operateunlimited_list_.Swap(&other->operateunlimited_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateunlimited::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateunlimited_descriptor_;
  metadata.reflection = Sheet_operateunlimited_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operaterand::kIdFieldNumber;
const int operaterand::kRandtypeFieldNumber;
const int operaterand::kBoxidFieldNumber;
const int operaterand::kCanshuFieldNumber;
#endif  // !_MSC_VER

operaterand::operaterand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operaterand::InitAsDefaultInstance() {
}

operaterand::operaterand(const operaterand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operaterand::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  randtype_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operaterand::~operaterand() {
  SharedDtor();
}

void operaterand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operaterand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operaterand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operaterand_descriptor_;
}

const operaterand& operaterand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operaterand* operaterand::default_instance_ = NULL;

operaterand* operaterand::New() const {
  return new operaterand;
}

void operaterand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    randtype_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
  }
  canshu_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operaterand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_randtype;
        break;
      }

      // optional int32 randtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randtype_)));
          set_has_randtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_canshu;
        break;
      }

      // repeated string canshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_canshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_canshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->canshu(this->canshu_size() - 1).data(),
            this->canshu(this->canshu_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_canshu;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operaterand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 randtype = 2;
  if (has_randtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->randtype(), output);
  }

  // optional int64 boxid = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  // repeated string canshu = 4;
  for (int i = 0; i < this->canshu_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->canshu(i).data(), this->canshu(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->canshu(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operaterand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 randtype = 2;
  if (has_randtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->randtype(), target);
  }

  // optional int64 boxid = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  // repeated string canshu = 4;
  for (int i = 0; i < this->canshu_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->canshu(i).data(), this->canshu(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->canshu(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operaterand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 randtype = 2;
    if (has_randtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randtype());
    }

    // optional int64 boxid = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  // repeated string canshu = 4;
  total_size += 1 * this->canshu_size();
  for (int i = 0; i < this->canshu_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->canshu(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operaterand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operaterand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operaterand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operaterand::MergeFrom(const operaterand& from) {
  GOOGLE_CHECK_NE(&from, this);
  canshu_.MergeFrom(from.canshu_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_randtype()) {
      set_randtype(from.randtype());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operaterand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operaterand::CopyFrom(const operaterand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operaterand::IsInitialized() const {

  return true;
}

void operaterand::Swap(operaterand* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(randtype_, other->randtype_);
    std::swap(boxid_, other->boxid_);
    canshu_.Swap(&other->canshu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operaterand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operaterand_descriptor_;
  metadata.reflection = operaterand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operaterand::kOperaterandListFieldNumber;
#endif  // !_MSC_VER

Sheet_operaterand::Sheet_operaterand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operaterand::InitAsDefaultInstance() {
}

Sheet_operaterand::Sheet_operaterand(const Sheet_operaterand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operaterand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operaterand::~Sheet_operaterand() {
  SharedDtor();
}

void Sheet_operaterand::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operaterand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operaterand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operaterand_descriptor_;
}

const Sheet_operaterand& Sheet_operaterand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operaterand* Sheet_operaterand::default_instance_ = NULL;

Sheet_operaterand* Sheet_operaterand::New() const {
  return new Sheet_operaterand;
}

void Sheet_operaterand::Clear() {
  operaterand_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operaterand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operaterand operaterand_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operaterand_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operaterand_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operaterand_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operaterand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operaterand operaterand_List = 1;
  for (int i = 0; i < this->operaterand_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operaterand_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operaterand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operaterand operaterand_List = 1;
  for (int i = 0; i < this->operaterand_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operaterand_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operaterand::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operaterand operaterand_List = 1;
  total_size += 1 * this->operaterand_list_size();
  for (int i = 0; i < this->operaterand_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operaterand_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operaterand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operaterand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operaterand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operaterand::MergeFrom(const Sheet_operaterand& from) {
  GOOGLE_CHECK_NE(&from, this);
  operaterand_list_.MergeFrom(from.operaterand_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operaterand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operaterand::CopyFrom(const Sheet_operaterand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operaterand::IsInitialized() const {

  return true;
}

void Sheet_operaterand::Swap(Sheet_operaterand* other) {
  if (other != this) {
    operaterand_list_.Swap(&other->operaterand_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operaterand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operaterand_descriptor_;
  metadata.reflection = Sheet_operaterand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatemooncard::kDayNumFieldNumber;
const int operatemooncard::kPayBackFieldNumber;
#endif  // !_MSC_VER

operatemooncard::operatemooncard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatemooncard::InitAsDefaultInstance() {
}

operatemooncard::operatemooncard(const operatemooncard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatemooncard::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  payback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatemooncard::~operatemooncard() {
  SharedDtor();
}

void operatemooncard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatemooncard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatemooncard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatemooncard_descriptor_;
}

const operatemooncard& operatemooncard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatemooncard* operatemooncard::default_instance_ = NULL;

operatemooncard* operatemooncard::New() const {
  return new operatemooncard;
}

void operatemooncard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daynum_ = 0;
    payback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatemooncard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dayNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_payBack;
        break;
      }

      // optional int32 payBack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payback_)));
          set_has_payback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatemooncard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dayNum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  // optional int32 payBack = 2;
  if (has_payback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->payback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatemooncard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dayNum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  // optional int32 payBack = 2;
  if (has_payback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->payback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatemooncard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dayNum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int32 payBack = 2;
    if (has_payback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatemooncard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatemooncard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatemooncard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatemooncard::MergeFrom(const operatemooncard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_payback()) {
      set_payback(from.payback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatemooncard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatemooncard::CopyFrom(const operatemooncard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatemooncard::IsInitialized() const {

  return true;
}

void operatemooncard::Swap(operatemooncard* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(payback_, other->payback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatemooncard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatemooncard_descriptor_;
  metadata.reflection = operatemooncard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatemooncard::kOperatemooncardListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatemooncard::Sheet_operatemooncard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatemooncard::InitAsDefaultInstance() {
}

Sheet_operatemooncard::Sheet_operatemooncard(const Sheet_operatemooncard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatemooncard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatemooncard::~Sheet_operatemooncard() {
  SharedDtor();
}

void Sheet_operatemooncard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatemooncard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatemooncard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatemooncard_descriptor_;
}

const Sheet_operatemooncard& Sheet_operatemooncard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatemooncard* Sheet_operatemooncard::default_instance_ = NULL;

Sheet_operatemooncard* Sheet_operatemooncard::New() const {
  return new Sheet_operatemooncard;
}

void Sheet_operatemooncard::Clear() {
  operatemooncard_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatemooncard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatemooncard operatemooncard_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatemooncard_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatemooncard_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatemooncard_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatemooncard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatemooncard operatemooncard_List = 1;
  for (int i = 0; i < this->operatemooncard_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatemooncard_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatemooncard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatemooncard operatemooncard_List = 1;
  for (int i = 0; i < this->operatemooncard_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatemooncard_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatemooncard::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatemooncard operatemooncard_List = 1;
  total_size += 1 * this->operatemooncard_list_size();
  for (int i = 0; i < this->operatemooncard_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatemooncard_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatemooncard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatemooncard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatemooncard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatemooncard::MergeFrom(const Sheet_operatemooncard& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatemooncard_list_.MergeFrom(from.operatemooncard_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatemooncard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatemooncard::CopyFrom(const Sheet_operatemooncard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatemooncard::IsInitialized() const {

  return true;
}

void Sheet_operatemooncard::Swap(Sheet_operatemooncard* other) {
  if (other != this) {
    operatemooncard_list_.Swap(&other->operatemooncard_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatemooncard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatemooncard_descriptor_;
  metadata.reflection = Sheet_operatemooncard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatefund::kIdFieldNumber;
const int operatefund::kLevelFieldNumber;
const int operatefund::kRebateSFieldNumber;
const int operatefund::kRebateLFieldNumber;
#endif  // !_MSC_VER

operatefund::operatefund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatefund::InitAsDefaultInstance() {
}

operatefund::operatefund(const operatefund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatefund::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  rebates_ = 0;
  rebatel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatefund::~operatefund() {
  SharedDtor();
}

void operatefund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatefund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatefund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatefund_descriptor_;
}

const operatefund& operatefund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatefund* operatefund::default_instance_ = NULL;

operatefund* operatefund::New() const {
  return new operatefund;
}

void operatefund::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
    rebates_ = 0;
    rebatel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatefund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rebateS;
        break;
      }

      // optional int32 rebateS = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebateS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rebates_)));
          set_has_rebates();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rebateL;
        break;
      }

      // optional int32 rebateL = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebateL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rebatel_)));
          set_has_rebatel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatefund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 rebateS = 3;
  if (has_rebates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rebates(), output);
  }

  // optional int32 rebateL = 4;
  if (has_rebatel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rebatel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatefund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 rebateS = 3;
  if (has_rebates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rebates(), target);
  }

  // optional int32 rebateL = 4;
  if (has_rebatel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rebatel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatefund::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 rebateS = 3;
    if (has_rebates()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rebates());
    }

    // optional int32 rebateL = 4;
    if (has_rebatel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rebatel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatefund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatefund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatefund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatefund::MergeFrom(const operatefund& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rebates()) {
      set_rebates(from.rebates());
    }
    if (from.has_rebatel()) {
      set_rebatel(from.rebatel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatefund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatefund::CopyFrom(const operatefund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatefund::IsInitialized() const {

  return true;
}

void operatefund::Swap(operatefund* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(rebates_, other->rebates_);
    std::swap(rebatel_, other->rebatel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatefund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatefund_descriptor_;
  metadata.reflection = operatefund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatefund::kOperatefundListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatefund::Sheet_operatefund()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatefund::InitAsDefaultInstance() {
}

Sheet_operatefund::Sheet_operatefund(const Sheet_operatefund& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatefund::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatefund::~Sheet_operatefund() {
  SharedDtor();
}

void Sheet_operatefund::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatefund::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatefund::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatefund_descriptor_;
}

const Sheet_operatefund& Sheet_operatefund::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatefund* Sheet_operatefund::default_instance_ = NULL;

Sheet_operatefund* Sheet_operatefund::New() const {
  return new Sheet_operatefund;
}

void Sheet_operatefund::Clear() {
  operatefund_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatefund::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatefund operatefund_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatefund_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatefund_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatefund_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatefund::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatefund operatefund_List = 1;
  for (int i = 0; i < this->operatefund_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatefund_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatefund::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatefund operatefund_List = 1;
  for (int i = 0; i < this->operatefund_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatefund_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatefund::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatefund operatefund_List = 1;
  total_size += 1 * this->operatefund_list_size();
  for (int i = 0; i < this->operatefund_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatefund_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatefund::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatefund* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatefund*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatefund::MergeFrom(const Sheet_operatefund& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatefund_list_.MergeFrom(from.operatefund_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatefund::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatefund::CopyFrom(const Sheet_operatefund& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatefund::IsInitialized() const {

  return true;
}

void Sheet_operatefund::Swap(Sheet_operatefund* other) {
  if (other != this) {
    operatefund_list_.Swap(&other->operatefund_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatefund::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatefund_descriptor_;
  metadata.reflection = Sheet_operatefund_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatetask::kIdFieldNumber;
const int operatetask::kTaskNanFieldNumber;
const int operatetask::kTaskTypeFieldNumber;
const int operatetask::kNumFieldNumber;
#endif  // !_MSC_VER

operatetask::operatetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatetask::InitAsDefaultInstance() {
}

operatetask::operatetask(const operatetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatetask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tasknan_ = 0;
  tasktype_ = 0;
  num_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatetask::~operatetask() {
  SharedDtor();
}

void operatetask::SharedDtor() {
  if (num_ != &::google::protobuf::internal::kEmptyString) {
    delete num_;
  }
  if (this != default_instance_) {
  }
}

void operatetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatetask_descriptor_;
}

const operatetask& operatetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatetask* operatetask::default_instance_ = NULL;

operatetask* operatetask::New() const {
  return new operatetask;
}

void operatetask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    tasknan_ = 0;
    tasktype_ = 0;
    if (has_num()) {
      if (num_ != &::google::protobuf::internal::kEmptyString) {
        num_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskNan;
        break;
      }

      // optional int32 taskNan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskNan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasknan_)));
          set_has_tasknan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional int32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_num;
        break;
      }

      // optional string num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 taskNan = 2;
  if (has_tasknan()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tasknan(), output);
  }

  // optional int32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tasktype(), output);
  }

  // optional string num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 taskNan = 2;
  if (has_tasknan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tasknan(), target);
  }

  // optional int32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tasktype(), target);
  }

  // optional string num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatetask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 taskNan = 2;
    if (has_tasknan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasknan());
    }

    // optional int32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }

    // optional string num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatetask::MergeFrom(const operatetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tasknan()) {
      set_tasknan(from.tasknan());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatetask::CopyFrom(const operatetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatetask::IsInitialized() const {

  return true;
}

void operatetask::Swap(operatetask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tasknan_, other->tasknan_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatetask_descriptor_;
  metadata.reflection = operatetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatetask::kOperatetaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatetask::Sheet_operatetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatetask::InitAsDefaultInstance() {
}

Sheet_operatetask::Sheet_operatetask(const Sheet_operatetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatetask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatetask::~Sheet_operatetask() {
  SharedDtor();
}

void Sheet_operatetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatetask_descriptor_;
}

const Sheet_operatetask& Sheet_operatetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatetask* Sheet_operatetask::default_instance_ = NULL;

Sheet_operatetask* Sheet_operatetask::New() const {
  return new Sheet_operatetask;
}

void Sheet_operatetask::Clear() {
  operatetask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatetask operatetask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatetask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatetask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatetask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatetask operatetask_List = 1;
  for (int i = 0; i < this->operatetask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatetask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatetask operatetask_List = 1;
  for (int i = 0; i < this->operatetask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatetask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatetask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatetask operatetask_List = 1;
  total_size += 1 * this->operatetask_list_size();
  for (int i = 0; i < this->operatetask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatetask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatetask::MergeFrom(const Sheet_operatetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatetask_list_.MergeFrom(from.operatetask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatetask::CopyFrom(const Sheet_operatetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatetask::IsInitialized() const {

  return true;
}

void Sheet_operatetask::Swap(Sheet_operatetask* other) {
  if (other != this) {
    operatetask_list_.Swap(&other->operatetask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatetask_descriptor_;
  metadata.reflection = Sheet_operatetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operateshop::kIdFieldNumber;
const int operateshop::kItemidFieldNumber;
const int operateshop::kPriceFieldNumber;
const int operateshop::kDPriceFieldNumber;
const int operateshop::kMoneyTypeFieldNumber;
const int operateshop::kTimesFieldNumber;
const int operateshop::kTimeLimitFieldNumber;
#endif  // !_MSC_VER

operateshop::operateshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateshop::InitAsDefaultInstance() {
}

operateshop::operateshop(const operateshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateshop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  price_ = 0;
  dprice_ = 0;
  moneytype_ = 0;
  times_ = 0;
  timelimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateshop::~operateshop() {
  SharedDtor();
}

void operateshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operateshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateshop_descriptor_;
}

const operateshop& operateshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateshop* operateshop::default_instance_ = NULL;

operateshop* operateshop::New() const {
  return new operateshop;
}

void operateshop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    price_ = 0;
    dprice_ = 0;
    moneytype_ = 0;
    times_ = 0;
    timelimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_price;
        break;
      }

      // optional int32 price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dPrice;
        break;
      }

      // optional int32 dPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dprice_)));
          set_has_dprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timeLimit;
        break;
      }

      // optional int32 timeLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timelimit_)));
          set_has_timelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->price(), output);
  }

  // optional int32 dPrice = 4;
  if (has_dprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dprice(), output);
  }

  // optional int32 moneyType = 5;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moneytype(), output);
  }

  // optional int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }

  // optional int32 timeLimit = 7;
  if (has_timelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->timelimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 price = 3;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->price(), target);
  }

  // optional int32 dPrice = 4;
  if (has_dprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dprice(), target);
  }

  // optional int32 moneyType = 5;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moneytype(), target);
  }

  // optional int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }

  // optional int32 timeLimit = 7;
  if (has_timelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->timelimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateshop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 price = 3;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 dPrice = 4;
    if (has_dprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dprice());
    }

    // optional int32 moneyType = 5;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

    // optional int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 timeLimit = 7;
    if (has_timelimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timelimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateshop::MergeFrom(const operateshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_dprice()) {
      set_dprice(from.dprice());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_timelimit()) {
      set_timelimit(from.timelimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateshop::CopyFrom(const operateshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateshop::IsInitialized() const {

  return true;
}

void operateshop::Swap(operateshop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(price_, other->price_);
    std::swap(dprice_, other->dprice_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(times_, other->times_);
    std::swap(timelimit_, other->timelimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateshop_descriptor_;
  metadata.reflection = operateshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateshop::kOperateshopListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateshop::Sheet_operateshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateshop::InitAsDefaultInstance() {
}

Sheet_operateshop::Sheet_operateshop(const Sheet_operateshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateshop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateshop::~Sheet_operateshop() {
  SharedDtor();
}

void Sheet_operateshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateshop_descriptor_;
}

const Sheet_operateshop& Sheet_operateshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateshop* Sheet_operateshop::default_instance_ = NULL;

Sheet_operateshop* Sheet_operateshop::New() const {
  return new Sheet_operateshop;
}

void Sheet_operateshop::Clear() {
  operateshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateshop operateshop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateshop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateshop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateshop operateshop_List = 1;
  for (int i = 0; i < this->operateshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateshop operateshop_List = 1;
  for (int i = 0; i < this->operateshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateshop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateshop operateshop_List = 1;
  total_size += 1 * this->operateshop_list_size();
  for (int i = 0; i < this->operateshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateshop::MergeFrom(const Sheet_operateshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateshop_list_.MergeFrom(from.operateshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateshop::CopyFrom(const Sheet_operateshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateshop::IsInitialized() const {

  return true;
}

void Sheet_operateshop::Swap(Sheet_operateshop* other) {
  if (other != this) {
    operateshop_list_.Swap(&other->operateshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateshop_descriptor_;
  metadata.reflection = Sheet_operateshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operatewish::kLevelFieldNumber;
const int operatewish::kExpFieldNumber;
#endif  // !_MSC_VER

operatewish::operatewish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operatewish::InitAsDefaultInstance() {
}

operatewish::operatewish(const operatewish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operatewish::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operatewish::~operatewish() {
  SharedDtor();
}

void operatewish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operatewish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operatewish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operatewish_descriptor_;
}

const operatewish& operatewish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operatewish* operatewish::default_instance_ = NULL;

operatewish* operatewish::New() const {
  return new operatewish;
}

void operatewish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operatewish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int64 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operatewish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operatewish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int64 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operatewish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operatewish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operatewish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operatewish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operatewish::MergeFrom(const operatewish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operatewish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operatewish::CopyFrom(const operatewish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operatewish::IsInitialized() const {

  return true;
}

void operatewish::Swap(operatewish* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operatewish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operatewish_descriptor_;
  metadata.reflection = operatewish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operatewish::kOperatewishListFieldNumber;
#endif  // !_MSC_VER

Sheet_operatewish::Sheet_operatewish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operatewish::InitAsDefaultInstance() {
}

Sheet_operatewish::Sheet_operatewish(const Sheet_operatewish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operatewish::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operatewish::~Sheet_operatewish() {
  SharedDtor();
}

void Sheet_operatewish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operatewish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operatewish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operatewish_descriptor_;
}

const Sheet_operatewish& Sheet_operatewish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operatewish* Sheet_operatewish::default_instance_ = NULL;

Sheet_operatewish* Sheet_operatewish::New() const {
  return new Sheet_operatewish;
}

void Sheet_operatewish::Clear() {
  operatewish_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operatewish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operatewish operatewish_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operatewish_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operatewish_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operatewish_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operatewish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operatewish operatewish_List = 1;
  for (int i = 0; i < this->operatewish_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operatewish_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operatewish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operatewish operatewish_List = 1;
  for (int i = 0; i < this->operatewish_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operatewish_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operatewish::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operatewish operatewish_List = 1;
  total_size += 1 * this->operatewish_list_size();
  for (int i = 0; i < this->operatewish_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operatewish_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operatewish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operatewish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operatewish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operatewish::MergeFrom(const Sheet_operatewish& from) {
  GOOGLE_CHECK_NE(&from, this);
  operatewish_list_.MergeFrom(from.operatewish_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operatewish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operatewish::CopyFrom(const Sheet_operatewish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operatewish::IsInitialized() const {

  return true;
}

void Sheet_operatewish::Swap(Sheet_operatewish* other) {
  if (other != this) {
    operatewish_list_.Swap(&other->operatewish_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operatewish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operatewish_descriptor_;
  metadata.reflection = Sheet_operatewish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operateturntable::kIdFieldNumber;
const int operateturntable::kItemIdFieldNumber;
const int operateturntable::kCountFieldNumber;
const int operateturntable::kProfFieldNumber;
const int operateturntable::kPrizeLevelFieldNumber;
const int operateturntable::kWeightFieldNumber;
const int operateturntable::kBroadcastFieldNumber;
const int operateturntable::kOrderFieldNumber;
const int operateturntable::kRelationFieldNumber;
#endif  // !_MSC_VER

operateturntable::operateturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateturntable::InitAsDefaultInstance() {
}

operateturntable::operateturntable(const operateturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateturntable::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  prof_ = 0;
  prizelevel_ = 0;
  weight_ = 0;
  broadcast_ = 0;
  order_ = 0;
  relation_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateturntable::~operateturntable() {
  SharedDtor();
}

void operateturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operateturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateturntable_descriptor_;
}

const operateturntable& operateturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateturntable* operateturntable::default_instance_ = NULL;

operateturntable* operateturntable::New() const {
  return new operateturntable;
}

void operateturntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    prof_ = 0;
    prizelevel_ = 0;
    weight_ = 0;
    broadcast_ = 0;
    order_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    relation_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_prizeLevel;
        break;
      }

      // optional int32 prizeLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizelevel_)));
          set_has_prizelevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_weight;
        break;
      }

      // optional int32 weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_broadcast;
        break;
      }

      // optional int32 broadcast = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_order;
        break;
      }

      // optional int32 order = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_relation;
        break;
      }

      // optional int64 relation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 prizeLevel = 5;
  if (has_prizelevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prizelevel(), output);
  }

  // optional int32 weight = 6;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->weight(), output);
  }

  // optional int32 broadcast = 7;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->broadcast(), output);
  }

  // optional int32 order = 8;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->order(), output);
  }

  // optional int64 relation = 9;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 prizeLevel = 5;
  if (has_prizelevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->prizelevel(), target);
  }

  // optional int32 weight = 6;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->weight(), target);
  }

  // optional int32 broadcast = 7;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->broadcast(), target);
  }

  // optional int32 order = 8;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->order(), target);
  }

  // optional int64 relation = 9;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateturntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 prizeLevel = 5;
    if (has_prizelevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizelevel());
    }

    // optional int32 weight = 6;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional int32 broadcast = 7;
    if (has_broadcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast());
    }

    // optional int32 order = 8;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 relation = 9;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateturntable::MergeFrom(const operateturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_prizelevel()) {
      set_prizelevel(from.prizelevel());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateturntable::CopyFrom(const operateturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateturntable::IsInitialized() const {

  return true;
}

void operateturntable::Swap(operateturntable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(prof_, other->prof_);
    std::swap(prizelevel_, other->prizelevel_);
    std::swap(weight_, other->weight_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(order_, other->order_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateturntable_descriptor_;
  metadata.reflection = operateturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateturntable::kOperateturntableListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateturntable::Sheet_operateturntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateturntable::InitAsDefaultInstance() {
}

Sheet_operateturntable::Sheet_operateturntable(const Sheet_operateturntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateturntable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateturntable::~Sheet_operateturntable() {
  SharedDtor();
}

void Sheet_operateturntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateturntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateturntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateturntable_descriptor_;
}

const Sheet_operateturntable& Sheet_operateturntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateturntable* Sheet_operateturntable::default_instance_ = NULL;

Sheet_operateturntable* Sheet_operateturntable::New() const {
  return new Sheet_operateturntable;
}

void Sheet_operateturntable::Clear() {
  operateturntable_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateturntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateturntable operateturntable_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateturntable_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateturntable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateturntable_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateturntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateturntable operateturntable_List = 1;
  for (int i = 0; i < this->operateturntable_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateturntable_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateturntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateturntable operateturntable_List = 1;
  for (int i = 0; i < this->operateturntable_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateturntable_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateturntable::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateturntable operateturntable_List = 1;
  total_size += 1 * this->operateturntable_list_size();
  for (int i = 0; i < this->operateturntable_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateturntable_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateturntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateturntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateturntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateturntable::MergeFrom(const Sheet_operateturntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateturntable_list_.MergeFrom(from.operateturntable_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateturntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateturntable::CopyFrom(const Sheet_operateturntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateturntable::IsInitialized() const {

  return true;
}

void Sheet_operateturntable::Swap(Sheet_operateturntable* other) {
  if (other != this) {
    operateturntable_list_.Swap(&other->operateturntable_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateturntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateturntable_descriptor_;
  metadata.reflection = Sheet_operateturntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int operateturntableTask::kIdFieldNumber;
const int operateturntableTask::kTaskTypeFieldNumber;
const int operateturntableTask::kTaskParamFieldNumber;
const int operateturntableTask::kItemIdFieldNumber;
const int operateturntableTask::kItemCountFieldNumber;
#endif  // !_MSC_VER

operateturntableTask::operateturntableTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void operateturntableTask::InitAsDefaultInstance() {
}

operateturntableTask::operateturntableTask(const operateturntableTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void operateturntableTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  tasktype_ = 0;
  taskparam_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  itemcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

operateturntableTask::~operateturntableTask() {
  SharedDtor();
}

void operateturntableTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void operateturntableTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* operateturntableTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return operateturntableTask_descriptor_;
}

const operateturntableTask& operateturntableTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

operateturntableTask* operateturntableTask::default_instance_ = NULL;

operateturntableTask* operateturntableTask::New() const {
  return new operateturntableTask;
}

void operateturntableTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    tasktype_ = 0;
    taskparam_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    itemcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool operateturntableTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskType;
        break;
      }

      // optional int32 taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskParam;
        break;
      }

      // optional int32 taskParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskparam_)));
          set_has_taskparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemCount;
        break;
      }

      // optional int32 itemCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemcount_)));
          set_has_itemcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void operateturntableTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tasktype(), output);
  }

  // optional int32 taskParam = 3;
  if (has_taskparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->taskparam(), output);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->itemid(), output);
  }

  // optional int32 itemCount = 5;
  if (has_itemcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* operateturntableTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 taskType = 2;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tasktype(), target);
  }

  // optional int32 taskParam = 3;
  if (has_taskparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->taskparam(), target);
  }

  // optional int64 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->itemid(), target);
  }

  // optional int32 itemCount = 5;
  if (has_itemcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int operateturntableTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 taskType = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tasktype());
    }

    // optional int32 taskParam = 3;
    if (has_taskparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskparam());
    }

    // optional int64 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 itemCount = 5;
    if (has_itemcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void operateturntableTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const operateturntableTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const operateturntableTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void operateturntableTask::MergeFrom(const operateturntableTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_taskparam()) {
      set_taskparam(from.taskparam());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcount()) {
      set_itemcount(from.itemcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void operateturntableTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void operateturntableTask::CopyFrom(const operateturntableTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool operateturntableTask::IsInitialized() const {

  return true;
}

void operateturntableTask::Swap(operateturntableTask* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(taskparam_, other->taskparam_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcount_, other->itemcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata operateturntableTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = operateturntableTask_descriptor_;
  metadata.reflection = operateturntableTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_operateturntableTask::kOperateturntableTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_operateturntableTask::Sheet_operateturntableTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_operateturntableTask::InitAsDefaultInstance() {
}

Sheet_operateturntableTask::Sheet_operateturntableTask(const Sheet_operateturntableTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_operateturntableTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_operateturntableTask::~Sheet_operateturntableTask() {
  SharedDtor();
}

void Sheet_operateturntableTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_operateturntableTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_operateturntableTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_operateturntableTask_descriptor_;
}

const Sheet_operateturntableTask& Sheet_operateturntableTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_operate_2eproto();
  return *default_instance_;
}

Sheet_operateturntableTask* Sheet_operateturntableTask::default_instance_ = NULL;

Sheet_operateturntableTask* Sheet_operateturntableTask::New() const {
  return new Sheet_operateturntableTask;
}

void Sheet_operateturntableTask::Clear() {
  operateturntabletask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_operateturntableTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operateturntableTask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operateturntabletask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_operateturntableTask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_operateturntableTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
  for (int i = 0; i < this->operateturntabletask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->operateturntabletask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_operateturntableTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
  for (int i = 0; i < this->operateturntabletask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->operateturntabletask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_operateturntableTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.operateturntableTask operateturntableTask_List = 1;
  total_size += 1 * this->operateturntabletask_list_size();
  for (int i = 0; i < this->operateturntabletask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operateturntabletask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_operateturntableTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_operateturntableTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_operateturntableTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_operateturntableTask::MergeFrom(const Sheet_operateturntableTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  operateturntabletask_list_.MergeFrom(from.operateturntabletask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_operateturntableTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_operateturntableTask::CopyFrom(const Sheet_operateturntableTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_operateturntableTask::IsInitialized() const {

  return true;
}

void Sheet_operateturntableTask::Swap(Sheet_operateturntableTask* other) {
  if (other != this) {
    operateturntabletask_list_.Swap(&other->operateturntabletask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_operateturntableTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_operateturntableTask_descriptor_;
  metadata.reflection = Sheet_operateturntableTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
